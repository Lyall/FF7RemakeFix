#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BonamikRt

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum BonamikRt.ESQEX_Bonamik_PossessionMode
// NumValues: 0x0004
enum class ESQEX_Bonamik_PossessionMode : uint8
{
	ESQEX_Bonamik_PSSMODE_SWING_Y            = 0,
	ESQEX_Bonamik_PSSMODE_SWING_Z            = 1,
	ESQEX_Bonamik_PSSMODE_RANDOM_ROLL        = 2,
	ESQEX_Bonamik_PSSMODE_MAX                = 3,
};

// Enum BonamikRt.SHAPEMATCHING_MODE
// NumValues: 0x0004
enum class ESHAPEMATCHING_MODE : uint8
{
	ESQEX_Bonamik_SMMODE_CHAINSHAPEMATCH     = 0,
	ESQEX_Bonamik_SMMODE_SEQCHAINMATCH       = 1,
	ESQEX_Bonamik_SMMODE_VOLUMEMATCH         = 2,
	ESQEX_Bonamik_SMMODE_MAX                 = 3,
};

// Enum BonamikRt.ESQEX_Bonamik_FastMotionHandling
// NumValues: 0x0004
enum class ESQEX_Bonamik_FastMotionHandling : uint8
{
	ESQEX_Bonamik_FMH_NONE                   = 0,
	ESQEX_Bonamik_FMH_LOCAL_FORCE            = 1,
	ESQEX_Bonamik_FMH_LSS                    = 2,
	ESQEX_Bonamik_FMH_MAX                    = 3,
};

// Enum BonamikRt.ESQEX_Bonamik_JointLinkSimulationMode
// NumValues: 0x0003
enum class ESQEX_Bonamik_JointLinkSimulationMode : uint8
{
	ESQEX_Bonamik_JOINTLINK_MODE_SEQ         = 0,
	ESQEX_Bonamik_JOINTLINK_MODE_BATCH       = 1,
	ESQEX_Bonamik_JOINTLINK_MODE_MAX         = 2,
};

// Enum BonamikRt.ESQEX_Bonamik_ConstraintType
// NumValues: 0x0006
enum class ESQEX_Bonamik_ConstraintType : uint8
{
	ESQEX_Bonamik_ConstraintType_None        = 0,
	ESQEX_Bonamik_ConstraintType_Sphere      = 1,
	ESQEX_Bonamik_ConstraintType_Spring      = 2,
	ESQEX_Bonamik_ConstraintType_GroundAttach = 3,
	ESQEX_Bonamik_ConstraintType_SecondOrder_Sphere = 4,
	ESQEX_Bonamik_ConstraintType_MAX         = 5,
};

// Enum BonamikRt.ESQEX_Bonamik_CollisionShape
// NumValues: 0x000B
enum class ESQEX_Bonamik_CollisionShape : uint8
{
	ESQEX_Bonamik_CollisionShape_None        = 0,
	ESQEX_Bonamik_CollisionShape_Sphere      = 1,
	ESQEX_Bonamik_CollisionShape_Capsule     = 2,
	ESQEX_Bonamik_CollisionShape_Inverse_Sphere = 3,
	ESQEX_Bonamik_CollisionShape_Inverse_Capsule = 4,
	ESQEX_Bonamik_CollisionShape_ReservedA   = 5,
	ESQEX_Bonamik_CollisionShape_Plane       = 6,
	ESQEX_Bonamik_CollisionShape_ReservedB   = 7,
	ESQEX_Bonamik_CollisionShape_Box         = 8,
	ESQEX_Bonamik_CollisionShape_Self_Collision = 9,
	ESQEX_Bonamik_CollisionShape_MAX         = 10,
};

// Enum BonamikRt.ESQEX_Bonamik_LinkType
// NumValues: 0x0008
enum class ESQEX_Bonamik_LinkType : uint8
{
	ESQEX_Bonamik_LinkType_Lateral           = 0,
	ESQEX_Bonamik_LinkType_ParentChild       = 1,
	ESQEX_Bonamik_LinkType_Bending           = 2,
	ESQEX_Bonamik_LinkType_PinConstraint     = 3,
	ESQEX_Bonamik_LinkType_KdiConstraint     = 4,
	ESQEX_Bonamik_LinkType_ReactionTransfer  = 5,
	ESQEX_Bonamik_LinkType_InverseFreeConstraint = 6,
	ESQEX_Bonamik_LinkType_MAX               = 7,
};

// Enum BonamikRt.ESQEX_BonamikTempCollisionShape
// NumValues: 0x0004
enum class ESQEX_BonamikTempCollisionShape : uint8
{
	None                                     = 0,
	Sphere                                   = 1,
	Box                                      = 8,
	ESQEX_MAX                                = 9,
};

// Enum BonamikRt.ESQEX_BonamikTempCollisionConstant
// NumValues: 0x0002
enum class ESQEX_BonamikTempCollisionConstant : uint8
{
	BodyMaximumNum                           = 10,
	ESQEX_MAX                                = 11,
};

// Enum BonamikRt.ESQEX_Bonamik_Parameters
// NumValues: 0x0013
enum class ESQEX_Bonamik_Parameters : uint8
{
	ESQEX_Bonamik_Parameters_Mass            = 0,
	ESQEX_Bonamik_Parameters_Friction        = 1,
	ESQEX_Bonamik_Parameters_Damping         = 2,
	ESQEX_Bonamik_Parameters_Bounciness      = 3,
	ESQEX_Bonamik_Parameters_WindDrag        = 4,
	ESQEX_Bonamik_Parameters_WindLift        = 5,
	ESQEX_Bonamik_Parameters_LFCoeff         = 6,
	ESQEX_Bonamik_Parameters_ParkRate        = 7,
	ESQEX_Bonamik_Parameters_MaxLF           = 8,
	ESQEX_Bonamik_Parameters_LFDrag          = 9,
	ESQEX_Bonamik_Parameters_LFLift          = 10,
	ESQEX_Bonamik_Parameters_InnerConeStr    = 11,
	ESQEX_Bonamik_Parameters_OuterConeStr    = 12,
	ESQEX_Bonamik_Parameters_LinkStr         = 13,
	ESQEX_Bonamik_Parameters_ConeLimit       = 14,
	ESQEX_Bonamik_Parameters_ConeOffset      = 15,
	ESQEX_Bonamik_Parameters_ConeLimitOffset = 16,
	ESQEX_Bonamik_Parameters_ShapeSize       = 17,
	ESQEX_Bonamik_Parameters_MAX             = 18,
};

// Enum BonamikRt.ESQEX_Bonamik_GlobalOutOfCamera
// NumValues: 0x0003
enum class ESQEX_Bonamik_GlobalOutOfCamera : uint8
{
	Default                                  = 0,
	Override                                 = 1,
	ESQEX_Bonamik_MAX                        = 2,
};

// Enum BonamikRt.ESQEX_Bonamik_EmissiveDirection
// NumValues: 0x0004
enum class ESQEX_Bonamik_EmissiveDirection : uint8
{
	ESQEX_Bonamik_EmissiveDirection_UpVec    = 0,
	ESQEX_Bonamik_EmissiveDirection_ModelSpace = 1,
	ESQEX_Bonamik_EmissiveDirection_WorldSpace = 2,
	ESQEX_Bonamik_EmissiveDirection_MAX      = 3,
};

// Enum BonamikRt.ESQEX_Bonamik_WindOwnerType
// NumValues: 0x0006
enum class ESQEX_Bonamik_WindOwnerType : uint8
{
	ESQEX_Bonamik_WindOwnerType_Actor        = 0,
	ESQEX_Bonamik_WindOwnerType_Preset       = 1,
	ESQEX_Bonamik_WindOwnerType_AnimNotify   = 2,
	ESQEX_Bonamik_WindOwnerType_Matinee      = 3,
	ESQEX_Bonamik_WindOwnerType_AllTypes     = 4,
	ESQEX_Bonamik_WindOwnerType_MAX          = 5,
};

// Enum BonamikRt.ESQEX_Bonamik_WindAreaType
// NumValues: 0x0004
enum class ESQEX_Bonamik_WindAreaType : uint8
{
	ESQEX_Bonamik_WindAreaType_Global        = 0,
	ESQEX_Bonamik_WindAreaType_Box           = 1,
	ESQEX_Bonamik_WindAreaType_Sphere        = 2,
	ESQEX_Bonamik_WindAreaType_MAX           = 3,
};

// Enum BonamikRt.ESQEX_Bonamik_WindType_Notify
// NumValues: 0x0003
enum class ESQEX_Bonamik_WindType_Notify : uint8
{
	ESQEX_Bonamik_WindType_Notify_Directional = 0,
	ESQEX_Bonamik_WindType_Notify_PointBlast = 1,
	ESQEX_Bonamik_WindType_Notify_MAX        = 2,
};

// Enum BonamikRt.ESQEX_Bonamik_CustomWindType
// NumValues: 0x0004
enum class ESQEX_Bonamik_CustomWindType : uint8
{
	ESQEX_Bonamik_CustomWindType_Directional = 0,
	ESQEX_Bonamik_CustomWindType_Wave        = 1,
	ESQEX_Bonamik_CustomWindType_PointBlast  = 2,
	ESQEX_Bonamik_CustomWindType_MAX         = 3,
};

// Enum BonamikRt.ESQEX_Bonamik_WindType
// NumValues: 0x0005
enum class ESQEX_Bonamik_WindType : uint8
{
	ESQEX_Bonamik_WindType_Directional       = 0,
	ESQEX_Bonamik_WindType_Wave              = 1,
	ESQEX_Bonamik_WindType_CustomWave        = 2,
	ESQEX_Bonamik_WindType_PointBlast        = 3,
	ESQEX_Bonamik_WindType_MAX               = 4,
};

// ScriptStruct BonamikRt.SQEX_BonamikTempCollisionParameter
// 0x0044 (0x0044 - 0x0000)
struct FSQEX_BonamikTempCollisionParameter final
{
public:
	class FName                                   m_BoneName;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   m_Group;                                           // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQEX_BonamikTempCollisionShape               m_ShapeType;                                       // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_ShapeParam0;                                     // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                m_ShapeParam1;                                     // 0x0018(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                m_Position;                                        // 0x0024(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_FixedWorldPosition;                              // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               m_Rotation;                                        // 0x0034(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          m_FixedWorldRotation;                              // 0x0040(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQEX_BonamikTempCollisionParameter) == 0x000004, "Wrong alignment on FSQEX_BonamikTempCollisionParameter");
static_assert(sizeof(FSQEX_BonamikTempCollisionParameter) == 0x000044, "Wrong size on FSQEX_BonamikTempCollisionParameter");
static_assert(offsetof(FSQEX_BonamikTempCollisionParameter, m_BoneName) == 0x000000, "Member 'FSQEX_BonamikTempCollisionParameter::m_BoneName' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikTempCollisionParameter, m_Group) == 0x000008, "Member 'FSQEX_BonamikTempCollisionParameter::m_Group' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikTempCollisionParameter, m_ShapeType) == 0x000010, "Member 'FSQEX_BonamikTempCollisionParameter::m_ShapeType' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikTempCollisionParameter, m_ShapeParam0) == 0x000014, "Member 'FSQEX_BonamikTempCollisionParameter::m_ShapeParam0' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikTempCollisionParameter, m_ShapeParam1) == 0x000018, "Member 'FSQEX_BonamikTempCollisionParameter::m_ShapeParam1' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikTempCollisionParameter, m_Position) == 0x000024, "Member 'FSQEX_BonamikTempCollisionParameter::m_Position' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikTempCollisionParameter, m_FixedWorldPosition) == 0x000030, "Member 'FSQEX_BonamikTempCollisionParameter::m_FixedWorldPosition' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikTempCollisionParameter, m_Rotation) == 0x000034, "Member 'FSQEX_BonamikTempCollisionParameter::m_Rotation' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikTempCollisionParameter, m_FixedWorldRotation) == 0x000040, "Member 'FSQEX_BonamikTempCollisionParameter::m_FixedWorldRotation' has a wrong offset!");

// ScriptStruct BonamikRt.SQEX_BonamikPossessionDesc
// 0x0040 (0x0040 - 0x0000)
struct FSQEX_BonamikPossessionDesc final
{
public:
	class FString                                 m_BodyName;                                        // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_BodyId;                                          // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_Time;                                            // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQEX_Bonamik_PossessionMode                  m_Mode;                                            // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         m_SubMode;                                         // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_IsFlow;                                          // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_DrawingRadius;                                   // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_TimeToActivateNext;                              // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_Magnitude;                                       // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_IncrementalMagnitude;                            // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_MaxMagnitude;                                    // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_DelayTime;                                       // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQEX_BonamikPossessionDesc) == 0x000008, "Wrong alignment on FSQEX_BonamikPossessionDesc");
static_assert(sizeof(FSQEX_BonamikPossessionDesc) == 0x000040, "Wrong size on FSQEX_BonamikPossessionDesc");
static_assert(offsetof(FSQEX_BonamikPossessionDesc, m_BodyName) == 0x000000, "Member 'FSQEX_BonamikPossessionDesc::m_BodyName' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikPossessionDesc, m_BodyId) == 0x000010, "Member 'FSQEX_BonamikPossessionDesc::m_BodyId' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikPossessionDesc, m_Time) == 0x000014, "Member 'FSQEX_BonamikPossessionDesc::m_Time' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikPossessionDesc, m_Mode) == 0x000018, "Member 'FSQEX_BonamikPossessionDesc::m_Mode' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikPossessionDesc, m_SubMode) == 0x00001C, "Member 'FSQEX_BonamikPossessionDesc::m_SubMode' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikPossessionDesc, m_IsFlow) == 0x000020, "Member 'FSQEX_BonamikPossessionDesc::m_IsFlow' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikPossessionDesc, m_DrawingRadius) == 0x000024, "Member 'FSQEX_BonamikPossessionDesc::m_DrawingRadius' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikPossessionDesc, m_TimeToActivateNext) == 0x000028, "Member 'FSQEX_BonamikPossessionDesc::m_TimeToActivateNext' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikPossessionDesc, m_Magnitude) == 0x00002C, "Member 'FSQEX_BonamikPossessionDesc::m_Magnitude' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikPossessionDesc, m_IncrementalMagnitude) == 0x000030, "Member 'FSQEX_BonamikPossessionDesc::m_IncrementalMagnitude' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikPossessionDesc, m_MaxMagnitude) == 0x000034, "Member 'FSQEX_BonamikPossessionDesc::m_MaxMagnitude' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikPossessionDesc, m_DelayTime) == 0x000038, "Member 'FSQEX_BonamikPossessionDesc::m_DelayTime' has a wrong offset!");

// ScriptStruct BonamikRt.SQEX_BonamikShapeMatchingDesc
// 0x00D4 (0x00D4 - 0x0000)
struct FSQEX_BonamikShapeMatchingDesc final
{
public:
	int32                                         m_TotalParticle;                                   // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_RegionSize;                                      // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_Stiffness;                                       // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        m_ParticleIds[0x32];                               // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQEX_BonamikShapeMatchingDesc) == 0x000004, "Wrong alignment on FSQEX_BonamikShapeMatchingDesc");
static_assert(sizeof(FSQEX_BonamikShapeMatchingDesc) == 0x0000D4, "Wrong size on FSQEX_BonamikShapeMatchingDesc");
static_assert(offsetof(FSQEX_BonamikShapeMatchingDesc, m_TotalParticle) == 0x000000, "Member 'FSQEX_BonamikShapeMatchingDesc::m_TotalParticle' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikShapeMatchingDesc, m_RegionSize) == 0x000004, "Member 'FSQEX_BonamikShapeMatchingDesc::m_RegionSize' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikShapeMatchingDesc, m_Stiffness) == 0x000008, "Member 'FSQEX_BonamikShapeMatchingDesc::m_Stiffness' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikShapeMatchingDesc, m_ParticleIds) == 0x00000C, "Member 'FSQEX_BonamikShapeMatchingDesc::m_ParticleIds' has a wrong offset!");

// ScriptStruct BonamikRt.SQEX_BonamikPlaneDesc
// 0x0078 (0x0078 - 0x0000)
struct FSQEX_BonamikPlaneDesc final
{
public:
	uint32                                        m_GroupId;                                         // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 m_ParticleAName;                                   // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 m_ParticleBName;                                   // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 m_ParticleCName;                                   // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_ParticleA;                                       // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_ParticleB;                                       // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_ParticleC;                                       // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        m_Index;                                           // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_Thickness;                                       // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_Offset;                                          // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_IsCollision;                                     // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         m_CollisionBatchNo;                                // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_ColId[0x8];                                      // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQEX_BonamikPlaneDesc) == 0x000008, "Wrong alignment on FSQEX_BonamikPlaneDesc");
static_assert(sizeof(FSQEX_BonamikPlaneDesc) == 0x000078, "Wrong size on FSQEX_BonamikPlaneDesc");
static_assert(offsetof(FSQEX_BonamikPlaneDesc, m_GroupId) == 0x000000, "Member 'FSQEX_BonamikPlaneDesc::m_GroupId' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikPlaneDesc, m_ParticleAName) == 0x000008, "Member 'FSQEX_BonamikPlaneDesc::m_ParticleAName' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikPlaneDesc, m_ParticleBName) == 0x000018, "Member 'FSQEX_BonamikPlaneDesc::m_ParticleBName' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikPlaneDesc, m_ParticleCName) == 0x000028, "Member 'FSQEX_BonamikPlaneDesc::m_ParticleCName' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikPlaneDesc, m_ParticleA) == 0x000038, "Member 'FSQEX_BonamikPlaneDesc::m_ParticleA' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikPlaneDesc, m_ParticleB) == 0x00003C, "Member 'FSQEX_BonamikPlaneDesc::m_ParticleB' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikPlaneDesc, m_ParticleC) == 0x000040, "Member 'FSQEX_BonamikPlaneDesc::m_ParticleC' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikPlaneDesc, m_Index) == 0x000044, "Member 'FSQEX_BonamikPlaneDesc::m_Index' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikPlaneDesc, m_Thickness) == 0x000048, "Member 'FSQEX_BonamikPlaneDesc::m_Thickness' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikPlaneDesc, m_Offset) == 0x00004C, "Member 'FSQEX_BonamikPlaneDesc::m_Offset' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikPlaneDesc, m_IsCollision) == 0x000050, "Member 'FSQEX_BonamikPlaneDesc::m_IsCollision' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikPlaneDesc, m_CollisionBatchNo) == 0x000054, "Member 'FSQEX_BonamikPlaneDesc::m_CollisionBatchNo' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikPlaneDesc, m_ColId) == 0x000058, "Member 'FSQEX_BonamikPlaneDesc::m_ColId' has a wrong offset!");

// ScriptStruct BonamikRt.CustomWindSettings
// 0x0070 (0x0070 - 0x0000)
struct FCustomWindSettings final
{
public:
	ESQEX_Bonamik_CustomWindType                  m_WindType;                                        // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                m_WindForce;                                       // 0x0004(0x000C)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                m_RandomRange;                                     // 0x0010(0x000C)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_RandomTime;                                      // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                m_WaveMagnitude;                                   // 0x0020(0x000C)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                m_WaveFrequency;                                   // 0x002C(0x000C)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                m_WaveMagOffset;                                   // 0x0038(0x000C)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                m_WaveFreqOffset;                                  // 0x0044(0x000C)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_WaveTime;                                        // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_PointStrength;                                   // 0x0054(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_BlastRange;                                      // 0x0058(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_BlastSpeed;                                      // 0x005C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_PointRadius;                                     // 0x0060(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_PeakInRange;                                     // 0x0064(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_StartFrame;                                      // 0x0068(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_LoopNum;                                         // 0x006C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCustomWindSettings) == 0x000004, "Wrong alignment on FCustomWindSettings");
static_assert(sizeof(FCustomWindSettings) == 0x000070, "Wrong size on FCustomWindSettings");
static_assert(offsetof(FCustomWindSettings, m_WindType) == 0x000000, "Member 'FCustomWindSettings::m_WindType' has a wrong offset!");
static_assert(offsetof(FCustomWindSettings, m_WindForce) == 0x000004, "Member 'FCustomWindSettings::m_WindForce' has a wrong offset!");
static_assert(offsetof(FCustomWindSettings, m_RandomRange) == 0x000010, "Member 'FCustomWindSettings::m_RandomRange' has a wrong offset!");
static_assert(offsetof(FCustomWindSettings, m_RandomTime) == 0x00001C, "Member 'FCustomWindSettings::m_RandomTime' has a wrong offset!");
static_assert(offsetof(FCustomWindSettings, m_WaveMagnitude) == 0x000020, "Member 'FCustomWindSettings::m_WaveMagnitude' has a wrong offset!");
static_assert(offsetof(FCustomWindSettings, m_WaveFrequency) == 0x00002C, "Member 'FCustomWindSettings::m_WaveFrequency' has a wrong offset!");
static_assert(offsetof(FCustomWindSettings, m_WaveMagOffset) == 0x000038, "Member 'FCustomWindSettings::m_WaveMagOffset' has a wrong offset!");
static_assert(offsetof(FCustomWindSettings, m_WaveFreqOffset) == 0x000044, "Member 'FCustomWindSettings::m_WaveFreqOffset' has a wrong offset!");
static_assert(offsetof(FCustomWindSettings, m_WaveTime) == 0x000050, "Member 'FCustomWindSettings::m_WaveTime' has a wrong offset!");
static_assert(offsetof(FCustomWindSettings, m_PointStrength) == 0x000054, "Member 'FCustomWindSettings::m_PointStrength' has a wrong offset!");
static_assert(offsetof(FCustomWindSettings, m_BlastRange) == 0x000058, "Member 'FCustomWindSettings::m_BlastRange' has a wrong offset!");
static_assert(offsetof(FCustomWindSettings, m_BlastSpeed) == 0x00005C, "Member 'FCustomWindSettings::m_BlastSpeed' has a wrong offset!");
static_assert(offsetof(FCustomWindSettings, m_PointRadius) == 0x000060, "Member 'FCustomWindSettings::m_PointRadius' has a wrong offset!");
static_assert(offsetof(FCustomWindSettings, m_PeakInRange) == 0x000064, "Member 'FCustomWindSettings::m_PeakInRange' has a wrong offset!");
static_assert(offsetof(FCustomWindSettings, m_StartFrame) == 0x000068, "Member 'FCustomWindSettings::m_StartFrame' has a wrong offset!");
static_assert(offsetof(FCustomWindSettings, m_LoopNum) == 0x00006C, "Member 'FCustomWindSettings::m_LoopNum' has a wrong offset!");

// ScriptStruct BonamikRt.SQEX_BonamikPresetWindInstance
// 0x0020 (0x0020 - 0x0000)
struct FSQEX_BonamikPresetWindInstance final
{
public:
	class FName                                   m_PresetName;                                      // 0x0000(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQEX_BonamikWind*                      m_Wind;                                            // 0x0008(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           m_TargetGroups;                                    // 0x0010(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQEX_BonamikPresetWindInstance) == 0x000008, "Wrong alignment on FSQEX_BonamikPresetWindInstance");
static_assert(sizeof(FSQEX_BonamikPresetWindInstance) == 0x000020, "Wrong size on FSQEX_BonamikPresetWindInstance");
static_assert(offsetof(FSQEX_BonamikPresetWindInstance, m_PresetName) == 0x000000, "Member 'FSQEX_BonamikPresetWindInstance::m_PresetName' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikPresetWindInstance, m_Wind) == 0x000008, "Member 'FSQEX_BonamikPresetWindInstance::m_Wind' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikPresetWindInstance, m_TargetGroups) == 0x000010, "Member 'FSQEX_BonamikPresetWindInstance::m_TargetGroups' has a wrong offset!");

// ScriptStruct BonamikRt.SQEX_BonamikBodyDesc
// 0x00F0 (0x00F0 - 0x0000)
struct FSQEX_BonamikBodyDesc final
{
public:
	uint32                                        m_Index;                                           // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 m_JointName;                                       // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 m_ParentBodyName;                                  // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 m_ChildBodyName;                                   // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_ParentId;                                        // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_ChildId;                                         // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        m_GroupId;                                         // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_ColId[0x8];                                      // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_IsKinematic;                                     // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_IsCollision;                                     // 0x0065(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_IsMultipleCollisionObject;                       // 0x0066(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_67[0x1];                                       // 0x0067(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_Mass;                                            // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_Inertia;                                         // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_Radius;                                          // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_Damping;                                         // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_Bounciness;                                      // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_Friction;                                        // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_WindDrag;                                        // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_WindLift;                                        // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_LocalTransCoeff;                                 // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_MaxLocalTrans;                                   // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQEX_Bonamik_CollisionShape                  m_ColShape;                                        // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQEX_Bonamik_ConstraintType                  m_AddiConstType;                                   // 0x0091(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_92[0x2];                                       // 0x0092(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_AddiConstStr;                                    // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_AddiConstRad;                                    // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                m_LocalTransform;                                  // 0x009C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A8[0x8];                                       // 0x00A8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  m_LocalRotation;                                   // 0x00B0(0x0010)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint32                                        m_CollisionBatchNo;                                // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                m_LocalScale;                                      // 0x00C4(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_ConcaveRatio;                                    // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_LFcoeff;                                         // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_ParkRate;                                        // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_MaxLF;                                           // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_LFdrag;                                          // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_LFlift;                                          // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E8[0x8];                                       // 0x00E8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQEX_BonamikBodyDesc) == 0x000010, "Wrong alignment on FSQEX_BonamikBodyDesc");
static_assert(sizeof(FSQEX_BonamikBodyDesc) == 0x0000F0, "Wrong size on FSQEX_BonamikBodyDesc");
static_assert(offsetof(FSQEX_BonamikBodyDesc, m_Index) == 0x000000, "Member 'FSQEX_BonamikBodyDesc::m_Index' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikBodyDesc, m_JointName) == 0x000008, "Member 'FSQEX_BonamikBodyDesc::m_JointName' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikBodyDesc, m_ParentBodyName) == 0x000018, "Member 'FSQEX_BonamikBodyDesc::m_ParentBodyName' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikBodyDesc, m_ChildBodyName) == 0x000028, "Member 'FSQEX_BonamikBodyDesc::m_ChildBodyName' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikBodyDesc, m_ParentId) == 0x000038, "Member 'FSQEX_BonamikBodyDesc::m_ParentId' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikBodyDesc, m_ChildId) == 0x00003C, "Member 'FSQEX_BonamikBodyDesc::m_ChildId' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikBodyDesc, m_GroupId) == 0x000040, "Member 'FSQEX_BonamikBodyDesc::m_GroupId' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikBodyDesc, m_ColId) == 0x000044, "Member 'FSQEX_BonamikBodyDesc::m_ColId' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikBodyDesc, m_IsKinematic) == 0x000064, "Member 'FSQEX_BonamikBodyDesc::m_IsKinematic' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikBodyDesc, m_IsCollision) == 0x000065, "Member 'FSQEX_BonamikBodyDesc::m_IsCollision' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikBodyDesc, m_IsMultipleCollisionObject) == 0x000066, "Member 'FSQEX_BonamikBodyDesc::m_IsMultipleCollisionObject' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikBodyDesc, m_Mass) == 0x000068, "Member 'FSQEX_BonamikBodyDesc::m_Mass' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikBodyDesc, m_Inertia) == 0x00006C, "Member 'FSQEX_BonamikBodyDesc::m_Inertia' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikBodyDesc, m_Radius) == 0x000070, "Member 'FSQEX_BonamikBodyDesc::m_Radius' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikBodyDesc, m_Damping) == 0x000074, "Member 'FSQEX_BonamikBodyDesc::m_Damping' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikBodyDesc, m_Bounciness) == 0x000078, "Member 'FSQEX_BonamikBodyDesc::m_Bounciness' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikBodyDesc, m_Friction) == 0x00007C, "Member 'FSQEX_BonamikBodyDesc::m_Friction' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikBodyDesc, m_WindDrag) == 0x000080, "Member 'FSQEX_BonamikBodyDesc::m_WindDrag' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikBodyDesc, m_WindLift) == 0x000084, "Member 'FSQEX_BonamikBodyDesc::m_WindLift' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikBodyDesc, m_LocalTransCoeff) == 0x000088, "Member 'FSQEX_BonamikBodyDesc::m_LocalTransCoeff' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikBodyDesc, m_MaxLocalTrans) == 0x00008C, "Member 'FSQEX_BonamikBodyDesc::m_MaxLocalTrans' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikBodyDesc, m_ColShape) == 0x000090, "Member 'FSQEX_BonamikBodyDesc::m_ColShape' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikBodyDesc, m_AddiConstType) == 0x000091, "Member 'FSQEX_BonamikBodyDesc::m_AddiConstType' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikBodyDesc, m_AddiConstStr) == 0x000094, "Member 'FSQEX_BonamikBodyDesc::m_AddiConstStr' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikBodyDesc, m_AddiConstRad) == 0x000098, "Member 'FSQEX_BonamikBodyDesc::m_AddiConstRad' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikBodyDesc, m_LocalTransform) == 0x00009C, "Member 'FSQEX_BonamikBodyDesc::m_LocalTransform' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikBodyDesc, m_LocalRotation) == 0x0000B0, "Member 'FSQEX_BonamikBodyDesc::m_LocalRotation' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikBodyDesc, m_CollisionBatchNo) == 0x0000C0, "Member 'FSQEX_BonamikBodyDesc::m_CollisionBatchNo' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikBodyDesc, m_LocalScale) == 0x0000C4, "Member 'FSQEX_BonamikBodyDesc::m_LocalScale' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikBodyDesc, m_ConcaveRatio) == 0x0000D0, "Member 'FSQEX_BonamikBodyDesc::m_ConcaveRatio' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikBodyDesc, m_LFcoeff) == 0x0000D4, "Member 'FSQEX_BonamikBodyDesc::m_LFcoeff' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikBodyDesc, m_ParkRate) == 0x0000D8, "Member 'FSQEX_BonamikBodyDesc::m_ParkRate' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikBodyDesc, m_MaxLF) == 0x0000DC, "Member 'FSQEX_BonamikBodyDesc::m_MaxLF' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikBodyDesc, m_LFdrag) == 0x0000E0, "Member 'FSQEX_BonamikBodyDesc::m_LFdrag' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikBodyDesc, m_LFlift) == 0x0000E4, "Member 'FSQEX_BonamikBodyDesc::m_LFlift' has a wrong offset!");

// ScriptStruct BonamikRt.SQEX_BonamikLinkDesc
// 0x0088 (0x0088 - 0x0000)
struct FSQEX_BonamikLinkDesc final
{
public:
	class FString                                 m_ParentBodyName;                                  // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 m_ChildBodyName;                                   // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        m_ParentId;                                        // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        m_ChildId;                                         // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQEX_Bonamik_LinkType                        m_LinkType;                                        // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_IsSelfCollision;                                 // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_EnableJointTwist;                                // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_EnableCone;                                      // 0x002B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_EnableConeAnimation;                             // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_LinkStr;                                         // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_LinkParentStr;                                   // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_ConeInnerStr;                                    // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_ConeOuterStr;                                    // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_ConeParentStr;                                   // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_LimitY;                                          // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_LimitZ;                                          // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_ConeOffsetY;                                     // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_ConeOffsetZ;                                     // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_LimitOffsetY;                                    // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_LimitOffsetZ;                                    // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_IsCollisionReceiver;                             // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_IsCollisionRepulsor;                             // 0x005D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_IsLRA;                                           // 0x005E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5F[0x1];                                       // 0x005F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_LRAstr;                                          // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_LRAdamping;                                      // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        m_LinkBatchNo;                                     // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        m_ConeBatchNo;                                     // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        m_CollisionBatchNo;                                // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_PinRadius;                                       // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_PinStr;                                          // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_KdiTrans;                                        // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_KdiRot;                                          // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_ConcaveRatio;                                    // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQEX_BonamikLinkDesc) == 0x000008, "Wrong alignment on FSQEX_BonamikLinkDesc");
static_assert(sizeof(FSQEX_BonamikLinkDesc) == 0x000088, "Wrong size on FSQEX_BonamikLinkDesc");
static_assert(offsetof(FSQEX_BonamikLinkDesc, m_ParentBodyName) == 0x000000, "Member 'FSQEX_BonamikLinkDesc::m_ParentBodyName' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikLinkDesc, m_ChildBodyName) == 0x000010, "Member 'FSQEX_BonamikLinkDesc::m_ChildBodyName' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikLinkDesc, m_ParentId) == 0x000020, "Member 'FSQEX_BonamikLinkDesc::m_ParentId' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikLinkDesc, m_ChildId) == 0x000024, "Member 'FSQEX_BonamikLinkDesc::m_ChildId' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikLinkDesc, m_LinkType) == 0x000028, "Member 'FSQEX_BonamikLinkDesc::m_LinkType' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikLinkDesc, m_IsSelfCollision) == 0x000029, "Member 'FSQEX_BonamikLinkDesc::m_IsSelfCollision' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikLinkDesc, m_EnableJointTwist) == 0x00002A, "Member 'FSQEX_BonamikLinkDesc::m_EnableJointTwist' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikLinkDesc, m_EnableCone) == 0x00002B, "Member 'FSQEX_BonamikLinkDesc::m_EnableCone' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikLinkDesc, m_EnableConeAnimation) == 0x00002C, "Member 'FSQEX_BonamikLinkDesc::m_EnableConeAnimation' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikLinkDesc, m_LinkStr) == 0x000030, "Member 'FSQEX_BonamikLinkDesc::m_LinkStr' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikLinkDesc, m_LinkParentStr) == 0x000034, "Member 'FSQEX_BonamikLinkDesc::m_LinkParentStr' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikLinkDesc, m_ConeInnerStr) == 0x000038, "Member 'FSQEX_BonamikLinkDesc::m_ConeInnerStr' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikLinkDesc, m_ConeOuterStr) == 0x00003C, "Member 'FSQEX_BonamikLinkDesc::m_ConeOuterStr' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikLinkDesc, m_ConeParentStr) == 0x000040, "Member 'FSQEX_BonamikLinkDesc::m_ConeParentStr' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikLinkDesc, m_LimitY) == 0x000044, "Member 'FSQEX_BonamikLinkDesc::m_LimitY' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikLinkDesc, m_LimitZ) == 0x000048, "Member 'FSQEX_BonamikLinkDesc::m_LimitZ' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikLinkDesc, m_ConeOffsetY) == 0x00004C, "Member 'FSQEX_BonamikLinkDesc::m_ConeOffsetY' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikLinkDesc, m_ConeOffsetZ) == 0x000050, "Member 'FSQEX_BonamikLinkDesc::m_ConeOffsetZ' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikLinkDesc, m_LimitOffsetY) == 0x000054, "Member 'FSQEX_BonamikLinkDesc::m_LimitOffsetY' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikLinkDesc, m_LimitOffsetZ) == 0x000058, "Member 'FSQEX_BonamikLinkDesc::m_LimitOffsetZ' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikLinkDesc, m_IsCollisionReceiver) == 0x00005C, "Member 'FSQEX_BonamikLinkDesc::m_IsCollisionReceiver' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikLinkDesc, m_IsCollisionRepulsor) == 0x00005D, "Member 'FSQEX_BonamikLinkDesc::m_IsCollisionRepulsor' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikLinkDesc, m_IsLRA) == 0x00005E, "Member 'FSQEX_BonamikLinkDesc::m_IsLRA' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikLinkDesc, m_LRAstr) == 0x000060, "Member 'FSQEX_BonamikLinkDesc::m_LRAstr' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikLinkDesc, m_LRAdamping) == 0x000064, "Member 'FSQEX_BonamikLinkDesc::m_LRAdamping' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikLinkDesc, m_LinkBatchNo) == 0x000068, "Member 'FSQEX_BonamikLinkDesc::m_LinkBatchNo' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikLinkDesc, m_ConeBatchNo) == 0x00006C, "Member 'FSQEX_BonamikLinkDesc::m_ConeBatchNo' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikLinkDesc, m_CollisionBatchNo) == 0x000070, "Member 'FSQEX_BonamikLinkDesc::m_CollisionBatchNo' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikLinkDesc, m_PinRadius) == 0x000074, "Member 'FSQEX_BonamikLinkDesc::m_PinRadius' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikLinkDesc, m_PinStr) == 0x000078, "Member 'FSQEX_BonamikLinkDesc::m_PinStr' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikLinkDesc, m_KdiTrans) == 0x00007C, "Member 'FSQEX_BonamikLinkDesc::m_KdiTrans' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikLinkDesc, m_KdiRot) == 0x000080, "Member 'FSQEX_BonamikLinkDesc::m_KdiRot' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikLinkDesc, m_ConcaveRatio) == 0x000084, "Member 'FSQEX_BonamikLinkDesc::m_ConcaveRatio' has a wrong offset!");

// ScriptStruct BonamikRt.SQEX_BonamikSceneManagerDesc
// 0x0470 (0x0470 - 0x0000)
struct FSQEX_BonamikSceneManagerDesc final
{
public:
	bool                                          m_IsEnable;                                        // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_IsUseGPU;                                        // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        m_SubStep;                                         // 0x0004(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_Dt;                                              // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        m_TotalGroup;                                      // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 m_GroupName[0x30];                                 // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_IsEnableLSS;                                     // 0x0310(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_311[0x3];                                      // 0x0311(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_LSScoeff_tran;                                   // 0x0314(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_LSScoeff_rot;                                    // 0x0318(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31C[0x4];                                      // 0x031C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 m_RootName;                                        // 0x0320(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_IsEnableLocalForce;                              // 0x0330(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_331[0x3];                                      // 0x0331(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                m_Gravity;                                         // 0x0334(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                m_WindForce;                                       // 0x0340(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                m_DirRange;                                        // 0x034C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                m_ForceRange;                                      // 0x0358(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        m_TotalLinkBatches;                                // 0x0364(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        m_TotalLinksInBatch[0xF];                          // 0x0368(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        m_TotalConeBatches;                                // 0x03A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        m_TotalConesInBatch[0xF];                          // 0x03A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        m_TotalCollisionBatches;                           // 0x03E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        m_TotalCollisionsInBatch[0xF];                     // 0x03E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        m_TotalSelfCollisionBatches;                       // 0x0424(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        m_TotalSelfCollisionsInBatch[0xF];                 // 0x0428(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQEX_Bonamik_JointLinkSimulationMode         m_JointLinkSimulationMode;                         // 0x0464(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQEX_Bonamik_FastMotionHandling              m_FastMotionHandlingMode;                          // 0x0465(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_EnableGroundCollision;                           // 0x0466(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_467[0x1];                                      // 0x0467(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        m_RefUpVec;                                        // 0x0468(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_46C[0x4];                                      // 0x046C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQEX_BonamikSceneManagerDesc) == 0x000008, "Wrong alignment on FSQEX_BonamikSceneManagerDesc");
static_assert(sizeof(FSQEX_BonamikSceneManagerDesc) == 0x000470, "Wrong size on FSQEX_BonamikSceneManagerDesc");
static_assert(offsetof(FSQEX_BonamikSceneManagerDesc, m_IsEnable) == 0x000000, "Member 'FSQEX_BonamikSceneManagerDesc::m_IsEnable' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikSceneManagerDesc, m_IsUseGPU) == 0x000001, "Member 'FSQEX_BonamikSceneManagerDesc::m_IsUseGPU' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikSceneManagerDesc, m_SubStep) == 0x000004, "Member 'FSQEX_BonamikSceneManagerDesc::m_SubStep' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikSceneManagerDesc, m_Dt) == 0x000008, "Member 'FSQEX_BonamikSceneManagerDesc::m_Dt' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikSceneManagerDesc, m_TotalGroup) == 0x00000C, "Member 'FSQEX_BonamikSceneManagerDesc::m_TotalGroup' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikSceneManagerDesc, m_GroupName) == 0x000010, "Member 'FSQEX_BonamikSceneManagerDesc::m_GroupName' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikSceneManagerDesc, m_IsEnableLSS) == 0x000310, "Member 'FSQEX_BonamikSceneManagerDesc::m_IsEnableLSS' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikSceneManagerDesc, m_LSScoeff_tran) == 0x000314, "Member 'FSQEX_BonamikSceneManagerDesc::m_LSScoeff_tran' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikSceneManagerDesc, m_LSScoeff_rot) == 0x000318, "Member 'FSQEX_BonamikSceneManagerDesc::m_LSScoeff_rot' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikSceneManagerDesc, m_RootName) == 0x000320, "Member 'FSQEX_BonamikSceneManagerDesc::m_RootName' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikSceneManagerDesc, m_IsEnableLocalForce) == 0x000330, "Member 'FSQEX_BonamikSceneManagerDesc::m_IsEnableLocalForce' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikSceneManagerDesc, m_Gravity) == 0x000334, "Member 'FSQEX_BonamikSceneManagerDesc::m_Gravity' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikSceneManagerDesc, m_WindForce) == 0x000340, "Member 'FSQEX_BonamikSceneManagerDesc::m_WindForce' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikSceneManagerDesc, m_DirRange) == 0x00034C, "Member 'FSQEX_BonamikSceneManagerDesc::m_DirRange' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikSceneManagerDesc, m_ForceRange) == 0x000358, "Member 'FSQEX_BonamikSceneManagerDesc::m_ForceRange' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikSceneManagerDesc, m_TotalLinkBatches) == 0x000364, "Member 'FSQEX_BonamikSceneManagerDesc::m_TotalLinkBatches' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikSceneManagerDesc, m_TotalLinksInBatch) == 0x000368, "Member 'FSQEX_BonamikSceneManagerDesc::m_TotalLinksInBatch' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikSceneManagerDesc, m_TotalConeBatches) == 0x0003A4, "Member 'FSQEX_BonamikSceneManagerDesc::m_TotalConeBatches' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikSceneManagerDesc, m_TotalConesInBatch) == 0x0003A8, "Member 'FSQEX_BonamikSceneManagerDesc::m_TotalConesInBatch' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikSceneManagerDesc, m_TotalCollisionBatches) == 0x0003E4, "Member 'FSQEX_BonamikSceneManagerDesc::m_TotalCollisionBatches' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikSceneManagerDesc, m_TotalCollisionsInBatch) == 0x0003E8, "Member 'FSQEX_BonamikSceneManagerDesc::m_TotalCollisionsInBatch' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikSceneManagerDesc, m_TotalSelfCollisionBatches) == 0x000424, "Member 'FSQEX_BonamikSceneManagerDesc::m_TotalSelfCollisionBatches' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikSceneManagerDesc, m_TotalSelfCollisionsInBatch) == 0x000428, "Member 'FSQEX_BonamikSceneManagerDesc::m_TotalSelfCollisionsInBatch' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikSceneManagerDesc, m_JointLinkSimulationMode) == 0x000464, "Member 'FSQEX_BonamikSceneManagerDesc::m_JointLinkSimulationMode' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikSceneManagerDesc, m_FastMotionHandlingMode) == 0x000465, "Member 'FSQEX_BonamikSceneManagerDesc::m_FastMotionHandlingMode' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikSceneManagerDesc, m_EnableGroundCollision) == 0x000466, "Member 'FSQEX_BonamikSceneManagerDesc::m_EnableGroundCollision' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikSceneManagerDesc, m_RefUpVec) == 0x000468, "Member 'FSQEX_BonamikSceneManagerDesc::m_RefUpVec' has a wrong offset!");

// ScriptStruct BonamikRt.SQEX_BonamikSolverDesc
// 0x0048 (0x0048 - 0x0000)
struct FSQEX_BonamikSolverDesc final
{
public:
	uint32                                        m_GroupId;                                         // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 m_GroupName;                                       // 0x0008(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_IsEnable;                                        // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_IsUseConeSEQ;                                    // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_IsEnableDraw;                                    // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B[0x1];                                       // 0x001B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        m_ColIter;                                         // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        m_ConsIter;                                        // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        m_ConeIter;                                        // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        m_LinkIter;                                        // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        m_SolverIter;                                      // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        m_TagId;                                           // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        m_CollisionTagId;                                  // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_EnableGround;                                    // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_LODdistance;                                     // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_RefUpVec;                                        // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQEX_BonamikSolverDesc) == 0x000008, "Wrong alignment on FSQEX_BonamikSolverDesc");
static_assert(sizeof(FSQEX_BonamikSolverDesc) == 0x000048, "Wrong size on FSQEX_BonamikSolverDesc");
static_assert(offsetof(FSQEX_BonamikSolverDesc, m_GroupId) == 0x000000, "Member 'FSQEX_BonamikSolverDesc::m_GroupId' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikSolverDesc, m_GroupName) == 0x000008, "Member 'FSQEX_BonamikSolverDesc::m_GroupName' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikSolverDesc, m_IsEnable) == 0x000018, "Member 'FSQEX_BonamikSolverDesc::m_IsEnable' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikSolverDesc, m_IsUseConeSEQ) == 0x000019, "Member 'FSQEX_BonamikSolverDesc::m_IsUseConeSEQ' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikSolverDesc, m_IsEnableDraw) == 0x00001A, "Member 'FSQEX_BonamikSolverDesc::m_IsEnableDraw' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikSolverDesc, m_ColIter) == 0x00001C, "Member 'FSQEX_BonamikSolverDesc::m_ColIter' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikSolverDesc, m_ConsIter) == 0x000020, "Member 'FSQEX_BonamikSolverDesc::m_ConsIter' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikSolverDesc, m_ConeIter) == 0x000024, "Member 'FSQEX_BonamikSolverDesc::m_ConeIter' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikSolverDesc, m_LinkIter) == 0x000028, "Member 'FSQEX_BonamikSolverDesc::m_LinkIter' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikSolverDesc, m_SolverIter) == 0x00002C, "Member 'FSQEX_BonamikSolverDesc::m_SolverIter' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikSolverDesc, m_TagId) == 0x000030, "Member 'FSQEX_BonamikSolverDesc::m_TagId' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikSolverDesc, m_CollisionTagId) == 0x000034, "Member 'FSQEX_BonamikSolverDesc::m_CollisionTagId' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikSolverDesc, m_EnableGround) == 0x000038, "Member 'FSQEX_BonamikSolverDesc::m_EnableGround' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikSolverDesc, m_LODdistance) == 0x00003C, "Member 'FSQEX_BonamikSolverDesc::m_LODdistance' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikSolverDesc, m_RefUpVec) == 0x000040, "Member 'FSQEX_BonamikSolverDesc::m_RefUpVec' has a wrong offset!");

// ScriptStruct BonamikRt.SQEX_BonamikChangingParameter
// 0x0018 (0x0018 - 0x0000)
struct FSQEX_BonamikChangingParameter
{
public:
	TArray<class FName>                           m_Groups;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	ESQEX_Bonamik_Parameters                      m_Parameter;                                       // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_Value;                                           // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQEX_BonamikChangingParameter) == 0x000008, "Wrong alignment on FSQEX_BonamikChangingParameter");
static_assert(sizeof(FSQEX_BonamikChangingParameter) == 0x000018, "Wrong size on FSQEX_BonamikChangingParameter");
static_assert(offsetof(FSQEX_BonamikChangingParameter, m_Groups) == 0x000000, "Member 'FSQEX_BonamikChangingParameter::m_Groups' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikChangingParameter, m_Parameter) == 0x000010, "Member 'FSQEX_BonamikChangingParameter::m_Parameter' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikChangingParameter, m_Value) == 0x000014, "Member 'FSQEX_BonamikChangingParameter::m_Value' has a wrong offset!");

// ScriptStruct BonamikRt.SQEX_BonamikChangingParameterExt
// 0x0008 (0x0020 - 0x0018)
struct FSQEX_BonamikChangingParameterExt final : public FSQEX_BonamikChangingParameter
{
public:
	float                                         m_ValueExt;                                        // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQEX_BonamikChangingParameterExt) == 0x000008, "Wrong alignment on FSQEX_BonamikChangingParameterExt");
static_assert(sizeof(FSQEX_BonamikChangingParameterExt) == 0x000020, "Wrong size on FSQEX_BonamikChangingParameterExt");
static_assert(offsetof(FSQEX_BonamikChangingParameterExt, m_ValueExt) == 0x000018, "Member 'FSQEX_BonamikChangingParameterExt::m_ValueExt' has a wrong offset!");

// ScriptStruct BonamikRt.SQEX_BonamikGroupLOD
// 0x0020 (0x0020 - 0x0000)
struct FSQEX_BonamikGroupLOD final
{
public:
	TArray<class FName>                           Groups;                                            // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         MinSize;                                           // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendTime;                                         // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PrerollTime;                                       // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQEX_BonamikGroupLOD) == 0x000008, "Wrong alignment on FSQEX_BonamikGroupLOD");
static_assert(sizeof(FSQEX_BonamikGroupLOD) == 0x000020, "Wrong size on FSQEX_BonamikGroupLOD");
static_assert(offsetof(FSQEX_BonamikGroupLOD, Groups) == 0x000000, "Member 'FSQEX_BonamikGroupLOD::Groups' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikGroupLOD, MinSize) == 0x000010, "Member 'FSQEX_BonamikGroupLOD::MinSize' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikGroupLOD, BlendTime) == 0x000014, "Member 'FSQEX_BonamikGroupLOD::BlendTime' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikGroupLOD, PrerollTime) == 0x000018, "Member 'FSQEX_BonamikGroupLOD::PrerollTime' has a wrong offset!");

// ScriptStruct BonamikRt.SQEX_BonamikWindController
// 0x0178 (0x0178 - 0x0000)
struct FSQEX_BonamikWindController final
{
public:
	struct FSQEX_BonamikPresetWindInstance        m_PresetWind[0xA];                                 // 0x0000(0x0020)(Transient, NativeAccessSpecifierPrivate)
	TArray<TWeakObjectPtr<class USQEX_BonamikWind>> m_WindSources;                                     // 0x0140(0x0010)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPrivate)
	struct FVector                                m_CurrentGlobalWindForce;                          // 0x0150(0x000C)(Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         m_GlobalWindScale;                                 // 0x015C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_160[0x10];                                     // 0x0160(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class UWorld>                  RefWorld;                                          // 0x0170(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FSQEX_BonamikWindController) == 0x000008, "Wrong alignment on FSQEX_BonamikWindController");
static_assert(sizeof(FSQEX_BonamikWindController) == 0x000178, "Wrong size on FSQEX_BonamikWindController");
static_assert(offsetof(FSQEX_BonamikWindController, m_PresetWind) == 0x000000, "Member 'FSQEX_BonamikWindController::m_PresetWind' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikWindController, m_WindSources) == 0x000140, "Member 'FSQEX_BonamikWindController::m_WindSources' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikWindController, m_CurrentGlobalWindForce) == 0x000150, "Member 'FSQEX_BonamikWindController::m_CurrentGlobalWindForce' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikWindController, m_GlobalWindScale) == 0x00015C, "Member 'FSQEX_BonamikWindController::m_GlobalWindScale' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikWindController, RefWorld) == 0x000170, "Member 'FSQEX_BonamikWindController::RefWorld' has a wrong offset!");

// ScriptStruct BonamikRt.SQEX_BonamikPresetWindSettings
// 0x0020 (0x0020 - 0x0000)
struct FSQEX_BonamikPresetWindSettings final
{
public:
	class FName                                   m_PresetName;                                      // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQEX_BonamikWindDesc*                  m_WindDesc;                                        // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         m_TargetGroups;                                    // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQEX_BonamikPresetWindSettings) == 0x000008, "Wrong alignment on FSQEX_BonamikPresetWindSettings");
static_assert(sizeof(FSQEX_BonamikPresetWindSettings) == 0x000020, "Wrong size on FSQEX_BonamikPresetWindSettings");
static_assert(offsetof(FSQEX_BonamikPresetWindSettings, m_PresetName) == 0x000000, "Member 'FSQEX_BonamikPresetWindSettings::m_PresetName' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikPresetWindSettings, m_WindDesc) == 0x000008, "Member 'FSQEX_BonamikPresetWindSettings::m_WindDesc' has a wrong offset!");
static_assert(offsetof(FSQEX_BonamikPresetWindSettings, m_TargetGroups) == 0x000010, "Member 'FSQEX_BonamikPresetWindSettings::m_TargetGroups' has a wrong offset!");

}

