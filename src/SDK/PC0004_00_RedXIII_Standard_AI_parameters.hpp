#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PC0004_00_RedXIII_Standard_AI

#include "Basic.hpp"

#include "EndGame_structs.hpp"


namespace SDK::Params
{

// Function PC0004_00_RedXIII_Standard_AI.PC0004_00_RedXIII_Standard_AI_C.ExecuteUbergraph_PC0004_00_RedXIII_Standard_AI
// 0x0018 (0x0018 - 0x0000)
struct PC0004_00_RedXIII_Standard_AI_C_ExecuteUbergraph_PC0004_00_RedXIII_Standard_AI final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_RunBehaviorTree_ReturnValue;              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EEndAiBattleRole                              K2Node_Event_InRole;                               // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Event_InStep;                               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  K2Node_Event_PossessedPawn;                        // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PC0004_00_RedXIII_Standard_AI_C_ExecuteUbergraph_PC0004_00_RedXIII_Standard_AI) == 0x000008, "Wrong alignment on PC0004_00_RedXIII_Standard_AI_C_ExecuteUbergraph_PC0004_00_RedXIII_Standard_AI");
static_assert(sizeof(PC0004_00_RedXIII_Standard_AI_C_ExecuteUbergraph_PC0004_00_RedXIII_Standard_AI) == 0x000018, "Wrong size on PC0004_00_RedXIII_Standard_AI_C_ExecuteUbergraph_PC0004_00_RedXIII_Standard_AI");
static_assert(offsetof(PC0004_00_RedXIII_Standard_AI_C_ExecuteUbergraph_PC0004_00_RedXIII_Standard_AI, EntryPoint) == 0x000000, "Member 'PC0004_00_RedXIII_Standard_AI_C_ExecuteUbergraph_PC0004_00_RedXIII_Standard_AI::EntryPoint' has a wrong offset!");
static_assert(offsetof(PC0004_00_RedXIII_Standard_AI_C_ExecuteUbergraph_PC0004_00_RedXIII_Standard_AI, CallFunc_RunBehaviorTree_ReturnValue) == 0x000004, "Member 'PC0004_00_RedXIII_Standard_AI_C_ExecuteUbergraph_PC0004_00_RedXIII_Standard_AI::CallFunc_RunBehaviorTree_ReturnValue' has a wrong offset!");
static_assert(offsetof(PC0004_00_RedXIII_Standard_AI_C_ExecuteUbergraph_PC0004_00_RedXIII_Standard_AI, K2Node_Event_InRole) == 0x000005, "Member 'PC0004_00_RedXIII_Standard_AI_C_ExecuteUbergraph_PC0004_00_RedXIII_Standard_AI::K2Node_Event_InRole' has a wrong offset!");
static_assert(offsetof(PC0004_00_RedXIII_Standard_AI_C_ExecuteUbergraph_PC0004_00_RedXIII_Standard_AI, K2Node_Event_InStep) == 0x000008, "Member 'PC0004_00_RedXIII_Standard_AI_C_ExecuteUbergraph_PC0004_00_RedXIII_Standard_AI::K2Node_Event_InStep' has a wrong offset!");
static_assert(offsetof(PC0004_00_RedXIII_Standard_AI_C_ExecuteUbergraph_PC0004_00_RedXIII_Standard_AI, K2Node_Event_PossessedPawn) == 0x000010, "Member 'PC0004_00_RedXIII_Standard_AI_C_ExecuteUbergraph_PC0004_00_RedXIII_Standard_AI::K2Node_Event_PossessedPawn' has a wrong offset!");

// Function PC0004_00_RedXIII_Standard_AI.PC0004_00_RedXIII_Standard_AI_C.OnPossess
// 0x0008 (0x0008 - 0x0000)
struct PC0004_00_RedXIII_Standard_AI_C_OnPossess final
{
public:
	class APawn*                                  PossessedPawn;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PC0004_00_RedXIII_Standard_AI_C_OnPossess) == 0x000008, "Wrong alignment on PC0004_00_RedXIII_Standard_AI_C_OnPossess");
static_assert(sizeof(PC0004_00_RedXIII_Standard_AI_C_OnPossess) == 0x000008, "Wrong size on PC0004_00_RedXIII_Standard_AI_C_OnPossess");
static_assert(offsetof(PC0004_00_RedXIII_Standard_AI_C_OnPossess, PossessedPawn) == 0x000000, "Member 'PC0004_00_RedXIII_Standard_AI_C_OnPossess::PossessedPawn' has a wrong offset!");

// Function PC0004_00_RedXIII_Standard_AI.PC0004_00_RedXIII_Standard_AI_C.OnFirstUpdate
// 0x0008 (0x0008 - 0x0000)
struct PC0004_00_RedXIII_Standard_AI_C_OnFirstUpdate final
{
public:
	EEndAiBattleRole                              InRole;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InStep;                                            // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PC0004_00_RedXIII_Standard_AI_C_OnFirstUpdate) == 0x000004, "Wrong alignment on PC0004_00_RedXIII_Standard_AI_C_OnFirstUpdate");
static_assert(sizeof(PC0004_00_RedXIII_Standard_AI_C_OnFirstUpdate) == 0x000008, "Wrong size on PC0004_00_RedXIII_Standard_AI_C_OnFirstUpdate");
static_assert(offsetof(PC0004_00_RedXIII_Standard_AI_C_OnFirstUpdate, InRole) == 0x000000, "Member 'PC0004_00_RedXIII_Standard_AI_C_OnFirstUpdate::InRole' has a wrong offset!");
static_assert(offsetof(PC0004_00_RedXIII_Standard_AI_C_OnFirstUpdate, InStep) == 0x000004, "Member 'PC0004_00_RedXIII_Standard_AI_C_OnFirstUpdate::InStep' has a wrong offset!");

}

