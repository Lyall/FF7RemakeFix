#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: KBDRt

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "BonamikRt_structs.hpp"
#include "Engine_classes.hpp"
#include "KBDRt_structs.hpp"


namespace SDK
{

// Class KBDRt.SQEX_AnimNotify_Bonamik_CharaWind
// 0x0030 (0x0068 - 0x0038)
class USQEX_AnimNotify_Bonamik_CharaWind final : public UAnimNotify
{
public:
	TArray<class FName>                           m_Groups;                                          // 0x0038(0x0010)(Edit, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	ESQEX_Bonamik_EmissiveDirection               m_DirectionSpace;                                  // 0x0048(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                m_DirectionVec;                                    // 0x004C(0x000C)(Edit, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_BaseStrength;                                    // 0x0058(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_WaveAmplitude;                                   // 0x005C(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_WavePeriod;                                      // 0x0060(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEX_AnimNotify_Bonamik_CharaWind">();
	}
	static class USQEX_AnimNotify_Bonamik_CharaWind* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEX_AnimNotify_Bonamik_CharaWind>();
	}
};
static_assert(alignof(USQEX_AnimNotify_Bonamik_CharaWind) == 0x000008, "Wrong alignment on USQEX_AnimNotify_Bonamik_CharaWind");
static_assert(sizeof(USQEX_AnimNotify_Bonamik_CharaWind) == 0x000068, "Wrong size on USQEX_AnimNotify_Bonamik_CharaWind");
static_assert(offsetof(USQEX_AnimNotify_Bonamik_CharaWind, m_Groups) == 0x000038, "Member 'USQEX_AnimNotify_Bonamik_CharaWind::m_Groups' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotify_Bonamik_CharaWind, m_DirectionSpace) == 0x000048, "Member 'USQEX_AnimNotify_Bonamik_CharaWind::m_DirectionSpace' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotify_Bonamik_CharaWind, m_DirectionVec) == 0x00004C, "Member 'USQEX_AnimNotify_Bonamik_CharaWind::m_DirectionVec' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotify_Bonamik_CharaWind, m_BaseStrength) == 0x000058, "Member 'USQEX_AnimNotify_Bonamik_CharaWind::m_BaseStrength' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotify_Bonamik_CharaWind, m_WaveAmplitude) == 0x00005C, "Member 'USQEX_AnimNotify_Bonamik_CharaWind::m_WaveAmplitude' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotify_Bonamik_CharaWind, m_WavePeriod) == 0x000060, "Member 'USQEX_AnimNotify_Bonamik_CharaWind::m_WavePeriod' has a wrong offset!");

// Class KBDRt.SQEX_AnimNotify_Bonamik_Enable
// 0x0018 (0x0050 - 0x0038)
class USQEX_AnimNotify_Bonamik_Enable final : public UAnimNotify
{
public:
	TArray<class FName>                           m_Groups;                                          // 0x0038(0x0010)(Edit, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          m_On;                                              // 0x0048(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_PreserveLatestResult;                            // 0x0049(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A[0x2];                                       // 0x004A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_BlendTime;                                       // 0x004C(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEX_AnimNotify_Bonamik_Enable">();
	}
	static class USQEX_AnimNotify_Bonamik_Enable* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEX_AnimNotify_Bonamik_Enable>();
	}
};
static_assert(alignof(USQEX_AnimNotify_Bonamik_Enable) == 0x000008, "Wrong alignment on USQEX_AnimNotify_Bonamik_Enable");
static_assert(sizeof(USQEX_AnimNotify_Bonamik_Enable) == 0x000050, "Wrong size on USQEX_AnimNotify_Bonamik_Enable");
static_assert(offsetof(USQEX_AnimNotify_Bonamik_Enable, m_Groups) == 0x000038, "Member 'USQEX_AnimNotify_Bonamik_Enable::m_Groups' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotify_Bonamik_Enable, m_On) == 0x000048, "Member 'USQEX_AnimNotify_Bonamik_Enable::m_On' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotify_Bonamik_Enable, m_PreserveLatestResult) == 0x000049, "Member 'USQEX_AnimNotify_Bonamik_Enable::m_PreserveLatestResult' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotify_Bonamik_Enable, m_BlendTime) == 0x00004C, "Member 'USQEX_AnimNotify_Bonamik_Enable::m_BlendTime' has a wrong offset!");

// Class KBDRt.SQEX_AnimNotify_Bonamik_EnableGroundCollision
// 0x0018 (0x0050 - 0x0038)
class USQEX_AnimNotify_Bonamik_EnableGroundCollision final : public UAnimNotify
{
public:
	bool                                          m_Enable;                                          // 0x0038(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         m_Groups;                                          // 0x0040(0x0010)(Edit, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEX_AnimNotify_Bonamik_EnableGroundCollision">();
	}
	static class USQEX_AnimNotify_Bonamik_EnableGroundCollision* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEX_AnimNotify_Bonamik_EnableGroundCollision>();
	}
};
static_assert(alignof(USQEX_AnimNotify_Bonamik_EnableGroundCollision) == 0x000008, "Wrong alignment on USQEX_AnimNotify_Bonamik_EnableGroundCollision");
static_assert(sizeof(USQEX_AnimNotify_Bonamik_EnableGroundCollision) == 0x000050, "Wrong size on USQEX_AnimNotify_Bonamik_EnableGroundCollision");
static_assert(offsetof(USQEX_AnimNotify_Bonamik_EnableGroundCollision, m_Enable) == 0x000038, "Member 'USQEX_AnimNotify_Bonamik_EnableGroundCollision::m_Enable' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotify_Bonamik_EnableGroundCollision, m_Groups) == 0x000040, "Member 'USQEX_AnimNotify_Bonamik_EnableGroundCollision::m_Groups' has a wrong offset!");

// Class KBDRt.SQEX_AnimNotify_Bonamik_EnablePresetWind
// 0x0018 (0x0050 - 0x0038)
class USQEX_AnimNotify_Bonamik_EnablePresetWind final : public UAnimNotify
{
public:
	bool                                          m_Enable;                                          // 0x0038(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           m_PresetNames;                                     // 0x0040(0x0010)(Edit, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEX_AnimNotify_Bonamik_EnablePresetWind">();
	}
	static class USQEX_AnimNotify_Bonamik_EnablePresetWind* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEX_AnimNotify_Bonamik_EnablePresetWind>();
	}
};
static_assert(alignof(USQEX_AnimNotify_Bonamik_EnablePresetWind) == 0x000008, "Wrong alignment on USQEX_AnimNotify_Bonamik_EnablePresetWind");
static_assert(sizeof(USQEX_AnimNotify_Bonamik_EnablePresetWind) == 0x000050, "Wrong size on USQEX_AnimNotify_Bonamik_EnablePresetWind");
static_assert(offsetof(USQEX_AnimNotify_Bonamik_EnablePresetWind, m_Enable) == 0x000038, "Member 'USQEX_AnimNotify_Bonamik_EnablePresetWind::m_Enable' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotify_Bonamik_EnablePresetWind, m_PresetNames) == 0x000040, "Member 'USQEX_AnimNotify_Bonamik_EnablePresetWind::m_PresetNames' has a wrong offset!");

// Class KBDRt.SQEX_AnimNotify_Bonamik_ReinitializeSimulationPose
// 0x0000 (0x0038 - 0x0038)
class USQEX_AnimNotify_Bonamik_ReinitializeSimulationPose final : public UAnimNotify
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEX_AnimNotify_Bonamik_ReinitializeSimulationPose">();
	}
	static class USQEX_AnimNotify_Bonamik_ReinitializeSimulationPose* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEX_AnimNotify_Bonamik_ReinitializeSimulationPose>();
	}
};
static_assert(alignof(USQEX_AnimNotify_Bonamik_ReinitializeSimulationPose) == 0x000008, "Wrong alignment on USQEX_AnimNotify_Bonamik_ReinitializeSimulationPose");
static_assert(sizeof(USQEX_AnimNotify_Bonamik_ReinitializeSimulationPose) == 0x000038, "Wrong size on USQEX_AnimNotify_Bonamik_ReinitializeSimulationPose");

// Class KBDRt.SQEX_AnimNotify_Bonamik_ResetAndPreRoll
// 0x0010 (0x0048 - 0x0038)
class USQEX_AnimNotify_Bonamik_ResetAndPreRoll final : public UAnimNotify
{
public:
	bool                                          m_Reset;                                           // 0x0038(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_ResetPose;                                       // 0x0039(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x2];                                       // 0x003A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         m_PreRoll;                                         // 0x003C(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_ProcessToChildMeshes;                            // 0x0040(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEX_AnimNotify_Bonamik_ResetAndPreRoll">();
	}
	static class USQEX_AnimNotify_Bonamik_ResetAndPreRoll* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEX_AnimNotify_Bonamik_ResetAndPreRoll>();
	}
};
static_assert(alignof(USQEX_AnimNotify_Bonamik_ResetAndPreRoll) == 0x000008, "Wrong alignment on USQEX_AnimNotify_Bonamik_ResetAndPreRoll");
static_assert(sizeof(USQEX_AnimNotify_Bonamik_ResetAndPreRoll) == 0x000048, "Wrong size on USQEX_AnimNotify_Bonamik_ResetAndPreRoll");
static_assert(offsetof(USQEX_AnimNotify_Bonamik_ResetAndPreRoll, m_Reset) == 0x000038, "Member 'USQEX_AnimNotify_Bonamik_ResetAndPreRoll::m_Reset' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotify_Bonamik_ResetAndPreRoll, m_ResetPose) == 0x000039, "Member 'USQEX_AnimNotify_Bonamik_ResetAndPreRoll::m_ResetPose' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotify_Bonamik_ResetAndPreRoll, m_PreRoll) == 0x00003C, "Member 'USQEX_AnimNotify_Bonamik_ResetAndPreRoll::m_PreRoll' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotify_Bonamik_ResetAndPreRoll, m_ProcessToChildMeshes) == 0x000040, "Member 'USQEX_AnimNotify_Bonamik_ResetAndPreRoll::m_ProcessToChildMeshes' has a wrong offset!");

// Class KBDRt.SQEX_AnimNotify_Bonamik_RestoreDefaultParams
// 0x0000 (0x0038 - 0x0038)
class USQEX_AnimNotify_Bonamik_RestoreDefaultParams final : public UAnimNotify
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEX_AnimNotify_Bonamik_RestoreDefaultParams">();
	}
	static class USQEX_AnimNotify_Bonamik_RestoreDefaultParams* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEX_AnimNotify_Bonamik_RestoreDefaultParams>();
	}
};
static_assert(alignof(USQEX_AnimNotify_Bonamik_RestoreDefaultParams) == 0x000008, "Wrong alignment on USQEX_AnimNotify_Bonamik_RestoreDefaultParams");
static_assert(sizeof(USQEX_AnimNotify_Bonamik_RestoreDefaultParams) == 0x000038, "Wrong size on USQEX_AnimNotify_Bonamik_RestoreDefaultParams");

// Class KBDRt.SQEX_AnimNotify_Bonamik_ScaleGroupParams
// 0x0048 (0x0080 - 0x0038)
class USQEX_AnimNotify_Bonamik_ScaleGroupParams final : public UAnimNotify
{
public:
	TArray<class FString>                         m_Groups;                                          // 0x0038(0x0010)(Edit, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          m_ChangeInnerCone;                                 // 0x0048(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_InnerConeScale;                                  // 0x004C(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_ChangeOuterCone;                                 // 0x0050(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_OuterConeScale;                                  // 0x0054(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_ChangeLocalForce;                                // 0x0058(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_LocalForceScale;                                 // 0x005C(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_ChangeWindScale;                                 // 0x0060(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_GroupWindScale;                                  // 0x0064(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_ChangeCharaWindScale;                            // 0x0068(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_GroupCharaWindScale;                             // 0x006C(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_ChangeMassScale;                                 // 0x0070(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x3];                                       // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_GroupMassScale;                                  // 0x0074(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_ApplyToAttachments;                              // 0x0078(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEX_AnimNotify_Bonamik_ScaleGroupParams">();
	}
	static class USQEX_AnimNotify_Bonamik_ScaleGroupParams* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEX_AnimNotify_Bonamik_ScaleGroupParams>();
	}
};
static_assert(alignof(USQEX_AnimNotify_Bonamik_ScaleGroupParams) == 0x000008, "Wrong alignment on USQEX_AnimNotify_Bonamik_ScaleGroupParams");
static_assert(sizeof(USQEX_AnimNotify_Bonamik_ScaleGroupParams) == 0x000080, "Wrong size on USQEX_AnimNotify_Bonamik_ScaleGroupParams");
static_assert(offsetof(USQEX_AnimNotify_Bonamik_ScaleGroupParams, m_Groups) == 0x000038, "Member 'USQEX_AnimNotify_Bonamik_ScaleGroupParams::m_Groups' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotify_Bonamik_ScaleGroupParams, m_ChangeInnerCone) == 0x000048, "Member 'USQEX_AnimNotify_Bonamik_ScaleGroupParams::m_ChangeInnerCone' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotify_Bonamik_ScaleGroupParams, m_InnerConeScale) == 0x00004C, "Member 'USQEX_AnimNotify_Bonamik_ScaleGroupParams::m_InnerConeScale' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotify_Bonamik_ScaleGroupParams, m_ChangeOuterCone) == 0x000050, "Member 'USQEX_AnimNotify_Bonamik_ScaleGroupParams::m_ChangeOuterCone' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotify_Bonamik_ScaleGroupParams, m_OuterConeScale) == 0x000054, "Member 'USQEX_AnimNotify_Bonamik_ScaleGroupParams::m_OuterConeScale' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotify_Bonamik_ScaleGroupParams, m_ChangeLocalForce) == 0x000058, "Member 'USQEX_AnimNotify_Bonamik_ScaleGroupParams::m_ChangeLocalForce' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotify_Bonamik_ScaleGroupParams, m_LocalForceScale) == 0x00005C, "Member 'USQEX_AnimNotify_Bonamik_ScaleGroupParams::m_LocalForceScale' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotify_Bonamik_ScaleGroupParams, m_ChangeWindScale) == 0x000060, "Member 'USQEX_AnimNotify_Bonamik_ScaleGroupParams::m_ChangeWindScale' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotify_Bonamik_ScaleGroupParams, m_GroupWindScale) == 0x000064, "Member 'USQEX_AnimNotify_Bonamik_ScaleGroupParams::m_GroupWindScale' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotify_Bonamik_ScaleGroupParams, m_ChangeCharaWindScale) == 0x000068, "Member 'USQEX_AnimNotify_Bonamik_ScaleGroupParams::m_ChangeCharaWindScale' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotify_Bonamik_ScaleGroupParams, m_GroupCharaWindScale) == 0x00006C, "Member 'USQEX_AnimNotify_Bonamik_ScaleGroupParams::m_GroupCharaWindScale' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotify_Bonamik_ScaleGroupParams, m_ChangeMassScale) == 0x000070, "Member 'USQEX_AnimNotify_Bonamik_ScaleGroupParams::m_ChangeMassScale' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotify_Bonamik_ScaleGroupParams, m_GroupMassScale) == 0x000074, "Member 'USQEX_AnimNotify_Bonamik_ScaleGroupParams::m_GroupMassScale' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotify_Bonamik_ScaleGroupParams, m_ApplyToAttachments) == 0x000078, "Member 'USQEX_AnimNotify_Bonamik_ScaleGroupParams::m_ApplyToAttachments' has a wrong offset!");

// Class KBDRt.SQEX_AnimNotify_Bonamik_SpeedRate
// 0x0008 (0x0040 - 0x0038)
class USQEX_AnimNotify_Bonamik_SpeedRate final : public UAnimNotify
{
public:
	float                                         m_SpeedRate;                                       // 0x0038(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_Time;                                            // 0x003C(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEX_AnimNotify_Bonamik_SpeedRate">();
	}
	static class USQEX_AnimNotify_Bonamik_SpeedRate* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEX_AnimNotify_Bonamik_SpeedRate>();
	}
};
static_assert(alignof(USQEX_AnimNotify_Bonamik_SpeedRate) == 0x000008, "Wrong alignment on USQEX_AnimNotify_Bonamik_SpeedRate");
static_assert(sizeof(USQEX_AnimNotify_Bonamik_SpeedRate) == 0x000040, "Wrong size on USQEX_AnimNotify_Bonamik_SpeedRate");
static_assert(offsetof(USQEX_AnimNotify_Bonamik_SpeedRate, m_SpeedRate) == 0x000038, "Member 'USQEX_AnimNotify_Bonamik_SpeedRate::m_SpeedRate' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotify_Bonamik_SpeedRate, m_Time) == 0x00003C, "Member 'USQEX_AnimNotify_Bonamik_SpeedRate::m_Time' has a wrong offset!");

// Class KBDRt.SQEX_AnimNotify_Bonamik_Weight
// 0x0020 (0x0058 - 0x0038)
class USQEX_AnimNotify_Bonamik_Weight final : public UAnimNotify
{
public:
	TArray<class FString>                         m_Groups;                                          // 0x0038(0x0010)(Edit, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         m_BonamikWeight;                                   // 0x0048(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_Time;                                            // 0x004C(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_ResetWhenNonZeroWeight;                          // 0x0050(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEX_AnimNotify_Bonamik_Weight">();
	}
	static class USQEX_AnimNotify_Bonamik_Weight* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEX_AnimNotify_Bonamik_Weight>();
	}
};
static_assert(alignof(USQEX_AnimNotify_Bonamik_Weight) == 0x000008, "Wrong alignment on USQEX_AnimNotify_Bonamik_Weight");
static_assert(sizeof(USQEX_AnimNotify_Bonamik_Weight) == 0x000058, "Wrong size on USQEX_AnimNotify_Bonamik_Weight");
static_assert(offsetof(USQEX_AnimNotify_Bonamik_Weight, m_Groups) == 0x000038, "Member 'USQEX_AnimNotify_Bonamik_Weight::m_Groups' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotify_Bonamik_Weight, m_BonamikWeight) == 0x000048, "Member 'USQEX_AnimNotify_Bonamik_Weight::m_BonamikWeight' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotify_Bonamik_Weight, m_Time) == 0x00004C, "Member 'USQEX_AnimNotify_Bonamik_Weight::m_Time' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotify_Bonamik_Weight, m_ResetWhenNonZeroWeight) == 0x000050, "Member 'USQEX_AnimNotify_Bonamik_Weight::m_ResetWhenNonZeroWeight' has a wrong offset!");

// Class KBDRt.SQEX_AnimNotify_Bonamik_WindControl
// 0x0008 (0x0040 - 0x0038)
class USQEX_AnimNotify_Bonamik_WindControl final : public UAnimNotify
{
public:
	float                                         m_GlobalWindScale;                                 // 0x0038(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEX_AnimNotify_Bonamik_WindControl">();
	}
	static class USQEX_AnimNotify_Bonamik_WindControl* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEX_AnimNotify_Bonamik_WindControl>();
	}
};
static_assert(alignof(USQEX_AnimNotify_Bonamik_WindControl) == 0x000008, "Wrong alignment on USQEX_AnimNotify_Bonamik_WindControl");
static_assert(sizeof(USQEX_AnimNotify_Bonamik_WindControl) == 0x000040, "Wrong size on USQEX_AnimNotify_Bonamik_WindControl");
static_assert(offsetof(USQEX_AnimNotify_Bonamik_WindControl, m_GlobalWindScale) == 0x000038, "Member 'USQEX_AnimNotify_Bonamik_WindControl::m_GlobalWindScale' has a wrong offset!");

// Class KBDRt.SQEX_AnimNotify_Bonamik_WorldWind
// 0x0068 (0x00A0 - 0x0038)
class USQEX_AnimNotify_Bonamik_WorldWind final : public UAnimNotify
{
public:
	ESQEX_Bonamik_WindType_Notify                 m_WindType;                                        // 0x0038(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQEX_Bonamik_WindAreaType                    m_AreaType;                                        // 0x0039(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_BonamikWindGlobalAddition;                       // 0x003A(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3B[0x1];                                       // 0x003B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                m_ModelOffset;                                     // 0x003C(0x000C)(Edit, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_LifeTime;                                        // 0x0048(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_SphereRadius;                                    // 0x004C(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                m_BoxSize;                                         // 0x0050(0x000C)(Edit, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_AreaMargin;                                      // 0x005C(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                m_WindForce;                                       // 0x0060(0x000C)(Edit, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                m_RandomRange;                                     // 0x006C(0x000C)(Edit, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_RandomTime;                                      // 0x0078(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_BlastStrength;                                   // 0x007C(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_PeakInRange;                                     // 0x0080(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_BlastRange;                                      // 0x0084(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_BlastSpeed;                                      // 0x0088(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_LoopNum;                                         // 0x008C(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_StartFrame;                                      // 0x0090(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_94[0xC];                                       // 0x0094(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEX_AnimNotify_Bonamik_WorldWind">();
	}
	static class USQEX_AnimNotify_Bonamik_WorldWind* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEX_AnimNotify_Bonamik_WorldWind>();
	}
};
static_assert(alignof(USQEX_AnimNotify_Bonamik_WorldWind) == 0x000008, "Wrong alignment on USQEX_AnimNotify_Bonamik_WorldWind");
static_assert(sizeof(USQEX_AnimNotify_Bonamik_WorldWind) == 0x0000A0, "Wrong size on USQEX_AnimNotify_Bonamik_WorldWind");
static_assert(offsetof(USQEX_AnimNotify_Bonamik_WorldWind, m_WindType) == 0x000038, "Member 'USQEX_AnimNotify_Bonamik_WorldWind::m_WindType' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotify_Bonamik_WorldWind, m_AreaType) == 0x000039, "Member 'USQEX_AnimNotify_Bonamik_WorldWind::m_AreaType' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotify_Bonamik_WorldWind, m_BonamikWindGlobalAddition) == 0x00003A, "Member 'USQEX_AnimNotify_Bonamik_WorldWind::m_BonamikWindGlobalAddition' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotify_Bonamik_WorldWind, m_ModelOffset) == 0x00003C, "Member 'USQEX_AnimNotify_Bonamik_WorldWind::m_ModelOffset' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotify_Bonamik_WorldWind, m_LifeTime) == 0x000048, "Member 'USQEX_AnimNotify_Bonamik_WorldWind::m_LifeTime' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotify_Bonamik_WorldWind, m_SphereRadius) == 0x00004C, "Member 'USQEX_AnimNotify_Bonamik_WorldWind::m_SphereRadius' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotify_Bonamik_WorldWind, m_BoxSize) == 0x000050, "Member 'USQEX_AnimNotify_Bonamik_WorldWind::m_BoxSize' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotify_Bonamik_WorldWind, m_AreaMargin) == 0x00005C, "Member 'USQEX_AnimNotify_Bonamik_WorldWind::m_AreaMargin' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotify_Bonamik_WorldWind, m_WindForce) == 0x000060, "Member 'USQEX_AnimNotify_Bonamik_WorldWind::m_WindForce' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotify_Bonamik_WorldWind, m_RandomRange) == 0x00006C, "Member 'USQEX_AnimNotify_Bonamik_WorldWind::m_RandomRange' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotify_Bonamik_WorldWind, m_RandomTime) == 0x000078, "Member 'USQEX_AnimNotify_Bonamik_WorldWind::m_RandomTime' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotify_Bonamik_WorldWind, m_BlastStrength) == 0x00007C, "Member 'USQEX_AnimNotify_Bonamik_WorldWind::m_BlastStrength' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotify_Bonamik_WorldWind, m_PeakInRange) == 0x000080, "Member 'USQEX_AnimNotify_Bonamik_WorldWind::m_PeakInRange' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotify_Bonamik_WorldWind, m_BlastRange) == 0x000084, "Member 'USQEX_AnimNotify_Bonamik_WorldWind::m_BlastRange' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotify_Bonamik_WorldWind, m_BlastSpeed) == 0x000088, "Member 'USQEX_AnimNotify_Bonamik_WorldWind::m_BlastSpeed' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotify_Bonamik_WorldWind, m_LoopNum) == 0x00008C, "Member 'USQEX_AnimNotify_Bonamik_WorldWind::m_LoopNum' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotify_Bonamik_WorldWind, m_StartFrame) == 0x000090, "Member 'USQEX_AnimNotify_Bonamik_WorldWind::m_StartFrame' has a wrong offset!");

// Class KBDRt.SQEX_AnimNotify_KineDriver_Enable
// 0x0008 (0x0040 - 0x0038)
class USQEX_AnimNotify_KineDriver_Enable final : public UAnimNotify
{
public:
	bool                                          m_On;                                              // 0x0038(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEX_AnimNotify_KineDriver_Enable">();
	}
	static class USQEX_AnimNotify_KineDriver_Enable* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEX_AnimNotify_KineDriver_Enable>();
	}
};
static_assert(alignof(USQEX_AnimNotify_KineDriver_Enable) == 0x000008, "Wrong alignment on USQEX_AnimNotify_KineDriver_Enable");
static_assert(sizeof(USQEX_AnimNotify_KineDriver_Enable) == 0x000040, "Wrong size on USQEX_AnimNotify_KineDriver_Enable");
static_assert(offsetof(USQEX_AnimNotify_KineDriver_Enable, m_On) == 0x000038, "Member 'USQEX_AnimNotify_KineDriver_Enable::m_On' has a wrong offset!");

// Class KBDRt.SQEX_AnimNotify_KineDriver_EnableBone
// 0x0020 (0x0058 - 0x0038)
class USQEX_AnimNotify_KineDriver_EnableBone final : public UAnimNotify
{
public:
	bool                                          m_On;                                              // 0x0038(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           m_BoneNames;                                       // 0x0040(0x0010)(Edit, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          m_ApplyChildren;                                   // 0x0050(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_ApplyBonamik;                                    // 0x0051(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_52[0x6];                                       // 0x0052(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEX_AnimNotify_KineDriver_EnableBone">();
	}
	static class USQEX_AnimNotify_KineDriver_EnableBone* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEX_AnimNotify_KineDriver_EnableBone>();
	}
};
static_assert(alignof(USQEX_AnimNotify_KineDriver_EnableBone) == 0x000008, "Wrong alignment on USQEX_AnimNotify_KineDriver_EnableBone");
static_assert(sizeof(USQEX_AnimNotify_KineDriver_EnableBone) == 0x000058, "Wrong size on USQEX_AnimNotify_KineDriver_EnableBone");
static_assert(offsetof(USQEX_AnimNotify_KineDriver_EnableBone, m_On) == 0x000038, "Member 'USQEX_AnimNotify_KineDriver_EnableBone::m_On' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotify_KineDriver_EnableBone, m_BoneNames) == 0x000040, "Member 'USQEX_AnimNotify_KineDriver_EnableBone::m_BoneNames' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotify_KineDriver_EnableBone, m_ApplyChildren) == 0x000050, "Member 'USQEX_AnimNotify_KineDriver_EnableBone::m_ApplyChildren' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotify_KineDriver_EnableBone, m_ApplyBonamik) == 0x000051, "Member 'USQEX_AnimNotify_KineDriver_EnableBone::m_ApplyBonamik' has a wrong offset!");

// Class KBDRt.SQEX_AnimNotifyState_Bonamik_AlterBodyParams
// 0x0030 (0x0060 - 0x0030)
class USQEX_AnimNotifyState_Bonamik_AlterBodyParams final : public UAnimNotifyState
{
public:
	TArray<class FName>                           m_Groups;                                          // 0x0030(0x0010)(Edit, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSQEX_Bonamik_AlterBodyParameter> m_Parameters;                                      // 0x0040(0x0010)(Edit, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x10];                                      // 0x0050(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEX_AnimNotifyState_Bonamik_AlterBodyParams">();
	}
	static class USQEX_AnimNotifyState_Bonamik_AlterBodyParams* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEX_AnimNotifyState_Bonamik_AlterBodyParams>();
	}
};
static_assert(alignof(USQEX_AnimNotifyState_Bonamik_AlterBodyParams) == 0x000008, "Wrong alignment on USQEX_AnimNotifyState_Bonamik_AlterBodyParams");
static_assert(sizeof(USQEX_AnimNotifyState_Bonamik_AlterBodyParams) == 0x000060, "Wrong size on USQEX_AnimNotifyState_Bonamik_AlterBodyParams");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_AlterBodyParams, m_Groups) == 0x000030, "Member 'USQEX_AnimNotifyState_Bonamik_AlterBodyParams::m_Groups' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_AlterBodyParams, m_Parameters) == 0x000040, "Member 'USQEX_AnimNotifyState_Bonamik_AlterBodyParams::m_Parameters' has a wrong offset!");

// Class KBDRt.SQEX_AnimNotifyState_Bonamik_AlterLinkParams
// 0x0030 (0x0060 - 0x0030)
class USQEX_AnimNotifyState_Bonamik_AlterLinkParams final : public UAnimNotifyState
{
public:
	TArray<class FName>                           m_Groups;                                          // 0x0030(0x0010)(Edit, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSQEX_Bonamik_AlterLinkParameter> m_Parameters;                                      // 0x0040(0x0010)(Edit, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x10];                                      // 0x0050(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEX_AnimNotifyState_Bonamik_AlterLinkParams">();
	}
	static class USQEX_AnimNotifyState_Bonamik_AlterLinkParams* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEX_AnimNotifyState_Bonamik_AlterLinkParams>();
	}
};
static_assert(alignof(USQEX_AnimNotifyState_Bonamik_AlterLinkParams) == 0x000008, "Wrong alignment on USQEX_AnimNotifyState_Bonamik_AlterLinkParams");
static_assert(sizeof(USQEX_AnimNotifyState_Bonamik_AlterLinkParams) == 0x000060, "Wrong size on USQEX_AnimNotifyState_Bonamik_AlterLinkParams");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_AlterLinkParams, m_Groups) == 0x000030, "Member 'USQEX_AnimNotifyState_Bonamik_AlterLinkParams::m_Groups' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_AlterLinkParams, m_Parameters) == 0x000040, "Member 'USQEX_AnimNotifyState_Bonamik_AlterLinkParams::m_Parameters' has a wrong offset!");

// Class KBDRt.SQEX_AnimNotifyState_Bonamik_CharaWind
// 0x0040 (0x0070 - 0x0030)
class USQEX_AnimNotifyState_Bonamik_CharaWind final : public UAnimNotifyState
{
public:
	TArray<class FName>                           m_Groups;                                          // 0x0030(0x0010)(Edit, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	ESQEX_Bonamik_EmissiveDirection               m_DirectionSpace;                                  // 0x0040(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                m_DirectionVec;                                    // 0x0044(0x000C)(Edit, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_BaseStrength;                                    // 0x0050(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_WaveAmplitude;                                   // 0x0054(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_WavePeriod;                                      // 0x0058(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_DisableWorldWind;                                // 0x005C(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5D[0x13];                                      // 0x005D(0x0013)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEX_AnimNotifyState_Bonamik_CharaWind">();
	}
	static class USQEX_AnimNotifyState_Bonamik_CharaWind* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEX_AnimNotifyState_Bonamik_CharaWind>();
	}
};
static_assert(alignof(USQEX_AnimNotifyState_Bonamik_CharaWind) == 0x000008, "Wrong alignment on USQEX_AnimNotifyState_Bonamik_CharaWind");
static_assert(sizeof(USQEX_AnimNotifyState_Bonamik_CharaWind) == 0x000070, "Wrong size on USQEX_AnimNotifyState_Bonamik_CharaWind");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_CharaWind, m_Groups) == 0x000030, "Member 'USQEX_AnimNotifyState_Bonamik_CharaWind::m_Groups' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_CharaWind, m_DirectionSpace) == 0x000040, "Member 'USQEX_AnimNotifyState_Bonamik_CharaWind::m_DirectionSpace' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_CharaWind, m_DirectionVec) == 0x000044, "Member 'USQEX_AnimNotifyState_Bonamik_CharaWind::m_DirectionVec' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_CharaWind, m_BaseStrength) == 0x000050, "Member 'USQEX_AnimNotifyState_Bonamik_CharaWind::m_BaseStrength' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_CharaWind, m_WaveAmplitude) == 0x000054, "Member 'USQEX_AnimNotifyState_Bonamik_CharaWind::m_WaveAmplitude' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_CharaWind, m_WavePeriod) == 0x000058, "Member 'USQEX_AnimNotifyState_Bonamik_CharaWind::m_WavePeriod' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_CharaWind, m_DisableWorldWind) == 0x00005C, "Member 'USQEX_AnimNotifyState_Bonamik_CharaWind::m_DisableWorldWind' has a wrong offset!");

// Class KBDRt.SQEX_AnimNotifyState_Bonamik_Enable
// 0x0020 (0x0050 - 0x0030)
class USQEX_AnimNotifyState_Bonamik_Enable final : public UAnimNotifyState
{
public:
	TArray<class FName>                           m_Groups;                                          // 0x0030(0x0010)(Edit, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          m_On;                                              // 0x0040(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_PreserveLatestResult;                            // 0x0041(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_42[0x2];                                       // 0x0042(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_BeginBlendTime;                                  // 0x0044(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_EndBlendTime;                                    // 0x0048(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEX_AnimNotifyState_Bonamik_Enable">();
	}
	static class USQEX_AnimNotifyState_Bonamik_Enable* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEX_AnimNotifyState_Bonamik_Enable>();
	}
};
static_assert(alignof(USQEX_AnimNotifyState_Bonamik_Enable) == 0x000008, "Wrong alignment on USQEX_AnimNotifyState_Bonamik_Enable");
static_assert(sizeof(USQEX_AnimNotifyState_Bonamik_Enable) == 0x000050, "Wrong size on USQEX_AnimNotifyState_Bonamik_Enable");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_Enable, m_Groups) == 0x000030, "Member 'USQEX_AnimNotifyState_Bonamik_Enable::m_Groups' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_Enable, m_On) == 0x000040, "Member 'USQEX_AnimNotifyState_Bonamik_Enable::m_On' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_Enable, m_PreserveLatestResult) == 0x000041, "Member 'USQEX_AnimNotifyState_Bonamik_Enable::m_PreserveLatestResult' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_Enable, m_BeginBlendTime) == 0x000044, "Member 'USQEX_AnimNotifyState_Bonamik_Enable::m_BeginBlendTime' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_Enable, m_EndBlendTime) == 0x000048, "Member 'USQEX_AnimNotifyState_Bonamik_Enable::m_EndBlendTime' has a wrong offset!");

// Class KBDRt.SQEX_AnimNotifyState_Bonamik_EnableGroundCollision
// 0x0018 (0x0048 - 0x0030)
class USQEX_AnimNotifyState_Bonamik_EnableGroundCollision final : public UAnimNotifyState
{
public:
	bool                                          m_Enable;                                          // 0x0030(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         m_Groups;                                          // 0x0038(0x0010)(Edit, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEX_AnimNotifyState_Bonamik_EnableGroundCollision">();
	}
	static class USQEX_AnimNotifyState_Bonamik_EnableGroundCollision* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEX_AnimNotifyState_Bonamik_EnableGroundCollision>();
	}
};
static_assert(alignof(USQEX_AnimNotifyState_Bonamik_EnableGroundCollision) == 0x000008, "Wrong alignment on USQEX_AnimNotifyState_Bonamik_EnableGroundCollision");
static_assert(sizeof(USQEX_AnimNotifyState_Bonamik_EnableGroundCollision) == 0x000048, "Wrong size on USQEX_AnimNotifyState_Bonamik_EnableGroundCollision");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_EnableGroundCollision, m_Enable) == 0x000030, "Member 'USQEX_AnimNotifyState_Bonamik_EnableGroundCollision::m_Enable' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_EnableGroundCollision, m_Groups) == 0x000038, "Member 'USQEX_AnimNotifyState_Bonamik_EnableGroundCollision::m_Groups' has a wrong offset!");

// Class KBDRt.SQEX_AnimNotifyState_Bonamik_EnablePresetWind
// 0x0018 (0x0048 - 0x0030)
class USQEX_AnimNotifyState_Bonamik_EnablePresetWind final : public UAnimNotifyState
{
public:
	bool                                          m_Enable;                                          // 0x0030(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           m_PresetNames;                                     // 0x0038(0x0010)(Edit, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEX_AnimNotifyState_Bonamik_EnablePresetWind">();
	}
	static class USQEX_AnimNotifyState_Bonamik_EnablePresetWind* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEX_AnimNotifyState_Bonamik_EnablePresetWind>();
	}
};
static_assert(alignof(USQEX_AnimNotifyState_Bonamik_EnablePresetWind) == 0x000008, "Wrong alignment on USQEX_AnimNotifyState_Bonamik_EnablePresetWind");
static_assert(sizeof(USQEX_AnimNotifyState_Bonamik_EnablePresetWind) == 0x000048, "Wrong size on USQEX_AnimNotifyState_Bonamik_EnablePresetWind");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_EnablePresetWind, m_Enable) == 0x000030, "Member 'USQEX_AnimNotifyState_Bonamik_EnablePresetWind::m_Enable' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_EnablePresetWind, m_PresetNames) == 0x000038, "Member 'USQEX_AnimNotifyState_Bonamik_EnablePresetWind::m_PresetNames' has a wrong offset!");

// Class KBDRt.SQEX_AnimNotifyState_Bonamik_MeshSpaceSimulation
// 0x0000 (0x0030 - 0x0030)
class USQEX_AnimNotifyState_Bonamik_MeshSpaceSimulation final : public UAnimNotifyState
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEX_AnimNotifyState_Bonamik_MeshSpaceSimulation">();
	}
	static class USQEX_AnimNotifyState_Bonamik_MeshSpaceSimulation* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEX_AnimNotifyState_Bonamik_MeshSpaceSimulation>();
	}
};
static_assert(alignof(USQEX_AnimNotifyState_Bonamik_MeshSpaceSimulation) == 0x000008, "Wrong alignment on USQEX_AnimNotifyState_Bonamik_MeshSpaceSimulation");
static_assert(sizeof(USQEX_AnimNotifyState_Bonamik_MeshSpaceSimulation) == 0x000030, "Wrong size on USQEX_AnimNotifyState_Bonamik_MeshSpaceSimulation");

// Class KBDRt.SQEX_AnimNotifyState_Bonamik_ReinitializeSimulationPose
// 0x0000 (0x0030 - 0x0030)
class USQEX_AnimNotifyState_Bonamik_ReinitializeSimulationPose final : public UAnimNotifyState
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEX_AnimNotifyState_Bonamik_ReinitializeSimulationPose">();
	}
	static class USQEX_AnimNotifyState_Bonamik_ReinitializeSimulationPose* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEX_AnimNotifyState_Bonamik_ReinitializeSimulationPose>();
	}
};
static_assert(alignof(USQEX_AnimNotifyState_Bonamik_ReinitializeSimulationPose) == 0x000008, "Wrong alignment on USQEX_AnimNotifyState_Bonamik_ReinitializeSimulationPose");
static_assert(sizeof(USQEX_AnimNotifyState_Bonamik_ReinitializeSimulationPose) == 0x000030, "Wrong size on USQEX_AnimNotifyState_Bonamik_ReinitializeSimulationPose");

// Class KBDRt.SQEX_AnimNotifyState_Bonamik_ScaleBodyParams
// 0x0030 (0x0060 - 0x0030)
class USQEX_AnimNotifyState_Bonamik_ScaleBodyParams final : public UAnimNotifyState
{
public:
	TArray<class FName>                           m_Groups;                                          // 0x0030(0x0010)(Edit, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSQEX_Bonamik_ScaleBodyParameter> m_Parameters;                                      // 0x0040(0x0010)(Edit, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x10];                                      // 0x0050(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEX_AnimNotifyState_Bonamik_ScaleBodyParams">();
	}
	static class USQEX_AnimNotifyState_Bonamik_ScaleBodyParams* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEX_AnimNotifyState_Bonamik_ScaleBodyParams>();
	}
};
static_assert(alignof(USQEX_AnimNotifyState_Bonamik_ScaleBodyParams) == 0x000008, "Wrong alignment on USQEX_AnimNotifyState_Bonamik_ScaleBodyParams");
static_assert(sizeof(USQEX_AnimNotifyState_Bonamik_ScaleBodyParams) == 0x000060, "Wrong size on USQEX_AnimNotifyState_Bonamik_ScaleBodyParams");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_ScaleBodyParams, m_Groups) == 0x000030, "Member 'USQEX_AnimNotifyState_Bonamik_ScaleBodyParams::m_Groups' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_ScaleBodyParams, m_Parameters) == 0x000040, "Member 'USQEX_AnimNotifyState_Bonamik_ScaleBodyParams::m_Parameters' has a wrong offset!");

// Class KBDRt.SQEX_AnimNotifyState_Bonamik_ScaleGroupParams
// 0x0048 (0x0078 - 0x0030)
class USQEX_AnimNotifyState_Bonamik_ScaleGroupParams final : public UAnimNotifyState
{
public:
	TArray<class FString>                         m_Groups;                                          // 0x0030(0x0010)(Edit, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          m_ChangeInnerCone;                                 // 0x0040(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_InnerConeScale;                                  // 0x0044(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_ChangeOuterCone;                                 // 0x0048(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_OuterConeScale;                                  // 0x004C(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_ChangeLocalForce;                                // 0x0050(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_LocalForceScale;                                 // 0x0054(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_ChangeWindScale;                                 // 0x0058(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_GroupWindScale;                                  // 0x005C(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_ChangeCharaWindScale;                            // 0x0060(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_GroupCharaWindScale;                             // 0x0064(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_ChangeMassScale;                                 // 0x0068(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_GroupMassScale;                                  // 0x006C(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_ApplyToAttachments;                              // 0x0070(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEX_AnimNotifyState_Bonamik_ScaleGroupParams">();
	}
	static class USQEX_AnimNotifyState_Bonamik_ScaleGroupParams* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEX_AnimNotifyState_Bonamik_ScaleGroupParams>();
	}
};
static_assert(alignof(USQEX_AnimNotifyState_Bonamik_ScaleGroupParams) == 0x000008, "Wrong alignment on USQEX_AnimNotifyState_Bonamik_ScaleGroupParams");
static_assert(sizeof(USQEX_AnimNotifyState_Bonamik_ScaleGroupParams) == 0x000078, "Wrong size on USQEX_AnimNotifyState_Bonamik_ScaleGroupParams");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_ScaleGroupParams, m_Groups) == 0x000030, "Member 'USQEX_AnimNotifyState_Bonamik_ScaleGroupParams::m_Groups' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_ScaleGroupParams, m_ChangeInnerCone) == 0x000040, "Member 'USQEX_AnimNotifyState_Bonamik_ScaleGroupParams::m_ChangeInnerCone' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_ScaleGroupParams, m_InnerConeScale) == 0x000044, "Member 'USQEX_AnimNotifyState_Bonamik_ScaleGroupParams::m_InnerConeScale' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_ScaleGroupParams, m_ChangeOuterCone) == 0x000048, "Member 'USQEX_AnimNotifyState_Bonamik_ScaleGroupParams::m_ChangeOuterCone' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_ScaleGroupParams, m_OuterConeScale) == 0x00004C, "Member 'USQEX_AnimNotifyState_Bonamik_ScaleGroupParams::m_OuterConeScale' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_ScaleGroupParams, m_ChangeLocalForce) == 0x000050, "Member 'USQEX_AnimNotifyState_Bonamik_ScaleGroupParams::m_ChangeLocalForce' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_ScaleGroupParams, m_LocalForceScale) == 0x000054, "Member 'USQEX_AnimNotifyState_Bonamik_ScaleGroupParams::m_LocalForceScale' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_ScaleGroupParams, m_ChangeWindScale) == 0x000058, "Member 'USQEX_AnimNotifyState_Bonamik_ScaleGroupParams::m_ChangeWindScale' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_ScaleGroupParams, m_GroupWindScale) == 0x00005C, "Member 'USQEX_AnimNotifyState_Bonamik_ScaleGroupParams::m_GroupWindScale' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_ScaleGroupParams, m_ChangeCharaWindScale) == 0x000060, "Member 'USQEX_AnimNotifyState_Bonamik_ScaleGroupParams::m_ChangeCharaWindScale' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_ScaleGroupParams, m_GroupCharaWindScale) == 0x000064, "Member 'USQEX_AnimNotifyState_Bonamik_ScaleGroupParams::m_GroupCharaWindScale' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_ScaleGroupParams, m_ChangeMassScale) == 0x000068, "Member 'USQEX_AnimNotifyState_Bonamik_ScaleGroupParams::m_ChangeMassScale' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_ScaleGroupParams, m_GroupMassScale) == 0x00006C, "Member 'USQEX_AnimNotifyState_Bonamik_ScaleGroupParams::m_GroupMassScale' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_ScaleGroupParams, m_ApplyToAttachments) == 0x000070, "Member 'USQEX_AnimNotifyState_Bonamik_ScaleGroupParams::m_ApplyToAttachments' has a wrong offset!");

// Class KBDRt.SQEX_AnimNotifyState_Bonamik_ScaleLinkParams
// 0x0030 (0x0060 - 0x0030)
class USQEX_AnimNotifyState_Bonamik_ScaleLinkParams final : public UAnimNotifyState
{
public:
	TArray<class FName>                           m_Groups;                                          // 0x0030(0x0010)(Edit, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSQEX_Bonamik_ScaleLinkParameter> m_Parameters;                                      // 0x0040(0x0010)(Edit, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x10];                                      // 0x0050(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEX_AnimNotifyState_Bonamik_ScaleLinkParams">();
	}
	static class USQEX_AnimNotifyState_Bonamik_ScaleLinkParams* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEX_AnimNotifyState_Bonamik_ScaleLinkParams>();
	}
};
static_assert(alignof(USQEX_AnimNotifyState_Bonamik_ScaleLinkParams) == 0x000008, "Wrong alignment on USQEX_AnimNotifyState_Bonamik_ScaleLinkParams");
static_assert(sizeof(USQEX_AnimNotifyState_Bonamik_ScaleLinkParams) == 0x000060, "Wrong size on USQEX_AnimNotifyState_Bonamik_ScaleLinkParams");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_ScaleLinkParams, m_Groups) == 0x000030, "Member 'USQEX_AnimNotifyState_Bonamik_ScaleLinkParams::m_Groups' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_ScaleLinkParams, m_Parameters) == 0x000040, "Member 'USQEX_AnimNotifyState_Bonamik_ScaleLinkParams::m_Parameters' has a wrong offset!");

// Class KBDRt.SQEX_AnimNotifyState_Bonamik_ScaleWorldWind
// 0x0018 (0x0048 - 0x0030)
class USQEX_AnimNotifyState_Bonamik_ScaleWorldWind final : public UAnimNotifyState
{
public:
	TArray<class FName>                           m_Groups;                                          // 0x0030(0x0010)(Edit, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         m_Scale;                                           // 0x0040(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEX_AnimNotifyState_Bonamik_ScaleWorldWind">();
	}
	static class USQEX_AnimNotifyState_Bonamik_ScaleWorldWind* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEX_AnimNotifyState_Bonamik_ScaleWorldWind>();
	}
};
static_assert(alignof(USQEX_AnimNotifyState_Bonamik_ScaleWorldWind) == 0x000008, "Wrong alignment on USQEX_AnimNotifyState_Bonamik_ScaleWorldWind");
static_assert(sizeof(USQEX_AnimNotifyState_Bonamik_ScaleWorldWind) == 0x000048, "Wrong size on USQEX_AnimNotifyState_Bonamik_ScaleWorldWind");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_ScaleWorldWind, m_Groups) == 0x000030, "Member 'USQEX_AnimNotifyState_Bonamik_ScaleWorldWind::m_Groups' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_ScaleWorldWind, m_Scale) == 0x000040, "Member 'USQEX_AnimNotifyState_Bonamik_ScaleWorldWind::m_Scale' has a wrong offset!");

// Class KBDRt.SQEX_AnimNotifyState_Bonamik_SpeedRate
// 0x0020 (0x0050 - 0x0030)
class USQEX_AnimNotifyState_Bonamik_SpeedRate final : public UAnimNotifyState
{
public:
	float                                         m_BeginSpeedRate;                                  // 0x0030(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_BeginBlendTime;                                  // 0x0034(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_RestoreOriginalSpeedRate;                        // 0x0038(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_EndSpeedRate;                                    // 0x003C(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_EndBlendTime;                                    // 0x0040(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_ApplyToChildren;                                 // 0x0044(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0xB];                                       // 0x0045(0x000B)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEX_AnimNotifyState_Bonamik_SpeedRate">();
	}
	static class USQEX_AnimNotifyState_Bonamik_SpeedRate* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEX_AnimNotifyState_Bonamik_SpeedRate>();
	}
};
static_assert(alignof(USQEX_AnimNotifyState_Bonamik_SpeedRate) == 0x000008, "Wrong alignment on USQEX_AnimNotifyState_Bonamik_SpeedRate");
static_assert(sizeof(USQEX_AnimNotifyState_Bonamik_SpeedRate) == 0x000050, "Wrong size on USQEX_AnimNotifyState_Bonamik_SpeedRate");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_SpeedRate, m_BeginSpeedRate) == 0x000030, "Member 'USQEX_AnimNotifyState_Bonamik_SpeedRate::m_BeginSpeedRate' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_SpeedRate, m_BeginBlendTime) == 0x000034, "Member 'USQEX_AnimNotifyState_Bonamik_SpeedRate::m_BeginBlendTime' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_SpeedRate, m_RestoreOriginalSpeedRate) == 0x000038, "Member 'USQEX_AnimNotifyState_Bonamik_SpeedRate::m_RestoreOriginalSpeedRate' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_SpeedRate, m_EndSpeedRate) == 0x00003C, "Member 'USQEX_AnimNotifyState_Bonamik_SpeedRate::m_EndSpeedRate' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_SpeedRate, m_EndBlendTime) == 0x000040, "Member 'USQEX_AnimNotifyState_Bonamik_SpeedRate::m_EndBlendTime' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_SpeedRate, m_ApplyToChildren) == 0x000044, "Member 'USQEX_AnimNotifyState_Bonamik_SpeedRate::m_ApplyToChildren' has a wrong offset!");

// Class KBDRt.SQEX_AnimNotifyState_Bonamik_TemporaryCollision
// 0x0070 (0x00A0 - 0x0030)
class USQEX_AnimNotifyState_Bonamik_TemporaryCollision final : public UAnimNotifyState
{
public:
	TArray<struct FSQEX_BonamikTempCollisionParameter> m_Parameters;                                      // 0x0030(0x0010)(Edit, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           m_CollisionGroups;                                 // 0x0040(0x0010)(Edit, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x50];                                      // 0x0050(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEX_AnimNotifyState_Bonamik_TemporaryCollision">();
	}
	static class USQEX_AnimNotifyState_Bonamik_TemporaryCollision* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEX_AnimNotifyState_Bonamik_TemporaryCollision>();
	}
};
static_assert(alignof(USQEX_AnimNotifyState_Bonamik_TemporaryCollision) == 0x000008, "Wrong alignment on USQEX_AnimNotifyState_Bonamik_TemporaryCollision");
static_assert(sizeof(USQEX_AnimNotifyState_Bonamik_TemporaryCollision) == 0x0000A0, "Wrong size on USQEX_AnimNotifyState_Bonamik_TemporaryCollision");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_TemporaryCollision, m_Parameters) == 0x000030, "Member 'USQEX_AnimNotifyState_Bonamik_TemporaryCollision::m_Parameters' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_TemporaryCollision, m_CollisionGroups) == 0x000040, "Member 'USQEX_AnimNotifyState_Bonamik_TemporaryCollision::m_CollisionGroups' has a wrong offset!");

// Class KBDRt.SQEX_AnimNotifyState_Bonamik_Weight
// 0x0028 (0x0058 - 0x0030)
class USQEX_AnimNotifyState_Bonamik_Weight final : public UAnimNotifyState
{
public:
	TArray<class FString>                         m_Groups;                                          // 0x0030(0x0010)(Edit, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         m_BeginBonamikWeight;                              // 0x0040(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_BeginTime;                                       // 0x0044(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_EndBonamikWeight;                                // 0x0048(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_EndTime;                                         // 0x004C(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_ResetWhenNonZeroWeight;                          // 0x0050(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEX_AnimNotifyState_Bonamik_Weight">();
	}
	static class USQEX_AnimNotifyState_Bonamik_Weight* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEX_AnimNotifyState_Bonamik_Weight>();
	}
};
static_assert(alignof(USQEX_AnimNotifyState_Bonamik_Weight) == 0x000008, "Wrong alignment on USQEX_AnimNotifyState_Bonamik_Weight");
static_assert(sizeof(USQEX_AnimNotifyState_Bonamik_Weight) == 0x000058, "Wrong size on USQEX_AnimNotifyState_Bonamik_Weight");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_Weight, m_Groups) == 0x000030, "Member 'USQEX_AnimNotifyState_Bonamik_Weight::m_Groups' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_Weight, m_BeginBonamikWeight) == 0x000040, "Member 'USQEX_AnimNotifyState_Bonamik_Weight::m_BeginBonamikWeight' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_Weight, m_BeginTime) == 0x000044, "Member 'USQEX_AnimNotifyState_Bonamik_Weight::m_BeginTime' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_Weight, m_EndBonamikWeight) == 0x000048, "Member 'USQEX_AnimNotifyState_Bonamik_Weight::m_EndBonamikWeight' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_Weight, m_EndTime) == 0x00004C, "Member 'USQEX_AnimNotifyState_Bonamik_Weight::m_EndTime' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_Weight, m_ResetWhenNonZeroWeight) == 0x000050, "Member 'USQEX_AnimNotifyState_Bonamik_Weight::m_ResetWhenNonZeroWeight' has a wrong offset!");

// Class KBDRt.SQEX_AnimNotifyState_Bonamik_WindControl
// 0x0018 (0x0048 - 0x0030)
class USQEX_AnimNotifyState_Bonamik_WindControl final : public UAnimNotifyState
{
public:
	float                                         m_GlobalWindScale;                                 // 0x0030(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x14];                                      // 0x0034(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEX_AnimNotifyState_Bonamik_WindControl">();
	}
	static class USQEX_AnimNotifyState_Bonamik_WindControl* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEX_AnimNotifyState_Bonamik_WindControl>();
	}
};
static_assert(alignof(USQEX_AnimNotifyState_Bonamik_WindControl) == 0x000008, "Wrong alignment on USQEX_AnimNotifyState_Bonamik_WindControl");
static_assert(sizeof(USQEX_AnimNotifyState_Bonamik_WindControl) == 0x000048, "Wrong size on USQEX_AnimNotifyState_Bonamik_WindControl");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_WindControl, m_GlobalWindScale) == 0x000030, "Member 'USQEX_AnimNotifyState_Bonamik_WindControl::m_GlobalWindScale' has a wrong offset!");

// Class KBDRt.SQEX_AnimNotifyState_Bonamik_WorldWind
// 0x0070 (0x00A0 - 0x0030)
class USQEX_AnimNotifyState_Bonamik_WorldWind final : public UAnimNotifyState
{
public:
	ESQEX_Bonamik_WindType_Notify                 m_WindType;                                        // 0x0030(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQEX_Bonamik_WindAreaType                    m_AreaType;                                        // 0x0031(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_BonamikWindGlobalAddition;                       // 0x0032(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_33[0x1];                                       // 0x0033(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                m_ModelOffset;                                     // 0x0034(0x000C)(Edit, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_SphereRadius;                                    // 0x0040(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                m_BoxSize;                                         // 0x0044(0x000C)(Edit, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_AreaMargin;                                      // 0x0050(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                m_WindForce;                                       // 0x0054(0x000C)(Edit, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                m_RandomRange;                                     // 0x0060(0x000C)(Edit, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_RandomTime;                                      // 0x006C(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_BlastStrength;                                   // 0x0070(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_PeakInRange;                                     // 0x0074(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_BlastRange;                                      // 0x0078(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_BlastSpeed;                                      // 0x007C(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_LoopNum;                                         // 0x0080(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_StartFrame;                                      // 0x0084(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_88[0x18];                                      // 0x0088(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEX_AnimNotifyState_Bonamik_WorldWind">();
	}
	static class USQEX_AnimNotifyState_Bonamik_WorldWind* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEX_AnimNotifyState_Bonamik_WorldWind>();
	}
};
static_assert(alignof(USQEX_AnimNotifyState_Bonamik_WorldWind) == 0x000008, "Wrong alignment on USQEX_AnimNotifyState_Bonamik_WorldWind");
static_assert(sizeof(USQEX_AnimNotifyState_Bonamik_WorldWind) == 0x0000A0, "Wrong size on USQEX_AnimNotifyState_Bonamik_WorldWind");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_WorldWind, m_WindType) == 0x000030, "Member 'USQEX_AnimNotifyState_Bonamik_WorldWind::m_WindType' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_WorldWind, m_AreaType) == 0x000031, "Member 'USQEX_AnimNotifyState_Bonamik_WorldWind::m_AreaType' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_WorldWind, m_BonamikWindGlobalAddition) == 0x000032, "Member 'USQEX_AnimNotifyState_Bonamik_WorldWind::m_BonamikWindGlobalAddition' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_WorldWind, m_ModelOffset) == 0x000034, "Member 'USQEX_AnimNotifyState_Bonamik_WorldWind::m_ModelOffset' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_WorldWind, m_SphereRadius) == 0x000040, "Member 'USQEX_AnimNotifyState_Bonamik_WorldWind::m_SphereRadius' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_WorldWind, m_BoxSize) == 0x000044, "Member 'USQEX_AnimNotifyState_Bonamik_WorldWind::m_BoxSize' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_WorldWind, m_AreaMargin) == 0x000050, "Member 'USQEX_AnimNotifyState_Bonamik_WorldWind::m_AreaMargin' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_WorldWind, m_WindForce) == 0x000054, "Member 'USQEX_AnimNotifyState_Bonamik_WorldWind::m_WindForce' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_WorldWind, m_RandomRange) == 0x000060, "Member 'USQEX_AnimNotifyState_Bonamik_WorldWind::m_RandomRange' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_WorldWind, m_RandomTime) == 0x00006C, "Member 'USQEX_AnimNotifyState_Bonamik_WorldWind::m_RandomTime' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_WorldWind, m_BlastStrength) == 0x000070, "Member 'USQEX_AnimNotifyState_Bonamik_WorldWind::m_BlastStrength' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_WorldWind, m_PeakInRange) == 0x000074, "Member 'USQEX_AnimNotifyState_Bonamik_WorldWind::m_PeakInRange' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_WorldWind, m_BlastRange) == 0x000078, "Member 'USQEX_AnimNotifyState_Bonamik_WorldWind::m_BlastRange' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_WorldWind, m_BlastSpeed) == 0x00007C, "Member 'USQEX_AnimNotifyState_Bonamik_WorldWind::m_BlastSpeed' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_WorldWind, m_LoopNum) == 0x000080, "Member 'USQEX_AnimNotifyState_Bonamik_WorldWind::m_LoopNum' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotifyState_Bonamik_WorldWind, m_StartFrame) == 0x000084, "Member 'USQEX_AnimNotifyState_Bonamik_WorldWind::m_StartFrame' has a wrong offset!");

// Class KBDRt.SQEX_AnimNotifyState_KineDriver_Enable
// 0x0008 (0x0038 - 0x0030)
class USQEX_AnimNotifyState_KineDriver_Enable final : public UAnimNotifyState
{
public:
	bool                                          m_On;                                              // 0x0030(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEX_AnimNotifyState_KineDriver_Enable">();
	}
	static class USQEX_AnimNotifyState_KineDriver_Enable* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEX_AnimNotifyState_KineDriver_Enable>();
	}
};
static_assert(alignof(USQEX_AnimNotifyState_KineDriver_Enable) == 0x000008, "Wrong alignment on USQEX_AnimNotifyState_KineDriver_Enable");
static_assert(sizeof(USQEX_AnimNotifyState_KineDriver_Enable) == 0x000038, "Wrong size on USQEX_AnimNotifyState_KineDriver_Enable");
static_assert(offsetof(USQEX_AnimNotifyState_KineDriver_Enable, m_On) == 0x000030, "Member 'USQEX_AnimNotifyState_KineDriver_Enable::m_On' has a wrong offset!");

// Class KBDRt.SQEX_AnimNotifyState_KineDriver_EnableBone
// 0x0020 (0x0050 - 0x0030)
class USQEX_AnimNotifyState_KineDriver_EnableBone final : public UAnimNotifyState
{
public:
	bool                                          m_On;                                              // 0x0030(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           m_BoneNames;                                       // 0x0038(0x0010)(Edit, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          m_ApplyChildren;                                   // 0x0048(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_ApplyBonamik;                                    // 0x0049(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A[0x6];                                       // 0x004A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEX_AnimNotifyState_KineDriver_EnableBone">();
	}
	static class USQEX_AnimNotifyState_KineDriver_EnableBone* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEX_AnimNotifyState_KineDriver_EnableBone>();
	}
};
static_assert(alignof(USQEX_AnimNotifyState_KineDriver_EnableBone) == 0x000008, "Wrong alignment on USQEX_AnimNotifyState_KineDriver_EnableBone");
static_assert(sizeof(USQEX_AnimNotifyState_KineDriver_EnableBone) == 0x000050, "Wrong size on USQEX_AnimNotifyState_KineDriver_EnableBone");
static_assert(offsetof(USQEX_AnimNotifyState_KineDriver_EnableBone, m_On) == 0x000030, "Member 'USQEX_AnimNotifyState_KineDriver_EnableBone::m_On' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotifyState_KineDriver_EnableBone, m_BoneNames) == 0x000038, "Member 'USQEX_AnimNotifyState_KineDriver_EnableBone::m_BoneNames' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotifyState_KineDriver_EnableBone, m_ApplyChildren) == 0x000048, "Member 'USQEX_AnimNotifyState_KineDriver_EnableBone::m_ApplyChildren' has a wrong offset!");
static_assert(offsetof(USQEX_AnimNotifyState_KineDriver_EnableBone, m_ApplyBonamik) == 0x000049, "Member 'USQEX_AnimNotifyState_KineDriver_EnableBone::m_ApplyBonamik' has a wrong offset!");

// Class KBDRt.SQEX_KBD_Component
// 0x02B0 (0x0560 - 0x02B0)
class USQEX_KBD_Component final : public USceneComponent
{
public:
	uint8                                         Pad_2B0[0x160];                                    // 0x02B0(0x0160)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMeshComponent*                 SkeletalMeshComponent;                             // 0x0410(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCharacterMovementComponent*            CharacterMovementComponent;                        // 0x0418(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USQEX_BonamikGlobalConfig*              BonamikGlobalConfig;                               // 0x0420(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_428[0x138];                                    // 0x0428(0x0138)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SQEX_Bonamik_AddReference(class USQEX_KBD_Component* OtherComponent, const class FString& ReferenceGroupName);
	void SQEX_Bonamik_AddReferenceCommon(class USQEX_KBD_Component* OtherComponent);
	void SQEX_Bonamik_AddReferenceDefault(bool bEnableOtherInstance);
	int32 SQEX_Bonamik_AddTemporaryCollision(const TArray<class FName>& CollisionGroups, const TArray<struct FSQEX_BonamikTempCollisionParameter>& CollisionParam);
	void SQEX_Bonamik_ClearAllPresetWind();
	void SQEX_Bonamik_ClearEmissiveWind(float BlendTime, bool bApplyToChildren);
	void SQEX_Bonamik_ClearExtendEmissiveWind(float BlendTime, bool bApplyToChildren);
	void SQEX_Bonamik_DisablePresetWind(const TArray<class FName>& PresetNames);
	void SQEX_Bonamik_EnablePresetWind(const TArray<class FName>& PresetNames);
	float SQEX_Bonamik_GetTeleportDistance();
	float SQEX_Bonamik_GetWeight();
	bool SQEX_Bonamik_IsAutoDisable();
	bool SQEX_Bonamik_IsSetup();
	void SQEX_Bonamik_ReinitializeSimulationPose();
	void SQEX_Bonamik_RemoveReference(class USQEX_KBD_Component* OtherComponent, const class FString& ReferenceGroupName);
	void SQEX_Bonamik_RemoveReferenceAll();
	void SQEX_Bonamik_RemoveReferenceCommon(class USQEX_KBD_Component* OtherComponent);
	void SQEX_Bonamik_RemoveReferenceDefault(bool bEnableOtherInstance);
	void SQEX_Bonamik_RemoveTemporaryCollision(int32 CollisionId);
	void SQEX_Bonamik_Reset(bool bResetPose, bool bApplyToChildren);
	void SQEX_Bonamik_ResetGravity();
	void SQEX_Bonamik_RestoreDefaultParameters();
	void SQEX_Bonamik_RestoreGroupParam(const TArray<struct FSQEX_BonamikChangingParameter>& GroupParam);
	void SQEX_Bonamik_RestoreGroupParamExt(const TArray<struct FSQEX_BonamikChangingParameterExt>& GroupParam);
	void SQEX_Bonamik_ScaleGroupParam(const TArray<struct FSQEX_BonamikChangingParameter>& GroupParam);
	void SQEX_Bonamik_SetAnimPos(int32 BoneIndex, bool bForceSet);
	void SQEX_Bonamik_SetAutoDisable(bool AutoDisable);
	void SQEX_Bonamik_SetEmissiveWind(const TArray<class FName>& Groups, ESQEX_Bonamik_EmissiveDirection DirectionSpace, const struct FVector& DirectionVec, float BaseStrength, float WaveAmplitude, float WaveFreq, float BlendTime, bool bApplyToChildren);
	void SQEX_Bonamik_SetEnable(bool NewEnable);
	void SQEX_Bonamik_SetEnableGroundCollision(const TArray<class FName>& Groups, bool bNewEnable);
	void SQEX_Bonamik_SetEnableGroundCollisionAll(bool bNewEnable);
	void SQEX_Bonamik_SetExtendEmissiveWind(const TArray<class FName>& Groups, ESQEX_Bonamik_EmissiveDirection DirectionSpace, const struct FVector& DirectionVec, float BaseStrength, float WaveAmplitude, float WaveFreq, float BlendTime, bool bApplyToChildren);
	void SQEX_Bonamik_SetGravity(const struct FVector& Gravity);
	void SQEX_Bonamik_SetGroupParam(const TArray<struct FSQEX_BonamikChangingParameter>& GroupParam);
	void SQEX_Bonamik_SetGroupParamExt(const TArray<struct FSQEX_BonamikChangingParameterExt>& GroupParam);
	void SQEX_Bonamik_SetGroupWeight(const TArray<class FName>& Groups, float Weight, float WeightChangeTime, bool ResetWhenNonZeroWeight, bool AutoDisable);
	void SQEX_Bonamik_SetInnerConeScale(const TArray<class FName>& Groups, float Scale, bool bApplyToChildren);
	void SQEX_Bonamik_SetLocalForceScale(const TArray<class FName>& Groups, float Scale, bool bApplyToChildren);
	void SQEX_Bonamik_SetMassScale(const TArray<class FName>& Groups, float Scale, bool bApplyToChildren);
	void SQEX_Bonamik_SetMeshSpaceSimulation(bool bMeshSpaceSimulation);
	void SQEX_Bonamik_SetOuterConeScale(const TArray<class FName>& Groups, float Scale, bool bApplyToChildren);
	void SQEX_Bonamik_SetPreRoll(int32 Step, bool bApplyToChildren);
	void SQEX_Bonamik_SetPresetWindScale(const TArray<class FName>& PresetNames, const float Scale);
	void SQEX_Bonamik_SetSpeedRate(float SpeedRate, float SpeedRateChangeTime, bool bApplyToChildren);
	void SQEX_Bonamik_SetTeleportDistance(float Distance, int32 TeleportPreRollStep, bool bApplyToChildren);
	void SQEX_Bonamik_SetUpdateOnlyRendered(bool bUpdateOnlyRendered);
	void SQEX_Bonamik_SetUpdateOnlyVisible(bool bUpdateOnlyVisible);
	void SQEX_Bonamik_SetWeight(float Weight, float WeightChangeTime, bool ResetWhenNonZeroWeight, bool AutoDisable);
	void SQEX_Bonamik_SetWorldWindScale(const TArray<class FName>& Groups, float Scale, bool bApplyToChildren);
	void SQEX_Bonamik_TurnOff(bool preserveLatestResult, const TArray<class FName>& Groups, float BlendTime);
	void SQEX_Bonamik_TurnOn(const TArray<class FName>& Groups, float BlendTime);
	void SQEX_SetEmissiveWindScale(const TArray<class FName>& Groups, const float Scale, bool bApplyToChildren);

	struct FVector SQEX_Bonamik_GetGravity() const;
	int32 SQEX_Bonamik_GetNumReferences() const;
	float SQEX_Bonamik_GetSpeedRate() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEX_KBD_Component">();
	}
	static class USQEX_KBD_Component* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEX_KBD_Component>();
	}
};
static_assert(alignof(USQEX_KBD_Component) == 0x000008, "Wrong alignment on USQEX_KBD_Component");
static_assert(sizeof(USQEX_KBD_Component) == 0x000560, "Wrong size on USQEX_KBD_Component");
static_assert(offsetof(USQEX_KBD_Component, SkeletalMeshComponent) == 0x000410, "Member 'USQEX_KBD_Component::SkeletalMeshComponent' has a wrong offset!");
static_assert(offsetof(USQEX_KBD_Component, CharacterMovementComponent) == 0x000418, "Member 'USQEX_KBD_Component::CharacterMovementComponent' has a wrong offset!");
static_assert(offsetof(USQEX_KBD_Component, BonamikGlobalConfig) == 0x000420, "Member 'USQEX_KBD_Component::BonamikGlobalConfig' has a wrong offset!");

}

