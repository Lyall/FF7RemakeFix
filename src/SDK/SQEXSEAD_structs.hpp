#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SQEXSEAD

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum SQEXSEAD.ESQEXSEAD_BGMStopBehaviour
// NumValues: 0x0005
enum class ESQEXSEAD_BGMStopBehaviour : uint8
{
	Stop                                     = 0,
	Unreference                              = 1,
	Reset                                    = 2,
	Ready                                    = 3,
	ESQEXSEAD_MAX                            = 4,
};

// Enum SQEXSEAD.ESQEXSEAD_BGMStoreBehaviour
// NumValues: 0x0005
enum class ESQEXSEAD_BGMStoreBehaviour : uint8
{
	Stop                                     = 0,
	AutoPlay                                 = 1,
	Suspend                                  = 2,
	AutoResume                               = 3,
	ESQEXSEAD_MAX                            = 4,
};

// Enum SQEXSEAD.ESQEXSEAD_BGMState
// NumValues: 0x0009
enum class ESQEXSEAD_BGMState : uint8
{
	Invalid                                  = 0,
	NotReady                                 = 1,
	Ready                                    = 2,
	AutoPlay                                 = 3,
	Playing                                  = 4,
	Stop                                     = 5,
	Suspended                                = 6,
	AutoResume                               = 7,
	ESQEXSEAD_MAX                            = 8,
};

// Enum SQEXSEAD.ESQEXSEADCategoryVolumeLayers
// NumValues: 0x0008
enum class ESQEXSEADCategoryVolumeLayers : uint8
{
	Debug                                    = 0,
	Game                                     = 1,
	Config                                   = 2,
	Movie                                    = 3,
	Level                                    = 4,
	Cut                                      = 5,
	_MAX                                     = 6,
	ESQEXSEADCategoryVolumeLayers_MAX        = 7,
};

// Enum SQEXSEAD.ESQEXSEADLayoutType
// NumValues: 0x000A
enum class ESQEXSEADLayoutType : uint8
{
	Point                                    = 0,
	Line                                     = 1,
	Box                                      = 2,
	Polyline                                 = 3,
	Quadrilateral                            = 4,
	TriangleStrip                            = 5,
	TriangleFan                              = 6,
	SphericalWedge                           = 7,
	CylindricalSector                        = 8,
	ESQEXSEADLayoutType_MAX                  = 9,
};

// Enum SQEXSEAD.ESQEXSEADSoundState
// NumValues: 0x0006
enum class ESQEXSEADSoundState : uint8
{
	Invalid                                  = 0,
	Ready                                    = 1,
	Playing                                  = 2,
	Paused                                   = 3,
	Unknown                                  = 4,
	ESQEXSEADSoundState_MAX                  = 5,
};

// Enum SQEXSEAD.ESQEXSEADChangeAutoSeEnableNotifyEndBehavior
// NumValues: 0x0004
enum class ESQEXSEADChangeAutoSeEnableNotifyEndBehavior : uint8
{
	RevertState                              = 0,
	SetInvertedState                         = 1,
	NoAction                                 = 2,
	ESQEXSEADChangeAutoSeEnableNotifyEndBehavior_MAX = 3,
};

// Enum SQEXSEAD.ESQEXSEADANPlayAutoSeSourceType
// NumValues: 0x0004
enum class ESQEXSEADANPlayAutoSeSourceType : uint8
{
	MotionSoundType                          = 0,
	AuxSurfaceTable                          = 1,
	SurfaceTableAsset                        = 2,
	ESQEXSEADANPlayAutoSeSourceType_MAX      = 3,
};

// Enum SQEXSEAD.ESQEXSEADAudioVolumeCommand
// NumValues: 0x0004
enum class ESQEXSEADAudioVolumeCommand : uint8
{
	None                                     = 0,
	Set                                      = 1,
	Reset                                    = 2,
	ESQEXSEADAudioVolumeCommand_MAX          = 3,
};

// Enum SQEXSEAD.ESQEXSEADAutoSeComponentAssetTableNonSurface
// NumValues: 0x000F
enum class ESQEXSEADAutoSeComponentAssetTableNonSurface : uint8
{
	RustleArm                                = 0,
	RustleFoot                               = 1,
	RustleFootCrotch                         = 2,
	RustleFootBend                           = 3,
	WingFlapUp                               = 4,
	WingFlapDown                             = 5,
	SwingKnock                               = 6,
	SwingRub                                 = 7,
	Turn                                     = 8,
	RustleHandWave                           = 9,
	HeadRot                                  = 10,
	Bow                                      = 11,
	RagdollBounce                            = 12,
	RagdollFricative                         = 13,
	MAX                                      = 14,
};

// Enum SQEXSEAD.ESQEXSEADAutoSeComponentAssetTablePerSurface
// NumValues: 0x0007
enum class ESQEXSEADAutoSeComponentAssetTablePerSurface : uint8
{
	Walk                                     = 0,
	Run                                      = 1,
	Jump                                     = 2,
	LandNormal                               = 3,
	LandHard                                 = 4,
	FootShuffle                              = 5,
	MAX                                      = 6,
};

// Enum SQEXSEAD.ESQEXSEADAutoSeResult
// NumValues: 0x0007
enum class ESQEXSEADAutoSeResult : uint8
{
	Success                                  = 0,
	Failure                                  = 1,
	Error_InvalidArgs                        = 100,
	Error_InvalidBoneName                    = 101,
	Error_NotAllSocketsValid                 = 102,
	Error_FailedToCreateProc                 = 103,
	ESQEXSEADAutoSeResult_MAX                = 104,
};

// Enum SQEXSEAD.ESQEXSEADAutoSePartsType
// NumValues: 0x0007
enum class ESQEXSEADAutoSePartsType : uint8
{
	Invalid                                  = 0,
	Foot                                     = 1,
	Arm                                      = 2,
	Wing                                     = 3,
	Swing                                    = 4,
	Body                                     = 5,
	ESQEXSEADAutoSePartsType_MAX             = 6,
};

// Enum SQEXSEAD.ESQEXSEADAutoSeMotionSoundType
// NumValues: 0x0016
enum class ESQEXSEADAutoSeMotionSoundType : uint8
{
	None                                     = 0,
	Walk                                     = 1,
	Run                                      = 2,
	Jump                                     = 3,
	LandNormal                               = 4,
	LandHard                                 = 5,
	FootShuffle                              = 6,
	RustleArm                                = 7,
	RustleFoot                               = 8,
	RustleFootCrotch                         = 9,
	RustleFootBend                           = 10,
	WingFlapUp                               = 11,
	WingFlapDown                             = 12,
	SwingKnock                               = 13,
	SwingRub                                 = 14,
	Turn                                     = 15,
	RustleHandWave                           = 16,
	HeadRot                                  = 17,
	Bow                                      = 18,
	RagdollBounce                            = 19,
	RagdollFricative                         = 20,
	ESQEXSEADAutoSeMotionSoundType_MAX       = 21,
};

// Enum SQEXSEAD.ESQEXSEADAudioStartTimings
// NumValues: 0x0004
enum class ESQEXSEADAudioStartTimings : uint8
{
	None                                     = 0,
	OnBeginPlay                              = 1,
	OnZeroOneValueVariable                   = 2,
	ESQEXSEADAudioStartTimings_MAX           = 3,
};

// Enum SQEXSEAD.ESQEXSEADZeroOneProperties
// NumValues: 0x0004
enum class ESQEXSEADZeroOneProperties : uint8
{
	None                                     = 0,
	Velocity                                 = 1,
	RotationalVelocity                       = 2,
	ESQEXSEADZeroOneProperties_MAX           = 3,
};

// ScriptStruct SQEXSEAD.SQEXSEADSoundKey
// 0x0038 (0x0038 - 0x0000)
struct FSQEXSEADSoundKey final
{
public:
	TSoftObjectPtr<class USQEXSEADSound>          SoundRef;                                          // 0x0000(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SoundIndex;                                        // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SoundName;                                         // 0x002C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQEXSEADSoundKey) == 0x000008, "Wrong alignment on FSQEXSEADSoundKey");
static_assert(sizeof(FSQEXSEADSoundKey) == 0x000038, "Wrong size on FSQEXSEADSoundKey");
static_assert(offsetof(FSQEXSEADSoundKey, SoundRef) == 0x000000, "Member 'FSQEXSEADSoundKey::SoundRef' has a wrong offset!");
static_assert(offsetof(FSQEXSEADSoundKey, SoundIndex) == 0x000028, "Member 'FSQEXSEADSoundKey::SoundIndex' has a wrong offset!");
static_assert(offsetof(FSQEXSEADSoundKey, SoundName) == 0x00002C, "Member 'FSQEXSEADSoundKey::SoundName' has a wrong offset!");

// ScriptStruct SQEXSEAD.SQEXSEADAutoSePostDetectionSettings
// 0x0004 (0x0004 - 0x0000)
struct FSQEXSEADAutoSePostDetectionSettings final
{
public:
	float                                         VolumeScale;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQEXSEADAutoSePostDetectionSettings) == 0x000004, "Wrong alignment on FSQEXSEADAutoSePostDetectionSettings");
static_assert(sizeof(FSQEXSEADAutoSePostDetectionSettings) == 0x000004, "Wrong size on FSQEXSEADAutoSePostDetectionSettings");
static_assert(offsetof(FSQEXSEADAutoSePostDetectionSettings, VolumeScale) == 0x000000, "Member 'FSQEXSEADAutoSePostDetectionSettings::VolumeScale' has a wrong offset!");

// ScriptStruct SQEXSEAD.SQEXSEADSurfaceAssetReferenceRecord
// 0x05F0 (0x05F0 - 0x0000)
struct FSQEXSEADSurfaceAssetReferenceRecord final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        AssetRefs[0x3F];                                   // 0x0008(0x0018)(Edit, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQEXSEADSurfaceAssetReferenceRecord) == 0x000008, "Wrong alignment on FSQEXSEADSurfaceAssetReferenceRecord");
static_assert(sizeof(FSQEXSEADSurfaceAssetReferenceRecord) == 0x0005F0, "Wrong size on FSQEXSEADSurfaceAssetReferenceRecord");
static_assert(offsetof(FSQEXSEADSurfaceAssetReferenceRecord, Name) == 0x000000, "Member 'FSQEXSEADSurfaceAssetReferenceRecord::Name' has a wrong offset!");
static_assert(offsetof(FSQEXSEADSurfaceAssetReferenceRecord, AssetRefs) == 0x000008, "Member 'FSQEXSEADSurfaceAssetReferenceRecord::AssetRefs' has a wrong offset!");

// ScriptStruct SQEXSEAD.SQEXSEADSurfaceAssetReferenceTableData
// 0x0010 (0x0010 - 0x0000)
struct FSQEXSEADSurfaceAssetReferenceTableData final
{
public:
	TArray<struct FSQEXSEADSurfaceAssetReferenceRecord> Records;                                           // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQEXSEADSurfaceAssetReferenceTableData) == 0x000008, "Wrong alignment on FSQEXSEADSurfaceAssetReferenceTableData");
static_assert(sizeof(FSQEXSEADSurfaceAssetReferenceTableData) == 0x000010, "Wrong size on FSQEXSEADSurfaceAssetReferenceTableData");
static_assert(offsetof(FSQEXSEADSurfaceAssetReferenceTableData, Records) == 0x000000, "Member 'FSQEXSEADSurfaceAssetReferenceTableData::Records' has a wrong offset!");

// ScriptStruct SQEXSEAD.SQEXSEAD_BGMOptions
// 0x001C (0x001C - 0x0000)
struct FSQEXSEAD_BGMOptions final
{
public:
	int32                                         Priority;                                          // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQEXSEAD_BGMStoreBehaviour                   StoreBehaviour;                                    // 0x0004(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQEXSEAD_BGMStopBehaviour                    StopBehaviour;                                     // 0x0005(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PlayFadeInTime;                                    // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ResumeFadeInTime;                                  // 0x000C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SuspendFadeOutTime;                                // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StopFadeOutTime;                                   // 0x0014(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRestartSameBGM;                                   // 0x0018(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQEXSEAD_BGMOptions) == 0x000004, "Wrong alignment on FSQEXSEAD_BGMOptions");
static_assert(sizeof(FSQEXSEAD_BGMOptions) == 0x00001C, "Wrong size on FSQEXSEAD_BGMOptions");
static_assert(offsetof(FSQEXSEAD_BGMOptions, Priority) == 0x000000, "Member 'FSQEXSEAD_BGMOptions::Priority' has a wrong offset!");
static_assert(offsetof(FSQEXSEAD_BGMOptions, StoreBehaviour) == 0x000004, "Member 'FSQEXSEAD_BGMOptions::StoreBehaviour' has a wrong offset!");
static_assert(offsetof(FSQEXSEAD_BGMOptions, StopBehaviour) == 0x000005, "Member 'FSQEXSEAD_BGMOptions::StopBehaviour' has a wrong offset!");
static_assert(offsetof(FSQEXSEAD_BGMOptions, PlayFadeInTime) == 0x000008, "Member 'FSQEXSEAD_BGMOptions::PlayFadeInTime' has a wrong offset!");
static_assert(offsetof(FSQEXSEAD_BGMOptions, ResumeFadeInTime) == 0x00000C, "Member 'FSQEXSEAD_BGMOptions::ResumeFadeInTime' has a wrong offset!");
static_assert(offsetof(FSQEXSEAD_BGMOptions, SuspendFadeOutTime) == 0x000010, "Member 'FSQEXSEAD_BGMOptions::SuspendFadeOutTime' has a wrong offset!");
static_assert(offsetof(FSQEXSEAD_BGMOptions, StopFadeOutTime) == 0x000014, "Member 'FSQEXSEAD_BGMOptions::StopFadeOutTime' has a wrong offset!");
static_assert(offsetof(FSQEXSEAD_BGMOptions, bRestartSameBGM) == 0x000018, "Member 'FSQEXSEAD_BGMOptions::bRestartSameBGM' has a wrong offset!");

// ScriptStruct SQEXSEAD.SQEXSEAD_BGMSlotSetting
// 0x0024 (0x0024 - 0x0000)
struct FSQEXSEAD_BGMSlotSetting final
{
public:
	class FName                                   SlotName;                                          // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSQEXSEAD_BGMOptions                   SlotOption;                                        // 0x0008(0x001C)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQEXSEAD_BGMSlotSetting) == 0x000004, "Wrong alignment on FSQEXSEAD_BGMSlotSetting");
static_assert(sizeof(FSQEXSEAD_BGMSlotSetting) == 0x000024, "Wrong size on FSQEXSEAD_BGMSlotSetting");
static_assert(offsetof(FSQEXSEAD_BGMSlotSetting, SlotName) == 0x000000, "Member 'FSQEXSEAD_BGMSlotSetting::SlotName' has a wrong offset!");
static_assert(offsetof(FSQEXSEAD_BGMSlotSetting, SlotOption) == 0x000008, "Member 'FSQEXSEAD_BGMSlotSetting::SlotOption' has a wrong offset!");

// ScriptStruct SQEXSEAD.SQEXSEADAutoSeComponentSwingInitParams
// 0x0010 (0x0010 - 0x0000)
struct FSQEXSEADAutoSeComponentSwingInitParams final
{
public:
	TArray<class FName>                           ChainNodeNames;                                    // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQEXSEADAutoSeComponentSwingInitParams) == 0x000008, "Wrong alignment on FSQEXSEADAutoSeComponentSwingInitParams");
static_assert(sizeof(FSQEXSEADAutoSeComponentSwingInitParams) == 0x000010, "Wrong size on FSQEXSEADAutoSeComponentSwingInitParams");
static_assert(offsetof(FSQEXSEADAutoSeComponentSwingInitParams, ChainNodeNames) == 0x000000, "Member 'FSQEXSEADAutoSeComponentSwingInitParams::ChainNodeNames' has a wrong offset!");

// ScriptStruct SQEXSEAD.SQEXSEADLayoutInfo
// 0x0050 (0x0050 - 0x0000)
struct FSQEXSEADLayoutInfo final
{
public:
	ESQEXSEADLayoutType                           LayoutType;                                        // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InnerRadius;                                       // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OuterRadius;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OcclusionLPF;                                      // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OcclusionVolume;                                   // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HorizontalWedgeAngle;                              // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VerticalWedgeAngle;                                // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CylinderRotation;                                  // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        LayoutPointLocations;                              // 0x0020(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_30[0x20];                                      // 0x0030(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQEXSEADLayoutInfo) == 0x000008, "Wrong alignment on FSQEXSEADLayoutInfo");
static_assert(sizeof(FSQEXSEADLayoutInfo) == 0x000050, "Wrong size on FSQEXSEADLayoutInfo");
static_assert(offsetof(FSQEXSEADLayoutInfo, LayoutType) == 0x000000, "Member 'FSQEXSEADLayoutInfo::LayoutType' has a wrong offset!");
static_assert(offsetof(FSQEXSEADLayoutInfo, InnerRadius) == 0x000004, "Member 'FSQEXSEADLayoutInfo::InnerRadius' has a wrong offset!");
static_assert(offsetof(FSQEXSEADLayoutInfo, OuterRadius) == 0x000008, "Member 'FSQEXSEADLayoutInfo::OuterRadius' has a wrong offset!");
static_assert(offsetof(FSQEXSEADLayoutInfo, OcclusionLPF) == 0x00000C, "Member 'FSQEXSEADLayoutInfo::OcclusionLPF' has a wrong offset!");
static_assert(offsetof(FSQEXSEADLayoutInfo, OcclusionVolume) == 0x000010, "Member 'FSQEXSEADLayoutInfo::OcclusionVolume' has a wrong offset!");
static_assert(offsetof(FSQEXSEADLayoutInfo, HorizontalWedgeAngle) == 0x000014, "Member 'FSQEXSEADLayoutInfo::HorizontalWedgeAngle' has a wrong offset!");
static_assert(offsetof(FSQEXSEADLayoutInfo, VerticalWedgeAngle) == 0x000018, "Member 'FSQEXSEADLayoutInfo::VerticalWedgeAngle' has a wrong offset!");
static_assert(offsetof(FSQEXSEADLayoutInfo, CylinderRotation) == 0x00001C, "Member 'FSQEXSEADLayoutInfo::CylinderRotation' has a wrong offset!");
static_assert(offsetof(FSQEXSEADLayoutInfo, LayoutPointLocations) == 0x000020, "Member 'FSQEXSEADLayoutInfo::LayoutPointLocations' has a wrong offset!");

// ScriptStruct SQEXSEAD.SQEXSEADAutoSeAnalyzerSetting
// 0x001C (0x001C - 0x0000)
struct FSQEXSEADAutoSeAnalyzerSetting final
{
public:
	bool                                          bOverrideAssumeFootMotionlessMoveLenInWorld;       // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AssumeFootMotionlessMoveLenInWorld;                // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideAssumeBodyRunngingVelocity;               // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AssumeBodyRunngingVelocity;                        // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideAutoCalcFootGroundedThresholdRatio;       // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AutoCalcFootGroundedThresholdRatio;                // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoWarpDetectionEnable;                          // 0x0018(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQEXSEADAutoSeAnalyzerSetting) == 0x000004, "Wrong alignment on FSQEXSEADAutoSeAnalyzerSetting");
static_assert(sizeof(FSQEXSEADAutoSeAnalyzerSetting) == 0x00001C, "Wrong size on FSQEXSEADAutoSeAnalyzerSetting");
static_assert(offsetof(FSQEXSEADAutoSeAnalyzerSetting, bOverrideAssumeFootMotionlessMoveLenInWorld) == 0x000000, "Member 'FSQEXSEADAutoSeAnalyzerSetting::bOverrideAssumeFootMotionlessMoveLenInWorld' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeAnalyzerSetting, AssumeFootMotionlessMoveLenInWorld) == 0x000004, "Member 'FSQEXSEADAutoSeAnalyzerSetting::AssumeFootMotionlessMoveLenInWorld' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeAnalyzerSetting, bOverrideAssumeBodyRunngingVelocity) == 0x000008, "Member 'FSQEXSEADAutoSeAnalyzerSetting::bOverrideAssumeBodyRunngingVelocity' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeAnalyzerSetting, AssumeBodyRunngingVelocity) == 0x00000C, "Member 'FSQEXSEADAutoSeAnalyzerSetting::AssumeBodyRunngingVelocity' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeAnalyzerSetting, bOverrideAutoCalcFootGroundedThresholdRatio) == 0x000010, "Member 'FSQEXSEADAutoSeAnalyzerSetting::bOverrideAutoCalcFootGroundedThresholdRatio' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeAnalyzerSetting, AutoCalcFootGroundedThresholdRatio) == 0x000014, "Member 'FSQEXSEADAutoSeAnalyzerSetting::AutoCalcFootGroundedThresholdRatio' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeAnalyzerSetting, bAutoWarpDetectionEnable) == 0x000018, "Member 'FSQEXSEADAutoSeAnalyzerSetting::bAutoWarpDetectionEnable' has a wrong offset!");

// ScriptStruct SQEXSEAD.SQEXSEADAutoSeDetectorSettingFootStep
// 0x007C (0x007C - 0x0000)
struct FSQEXSEADAutoSeDetectorSettingFootStep final
{
public:
	bool                                          bEnableFootStepWalkRun;                            // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideFootStepParameters;                       // 0x0001(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FootStepWalkVolumeRangeMin;                        // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FootStepWalkVolumeRangeMax;                        // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FootStepRunVolumeRangeMin;                         // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FootStepRunVolumeRangeMax;                         // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FootStepKEnergyVolumeRangeMin;                     // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FootStepKEnergyVolumeRangeMax;                     // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableFootShuffle;                                // 0x001C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideFootShuffleParameters;                    // 0x001D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableFootShuffleLessMove;                        // 0x001E(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F[0x1];                                       // 0x001F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FootShuffleAssumeBodyStopVelocityThreshold;        // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FootShuffleDetectFootVelocityThreshold;            // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FootShuffleVolumeRangeMin;                         // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FootShuffleVolumeRangeMax;                         // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableFootShuffleInMotion;                        // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FootShuffleInMotionFootAccelThreshold;             // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FootShuffleInMotionVolumeRangeMin;                 // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FootShuffleInMotionVolumeRangeMax;                 // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableFootShuffleTurn;                            // 0x0040(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FootShuffleTurnMoveDirRotVelocityRateThreshold;    // 0x0044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FootShuffleTurnFootVelocityThreshold;              // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FootShuffleTurnVolumeRangeMin;                     // 0x004C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FootShuffleTurnVolumeRangeMax;                     // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideLandNormalParameters;                     // 0x0054(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LandNormalAssumeFlyTime;                           // 0x0058(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LandNormalEnoughVelocity;                          // 0x005C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LandNormalVolumeRangeMin;                          // 0x0060(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LandNormalVolumeRangeMax;                          // 0x0064(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableLandHard;                                   // 0x0068(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideLandHardParameters;                       // 0x0069(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6A[0x2];                                       // 0x006A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LandHardAssumeFlyTime;                             // 0x006C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LandHardEnoughVelocity;                            // 0x0070(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LandHardVolumeRangeMin;                            // 0x0074(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LandHardVolumeRangeMax;                            // 0x0078(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQEXSEADAutoSeDetectorSettingFootStep) == 0x000004, "Wrong alignment on FSQEXSEADAutoSeDetectorSettingFootStep");
static_assert(sizeof(FSQEXSEADAutoSeDetectorSettingFootStep) == 0x00007C, "Wrong size on FSQEXSEADAutoSeDetectorSettingFootStep");
static_assert(offsetof(FSQEXSEADAutoSeDetectorSettingFootStep, bEnableFootStepWalkRun) == 0x000000, "Member 'FSQEXSEADAutoSeDetectorSettingFootStep::bEnableFootStepWalkRun' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeDetectorSettingFootStep, bOverrideFootStepParameters) == 0x000001, "Member 'FSQEXSEADAutoSeDetectorSettingFootStep::bOverrideFootStepParameters' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeDetectorSettingFootStep, FootStepWalkVolumeRangeMin) == 0x000004, "Member 'FSQEXSEADAutoSeDetectorSettingFootStep::FootStepWalkVolumeRangeMin' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeDetectorSettingFootStep, FootStepWalkVolumeRangeMax) == 0x000008, "Member 'FSQEXSEADAutoSeDetectorSettingFootStep::FootStepWalkVolumeRangeMax' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeDetectorSettingFootStep, FootStepRunVolumeRangeMin) == 0x00000C, "Member 'FSQEXSEADAutoSeDetectorSettingFootStep::FootStepRunVolumeRangeMin' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeDetectorSettingFootStep, FootStepRunVolumeRangeMax) == 0x000010, "Member 'FSQEXSEADAutoSeDetectorSettingFootStep::FootStepRunVolumeRangeMax' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeDetectorSettingFootStep, FootStepKEnergyVolumeRangeMin) == 0x000014, "Member 'FSQEXSEADAutoSeDetectorSettingFootStep::FootStepKEnergyVolumeRangeMin' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeDetectorSettingFootStep, FootStepKEnergyVolumeRangeMax) == 0x000018, "Member 'FSQEXSEADAutoSeDetectorSettingFootStep::FootStepKEnergyVolumeRangeMax' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeDetectorSettingFootStep, bEnableFootShuffle) == 0x00001C, "Member 'FSQEXSEADAutoSeDetectorSettingFootStep::bEnableFootShuffle' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeDetectorSettingFootStep, bOverrideFootShuffleParameters) == 0x00001D, "Member 'FSQEXSEADAutoSeDetectorSettingFootStep::bOverrideFootShuffleParameters' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeDetectorSettingFootStep, bEnableFootShuffleLessMove) == 0x00001E, "Member 'FSQEXSEADAutoSeDetectorSettingFootStep::bEnableFootShuffleLessMove' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeDetectorSettingFootStep, FootShuffleAssumeBodyStopVelocityThreshold) == 0x000020, "Member 'FSQEXSEADAutoSeDetectorSettingFootStep::FootShuffleAssumeBodyStopVelocityThreshold' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeDetectorSettingFootStep, FootShuffleDetectFootVelocityThreshold) == 0x000024, "Member 'FSQEXSEADAutoSeDetectorSettingFootStep::FootShuffleDetectFootVelocityThreshold' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeDetectorSettingFootStep, FootShuffleVolumeRangeMin) == 0x000028, "Member 'FSQEXSEADAutoSeDetectorSettingFootStep::FootShuffleVolumeRangeMin' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeDetectorSettingFootStep, FootShuffleVolumeRangeMax) == 0x00002C, "Member 'FSQEXSEADAutoSeDetectorSettingFootStep::FootShuffleVolumeRangeMax' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeDetectorSettingFootStep, bEnableFootShuffleInMotion) == 0x000030, "Member 'FSQEXSEADAutoSeDetectorSettingFootStep::bEnableFootShuffleInMotion' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeDetectorSettingFootStep, FootShuffleInMotionFootAccelThreshold) == 0x000034, "Member 'FSQEXSEADAutoSeDetectorSettingFootStep::FootShuffleInMotionFootAccelThreshold' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeDetectorSettingFootStep, FootShuffleInMotionVolumeRangeMin) == 0x000038, "Member 'FSQEXSEADAutoSeDetectorSettingFootStep::FootShuffleInMotionVolumeRangeMin' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeDetectorSettingFootStep, FootShuffleInMotionVolumeRangeMax) == 0x00003C, "Member 'FSQEXSEADAutoSeDetectorSettingFootStep::FootShuffleInMotionVolumeRangeMax' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeDetectorSettingFootStep, bEnableFootShuffleTurn) == 0x000040, "Member 'FSQEXSEADAutoSeDetectorSettingFootStep::bEnableFootShuffleTurn' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeDetectorSettingFootStep, FootShuffleTurnMoveDirRotVelocityRateThreshold) == 0x000044, "Member 'FSQEXSEADAutoSeDetectorSettingFootStep::FootShuffleTurnMoveDirRotVelocityRateThreshold' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeDetectorSettingFootStep, FootShuffleTurnFootVelocityThreshold) == 0x000048, "Member 'FSQEXSEADAutoSeDetectorSettingFootStep::FootShuffleTurnFootVelocityThreshold' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeDetectorSettingFootStep, FootShuffleTurnVolumeRangeMin) == 0x00004C, "Member 'FSQEXSEADAutoSeDetectorSettingFootStep::FootShuffleTurnVolumeRangeMin' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeDetectorSettingFootStep, FootShuffleTurnVolumeRangeMax) == 0x000050, "Member 'FSQEXSEADAutoSeDetectorSettingFootStep::FootShuffleTurnVolumeRangeMax' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeDetectorSettingFootStep, bOverrideLandNormalParameters) == 0x000054, "Member 'FSQEXSEADAutoSeDetectorSettingFootStep::bOverrideLandNormalParameters' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeDetectorSettingFootStep, LandNormalAssumeFlyTime) == 0x000058, "Member 'FSQEXSEADAutoSeDetectorSettingFootStep::LandNormalAssumeFlyTime' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeDetectorSettingFootStep, LandNormalEnoughVelocity) == 0x00005C, "Member 'FSQEXSEADAutoSeDetectorSettingFootStep::LandNormalEnoughVelocity' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeDetectorSettingFootStep, LandNormalVolumeRangeMin) == 0x000060, "Member 'FSQEXSEADAutoSeDetectorSettingFootStep::LandNormalVolumeRangeMin' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeDetectorSettingFootStep, LandNormalVolumeRangeMax) == 0x000064, "Member 'FSQEXSEADAutoSeDetectorSettingFootStep::LandNormalVolumeRangeMax' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeDetectorSettingFootStep, bEnableLandHard) == 0x000068, "Member 'FSQEXSEADAutoSeDetectorSettingFootStep::bEnableLandHard' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeDetectorSettingFootStep, bOverrideLandHardParameters) == 0x000069, "Member 'FSQEXSEADAutoSeDetectorSettingFootStep::bOverrideLandHardParameters' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeDetectorSettingFootStep, LandHardAssumeFlyTime) == 0x00006C, "Member 'FSQEXSEADAutoSeDetectorSettingFootStep::LandHardAssumeFlyTime' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeDetectorSettingFootStep, LandHardEnoughVelocity) == 0x000070, "Member 'FSQEXSEADAutoSeDetectorSettingFootStep::LandHardEnoughVelocity' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeDetectorSettingFootStep, LandHardVolumeRangeMin) == 0x000074, "Member 'FSQEXSEADAutoSeDetectorSettingFootStep::LandHardVolumeRangeMin' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeDetectorSettingFootStep, LandHardVolumeRangeMax) == 0x000078, "Member 'FSQEXSEADAutoSeDetectorSettingFootStep::LandHardVolumeRangeMax' has a wrong offset!");

// ScriptStruct SQEXSEAD.SQEXSEADAutoSeDetectorSettingRustle
// 0x0064 (0x0064 - 0x0000)
struct FSQEXSEADAutoSeDetectorSettingRustle final
{
public:
	bool                                          bEnableArmRustleElbow;                             // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideArmRustleElbowVolumeRanges;               // 0x0001(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ArmRustleElbowRVelThreshold;                       // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ArmRustleElbowRelativeVelocityVolumeRangeMin;      // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ArmRustleElbowRelativeVelocityVolumeRangeMax;      // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableArmRustleHandWave;                          // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideArmRustleHandWaveParameters;              // 0x0011(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ArmRustleHandWaveRVelThreshold;                    // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ArmRustleHandWaveVolumeRangeMin;                   // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ArmRustleHandWaveVolumeRangeMax;                   // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableFootRustleCrotch;                           // 0x0020(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideFootRustleCrotchParameters;               // 0x0021(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x2];                                       // 0x0022(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FootRustleCrotchFTRelVelThresholdWalk;             // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FootRustleCrotchFTRelVelThresholdRun;              // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FootRustleCrotchVolumeRangeMin;                    // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FootRustleCrotchVolumeRangeMax;                    // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableFootRustle;                                 // 0x0034(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideFootRustleParameters;                     // 0x0035(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_36[0x2];                                       // 0x0036(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FootRustleRVelThresholdWalk;                       // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FootRustleRVelThresholdRun;                        // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FootRustleVolumeRangeMin;                          // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FootRustleVolumeRangeMax;                          // 0x0044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableFootRustleBend;                             // 0x0048(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideFootRustleBendParameters;                 // 0x0049(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A[0x2];                                       // 0x004A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FootRustleBendBendThreshold;                       // 0x004C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FootRustleBendStretchThreshold;                    // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FootRustleBendVolumeRangeMin;                      // 0x0054(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FootRustleBendVolumeRangeMax;                      // 0x0058(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DetectionSuppressTimeDefault;                      // 0x005C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DetectionSuppressTimeForFast;                      // 0x0060(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQEXSEADAutoSeDetectorSettingRustle) == 0x000004, "Wrong alignment on FSQEXSEADAutoSeDetectorSettingRustle");
static_assert(sizeof(FSQEXSEADAutoSeDetectorSettingRustle) == 0x000064, "Wrong size on FSQEXSEADAutoSeDetectorSettingRustle");
static_assert(offsetof(FSQEXSEADAutoSeDetectorSettingRustle, bEnableArmRustleElbow) == 0x000000, "Member 'FSQEXSEADAutoSeDetectorSettingRustle::bEnableArmRustleElbow' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeDetectorSettingRustle, bOverrideArmRustleElbowVolumeRanges) == 0x000001, "Member 'FSQEXSEADAutoSeDetectorSettingRustle::bOverrideArmRustleElbowVolumeRanges' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeDetectorSettingRustle, ArmRustleElbowRVelThreshold) == 0x000004, "Member 'FSQEXSEADAutoSeDetectorSettingRustle::ArmRustleElbowRVelThreshold' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeDetectorSettingRustle, ArmRustleElbowRelativeVelocityVolumeRangeMin) == 0x000008, "Member 'FSQEXSEADAutoSeDetectorSettingRustle::ArmRustleElbowRelativeVelocityVolumeRangeMin' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeDetectorSettingRustle, ArmRustleElbowRelativeVelocityVolumeRangeMax) == 0x00000C, "Member 'FSQEXSEADAutoSeDetectorSettingRustle::ArmRustleElbowRelativeVelocityVolumeRangeMax' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeDetectorSettingRustle, bEnableArmRustleHandWave) == 0x000010, "Member 'FSQEXSEADAutoSeDetectorSettingRustle::bEnableArmRustleHandWave' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeDetectorSettingRustle, bOverrideArmRustleHandWaveParameters) == 0x000011, "Member 'FSQEXSEADAutoSeDetectorSettingRustle::bOverrideArmRustleHandWaveParameters' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeDetectorSettingRustle, ArmRustleHandWaveRVelThreshold) == 0x000014, "Member 'FSQEXSEADAutoSeDetectorSettingRustle::ArmRustleHandWaveRVelThreshold' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeDetectorSettingRustle, ArmRustleHandWaveVolumeRangeMin) == 0x000018, "Member 'FSQEXSEADAutoSeDetectorSettingRustle::ArmRustleHandWaveVolumeRangeMin' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeDetectorSettingRustle, ArmRustleHandWaveVolumeRangeMax) == 0x00001C, "Member 'FSQEXSEADAutoSeDetectorSettingRustle::ArmRustleHandWaveVolumeRangeMax' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeDetectorSettingRustle, bEnableFootRustleCrotch) == 0x000020, "Member 'FSQEXSEADAutoSeDetectorSettingRustle::bEnableFootRustleCrotch' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeDetectorSettingRustle, bOverrideFootRustleCrotchParameters) == 0x000021, "Member 'FSQEXSEADAutoSeDetectorSettingRustle::bOverrideFootRustleCrotchParameters' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeDetectorSettingRustle, FootRustleCrotchFTRelVelThresholdWalk) == 0x000024, "Member 'FSQEXSEADAutoSeDetectorSettingRustle::FootRustleCrotchFTRelVelThresholdWalk' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeDetectorSettingRustle, FootRustleCrotchFTRelVelThresholdRun) == 0x000028, "Member 'FSQEXSEADAutoSeDetectorSettingRustle::FootRustleCrotchFTRelVelThresholdRun' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeDetectorSettingRustle, FootRustleCrotchVolumeRangeMin) == 0x00002C, "Member 'FSQEXSEADAutoSeDetectorSettingRustle::FootRustleCrotchVolumeRangeMin' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeDetectorSettingRustle, FootRustleCrotchVolumeRangeMax) == 0x000030, "Member 'FSQEXSEADAutoSeDetectorSettingRustle::FootRustleCrotchVolumeRangeMax' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeDetectorSettingRustle, bEnableFootRustle) == 0x000034, "Member 'FSQEXSEADAutoSeDetectorSettingRustle::bEnableFootRustle' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeDetectorSettingRustle, bOverrideFootRustleParameters) == 0x000035, "Member 'FSQEXSEADAutoSeDetectorSettingRustle::bOverrideFootRustleParameters' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeDetectorSettingRustle, FootRustleRVelThresholdWalk) == 0x000038, "Member 'FSQEXSEADAutoSeDetectorSettingRustle::FootRustleRVelThresholdWalk' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeDetectorSettingRustle, FootRustleRVelThresholdRun) == 0x00003C, "Member 'FSQEXSEADAutoSeDetectorSettingRustle::FootRustleRVelThresholdRun' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeDetectorSettingRustle, FootRustleVolumeRangeMin) == 0x000040, "Member 'FSQEXSEADAutoSeDetectorSettingRustle::FootRustleVolumeRangeMin' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeDetectorSettingRustle, FootRustleVolumeRangeMax) == 0x000044, "Member 'FSQEXSEADAutoSeDetectorSettingRustle::FootRustleVolumeRangeMax' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeDetectorSettingRustle, bEnableFootRustleBend) == 0x000048, "Member 'FSQEXSEADAutoSeDetectorSettingRustle::bEnableFootRustleBend' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeDetectorSettingRustle, bOverrideFootRustleBendParameters) == 0x000049, "Member 'FSQEXSEADAutoSeDetectorSettingRustle::bOverrideFootRustleBendParameters' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeDetectorSettingRustle, FootRustleBendBendThreshold) == 0x00004C, "Member 'FSQEXSEADAutoSeDetectorSettingRustle::FootRustleBendBendThreshold' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeDetectorSettingRustle, FootRustleBendStretchThreshold) == 0x000050, "Member 'FSQEXSEADAutoSeDetectorSettingRustle::FootRustleBendStretchThreshold' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeDetectorSettingRustle, FootRustleBendVolumeRangeMin) == 0x000054, "Member 'FSQEXSEADAutoSeDetectorSettingRustle::FootRustleBendVolumeRangeMin' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeDetectorSettingRustle, FootRustleBendVolumeRangeMax) == 0x000058, "Member 'FSQEXSEADAutoSeDetectorSettingRustle::FootRustleBendVolumeRangeMax' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeDetectorSettingRustle, DetectionSuppressTimeDefault) == 0x00005C, "Member 'FSQEXSEADAutoSeDetectorSettingRustle::DetectionSuppressTimeDefault' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeDetectorSettingRustle, DetectionSuppressTimeForFast) == 0x000060, "Member 'FSQEXSEADAutoSeDetectorSettingRustle::DetectionSuppressTimeForFast' has a wrong offset!");

// ScriptStruct SQEXSEAD.SQEXSEADAutoSeDetectorSettingWingAction
// 0x0014 (0x0014 - 0x0000)
struct FSQEXSEADAutoSeDetectorSettingWingAction final
{
public:
	bool                                          bOverrideFlapUpDownParameters;                     // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FlapUpVolumeRangeMin;                              // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FlapUpVolumeRangeMax;                              // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FlapDownVolumeRangeMin;                            // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FlapDownVolumeRangeMax;                            // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQEXSEADAutoSeDetectorSettingWingAction) == 0x000004, "Wrong alignment on FSQEXSEADAutoSeDetectorSettingWingAction");
static_assert(sizeof(FSQEXSEADAutoSeDetectorSettingWingAction) == 0x000014, "Wrong size on FSQEXSEADAutoSeDetectorSettingWingAction");
static_assert(offsetof(FSQEXSEADAutoSeDetectorSettingWingAction, bOverrideFlapUpDownParameters) == 0x000000, "Member 'FSQEXSEADAutoSeDetectorSettingWingAction::bOverrideFlapUpDownParameters' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeDetectorSettingWingAction, FlapUpVolumeRangeMin) == 0x000004, "Member 'FSQEXSEADAutoSeDetectorSettingWingAction::FlapUpVolumeRangeMin' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeDetectorSettingWingAction, FlapUpVolumeRangeMax) == 0x000008, "Member 'FSQEXSEADAutoSeDetectorSettingWingAction::FlapUpVolumeRangeMax' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeDetectorSettingWingAction, FlapDownVolumeRangeMin) == 0x00000C, "Member 'FSQEXSEADAutoSeDetectorSettingWingAction::FlapDownVolumeRangeMin' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeDetectorSettingWingAction, FlapDownVolumeRangeMax) == 0x000010, "Member 'FSQEXSEADAutoSeDetectorSettingWingAction::FlapDownVolumeRangeMax' has a wrong offset!");

// ScriptStruct SQEXSEAD.SQEXSEADAutoSeDetectorSettingSwing
// 0x0020 (0x0020 - 0x0000)
struct FSQEXSEADAutoSeDetectorSettingSwing final
{
public:
	bool                                          bOverrideKnockParameters;                          // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         KnockDetectVelocityThreshold;                      // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KnockVolumeRangeMin;                               // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KnockVolumeRangeMax;                               // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideRubParameters;                            // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RubDetectVelocityThreshold;                        // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RubVolumeRangeMin;                                 // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RubVolumeRangeMax;                                 // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQEXSEADAutoSeDetectorSettingSwing) == 0x000004, "Wrong alignment on FSQEXSEADAutoSeDetectorSettingSwing");
static_assert(sizeof(FSQEXSEADAutoSeDetectorSettingSwing) == 0x000020, "Wrong size on FSQEXSEADAutoSeDetectorSettingSwing");
static_assert(offsetof(FSQEXSEADAutoSeDetectorSettingSwing, bOverrideKnockParameters) == 0x000000, "Member 'FSQEXSEADAutoSeDetectorSettingSwing::bOverrideKnockParameters' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeDetectorSettingSwing, KnockDetectVelocityThreshold) == 0x000004, "Member 'FSQEXSEADAutoSeDetectorSettingSwing::KnockDetectVelocityThreshold' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeDetectorSettingSwing, KnockVolumeRangeMin) == 0x000008, "Member 'FSQEXSEADAutoSeDetectorSettingSwing::KnockVolumeRangeMin' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeDetectorSettingSwing, KnockVolumeRangeMax) == 0x00000C, "Member 'FSQEXSEADAutoSeDetectorSettingSwing::KnockVolumeRangeMax' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeDetectorSettingSwing, bOverrideRubParameters) == 0x000010, "Member 'FSQEXSEADAutoSeDetectorSettingSwing::bOverrideRubParameters' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeDetectorSettingSwing, RubDetectVelocityThreshold) == 0x000014, "Member 'FSQEXSEADAutoSeDetectorSettingSwing::RubDetectVelocityThreshold' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeDetectorSettingSwing, RubVolumeRangeMin) == 0x000018, "Member 'FSQEXSEADAutoSeDetectorSettingSwing::RubVolumeRangeMin' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeDetectorSettingSwing, RubVolumeRangeMax) == 0x00001C, "Member 'FSQEXSEADAutoSeDetectorSettingSwing::RubVolumeRangeMax' has a wrong offset!");

// ScriptStruct SQEXSEAD.SQEXSEADAutoSeDetectorSettingMisc
// 0x0054 (0x0054 - 0x0000)
struct FSQEXSEADAutoSeDetectorSettingMisc final
{
public:
	bool                                          bEnableTurnDetection;                              // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideTurnSettings;                             // 0x0001(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TurnRotVelocityRateThreshold;                      // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TurnVolumeMinRotVelRate;                           // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TurnVolumeMaxRotVelRate;                           // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableHeadRotDetection;                           // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideHeadRotSettings;                          // 0x0011(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HeadRotRVelThreshold;                              // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HeadRotVolumeMinRVel;                              // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HeadRotVolumeMaxRVel;                              // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableBowDetection;                               // 0x0020(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideBowSettings;                              // 0x0021(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x2];                                       // 0x0022(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AssumeWaistLessMoveVelocity;                       // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShoulderRVelThreshold;                             // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseShouldersRVelAverage;                          // 0x002C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BowVolumeMinRVel;                                  // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BowVolumeMaxRVel;                                  // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableRagdollDetection;                           // 0x0038(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideRagdollSettings;                          // 0x0039(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x2];                                       // 0x003A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RagdollBounceEnoughVel;                            // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RagdollBounceVolumeMinVel;                         // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RagdollBounceVolumeMaxVel;                         // 0x0044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RagdollFricativeVelThreshold;                      // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RagdollFricativeVolumeMinVel;                      // 0x004C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RagdollFricativeVolumeMaxVel;                      // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQEXSEADAutoSeDetectorSettingMisc) == 0x000004, "Wrong alignment on FSQEXSEADAutoSeDetectorSettingMisc");
static_assert(sizeof(FSQEXSEADAutoSeDetectorSettingMisc) == 0x000054, "Wrong size on FSQEXSEADAutoSeDetectorSettingMisc");
static_assert(offsetof(FSQEXSEADAutoSeDetectorSettingMisc, bEnableTurnDetection) == 0x000000, "Member 'FSQEXSEADAutoSeDetectorSettingMisc::bEnableTurnDetection' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeDetectorSettingMisc, bOverrideTurnSettings) == 0x000001, "Member 'FSQEXSEADAutoSeDetectorSettingMisc::bOverrideTurnSettings' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeDetectorSettingMisc, TurnRotVelocityRateThreshold) == 0x000004, "Member 'FSQEXSEADAutoSeDetectorSettingMisc::TurnRotVelocityRateThreshold' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeDetectorSettingMisc, TurnVolumeMinRotVelRate) == 0x000008, "Member 'FSQEXSEADAutoSeDetectorSettingMisc::TurnVolumeMinRotVelRate' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeDetectorSettingMisc, TurnVolumeMaxRotVelRate) == 0x00000C, "Member 'FSQEXSEADAutoSeDetectorSettingMisc::TurnVolumeMaxRotVelRate' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeDetectorSettingMisc, bEnableHeadRotDetection) == 0x000010, "Member 'FSQEXSEADAutoSeDetectorSettingMisc::bEnableHeadRotDetection' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeDetectorSettingMisc, bOverrideHeadRotSettings) == 0x000011, "Member 'FSQEXSEADAutoSeDetectorSettingMisc::bOverrideHeadRotSettings' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeDetectorSettingMisc, HeadRotRVelThreshold) == 0x000014, "Member 'FSQEXSEADAutoSeDetectorSettingMisc::HeadRotRVelThreshold' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeDetectorSettingMisc, HeadRotVolumeMinRVel) == 0x000018, "Member 'FSQEXSEADAutoSeDetectorSettingMisc::HeadRotVolumeMinRVel' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeDetectorSettingMisc, HeadRotVolumeMaxRVel) == 0x00001C, "Member 'FSQEXSEADAutoSeDetectorSettingMisc::HeadRotVolumeMaxRVel' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeDetectorSettingMisc, bEnableBowDetection) == 0x000020, "Member 'FSQEXSEADAutoSeDetectorSettingMisc::bEnableBowDetection' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeDetectorSettingMisc, bOverrideBowSettings) == 0x000021, "Member 'FSQEXSEADAutoSeDetectorSettingMisc::bOverrideBowSettings' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeDetectorSettingMisc, AssumeWaistLessMoveVelocity) == 0x000024, "Member 'FSQEXSEADAutoSeDetectorSettingMisc::AssumeWaistLessMoveVelocity' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeDetectorSettingMisc, ShoulderRVelThreshold) == 0x000028, "Member 'FSQEXSEADAutoSeDetectorSettingMisc::ShoulderRVelThreshold' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeDetectorSettingMisc, bUseShouldersRVelAverage) == 0x00002C, "Member 'FSQEXSEADAutoSeDetectorSettingMisc::bUseShouldersRVelAverage' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeDetectorSettingMisc, BowVolumeMinRVel) == 0x000030, "Member 'FSQEXSEADAutoSeDetectorSettingMisc::BowVolumeMinRVel' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeDetectorSettingMisc, BowVolumeMaxRVel) == 0x000034, "Member 'FSQEXSEADAutoSeDetectorSettingMisc::BowVolumeMaxRVel' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeDetectorSettingMisc, bEnableRagdollDetection) == 0x000038, "Member 'FSQEXSEADAutoSeDetectorSettingMisc::bEnableRagdollDetection' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeDetectorSettingMisc, bOverrideRagdollSettings) == 0x000039, "Member 'FSQEXSEADAutoSeDetectorSettingMisc::bOverrideRagdollSettings' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeDetectorSettingMisc, RagdollBounceEnoughVel) == 0x00003C, "Member 'FSQEXSEADAutoSeDetectorSettingMisc::RagdollBounceEnoughVel' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeDetectorSettingMisc, RagdollBounceVolumeMinVel) == 0x000040, "Member 'FSQEXSEADAutoSeDetectorSettingMisc::RagdollBounceVolumeMinVel' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeDetectorSettingMisc, RagdollBounceVolumeMaxVel) == 0x000044, "Member 'FSQEXSEADAutoSeDetectorSettingMisc::RagdollBounceVolumeMaxVel' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeDetectorSettingMisc, RagdollFricativeVelThreshold) == 0x000048, "Member 'FSQEXSEADAutoSeDetectorSettingMisc::RagdollFricativeVelThreshold' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeDetectorSettingMisc, RagdollFricativeVolumeMinVel) == 0x00004C, "Member 'FSQEXSEADAutoSeDetectorSettingMisc::RagdollFricativeVolumeMinVel' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeDetectorSettingMisc, RagdollFricativeVolumeMaxVel) == 0x000050, "Member 'FSQEXSEADAutoSeDetectorSettingMisc::RagdollFricativeVolumeMaxVel' has a wrong offset!");

// ScriptStruct SQEXSEAD.SQEXSEADAutoSeDetectorSettings
// 0x0188 (0x0188 - 0x0000)
struct FSQEXSEADAutoSeDetectorSettings final
{
public:
	struct FSQEXSEADAutoSeAnalyzerSetting         AnalyzerSetting;                                   // 0x0000(0x001C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FSQEXSEADAutoSeDetectorSettingFootStep DetectorSettingFootStep;                           // 0x001C(0x007C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FSQEXSEADAutoSeDetectorSettingRustle   DetectorSettingRustle;                             // 0x0098(0x0064)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FSQEXSEADAutoSeDetectorSettingWingAction DetectorSettingWingAction;                         // 0x00FC(0x0014)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FSQEXSEADAutoSeDetectorSettingSwing    DetectorSettingSwing;                              // 0x0110(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FSQEXSEADAutoSeDetectorSettingMisc     DetectorSettingMisc;                               // 0x0130(0x0054)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FSQEXSEADAutoSePostDetectionSettings   PostDetectionSettings;                             // 0x0184(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQEXSEADAutoSeDetectorSettings) == 0x000004, "Wrong alignment on FSQEXSEADAutoSeDetectorSettings");
static_assert(sizeof(FSQEXSEADAutoSeDetectorSettings) == 0x000188, "Wrong size on FSQEXSEADAutoSeDetectorSettings");
static_assert(offsetof(FSQEXSEADAutoSeDetectorSettings, AnalyzerSetting) == 0x000000, "Member 'FSQEXSEADAutoSeDetectorSettings::AnalyzerSetting' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeDetectorSettings, DetectorSettingFootStep) == 0x00001C, "Member 'FSQEXSEADAutoSeDetectorSettings::DetectorSettingFootStep' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeDetectorSettings, DetectorSettingRustle) == 0x000098, "Member 'FSQEXSEADAutoSeDetectorSettings::DetectorSettingRustle' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeDetectorSettings, DetectorSettingWingAction) == 0x0000FC, "Member 'FSQEXSEADAutoSeDetectorSettings::DetectorSettingWingAction' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeDetectorSettings, DetectorSettingSwing) == 0x000110, "Member 'FSQEXSEADAutoSeDetectorSettings::DetectorSettingSwing' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeDetectorSettings, DetectorSettingMisc) == 0x000130, "Member 'FSQEXSEADAutoSeDetectorSettings::DetectorSettingMisc' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeDetectorSettings, PostDetectionSettings) == 0x000184, "Member 'FSQEXSEADAutoSeDetectorSettings::PostDetectionSettings' has a wrong offset!");

// ScriptStruct SQEXSEAD.SQEXSEAD_Timing
// 0x000C (0x000C - 0x0000)
struct alignas(0x04) FSQEXSEAD_Timing final
{
public:
	uint8                                         Pad_0[0xC];                                        // 0x0000(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQEXSEAD_Timing) == 0x000004, "Wrong alignment on FSQEXSEAD_Timing");
static_assert(sizeof(FSQEXSEAD_Timing) == 0x00000C, "Wrong size on FSQEXSEAD_Timing");

// ScriptStruct SQEXSEAD.SQEXSEADAutoSeComponentBodyInitParams
// 0x0020 (0x0020 - 0x0000)
struct FSQEXSEADAutoSeComponentBodyInitParams final
{
public:
	class FName                                   BaseName;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   WaistName;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   HeadRootName;                                      // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   HeadForwardName;                                   // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQEXSEADAutoSeComponentBodyInitParams) == 0x000004, "Wrong alignment on FSQEXSEADAutoSeComponentBodyInitParams");
static_assert(sizeof(FSQEXSEADAutoSeComponentBodyInitParams) == 0x000020, "Wrong size on FSQEXSEADAutoSeComponentBodyInitParams");
static_assert(offsetof(FSQEXSEADAutoSeComponentBodyInitParams, BaseName) == 0x000000, "Member 'FSQEXSEADAutoSeComponentBodyInitParams::BaseName' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeComponentBodyInitParams, WaistName) == 0x000008, "Member 'FSQEXSEADAutoSeComponentBodyInitParams::WaistName' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeComponentBodyInitParams, HeadRootName) == 0x000010, "Member 'FSQEXSEADAutoSeComponentBodyInitParams::HeadRootName' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeComponentBodyInitParams, HeadForwardName) == 0x000018, "Member 'FSQEXSEADAutoSeComponentBodyInitParams::HeadForwardName' has a wrong offset!");

// ScriptStruct SQEXSEAD.SQEXSEAD_BGMLocalOptions
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x04) FSQEXSEAD_BGMLocalOptions final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQEXSEAD_BGMLocalOptions) == 0x000004, "Wrong alignment on FSQEXSEAD_BGMLocalOptions");
static_assert(sizeof(FSQEXSEAD_BGMLocalOptions) == 0x000008, "Wrong size on FSQEXSEAD_BGMLocalOptions");

// ScriptStruct SQEXSEAD.SQEXSEADVolumeInfo
// 0x0001 (0x0001 - 0x0000)
struct FSQEXSEADVolumeInfo final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQEXSEADVolumeInfo) == 0x000001, "Wrong alignment on FSQEXSEADVolumeInfo");
static_assert(sizeof(FSQEXSEADVolumeInfo) == 0x000001, "Wrong size on FSQEXSEADVolumeInfo");

// ScriptStruct SQEXSEAD.SQEXSEADSoundIndexInfo
// 0x0008 (0x0008 - 0x0000)
struct FSQEXSEADSoundIndexInfo final
{
public:
	int32                                         SoundIndex;                                        // 0x0000(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0004(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQEXSEADSoundIndexInfo) == 0x000004, "Wrong alignment on FSQEXSEADSoundIndexInfo");
static_assert(sizeof(FSQEXSEADSoundIndexInfo) == 0x000008, "Wrong size on FSQEXSEADSoundIndexInfo");
static_assert(offsetof(FSQEXSEADSoundIndexInfo, SoundIndex) == 0x000000, "Member 'FSQEXSEADSoundIndexInfo::SoundIndex' has a wrong offset!");
static_assert(offsetof(FSQEXSEADSoundIndexInfo, Duration) == 0x000004, "Member 'FSQEXSEADSoundIndexInfo::Duration' has a wrong offset!");

// ScriptStruct SQEXSEAD.SQEXSEADSoundRandomProperty
// 0x000C (0x000C - 0x0000)
struct FSQEXSEADSoundRandomProperty final
{
public:
	class FName                                   SoundName;                                         // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RandomWeights;                                     // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQEXSEADSoundRandomProperty) == 0x000004, "Wrong alignment on FSQEXSEADSoundRandomProperty");
static_assert(sizeof(FSQEXSEADSoundRandomProperty) == 0x00000C, "Wrong size on FSQEXSEADSoundRandomProperty");
static_assert(offsetof(FSQEXSEADSoundRandomProperty, SoundName) == 0x000000, "Member 'FSQEXSEADSoundRandomProperty::SoundName' has a wrong offset!");
static_assert(offsetof(FSQEXSEADSoundRandomProperty, RandomWeights) == 0x000008, "Member 'FSQEXSEADSoundRandomProperty::RandomWeights' has a wrong offset!");

// ScriptStruct SQEXSEAD.SQEXSEADRandomSoundSetting
// 0x0020 (0x0020 - 0x0000)
struct FSQEXSEADRandomSoundSetting final
{
public:
	TArray<struct FSQEXSEADSoundRandomProperty>   RandomProperties;                                  // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         SilentRatio;                                       // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bIgnorePreviousSelectedSound : 1;                  // 0x0014(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_15[0xB];                                       // 0x0015(0x000B)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQEXSEADRandomSoundSetting) == 0x000008, "Wrong alignment on FSQEXSEADRandomSoundSetting");
static_assert(sizeof(FSQEXSEADRandomSoundSetting) == 0x000020, "Wrong size on FSQEXSEADRandomSoundSetting");
static_assert(offsetof(FSQEXSEADRandomSoundSetting, RandomProperties) == 0x000000, "Member 'FSQEXSEADRandomSoundSetting::RandomProperties' has a wrong offset!");
static_assert(offsetof(FSQEXSEADRandomSoundSetting, SilentRatio) == 0x000010, "Member 'FSQEXSEADRandomSoundSetting::SilentRatio' has a wrong offset!");

// ScriptStruct SQEXSEAD.SQEXSEADAutoSeComponentAssetTableNonSurface
// 0x0150 (0x0150 - 0x0000)
struct FSQEXSEADAutoSeComponentAssetTableNonSurface final
{
public:
	struct FSoftObjectPath                        SoundAssetPaths[0xE];                              // 0x0000(0x0018)(Edit, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQEXSEADAutoSeComponentAssetTableNonSurface) == 0x000008, "Wrong alignment on FSQEXSEADAutoSeComponentAssetTableNonSurface");
static_assert(sizeof(FSQEXSEADAutoSeComponentAssetTableNonSurface) == 0x000150, "Wrong size on FSQEXSEADAutoSeComponentAssetTableNonSurface");
static_assert(offsetof(FSQEXSEADAutoSeComponentAssetTableNonSurface, SoundAssetPaths) == 0x000000, "Member 'FSQEXSEADAutoSeComponentAssetTableNonSurface::SoundAssetPaths' has a wrong offset!");

// ScriptStruct SQEXSEAD.SQEXSEADBusPerformanceInfo
// 0x1018 (0x1018 - 0x0000)
struct alignas(0x08) FSQEXSEADBusPerformanceInfo final
{
public:
	uint8                                         Pad_0[0x1018];                                     // 0x0000(0x1018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQEXSEADBusPerformanceInfo) == 0x000008, "Wrong alignment on FSQEXSEADBusPerformanceInfo");
static_assert(sizeof(FSQEXSEADBusPerformanceInfo) == 0x001018, "Wrong size on FSQEXSEADBusPerformanceInfo");

// ScriptStruct SQEXSEAD.SQEXSEADBusInfo
// 0x0080 (0x0080 - 0x0000)
struct alignas(0x08) FSQEXSEADBusInfo final
{
public:
	uint8                                         Pad_0[0x80];                                       // 0x0000(0x0080)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQEXSEADBusInfo) == 0x000008, "Wrong alignment on FSQEXSEADBusInfo");
static_assert(sizeof(FSQEXSEADBusInfo) == 0x000080, "Wrong size on FSQEXSEADBusInfo");

// ScriptStruct SQEXSEAD.SQEXSEADAutoSeComponentAssetTablePerSurface
// 0x0090 (0x0090 - 0x0000)
struct FSQEXSEADAutoSeComponentAssetTablePerSurface final
{
public:
	struct FSoftObjectPath                        SoundAssetPaths[0x6];                              // 0x0000(0x0018)(Edit, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQEXSEADAutoSeComponentAssetTablePerSurface) == 0x000008, "Wrong alignment on FSQEXSEADAutoSeComponentAssetTablePerSurface");
static_assert(sizeof(FSQEXSEADAutoSeComponentAssetTablePerSurface) == 0x000090, "Wrong size on FSQEXSEADAutoSeComponentAssetTablePerSurface");
static_assert(offsetof(FSQEXSEADAutoSeComponentAssetTablePerSurface, SoundAssetPaths) == 0x000000, "Member 'FSQEXSEADAutoSeComponentAssetTablePerSurface::SoundAssetPaths' has a wrong offset!");

// ScriptStruct SQEXSEAD.SQEXSEADBusSendInfo
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x04) FSQEXSEADBusSendInfo final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQEXSEADBusSendInfo) == 0x000004, "Wrong alignment on FSQEXSEADBusSendInfo");
static_assert(sizeof(FSQEXSEADBusSendInfo) == 0x000008, "Wrong size on FSQEXSEADBusSendInfo");

// ScriptStruct SQEXSEAD.SQEXSEADCategoryPerformanceInfo
// 0x3008 (0x3008 - 0x0000)
struct alignas(0x08) FSQEXSEADCategoryPerformanceInfo final
{
public:
	uint8                                         Pad_0[0x3008];                                     // 0x0000(0x3008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQEXSEADCategoryPerformanceInfo) == 0x000008, "Wrong alignment on FSQEXSEADCategoryPerformanceInfo");
static_assert(sizeof(FSQEXSEADCategoryPerformanceInfo) == 0x003008, "Wrong size on FSQEXSEADCategoryPerformanceInfo");

// ScriptStruct SQEXSEAD.SQEXSEADAutoSeMotionSoundFilter
// 0x0003 (0x0003 - 0x0000)
struct FSQEXSEADAutoSeMotionSoundFilter final
{
public:
	uint8                                         bMSFilterFlag_FootStep : 1;                        // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bMSFilterFlag_FootShuffle : 1;                     // 0x0000(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bMSFilterFlag_Jump : 1;                            // 0x0000(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bMSFilterFlag_Land : 1;                            // 0x0000(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bMSFilterFlag_RustleArm : 1;                       // 0x0000(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bMSFilterFlag_RustleHandWave : 1;                  // 0x0000(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bMSFilterFlag_RustleFoot : 1;                      // 0x0000(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bMSFilterFlag_RustleFootCrotch : 1;                // 0x0000(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bMSFilterFlag_RustleFootBend : 1;                  // 0x0001(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bMSFilterFlag_WingFlap : 1;                        // 0x0001(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bMSFilterFlag_Turn : 1;                            // 0x0001(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bMSFilterFlag_Bow : 1;                             // 0x0001(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bMSFilterFlag_HeadRot : 1;                         // 0x0001(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bMSFilterFlag_SwingKnock : 1;                      // 0x0001(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bMSFilterFlag_SwingRub : 1;                        // 0x0001(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bMSFilterFlag_RagdollBounce : 1;                   // 0x0001(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bMSFilterFlag_RagdollFricative : 1;                // 0x0002(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
};
static_assert(alignof(FSQEXSEADAutoSeMotionSoundFilter) == 0x000001, "Wrong alignment on FSQEXSEADAutoSeMotionSoundFilter");
static_assert(sizeof(FSQEXSEADAutoSeMotionSoundFilter) == 0x000003, "Wrong size on FSQEXSEADAutoSeMotionSoundFilter");

// ScriptStruct SQEXSEAD.SQEXSEADCategoryInfo
// 0x0030 (0x0030 - 0x0000)
struct alignas(0x08) FSQEXSEADCategoryInfo final
{
public:
	uint8                                         Pad_0[0x30];                                       // 0x0000(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQEXSEADCategoryInfo) == 0x000008, "Wrong alignment on FSQEXSEADCategoryInfo");
static_assert(sizeof(FSQEXSEADCategoryInfo) == 0x000030, "Wrong size on FSQEXSEADCategoryInfo");

// ScriptStruct SQEXSEAD.SQEXSEADVolumeLevelInfo
// 0x0044 (0x0044 - 0x0000)
struct alignas(0x04) FSQEXSEADVolumeLevelInfo final
{
public:
	uint8                                         Pad_0[0x44];                                       // 0x0000(0x0044)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQEXSEADVolumeLevelInfo) == 0x000004, "Wrong alignment on FSQEXSEADVolumeLevelInfo");
static_assert(sizeof(FSQEXSEADVolumeLevelInfo) == 0x000044, "Wrong size on FSQEXSEADVolumeLevelInfo");

// ScriptStruct SQEXSEAD.SQEXSEADStreamingBankPerformanceInfo
// 0x0510 (0x0510 - 0x0000)
struct alignas(0x08) FSQEXSEADStreamingBankPerformanceInfo final
{
public:
	uint8                                         Pad_0[0x510];                                      // 0x0000(0x0510)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQEXSEADStreamingBankPerformanceInfo) == 0x000008, "Wrong alignment on FSQEXSEADStreamingBankPerformanceInfo");
static_assert(sizeof(FSQEXSEADStreamingBankPerformanceInfo) == 0x000510, "Wrong size on FSQEXSEADStreamingBankPerformanceInfo");

// ScriptStruct SQEXSEAD.SQEXSEADBankPerformanceInfo
// 0x8010 (0x8010 - 0x0000)
struct alignas(0x08) FSQEXSEADBankPerformanceInfo final
{
public:
	uint8                                         Pad_0[0x8010];                                     // 0x0000(0x8010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQEXSEADBankPerformanceInfo) == 0x000008, "Wrong alignment on FSQEXSEADBankPerformanceInfo");
static_assert(sizeof(FSQEXSEADBankPerformanceInfo) == 0x008010, "Wrong size on FSQEXSEADBankPerformanceInfo");

// ScriptStruct SQEXSEAD.SQEXSEADStreamingBankInfo
// 0x00A0 (0x00A0 - 0x0000)
struct alignas(0x08) FSQEXSEADStreamingBankInfo final
{
public:
	uint8                                         Pad_0[0xA0];                                       // 0x0000(0x00A0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQEXSEADStreamingBankInfo) == 0x000008, "Wrong alignment on FSQEXSEADStreamingBankInfo");
static_assert(sizeof(FSQEXSEADStreamingBankInfo) == 0x0000A0, "Wrong size on FSQEXSEADStreamingBankInfo");

// ScriptStruct SQEXSEAD.SQEXSEADAudioStreamInfo
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x04) FSQEXSEADAudioStreamInfo final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQEXSEADAudioStreamInfo) == 0x000004, "Wrong alignment on FSQEXSEADAudioStreamInfo");
static_assert(sizeof(FSQEXSEADAudioStreamInfo) == 0x000008, "Wrong size on FSQEXSEADAudioStreamInfo");

// ScriptStruct SQEXSEAD.SQEXSEADOnMemoryBankInfo
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FSQEXSEADOnMemoryBankInfo final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQEXSEADOnMemoryBankInfo) == 0x000008, "Wrong alignment on FSQEXSEADOnMemoryBankInfo");
static_assert(sizeof(FSQEXSEADOnMemoryBankInfo) == 0x000020, "Wrong size on FSQEXSEADOnMemoryBankInfo");

// ScriptStruct SQEXSEAD.SQEXSEADMusicPerformanceInfo
// 0x0150 (0x0150 - 0x0000)
struct alignas(0x08) FSQEXSEADMusicPerformanceInfo final
{
public:
	uint8                                         Pad_0[0x150];                                      // 0x0000(0x0150)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQEXSEADMusicPerformanceInfo) == 0x000008, "Wrong alignment on FSQEXSEADMusicPerformanceInfo");
static_assert(sizeof(FSQEXSEADMusicPerformanceInfo) == 0x000150, "Wrong size on FSQEXSEADMusicPerformanceInfo");

// ScriptStruct SQEXSEAD.SQEXSEADSoundPerformanceInfo
// 0x1410 (0x1410 - 0x0000)
struct alignas(0x08) FSQEXSEADSoundPerformanceInfo final
{
public:
	uint8                                         Pad_0[0x1410];                                     // 0x0000(0x1410)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQEXSEADSoundPerformanceInfo) == 0x000008, "Wrong alignment on FSQEXSEADSoundPerformanceInfo");
static_assert(sizeof(FSQEXSEADSoundPerformanceInfo) == 0x001410, "Wrong size on FSQEXSEADSoundPerformanceInfo");

// ScriptStruct SQEXSEAD.SQEXSEADPlayingMusicInfo
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x08) FSQEXSEADPlayingMusicInfo final
{
public:
	uint8                                         Pad_0[0x28];                                       // 0x0000(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQEXSEADPlayingMusicInfo) == 0x000008, "Wrong alignment on FSQEXSEADPlayingMusicInfo");
static_assert(sizeof(FSQEXSEADPlayingMusicInfo) == 0x000028, "Wrong size on FSQEXSEADPlayingMusicInfo");

// ScriptStruct SQEXSEAD.SQEXSEADPlayingSoundInfo
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x08) FSQEXSEADPlayingSoundInfo final
{
public:
	uint8                                         Pad_0[0x28];                                       // 0x0000(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQEXSEADPlayingSoundInfo) == 0x000008, "Wrong alignment on FSQEXSEADPlayingSoundInfo");
static_assert(sizeof(FSQEXSEADPlayingSoundInfo) == 0x000028, "Wrong size on FSQEXSEADPlayingSoundInfo");

// ScriptStruct SQEXSEAD.SQEXSEADSystemPerformanceInfo
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FSQEXSEADSystemPerformanceInfo final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQEXSEADSystemPerformanceInfo) == 0x000008, "Wrong alignment on FSQEXSEADSystemPerformanceInfo");
static_assert(sizeof(FSQEXSEADSystemPerformanceInfo) == 0x000020, "Wrong size on FSQEXSEADSystemPerformanceInfo");

// ScriptStruct SQEXSEAD.SQEXSEADAnimNotifyPlayAutoSeParams
// 0x0028 (0x0028 - 0x0000)
struct FSQEXSEADAnimNotifyPlayAutoSeParams final
{
public:
	ESQEXSEADANPlayAutoSeSourceType               SourceType;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQEXSEADAutoSeMotionSoundType                MotionSoundType;                                   // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class USQEXSEADSurfaceAssetReferenceTable*    SurfaceAssetPathTable;                             // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SurfaceAssetTableRecordName;                       // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQEXSEADAutoSePartsType                      AutoSePartsType;                                   // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         AutoSePartsIndex;                                  // 0x0019(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bCheckIsGrounded : 1;                              // 0x001A(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAttachToParts : 1;                                // 0x001A(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1B[0x1];                                       // 0x001B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SoundVolume;                                       // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SoundPitchMultiplier;                              // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQEXSEADAnimNotifyPlayAutoSeParams) == 0x000008, "Wrong alignment on FSQEXSEADAnimNotifyPlayAutoSeParams");
static_assert(sizeof(FSQEXSEADAnimNotifyPlayAutoSeParams) == 0x000028, "Wrong size on FSQEXSEADAnimNotifyPlayAutoSeParams");
static_assert(offsetof(FSQEXSEADAnimNotifyPlayAutoSeParams, SourceType) == 0x000000, "Member 'FSQEXSEADAnimNotifyPlayAutoSeParams::SourceType' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAnimNotifyPlayAutoSeParams, MotionSoundType) == 0x000001, "Member 'FSQEXSEADAnimNotifyPlayAutoSeParams::MotionSoundType' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAnimNotifyPlayAutoSeParams, SurfaceAssetPathTable) == 0x000008, "Member 'FSQEXSEADAnimNotifyPlayAutoSeParams::SurfaceAssetPathTable' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAnimNotifyPlayAutoSeParams, SurfaceAssetTableRecordName) == 0x000010, "Member 'FSQEXSEADAnimNotifyPlayAutoSeParams::SurfaceAssetTableRecordName' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAnimNotifyPlayAutoSeParams, AutoSePartsType) == 0x000018, "Member 'FSQEXSEADAnimNotifyPlayAutoSeParams::AutoSePartsType' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAnimNotifyPlayAutoSeParams, AutoSePartsIndex) == 0x000019, "Member 'FSQEXSEADAnimNotifyPlayAutoSeParams::AutoSePartsIndex' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAnimNotifyPlayAutoSeParams, SoundVolume) == 0x00001C, "Member 'FSQEXSEADAnimNotifyPlayAutoSeParams::SoundVolume' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAnimNotifyPlayAutoSeParams, SoundPitchMultiplier) == 0x000020, "Member 'FSQEXSEADAnimNotifyPlayAutoSeParams::SoundPitchMultiplier' has a wrong offset!");

// ScriptStruct SQEXSEAD.SQEXSEADAudioVolumeEvent
// 0x0018 (0x0018 - 0x0000)
struct FSQEXSEADAudioVolumeEvent final
{
public:
	ESQEXSEADAudioVolumeCommand                   Command;                                           // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ExteriorAudioVolumeSoundOcclusionVolume;           // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExteriorAudioVolumeSoundOcclusionLPF;              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ObstructionVolume;                                 // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ObstructionLPF;                                    // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeTime;                                          // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQEXSEADAudioVolumeEvent) == 0x000004, "Wrong alignment on FSQEXSEADAudioVolumeEvent");
static_assert(sizeof(FSQEXSEADAudioVolumeEvent) == 0x000018, "Wrong size on FSQEXSEADAudioVolumeEvent");
static_assert(offsetof(FSQEXSEADAudioVolumeEvent, Command) == 0x000000, "Member 'FSQEXSEADAudioVolumeEvent::Command' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAudioVolumeEvent, ExteriorAudioVolumeSoundOcclusionVolume) == 0x000004, "Member 'FSQEXSEADAudioVolumeEvent::ExteriorAudioVolumeSoundOcclusionVolume' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAudioVolumeEvent, ExteriorAudioVolumeSoundOcclusionLPF) == 0x000008, "Member 'FSQEXSEADAudioVolumeEvent::ExteriorAudioVolumeSoundOcclusionLPF' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAudioVolumeEvent, ObstructionVolume) == 0x00000C, "Member 'FSQEXSEADAudioVolumeEvent::ObstructionVolume' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAudioVolumeEvent, ObstructionLPF) == 0x000010, "Member 'FSQEXSEADAudioVolumeEvent::ObstructionLPF' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAudioVolumeEvent, FadeTime) == 0x000014, "Member 'FSQEXSEADAudioVolumeEvent::FadeTime' has a wrong offset!");

// ScriptStruct SQEXSEAD.SQEXSEADAutoSeComponentFootInitParams
// 0x0028 (0x0028 - 0x0000)
struct FSQEXSEADAutoSeComponentFootInitParams final
{
public:
	class FName                                   FemurName;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TibiaName;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FootName;                                          // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   HeelName;                                          // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ToeName;                                           // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQEXSEADAutoSeComponentFootInitParams) == 0x000004, "Wrong alignment on FSQEXSEADAutoSeComponentFootInitParams");
static_assert(sizeof(FSQEXSEADAutoSeComponentFootInitParams) == 0x000028, "Wrong size on FSQEXSEADAutoSeComponentFootInitParams");
static_assert(offsetof(FSQEXSEADAutoSeComponentFootInitParams, FemurName) == 0x000000, "Member 'FSQEXSEADAutoSeComponentFootInitParams::FemurName' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeComponentFootInitParams, TibiaName) == 0x000008, "Member 'FSQEXSEADAutoSeComponentFootInitParams::TibiaName' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeComponentFootInitParams, FootName) == 0x000010, "Member 'FSQEXSEADAutoSeComponentFootInitParams::FootName' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeComponentFootInitParams, HeelName) == 0x000018, "Member 'FSQEXSEADAutoSeComponentFootInitParams::HeelName' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeComponentFootInitParams, ToeName) == 0x000020, "Member 'FSQEXSEADAutoSeComponentFootInitParams::ToeName' has a wrong offset!");

// ScriptStruct SQEXSEAD.SQEXSEADAutoSeComponentArmInitParams
// 0x0018 (0x0018 - 0x0000)
struct FSQEXSEADAutoSeComponentArmInitParams final
{
public:
	class FName                                   ShoulderName;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ElbowName;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   HandName;                                          // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQEXSEADAutoSeComponentArmInitParams) == 0x000004, "Wrong alignment on FSQEXSEADAutoSeComponentArmInitParams");
static_assert(sizeof(FSQEXSEADAutoSeComponentArmInitParams) == 0x000018, "Wrong size on FSQEXSEADAutoSeComponentArmInitParams");
static_assert(offsetof(FSQEXSEADAutoSeComponentArmInitParams, ShoulderName) == 0x000000, "Member 'FSQEXSEADAutoSeComponentArmInitParams::ShoulderName' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeComponentArmInitParams, ElbowName) == 0x000008, "Member 'FSQEXSEADAutoSeComponentArmInitParams::ElbowName' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeComponentArmInitParams, HandName) == 0x000010, "Member 'FSQEXSEADAutoSeComponentArmInitParams::HandName' has a wrong offset!");

// ScriptStruct SQEXSEAD.SQEXSEADAutoSeComponentWingInitParams
// 0x0010 (0x0010 - 0x0000)
struct FSQEXSEADAutoSeComponentWingInitParams final
{
public:
	class FName                                   WingRootName;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   WingEdgeName;                                      // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQEXSEADAutoSeComponentWingInitParams) == 0x000004, "Wrong alignment on FSQEXSEADAutoSeComponentWingInitParams");
static_assert(sizeof(FSQEXSEADAutoSeComponentWingInitParams) == 0x000010, "Wrong size on FSQEXSEADAutoSeComponentWingInitParams");
static_assert(offsetof(FSQEXSEADAutoSeComponentWingInitParams, WingRootName) == 0x000000, "Member 'FSQEXSEADAutoSeComponentWingInitParams::WingRootName' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeComponentWingInitParams, WingEdgeName) == 0x000008, "Member 'FSQEXSEADAutoSeComponentWingInitParams::WingEdgeName' has a wrong offset!");

// ScriptStruct SQEXSEAD.SQEXSEADAutoSeComponentInitParams
// 0x0068 (0x0068 - 0x0000)
struct FSQEXSEADAutoSeComponentInitParams final
{
public:
	TArray<struct FSQEXSEADAutoSeComponentFootInitParams> Feet;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSQEXSEADAutoSeComponentArmInitParams> Arms;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSQEXSEADAutoSeComponentWingInitParams> Wings;                                             // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSQEXSEADAutoSeComponentSwingInitParams> Swings;                                            // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FSQEXSEADAutoSeComponentBodyInitParams Body;                                              // 0x0040(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	float                                         AutoCalcHeelRatio;                                 // 0x0060(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQEXSEADAutoSeComponentInitParams) == 0x000008, "Wrong alignment on FSQEXSEADAutoSeComponentInitParams");
static_assert(sizeof(FSQEXSEADAutoSeComponentInitParams) == 0x000068, "Wrong size on FSQEXSEADAutoSeComponentInitParams");
static_assert(offsetof(FSQEXSEADAutoSeComponentInitParams, Feet) == 0x000000, "Member 'FSQEXSEADAutoSeComponentInitParams::Feet' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeComponentInitParams, Arms) == 0x000010, "Member 'FSQEXSEADAutoSeComponentInitParams::Arms' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeComponentInitParams, Wings) == 0x000020, "Member 'FSQEXSEADAutoSeComponentInitParams::Wings' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeComponentInitParams, Swings) == 0x000030, "Member 'FSQEXSEADAutoSeComponentInitParams::Swings' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeComponentInitParams, Body) == 0x000040, "Member 'FSQEXSEADAutoSeComponentInitParams::Body' has a wrong offset!");
static_assert(offsetof(FSQEXSEADAutoSeComponentInitParams, AutoCalcHeelRatio) == 0x000060, "Member 'FSQEXSEADAutoSeComponentInitParams::AutoCalcHeelRatio' has a wrong offset!");

}

