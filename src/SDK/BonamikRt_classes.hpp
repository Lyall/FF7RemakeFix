#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BonamikRt

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "BonamikRt_structs.hpp"


namespace SDK
{

// Class BonamikRt.SQEX_Bonamik_Component
// 0x00D0 (0x0380 - 0x02B0)
class USQEX_Bonamik_Component final : public USceneComponent
{
public:
	uint8                                         Pad_2B0[0x18];                                     // 0x02B0(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bHasSkeletalMeshSkippedTransforms;                 // 0x02C8(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2C9[0x7];                                      // 0x02C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USQEX_BonamikAsset*                     m_BonamikAsset;                                    // 0x02D0(0x0008)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMeshComponent*                 SkeletalMeshComponent;                             // 0x02D8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCharacterMovementComponent*            CharacterMovementComponent;                        // 0x02E0(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2E8[0x8];                                      // 0x02E8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          m_BonamikEnable;                                   // 0x02F0(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          m_BonamikAutoDisable;                              // 0x02F1(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bAccurateBoundsUpdate;                             // 0x02F2(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2F3[0x1];                                      // 0x02F3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PreRollStepOnResume;                               // 0x02F4(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PrevScreenSize;                                    // 0x02F8(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2FC[0x84];                                     // 0x02FC(0x0084)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SQEX_Bonamik_AddReference(class USQEX_Bonamik_Component* OtherComponent, const class FString& ReferenceGroupName);
	void SQEX_Bonamik_AddReferenceCommon(class USQEX_Bonamik_Component* OtherComponent);
	void SQEX_Bonamik_AddReferenceDefault();
	void SQEX_Bonamik_ClearAllPresetWind();
	void SQEX_Bonamik_ClearEmissiveWind(float BlendTime, bool bApplyToChildren);
	void SQEX_Bonamik_DisablePresetWind(const TArray<class FName>& PresetNames);
	void SQEX_Bonamik_EnablePresetWind(const TArray<class FName>& PresetNames);
	float SQEX_Bonamik_GetTeleportDistance();
	float SQEX_Bonamik_GetWeight();
	bool SQEX_Bonamik_IsAutoDisable();
	bool SQEX_Bonamik_IsEnable();
	bool SQEX_Bonamik_IsSetup();
	void SQEX_Bonamik_ReinitializeSimulationPose();
	void SQEX_Bonamik_RemoveReference(class USQEX_Bonamik_Component* OtherComponent, const class FString& ReferenceGroupName);
	void SQEX_Bonamik_RemoveReferenceAll();
	void SQEX_Bonamik_RemoveReferenceCommon(class USQEX_Bonamik_Component* OtherComponent);
	void SQEX_Bonamik_RemoveReferenceDefault();
	void SQEX_Bonamik_Reset(bool bResetPose, bool bApplyToChildren);
	void SQEX_Bonamik_ResetGravity();
	void SQEX_Bonamik_RestoreDefaultParameters();
	void SQEX_Bonamik_RestoreGroupParam(const TArray<struct FSQEX_BonamikChangingParameter>& GroupParam);
	void SQEX_Bonamik_RestoreGroupParamExt(const TArray<struct FSQEX_BonamikChangingParameterExt>& GroupParam);
	void SQEX_Bonamik_ScaleGroupParam(const TArray<struct FSQEX_BonamikChangingParameter>& GroupParam);
	void SQEX_Bonamik_SetAnimPos(int32 BoneIndex, bool bForceSet);
	void SQEX_Bonamik_SetAutoDisable(bool AutoDisable);
	void SQEX_Bonamik_SetEmissiveWind(const TArray<class FName>& Groups, ESQEX_Bonamik_EmissiveDirection DirectionSpace, const struct FVector& DirectionVec, float BaseStrength, float WaveAmplitude, float WaveFreq, float BlendTime, bool bApplyToChildren);
	void SQEX_Bonamik_SetEnable(bool NewEnable);
	void SQEX_Bonamik_SetEnableGroundCollision(const TArray<class FString>& Groups, bool bNewEnable);
	void SQEX_Bonamik_SetEnableGroundCollisionAll(bool bNewEnable);
	void SQEX_Bonamik_SetGravity(const struct FVector& Gravity);
	void SQEX_Bonamik_SetGroupParam(const TArray<struct FSQEX_BonamikChangingParameter>& GroupParam);
	void SQEX_Bonamik_SetGroupParamExt(const TArray<struct FSQEX_BonamikChangingParameterExt>& GroupParam);
	void SQEX_Bonamik_SetGroupWeight(const TArray<class FString>& Groups, float Weight, float WeightChangeTime, bool ResetWhenNonZeroWeight, bool AutoDisable);
	void SQEX_Bonamik_SetInnerConeScale(const TArray<class FString>& Groups, float Scale, bool bApplyToChildren);
	void SQEX_Bonamik_SetLocalForceScale(const TArray<class FString>& Groups, float Scale, bool bApplyToChildren);
	void SQEX_Bonamik_SetMassScale(const TArray<class FString>& Groups, float Scale, bool bApplyToChildren);
	void SQEX_Bonamik_SetOuterConeScale(const TArray<class FString>& Groups, float Scale, bool bApplyToChildren);
	void SQEX_Bonamik_SetPreRoll(int32 Step, bool bApplyToChildren);
	void SQEX_Bonamik_SetPresetWindScale(const TArray<class FName>& PresetNames, const float Scale);
	void SQEX_Bonamik_SetSpeedRate(float SpeedRate, float SpeedRateChangeTime, bool bApplyToChildren);
	void SQEX_Bonamik_SetTeleportDistance(float Distance, int32 TeleportPreRollStep, bool bApplyToChildren);
	void SQEX_Bonamik_SetUpdateOnlyRendered(bool bUpdateOnlyRendered);
	void SQEX_Bonamik_SetUpdateOnlyVisible(bool bUpdateOnlyVisible);
	void SQEX_Bonamik_SetWeight(float Weight, float WeightChangeTime, bool ResetWhenNonZeroWeight, bool AutoDisable);
	void SQEX_Bonamik_SetWorldWindScale(const TArray<class FString>& Groups, float Scale, bool bApplyToChildren);
	void SQEX_Bonamik_TurnOff(bool preserveLatestResult, const TArray<class FName>& Groups, float BlendTime);
	void SQEX_Bonamik_TurnOn(const TArray<class FName>& Groups, float BlendTime);
	void SQEX_SetEmissiveWindScale(const TArray<class FName>& Groups, const float Scale, bool bApplyToChildren);

	struct FVector SQEX_Bonamik_GetGravity() const;
	class FName SQEX_Bonamik_GetGroupName(int32 idx) const;
	int32 SQEX_Bonamik_GetNumReferences() const;
	float SQEX_Bonamik_GetSpeedRate() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEX_Bonamik_Component">();
	}
	static class USQEX_Bonamik_Component* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEX_Bonamik_Component>();
	}
};
static_assert(alignof(USQEX_Bonamik_Component) == 0x000008, "Wrong alignment on USQEX_Bonamik_Component");
static_assert(sizeof(USQEX_Bonamik_Component) == 0x000380, "Wrong size on USQEX_Bonamik_Component");
static_assert(offsetof(USQEX_Bonamik_Component, bHasSkeletalMeshSkippedTransforms) == 0x0002C8, "Member 'USQEX_Bonamik_Component::bHasSkeletalMeshSkippedTransforms' has a wrong offset!");
static_assert(offsetof(USQEX_Bonamik_Component, m_BonamikAsset) == 0x0002D0, "Member 'USQEX_Bonamik_Component::m_BonamikAsset' has a wrong offset!");
static_assert(offsetof(USQEX_Bonamik_Component, SkeletalMeshComponent) == 0x0002D8, "Member 'USQEX_Bonamik_Component::SkeletalMeshComponent' has a wrong offset!");
static_assert(offsetof(USQEX_Bonamik_Component, CharacterMovementComponent) == 0x0002E0, "Member 'USQEX_Bonamik_Component::CharacterMovementComponent' has a wrong offset!");
static_assert(offsetof(USQEX_Bonamik_Component, m_BonamikEnable) == 0x0002F0, "Member 'USQEX_Bonamik_Component::m_BonamikEnable' has a wrong offset!");
static_assert(offsetof(USQEX_Bonamik_Component, m_BonamikAutoDisable) == 0x0002F1, "Member 'USQEX_Bonamik_Component::m_BonamikAutoDisable' has a wrong offset!");
static_assert(offsetof(USQEX_Bonamik_Component, bAccurateBoundsUpdate) == 0x0002F2, "Member 'USQEX_Bonamik_Component::bAccurateBoundsUpdate' has a wrong offset!");
static_assert(offsetof(USQEX_Bonamik_Component, PreRollStepOnResume) == 0x0002F4, "Member 'USQEX_Bonamik_Component::PreRollStepOnResume' has a wrong offset!");
static_assert(offsetof(USQEX_Bonamik_Component, PrevScreenSize) == 0x0002F8, "Member 'USQEX_Bonamik_Component::PrevScreenSize' has a wrong offset!");

// Class BonamikRt.SQEX_BonamikAsset
// 0x0580 (0x05B0 - 0x0030)
class USQEX_BonamikAsset final : public UDataAsset
{
public:
	class USkeletalMesh*                          m_SkeletalMesh;                                    // 0x0030(0x0008)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        m_VersionNo;                                       // 0x0038(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSQEX_BonamikSceneManagerDesc          m_SceneManager;                                    // 0x0040(0x0470)(Edit, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FSQEX_BonamikSolverDesc>        m_Solvers;                                         // 0x04B0(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FSQEX_BonamikBodyDesc>          m_Bodies;                                          // 0x04C0(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSQEX_BonamikLinkDesc>          m_Links;                                           // 0x04D0(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSQEX_BonamikPlaneDesc>         m_Planes;                                          // 0x04E0(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSQEX_BonamikShapeMatchingDesc> m_ShapeMatchings;                                  // 0x04F0(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSQEX_BonamikPossessionDesc>    m_Possessions;                                     // 0x0500(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint32                                        m_TotalKinematics;                                 // 0x0510(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        m_TotalConstraints;                                // 0x0514(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        m_TotalCones;                                      // 0x0518(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        m_TotalLinks;                                      // 0x051C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        m_TotalCollisions;                                 // 0x0520(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        m_TotalSelfCollisions;                             // 0x0524(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        m_TotalChainRootParticles;                         // 0x0528(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        m_TotalPCLinkCones;                                // 0x052C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        m_TotalLateralLinkCones;                           // 0x0530(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_bAlwaysUse60FPSsetting;                          // 0x0534(0x0001)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_535[0x3];                                      // 0x0535(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           m_IgnoreEffectors;                                 // 0x0538(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         m_TeleportDistance;                                // 0x0548(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54C[0x4];                                      // 0x054C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 m_BonamikReferenceGroup;                           // 0x0550(0x0010)(ZeroConstructor, Deprecated, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           m_ReferenceGroups;                                 // 0x0560(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         m_BonamikCheckGroundBodyPosGroups;                 // 0x0570(0x0010)(ZeroConstructor, Deprecated, NativeAccessSpecifierPublic)
	TArray<class FName>                           m_CheckGroundBodyPosGroups;                        // 0x0580(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSQEX_BonamikGroupLOD>          m_BonamikGroupLODs;                                // 0x0590(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          m_BonamikAccurateBoundsUpdate;                     // 0x05A0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5A1[0x3];                                      // 0x05A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         m_PreRollStepOnResume;                             // 0x05A4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5A8[0x8];                                      // 0x05A8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEX_BonamikAsset">();
	}
	static class USQEX_BonamikAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEX_BonamikAsset>();
	}
};
static_assert(alignof(USQEX_BonamikAsset) == 0x000008, "Wrong alignment on USQEX_BonamikAsset");
static_assert(sizeof(USQEX_BonamikAsset) == 0x0005B0, "Wrong size on USQEX_BonamikAsset");
static_assert(offsetof(USQEX_BonamikAsset, m_SkeletalMesh) == 0x000030, "Member 'USQEX_BonamikAsset::m_SkeletalMesh' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAsset, m_VersionNo) == 0x000038, "Member 'USQEX_BonamikAsset::m_VersionNo' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAsset, m_SceneManager) == 0x000040, "Member 'USQEX_BonamikAsset::m_SceneManager' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAsset, m_Solvers) == 0x0004B0, "Member 'USQEX_BonamikAsset::m_Solvers' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAsset, m_Bodies) == 0x0004C0, "Member 'USQEX_BonamikAsset::m_Bodies' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAsset, m_Links) == 0x0004D0, "Member 'USQEX_BonamikAsset::m_Links' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAsset, m_Planes) == 0x0004E0, "Member 'USQEX_BonamikAsset::m_Planes' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAsset, m_ShapeMatchings) == 0x0004F0, "Member 'USQEX_BonamikAsset::m_ShapeMatchings' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAsset, m_Possessions) == 0x000500, "Member 'USQEX_BonamikAsset::m_Possessions' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAsset, m_TotalKinematics) == 0x000510, "Member 'USQEX_BonamikAsset::m_TotalKinematics' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAsset, m_TotalConstraints) == 0x000514, "Member 'USQEX_BonamikAsset::m_TotalConstraints' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAsset, m_TotalCones) == 0x000518, "Member 'USQEX_BonamikAsset::m_TotalCones' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAsset, m_TotalLinks) == 0x00051C, "Member 'USQEX_BonamikAsset::m_TotalLinks' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAsset, m_TotalCollisions) == 0x000520, "Member 'USQEX_BonamikAsset::m_TotalCollisions' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAsset, m_TotalSelfCollisions) == 0x000524, "Member 'USQEX_BonamikAsset::m_TotalSelfCollisions' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAsset, m_TotalChainRootParticles) == 0x000528, "Member 'USQEX_BonamikAsset::m_TotalChainRootParticles' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAsset, m_TotalPCLinkCones) == 0x00052C, "Member 'USQEX_BonamikAsset::m_TotalPCLinkCones' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAsset, m_TotalLateralLinkCones) == 0x000530, "Member 'USQEX_BonamikAsset::m_TotalLateralLinkCones' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAsset, m_bAlwaysUse60FPSsetting) == 0x000534, "Member 'USQEX_BonamikAsset::m_bAlwaysUse60FPSsetting' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAsset, m_IgnoreEffectors) == 0x000538, "Member 'USQEX_BonamikAsset::m_IgnoreEffectors' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAsset, m_TeleportDistance) == 0x000548, "Member 'USQEX_BonamikAsset::m_TeleportDistance' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAsset, m_BonamikReferenceGroup) == 0x000550, "Member 'USQEX_BonamikAsset::m_BonamikReferenceGroup' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAsset, m_ReferenceGroups) == 0x000560, "Member 'USQEX_BonamikAsset::m_ReferenceGroups' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAsset, m_BonamikCheckGroundBodyPosGroups) == 0x000570, "Member 'USQEX_BonamikAsset::m_BonamikCheckGroundBodyPosGroups' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAsset, m_CheckGroundBodyPosGroups) == 0x000580, "Member 'USQEX_BonamikAsset::m_CheckGroundBodyPosGroups' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAsset, m_BonamikGroupLODs) == 0x000590, "Member 'USQEX_BonamikAsset::m_BonamikGroupLODs' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAsset, m_BonamikAccurateBoundsUpdate) == 0x0005A0, "Member 'USQEX_BonamikAsset::m_BonamikAccurateBoundsUpdate' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAsset, m_PreRollStepOnResume) == 0x0005A4, "Member 'USQEX_BonamikAsset::m_PreRollStepOnResume' has a wrong offset!");

// Class BonamikRt.SQEX_BonamikAssetUserData
// 0x0068 (0x0090 - 0x0028)
class USQEX_BonamikAssetUserData final : public UAssetUserData
{
public:
	TArray<class USQEX_BonamikAsset*>             BonamikAssets;                                     // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          m_bAlwaysUse60FPSsetting;                          // 0x0038(0x0001)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           IgnoreEffectors;                                   // 0x0040(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           ReferenceGroups;                                   // 0x0050(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           CheckGroundBodyPosGroups;                          // 0x0060(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSQEX_BonamikGroupLOD>          BonamikGroupLODs;                                  // 0x0070(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         TeleportDistance;                                  // 0x0080(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAccurateBoundsUpdate;                             // 0x0084(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_85[0x3];                                       // 0x0085(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PreRollStepOnResume;                               // 0x0088(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableOtherInstanceCollision;                     // 0x008C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8D[0x3];                                       // 0x008D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEX_BonamikAssetUserData">();
	}
	static class USQEX_BonamikAssetUserData* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEX_BonamikAssetUserData>();
	}
};
static_assert(alignof(USQEX_BonamikAssetUserData) == 0x000008, "Wrong alignment on USQEX_BonamikAssetUserData");
static_assert(sizeof(USQEX_BonamikAssetUserData) == 0x000090, "Wrong size on USQEX_BonamikAssetUserData");
static_assert(offsetof(USQEX_BonamikAssetUserData, BonamikAssets) == 0x000028, "Member 'USQEX_BonamikAssetUserData::BonamikAssets' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAssetUserData, m_bAlwaysUse60FPSsetting) == 0x000038, "Member 'USQEX_BonamikAssetUserData::m_bAlwaysUse60FPSsetting' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAssetUserData, IgnoreEffectors) == 0x000040, "Member 'USQEX_BonamikAssetUserData::IgnoreEffectors' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAssetUserData, ReferenceGroups) == 0x000050, "Member 'USQEX_BonamikAssetUserData::ReferenceGroups' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAssetUserData, CheckGroundBodyPosGroups) == 0x000060, "Member 'USQEX_BonamikAssetUserData::CheckGroundBodyPosGroups' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAssetUserData, BonamikGroupLODs) == 0x000070, "Member 'USQEX_BonamikAssetUserData::BonamikGroupLODs' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAssetUserData, TeleportDistance) == 0x000080, "Member 'USQEX_BonamikAssetUserData::TeleportDistance' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAssetUserData, bAccurateBoundsUpdate) == 0x000084, "Member 'USQEX_BonamikAssetUserData::bAccurateBoundsUpdate' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAssetUserData, PreRollStepOnResume) == 0x000088, "Member 'USQEX_BonamikAssetUserData::PreRollStepOnResume' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikAssetUserData, bEnableOtherInstanceCollision) == 0x00008C, "Member 'USQEX_BonamikAssetUserData::bEnableOtherInstanceCollision' has a wrong offset!");

// Class BonamikRt.SQEX_BonamikWind_Actor
// 0x0008 (0x0380 - 0x0378)
class ASQEX_BonamikWind_Actor : public AInfo
{
public:
	class USQEX_BonamikWind_Component*            m_BonamikWind_Component;                           // 0x0378(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void Enable(bool Value);
	void SetWindScale(float Value);

	float GetWindScale() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEX_BonamikWind_Actor">();
	}
	static class ASQEX_BonamikWind_Actor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQEX_BonamikWind_Actor>();
	}
};
static_assert(alignof(ASQEX_BonamikWind_Actor) == 0x000008, "Wrong alignment on ASQEX_BonamikWind_Actor");
static_assert(sizeof(ASQEX_BonamikWind_Actor) == 0x000380, "Wrong size on ASQEX_BonamikWind_Actor");
static_assert(offsetof(ASQEX_BonamikWind_Actor, m_BonamikWind_Component) == 0x000378, "Member 'ASQEX_BonamikWind_Actor::m_BonamikWind_Component' has a wrong offset!");

// Class BonamikRt.SQEX_BonamikCustomWind_Actor
// 0x0070 (0x03F0 - 0x0380)
class ASQEX_BonamikCustomWind_Actor final : public ASQEX_BonamikWind_Actor
{
public:
	struct FCustomWindSettings                    m_WindSetting;                                     // 0x0380(0x0070)(Edit, NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEX_BonamikCustomWind_Actor">();
	}
	static class ASQEX_BonamikCustomWind_Actor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQEX_BonamikCustomWind_Actor>();
	}
};
static_assert(alignof(ASQEX_BonamikCustomWind_Actor) == 0x000008, "Wrong alignment on ASQEX_BonamikCustomWind_Actor");
static_assert(sizeof(ASQEX_BonamikCustomWind_Actor) == 0x0003F0, "Wrong size on ASQEX_BonamikCustomWind_Actor");
static_assert(offsetof(ASQEX_BonamikCustomWind_Actor, m_WindSetting) == 0x000380, "Member 'ASQEX_BonamikCustomWind_Actor::m_WindSetting' has a wrong offset!");

// Class BonamikRt.SQEX_BonamikGlobalConfig
// 0x0058 (0x0080 - 0x0028)
class USQEX_BonamikGlobalConfig final : public UObject
{
public:
	bool                                          bEnableTickComponent;                              // 0x0028(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDebugDrawBonamik;                                 // 0x0029(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDebugDrawWind;                                    // 0x002A(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableUpdate;                                     // 0x002B(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMultiThreadUpdate;                                // 0x002C(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableSimulation;                                 // 0x002D(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableUpdateOverlaps;                             // 0x002E(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2F[0x1];                                       // 0x002F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeStep;                                          // 0x0030(0x0004)(ZeroConstructor, Config, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExpectedFrameRate;                                 // 0x0034(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MayaAnimationFrameRate;                            // 0x0038(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MayaSimulationFrameRate;                           // 0x003C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Gravity;                                           // 0x0040(0x000C)(Edit, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WindSourceSpeedFactor;                             // 0x004C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTickWindWhenPaused;                               // 0x0050(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ForceResetDeltaTimeDilationThreshold;              // 0x0054(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ForceResetDeltaTimeDilationPreRoll;                // 0x0058(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShouldPreRollDeltaTimeDilationThreshold;           // 0x005C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ShouldPreRollDeltaTimeDilationPreRoll;             // 0x0060(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IgnoreSimulationDeltaTimeDilationThreshold;        // 0x0064(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultTeleportDistance;                           // 0x0068(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DefaultTeleportPreRoll;                            // 0x006C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQEX_Bonamik_GlobalOutOfCamera               OutOfCamera;                                       // 0x0070(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bKBDEnable;                                        // 0x0071(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bKBDEnableInitializaiton;                          // 0x0072(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bKBDEnableCreationOfBonamikComponent;              // 0x0073(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OverrideCollisionIteration;                        // 0x0074(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OverrideLinkIteration;                             // 0x0078(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OverrideSolverIteration;                           // 0x007C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEX_BonamikGlobalConfig">();
	}
	static class USQEX_BonamikGlobalConfig* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEX_BonamikGlobalConfig>();
	}
};
static_assert(alignof(USQEX_BonamikGlobalConfig) == 0x000008, "Wrong alignment on USQEX_BonamikGlobalConfig");
static_assert(sizeof(USQEX_BonamikGlobalConfig) == 0x000080, "Wrong size on USQEX_BonamikGlobalConfig");
static_assert(offsetof(USQEX_BonamikGlobalConfig, bEnableTickComponent) == 0x000028, "Member 'USQEX_BonamikGlobalConfig::bEnableTickComponent' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikGlobalConfig, bDebugDrawBonamik) == 0x000029, "Member 'USQEX_BonamikGlobalConfig::bDebugDrawBonamik' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikGlobalConfig, bDebugDrawWind) == 0x00002A, "Member 'USQEX_BonamikGlobalConfig::bDebugDrawWind' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikGlobalConfig, bEnableUpdate) == 0x00002B, "Member 'USQEX_BonamikGlobalConfig::bEnableUpdate' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikGlobalConfig, bMultiThreadUpdate) == 0x00002C, "Member 'USQEX_BonamikGlobalConfig::bMultiThreadUpdate' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikGlobalConfig, bEnableSimulation) == 0x00002D, "Member 'USQEX_BonamikGlobalConfig::bEnableSimulation' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikGlobalConfig, bEnableUpdateOverlaps) == 0x00002E, "Member 'USQEX_BonamikGlobalConfig::bEnableUpdateOverlaps' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikGlobalConfig, TimeStep) == 0x000030, "Member 'USQEX_BonamikGlobalConfig::TimeStep' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikGlobalConfig, ExpectedFrameRate) == 0x000034, "Member 'USQEX_BonamikGlobalConfig::ExpectedFrameRate' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikGlobalConfig, MayaAnimationFrameRate) == 0x000038, "Member 'USQEX_BonamikGlobalConfig::MayaAnimationFrameRate' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikGlobalConfig, MayaSimulationFrameRate) == 0x00003C, "Member 'USQEX_BonamikGlobalConfig::MayaSimulationFrameRate' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikGlobalConfig, Gravity) == 0x000040, "Member 'USQEX_BonamikGlobalConfig::Gravity' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikGlobalConfig, WindSourceSpeedFactor) == 0x00004C, "Member 'USQEX_BonamikGlobalConfig::WindSourceSpeedFactor' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikGlobalConfig, bTickWindWhenPaused) == 0x000050, "Member 'USQEX_BonamikGlobalConfig::bTickWindWhenPaused' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikGlobalConfig, ForceResetDeltaTimeDilationThreshold) == 0x000054, "Member 'USQEX_BonamikGlobalConfig::ForceResetDeltaTimeDilationThreshold' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikGlobalConfig, ForceResetDeltaTimeDilationPreRoll) == 0x000058, "Member 'USQEX_BonamikGlobalConfig::ForceResetDeltaTimeDilationPreRoll' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikGlobalConfig, ShouldPreRollDeltaTimeDilationThreshold) == 0x00005C, "Member 'USQEX_BonamikGlobalConfig::ShouldPreRollDeltaTimeDilationThreshold' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikGlobalConfig, ShouldPreRollDeltaTimeDilationPreRoll) == 0x000060, "Member 'USQEX_BonamikGlobalConfig::ShouldPreRollDeltaTimeDilationPreRoll' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikGlobalConfig, IgnoreSimulationDeltaTimeDilationThreshold) == 0x000064, "Member 'USQEX_BonamikGlobalConfig::IgnoreSimulationDeltaTimeDilationThreshold' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikGlobalConfig, DefaultTeleportDistance) == 0x000068, "Member 'USQEX_BonamikGlobalConfig::DefaultTeleportDistance' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikGlobalConfig, DefaultTeleportPreRoll) == 0x00006C, "Member 'USQEX_BonamikGlobalConfig::DefaultTeleportPreRoll' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikGlobalConfig, OutOfCamera) == 0x000070, "Member 'USQEX_BonamikGlobalConfig::OutOfCamera' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikGlobalConfig, bKBDEnable) == 0x000071, "Member 'USQEX_BonamikGlobalConfig::bKBDEnable' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikGlobalConfig, bKBDEnableInitializaiton) == 0x000072, "Member 'USQEX_BonamikGlobalConfig::bKBDEnableInitializaiton' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikGlobalConfig, bKBDEnableCreationOfBonamikComponent) == 0x000073, "Member 'USQEX_BonamikGlobalConfig::bKBDEnableCreationOfBonamikComponent' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikGlobalConfig, OverrideCollisionIteration) == 0x000074, "Member 'USQEX_BonamikGlobalConfig::OverrideCollisionIteration' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikGlobalConfig, OverrideLinkIteration) == 0x000078, "Member 'USQEX_BonamikGlobalConfig::OverrideLinkIteration' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikGlobalConfig, OverrideSolverIteration) == 0x00007C, "Member 'USQEX_BonamikGlobalConfig::OverrideSolverIteration' has a wrong offset!");

// Class BonamikRt.SQEX_BonamikWind
// 0x05E8 (0x0610 - 0x0028)
class USQEX_BonamikWind final : public UObject
{
public:
	uint8                                         Pad_28[0x5E8];                                     // 0x0028(0x05E8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static void EnableByOwnerType(bool bEnable, ESQEX_Bonamik_WindOwnerType OwnerType);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEX_BonamikWind">();
	}
	static class USQEX_BonamikWind* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEX_BonamikWind>();
	}
};
static_assert(alignof(USQEX_BonamikWind) == 0x000008, "Wrong alignment on USQEX_BonamikWind");
static_assert(sizeof(USQEX_BonamikWind) == 0x000610, "Wrong size on USQEX_BonamikWind");

// Class BonamikRt.SQEX_BonamikWind_Component
// 0x0040 (0x02F0 - 0x02B0)
class USQEX_BonamikWind_Component final : public USceneComponent
{
public:
	class USQEX_BonamikWindDesc*                  m_BonamikWindDesc;                                 // 0x02B0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQEX_Bonamik_WindAreaType                    m_BonamikWindAreaType;                             // 0x02B8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_BonamikWindGlobalAddition;                       // 0x02B9(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2BA[0x2];                                      // 0x02BA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                m_BonamikWindBoxAreaSize;                          // 0x02BC(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                m_BonamikWindBoxAreaHalfSize;                      // 0x02C8(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_BonamikWindSphereAreaRadius;                     // 0x02D4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_BonamikWindAreaMargin;                           // 0x02D8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          m_BonamikWindAbsoluteDirection;                    // 0x02DC(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2DD[0x3];                                      // 0x02DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_BonamikWindDirectionYaw;                         // 0x02E0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_BonamikWindDirectionPitch;                       // 0x02E4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQEX_BonamikWind*                      m_BonamikWind;                                     // 0x02E8(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void Enable(bool Value);
	void SetWindScale(float Value);

	float GetWindScale() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEX_BonamikWind_Component">();
	}
	static class USQEX_BonamikWind_Component* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEX_BonamikWind_Component>();
	}
};
static_assert(alignof(USQEX_BonamikWind_Component) == 0x000008, "Wrong alignment on USQEX_BonamikWind_Component");
static_assert(sizeof(USQEX_BonamikWind_Component) == 0x0002F0, "Wrong size on USQEX_BonamikWind_Component");
static_assert(offsetof(USQEX_BonamikWind_Component, m_BonamikWindDesc) == 0x0002B0, "Member 'USQEX_BonamikWind_Component::m_BonamikWindDesc' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikWind_Component, m_BonamikWindAreaType) == 0x0002B8, "Member 'USQEX_BonamikWind_Component::m_BonamikWindAreaType' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikWind_Component, m_BonamikWindGlobalAddition) == 0x0002B9, "Member 'USQEX_BonamikWind_Component::m_BonamikWindGlobalAddition' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikWind_Component, m_BonamikWindBoxAreaSize) == 0x0002BC, "Member 'USQEX_BonamikWind_Component::m_BonamikWindBoxAreaSize' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikWind_Component, m_BonamikWindBoxAreaHalfSize) == 0x0002C8, "Member 'USQEX_BonamikWind_Component::m_BonamikWindBoxAreaHalfSize' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikWind_Component, m_BonamikWindSphereAreaRadius) == 0x0002D4, "Member 'USQEX_BonamikWind_Component::m_BonamikWindSphereAreaRadius' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikWind_Component, m_BonamikWindAreaMargin) == 0x0002D8, "Member 'USQEX_BonamikWind_Component::m_BonamikWindAreaMargin' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikWind_Component, m_BonamikWindAbsoluteDirection) == 0x0002DC, "Member 'USQEX_BonamikWind_Component::m_BonamikWindAbsoluteDirection' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikWind_Component, m_BonamikWindDirectionYaw) == 0x0002E0, "Member 'USQEX_BonamikWind_Component::m_BonamikWindDirectionYaw' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikWind_Component, m_BonamikWindDirectionPitch) == 0x0002E4, "Member 'USQEX_BonamikWind_Component::m_BonamikWindDirectionPitch' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikWind_Component, m_BonamikWind) == 0x0002E8, "Member 'USQEX_BonamikWind_Component::m_BonamikWind' has a wrong offset!");

// Class BonamikRt.SQEX_BonamikWindCollectionAsset
// 0x0010 (0x0040 - 0x0030)
class USQEX_BonamikWindCollectionAsset final : public UDataAsset
{
public:
	TArray<struct FSQEX_BonamikPresetWindSettings> m_BonamikPresetWindSettings;                       // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEX_BonamikWindCollectionAsset">();
	}
	static class USQEX_BonamikWindCollectionAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEX_BonamikWindCollectionAsset>();
	}
};
static_assert(alignof(USQEX_BonamikWindCollectionAsset) == 0x000008, "Wrong alignment on USQEX_BonamikWindCollectionAsset");
static_assert(sizeof(USQEX_BonamikWindCollectionAsset) == 0x000040, "Wrong size on USQEX_BonamikWindCollectionAsset");
static_assert(offsetof(USQEX_BonamikWindCollectionAsset, m_BonamikPresetWindSettings) == 0x000030, "Member 'USQEX_BonamikWindCollectionAsset::m_BonamikPresetWindSettings' has a wrong offset!");

// Class BonamikRt.SQEX_BonamikWindDesc
// 0x00C0 (0x00F0 - 0x0030)
class USQEX_BonamikWindDesc final : public UDataAsset
{
public:
	ESQEX_Bonamik_WindType                        m_WindType;                                        // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                m_WindForce;                                       // 0x0034(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                m_RandomRange;                                     // 0x0040(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_RandomTime;                                      // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                m_WaveMagnitude;                                   // 0x0050(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                m_WaveFrequency;                                   // 0x005C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                m_WaveMagOffset;                                   // 0x0068(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                m_WaveFreqOffset;                                  // 0x0074(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_WaveTime;                                        // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                m_CustomWaveScale;                                 // 0x0084(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                m_CustomWaveOffset;                                // 0x0090(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_CustomWaveTime;                                  // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<float>                                 m_DataX;                                           // 0x00A0(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 m_DataY;                                           // 0x00B0(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 m_DataZ;                                           // 0x00C0(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         m_PointStrength;                                   // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_BlastRange;                                      // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_BlastSpeed;                                      // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_PointRadius;                                     // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         m_PeakInRange;                                     // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_StartFrame;                                      // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         m_LoopNum;                                         // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EC[0x4];                                       // 0x00EC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEX_BonamikWindDesc">();
	}
	static class USQEX_BonamikWindDesc* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEX_BonamikWindDesc>();
	}
};
static_assert(alignof(USQEX_BonamikWindDesc) == 0x000008, "Wrong alignment on USQEX_BonamikWindDesc");
static_assert(sizeof(USQEX_BonamikWindDesc) == 0x0000F0, "Wrong size on USQEX_BonamikWindDesc");
static_assert(offsetof(USQEX_BonamikWindDesc, m_WindType) == 0x000030, "Member 'USQEX_BonamikWindDesc::m_WindType' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikWindDesc, m_WindForce) == 0x000034, "Member 'USQEX_BonamikWindDesc::m_WindForce' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikWindDesc, m_RandomRange) == 0x000040, "Member 'USQEX_BonamikWindDesc::m_RandomRange' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikWindDesc, m_RandomTime) == 0x00004C, "Member 'USQEX_BonamikWindDesc::m_RandomTime' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikWindDesc, m_WaveMagnitude) == 0x000050, "Member 'USQEX_BonamikWindDesc::m_WaveMagnitude' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikWindDesc, m_WaveFrequency) == 0x00005C, "Member 'USQEX_BonamikWindDesc::m_WaveFrequency' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikWindDesc, m_WaveMagOffset) == 0x000068, "Member 'USQEX_BonamikWindDesc::m_WaveMagOffset' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikWindDesc, m_WaveFreqOffset) == 0x000074, "Member 'USQEX_BonamikWindDesc::m_WaveFreqOffset' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikWindDesc, m_WaveTime) == 0x000080, "Member 'USQEX_BonamikWindDesc::m_WaveTime' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikWindDesc, m_CustomWaveScale) == 0x000084, "Member 'USQEX_BonamikWindDesc::m_CustomWaveScale' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikWindDesc, m_CustomWaveOffset) == 0x000090, "Member 'USQEX_BonamikWindDesc::m_CustomWaveOffset' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikWindDesc, m_CustomWaveTime) == 0x00009C, "Member 'USQEX_BonamikWindDesc::m_CustomWaveTime' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikWindDesc, m_DataX) == 0x0000A0, "Member 'USQEX_BonamikWindDesc::m_DataX' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikWindDesc, m_DataY) == 0x0000B0, "Member 'USQEX_BonamikWindDesc::m_DataY' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikWindDesc, m_DataZ) == 0x0000C0, "Member 'USQEX_BonamikWindDesc::m_DataZ' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikWindDesc, m_PointStrength) == 0x0000D0, "Member 'USQEX_BonamikWindDesc::m_PointStrength' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikWindDesc, m_BlastRange) == 0x0000D4, "Member 'USQEX_BonamikWindDesc::m_BlastRange' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikWindDesc, m_BlastSpeed) == 0x0000D8, "Member 'USQEX_BonamikWindDesc::m_BlastSpeed' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikWindDesc, m_PointRadius) == 0x0000DC, "Member 'USQEX_BonamikWindDesc::m_PointRadius' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikWindDesc, m_PeakInRange) == 0x0000E0, "Member 'USQEX_BonamikWindDesc::m_PeakInRange' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikWindDesc, m_StartFrame) == 0x0000E4, "Member 'USQEX_BonamikWindDesc::m_StartFrame' has a wrong offset!");
static_assert(offsetof(USQEX_BonamikWindDesc, m_LoopNum) == 0x0000E8, "Member 'USQEX_BonamikWindDesc::m_LoopNum' has a wrong offset!");

// Class BonamikRt.SQEX_BonamikWindPreset_Actor
// 0x0008 (0x0380 - 0x0378)
class ASQEX_BonamikWindPreset_Actor final : public AActor
{
public:
	class USQEX_BonamikWindCollectionAsset*       m_BonamikWindCollectionAsset;                      // 0x0378(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEX_BonamikWindPreset_Actor">();
	}
	static class ASQEX_BonamikWindPreset_Actor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQEX_BonamikWindPreset_Actor>();
	}
};
static_assert(alignof(ASQEX_BonamikWindPreset_Actor) == 0x000008, "Wrong alignment on ASQEX_BonamikWindPreset_Actor");
static_assert(sizeof(ASQEX_BonamikWindPreset_Actor) == 0x000380, "Wrong size on ASQEX_BonamikWindPreset_Actor");
static_assert(offsetof(ASQEX_BonamikWindPreset_Actor, m_BonamikWindCollectionAsset) == 0x000378, "Member 'ASQEX_BonamikWindPreset_Actor::m_BonamikWindCollectionAsset' has a wrong offset!");

// Class BonamikRt.BonamikWorldInterface
// 0x0000 (0x0028 - 0x0028)
class IBonamikWorldInterface final : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BonamikWorldInterface">();
	}
	static class IBonamikWorldInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IBonamikWorldInterface>();
	}
};
static_assert(alignof(IBonamikWorldInterface) == 0x000008, "Wrong alignment on IBonamikWorldInterface");
static_assert(sizeof(IBonamikWorldInterface) == 0x000028, "Wrong size on IBonamikWorldInterface");

// Class BonamikRt.SQEX_GameMode
// 0x0000 (0x0448 - 0x0448)
class ASQEX_GameMode final : public AGameMode
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEX_GameMode">();
	}
	static class ASQEX_GameMode* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQEX_GameMode>();
	}
};
static_assert(alignof(ASQEX_GameMode) == 0x000008, "Wrong alignment on ASQEX_GameMode");
static_assert(sizeof(ASQEX_GameMode) == 0x000448, "Wrong size on ASQEX_GameMode");

// Class BonamikRt.SQEX_WorldSettings
// 0x0140 (0x0688 - 0x0548)
class ASQEX_WorldSettings final : public AWorldSettings
{
public:
	struct FSQEX_BonamikPresetWindSettings        m_BonamikPresetWindSettings[0xA];                  // 0x0548(0x0020)(Edit, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEX_WorldSettings">();
	}
	static class ASQEX_WorldSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQEX_WorldSettings>();
	}
};
static_assert(alignof(ASQEX_WorldSettings) == 0x000008, "Wrong alignment on ASQEX_WorldSettings");
static_assert(sizeof(ASQEX_WorldSettings) == 0x000688, "Wrong size on ASQEX_WorldSettings");
static_assert(offsetof(ASQEX_WorldSettings, m_BonamikPresetWindSettings) == 0x000548, "Member 'ASQEX_WorldSettings::m_BonamikPresetWindSettings' has a wrong offset!");

}

