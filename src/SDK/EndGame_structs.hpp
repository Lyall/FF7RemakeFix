#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: EndGame

#include "Basic.hpp"

#include "AnimGraphRuntime_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "AnimationCore_structs.hpp"
#include "BodyDriverPlugin_structs.hpp"
#include "HSFLipSyncRuntime_structs.hpp"
#include "SQEXSEAD_structs.hpp"
#include "SlateCore_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK
{

// Enum EndGame.EEndMenuScrollBarPosition
// NumValues: 0x0004
enum class EEndMenuScrollBarPosition : uint8
{
	None                                     = 0,
	RightOrBottom                            = 1,
	LeftOrTop                                = 2,
	EEndMenuScrollBarPosition_MAX            = 3,
};

// Enum EndGame.EAnimNodeEndAttachTarget
// NumValues: 0x0004
enum class EAnimNodeEndAttachTarget : uint8
{
	Self                                     = 0,
	OwnerCharacter                           = 1,
	OwnerParentCharacter                     = 2,
	EAnimNodeEndAttachTarget_MAX             = 3,
};

// Enum EndGame.EEndPhysicsImpulseType
// NumValues: 0x0004
enum class EEndPhysicsImpulseType : uint32
{
	Default                                  = 0,
	Angular                                  = 1,
	Radial                                   = 2,
	EEndPhysicsImpulseType_MAX               = 3,
};

// Enum EndGame.EEndTerminalModifierType
// NumValues: 0x0002
enum class EEndTerminalModifierType : uint8
{
	FixAttach                                = 0,
	EEndTerminalModifierType_MAX             = 1,
};

// Enum EndGame.EEndWireReelModifierType
// NumValues: 0x0007
enum class EEndWireReelModifierType : uint8
{
	Attach                                   = 0,
	Launch                                   = 1,
	EnableGravity                            = 2,
	Keeping                                  = 3,
	Release                                  = 4,
	Detach                                   = 5,
	EEndWireReelModifierType_MAX             = 6,
};

// Enum EndGame.EEnd3DAudioActorUseType
// NumValues: 0x0003
enum class EEnd3DAudioActorUseType : uint8
{
	JukeBox                                  = 0,
	AutoPlay                                 = 1,
	EEnd3DAudioActorUseType_MAX              = 2,
};

// Enum EndGame.EEndBreakBoxMiniGameBoxTypePhysics
// NumValues: 0x0004
enum class EEndBreakBoxMiniGameBoxTypePhysics : uint8
{
	NORMAL                                   = 0,
	ABILITY                                  = 1,
	HIGH_GREAD                               = 2,
	MAX                                      = 3,
};

// Enum EndGame.EEndBreakBoxMiniGameEffect
// NumValues: 0x0005
enum class EEndBreakBoxMiniGameEffect : uint8
{
	BREAK                                    = 0,
	ATB_DROP                                 = 1,
	ATB_DRAIN                                = 2,
	ATB_RECOVER                              = 3,
	MAX                                      = 4,
};

// Enum EndGame.EEndBreakBoxMiniGameBoxType
// NumValues: 0x000C
enum class EEndBreakBoxMiniGameBoxType : uint8
{
	NORMAL                                   = 0,
	ABILITY                                  = 1,
	HIGH_GREAD                               = 2,
	HIGH_GREAD_L                             = 3,
	PLUS_NORMAL                              = 4,
	PLUS_PHYSICAL                            = 5,
	PLUS_MAGIC                               = 6,
	PLUS_TIME                                = 7,
	PLUS_TIME_PHYS                           = 8,
	PLUS_PHYSICAL_PHYS                       = 9,
	PLUS_MAGIC_PHYS                          = 10,
	MAX                                      = 11,
};

// Enum EndGame.EEndActivityInitResult
// NumValues: 0x0005
enum class EEndActivityInitResult : uint8
{
	None                                     = 0,
	Title                                    = 1,
	NewGame                                  = 2,
	LoadGame                                 = 3,
	EEndActivityInitResult_MAX               = 4,
};

// Enum EndGame.EPauseMask
// NumValues: 0x0018
enum class EPauseMask : uint8
{
	EPauseMask_DEBUG                         = 0,
	EPauseMask_SYSTEM                        = 1,
	EPauseMask_MENUPAUSE                     = 2,
	EPauseMask_HIDE_WORLD                    = 3,
	EPauseMask_INIT                          = 4,
	EPauseMask_LOADER                        = 5,
	EPauseMask_CHARAPOP                      = 6,
	EPauseMask_BATTLE                        = 7,
	EPauseMask_BATTLE_SUMMON                 = 8,
	EPauseMask_BATTLE_SUMMON_2ND             = 9,
	EPauseMask_CINEMA                        = 10,
	EPauseMask_FIELDtoCINEMA                 = 11,
	EPauseMask_FIELDtoBATTLE                 = 12,
	EPauseMask_ENVSETWRAPPER                 = 13,
	EPauseMask_FIELD                         = 14,
	EPauseMask_FIELDtoAI                     = 15,
	EPauseMask_SCENE                         = 16,
	EPauseMask_ENCOUNT                       = 17,
	EPauseMask_WAVE                          = 18,
	EPauseMask_MINIGAME                      = 19,
	EPauseMask_LOADING                       = 20,
	EPauseMask_BATTLE_BP                     = 21,
	EPauseMask_WEAPON_ANIMATION              = 22,
	EPauseMask_MAX                           = 23,
};

// Enum EndGame.EDebugCallerType
// NumValues: 0x000E
enum class EDebugCallerType : uint8
{
	Action                                   = 0,
	Animation                                = 1,
	Bike                                     = 2,
	Battle                                   = 3,
	BluePrint                                = 4,
	CutScene                                 = 5,
	Debug                                    = 6,
	System                                   = 7,
	SelfUpdate                               = 8,
	StateManager                             = 9,
	PartyMgr                                 = 10,
	PlannerEvent                             = 11,
	Encount                                  = 12,
	EDebugCallerType_MAX                     = 13,
};

// Enum EndGame.ECenterBoneEvaluationType
// NumValues: 0x0005
enum class ECenterBoneEvaluationType : uint8
{
	TranslationAndRotation                   = 0,
	Translation                              = 1,
	Rotation                                 = 2,
	Ignore                                   = 3,
	ECenterBoneEvaluationType_MAX            = 4,
};

// Enum EndGame.ESoundResorceType
// NumValues: 0x0004
enum class ESoundResorceType : uint8
{
	ESoundResorceType_SE                     = 0,
	ESoundResorceType_Voice                  = 1,
	ESoundResorceType_AutoSE                 = 2,
	ESoundResorceType_MAX                    = 3,
};

// Enum EndGame.EActorType
// NumValues: 0x0009
enum class EActorType : uint8
{
	EActorType_PLAYER                        = 0,
	EActorType_PARTY                         = 1,
	EActorType_GUEST                         = 2,
	EActorType_NPC                           = 3,
	EActorType_ENEMY                         = 4,
	EActorType_OBJECT                        = 5,
	EActorType_GUEST_Battle                  = 6,
	EActorType_WEAPON                        = 7,
	EActorType_MAX                           = 8,
};

// Enum EndGame.EActorMode
// NumValues: 0x0009
enum class EActorMode : uint8
{
	EActorMode_NONE                          = 0,
	EActorMode_FIELD                         = 1,
	EActorMode_FIELD_PLAN                    = 2,
	EActorMode_FIELD_CINEMA                  = 3,
	EActorMode_CAUTION                       = 4,
	EActorMode_BATTLE                        = 5,
	EActorMode_BIKE                          = 6,
	EActorMode_CINEMA                        = 7,
	EActorMode_MAX                           = 8,
};

// Enum EndGame.EWeaponSlot
// NumValues: 0x0006
enum class EWeaponSlot : uint8
{
	EWeaponSlot_1                            = 0,
	EWeaponSlot_2                            = 1,
	EWeaponSlot_3                            = 2,
	EWeaponSlot_4                            = 3,
	EWeaponSlot_MAX                          = 4,
	EWeaponSlot_NONE                         = 5,
};

// Enum EndGame.EAerialIgnoreShapeType
// NumValues: 0x0003
enum class EAerialIgnoreShapeType : uint8
{
	Box                                      = 0,
	Sphere                                   = 1,
	EAerialIgnoreShapeType_MAX               = 2,
};

// Enum EndGame.EMoveToGroundHeightType
// NumValues: 0x0003
enum class EMoveToGroundHeightType : uint8
{
	Ground                                   = 0,
	SpecifiedHeight                          = 1,
	EMoveToGroundHeightType_MAX              = 2,
};

// Enum EndGame.ECountTimers
// NumValues: 0x002C
enum class ECountTimers : uint8
{
	CountUpLatestMove                        = 0,
	CountUpLatestPosition                    = 1,
	CountUpPhase                             = 2,
	CountUpLocal                             = 3,
	CountUpStep                              = 4,
	CountUpMoveType                          = 5,
	CountUpCantSee                           = 6,
	CountUpBlockCantSee                      = 7,
	CountUpGuard                             = 8,
	CountDownIntervalMove                    = 9,
	CountDownIntervalTurn                    = 10,
	CountDownWaitMove                        = 11,
	CountDownDelayAction                     = 12,
	CountDownTopple                          = 13,
	CountDownToppleEnd                       = 14,
	CountDownTargetEvaluation                = 15,
	CountDownTargetUpdate                    = 16,
	CountDownFear                            = 17,
	CountDownExclusionFear                   = 18,
	CountDownDelayMove                       = 19,
	CountDownDelayAbility                    = 20,
	CountDownNotAccept                       = 21,
	CountDownDamageInterval                  = 22,
	CountDownDamageMoveInterval              = 23,
	CountDownTimeout                         = 24,
	CountDownLookChange                      = 25,
	CountDownGuard                           = 26,
	CountDownGuardInterval                   = 27,
	CountDownRegisterMove                    = 28,
	CountDownLookAt                          = 29,
	CountDownFearInterval                    = 30,
	CountDownDodgeInterval                   = 31,
	CountDownSummonNormalActionInterval      = 32,
	CountDownPassiveMoveInterval             = 33,
	CountDownContinuousAttack                = 34,
	CountDownCaution                         = 35,
	CountDownTargetUnreach                   = 36,
	CountDownWandering                       = 37,
	CountDownHovering                        = 38,
	CountDownBattleStartBuffer               = 39,
	CountDownRequestAirMove                  = 40,
	CountDownCommandValid                    = 41,
	Size                                     = 42,
	ECountTimers_MAX                         = 43,
};

// Enum EndGame.EControllerMask
// NumValues: 0x0008
enum class EControllerMask : uint8
{
	SYSTEM                                   = 0,
	BATTLE_SUSPEND                           = 1,
	BATTLE_STATUS                            = 2,
	SUMMON_CUTSCENE_SKILL                    = 3,
	SET_PLAY                                 = 4,
	AUTO_PLAY                                = 5,
	BATTLE_SCENE_BP                          = 6,
	MAX                                      = 7,
};

// Enum EndGame.EEndAiCharaType
// NumValues: 0x0005
enum class EEndAiCharaType : uint8
{
	None                                     = 0,
	PCMembers                                = 1,
	EnemyMembers                             = 2,
	Leader                                   = 3,
	EEndAiCharaType_MAX                      = 4,
};

// Enum EndGame.EEndAiMoveMode
// NumValues: 0x0008
enum class EEndAiMoveMode : uint8
{
	FollowLocation                           = 0,
	Ground                                   = 1,
	Fly                                      = 2,
	Landing                                  = 3,
	Other                                    = 4,
	Jump                                     = 5,
	EndJump                                  = 6,
	EEndAiMoveMode_MAX                       = 7,
};

// Enum EndGame.EAIInfoParam
// NumValues: 0x000A
enum class EAIInfoParam : uint8
{
	eLOOKAT_START_DISTANCE                   = 0,
	eLOOKAT_END_DISTANCE                     = 1,
	eLOOKAT_START_ANGLE                      = 2,
	eLOOKAT_END_ANGLE                        = 3,
	eINTERVAL_MOVE_TIME                      = 4,
	eWAIT_MOVE_TIME                          = 5,
	eFOLLOW_DISTANCE                         = 6,
	eFOLLOW_RUN_DISTANCE                     = 7,
	eMAX                                     = 8,
	EAIInfoParam_MAX                         = 9,
};

// Enum EndGame.EAIInfoFlag
// NumValues: 0x0011
enum class EAIInfoFlag : uint8
{
	eCAN_MOVE                                = 0,
	eCAN_TURN                                = 1,
	eCAN_RUN                                 = 2,
	eCAN_STRAFE                              = 3,
	eCAN_TURN_MOVE                           = 4,
	eCAN_LOOKAT                              = 5,
	eCAN_LOOKAT_MOVE                         = 6,
	eCAN_LOOKAT_TURN                         = 7,
	eCAN_HERMITE_MOVE                        = 8,
	eCAN_MOVE_UPDATE                         = 9,
	eSTOP_MOVE_UPDATE                        = 10,
	eMAX                                     = 11,
	eCAN_FIX_MOVE                            = 11,
	eTURN_BEFORE_MOVE                        = 12,
	eTURN_INTEREST                           = 13,
	eMAX_DUMMY                               = 14,
	EAIInfoFlag_MAX                          = 15,
};

// Enum EndGame.EFieldAiPathWayType
// NumValues: 0x0005
enum class EFieldAiPathWayType : uint8
{
	None                                     = 0,
	Center                                   = 1,
	Right                                    = 2,
	Left                                     = 3,
	Max                                      = 4,
};

// Enum EndGame.EEndAiMoveType
// NumValues: 0x0006
enum class EEndAiMoveType : uint8
{
	RUN                                      = 0,
	DASH                                     = 1,
	WALK                                     = 2,
	HIGHWALK                                 = 3,
	JOG                                      = 4,
	MAX                                      = 5,
};

// Enum EndGame.EEndAIIntentionTalkControlEvent
// NumValues: 0x0004
enum class EEndAIIntentionTalkControlEvent : uint8
{
	None                                     = 0,
	OnBeginTalker                            = 1,
	OnBeginListener                          = 2,
	EEndAIIntentionTalkControlEvent_MAX      = 3,
};

// Enum EndGame.EEndAIBehaviorState
// NumValues: 0x0005
enum class EEndAIBehaviorState : uint8
{
	Pending                                  = 0,
	Playing                                  = 1,
	Suspended                                = 2,
	Completed                                = 3,
	Max                                      = 4,
};

// Enum EndGame.EEndAIBehaviorTag
// NumValues: 0x0007
enum class EEndAIBehaviorTag : uint8
{
	Move                                     = 0,
	LookAt                                   = 1,
	Saccade                                  = 2,
	BodyEmotion                              = 3,
	BodyControl                              = 4,
	Voice                                    = 5,
	Max                                      = 6,
};

// Enum EndGame.EEndAIIntentionPriority
// NumValues: 0x0005
enum class EEndAIIntentionPriority : uint8
{
	RuleBased                                = 0,
	High                                     = 1,
	Middle                                   = 2,
	Low                                      = 3,
	Max                                      = 4,
};

// Enum EndGame.EEndAIPersonalType
// NumValues: 0x0003
enum class EEndAIPersonalType : uint8
{
	PC                                       = 0,
	Mob                                      = 1,
	EEndAIPersonalType_MAX                   = 2,
};

// Enum EndGame.EEndAIUpdatePriority
// NumValues: 0x0005
enum class EEndAIUpdatePriority : uint8
{
	VelyHigh_Talking                         = 0,
	High                                     = 1,
	Middle                                   = 2,
	Low                                      = 3,
	Max                                      = 4,
};

// Enum EndGame.EEndAnimNotifyBattleType
// NumValues: 0x0002
enum class EEndAnimNotifyBattleType : uint8
{
	StartSummon                              = 0,
	EEndAnimNotifyBattleType_MAX             = 1,
};

// Enum EndGame.EEndAnimNotifyBattleAbilityEnergyType
// NumValues: 0x0003
enum class EEndAnimNotifyBattleAbilityEnergyType : uint32
{
	Charge                                   = 0,
	Discharge                                = 1,
	EEndAnimNotifyBattleAbilityEnergyType_MAX = 2,
};

// Enum EndGame.EEndNotifyBattleCameraChangeTimingType
// NumValues: 0x0003
enum class EEndNotifyBattleCameraChangeTimingType : uint8
{
	Branch0                                  = 0,
	Branch1                                  = 1,
	EEndNotifyBattleCameraChangeTimingType_MAX = 2,
};

// Enum EndGame.EEndDeactiveResidentEffectType
// NumValues: 0x0003
enum class EEndDeactiveResidentEffectType : uint8
{
	LoopOff                                  = 0,
	Hidden                                   = 1,
	EEndDeactiveResidentEffectType_MAX       = 2,
};

// Enum EndGame.EEndAnimNotifyEffectCharaPropertyAttachType
// NumValues: 0x0006
enum class EEndAnimNotifyEffectCharaPropertyAttachType : uint8
{
	Character                                = 0,
	Weapon1                                  = 1,
	Weapon2                                  = 2,
	Weapon3                                  = 3,
	Weapon4                                  = 4,
	EEndAnimNotifyEffectCharaPropertyAttachType_MAX = 5,
};

// Enum EndGame.EEndAnimNotifyEffectCharaPropertyReplaceType
// NumValues: 0x0007
enum class EEndAnimNotifyEffectCharaPropertyReplaceType : uint8
{
	Character                                = 0,
	Weapon1                                  = 1,
	Weapon2                                  = 2,
	Weapon3                                  = 3,
	Weapon4                                  = 4,
	Ability                                  = 5,
	EEndAnimNotifyEffectCharaPropertyReplaceType_MAX = 6,
};

// Enum EndGame.EEndBattleTargetCorrectionType
// NumValues: 0x0006
enum class EEndBattleTargetCorrectionType : uint8
{
	Normal                                   = 0,
	BackwardLine                             = 1,
	BattleAbilityFieldPosition               = 2,
	ScaleRootForFieldPosition                = 3,
	LinkPartner                              = 4,
	EEndBattleTargetCorrectionType_MAX       = 5,
};

// Enum EndGame.EEndEmotionType
// NumValues: 0x0006
enum class EEndEmotionType : uint8
{
	Unknown                                  = 0,
	Calm                                     = 1,
	Anger                                    = 2,
	Joy                                      = 3,
	Sorrow                                   = 4,
	EEndEmotionType_MAX                      = 5,
};

// Enum EndGame.EEndWireReelState
// NumValues: 0x0005
enum class EEndWireReelState : uint8
{
	Idle                                     = 0,
	Launch                                   = 1,
	Keeping                                  = 2,
	Release                                  = 3,
	EEndWireReelState_MAX                    = 4,
};

// Enum EndGame.EEndAnimApplyImpulseType
// NumValues: 0x0004
enum class EEndAnimApplyImpulseType : uint8
{
	Default                                  = 0,
	Melee                                    = 1,
	Bullet                                   = 2,
	EEndAnimApplyImpulseType_MAX             = 3,
};

// Enum EndGame.EEndDeadActionImpulseStrength
// NumValues: 0x0004
enum class EEndDeadActionImpulseStrength : uint8
{
	Weak                                     = 0,
	Medium                                   = 1,
	Strong                                   = 2,
	EEndDeadActionImpulseStrength_MAX        = 3,
};

// Enum EndGame.EEndAnimEmmisiveCurveType
// NumValues: 0x0005
enum class EEndAnimEmmisiveCurveType : uint8
{
	Intensity                                = 0,
	ColorX                                   = 1,
	ColorY                                   = 2,
	ColorZ                                   = 3,
	Max                                      = 4,
};

// Enum EndGame.EEndAnimCurveType
// NumValues: 0x0006
enum class EEndAnimCurveType : uint8
{
	LookAt_BlendAlpha                        = 0,
	LookAt_SpeedBias                         = 1,
	FootEffector_BlendAlpha                  = 2,
	AutoSaccadeX                             = 3,
	AutoSaccadeY                             = 4,
	Max                                      = 5,
};

// Enum EndGame.EEndHandConstraint
// NumValues: 0x000B
enum class EEndHandConstraint : uint8
{
	None                                     = 0,
	ManualPlacement                          = 1,
	ManualTransform                          = 2,
	ManualTransformWithForwadAndUpVector     = 3,
	LockPlacement                            = 4,
	LockTransform                            = 5,
	LockTransformToParentSocket              = 6,
	LockTransformToOtherSocketNew            = 7,
	LockTransformToOtherSocket               = 8,
	Vehicle                                  = 9,
	EEndHandConstraint_MAX                   = 10,
};

// Enum EndGame.EEndHandType
// NumValues: 0x0004
enum class EEndHandType : uint8
{
	All                                      = 0,
	Left                                     = 1,
	Right                                    = 2,
	EEndHandType_MAX                         = 3,
};

// Enum EndGame.EEndLookAtForceDeactiveType
// NumValues: 0x0007
enum class EEndLookAtForceDeactiveType : uint8
{
	Field                                    = 0,
	FieldAttack                              = 1,
	Battle                                   = 2,
	BattleAbility                            = 3,
	Bike                                     = 4,
	Cinema                                   = 5,
	Max                                      = 6,
};

// Enum EndGame.EEndLookAtRequestType
// NumValues: 0x000C
enum class EEndLookAtRequestType : uint8
{
	Cinema                                   = 0,
	FieldAttackWeaponThrow                   = 1,
	InterestAI_High                          = 2,
	TargetIcon                               = 3,
	AI                                       = 4,
	InterestAI_Low                           = 5,
	BaseAI_Contact                           = 6,
	AI_Low                                   = 7,
	BaseAI_Curiosity                         = 8,
	BaseAI_Idle                              = 9,
	BaseAction                               = 10,
	Max                                      = 11,
};

// Enum EndGame.EEndLookAtLayer
// NumValues: 0x0003
enum class EEndLookAtLayer : uint8
{
	Body                                     = 0,
	Head                                     = 1,
	EEndLookAtLayer_MAX                      = 2,
};

// Enum EndGame.EEndExtraActionLayer
// NumValues: 0x0005
enum class EEndExtraActionLayer : uint8
{
	HighPriority                             = 0,
	Default                                  = 1,
	LowPriority                              = 2,
	NonExtraAction                           = 3,
	EEndExtraActionLayer_MAX                 = 4,
};

// Enum EndGame.EEndAnimationType
// NumValues: 0x0005
enum class EEndAnimationType : uint8
{
	BodySequence                             = 0,
	BodyBlendSpace                           = 1,
	AdditiveSequence                         = 2,
	AdditiveBlendSpace                       = 3,
	EEndAnimationType_MAX                    = 4,
};

// Enum EndGame.EEndFootIKModifierType
// NumValues: 0x0005
enum class EEndFootIKModifierType : uint8
{
	None                                     = 0,
	ForceDisableFootIK                       = 1,
	HipControlOnly                           = 2,
	DisableHipControl                        = 3,
	EEndFootIKModifierType_MAX               = 4,
};

// Enum EndGame.EEndLookAtModifierType
// NumValues: 0x0007
enum class EEndLookAtModifierType : uint8
{
	None                                     = 0,
	ForceEnableLookAt                        = 1,
	ForceDisableLookAt                       = 2,
	HeadOnly                                 = 3,
	MeshSpace                                = 4,
	WeightBias                               = 5,
	Max                                      = 6,
};

// Enum EndGame.EEndRotationRateModifierType
// NumValues: 0x0003
enum class EEndRotationRateModifierType : uint8
{
	Field                                    = 0,
	Action                                   = 1,
	EEndRotationRateModifierType_MAX         = 2,
};

// Enum EndGame.EEndPlayRateModifierType
// NumValues: 0x0006
enum class EEndPlayRateModifierType : uint8
{
	Field                                    = 0,
	Battle                                   = 1,
	CharaSpec                                = 2,
	Notify                                   = 3,
	Debug                                    = 4,
	EEndPlayRateModifierType_MAX             = 5,
};

// Enum EndGame.EEndRootMotionModifierType
// NumValues: 0x000D
enum class EEndRootMotionModifierType : uint8
{
	None                                     = 0,
	FieldAction                              = 1,
	TalkControl                              = 2,
	BattleAction                             = 3,
	BattleMove                               = 4,
	BattleAbility                            = 5,
	CharaSpec                                = 6,
	Notify                                   = 7,
	FieldAI                                  = 8,
	Dash                                     = 9,
	MoveTo                                   = 10,
	Debug                                    = 11,
	EEndRootMotionModifierType_MAX           = 12,
};

// Enum EndGame.EEndAnimBehaviorMatchingType
// NumValues: 0x0005
enum class EEndAnimBehaviorMatchingType : uint8
{
	DeltaLocalSpaceRotationMax               = 0,
	DeltaLocalSpaceRotationAvg               = 1,
	DeltaLocalSpaceTranslationMax            = 2,
	DeltaLocalSpaceTranslationAvg            = 3,
	EEndAnimBehaviorMatchingType_MAX         = 4,
};

// Enum EndGame.EEndWalkRestriction
// NumValues: 0x0004
enum class EEndWalkRestriction : uint8
{
	None                                     = 0,
	LimitedRunning                           = 1,
	LimitedWalking                           = 2,
	EEndWalkRestriction_MAX                  = 3,
};

// Enum EndGame.EEndEmissiveCurveType
// NumValues: 0x0010
enum class EEndEmissiveCurveType : uint8
{
	Curve00                                  = 0,
	Curve01                                  = 1,
	Curve02                                  = 2,
	Curve03                                  = 3,
	Curve04                                  = 4,
	Curve05                                  = 5,
	Curve06                                  = 6,
	Curve07                                  = 7,
	Curve10                                  = 8,
	Curve11                                  = 9,
	Curve12                                  = 10,
	Curve13                                  = 11,
	Curve14                                  = 12,
	Curve15                                  = 13,
	Curve50                                  = 14,
	Max                                      = 15,
};

// Enum EndGame.EEndEmissiveModifierType
// NumValues: 0x0003
enum class EEndEmissiveModifierType : uint8
{
	Overlay                                  = 0,
	Scale                                    = 1,
	EEndEmissiveModifierType_MAX             = 2,
};

// Enum EndGame.EEndAnimBehaviorMode
// NumValues: 0x0004
enum class EEndAnimBehaviorMode : uint8
{
	Neutral                                  = 0,
	Battle                                   = 1,
	Caution                                  = 2,
	Max                                      = 3,
};

// Enum EndGame.EEndLocomotionAnim
// NumValues: 0x0043
enum class EEndLocomotionAnim : uint8
{
	IdleLoop                                 = 0,
	WalkStart                                = 1,
	WalkStart_90L                            = 2,
	WalkStart_90R                            = 3,
	WalkStart_180L                           = 4,
	WalkStart_180R                           = 5,
	WalkLoop                                 = 6,
	WalkTurn_180L                            = 7,
	WalkTurn_180R                            = 8,
	WalkEnd                                  = 9,
	WalkLeft90End                            = 10,
	WalkRight90End                           = 11,
	WalkLeft180End                           = 12,
	WalkRight180End                          = 13,
	WalkTurnEnd                              = 14,
	WalkBackStart                            = 15,
	WalkBackLoop                             = 16,
	WalkBackEnd                              = 17,
	WalkLeftStart                            = 18,
	WalkLeftLoop                             = 19,
	WalkLeftEnd                              = 20,
	WalkRightStart                           = 21,
	WalkRightLoop                            = 22,
	WalkRightEnd                             = 23,
	WalkForwardLeftLoop                      = 24,
	WalkForwardRightLoop                     = 25,
	WalkBackLeftLoop                         = 26,
	WalkBackRightLoop                        = 27,
	RunStart                                 = 28,
	RunStart_90L                             = 29,
	RunStart_90R                             = 30,
	RunStart_180L                            = 31,
	RunStart_180R                            = 32,
	RunLoop                                  = 33,
	RunTurn_180L                             = 34,
	RunTurn_180R                             = 35,
	RunEnd                                   = 36,
	RunLeft90End                             = 37,
	RunRight90End                            = 38,
	RunLeft180End                            = 39,
	RunRight180End                           = 40,
	RunTurnEnd                               = 41,
	DashStart                                = 42,
	DashStart_90L                            = 43,
	DashStart_90R                            = 44,
	DashStart_180L                           = 45,
	DashStart_180R                           = 46,
	DashLoop                                 = 47,
	DashEnd                                  = 48,
	DashToWalk                               = 49,
	Turn_0                                   = 50,
	Turn_90L                                 = 51,
	Turn_90R                                 = 52,
	Turn_180L                                = 53,
	Turn_180R                                = 54,
	IdleNeutralToBattle                      = 55,
	IdleBattleToNeutral                      = 56,
	RunNeutralToBattle                       = 57,
	RunBattleToNeutral                       = 58,
	IdleNeutralToCaution                     = 59,
	IdleCautionToNeutral                     = 60,
	FallLoop                                 = 61,
	FallEnd                                  = 62,
	BSWalkRunStart                           = 63,
	BSWalkRunLoop                            = 64,
	BSStrafingWalk                           = 65,
	Max                                      = 66,
};

// Enum EndGame.EEndLocomotionState
// NumValues: 0x0018
enum class EEndLocomotionState : uint8
{
	Idle                                     = 0,
	WalkStart                                = 1,
	Walk                                     = 2,
	WalkEnd                                  = 3,
	RunStart                                 = 4,
	Run                                      = 5,
	RunEnd                                   = 6,
	DashStart                                = 7,
	Dash                                     = 8,
	DashEnd                                  = 9,
	DashToWalk                               = 10,
	IdleTurn                                 = 11,
	WalkTurn                                 = 12,
	RunTurn                                  = 13,
	StrafingWalkStart                        = 14,
	StrafingWalk                             = 15,
	StrafingWalkEnd                          = 16,
	SwitchBehavior                           = 17,
	Fall                                     = 18,
	FallEnd                                  = 19,
	BSWalkRunStart                           = 20,
	BSWalkRun                                = 21,
	BSStrafingWalk                           = 22,
	Max                                      = 23,
};

// Enum EndGame.EEndAnimWalkType
// NumValues: 0x0006
enum class EEndAnimWalkType : uint8
{
	Idle                                     = 0,
	Walk                                     = 1,
	Run                                      = 2,
	Dash                                     = 3,
	Extra                                    = 4,
	EEndAnimWalkType_MAX                     = 5,
};

// Enum EndGame.EEndAnimDirection90
// NumValues: 0x0006
enum class EEndAnimDirection90 : uint8
{
	Forward                                  = 0,
	Left_90                                  = 1,
	Left_180                                 = 2,
	Right_90                                 = 3,
	Right_180                                = 4,
	EEndAnimDirection90_MAX                  = 5,
};

// Enum EndGame.EEndAnimDirection45
// NumValues: 0x000A
enum class EEndAnimDirection45 : uint8
{
	Forward                                  = 0,
	Left_45                                  = 1,
	Left_90                                  = 2,
	Left_135                                 = 3,
	Left_180                                 = 4,
	Right_45                                 = 5,
	Right_90                                 = 6,
	Right_135                                = 7,
	Right_180                                = 8,
	EEndAnimDirection45_MAX                  = 9,
};

// Enum EndGame.EEndAnimUpdatePriority
// NumValues: 0x0005
enum class EEndAnimUpdatePriority : uint8
{
	Highest                                  = 0,
	High                                     = 1,
	Default                                  = 2,
	Low                                      = 3,
	EEndAnimUpdatePriority_MAX               = 4,
};

// Enum EndGame.ESuspensionAxisType
// NumValues: 0x0004
enum class ESuspensionAxisType : uint8
{
	X                                        = 0,
	Y                                        = 1,
	Z                                        = 2,
	ESuspensionAxisType_MAX                  = 3,
};

// Enum EndGame.EBattleAbilityInterpolationType
// NumValues: 0x0003
enum class EBattleAbilityInterpolationType : uint8
{
	Liner                                    = 0,
	Focus                                    = 1,
	EBattleAbilityInterpolationType_MAX      = 2,
};

// Enum EndGame.EBattleAbilityRotateStartType
// NumValues: 0x0003
enum class EBattleAbilityRotateStartType : uint8
{
	Step                                     = 0,
	Inheritance                              = 1,
	EBattleAbilityRotateStartType_MAX        = 2,
};

// Enum EndGame.EBattleAbilityRotateNotifyState
// NumValues: 0x000A
enum class EBattleAbilityRotateNotifyState : uint8
{
	None                                     = 0,
	Swing                                    = 1,
	Rotate                                   = 2,
	UcpcSwing                                = 3,
	UcpcRotate                               = 4,
	TargetSwing                              = 5,
	TargetRotate                             = 6,
	TargetPointName                          = 7,
	TargetLocate                             = 8,
	EBattleAbilityRotateNotifyState_MAX      = 9,
};

// Enum EndGame.EAroundPointType
// NumValues: 0x0003
enum class EAroundPointType : uint8
{
	None                                     = 0,
	CenterParty                              = 1,
	EAroundPointType_MAX                     = 2,
};

// Enum EndGame.EFastDashGoToDistanceType
// NumValues: 0x0004
enum class EFastDashGoToDistanceType : uint8
{
	Short                                    = 0,
	Middle                                   = 1,
	Long                                     = 2,
	Max                                      = 3,
};

// Enum EndGame.EFastDashGoToPositionType
// NumValues: 0x0004
enum class EFastDashGoToPositionType : uint8
{
	Front                                    = 0,
	LeftSide                                 = 1,
	RightSide                                = 2,
	Max                                      = 3,
};

// Enum EndGame.EEndWeakConditionEnableOption
// NumValues: 0x0003
enum class EEndWeakConditionEnableOption : uint8
{
	ParameterReset                           = 0,
	ParameterKeep                            = 1,
	EEndWeakConditionEnableOption_MAX        = 2,
};

// Enum EndGame.EEndPartsRepairConditionType
// NumValues: 0x0003
enum class EEndPartsRepairConditionType : uint8
{
	Default                                  = 0,
	UnbrokenPartsFullRecovery                = 1,
	EEndPartsRepairConditionType_MAX         = 2,
};

// Enum EndGame.EEndWeakConditionEnable
// NumValues: 0x0003
enum class EEndWeakConditionEnable : uint8
{
	Disable                                  = 0,
	Enable                                   = 1,
	EEndWeakConditionEnable_MAX              = 2,
};

// Enum EndGame.EEndDoOnceOutCode
// NumValues: 0x0004
enum class EEndDoOnceOutCode : uint8
{
	First                                    = 0,
	Other                                    = 1,
	Reset                                    = 2,
	EEndDoOnceOutCode_MAX                    = 3,
};

// Enum EndGame.EEndDoOnceCode
// NumValues: 0x0003
enum class EEndDoOnceCode : uint8
{
	Execute                                  = 0,
	Reset                                    = 1,
	EEndDoOnceCode_MAX                       = 2,
};

// Enum EndGame.ETriggerWeakRemakeType
// NumValues: 0x0005
enum class ETriggerWeakRemakeType : uint8
{
	Remake                                   = 0,
	Retain                                   = 1,
	ResetCurrentOnly                         = 2,
	Retain2                                  = 3,
	ETriggerWeakRemakeType_MAX               = 4,
};

// Enum EndGame.ETriggerBoxCondition
// NumValues: 0x0003
enum class ETriggerBoxCondition : uint8
{
	OutSide                                  = 0,
	InSide                                   = 1,
	ETriggerBoxCondition_MAX                 = 2,
};

// Enum EndGame.EEndBattleAIActionAbility
// NumValues: 0x0017
enum class EEndBattleAIActionAbility : uint8
{
	eCharaSpec                               = 0,
	eActionName                              = 1,
	eInID                                    = 2,
	eInTime                                  = 3,
	eInTimeout                               = 4,
	eInATB                                   = 5,
	eInRandomATB                             = 6,
	eInMinRange                              = 7,
	eInMaxRange                              = 8,
	eInActionMin                             = 9,
	eInActionMax                             = 10,
	eInActionHeightMin                       = 11,
	eInActionHeightMax                       = 12,
	eInViewRange                             = 13,
	eViewReverse                             = 14,
	eInDelayMove                             = 15,
	eInDelayAbility                          = 16,
	eInNeedMove                              = 17,
	eInNeedBetterMove                        = 18,
	eInCancelLostTarget                      = 19,
	eOverrideLeftAbility                     = 20,
	eOverrideRightAbility                    = 21,
	EEndBattleAIActionAbility_MAX            = 22,
};

// Enum EndGame.EBattleAISetTargetType
// NumValues: 0x0004
enum class EBattleAISetTargetType : uint8
{
	UCPC                                     = 0,
	FarPC                                    = 1,
	NearPC                                   = 2,
	EBattleAISetTargetType_MAX               = 3,
};

// Enum EndGame.EBattleMessageTarget
// NumValues: 0x0008
enum class EBattleMessageTarget : uint8
{
	eAll                                     = 0,
	eAIPC                                    = 1,
	eEnemy                                   = 2,
	eCloud                                   = 3,
	eBarret                                  = 4,
	eTifa                                    = 5,
	eAerith                                  = 6,
	EBattleMessageTarget_MAX                 = 7,
};

// Enum EndGame.EBattleAIInfoString
// NumValues: 0x000E
enum class EBattleAIInfoString : uint8
{
	eDodgeMotion                             = 0,
	eFearMotion                              = 1,
	eTriggerAction0                          = 2,
	eOccurAction0                            = 3,
	eTriggerAction1                          = 4,
	eOccurAction1                            = 5,
	eTriggerAction2                          = 6,
	eOccurAction2                            = 7,
	eTriggerAction3                          = 8,
	eOccurAction3                            = 9,
	eDodgeMotionL                            = 10,
	eDodgeMotionR                            = 11,
	eMAX                                     = 12,
	EBattleAIInfoString_MAX                  = 13,
};

// Enum EndGame.EBattleAIInfoParam
// NumValues: 0x0009
enum class EBattleAIInfoParam : uint8
{
	ePositionAngle                           = 0,
	eLeaveRunDelay                           = 1,
	eLookChangeDistance                      = 2,
	eLookChangeYaw                           = 3,
	eLookChangePitch                         = 4,
	eLookChangeDelayTime                     = 5,
	eMoveThreshold                           = 6,
	eMAX                                     = 7,
	EBattleAIInfoParam_MAX                   = 8,
};

// Enum EndGame.EBattleAIInfoValue
// NumValues: 0x000B
enum class EBattleAIInfoValue : uint8
{
	eDodgeIntervalCount                      = 0,
	eDodgePercent                            = 1,
	eFearIntervalCount                       = 2,
	eFearPercent                             = 3,
	eTriggerCount0                           = 4,
	eTriggerCount1                           = 5,
	eTriggerCount2                           = 6,
	eTriggerCount3                           = 7,
	eLookChange                              = 8,
	eMAX                                     = 9,
	EBattleAIInfoValue_MAX                   = 10,
};

// Enum EndGame.EBattleAIInfoFlag
// NumValues: 0x000C
enum class EBattleAIInfoFlag : uint8
{
	eCanWall                                 = 0,
	eCanCeil                                 = 1,
	eCanPositionAngle                        = 2,
	eLookAtOther                             = 3,
	eBlockOrder                              = 4,
	eBlockRequest                            = 5,
	eAccept                                  = 6,
	eLookAtActionTarget                      = 7,
	eCanDodge                                = 8,
	eCanFear                                 = 9,
	eMAX                                     = 10,
	EBattleAIInfoFlag_MAX                    = 11,
};

// Enum EndGame.ESummonAbilityInfluenceCenter
// NumValues: 0x0004
enum class ESummonAbilityInfluenceCenter : uint8
{
	eNone                                    = 0,
	eSelf                                    = 1,
	eTarget                                  = 2,
	ESummonAbilityInfluenceCenter_MAX        = 3,
};

// Enum EndGame.ESummonAbilityExecuteState
// NumValues: 0x0005
enum class ESummonAbilityExecuteState : uint8
{
	eNone                                    = 0,
	eRequesting                              = 1,
	eInAction                                = 2,
	eCompleted                               = 3,
	ESummonAbilityExecuteState_MAX           = 4,
};

// Enum EndGame.ESummonBattleBehavior
// NumValues: 0x0009
enum class ESummonBattleBehavior : uint8
{
	eAppear                                  = 0,
	eReadyToFight                            = 1,
	eBattleLoop                              = 2,
	eCommandExecute                          = 3,
	eHide                                    = 4,
	eResetLocation                           = 5,
	eReturn                                  = 6,
	eDoNothing                               = 7,
	ESummonBattleBehavior_MAX                = 8,
};

// Enum EndGame.EBattleAIProgress
// NumValues: 0x0004
enum class EBattleAIProgress : uint8
{
	eBeforeOnPrepare                         = 0,
	eBeforeOnFirst                           = 1,
	eUpdate                                  = 2,
	EBattleAIProgress_MAX                    = 3,
};

// Enum EndGame.EEndAiBattleSceneFlag
// NumValues: 0x0003
enum class EEndAiBattleSceneFlag : uint8
{
	ExsistCeil                               = 0,
	CanNotFly                                = 1,
	EEndAiBattleSceneFlag_MAX                = 2,
};

// Enum EndGame.EBattleInterceptAbility
// NumValues: 0x0004
enum class EBattleInterceptAbility : uint8
{
	eNone                                    = 0,
	eEnd                                     = 1,
	eOverride                                = 2,
	EBattleInterceptAbility_MAX              = 3,
};

// Enum EndGame.EBattleOrderRule
// NumValues: 0x0008
enum class EBattleOrderRule : uint8
{
	eNone                                    = 0,
	eRandom                                  = 1,
	eNear                                    = 2,
	eFar                                     = 3,
	eCLOUDOnly                               = 4,
	eBARRETOnly                              = 5,
	eTIFAOnly                                = 6,
	EBattleOrderRule_MAX                     = 7,
};

// Enum EndGame.EBattleAirMoveType
// NumValues: 0x0008
enum class EBattleAirMoveType : uint8
{
	eBAM_CONFRONT                            = 0,
	eBAM_CHASE                               = 1,
	eBAM_POINT                               = 2,
	eBAM_AROUND                              = 3,
	eBAM_FUNNEL                              = 4,
	eBAM_BOIDS                               = 5,
	eBAM_SPLINE                              = 6,
	eBAM_MAX                                 = 7,
};

// Enum EndGame.EBattleAroundDirection
// NumValues: 0x0004
enum class EBattleAroundDirection : uint8
{
	eNone                                    = 0,
	eLeft                                    = 1,
	eRight                                   = 2,
	EBattleAroundDirection_MAX               = 3,
};

// Enum EndGame.EBattleMoveType
// NumValues: 0x0016
enum class EBattleMoveType : uint8
{
	eBM_NONE                                 = 0,
	eBM_CONFRONT                             = 1,
	eBM_CONFRONT_AIPC                        = 2,
	eBM_CONFRONT_AIPC_RUN                    = 3,
	eBM_ABILITY                              = 4,
	eBM_APPROACH                             = 5,
	eBM_LEAVE                                = 6,
	eBM_LEAVE_RUN                            = 7,
	eBM_AROUND_L                             = 8,
	eBM_AROUND_R                             = 9,
	eBM_PARTY                                = 10,
	eBM_TO_SAFE_AREA                         = 11,
	eBM_STAY                                 = 12,
	eBM_AVOID_DANGER                         = 13,
	eBM_FLEE                                 = 14,
	eBM_HOME_POSITION                        = 15,
	eBM_HOME_WANDERING                       = 16,
	eBM_ACTOR_CHASE                          = 17,
	eBM_SPLINE                               = 18,
	eBM_SEARCH                               = 19,
	eBM_ESCAPE                               = 20,
	eBM_MAX                                  = 21,
};

// Enum EndGame.EEndAiMathBinCmp
// NumValues: 0x0003
enum class EEndAiMathBinCmp : uint8
{
	BinEqual                                 = 0,
	BinNotEqual                              = 1,
	EEndAiMathBinCmp_MAX                     = 2,
};

// Enum EndGame.EEndAiEscapeState
// NumValues: 0x0005
enum class EEndAiEscapeState : uint8
{
	Aggressive                               = 0,
	EscapeBegin                              = 1,
	EscapeWait                               = 2,
	EscapeEnd                                = 3,
	EEndAiEscapeState_MAX                    = 4,
};

// Enum EndGame.EEndAiMathCmp
// NumValues: 0x0007
enum class EEndAiMathCmp : uint8
{
	Equal                                    = 0,
	Less                                     = 1,
	LessEqual                                = 2,
	Greater                                  = 3,
	GreaterEqual                             = 4,
	NotEqual                                 = 5,
	EEndAiMathCmp_MAX                        = 6,
};

// Enum EndGame.EEndAiAbilitySuspendTiming
// NumValues: 0x0004
enum class EEndAiAbilitySuspendTiming : uint8
{
	PreparingRange                           = 0,
	SettingRange                             = 1,
	PlayingMotion                            = 2,
	EEndAiAbilitySuspendTiming_MAX           = 3,
};

// Enum EndGame.EEndAiAbilitySuspendFactor
// NumValues: 0x0009
enum class EEndAiAbilitySuspendFactor : uint8
{
	TimeOut                                  = 0,
	DamageReaction                           = 1,
	ClearAction                              = 2,
	SuspendAction                            = 3,
	Burst                                    = 4,
	Weak                                     = 5,
	TargetLost                               = 6,
	Sleep                                    = 7,
	EEndAiAbilitySuspendFactor_MAX           = 8,
};

// Enum EndGame.EEndAiBattleSecondRole
// NumValues: 0x0006
enum class EEndAiBattleSecondRole : uint8
{
	Hp_50                                    = 0,
	Hp_40                                    = 1,
	Hp_30                                    = 2,
	Hp_20                                    = 3,
	Hp_10                                    = 4,
	Hp_MAX                                   = 5,
};

// Enum EndGame.EEndAiBattleTargetType
// NumValues: 0x0008
enum class EEndAiBattleTargetType : uint8
{
	Own                                      = 0,
	Target                                   = 1,
	Party                                    = 2,
	Enemy                                    = 3,
	Guest                                    = 4,
	Ucpc                                     = 5,
	All                                      = 6,
	EEndAiBattleTargetType_MAX               = 7,
};

// Enum EndGame.EArmPhase
// NumValues: 0x000E
enum class EArmPhase : uint8
{
	eIdle                                    = 0,
	eAroundIdle                              = 1,
	eSideAttack1                             = 2,
	eSideAttack2                             = 3,
	eAroundAttack                            = 4,
	eTwin                                    = 5,
	eEjectMove                               = 6,
	eDockingMove                             = 7,
	eRocketPunch                             = 8,
	eCatch                                   = 9,
	eThrow                                   = 10,
	ePoint                                   = 11,
	eFreeze                                  = 12,
	EArmPhase_MAX                            = 13,
};

// Enum EndGame.EEndBattleAIEB0002ControllerArmType
// NumValues: 0x0003
enum class EEndBattleAIEB0002ControllerArmType : uint8
{
	LeftArm                                  = 0,
	RightArm                                 = 1,
	EEndBattleAIEB0002ControllerArmType_MAX  = 2,
};

// Enum EndGame.ERideMode
// NumValues: 0x0003
enum class ERideMode : uint8
{
	Ride                                     = 0,
	GetOff                                   = 1,
	ERideMode_MAX                            = 2,
};

// Enum EndGame.ERufusGoToDistanceType
// NumValues: 0x0004
enum class ERufusGoToDistanceType : uint8
{
	Short                                    = 0,
	Middle                                   = 1,
	Long                                     = 2,
	Max                                      = 3,
};

// Enum EndGame.ERufusGoToPositionType
// NumValues: 0x0004
enum class ERufusGoToPositionType : uint8
{
	Front                                    = 0,
	LeftSide                                 = 1,
	RightSide                                = 2,
	Max                                      = 3,
};

// Enum EndGame.ERufusLinkMode
// NumValues: 0x0003
enum class ERufusLinkMode : uint8
{
	LinkOff                                  = 0,
	LinkOn                                   = 1,
	ERufusLinkMode_MAX                       = 2,
};

// Enum EndGame.ERufusGunMode
// NumValues: 0x0003
enum class ERufusGunMode : uint8
{
	ShotGun                                  = 0,
	TwoHandguns                              = 1,
	ERufusGunMode_MAX                        = 2,
};

// Enum EndGame.EDarknationLinkMode
// NumValues: 0x0003
enum class EDarknationLinkMode : uint8
{
	LinkOff                                  = 0,
	LinkOn                                   = 1,
	EDarknationLinkMode_MAX                  = 2,
};

// Enum EndGame.EPraecoMiniGoToMode
// NumValues: 0x0003
enum class EPraecoMiniGoToMode : uint8
{
	Owner                                    = 0,
	Target                                   = 1,
	Max                                      = 2,
};

// Enum EndGame.EPraecoMiniGoToDistanceType
// NumValues: 0x0004
enum class EPraecoMiniGoToDistanceType : uint8
{
	Short                                    = 0,
	Middle                                   = 1,
	Long                                     = 2,
	Max                                      = 3,
};

// Enum EndGame.EPraecoMiniGoToPositionType
// NumValues: 0x0005
enum class EPraecoMiniGoToPositionType : uint8
{
	Front                                    = 0,
	LeftSide                                 = 1,
	RightSide                                = 2,
	Back                                     = 3,
	Max                                      = 4,
};

// Enum EndGame.ELineWarpCalcPattern
// NumValues: 0x0003
enum class ELineWarpCalcPattern : uint8
{
	None                                     = 0,
	UpperLocation                            = 1,
	Max                                      = 2,
};

// Enum EndGame.ELineWarpType
// NumValues: 0x0007
enum class ELineWarpType : uint8
{
	None                                     = 0,
	Approach                                 = 1,
	Escape                                   = 2,
	Straight                                 = 3,
	Drop                                     = 4,
	Point                                    = 5,
	Max                                      = 6,
};

// Enum EndGame.EEndLinkAbilityType
// NumValues: 0x0006
enum class EEndLinkAbilityType : uint8
{
	None                                     = 0,
	Nomal                                    = 1,
	Sync                                     = 2,
	Protect                                  = 3,
	Protect_Aerial                           = 4,
	EEndLinkAbilityType_MAX                  = 5,
};

// Enum EndGame.EAIPCTerrainSensorStatus
// NumValues: 0x0004
enum class EAIPCTerrainSensorStatus : uint8
{
	Normal                                   = 0,
	NearWall                                 = 1,
	Narrow                                   = 2,
	EAIPCTerrainSensorStatus_MAX             = 3,
};

// Enum EndGame.EAIPCGuardType
// NumValues: 0x0004
enum class EAIPCGuardType : uint8
{
	None                                     = 0,
	Normal                                   = 1,
	Concentrate                              = 2,
	EAIPCGuardType_MAX                       = 3,
};

// Enum EndGame.EAIPCTargetLocationType
// NumValues: 0x0007
enum class EAIPCTargetLocationType : uint8
{
	TargetCursor                             = 0,
	TargetApproach                           = 1,
	CommandTargetCursor                      = 2,
	CommandTargetApproach                    = 3,
	CoverTargetCursor                        = 4,
	CoverTargetApproach                      = 5,
	EAIPCTargetLocationType_MAX              = 6,
};

// Enum EndGame.EAIPCTargetAvailableStatus
// NumValues: 0x0005
enum class EAIPCTargetAvailableStatus : uint8
{
	Available                                = 0,
	Sleep                                    = 1,
	DefenceStatus                            = 2,
	FarDefenceActor                          = 3,
	EAIPCTargetAvailableStatus_MAX           = 4,
};

// Enum EndGame.EAIPCRecognitionVolumeType
// NumValues: 0x0004
enum class EAIPCRecognitionVolumeType : uint8
{
	eCombatZone                              = 0,
	eInaccessibleZone                        = 1,
	eStaticDangerWarning                     = 2,
	EAIPCRecognitionVolumeType_MAX           = 3,
};

// Enum EndGame.EAIPCAttackType
// NumValues: 0x0003
enum class EAIPCAttackType : uint8
{
	eSingle                                  = 0,
	eContinue                                = 1,
	EAIPCAttackType_MAX                      = 2,
};

// Enum EndGame.EAIPCBattleState
// NumValues: 0x0005
enum class EAIPCBattleState : uint8
{
	eTargetSearch                            = 0,
	eAttack                                  = 1,
	eCaution                                 = 2,
	eMax                                     = 3,
	EAIPCBattleState_MAX                     = 4,
};

// Enum EndGame.EAIPCBattleBehavior
// NumValues: 0x0016
enum class EAIPCBattleBehavior : uint8
{
	ePlayerControl                           = 0,
	eGuard                                   = 1,
	eBackToBattleArea                        = 2,
	eCommandExecute                          = 3,
	eForceMoveTo                             = 4,
	eToSafeArea                              = 5,
	eTakeCover                               = 6,
	eConfrontIdle                            = 7,
	eAvoidDanger                             = 8,
	eAvoidDamage                             = 9,
	eStandbyIdle                             = 10,
	eBattleLoop                              = 11,
	eEscaping                                = 12,
	eMoveBattleArea                          = 13,
	eNotInBattle                             = 14,
	eConcentrateGuard                        = 15,
	eExecuteAbility                          = 16,
	eStandbyW2A                              = 17,
	eMeleeAttack                             = 18,
	eWait                                    = 19,
	eMax                                     = 20,
	EAIPCBattleBehavior_MAX                  = 21,
};

// Enum EndGame.EBehaviorRequest
// NumValues: 0x0010
enum class EBehaviorRequest : uint8
{
	eGuard                                   = 0,
	eBackToBattleArea                        = 1,
	eCommandExecute                          = 2,
	eExecuteAbility                          = 3,
	eForceMoveTo                             = 4,
	eToSafeArea                              = 5,
	eTakeCover                               = 6,
	eAvoidDanger                             = 7,
	eAvoidDamage                             = 8,
	eConfrontIdle                            = 9,
	eStandbyIdle                             = 10,
	eStandbyW2A                              = 11,
	eMeleeAttack                             = 12,
	eWait                                    = 13,
	eMax                                     = 14,
	EBehaviorRequest_MAX                     = 15,
};

// Enum EndGame.EEndBattleAIDangerAreaType
// NumValues: 0x0004
enum class EEndBattleAIDangerAreaType : uint8
{
	eNone                                    = 0,
	eCircle                                  = 1,
	eRectangle                               = 2,
	EEndBattleAIDangerAreaType_MAX           = 3,
};

// Enum EndGame.ETargetChoosingSort
// NumValues: 0x0006
enum class ETargetChoosingSort : uint8
{
	eCloserToMyself                          = 0,
	eCloserToLeader                          = 1,
	eInHigherLocation                        = 2,
	eLowerHP                                 = 3,
	eScore                                   = 4,
	ETargetChoosingSort_MAX                  = 5,
};

// Enum EndGame.ETargetChoosingTag
// NumValues: 0x000A
enum class ETargetChoosingTag : uint8
{
	eSameAsLeader                            = 0,
	eCurrentOne                              = 1,
	eWallClimber                             = 2,
	eOneWhoTargetLeader                      = 3,
	eOneWhoTargetMe                          = 4,
	eWhoInBurst                              = 5,
	eHasLowestHP                             = 6,
	eAssignedTarget                          = 7,
	eUnassignedTarget                        = 8,
	ETargetChoosingTag_MAX                   = 9,
};

// Enum EndGame.EConfrontType
// NumValues: 0x000A
enum class EConfrontType : uint8
{
	COMBAT                                   = 0,
	CAUTION                                  = 1,
	COMMAND                                  = 2,
	STANDBY                                  = 3,
	ABILITY                                  = 4,
	LINK_ABILITY                             = 5,
	WRAPAROUND                               = 6,
	COMMAND_FALLBACK                         = 7,
	COMMAND_TELEPORT                         = 8,
	EConfrontType_MAX                        = 9,
};

// Enum EndGame.EGuestAerithState
// NumValues: 0x0008
enum class EGuestAerithState : uint8
{
	Hide                                     = 0,
	Warning                                  = 1,
	Anger                                    = 2,
	Worry                                    = 3,
	Cheering                                 = 4,
	Encouragment                             = 5,
	Idle                                     = 6,
	MAX                                      = 7,
};

// Enum EndGame.EndBattleCameraInputOffsetType
// NumValues: 0x0004
enum class EndBattleCameraInputOffsetType : uint8
{
	None                                     = 0,
	Slide                                    = 1,
	Swing                                    = 2,
	EndBattleCameraInputOffsetType_MAX       = 3,
};

// Enum EndGame.EEndBattleCameraEyeToAimTargetRotateType
// NumValues: 0x0004
enum class EEndBattleCameraEyeToAimTargetRotateType : uint8
{
	AlwaysRotate                             = 0,
	FixWithRootRotate                        = 1,
	FixWithoutRotate                         = 2,
	EEndBattleCameraEyeToAimTargetRotateType_MAX = 3,
};

// Enum EndGame.EEndBattleCameraRelativeLocationRotateType
// NumValues: 0x0004
enum class EEndBattleCameraRelativeLocationRotateType : uint8
{
	AlwaysRotate                             = 0,
	FixWithRotate                            = 1,
	FixWithoutRotate                         = 2,
	EEndBattleCameraRelativeLocationRotateType_MAX = 3,
};

// Enum EndGame.EEndBattleCameraTargetType
// NumValues: 0x0019
enum class EEndBattleCameraTargetType : uint8
{
	None                                     = 0,
	OwnerMesh                                = 1,
	TargetMesh                               = 2,
	PlayerLeaderMesh                         = 3,
	OwnerActor                               = 4,
	TargetActor                              = 5,
	PlayerLeaderActor                        = 6,
	DamageSourceGenerated                    = 7,
	DamageSourceHit                          = 8,
	AimPoint                                 = 9,
	WorldOrigin                              = 10,
	OwnerLatestPositionHit                   = 11,
	TargetLatestPositionHit                  = 12,
	PlayerLeaderLatestPositionHit            = 13,
	FieldCamera                              = 14,
	SummonMesh                               = 15,
	SummonActor                              = 16,
	ActorNameMesh                            = 17,
	ActorNameActor                           = 18,
	CharaIDMesh                              = 19,
	CharaIDActor                             = 20,
	TargetPoint                              = 21,
	DamageSourceID                           = 22,
	TargetLockPos                            = 23,
	EEndBattleCameraTargetType_MAX           = 24,
};

// Enum EndGame.EEndBattleYuffieAttributeBuffType
// NumValues: 0x0006
enum class EEndBattleYuffieAttributeBuffType : uint8
{
	None                                     = 0,
	Fire                                     = 1,
	Ice                                      = 2,
	Thunder                                  = 3,
	Wind                                     = 4,
	MAX                                      = 5,
};

// Enum EndGame.EBattleSensorShapeType
// NumValues: 0x0004
enum class EBattleSensorShapeType : uint8
{
	None                                     = 0,
	Fan                                      = 1,
	Circle                                   = 2,
	EBattleSensorShapeType_MAX               = 3,
};

// Enum EndGame.GetOffsetTransform
// NumValues: 0x0003
enum class EGetOffsetTransform : uint8
{
	Stay                                     = 0,
	ToOrigin                                 = 1,
	GetOffsetTransform_MAX                   = 2,
};

// Enum EndGame.EEndAIBranchBit
// NumValues: 0x0003
enum class EEndAIBranchBit : uint8
{
	CmpTrue                                  = 0,
	CmpFalse                                 = 1,
	EEndAIBranchBit_MAX                      = 2,
};

// Enum EndGame.EEndAIBranch4Other
// NumValues: 0x0006
enum class EEndAIBranch4Other : uint8
{
	Case1                                    = 0,
	Case2                                    = 1,
	Case3                                    = 2,
	Case4                                    = 3,
	Other                                    = 4,
	EEndAIBranch4Other_MAX                   = 5,
};

// Enum EndGame.EEndAIBranch3Other
// NumValues: 0x0005
enum class EEndAIBranch3Other : uint8
{
	Case1                                    = 0,
	Case2                                    = 1,
	Case3                                    = 2,
	Other                                    = 3,
	EEndAIBranch3Other_MAX                   = 4,
};

// Enum EndGame.EEndAIBranch2Other
// NumValues: 0x0004
enum class EEndAIBranch2Other : uint8
{
	Case1                                    = 0,
	Case2                                    = 1,
	Other                                    = 2,
	EEndAIBranch2Other_MAX                   = 3,
};

// Enum EndGame.EEndAIBranch8
// NumValues: 0x0009
enum class EEndAIBranch8 : uint8
{
	Case1                                    = 0,
	Case2                                    = 1,
	Case3                                    = 2,
	Case4                                    = 3,
	Case5                                    = 4,
	Case6                                    = 5,
	Case7                                    = 6,
	Case8                                    = 7,
	EEndAIBranch8_MAX                        = 8,
};

// Enum EndGame.EEndAIBranch7
// NumValues: 0x0008
enum class EEndAIBranch7 : uint8
{
	Case1                                    = 0,
	Case2                                    = 1,
	Case3                                    = 2,
	Case4                                    = 3,
	Case5                                    = 4,
	Case6                                    = 5,
	Case7                                    = 6,
	EEndAIBranch7_MAX                        = 7,
};

// Enum EndGame.EEndAIBranch6
// NumValues: 0x0007
enum class EEndAIBranch6 : uint8
{
	Case1                                    = 0,
	Case2                                    = 1,
	Case3                                    = 2,
	Case4                                    = 3,
	Case5                                    = 4,
	Case6                                    = 5,
	EEndAIBranch6_MAX                        = 6,
};

// Enum EndGame.EEndAIBranch5
// NumValues: 0x0006
enum class EEndAIBranch5 : uint8
{
	Case1                                    = 0,
	Case2                                    = 1,
	Case3                                    = 2,
	Case4                                    = 3,
	Case5                                    = 4,
	EEndAIBranch5_MAX                        = 5,
};

// Enum EndGame.EEndAIBranch4
// NumValues: 0x0005
enum class EEndAIBranch4 : uint8
{
	Case1                                    = 0,
	Case2                                    = 1,
	Case3                                    = 2,
	Case4                                    = 3,
	EEndAIBranch4_MAX                        = 4,
};

// Enum EndGame.EEndAIBranch3
// NumValues: 0x0004
enum class EEndAIBranch3 : uint8
{
	Case1                                    = 0,
	Case2                                    = 1,
	Case3                                    = 2,
	EEndAIBranch3_MAX                        = 3,
};

// Enum EndGame.EEndAIBranch2
// NumValues: 0x0003
enum class EEndAIBranch2 : uint8
{
	Case1                                    = 0,
	Case2                                    = 1,
	EEndAIBranch2_MAX                        = 2,
};

// Enum EndGame.EEndBattleAttackDirectionType
// NumValues: 0x0007
enum class EEndBattleAttackDirectionType : uint8
{
	Front                                    = 0,
	Right                                    = 1,
	Left                                     = 2,
	Above                                    = 3,
	Below                                    = 4,
	Special                                  = 5,
	EEndBattleAttackDirectionType_MAX        = 6,
};

// Enum EndGame.EEndBattleReactionInfluenceType
// NumValues: 0x0005
enum class EEndBattleReactionInfluenceType : uint8
{
	Instant                                  = 0,
	RadiusShort                              = 1,
	RadiusMiddle                             = 2,
	RadiusLong                               = 3,
	EEndBattleReactionInfluenceType_MAX      = 4,
};

// Enum EndGame.EEndBattlePhase
// NumValues: 0x0009
enum class EEndBattlePhase : uint8
{
	Phase01                                  = 0,
	Phase02                                  = 1,
	Phase03                                  = 2,
	Phase04                                  = 3,
	Phase05                                  = 4,
	Phase06                                  = 5,
	Phase07                                  = 6,
	Phase08                                  = 7,
	EEndBattlePhase_MAX                      = 8,
};

// Enum EndGame.EEndBattleSummonTrigger
// NumValues: 0x0008
enum class EEndBattleSummonTrigger : uint8
{
	BurstChance                              = 0,
	Burst                                    = 1,
	BurstHit                                 = 2,
	DyingDamageTaken                         = 3,
	MemberDie                                = 4,
	BluePrintEvent                           = 5,
	Debug                                    = 6,
	EEndBattleSummonTrigger_MAX              = 7,
};

// Enum EndGame.EEndBattleSummonType
// NumValues: 0x000C
enum class EEndBattleSummonType : uint8
{
	Ifrit                                    = 0,
	Chocobo                                  = 1,
	Shiva                                    = 2,
	DebuChocobo                              = 3,
	Leviathan                                = 4,
	Bahamut                                  = 5,
	Carbuncle                                = 12,
	Cactuar                                  = 13,
	Hinachocobo                              = 14,
	Ramuh                                    = 15,
	None                                     = 31,
	EEndBattleSummonType_MAX                 = 32,
};

// Enum EndGame.EEndBattleSummonAppearFXType
// NumValues: 0x0004
enum class EEndBattleSummonAppearFXType : uint8
{
	Small                                    = 0,
	Medium                                   = 1,
	Large                                    = 2,
	EEndBattleSummonAppearFXType_MAX         = 3,
};

// Enum EndGame.ESummonPointUsageFlag
// NumValues: 0x001B
enum class ESummonPointUsageFlag : uint8
{
	eSpawn_All                               = 0,
	eSpawn_Ifrit                             = 1,
	eSpawn_Chocobo                           = 2,
	eSpawn_Shiva                             = 3,
	eSpawn_Leviathan                         = 4,
	eSpawn_Bahamut                           = 5,
	eSpawn_DebuChoco                         = 6,
	eSpawn_Carbuncle                         = 7,
	eSpawn_Cactuar                           = 8,
	eSpawn_Hinachocobo                       = 9,
	eSpawn_Ramuh                             = 10,
	eWarp_Ifrit                              = 11,
	eWarp_Chocobo                            = 12,
	eWarp_Shiva                              = 13,
	eWarp_Leviathan                          = 14,
	eWarp_Bahamut                            = 15,
	eWarp_DebuChoco                          = 16,
	eWarp_Carbuncle                          = 17,
	eWarp_Cactuar                            = 18,
	eWarp_Hinachocobo                        = 19,
	eWarp_Ramuh                              = 20,
	eOmen                                    = 21,
	eCutScene                                = 22,
	eResetLocation                           = 23,
	ebLevelCutScene                          = 24,
	eMax                                     = 25,
	ESummonPointUsageFlag_MAX                = 26,
};

// Enum EndGame.EEndBattleCharaAttachCharacterType
// NumValues: 0x0006
enum class EEndBattleCharaAttachCharacterType : uint8
{
	None                                     = 0,
	LeftArm                                  = 1,
	RightArm                                 = 2,
	BackWeaponTop                            = 3,
	BackWeaponUnder                          = 4,
	EEndBattleCharaAttachCharacterType_MAX   = 5,
};

// Enum EndGame.EEndBattleDamageSourceDisableBackgroundType
// NumValues: 0x0006
enum class EEndBattleDamageSourceDisableBackgroundType : uint8
{
	All                                      = 0,
	NoHit                                    = 1,
	WallOnly                                 = 2,
	TerrainOnly                              = 3,
	AllWithCharaWall                         = 4,
	EEndBattleDamageSourceDisableBackgroundType_MAX = 5,
};

// Enum EndGame.EEndBattleWeakConditionType
// NumValues: 0x000F
enum class EEndBattleWeakConditionType : uint8
{
	Anything                                 = 0,
	Fire                                     = 1,
	Ice                                      = 2,
	Thunder                                  = 3,
	Wind                                     = 4,
	Earth                                    = 5,
	Holy                                     = 6,
	Dark                                     = 7,
	Stun                                     = 8,
	Physics                                  = 9,
	Magic                                    = 10,
	MagicNoElement                           = 11,
	AnythingEx                               = 12,
	HealDamage                               = 13,
	Max                                      = 14,
};

// Enum EndGame.EndBattleSetNormalAttackCountCondition
// NumValues: 0x0005
enum class EndBattleSetNormalAttackCountCondition : uint8
{
	None                                     = 0,
	TifaBuff                                 = 1,
	CloudUniqueAbilityMode                   = 2,
	LinkCommandMode                          = 3,
	EndBattleSetNormalAttackCountCondition_MAX = 4,
};

// Enum EndGame.EEndBattleCharaCategoryType
// NumValues: 0x0005
enum class EEndBattleCharaCategoryType : uint8
{
	Normal                                   = 0,
	Shinra                                   = 1,
	Strong                                   = 2,
	ShinraStrong                             = 3,
	EEndBattleCharaCategoryType_MAX          = 4,
};

// Enum EndGame.EEndTakeDamageDirectionType
// NumValues: 0x0005
enum class EEndTakeDamageDirectionType : uint8
{
	None                                     = 0,
	GiveCharacter                            = 1,
	HitPosition                              = 2,
	GiveCharacterReverse                     = 3,
	EEndTakeDamageDirectionType_MAX          = 4,
};

// Enum EndGame.EEndBattleCameraSLerpType
// NumValues: 0x0004
enum class EEndBattleCameraSLerpType : uint8
{
	None                                     = 0,
	Satellite                                = 1,
	Cylinder                                 = 2,
	EEndBattleCameraSLerpType_MAX            = 3,
};

// Enum EndGame.EEndBattleCameraChangeTimingType
// NumValues: 0x0007
enum class EEndBattleCameraChangeTimingType : uint8
{
	None                                     = 0,
	DamageSourceGenerated                    = 1,
	DamageSourceHit                          = 2,
	Branch0                                  = 3,
	Branch1                                  = 4,
	SummonSpawned                            = 5,
	MAX                                      = 6,
};

// Enum EndGame.EEndBattleEasySpawnEnableRagdollType
// NumValues: 0x0005
enum class EEndBattleEasySpawnEnableRagdollType : uint8
{
	Deaded                                   = 0,
	Spawned                                  = 1,
	MovedToSocket                            = 2,
	None                                     = 3,
	EEndBattleEasySpawnEnableRagdollType_MAX = 4,
};

// Enum EndGame.EEndBattleStatusChangeType
// NumValues: 0x0023
enum class EEndBattleStatusChangeType : uint8
{
	None                                     = 0,
	BuffStart                                = 1,
	Regene                                   = 1,
	Barrier                                  = 2,
	MagicBarrier                             = 3,
	Reflect                                  = 4,
	Shield                                   = 5,
	Haste                                    = 6,
	Resist                                   = 7,
	Peerless                                 = 8,
	Reraise                                  = 9,
	BuffEnd                                  = 10,
	DebuffStart                              = 50,
	Poison                                   = 50,
	Fury                                     = 51,
	Sadness                                  = 52,
	Silence                                  = 53,
	Sleep                                    = 54,
	Slow                                     = 55,
	Stop                                     = 56,
	Petrify                                  = 57,
	Berserk                                  = 58,
	Frog                                     = 59,
	DeathSentence                            = 60,
	Death                                    = 61,
	BerserkAlways                            = 62,
	FrogAlways                               = 63,
	DebuffEnd                                = 64,
	CF_Start                                 = 100,
	CF_Barrier                               = 100,
	CF_Haste                                 = 101,
	CF_Slow                                  = 102,
	CF_Stop                                  = 103,
	CF_End                                   = 103,
	EEndBattleStatusChangeType_MAX           = 104,
};

// Enum EndGame.EEndEquipmentSkillEffectType
// NumValues: 0x0053
enum class EEndEquipmentSkillEffectType : uint8
{
	None                                     = 0,
	HPMaxAdd                                 = 1,
	MPMaxAdd                                 = 2,
	PhysicsAttackAdd                         = 3,
	PhysicsDefenseAdd                        = 4,
	MagicAttackAdd                           = 5,
	MagicDefenseAdd                          = 6,
	CriticalRateAdd                          = 7,
	LuckAdd                                  = 8,
	DexterityAdd                             = 9,
	GiveDamageCriticalAdd                    = 20,
	GiveDamageFireAdd                        = 21,
	GiveDamageIceAdd                         = 22,
	GiveDamageThunderAdd                     = 23,
	GiveDamageWindAdd                        = 24,
	GiveDamageWeaponAbilityAdd               = 25,
	GiveDamageLimitAbilityAdd                = 26,
	GiveDamageGroundNormalAttackComboAdd     = 27,
	GiveDamageAerialNormalAttackComboAdd     = 28,
	GiveDamageStateBurstAdd                  = 29,
	GiveDamageWeakAttributeAdd               = 30,
	GiveDamageAttributeAdd                   = 31,
	empty                                    = 32,
	GiveDamageUniqueAbilityAdd               = 33,
	GiveDamageNormalAttackAdd                = 34,
	GiveDamageAerialNormalAttackAdd          = 35,
	GiveDamageBreakablePartAdd               = 36,
	GiveDamageBackAdd                        = 37,
	GiveDamageMPFullMPSpendAdd               = 38,
	GiveDamageSelfHPRecoverAdd               = 39,
	GiveDamageHPRecoverAdd                   = 40,
	TakeDamageFireSub                        = 50,
	TakeDamageIceSub                         = 51,
	TakeDamageThunderSub                     = 52,
	TakeDamageWindSub                        = 53,
	TakeDamagePhysicsGuardSuccessSub         = 54,
	TakeDamageMagicGuardSuccessSub           = 55,
	TakeDamageAttributeSub                   = 56,
	TakeDamageSubAIPC                        = 57,
	TakeBuffTimeAdd                          = 80,
	GiveBuffTimeAdd                          = 81,
	GiveDebuffTimeAdd                        = 82,
	StatusChangeResistAdd                    = 83,
	PoisonDamageSub                          = 84,
	TakeDebuffTimeSub                        = 85,
	HitBonusATBRecoverAdd                    = 110,
	MPRecoverTimeSub                         = 111,
	LimitValueAdd                            = 112,
	MPSpendAttackMagicSub                    = 113,
	MPSpendHealMagicSub                      = 114,
	MateriaSlotModify                        = 115,
	HPRecoverKill                            = 116,
	MPRecoverTakeDamage                      = 117,
	Guts                                     = 118,
	CriticalWeaponAbilityAdd                 = 119,
	HPRecoverBurstUniqueAbility              = 120,
	AppendAttributeDamageAdd                 = 121,
	StartATBAdd                              = 122,
	ItemDropAdd                              = 123,
	SummonLevelAdd                           = 124,
	ATBFullVision                            = 125,
	LimitAddSpendATB                         = 126,
	LimitAddSpendMP                          = 127,
	Reraise                                  = 128,
	BerserkAlways                            = 129,
	FrogAlways                               = 130,
	LimitAddTime                             = 131,
	AutoRemedy                               = 132,
	APBonus                                  = 133,
	GiveDamageMPAmountAbilityAdd             = 134,
	GiveDamageHPAmountAbilityAdd             = 135,
	MagicChantingKeepBonus                   = 136,
	ProvocationLBBonus                       = 137,
	StealSuccessRateAdd                      = 138,
	DespoilAbilityAdd                        = 139,
	GiveDamageOffensiveModeCounterAdd        = 150,
	GiveDamageOffensiveModeNormalAttackAdd   = 151,
	TifaBuffAddBattleStart                   = 155,
	WeaponThrowAttackTimeAdd                 = 156,
	LinkAbilitySpendATBSub                   = 157,
	LinkLimitAbilityAdd                      = 158,
	LinkJustGuardStatusChangeAdd             = 159,
	EEndEquipmentSkillEffectType_MAX         = 160,
};

// Enum EndGame.EEndBattleCompareDistanceType
// NumValues: 0x0003
enum class EEndBattleCompareDistanceType : uint8
{
	Near                                     = 0,
	Far                                      = 1,
	EEndBattleCompareDistanceType_MAX        = 2,
};

// Enum EndGame.EEndBattleCountLogType
// NumValues: 0x0038
enum class EEndBattleCountLogType : uint8
{
	NormalAttackInvoke                       = 0,
	NormalAttackHitSuccess                   = 1,
	NormalAttackPerHitSuccess                = 2,
	NormalAttackHitFailure                   = 3,
	NormalAttackPerHitFailure                = 4,
	NormalAttackEnd                          = 5,
	WeaponAbilityInvoke                      = 6,
	WeaponAbilityHitSuccess                  = 7,
	WeaponAbilityPerHitSuccess               = 8,
	WeaponAbilityHitFailure                  = 9,
	WeaponAbilityPerHitFailure               = 10,
	WeaponAbilityEnd                         = 11,
	MagicInvoke                              = 12,
	MagicHitSuccess                          = 13,
	MagicPerHitSuccess                       = 14,
	MagicHitFailure                          = 15,
	MagicPerHitFailure                       = 16,
	MagicEnd                                 = 17,
	LimitInvoke                              = 18,
	LimitHitSuccess                          = 19,
	LimitPerHitSuccess                       = 20,
	LimitHitFailure                          = 21,
	LimitPerHitFailure                       = 22,
	LimitEnd                                 = 23,
	PerHitSuccessAttribute                   = 24,
	ItemUse                                  = 25,
	SummonStayBegin                          = 26,
	SummonCutSceneAbilityBegin               = 27,
	SummonCutSceneAbilityEnd                 = 28,
	Burst                                    = 29,
	BurstEnd                                 = 30,
	IsSyncAction                             = 31,
	SyncActionState                          = 32,
	SpecialStatusChangeState                 = 33,
	ExclusiveCondition                       = 34,
	ControledChara                           = 35,
	LeaderChange                             = 36,
	PartyCommand                             = 37,
	HPPercent                                = 38,
	LimitPercent                             = 39,
	ATBValue                                 = 40,
	ATBUsedValue                             = 41,
	IsDead                                   = 42,
	BattleBegin                              = 43,
	UCPCBattle                               = 44,
	KilledEnemy                              = 45,
	OwnKilledEnemy                           = 46,
	AlivePCParty                             = 47,
	UnrunnableTalkState                      = 48,
	RunnedSpecificTalkState                  = 49,
	SpecificTalkStateElapseTime              = 50,
	SpecificTalkStateIntervalTime            = 51,
	SpecificTalkStatePlayedCount             = 52,
	IsStoryFlag                              = 53,
	BattleSceneTime                          = 54,
	MAX                                      = 55,
};

// Enum EndGame.EEndBattleTargetCharaBaseLockType
// NumValues: 0x0004
enum class EEndBattleTargetCharaBaseLockType : uint8
{
	Ability                                  = 0,
	Combo                                    = 1,
	AI                                       = 2,
	MAX                                      = 3,
};

// Enum EndGame.EEndBattleSceneCountLifeCycleType
// NumValues: 0x0004
enum class EEndBattleSceneCountLifeCycleType : uint8
{
	eNone                                    = 0,
	eCountUp                                 = 1,
	eCountDown                               = 2,
	EEndBattleSceneCountLifeCycleType_MAX    = 3,
};

// Enum EndGame.EEndBattleBreakableRelationActionType
// NumValues: 0x0004
enum class EEndBattleBreakableRelationActionType : uint8
{
	Hidden                                   = 0,
	Visible                                  = 1,
	Replace                                  = 2,
	EEndBattleBreakableRelationActionType_MAX = 3,
};

// Enum EndGame.EEndBattleBreakableRelationVolumeType
// NumValues: 0x0004
enum class EEndBattleBreakableRelationVolumeType : uint8
{
	NavModifier                              = 0,
	Blocking                                 = 1,
	Both                                     = 2,
	EEndBattleBreakableRelationVolumeType_MAX = 3,
};

// Enum EndGame.EEndBattleDeadDirectionType
// NumValues: 0x000D
enum class EEndBattleDeadDirectionType : uint8
{
	None                                     = 0,
	LifeStream                               = 1,
	Explosion                                = 2,
	DarkEmission                             = 3,
	Purification                             = 4,
	BlackSmoke                               = 5,
	WhiteSmoke                               = 6,
	Digital                                  = 7,
	FeelerNormal                             = 50,
	FeelerSpecial                            = 51,
	PraecoMiniNormal                         = 52,
	PraecoMiniFinish                         = 53,
	EEndBattleDeadDirectionType_MAX          = 54,
};

// Enum EndGame.EEndBattleAttributeBitType
// NumValues: 0x0008
enum class EEndBattleAttributeBitType : uint8
{
	Fire                                     = 1,
	Ice                                      = 2,
	Thunder                                  = 4,
	Wind                                     = 8,
	Earth                                    = 16,
	Holy                                     = 32,
	Dark                                     = 64,
	EEndBattleAttributeBitType_MAX           = 65,
};

// Enum EndGame.EEndBattleAttributeType
// NumValues: 0x0009
enum class EEndBattleAttributeType : uint8
{
	Fire                                     = 0,
	Ice                                      = 1,
	Thunder                                  = 2,
	Wind                                     = 3,
	Earth                                    = 4,
	Holy                                     = 5,
	Dark                                     = 6,
	Max                                      = 7,
	None                                     = 7,
};

// Enum EndGame.EEndBattleSpecialStatusChangeType
// NumValues: 0x0053
enum class EEndBattleSpecialStatusChangeType : uint8
{
	None                                     = 0,
	Barrier                                  = 1,
	SearchLaser                              = 2,
	StunBoss                                 = 3,
	AIHands                                  = 4,
	RocketPunch                              = 5,
	CatchWithChain                           = 6,
	CanNotAbility                            = 7,
	CatchedByChain                           = 8,
	SyncAction                               = 9,
	Doping                                   = 10,
	StunEnemy                                = 11,
	LaunchByPhysics                          = 12,
	CatchWithChainDamageSource               = 13,
	ReactionDamageSource                     = 14,
	DamageInvalid                            = 15,
	LockOn                                   = 16,
	LockedOn                                 = 17,
	LocateDamageSource                       = 18,
	CatchWithHandle                          = 19,
	CatchedByHandle                          = 20,
	WarpStyle                                = 21,
	HideStyle                                = 22,
	Appear                                   = 23,
	HitSlowAttack                            = 24,
	BarretBuff                               = 25,
	ControlEnvironmentActor                  = 26,
	ReplaceEnvironmentActor                  = 27,
	ThrowEnvironmentActor                    = 28,
	TifaBuff                                 = 29,
	CounterMode                              = 30,
	ControlEnvironmentActorGroup             = 31,
	GhostStyle                               = 32,
	BarretHPTransferBuff                     = 33,
	ScreenInterference                       = 34,
	AerithAssist                             = 35,
	PlayTouchEffect                          = 36,
	PlayTouchEffectTargetIDGroup             = 37,
	PlayTouchEffectFeet                      = 38,
	PlayBlendSpaceAction                     = 39,
	OverwriteSyncAction                      = 40,
	Bind                                     = 41,
	ApparentDeath                            = 42,
	IceAura                                  = 43,
	SoulAbsorb                               = 44,
	ThrowCharacter                           = 45,
	ResetThrowCharacter                      = 46,
	InRangeCheckDamage                       = 47,
	SephirothWarpStyle                       = 48,
	CamouflageStyle                          = 49,
	BPDoT                                    = 50,
	HPDoT                                    = 51,
	YuffieCalcDamageBuff                     = 52,
	YuffieAttributeBuff                      = 53,
	RamuhPowerUp                             = 54,
	PushCollisionController                  = 55,
	HateManagementOwner                      = 56,
	HateManagementTarget                     = 57,
	SononTargetFixedBuff                     = 58,
	OneAbilityCalcDamageBuff                 = 59,
	BadConditionTop                          = 100,
	ChokeBadCondition                        = 100,
	BurnBadCondition                         = 101,
	FrostBadCondition                        = 102,
	ShockBadCondition                        = 103,
	StunBadCondition                         = 104,
	StunState                                = 104,
	WeakBadCondition                         = 105,
	BadConditionBottom                       = 106,
	BadSignConditionTop                      = 110,
	ChokeBadSignCondition                    = 110,
	BurnBadSignCondition                     = 111,
	FrostBadSignCondition                    = 112,
	ShockBadSignCondition                    = 113,
	StunBadSignCondition                     = 114,
	BadSignConditionBottom                   = 115,
	SummonBuffTop                            = 220,
	SummonBuffRegene                         = 220,
	SummonBuffMaxHpBonus                     = 223,
	SummonBuffPhysicalAttackBonus            = 224,
	SummonBuffMagicAttackBonus               = 225,
	SummonBuffBottom                         = 226,
	MAX                                      = 227,
};

// Enum EndGame.EEndBattleSyncActionEndType
// NumValues: 0x0004
enum class EEndBattleSyncActionEndType : uint8
{
	None                                     = 0,
	Escape                                   = 1,
	FinalAttack                              = 2,
	Max                                      = 3,
};

// Enum EndGame.EEndBattleSyncActionType
// NumValues: 0x0005
enum class EEndBattleSyncActionType : uint8
{
	None                                     = 0,
	Catch                                    = 1,
	Mount                                    = 2,
	Jump                                     = 3,
	Max                                      = 4,
};

// Enum EndGame.EEndBattleSceneSituationType
// NumValues: 0x0004
enum class EEndBattleSceneSituationType : uint8
{
	None                                     = 0,
	Event                                    = 1,
	Serious                                  = 2,
	EEndBattleSceneSituationType_MAX         = 3,
};

// Enum EndGame.EEndBattleSceneType
// NumValues: 0x0004
enum class EEndBattleSceneType : uint8
{
	Normal                                   = 0,
	Boss                                     = 1,
	VR                                       = 2,
	EEndBattleSceneType_MAX                  = 3,
};

// Enum EndGame.EEndAnimNotifyBattleDamageOwnerFilterType
// NumValues: 0x0004
enum class EEndAnimNotifyBattleDamageOwnerFilterType : uint8
{
	eALL                                     = 0,
	ePlayer                                  = 1,
	eEnemy                                   = 2,
	EEndAnimNotifyBattleDamageOwnerFilterType_MAX = 3,
};

// Enum EndGame.EEndBattleDamageSourceHitReactionType
// NumValues: 0x0013
enum class EEndBattleDamageSourceHitReactionType : uint8
{
	None                                     = 2,
	Small                                    = 0,
	Medium                                   = 8,
	Large                                    = 1,
	LaunchSmall                              = 3,
	LaunchLarge                              = 9,
	BlowSmall                                = 4,
	BlowLarge                                = 10,
	Strike                                   = 5,
	SyncAction                               = 6,
	Motion                                   = 7,
	Add                                      = 11,
	Repel                                    = 12,
	AerialDeadLaunchLarge                    = 13,
	AerialDeadBlowLarge                      = 14,
	AerialDeadStrike                         = 15,
	AerialSuspendActionLaunchLarge           = 16,
	BurstPushBlowLarge                       = 17,
	Max                                      = 18,
};

// Enum EndGame.EEndBattleDamageSourcePositionBaseType
// NumValues: 0x0013
enum class EEndBattleDamageSourcePositionBaseType : uint8
{
	Owner                                    = 0,
	OwnerWeapon1                             = 1,
	OwnerWeapon2                             = 2,
	OwnerWeapon3                             = 3,
	OwnerWeapon4                             = 4,
	Target                                   = 10,
	TargetWeapon1                            = 11,
	TargetWeapon2                            = 12,
	TargetWeapon3                            = 13,
	TargetWeapon4                            = 14,
	ParentDamageSource                       = 20,
	HitPosition                              = 21,
	TargetLocation                           = 22,
	FieldLocation                            = 23,
	FieldLaunchLocation                      = 24,
	EnvironmentActor                         = 25,
	OwnerAerithAssist                        = 26,
	TargetTop                                = 27,
	EEndBattleDamageSourcePositionBaseType_MAX = 28,
};

// Enum EndGame.EEndBattleDamageSourcePowerType
// NumValues: 0x0007
enum class EEndBattleDamageSourcePowerType : uint8
{
	Normal                                   = 0,
	Constant                                 = 1,
	MaxHpPercent                             = 3,
	HpPercent                                = 5,
	ATBPercent                               = 10,
	HPOneSingleDigit                         = 11,
	EEndBattleDamageSourcePowerType_MAX      = 12,
};

// Enum EndGame.EEndBattleAbilityReactionConditionType
// NumValues: 0x000C
enum class EEndBattleAbilityReactionConditionType : uint8
{
	None                                     = 0,
	Hit                                      = 1,
	Guard                                    = 2,
	TargetDodge                              = 3,
	TargetDodgeDirection                     = 4,
	NotTargetFrontAndNear                    = 5,
	Damage                                   = 6,
	NotifyAIBP                               = 7,
	NormalAttackDamage                       = 8,
	TargetDodgeAngle                         = 9,
	TargetIsInvincible                       = 10,
	EEndBattleAbilityReactionConditionType_MAX = 11,
};

// Enum EndGame.EEndBattleAbilityTargetCloseMoveType
// NumValues: 0x0004
enum class EEndBattleAbilityTargetCloseMoveType : uint8
{
	Stop                                     = 0,
	None                                     = 1,
	Push                                     = 2,
	EEndBattleAbilityTargetCloseMoveType_MAX = 3,
};

// Enum EndGame.EEndBattleRewardType
// NumValues: 0x0006
enum class EEndBattleRewardType : uint8
{
	Exp                                      = 0,
	Ap                                       = 1,
	Gil                                      = 2,
	Drop                                     = 3,
	Steal                                    = 4,
	EEndBattleRewardType_MAX                 = 5,
};

// Enum EndGame.EEndBattleActType
// NumValues: 0x0008
enum class EEndBattleActType : uint8
{
	Move                                     = 0,
	Moves                                    = 1,
	Turn                                     = 2,
	Warp                                     = 3,
	Motion                                   = 4,
	MotionEnd                                = 5,
	ActMax                                   = 6,
	EEndBattleActType_MAX                    = 7,
};

// Enum EndGame.EEndBattleAbilityCommandType
// NumValues: 0x0007
enum class EEndBattleAbilityCommandType : uint8
{
	None                                     = 0,
	Ability                                  = 1,
	Magic                                    = 2,
	Limit                                    = 3,
	Item                                     = 4,
	UltimateSummonMagic                      = 5,
	Max                                      = 6,
};

// Enum EndGame.EndBattleExitBattleSceneType
// NumValues: 0x0004
enum class EndBattleExitBattleSceneType : uint8
{
	EndBattleMode_Finish                     = 0,
	EndBattleMode_Escape                     = 1,
	EndBattleMode_Leave                      = 2,
	EndBattleMode_Max                        = 3,
};

// Enum EndGame.EEndBattleCameraBlendBasePosType
// NumValues: 0x0003
enum class EEndBattleCameraBlendBasePosType : uint8
{
	Aim                                      = 0,
	Eye                                      = 1,
	MAX                                      = 2,
};

// Enum EndGame.EEndBattleCameraCutEndType
// NumValues: 0x0004
enum class EEndBattleCameraCutEndType : uint8
{
	None                                     = 0,
	Continue                                 = 1,
	Loop                                     = 2,
	MAX                                      = 3,
};

// Enum EndGame.EEndBattleCameraOwnerGroupType
// NumValues: 0x0003
enum class EEndBattleCameraOwnerGroupType : uint8
{
	Owner                                    = 0,
	World                                    = 1,
	MAX                                      = 2,
};

// Enum EndGame.EBattleInSituationType
// NumValues: 0x0005
enum class EBattleInSituationType : uint8
{
	eNone                                    = 0,
	eTakeAttack                              = 1,
	eSense                                   = 2,
	eLink                                    = 3,
	EBattleInSituationType_MAX               = 4,
};

// Enum EndGame.EBattleNotifyState
// NumValues: 0x0006
enum class EBattleNotifyState : uint8
{
	InvincibleWithReaction                   = 0,
	Invinceble                               = 1,
	AipcNotAcceptAttack                      = 2,
	Effect                                   = 3,
	InvincibleForce                          = 4,
	EBattleNotifyState_MAX                   = 5,
};

// Enum EndGame.SetPlayForceChangeIdleAction
// NumValues: 0x0004
enum class ESetPlayForceChangeIdleAction : uint8
{
	Succeeded                                = 0,
	ParameterError                           = 1,
	RuntimeError                             = 2,
	SetPlayForceChangeIdleAction_MAX         = 3,
};

// Enum EndGame.SetPlayFallAction
// NumValues: 0x0005
enum class ESetPlayFallAction : uint8
{
	Succeeded                                = 0,
	ParameterError                           = 1,
	RuntimeError                             = 2,
	SuspendedError                           = 3,
	SetPlayFallAction_MAX                    = 4,
};

// Enum EndGame.SetPlayGraviticJump
// NumValues: 0x0005
enum class ESetPlayGraviticJump : uint8
{
	Succeeded                                = 0,
	ParameterError                           = 1,
	RuntimeError                             = 2,
	SuspendedError                           = 3,
	SetPlayGraviticJump_MAX                  = 4,
};

// Enum EndGame.SetPlayJumpTo
// NumValues: 0x0004
enum class ESetPlayJumpTo : uint8
{
	Succeeded                                = 0,
	ParameterError                           = 1,
	RuntimeError                             = 2,
	SetPlayJumpTo_MAX                        = 3,
};

// Enum EndGame.SetPlayAerialAttackJump
// NumValues: 0x0005
enum class ESetPlayAerialAttackJump : uint8
{
	Succeeded                                = 0,
	ParameterError                           = 1,
	RuntimeError                             = 2,
	TimeoutError                             = 3,
	SetPlayAerialAttackJump_MAX              = 4,
};

// Enum EndGame.SetPlayUseAbility
// NumValues: 0x0005
enum class ESetPlayUseAbility : uint8
{
	Succeeded                                = 0,
	ParameterError                           = 1,
	RuntimeError                             = 2,
	TimeoutError                             = 3,
	SetPlayUseAbility_MAX                    = 4,
};

// Enum EndGame.SetPlayStartSetPlay
// NumValues: 0x0005
enum class ESetPlayStartSetPlay : uint8
{
	Succeeded                                = 0,
	SomeoneFrogError                         = 1,
	SomeoneDeadError                         = 2,
	RuntimeError                             = 3,
	SetPlayStartSetPlay_MAX                  = 4,
};

// Enum EndGame.EEndBattleSceneCharaStateType
// NumValues: 0x001C
enum class EEndBattleSceneCharaStateType : uint8
{
	Dead                                     = 0,
	SyncAction                               = 1,
	Stun                                     = 2,
	DebuffStart                              = 50,
	StatusChangePoison                       = 50,
	StatusChangeFury                         = 51,
	StatusChangeSadness                      = 52,
	StatusChangeSilence                      = 53,
	StatusChangeSleep                        = 54,
	StatusChangeSlow                         = 55,
	StatusChangeStop                         = 56,
	StatusChangePetrify                      = 57,
	StatusChangeBerserk                      = 58,
	StatusChangeFrog                         = 59,
	StatusChangeDeathSentence                = 60,
	StatusChangeDeath                        = 61,
	StatusChangeBerserkAlways                = 62,
	StatusChangeFrogAlways                   = 63,
	DamageReactionSmall                      = 64,
	DamageReactionMediun                     = 65,
	DamageReactionLarge                      = 66,
	DamageReactionLaunch                     = 67,
	DamageReactionBlow                       = 68,
	DamageReactionStrike                     = 69,
	DamageReactionMotion                     = 70,
	DamageReactionRepel                      = 71,
	Other                                    = 72,
	EEndBattleSceneCharaStateType_MAX        = 73,
};

// Enum EndGame.EFallState
// NumValues: 0x0004
enum class EFallState : uint8
{
	Pending                                  = 0,
	Fall                                     = 1,
	Land                                     = 2,
	EFallState_MAX                           = 3,
};

// Enum EndGame.EEndBehaviorLaunchFsmState
// NumValues: 0x000B
enum class EEndBehaviorLaunchFsmState : uint8
{
	Pending                                  = 0,
	Launch                                   = 1,
	InAir                                    = 2,
	AirRecoveryStart                         = 3,
	AirRecoveryLoop                          = 4,
	AirRecoveryEnd                           = 5,
	LandingRecovery                          = 6,
	CrashLand                                = 7,
	CrashLandLoop                            = 8,
	WakeUp                                   = 9,
	EEndBehaviorLaunchFsmState_MAX           = 10,
};

// Enum EndGame.EMonkeyBarsActorDirState
// NumValues: 0x0005
enum class EMonkeyBarsActorDirState : uint8
{
	Front                                    = 0,
	Back                                     = 1,
	Left                                     = 2,
	Right                                    = 3,
	EMonkeyBarsActorDirState_MAX             = 4,
};

// Enum EndGame.EBikeAllyCharacterType
// NumValues: 0x0007
enum class EBikeAllyCharacterType : uint8
{
	Default                                  = 0,
	Main                                     = 1,
	Rider1                                   = 2,
	Rider2                                   = 3,
	Rider3                                   = 4,
	RiderAll                                 = 5,
	EBikeAllyCharacterType_MAX               = 6,
};

// Enum EndGame.EBikeLoccheAttackType
// NumValues: 0x0008
enum class EBikeLoccheAttackType : uint8
{
	None                                     = 0,
	Melee                                    = 1,
	Smash                                    = 2,
	Shot                                     = 3,
	Stamp                                    = 4,
	Provoke                                  = 5,
	Bridge                                   = 6,
	EBikeLoccheAttackType_MAX                = 7,
};

// Enum EndGame.EBikeMothSlasherAttackType
// NumValues: 0x0006
enum class EBikeMothSlasherAttackType : uint8
{
	None                                     = 0,
	Default                                  = 1,
	Charge                                   = 2,
	Discharge                                = 3,
	Phase2                                   = 4,
	EBikeMothSlasherAttackType_MAX           = 5,
};

// Enum EndGame.EBikeMotorBallClimaxBehavior
// NumValues: 0x0005
enum class EBikeMotorBallClimaxBehavior : uint8
{
	Standard                                 = 0,
	Chase_Mine                               = 1,
	Chase_ShockWave                          = 2,
	Chase_Cannon                             = 3,
	EBikeMotorBallClimaxBehavior_MAX         = 4,
};

// Enum EndGame.EEndBikeDifficultyType
// NumValues: 0x0005
enum class EEndBikeDifficultyType : uint8
{
	All                                      = 0,
	Easy                                     = 1,
	Normal                                   = 2,
	Hard                                     = 3,
	EEndBikeDifficultyType_MAX               = 4,
};

// Enum EndGame.EBikeMenuIndex
// NumValues: 0x0003
enum class EBikeMenuIndex : uint8
{
	Player                                   = 0,
	Ally                                     = 1,
	EBikeMenuIndex_MAX                       = 2,
};

// Enum EndGame.EBikeSlalomLastPositionType
// NumValues: 0x0006
enum class EBikeSlalomLastPositionType : uint8
{
	None                                     = 0,
	SameSideOfPlayer                         = 1,
	OtherSideOfPlayer                        = 2,
	SameSideOfAlly                           = 3,
	OtherSideOfAlly                          = 4,
	EBikeSlalomLastPositionType_MAX          = 5,
};

// Enum EndGame.EBikeDamageMotionType
// NumValues: 0x0006
enum class EBikeDamageMotionType : uint8
{
	Normal                                   = 0,
	Explosion                                = 1,
	KnockBack_LR1                            = 2,
	KnockBack_F                              = 3,
	KnockBack_LR2                            = 4,
	EBikeDamageMotionType_MAX                = 5,
};

// Enum EndGame.EBikeDirection
// NumValues: 0x0006
enum class EBikeDirection : uint8
{
	None                                     = 0,
	Front                                    = 1,
	Right                                    = 2,
	Left                                     = 3,
	Back                                     = 4,
	Max                                      = 5,
};

// Enum EndGame.EEndBikeHitFilterPartsType
// NumValues: 0x0004
enum class EEndBikeHitFilterPartsType : uint8
{
	None                                     = 0,
	RightWheels                              = 1,
	LeftWheels                               = 2,
	EEndBikeHitFilterPartsType_MAX           = 3,
};

// Enum EndGame.EEndBikeKeepRelativePositionType
// NumValues: 0x0004
enum class EEndBikeKeepRelativePositionType : uint8
{
	None                                     = 0,
	DirectValue                              = 1,
	EntryPosition                            = 2,
	EEndBikeKeepRelativePositionType_MAX     = 3,
};

// Enum EndGame.EEndBikeNextActionType
// NumValues: 0x0007
enum class EEndBikeNextActionType : uint8
{
	None                                     = 0,
	Move                                     = 1,
	Ability                                  = 2,
	Ability_ATB                              = 3,
	Accel                                    = 4,
	Brake                                    = 5,
	EEndBikeNextActionType_MAX               = 6,
};

// Enum EndGame.EEndBikeAbilityPositionCondition
// NumValues: 0x0004
enum class EEndBikeAbilityPositionCondition : uint8
{
	None                                     = 0,
	Right                                    = 1,
	Left                                     = 2,
	EEndBikeAbilityPositionCondition_MAX     = 3,
};

// Enum EndGame.EEndBikeAbilityDistanceType
// NumValues: 0x0004
enum class EEndBikeAbilityDistanceType : uint8
{
	None                                     = 0,
	Short                                    = 1,
	Long                                     = 2,
	EEndBikeAbilityDistanceType_MAX          = 3,
};

// Enum EndGame.EEndBikeAbilityType
// NumValues: 0x0007
enum class EEndBikeAbilityType : uint8
{
	None                                     = 0,
	PlayerNormal                             = 1,
	PlayerATB                                = 2,
	PlayerLimit                              = 3,
	EnemyNormal                              = 10,
	EnemySpecial                             = 11,
	EEndBikeAbilityType_MAX                  = 12,
};

// Enum EndGame.EEndBikeTriggerBoxType
// NumValues: 0x0006
enum class EEndBikeTriggerBoxType : uint8
{
	Destroy                                  = 0,
	BreakBridgeKeepVelocity                  = 1,
	BreakBridgePrepare                       = 2,
	BreakBridgeExecute                       = 3,
	BreakBridgeReset                         = 4,
	EEndBikeTriggerBoxType_MAX               = 5,
};

// Enum EndGame.EEndBikeLaserPointerCharacterType
// NumValues: 0x0003
enum class EEndBikeLaserPointerCharacterType : uint8
{
	Vehicle                                  = 0,
	MainRider                                = 1,
	EEndBikeLaserPointerCharacterType_MAX    = 2,
};

// Enum EndGame.EEndBikeLaserPointerEffectResourceCategory
// NumValues: 0x0003
enum class EEndBikeLaserPointerEffectResourceCategory : uint8
{
	Resident                                 = 0,
	Character                                = 1,
	EEndBikeLaserPointerEffectResourceCategory_MAX = 2,
};

// Enum EndGame.EEndBikeRotateYawType
// NumValues: 0x0005
enum class EEndBikeRotateYawType : uint8
{
	None                                     = 0,
	LookAtTarget                             = 1,
	KeepRelativeOffset                       = 2,
	LookAtDamageSourceTarget                 = 3,
	EEndBikeRotateYawType_MAX                = 4,
};

// Enum EndGame.EEndBikeAddEnemyType
// NumValues: 0x0003
enum class EEndBikeAddEnemyType : uint8
{
	None                                     = 0,
	RateHp                                   = 1,
	EEndBikeAddEnemyType_MAX                 = 2,
};

// Enum EndGame.EEndBikeDangerousPointType
// NumValues: 0x0005
enum class EEndBikeDangerousPointType : uint8
{
	None                                     = 0,
	DamageSource                             = 1,
	AnimNotify                               = 2,
	LockOnMarker                             = 3,
	EEndBikeDangerousPointType_MAX           = 4,
};

// Enum EndGame.EEndBizarreBugWallMoveType
// NumValues: 0x0004
enum class EEndBizarreBugWallMoveType : uint8
{
	Direction                                = 0,
	Spline                                   = 1,
	SplineAndUpVector                        = 2,
	EEndBizarreBugWallMoveType_MAX           = 3,
};

// Enum EndGame.EEndBonamikWindType
// NumValues: 0x0004
enum class EEndBonamikWindType : uint8
{
	Directional                              = 0,
	Wave                                     = 1,
	DirectionalAndWave                       = 2,
	EEndBonamikWindType_MAX                  = 3,
};

// Enum EndGame.EEndBoneAttachTarget
// NumValues: 0x0007
enum class EEndBoneAttachTarget : uint8
{
	None                                     = 0,
	OwnerCharacter                           = 1,
	OwnerParentCharacter                     = 2,
	ManualCharacter                          = 3,
	ManualTransform                          = 4,
	ManualTranslation                        = 5,
	EEndBoneAttachTarget_MAX                 = 6,
};

// Enum EndGame.EEndCustomCompositeReturnCondition
// NumValues: 0x0004
enum class EEndCustomCompositeReturnCondition : uint8
{
	FirstSuccess                             = 0,
	FirstFailure                             = 1,
	LastNodeCompletes                        = 2,
	EEndCustomCompositeReturnCondition_MAX   = 3,
};

// Enum EndGame.ETargetType
// NumValues: 0x0003
enum class ETargetType : uint32
{
	Normal                                   = 0,
	Command                                  = 1,
	ETargetType_MAX                          = 2,
};

// Enum EndGame.EDistanceType
// NumValues: 0x0003
enum class EDistanceType : uint32
{
	Dist2D                                   = 0,
	Dist3D                                   = 1,
	EDistanceType_MAX                        = 2,
};

// Enum EndGame.EAngleCheckType
// NumValues: 0x0003
enum class EAngleCheckType : uint32
{
	To                                       = 0,
	From                                     = 1,
	EAngleCheckType_MAX                      = 2,
};

// Enum EndGame.EBTDecorator_Field_ArithmeticComparisonSource
// NumValues: 0x0005
enum class EBTDecorator_Field_ArithmeticComparisonSource : uint8
{
	Blackboard                               = 0,
	ActorProperty                            = 1,
	ActorFunction                            = 2,
	LiteralValue                             = 3,
	EBTDecorator_Field_MAX                   = 4,
};

// Enum EndGame.EBTDecorator_Field_CheckDistanceMode
// NumValues: 0x0005
enum class EBTDecorator_Field_CheckDistanceMode : uint8
{
	Distance3D                               = 0,
	Distance2D                               = 1,
	DistanceZ                                = 2,
	DistanceZ_Abs                            = 3,
	EBTDecorator_Field_MAX                   = 4,
};

// Enum EndGame.EDodgeDirectionType
// NumValues: 0x0003
enum class EDodgeDirectionType : uint8
{
	TOWARD                                   = 0,
	AWAY                                     = 1,
	EDodgeDirectionType_MAX                  = 2,
};

// Enum EndGame.RCSCutConnect
// NumValues: 0x0004
enum class ERCSCutConnect : uint8
{
	None                                     = 0,
	InputWait                                = 1,
	LeaveEyePos                              = 2,
	RCSCutConnect_MAX                        = 3,
};

// Enum EndGame.EEndRailCameraCurveType
// NumValues: 0x000B
enum class EEndRailCameraCurveType : uint8
{
	Linear                                   = 0,
	Curve                                    = 1,
	SlowInFastOut                            = 2,
	FastInSlowOut                            = 3,
	Hermite                                  = 4,
	SlowInSlowOut                            = 5,
	SlowInSlowOutCirc                        = 6,
	SlowOutExpo                              = 7,
	FastInExpo                               = 8,
	CurveBlendTypeMax                        = 9,
	EEndRailCameraCurveType_MAX              = 10,
};

// Enum EndGame.EEndOverrideAnimationLayer
// NumValues: 0x0021
enum class EEndOverrideAnimationLayer : uint8
{
	Layer00                                  = 0,
	Layer01                                  = 1,
	Layer02                                  = 2,
	Layer03                                  = 3,
	MiniGame                                 = 4,
	Layer05                                  = 5,
	Layer06                                  = 6,
	FieldMotion                              = 7,
	FieldAction                              = 8,
	Layer09                                  = 9,
	Layer10                                  = 10,
	Layer11                                  = 11,
	Layer12                                  = 12,
	Layer13                                  = 13,
	Layer14                                  = 14,
	StateManager                             = 15,
	Layer16                                  = 16,
	Layer17                                  = 17,
	Layer18                                  = 18,
	Layer19                                  = 19,
	FieldFly                                 = 20,
	BattleFly                                = 21,
	Layer22                                  = 22,
	Layer23                                  = 23,
	Layer24                                  = 24,
	Layer25                                  = 25,
	Layer26                                  = 26,
	Layer27                                  = 27,
	Layer28                                  = 28,
	Layer29                                  = 29,
	AIBehavior                               = 30,
	Base                                     = 31,
	EEndOverrideAnimationLayer_Max           = 32,
};

// Enum EndGame.EEndAiBattleRole
// NumValues: 0x000D
enum class EEndAiBattleRole : uint8
{
	None                                     = 0,
	Front                                    = 1,
	Middle                                   = 2,
	Back                                     = 3,
	Shield                                   = 4,
	Theif                                    = 5,
	PhysicsFrontDD                           = 6,
	PhysicsBackDD                            = 7,
	Unique1                                  = 8,
	Unique2                                  = 9,
	Unique3                                  = 10,
	Unique4                                  = 11,
	EEndAiBattleRole_MAX                     = 12,
};

// Enum EndGame.EBattleEntryType
// NumValues: 0x0005
enum class EBattleEntryType : uint8
{
	eNone                                    = 0,
	eSpecial                                 = 1,
	eWall                                    = 2,
	eAerial                                  = 3,
	EBattleEntryType_MAX                     = 4,
};

// Enum EndGame.EActorAiMode
// NumValues: 0x0006
enum class EActorAiMode : uint8
{
	EActorAiMode_CINEMA                      = 0,
	EActorAiMode_PLAYER                      = 1,
	EActorAiMode_FIELD                       = 2,
	EActorAiMode_BATTLE                      = 3,
	EActorAiMode_BIKE                        = 4,
	EActorAiMode_MAX                         = 5,
};

// Enum EndGame.EEndCharacterAttachEffectResourceCategoryType
// NumValues: 0x0005
enum class EEndCharacterAttachEffectResourceCategoryType : uint8
{
	Resident                                 = 0,
	Character                                = 1,
	ResourceCharacter                        = 2,
	ResourceLevel                            = 3,
	EEndCharacterAttachEffectResourceCategoryType_MAX = 4,
};

// Enum EndGame.EEndCharacterZeroOneSeProperties
// NumValues: 0x0003
enum class EEndCharacterZeroOneSeProperties : uint8
{
	None                                     = 0,
	Velocity                                 = 1,
	EEndCharacterZeroOneSeProperties_MAX     = 2,
};

// Enum EndGame.EEndEnvironmentSetOverritePriority
// NumValues: 0x0004
enum class EEndEnvironmentSetOverritePriority : uint8
{
	Default                                  = 0,
	LevelOverrideAction                      = 1,
	Num                                      = 2,
	EEndEnvironmentSetOverritePriority_MAX   = 3,
};

// Enum EndGame.EEndCrossSaveJob
// NumValues: 0x0008
enum class EEndCrossSaveJob : uint8
{
	None                                     = 0,
	Read                                     = 1,
	Upload                                   = 2,
	Download                                 = 3,
	Write                                    = 4,
	ReadUpload                               = 5,
	DownloadWrite                            = 6,
	EEndCrossSaveJob_MAX                     = 7,
};

// Enum EndGame.EEndCrossSaveState
// NumValues: 0x000F
enum class EEndCrossSaveState : uint8
{
	None                                     = 0,
	Read                                     = 1,
	Read_WaitSaveData                        = 2,
	Upload                                   = 3,
	Upload_WaitTCS                           = 4,
	Download                                 = 5,
	Download_WaitTCS                         = 6,
	Write                                    = 7,
	Write_WaitSaveData                       = 8,
	Success                                  = 9,
	Success_WaitEndUI                        = 10,
	Error                                    = 11,
	Error_WaitSceError                       = 12,
	Error_WaitEndUI                          = 13,
	EEndCrossSaveState_MAX                   = 14,
};

// Enum EndGame.EEndCutLangType
// NumValues: 0x0005
enum class EEndCutLangType : uint8
{
	JP                                       = 0,
	US                                       = 1,
	DE                                       = 2,
	FR                                       = 3,
	EEndCutLangType_MAX                      = 4,
};

// Enum EndGame.EEndCutForceFeedBackMode
// NumValues: 0x0004
enum class EEndCutForceFeedBackMode : uint8
{
	Play                                     = 0,
	PlayLoop                                 = 1,
	Stop                                     = 2,
	EEndCutForceFeedBackMode_MAX             = 3,
};

// Enum EndGame.EEndCutBattleCharaStateType
// NumValues: 0x0019
enum class EEndCutBattleCharaStateType : uint8
{
	None                                     = 0,
	Idle                                     = 1,
	Action                                   = 2,
	SimpleAction                             = 3,
	Guard                                    = 4,
	GuardReaction                            = 5,
	Dodge                                    = 6,
	Motion                                   = 7,
	SimpleMotion                             = 8,
	Damage                                   = 9,
	SleepAerial                              = 10,
	SleepFall                                = 11,
	Sleep                                    = 12,
	Dead                                     = 13,
	Revive                                   = 14,
	Burst                                    = 15,
	UniqueAbility                            = 16,
	Weak                                     = 17,
	Step                                     = 18,
	Fall                                     = 19,
	SetPlayAction                            = 20,
	AerialNormalAttackJump                   = 21,
	AerialNormalAttack                       = 22,
	AerialNormalAttackFall                   = 23,
	Max                                      = 24,
};

// Enum EndGame.EEndDanceMiniGameNote
// NumValues: 0x0003
enum class EEndDanceMiniGameNote : uint8
{
	SINGLE_TAP                               = 0,
	LONG_TAP                                 = 1,
	EEndDanceMiniGameNote_MAX                = 2,
};

// Enum EndGame.EEndDanceMiniGameInputKey
// NumValues: 0x000A
enum class EEndDanceMiniGameInputKey : uint64
{
	NONE                                     = 18446744073709551615,
	CIRCLE                                   = 0,
	TRIANGLE                                 = 1,
	SQUARE                                   = 2,
	CROSS                                    = 3,
	UP                                       = 4,
	RIGHT                                    = 5,
	DOWN                                     = 6,
	LEFT                                     = 7,
	EEndDanceMiniGameInputKey_MAX            = 8,
};

// Enum EndGame.EEndCutSelectWidgetOption
// NumValues: 0x0003
enum class EEndCutSelectWidgetOption : uint8
{
	CESW_None                                = 0,
	CESW_LessThanHard                        = 1,
	CESW_Max                                 = 2,
};

// Enum EndGame.EEndCutEnvironmentLightMode
// NumValues: 0x0003
enum class EEndCutEnvironmentLightMode : uint8
{
	CELM_All                                 = 0,
	CELM_Part                                = 1,
	CELM_Max                                 = 2,
};

// Enum EndGame.EEndCutPhysicsMode
// NumValues: 0x0004
enum class EEndCutPhysicsMode : uint8
{
	Standard                                 = 0,
	Continuous                               = 1,
	Disable                                  = 2,
	EEndCutPhysicsMode_MAX                   = 3,
};

// Enum EndGame.EEndCutExtraClipType
// NumValues: 0x0009
enum class EEndCutExtraClipType : uint8
{
	SendStateTrigger                         = 1,
	ChangeEnvironment                        = 2,
	ResetPhysics                             = 3,
	SetStoryFlag                             = 4,
	SetBeamTarget                            = 5,
	EffectOfSummon                           = 6,
	DetachForBattleAI                        = 7,
	IntoVRColosseum                          = 8,
	EEndCutExtraClipType_MAX                 = 9,
};

// Enum EndGame.EEndMovieClipMode
// NumValues: 0x0004
enum class EEndMovieClipMode : uint8
{
	Load                                     = 1,
	Play                                     = 2,
	Draw                                     = 3,
	EEndMovieClipMode_MAX                    = 4,
};

// Enum EndGame.EEndCutPhaseNo
// NumValues: 0x000E
enum class EEndCutPhaseNo : uint8
{
	Nothing                                  = 0,
	LevelLoading                             = 1,
	CharaSpecLoading                         = 2,
	ActorCreating                            = 3,
	WaitBindBGFA                             = 4,
	WaitPlaying                              = 5,
	WaitOnActorCreated                       = 6,
	WaitOpenMovie                            = 7,
	Playing                                  = 8,
	WaitFinished                             = 9,
	Finished                                 = 10,
	ReadyPlayMovie                           = 11,
	WaitPlayMovie                            = 12,
	EEndCutPhaseNo_MAX                       = 13,
};

// Enum EndGame.EEndCutWrapperType
// NumValues: 0x0005
enum class EEndCutWrapperType : uint8
{
	Event                                    = 0,
	Live                                     = 1,
	Movie                                    = 2,
	Field                                    = 3,
	EEndCutWrapperType_MAX                   = 4,
};

// Enum EndGame.EEndCutSeamlessCamOption
// NumValues: 0x0004
enum class EEndCutSeamlessCamOption : uint8
{
	Default                                  = 0,
	LastCamTransOnCut                        = 1,
	CSCO_Max                                 = 2,
	EEndCutSeamlessCamOption_MAX             = 3,
};

// Enum EndGame.EEndCutObjType
// NumValues: 0x001D
enum class EEndCutObjType : uint8
{
	Character                                = 0,
	PlayerCharacter                          = 1,
	BackGround                               = 2,
	Prop                                     = 3,
	SummonEnemyPoint                         = 4,
	Weapon                                   = 5,
	Enemy                                    = 6,
	BossEnemy                                = 7,
	Summoned                                 = 8,
	Vehicle                                  = 9,
	Camera                                   = 10,
	SpotLight                                = 11,
	Effect                                   = 12,
	DepthOfField                             = 13,
	EnvLight                                 = 14,
	DirLight                                 = 15,
	CamLens                                  = 16,
	Bloom                                    = 17,
	Fog                                      = 18,
	MotionBlur                               = 19,
	ImageEffects                             = 20,
	SSReflection                             = 21,
	CategoryVol                              = 22,
	LightOverride                            = 23,
	PriorAvailability                        = 24,
	EmissiveOverride                         = 25,
	Other                                    = 26,
	Max                                      = 63,
	_NewSpawn                                = 128,
};

// Enum EndGame.EEndGameScenarioType
// NumValues: 0x0003
enum class EEndGameScenarioType : uint8
{
	SCENARIO_END                             = 0,
	SCENARIO_END_PLUS                        = 1,
	SCENARIO_MAX                             = 2,
};

// Enum EndGame.EDataBaseEquipmentObtainmentStatus
// NumValues: 0x0004
enum class EDataBaseEquipmentObtainmentStatus : uint8
{
	Undiscovered                             = 0,
	Obtained                                 = 1,
	Displayed                                = 2,
	EDataBaseEquipmentObtainmentStatus_MAX   = 3,
};

// Enum EndGame.EEquipmentCategoryMain
// NumValues: 0x0004
enum class EEquipmentCategoryMain : uint8
{
	Weapon                                   = 0,
	Armor                                    = 1,
	Accessory                                = 2,
	EEquipmentCategoryMain_MAX               = 3,
};

// Enum EndGame.EDifficultyType
// NumValues: 0x0004
enum class EDifficultyType : uint8
{
	EASY                                     = 0,
	NORMAL                                   = 1,
	HARD                                     = 2,
	EDifficultyType_MAX                      = 3,
};

// Enum EndGame.EIOGameDataRequestLayer
// NumValues: 0x0006
enum class EIOGameDataRequestLayer : uint8
{
	None                                     = 0,
	Background                               = 1,
	Field                                    = 2,
	Menu                                     = 3,
	Count                                    = 4,
	EIOGameDataRequestLayer_MAX              = 5,
};

// Enum EndGame.EIOGameDataState
// NumValues: 0x000D
enum class EIOGameDataState : uint8
{
	EIOGameDataState_NONE                    = 0,
	EIOGameDataState_SAVE                    = 1,
	EIOGameDataState_LOAD                    = 2,
	EIOGameDataState_LOAD_LOCATION           = 3,
	EIOGameDataState_EXIST                   = 4,
	EIOGameDataState_GATHER                  = 5,
	EIOGameDataState_BACKUP_SAVE             = 6,
	EIOGameDataState_BACKUP_LOAD             = 7,
	EIOGameDataState_SAVE_COMMON             = 8,
	EIOGameDataState_LOAD_COMMON             = 9,
	EIOGameDataState_GATHER_AT_SAVING        = 10,
	EIOGameDataState_SAVEDEBUG_POINTSTART    = 11,
	EIOGameDataState_Max                     = 12,
};

// Enum EndGame.EGameDataResult
// NumValues: 0x0004
enum class EGameDataResult : uint8
{
	EGameDataResult_NONE                     = 0,
	EGameDataResult_SUCCESS                  = 1,
	EGameDataResult_ERROR                    = 2,
	EGameDataResult_MAX                      = 3,
};

// Enum EndGame.EEndDataTableDebugFlag
// NumValues: 0x0003
enum class EEndDataTableDebugFlag : uint8
{
	NextLocationReimport                     = 0,
	NextLocationSaveLocationSaveData         = 1,
	EEndDataTableDebugFlag_MAX               = 2,
};

// Enum EndGame.EVfxNonUniformKind
// NumValues: 0x0006
enum class EVfxNonUniformKind : uint8
{
	None                                     = 0,
	Linear                                   = 1,
	Multiply                                 = 2,
	MultiplyAverage                          = 3,
	ArcSin                                   = 4,
	EVfxNonUniformKind_MAX                   = 5,
};

// Enum EndGame.EEndEffectInterpolateKind
// NumValues: 0x0003
enum class EEndEffectInterpolateKind : uint8
{
	Linear                                   = 0,
	EaseInOut                                = 1,
	EEndEffectInterpolateKind_MAX            = 2,
};

// Enum EndGame.EEndEnvironmentPhysAddForceType
// NumValues: 0x0003
enum class EEndEnvironmentPhysAddForceType : uint8
{
	OriginToSphere                           = 0,
	OriginToCone                             = 1,
	EEndEnvironmentPhysAddForceType_MAX      = 2,
};

// Enum EndGame.EEndEnvironmentPhysForceScale
// NumValues: 0x0006
enum class EEndEnvironmentPhysForceScale : uint8
{
	Scale0                                   = 0,
	Scale1                                   = 1,
	Scale2                                   = 2,
	Scale3                                   = 3,
	Scale4                                   = 4,
	Max                                      = 5,
};

// Enum EndGame.EEqsType
// NumValues: 0x0012
enum class EEqsType : uint8
{
	CommonEnemyTarget                        = 0,
	CoverPcRectangle                         = 1,
	CoverEnemyRectangle                      = 2,
	CautionInflenceMap                       = 3,
	Confront                                 = 4,
	Escort                                   = 5,
	Avoid_Danger                             = 6,
	Avoid_Damage                             = 7,
	Flee                                     = 8,
	Target_Evaluate                          = 9,
	Summon_Entry                             = 10,
	Summon_Confront                          = 11,
	Summon_Ability                           = 12,
	Summon_Approach                          = 13,
	Summon_Beside                            = 14,
	Chase                                    = 15,
	Chocobo_Rage                             = 16,
	Max                                      = 17,
};

// Enum EndGame.EAutoDoorActiveEffectType
// NumValues: 0x0005
enum class EAutoDoorActiveEffectType : uint8
{
	AutoDoorActiveNone                       = 0,
	AutoDoorActiveLeft                       = 1,
	AutoDoorActiveRight                      = 2,
	AutoDoorActiveBath                       = 3,
	EAutoDoorActiveEffectType_MAX            = 4,
};

// Enum EndGame.EEndOneWayType
// NumValues: 0x0003
enum class EEndOneWayType : uint32
{
	RightToLeft                              = 0,
	LeftToRight                              = 1,
	EEndOneWayType_MAX                       = 2,
};

// Enum EndGame.EEndBenchType
// NumValues: 0x0003
enum class EEndBenchType : uint8
{
	NormalChair                              = 0,
	ScarletChair                             = 1,
	EEndBenchType_MAX                        = 2,
};

// Enum EndGame.EEndCardKeyDoorTerminalType
// NumValues: 0x0003
enum class EEndCardKeyDoorTerminalType : uint32
{
	OneTerminal                              = 0,
	TwoTerminals                             = 1,
	EEndCardKeyDoorTerminalType_MAX          = 2,
};

// Enum EndGame.EEndCardKeyDoorType
// NumValues: 0x0003
enum class EEndCardKeyDoorType : uint32
{
	HoldDown                                 = 0,
	HoldOverWall                             = 1,
	EEndCardKeyDoorType_MAX                  = 2,
};

// Enum EndGame.EEndCrackMoveType
// NumValues: 0x0003
enum class EEndCrackMoveType : uint8
{
	FrontWall                                = 0,
	BackWall                                 = 1,
	EEndCrackMoveType_MAX                    = 2,
};

// Enum EndGame.EEndCrouchedMoveType
// NumValues: 0x0003
enum class EEndCrouchedMoveType : uint8
{
	Default                                  = 0,
	Wind                                     = 1,
	EEndCrouchedMoveType_MAX                 = 2,
};

// Enum EndGame.ECrouchedType
// NumValues: 0x0003
enum class ECrouchedType : uint8
{
	FixCoordinates                           = 0,
	FixDirection                             = 1,
	ECrouchedType_MAX                        = 2,
};

// Enum EndGame.ECurtainActiveEffectType
// NumValues: 0x0005
enum class ECurtainActiveEffectType : uint8
{
	CurtainActiveNone                        = 0,
	CurtainActiveLeft                        = 1,
	CurtainActiveRight                       = 2,
	CurtainActiveBath                        = 3,
	ECurtainActiveEffectType_MAX             = 4,
};

// Enum EndGame.EDoorTurnHandleType
// NumValues: 0x0004
enum class EDoorTurnHandleType : uint8
{
	None                                     = 0,
	TurnHandleRight                          = 1,
	TurnHandleLeft                           = 2,
	EDoorTurnHandleType_MAX                  = 3,
};

// Enum EndGame.EDoorActiveEffectType
// NumValues: 0x0005
enum class EDoorActiveEffectType : uint8
{
	ActiveNone                               = 0,
	ActiveLeft                               = 1,
	ActiveRight                              = 2,
	ActiveBath                               = 3,
	EDoorActiveEffectType_MAX                = 4,
};

// Enum EndGame.EDoorType
// NumValues: 0x0007
enum class EDoorType : uint8
{
	NormalDoor                               = 0,
	PressDoor                                = 1,
	AerithDoor                               = 2,
	SeventhDoor                              = 3,
	DoubleDoors                              = 4,
	HandFirDoor                              = 5,
	MAX                                      = 6,
};

// Enum EndGame.EEndMoveOrder
// NumValues: 0x0005
enum class EEndMoveOrder : uint8
{
	None                                     = 0,
	Straight                                 = 1,
	LeftTurn                                 = 2,
	RightTurn                                = 3,
	EEndMoveOrder_MAX                        = 4,
};

// Enum EndGame.EEndPointOrder
// NumValues: 0x0003
enum class EEndPointOrder : uint8
{
	Lead                                     = 0,
	End                                      = 1,
	EEndPointOrder_MAX                       = 2,
};

// Enum EndGame.EEvadeType
// NumValues: 0x0003
enum class EEvadeType : uint8
{
	FixCoordinates                           = 0,
	FixDirection                             = 1,
	EEvadeType_MAX                           = 2,
};

// Enum EndGame.EEvadeActionType
// NumValues: 0x0003
enum class EEvadeActionType : uint8
{
	Normal                                   = 0,
	Short                                    = 1,
	EEvadeActionType_MAX                     = 2,
};

// Enum EndGame.EEndFieldActionHangMoveDirection
// NumValues: 0x0003
enum class EEndFieldActionHangMoveDirection : uint8
{
	LEFT_MOVE                                = 0,
	RIGHT_MOVE                               = 1,
	EEndFieldActionHangMoveDirection_MAX     = 2,
};

// Enum EndGame.EHookShotSeType
// NumValues: 0x0004
enum class EHookShotSeType : uint8
{
	Concrete                                 = 0,
	IronPlate                                = 1,
	SteelFrame                               = 2,
	EHookShotSeType_MAX                      = 3,
};

// Enum EndGame.EJumpType
// NumValues: 0x0005
enum class EJumpType : uint8
{
	JumpOff                                  = 0,
	JumpOver                                 = 1,
	straddle                                 = 2,
	JumpOn                                   = 3,
	EJumpType_MAX                            = 4,
};

// Enum EndGame.EJumpStartType
// NumValues: 0x0005
enum class EJumpStartType : uint8
{
	FixCoordinates                           = 0,
	FixDirectionEnterToExit                  = 1,
	FixDirectionExitToEnter                  = 2,
	FixDirection                             = 3,
	EJumpStartType_MAX                       = 4,
};

// Enum EndGame.ELiftingRopeActorMoveType
// NumValues: 0x0003
enum class ELiftingRopeActorMoveType : uint8
{
	UpperToLower                             = 0,
	LowerToUpper                             = 1,
	ELiftingRopeActorMoveType_MAX            = 2,
};

// Enum EndGame.EElevatorButtonType
// NumValues: 0x0003
enum class EElevatorButtonType : uint8
{
	Up                                       = 0,
	Down                                     = 1,
	EElevatorButtonType_MAX                  = 2,
};

// Enum EndGame.EOperationType
// NumValues: 0x0005
enum class EOperationType : uint8
{
	DownButton                               = 0,
	WallButton                               = 1,
	KeyBoard                                 = 2,
	Elevator                                 = 3,
	MAX                                      = 4,
};

// Enum EndGame.EParkourJumpLandingType
// NumValues: 0x0005
enum class EParkourJumpLandingType : uint8
{
	ParkourJumpLandingAuto                   = 0,
	ParkourJumpLandingStand                  = 1,
	ParkourJumpLandingRoll                   = 2,
	ParkourJumpSlideDown                     = 3,
	EParkourJumpLandingType_MAX              = 4,
};

// Enum EndGame.EParkourJumpType
// NumValues: 0x0005
enum class EParkourJumpType : uint8
{
	ParkourJumpShort                         = 0,
	ParkourJumpLong                          = 1,
	ParkourJumpFall                          = 2,
	ParkourJumpSpecial                       = 3,
	EParkourJumpType_MAX                     = 4,
};

// Enum EndGame.EPassOverType
// NumValues: 0x0003
enum class EPassOverType : uint8
{
	PassOverShort                            = 0,
	PassOverLong                             = 1,
	EPassOverType_MAX                        = 2,
};

// Enum EndGame.ERubbleJumpType
// NumValues: 0x0003
enum class ERubbleJumpType : uint8
{
	FixCoordinates                           = 0,
	FixDirection                             = 1,
	ERubbleJumpType_MAX                      = 2,
};

// Enum EndGame.EEndTarzanJumpType
// NumValues: 0x0007
enum class EEndTarzanJumpType : uint8
{
	Chandelier                               = 0,
	ChandelierCross                          = 1,
	ChandelierCrossEnd                       = 2,
	Rope                                     = 3,
	RopeSmall                                = 4,
	MAX                                      = 5,
	None                                     = 6,
};

// Enum EndGame.EWallRunMoveType
// NumValues: 0x0005
enum class EWallRunMoveType : uint8
{
	MoveOneWay_CW                            = 0,
	MoveOneWay_CCW                           = 1,
	MoveRoundTrip_CW                         = 2,
	MoveRoundTrip_CCW                        = 3,
	EWallRunMoveType_MAX                     = 4,
};

// Enum EndGame.EEndWireMeshMoveStartType
// NumValues: 0x0003
enum class EEndWireMeshMoveStartType : uint8
{
	Left                                     = 0,
	Right                                    = 1,
	EEndWireMeshMoveStartType_MAX            = 2,
};

// Enum EndGame.EEndFieldAIAccompanyState
// NumValues: 0x0003
enum class EEndFieldAIAccompanyState : uint8
{
	STATE_WAIT                               = 0,
	STATE_MOVE                               = 1,
	STATE_MAX                                = 2,
};

// Enum EndGame.EEndFieldAIAnimationState
// NumValues: 0x0003
enum class EEndFieldAIAnimationState : uint8
{
	STATE_LOAD                               = 0,
	STATE_PLAY                               = 1,
	STATE_MAX                                = 2,
};

// Enum EndGame.FFieldAiSlot
// NumValues: 0x0011
enum class EFFieldAiSlot : uint8
{
	FFieldAiSlot_RESIDENT                    = 0,
	FFieldAiSlot_FIELD_FORCE                 = 1,
	FFieldAiSlot_INTEREST_DEFAULT            = 2,
	FFieldAiSlot_MINIGAME_LOW                = 3,
	FFieldAiSlot_FIELD_COMMON                = 4,
	FFieldAiSlot_FIELD_PLEVENT               = 5,
	FFieldAiSlot_FIELD_ANIMATION             = 6,
	FFieldAiSlot_FIELD_ACTION                = 7,
	FFieldAiSlot_CAUTION                     = 8,
	FFieldAiSlot_INTEREST_HIGH               = 9,
	FFieldAiSlot_SITUATION                   = 10,
	FFieldAiSlot_MINIGAME                    = 11,
	FFieldAiSlot_FIELD_CINEMA                = 12,
	FFieldAiSlot_CINEMA                      = 13,
	FFieldAiSlot_DEBUG                       = 14,
	FFieldAiSlot_MAX                         = 15,
	FFieldAiSlot_EMPTY                       = 16,
};

// Enum EndGame.FFieldAiType
// NumValues: 0x000F
enum class EFFieldAiType : uint8
{
	FFieldAiType_EMPTY                       = 0,
	FFieldAiType_NONE                        = 1,
	FFieldAiType_STAY                        = 2,
	FFieldAiType_FOLLOW_TARGET               = 3,
	FFieldAiType_FOLLOW_POSITION             = 4,
	FFieldAiType_ANIMATION                   = 5,
	FFieldAiType_SINGLE_ANIMATION            = 6,
	FFieldAiType_LEAD                        = 7,
	FFieldAiType_ESCAPE_POSITION             = 8,
	FFieldAiType_WANDERING                   = 9,
	FFieldAiType_PATROL                      = 10,
	FFieldAiType_ACCOMPANY                   = 11,
	FFieldAiType_INTEREST                    = 12,
	FFieldAiType_UNIQUE                      = 13,
	FFieldAiType_MAX                         = 14,
};

// Enum EndGame.EEndFieldAIFollowPositionState
// NumValues: 0x0005
enum class EEndFieldAIFollowPositionState : uint8
{
	STATE_MOVE                               = 0,
	STATE_GOAL_ROT                           = 1,
	STATE_GOAL                               = 2,
	STATE_PUSHINGOUT                         = 3,
	STATE_MAX                                = 4,
};

// Enum EndGame.EEndFieldAIFollowTargetState
// NumValues: 0x0003
enum class EEndFieldAIFollowTargetState : uint8
{
	STATE_WAIT                               = 0,
	STATE_MOVE                               = 1,
	STATE_MAX                                = 2,
};

// Enum EndGame.EEndFieldAILeadState
// NumValues: 0x0008
enum class EEndFieldAILeadState : uint8
{
	STATE_WAIT                               = 0,
	STATE_MOVE                               = 1,
	STATE_TURN                               = 2,
	STATE_GOAL_ROT                           = 3,
	STATE_GOAL                               = 4,
	STATE_PUSHINGOUT                         = 5,
	STATE_TURNBACK                           = 6,
	STATE_MAX                                = 7,
};

// Enum EndGame.EEndFieldAIPatrolState
// NumValues: 0x000D
enum class EEndFieldAIPatrolState : uint8
{
	STATE_NONE                               = 0,
	STATE_MOVE                               = 1,
	STATE_GOALTURN                           = 2,
	STATE_PUSHINGOUT                         = 3,
	STATE_SINGLEANIM                         = 4,
	STATE_LOOPANIM                           = 5,
	STATE_LOADANIM                           = 6,
	STATE_WAIT                               = 7,
	STATE_AIRMOVE                            = 8,
	STATE_SPOTTURN                           = 9,
	STATE_WANDERING                          = 10,
	STATE_TRIGGER_WAIT                       = 11,
	STATE_MAX                                = 12,
};

// Enum EndGame.EEndFieldAISingleAnimationState
// NumValues: 0x0004
enum class EEndFieldAISingleAnimationState : uint8
{
	STATE_LOAD                               = 0,
	STATE_PLAY                               = 1,
	STATE_END                                = 2,
	STATE_MAX                                = 3,
};

// Enum EndGame.EEndFieldAIStayState
// NumValues: 0x0006
enum class EEndFieldAIStayState : uint8
{
	STATE_WAIT                               = 0,
	STATE_RETURN                             = 1,
	STATE_CINEMAMOVE                         = 2,
	STATE_CINEMARETURN                       = 3,
	STATE_CINEMATURN                         = 4,
	STATE_MAX                                = 5,
};

// Enum EndGame.EEndFieldAIWanderingState
// NumValues: 0x0006
enum class EEndFieldAIWanderingState : uint8
{
	STATE_LOTTERY                            = 0,
	STATE_WAIT                               = 1,
	STATE_CALC_POS                           = 2,
	STATE_MOVE                               = 3,
	STATE_RETURN                             = 4,
	STATE_MAX                                = 5,
};

// Enum EndGame.EDataTableType
// NumValues: 0x0005
enum class EDataTableType : uint8
{
	EDataTableType_FILED                     = 0,
	EDataTableType_RESIDNET                  = 1,
	EDataTableType_DEBUG                     = 2,
	EDataTableType_Max                       = 3,
	EDataTableType_DEBUG_Max                 = 128,
};

// Enum EndGame.EEncountEnemyAccessorType
// NumValues: 0x0007
enum class EEncountEnemyAccessorType : uint8
{
	EnemyAccesor                             = 0,
	EncountEnemyAccessor                     = 1,
	EncountAndPreEncountEnemyAccessor        = 2,
	EncountAndPreEncountAndDummyEnemyAccessor = 3,
	EncountDummyEnemyAccessor                = 4,
	EncountHideEnemyAccessor                 = 5,
	EEncountEnemyAccessorType_MAX            = 6,
};

// Enum EndGame.EEndFinishBattleType
// NumValues: 0x0003
enum class EEndFinishBattleType : uint8
{
	None                                     = 0,
	Battle2Cinema                            = 1,
	EEndFinishBattleType_MAX                 = 2,
};

// Enum EndGame.EEndUnstableSaveDataDebug
// NumValues: 0x0003
enum class EEndUnstableSaveDataDebug : uint8
{
	Difference                               = 0,
	AddObject                                = 1,
	EEndUnstableSaveDataDebug_MAX            = 2,
};

// Enum EndGame.EEndFieldAIFollowPosition
// NumValues: 0x0003
enum class EEndFieldAIFollowPosition : uint8
{
	FORWARD                                  = 0,
	BACKWARD                                 = 1,
	EEndFieldAIFollowPosition_MAX            = 2,
};

// Enum EndGame.EEndFieldCharacterTickType
// NumValues: 0x0005
enum class EEndFieldCharacterTickType : uint8
{
	None                                     = 0,
	TickLight                                = 1,
	TickMiddle                               = 2,
	TickHeavy                                = 3,
	Max                                      = 4,
};

// Enum EndGame.EEndCameraPoleStateType
// NumValues: 0x0005
enum class EEndCameraPoleStateType : uint8
{
	BlendIn                                  = 0,
	Move                                     = 1,
	BlendOut                                 = 2,
	WaitForRotation                          = 3,
	MAX                                      = 4,
};

// Enum EndGame.EEndCameraDuctStateType
// NumValues: 0x0006
enum class EEndCameraDuctStateType : uint8
{
	RotateIn                                 = 0,
	Enter                                    = 1,
	Move                                     = 2,
	Leave                                    = 3,
	LerpArmLength                            = 4,
	MAX                                      = 5,
};

// Enum EndGame.EEndCameraHookshotStateType
// NumValues: 0x0004
enum class EEndCameraHookshotStateType : uint8
{
	Enter                                    = 0,
	Move                                     = 1,
	Leave                                    = 2,
	MAX                                      = 3,
};

// Enum EndGame.EEndCameraCustomFieldActionStateType
// NumValues: 0x0005
enum class EEndCameraCustomFieldActionStateType : uint8
{
	Enter                                    = 0,
	Move                                     = 1,
	Leave                                    = 2,
	LerpArmLength                            = 3,
	MAX                                      = 4,
};

// Enum EndGame.EEndCameraLadderStateType
// NumValues: 0x0004
enum class EEndCameraLadderStateType : uint8
{
	Enter                                    = 0,
	Move                                     = 1,
	Leave                                    = 2,
	MAX                                      = 3,
};

// Enum EndGame.EEndCameraFadeLeaderChangeStateType
// NumValues: 0x0003
enum class EEndCameraFadeLeaderChangeStateType : uint8
{
	Enter                                    = 0,
	Leave                                    = 1,
	MAX                                      = 2,
};

// Enum EndGame.EEndCameraLeaderChangeStateType
// NumValues: 0x0003
enum class EEndCameraLeaderChangeStateType : uint8
{
	Leave                                    = 0,
	Round                                    = 1,
	MAX                                      = 2,
};

// Enum EndGame.EEndFieldCameraOperatorFlavorType
// NumValues: 0x001E
enum class EEndFieldCameraOperatorFlavorType : uint8
{
	Corner                                   = 0,
	Slope                                    = 1,
	MoveFollow                               = 2,
	SpaceOffset                              = 3,
	TargetLength                             = 4,
	TargetOffset                             = 5,
	CutConnect                               = 6,
	ResetTurnBack                            = 7,
	Reset                                    = 8,
	ActionFollow                             = 9,
	ActionFollowField                        = 10,
	ConnectSyncAction                        = 11,
	BarretShootingAction                     = 12,
	Command                                  = 13,
	PostStateLock                            = 14,
	Ladder                                   = 15,
	Hookshot                                 = 16,
	Duct                                     = 17,
	Rope                                     = 18,
	Peek                                     = 19,
	CustomizableFieldAction                  = 20,
	NotifyOverride                           = 21,
	Scan                                     = 22,
	LookAtTurnBack                           = 23,
	LookAt                                   = 24,
	Override                                 = 25,
	FadeLeaderChange                         = 26,
	PersonalLeaderChange                     = 27,
	LeaderChange                             = 28,
	MAX                                      = 29,
};

// Enum EndGame.EEndFieldCameraOperatorStateType
// NumValues: 0x0003
enum class EEndFieldCameraOperatorStateType : uint8
{
	Free                                     = 0,
	Lock                                     = 1,
	MAX                                      = 2,
};

// Enum EndGame.EEndFieldCameraOperatorSettingType
// NumValues: 0x0006
enum class EEndFieldCameraOperatorSettingType : uint8
{
	Default                                  = 0,
	Town                                     = 1,
	InDoor                                   = 2,
	Override                                 = 3,
	Battle                                   = 4,
	MAX                                      = 5,
};

// Enum EndGame.EEndLocationWorkOperationType
// NumValues: 0x0004
enum class EEndLocationWorkOperationType : uint8
{
	Set                                      = 0,
	Add                                      = 1,
	Sub                                      = 2,
	EEndLocationWorkOperationType_MAX        = 3,
};

// Enum EndGame.EEndMovementRestriction
// NumValues: 0x0005
enum class EEndMovementRestriction : uint8
{
	None                                     = 0,
	WalkOnlyToDestination                    = 1,
	ForceWalkToDestination                   = 2,
	ForceWalkToDestinationAtSameSpeed        = 3,
	MAX                                      = 4,
};

// Enum EndGame.EEndSpecificMoveType
// NumValues: 0x0007
enum class EEndSpecificMoveType : uint8
{
	Walk                                     = 0,
	HighWalk                                 = 1,
	Jog                                      = 2,
	Run                                      = 3,
	None                                     = 4,
	Max                                      = 5,
	Empty                                    = 6,
};

// Enum EndGame.EEndFieldFlag
// NumValues: 0x0007
enum class EEndFieldFlag : uint8
{
	ActionStartChapter                       = 0,
	StartUninitParsistant                    = 1,
	LocationJumpBlack                        = 2,
	UseMenuChapterSelect                     = 3,
	LocationJumpToCutScene                   = 4,
	ExecuteActionCutScene                    = 5,
	EEndFieldFlag_MAX                        = 6,
};

// Enum EndGame.EEndDebugFlag
// NumValues: 0x0009
enum class EEndDebugFlag : uint8
{
	IgnoreLocationDataTable                  = 0,
	EntryLocationFieldTest                   = 1,
	EntryLocationBattleTest                  = 2,
	EntryLocationBegining                    = 3,
	EncountLogOutput                         = 4,
	BeginEntryLocationUnInitSaveData         = 5,
	SingleLocationUmap                       = 6,
	ScenarioDebug                            = 7,
	EEndDebugFlag_MAX                        = 8,
};

// Enum EndGame.EEndStateTriggerSaveDataType
// NumValues: 0x0009
enum class EEndStateTriggerSaveDataType : uint8
{
	None                                     = 0,
	SnapSaveData                             = 1,
	SafetySaveData_AutoSaveData              = 2,
	AutoSaveData                             = 3,
	SnapSaveData_AutoSaveData                = 4,
	SnapSaveData_SafetySaveData_AutoSaveData = 5,
	SnapOutput_SafetySaveData_AutoSaveData   = 6,
	SnapOutput_AutoSaveData                  = 7,
	EEndStateTriggerSaveDataType_MAX         = 8,
};

// Enum EndGame.EEndStateTriggerSpecialType
// NumValues: 0x0005
enum class EEndStateTriggerSpecialType : uint8
{
	None                                     = 0,
	EnvironmentAnimationLastFrame            = 1,
	IgnoreDelay                              = 2,
	IgnoreSe                                 = 3,
	EEndStateTriggerSpecialType_MAX          = 4,
};

// Enum EndGame.EEndSituationActionFinishType
// NumValues: 0x0003
enum class EEndSituationActionFinishType : uint8
{
	OneAnimation                             = 0,
	EndOverlapBox                            = 1,
	EEndSituationActionFinishType_MAX        = 2,
};

// Enum EndGame.EEndSituationActionType
// NumValues: 0x0004
enum class EEndSituationActionType : uint8
{
	None                                     = 0,
	BoxFitDirection                          = 1,
	PointFitLocationDirection                = 2,
	EEndSituationActionType_MAX              = 3,
};

// Enum EndGame.EEndSituationTriggerType
// NumValues: 0x0005
enum class EEndSituationTriggerType : uint8
{
	BoxOverlap                               = 0,
	BoxOverlapDirection                      = 1,
	BoxOverlapDirectionBoth                  = 2,
	TargetIcon                               = 3,
	EEndSituationTriggerType_MAX             = 4,
};

// Enum EndGame.EEndStateAttribute
// NumValues: 0x0023
enum class EEndStateAttribute : uint8
{
	OnOff                                    = 0,
	BeginOverlapTrigger                      = 1,
	Effect                                   = 2,
	PlannerLevelSet                          = 3,
	AI                                       = 4,
	TargetIcon                               = 5,
	General                                  = 6,
	Attribute07                              = 7,
	EnvironmentAnimation                     = 8,
	EndOverlapTrigger                        = 9,
	ResponseAreaAction                       = 10,
	MotionState                              = 11,
	EnvironmentAnimationInnerOuter           = 12,
	AttachActor0                             = 13,
	AttachActor1                             = 14,
	AttachActor2                             = 15,
	SideDestination                          = 16,
	DisableLookAt                            = 17,
	AttachActor3                             = 18,
	Attribute19                              = 19,
	Attribute20                              = 20,
	Attribute21                              = 21,
	Attribute22                              = 22,
	Attribute23                              = 23,
	Attribute24                              = 24,
	Attribute25                              = 25,
	Attribute26                              = 26,
	Attribute27                              = 27,
	DebugDebugDebug                          = 28,
	BattleScene                              = 29,
	PlacementEnvironmentSet                  = 30,
	PlacementPlannerLevelSet                 = 31,
	AttributeMax                             = 32,
	None                                     = 33,
	EEndStateAttribute_MAX                   = 34,
};

// Enum EndGame.EndSwitchingAnimStatus
// NumValues: 0x0005
enum class EndSwitchingAnimStatus : uint8
{
	EndSwitchingAnimStatus_Outer             = 0,
	EndSwitchingAnimStatus_Inner             = 1,
	EndSwitchingAnimStatus_OuterInner        = 2,
	EndSwitchingAnimStatus_InnerOuter        = 3,
	EndSwitchingAnimStatus_Max               = 4,
};

// Enum EndGame.EndFieldStateTriggerScope
// NumValues: 0x0005
enum class EndFieldStateTriggerScope : uint8
{
	EndFieldStateTriggerScope_Self           = 0,
	EndFieldStateTriggerScope_Location       = 1,
	EndFieldStateTriggerScope_ResidentAndLocation = 2,
	EndFieldStateTriggerScope_SpecificObject = 3,
	EndFieldStateTriggerScope_Max            = 4,
};

// Enum EndGame.EFieldActionActorType
// NumValues: 0x002A
enum class EFieldActionActorType : uint8
{
	None                                     = 0,
	Ladder                                   = 1,
	Door                                     = 2,
	CrouchedMove                             = 3,
	CrackMove                                = 4,
	AutoDoor                                 = 5,
	BalanceMove                              = 6,
	Cocoon                                   = 7,
	Jump                                     = 8,
	Trap                                     = 9,
	MonkeyBars                               = 10,
	OperationBoard                           = 11,
	VendingMachine                           = 12,
	DuctMove                                 = 13,
	BenchBreak                               = 14,
	HookShot                                 = 15,
	Sliding                                  = 16,
	SlideDown                                = 17,
	PassOver                                 = 18,
	ParkourJump                              = 19,
	CrackFan                                 = 20,
	Climb                                    = 21,
	TarzanJump                               = 22,
	CardKeyDoor                              = 23,
	JukeBox                                  = 24,
	HangMove                                 = 25,
	Curtain                                  = 26,
	PassThrough                              = 27,
	RubbleJump                               = 28,
	HeavyDoor                                = 29,
	WMElevator                               = 30,
	BarCounter                               = 31,
	Evade                                    = 32,
	PushBox                                  = 33,
	ShinraElevator                           = 34,
	WallRun                                  = 35,
	Peek                                     = 36,
	TarzanRope                               = 37,
	WireMeshMove                             = 38,
	PoleSlider                               = 39,
	LiftingRope                              = 40,
	Max                                      = 41,
};

// Enum EndGame.EEndAerialNavAreaType
// NumValues: 0x0002
enum class EEndAerialNavAreaType : uint8
{
	Default                                  = 0,
	Max                                      = 1,
};

// Enum EndGame.EEndQueryFilterType
// NumValues: 0x0014
enum class EEndQueryFilterType : uint8
{
	Default                                  = 0,
	Battle                                   = 1,
	BattleCaution                            = 2,
	SimpleBattle                             = 3,
	NoBattle                                 = 4,
	Cover                                    = 5,
	NoCost                                   = 6,
	CentralWayStreet                         = 7,
	RightWayStreet                           = 8,
	LeftWayStreet                            = 9,
	CinemaFilter                             = 10,
	NoFieldAction                            = 11,
	NoCinemaObstacle                         = 12,
	Custom                                   = 13,
	FlatlandsOnly                            = 14,
	WaterSurfaceOnly                         = 15,
	MountainOnly                             = 16,
	FlatlandsWaterSurface                    = 17,
	FlatlandsMountain                        = 18,
	Max                                      = 19,
};

// Enum EndGame.EEndNavAreaType
// NumValues: 0x0021
enum class EEndNavAreaType : uint8
{
	NullArea                                 = 0,
	Ladder                                   = 1,
	Cover                                    = 2,
	BattleArea                               = 3,
	CationArea                               = 4,
	Impassable                               = 5,
	Obstacle                                 = 6,
	Ignore                                   = 7,
	Versatile                                = 8,
	InDoor                                   = 9,
	RedLaser                                 = 10,
	Door                                     = 11,
	CrouchedMove                             = 12,
	CrackMove                                = 13,
	PathWay                                  = 14,
	CentralPathWay                           = 15,
	ExtendedBattleArea                       = 16,
	FieldAction                              = 17,
	CinemaObstacle                           = 18,
	HookShot                                 = 19,
	AddAttribute                             = 20,
	Versatile2                               = 21,
	Versatile3                               = 22,
	Versatile4                               = 23,
	Impassable2                              = 24,
	AddAttribute2                            = 25,
	AddAttribute3                            = 26,
	AddAttribute4                            = 27,
	Flatlands                                = 28,
	WaterSurface                             = 29,
	Mountain                                 = 30,
	Max                                      = 31,
	None                                     = 32,
};

// Enum EndGame.EndCurveBlendType
// NumValues: 0x000B
enum class EndCurveBlendType : uint8
{
	Linear                                   = 0,
	Curve                                    = 1,
	SlowInFastOut                            = 2,
	FastInSlowOut                            = 3,
	Hermite                                  = 4,
	SlowInSlowOut                            = 5,
	SlowInSlowOutCirc                        = 6,
	SlowOutExpo                              = 7,
	FastInExpo                               = 8,
	CurveBlendTypeMax                        = 9,
	EndCurveBlendType_MAX                    = 10,
};

// Enum EndGame.EndWaveBattleSceneType
// NumValues: 0x0004
enum class EndWaveBattleSceneType : uint8
{
	EndWaveBattleSceneType_Next              = 0,
	EndWaveBattleSceneType_Direct            = 1,
	EndWaveBattleSceneType_Random            = 2,
	EndWaveBattleSceneType_Max               = 3,
};

// Enum EndGame.EncountStep
// NumValues: 0x0007
enum class EncountStep : uint8
{
	ActorPopWait                             = 0,
	ReadyEncount                             = 1,
	EncountEnd                               = 2,
	Finish                                   = 3,
	Remove                                   = 4,
	StepMax                                  = 5,
	EncountStep_MAX                          = 6,
};

// Enum EndGame.EndOnOffStatus
// NumValues: 0x000B
enum class EndOnOffStatus : uint8
{
	EndOnOffStatus_On                        = 0,
	EndOnOffStatus_Off                       = 1,
	EndOnOffStatus_OnOverrideHide            = 2,
	EndOnOffStatus_OnHide                    = 3,
	EndOnOffStatus_OnForce                   = 4,
	EndOnOffStatus_OnDisable                 = 5,
	EndOnOffStatus_OnOverrideHideBattle      = 6,
	EndOnOffStatus_OnPause                   = 7,
	EndOnOffStatus_OnAsset                   = 8,
	EndOnOffStatus_OnDrawPause               = 9,
	EndOnOffStatus_Max                       = 10,
};

// Enum EndGame.EndFieldBGMLayer
// NumValues: 0x0009
enum class EndFieldBGMLayer : uint8
{
	EndFieldBGMLayer_Debug                   = 0,
	EndFieldBGMLayer_CutScene                = 1,
	EndFieldBGMLayer_MiniGame                = 2,
	EndFieldBGMLayer_Battle                  = 3,
	EndFieldBGMLayer_PreBattle               = 4,
	EndFieldBGMLayer_Field                   = 5,
	EndFieldBGMLayer_Foot                    = 6,
	EndFieldBGMLayer_Title                   = 7,
	EndFieldBGMLayer_Max                     = 8,
};

// Enum EndGame.EndFieldOnOffTable
// NumValues: 0x005D
enum class EndFieldOnOffTable : uint8
{
	EndFieldOnOffTable_HideFieldMenu         = 0,
	EndFieldOnOffTable_ReleaseEncount        = 1,
	EndFieldOnOffTable_DisableUpdateBattleParameter = 2,
	EndFieldOnOffTable_SuspendBattle         = 3,
	EndFieldOnOffTable_DisableFieldAction    = 4,
	EndFieldOnOffTable_HideNaviMap           = 5,
	EndFieldOnOffTable_HideSituationActionEffect = 6,
	EndFieldOnOffTable_FinishCutSceneSkip    = 7,
	EndFieldOnOffTable_HideEncountEnemy      = 8,
	EndFieldOnOffTable_DisableAutoTalk       = 9,
	EndFieldOnOffTable_DisableBattleTalk     = 10,
	EndFieldOnOffTable_DisableControlerFieldMenu = 11,
	EndFieldOnOffTable_ShowSkipPauseMenu     = 12,
	EndFieldOnOffTable_StopAI                = 13,
	EndFieldOnOffTable_IncreaseNavigationCost = 14,
	EndFieldOnOffTable_HideOverheadMenu      = 15,
	EndFieldOnOffTable_DisableMainMenu       = 16,
	EndFieldOnOffTable_DisableTutorial       = 17,
	EndFieldOnOffTable_DisableTriggerBox     = 18,
	EndFieldOnOffTable_GameOver              = 19,
	EndFieldOnOffTable_ForceEnableFieldCamera = 20,
	EndFieldOnOffTable_DisableBattleConditionTrigger = 21,
	EndFieldOnOffTable_Hide3DAudioTitleMenu  = 22,
	EndFieldOnOffTable_DisableOptionsButton  = 23,
	EndFieldOnOffTable_DisableTouchPad       = 24,
	EndFieldOnOffTable_KeepSnapSaveData      = 25,
	EndFieldOnOffTable_IgnoreBattleCommandItem = 26,
	EndFieldOnOffTable_IgnoreBattleCommandMagic = 27,
	EndFieldOnOffTable_FinishToad            = 28,
	EndFieldOnOffTable_SoundCallEventMovieInOut = 29,
	EndFieldOnOffTable_PauseMenu_00_Title_Skip = 30,
	EndFieldOnOffTable_PauseMenu_05_Game_Title = 31,
	EndFieldOnOffTable_PauseMenu_10          = 32,
	EndFieldOnOffTable_HideMessageLogs       = 33,
	EndFieldOnOffTable_HideTargetIcons       = 34,
	EndFieldOnOffTable_HeliMiniGameKnockBack = 35,
	EndFieldOnOffTable_MiniGamePlaying       = 36,
	EndFieldOnOffTable_HideMiniGameActor     = 37,
	EndFieldOnOffTable_DivideFrameUpdate     = 38,
	EndFieldOnOffTable_Game_Blackout         = 39,
	EndFieldOnOffTable_Level_Blackout        = 40,
	EndFieldOnOffTable_ShowLoadingScreen     = 41,
	EndFieldOnOffTable_HideFieldMenuWithPartyChange = 42,
	EndFieldOnOffTable_HideDyingFilter       = 43,
	EndFieldOnOffTable_DelayMessageLog       = 44,
	EndFieldOnOffTable_SoundCallEventCutSceneInOut = 45,
	EndFieldOnOffTable_RaisePriorityBattleTutorialOverPause = 46,
	EndFieldOnOffTable_RaisePriorityBattlePauseMenu = 47,
	EndFieldOnOffTable_Ignore_Level_Blackout = 48,
	EndFieldOnOffTable_FinishToad_Sephiroth  = 49,
	EndFieldOnOffTable_DelayGameOver         = 50,
	EndFieldOnOffTable_CameraBlendStop       = 51,
	EndFieldOnOffTable_ResetFieldCamera      = 52,
	EndFieldOnOffTable_ContinueEntryLocationBlackout = 53,
	EndFieldOnOffTable_IgnoreSleeperLaycast  = 54,
	EndFieldOnOffTable_55                    = 55,
	EndFieldOnOffTable_56                    = 56,
	EndFieldOnOffTable_57                    = 57,
	EndFieldOnOffTable_58                    = 58,
	EndFieldOnOffTable_59                    = 59,
	EndFieldOnOffTable_60                    = 60,
	EndFieldOnOffTable_DisableTurnBack       = 61,
	EndFieldOnOffTable_ShowTalkLog           = 62,
	EndFieldOnOffTable_ShowSubtitle          = 63,
	EndFieldOnOffTable_ShopBuy               = 64,
	EndFieldOnOffTable_ShopSale              = 65,
	EndFieldOnOffTable_ForceEnableFieldAction = 66,
	EndFieldOnOffTable_IgnorePcCaution       = 67,
	EndFieldOnOffTable_ShowBattleMenu        = 68,
	EndFieldOnOffTable_ShowPauseMenu         = 69,
	EndFieldOnOffTable_ForceUpdateStateSleeper = 70,
	EndFieldOnOffTable_ToTitle               = 71,
	EndFieldOnOffTable_ShowMainMenu          = 72,
	EndFieldOnOffTable_ShowShopMenu          = 73,
	EndFieldOnOffTable_ShowMapJournal        = 74,
	EndFieldOnOffTable_ShowTutorial          = 75,
	EndFieldOnOffTable_ShowTutorial_TouchPanel = 76,
	EndFieldOnOffTable_HideFieldCommandMenu  = 77,
	EndFieldOnOffTable_ShowColosseumMenu     = 78,
	EndFieldOnOffTable_HideFieldPane         = 79,
	EndFieldOnOffTable_PauseMenu_01_StopBGM  = 80,
	EndFieldOnOffTable_PauseMenu_02          = 81,
	EndFieldOnOffTable_PauseMenu_03          = 82,
	EndFieldOnOffTable_PauseMenu_04          = 83,
	EndFieldOnOffTable_PauseMenu_06          = 84,
	EndFieldOnOffTable_PauseMenu_08          = 85,
	EndFieldOnOffTable_PauseMenu_09          = 86,
	EndFieldOnOffTable_PauseMenu_11          = 87,
	EndFieldOnOffTable_PauseMenu_12          = 88,
	EndFieldOnOffTable_PauseMenu_13          = 89,
	EndFieldOnOffTable_PauseMenu_14          = 90,
	EndFieldOnOffTable_PauseMenu_15          = 91,
	EndFieldOnOffTable_Max                   = 92,
};

// Enum EndGame.EndFieldSkipType
// NumValues: 0x0005
enum class EndFieldSkipType : uint8
{
	CutScene                                 = 0,
	PlannerEvent                             = 1,
	Other                                    = 2,
	None                                     = 3,
	MAX                                      = 4,
};

// Enum EndGame.EndFieldExclusion
// NumValues: 0x0021
enum class EndFieldExclusion : uint8
{
	EndFieldExclusion_DisableController      = 0,
	EndFieldExclusion_DisableController_2nd  = 1,
	EndFieldExclusion_DisableController_Treasure = 2,
	EndFieldExclusion_03                     = 3,
	EndFieldExclusion_04                     = 4,
	EndFieldExclusion_05                     = 5,
	EndFieldExclusion_06                     = 6,
	EndFieldExclusion_07                     = 7,
	EndFieldExclusion_08                     = 8,
	EndFieldExclusion_09                     = 9,
	EndFieldExclusion_10                     = 10,
	EndFieldExclusion_11                     = 11,
	EndFieldExclusion_12                     = 12,
	EndFieldExclusion_13                     = 13,
	EndFieldExclusion_14                     = 14,
	EndFieldExclusion_15                     = 15,
	EndFieldExclusion_DisableController_TurnBack = 16,
	EndFieldExclusion_DisableController_FinishCutSceneSkip = 17,
	EndFieldExclusion_DisableController_LocationJump = 18,
	EndFieldExclusion_DisableController_DialogFromAction = 19,
	EndFieldExclusion_DisableController_PushButtonAction = 20,
	EndFieldExclusion_DisableController_MiniGame = 21,
	EndFieldExclusion_DisableController_Battle2Cinema = 22,
	EndFieldExclusion_DisableController_FieldAttack = 23,
	EndFieldExclusion_DiableController_Delay_FieldAttack = 24,
	EndFieldExclusion_25                     = 25,
	EndFieldExclusion_26                     = 26,
	EndFieldExclusion_27                     = 27,
	EndFieldExclusion_28                     = 28,
	EndFieldExclusion_29                     = 29,
	EndFieldExclusion_30                     = 30,
	EndFieldExclusion_31                     = 31,
	EndFieldExclusion_Max                    = 32,
};

// Enum EndGame.EndFieldObjectProgramIds
// NumValues: 0x0021
enum class EndFieldObjectProgramIds : uint8
{
	objCmn_Prog00_DelayAutoSave              = 0,
	objCmn_Prog01                            = 1,
	objCmn_Prog02                            = 2,
	objCmn_Prog03                            = 3,
	objCmn_Prog04                            = 4,
	objCmn_Prog05                            = 5,
	objCmn_Prog06                            = 6,
	objCmn_Prog07                            = 7,
	objCmn_ProgDebug                         = 8,
	objCmn_Prog09                            = 9,
	objCmn_Prog10                            = 10,
	objCmn_Prog11                            = 11,
	objCmn_Prog12                            = 12,
	objCmn_Prog13                            = 13,
	objCmn_Prog14                            = 14,
	objCmn_Prog15                            = 15,
	objCmn_ProgDarts                         = 16,
	objCmn_ProgJukeBox                       = 17,
	objCmn_ProgCrane                         = 18,
	objCmn_ProgBench                         = 19,
	objCmn_ProgVendingMachine                = 20,
	objCmn_ProgSquat                         = 21,
	objCmn_ProgChinUp                        = 22,
	objCmn_ProgBreakBox                      = 23,
	objCmn_ProgShinraElevator                = 24,
	objCmn_ProgColosseum                     = 25,
	objCmn_Prog26                            = 26,
	objCmn_Prog27                            = 27,
	objCmn_Prog28                            = 28,
	objCmn_Prog29                            = 29,
	objCmn_Prog30                            = 30,
	objCmn_Prog31                            = 31,
	Max                                      = 32,
};

// Enum EndGame.BattleStep
// NumValues: 0x0006
enum class EBattleStep : uint8
{
	NormalStep                               = 0,
	EscapingStep                             = 1,
	WarningStep                              = 2,
	AggressiveStep                           = 3,
	BattleModeStepMax                        = 4,
	BattleStep_MAX                           = 5,
};

// Enum EndGame.BattleModeStep
// NumValues: 0x0009
enum class EBattleModeStep : uint8
{
	Normal                                   = 0,
	Warning                                  = 1,
	ToAggressive                             = 2,
	Aggressive                               = 3,
	Escaping                                 = 4,
	EscapingWait                             = 5,
	ExitBattleSceneWait                      = 6,
	BattleModeStep_StepMax                   = 7,
	BattleModeStep_MAX                       = 8,
};

// Enum EndGame.EndBattleMode
// NumValues: 0x0004
enum class EndBattleMode : uint8
{
	EndBattleMode_Normal                     = 0,
	EndBattleMode_Warning                    = 1,
	EndBattleMode_Aggressive                 = 2,
	EndBattleMode_Max                        = 3,
};

// Enum EndGame.EEndFieldManagerSetupWaitRetryType
// NumValues: 0x0006
enum class EEndFieldManagerSetupWaitRetryType : uint8
{
	None                                     = 0,
	WaitCharaAttach                          = 1,
	WaitTextureStreaming                     = 2,
	WaitCharaPopUpdateTickLOD                = 3,
	WaitCharaPopStableTimer                  = 4,
	EEndFieldManagerSetupWaitRetryType_MAX   = 5,
};

// Enum EndGame.TextureStreamingStep
// NumValues: 0x0004
enum class ETextureStreamingStep : uint8
{
	None                                     = 0,
	Wait                                     = 1,
	Finish                                   = 2,
	TextureStreamingStep_MAX                 = 3,
};

// Enum EndGame.EEndFootAttributeTypes
// NumValues: 0x001F
enum class EEndFootAttributeTypes : uint8
{
	None                                     = 0,
	Metal_Parts                              = 1,
	Metal_Floor                              = 2,
	Metal_Ami                                = 3,
	Con_Clean                                = 4,
	Con_Sandmix                              = 5,
	Con_Water                                = 6,
	Wood_Floor                               = 7,
	Wood_Parts                               = 8,
	Wood_Old                                 = 9,
	Soil                                     = 10,
	Stone                                    = 11,
	Gravel                                   = 12,
	Grass                                    = 13,
	Carpet                                   = 14,
	Glass                                    = 15,
	Sand                                     = 16,
	Crap_Con                                 = 17,
	Crap_Pla                                 = 18,
	Crap_Tra                                 = 19,
	Woodchip                                 = 20,
	Water_Shallow                            = 21,
	Water_Deep                               = 22,
	Rubber                                   = 23,
	Metal_Totan                              = 24,
	Metal_Cavity                             = 25,
	Metal_Frame                              = 26,
	Wood_Piller                              = 27,
	Tarp                                     = 28,
	Slimy                                    = 29,
	MAX                                      = 30,
};

// Enum EndGame.EEndForceFeedbackPlayerMuteSlot
// NumValues: 0x0006
enum class EEndForceFeedbackPlayerMuteSlot : uint8
{
	Standard                                 = 0,
	Extra1                                   = 1,
	Extra2                                   = 2,
	Extra3                                   = 3,
	FFP_MAX                                  = 4,
	EEndForceFeedbackPlayerMuteSlot_MAX      = 5,
};

// Enum EndGame.EEndForceFeedbackEffect
// NumValues: 0x001D
enum class EEndForceFeedbackEffect : uint8
{
	FFB_Effect0                              = 0,
	FFB_Effect1                              = 1,
	FFB_Effect2                              = 2,
	FFB_Effect3                              = 3,
	FFB_Effect4                              = 4,
	FFB_Effect5                              = 5,
	FFB_Effect6                              = 6,
	FFB_Effect7                              = 7,
	FFB_Effect8                              = 8,
	FFB_Effect9                              = 9,
	FFB_Noise1                               = 10,
	FFB_FACT0                                = 11,
	FFB_FACT1                                = 12,
	FFB_FACT2                                = 13,
	FFB_FACT3                                = 14,
	FFB_FACT4                                = 15,
	FFB_FACT5                                = 16,
	FFB_FACT6                                = 17,
	FFB_FACT7                                = 18,
	FFB_FACT8                                = 19,
	FFB_FACT9                                = 20,
	FFB_Bike0                                = 21,
	FFB_Bike1                                = 22,
	FFB_Bike2                                = 23,
	FFB_Common_Hit_01                        = 24,
	FFB_Common_Hit_02                        = 25,
	FFB_Ability_Hit_01                       = 26,
	FFB_Limit_Hit_01                         = 27,
	FFB_MAX                                  = 28,
};

// Enum EndGame.EEndForceFeedbackTrack
// NumValues: 0x0011
enum class EEndForceFeedbackTrack : uint8
{
	FFB_Track0                               = 0,
	FFB_Track1                               = 1,
	FFB_Track2                               = 2,
	FFB_Track3                               = 3,
	FFB_Track4                               = 4,
	FFB_Track5                               = 5,
	FFB_Track6                               = 6,
	FFB_Track7                               = 7,
	FFB_Track8                               = 8,
	FFB_Track9                               = 9,
	FFB_Track10                              = 10,
	FFB_Track11                              = 11,
	FFB_Track12                              = 12,
	FFB_Track13                              = 13,
	FFB_Track14                              = 14,
	FFB_Track15                              = 15,
	FFB_MAX                                  = 16,
};

// Enum EndGame.EGameSpeed
// NumValues: 0x000E
enum class EGameSpeed : uint8
{
	EGameSpeed_SYSTEM                        = 0,
	EGameSpeed_BATTLE                        = 1,
	EGameSpeed_BATTLE_COMMAND                = 2,
	EGameSpeed_BATTLE_PARTY_CHANGE           = 3,
	EGameSpeed_BATTLE_FINISH                 = 4,
	EGameSpeed_BATTLE_VISION                 = 5,
	EGameSpeed_BATTLE_LIMITE                 = 6,
	EGameSpeed_BATTLE_HIT                    = 7,
	EGameSpeed_BATTLE_BURST                  = 8,
	EGameSpeed_CUT                           = 9,
	EGameSpeed_FAST_FORWARD                  = 10,
	EGameSpeed_DEBUG                         = 11,
	EGamePause_MAX                           = 12,
	EGameSpeed_MAX                           = 13,
};

// Enum EndGame.EEndSystemPauseMenuKind
// NumValues: 0x000A
enum class EEndSystemPauseMenuKind : uint8
{
	None                                     = 0,
	Simple                                   = 1,
	CinemaPause                              = 2,
	BattlePause                              = 3,
	MainMenu                                 = 4,
	MapJournal                               = 5,
	Libra                                    = 6,
	GameOver                                 = 7,
	Colosseum                                = 8,
	Max                                      = 9,
};

// Enum EndGame.EGamePause
// NumValues: 0x0004
enum class EGamePause : uint8
{
	EGamePause_SYSTEM                        = 0,
	EGamePause_LEVEL                         = 1,
	EGamePause_DEBUG                         = 2,
	EGamePause_MAX                           = 3,
};

// Enum EndGame.EGameStatus
// NumValues: 0x000E
enum class EGameStatus : uint8
{
	EGameStatus_INIT_RESIDENT_RESOURCE       = 0,
	EGameStatus_INIT_EDITOR_GAME_PALY        = 1,
	EGameStatus_INIT_EDITOR_LOCATION         = 2,
	EGameStatus_INIT_EDITOR_CUT_SCENE        = 3,
	EGameStatus_EMPTY_EDITOR_LOCATION        = 4,
	EGameStatus_TO_TITLE                     = 5,
	EGameStatus_LOAD_BACKUPDATA              = 6,
	EGameStatus_INIT_EDITOR_QUICK_GAME_PALY  = 7,
	EGameStatus_JUMP_LOCATION                = 8,
	EGameStatus_BATTLE_RESTART               = 9,
	EGameStatus_INIT_EDITOR_PREVIEW_LAUNCHER = 10,
	EGameStatus_TEST_CUT_SCENE               = 11,
	EGameStatus_TO_BOOT                      = 12,
	EGameStatus_MAX                          = 13,
};

// Enum EndGame.EGameMode
// NumValues: 0x0007
enum class EGameMode : uint8
{
	EGameMode_PLAY_GAME                      = 0,
	EGameMode_FILED_TEST                     = 1,
	EGameMode_MOTION_TEST                    = 2,
	EGameMode_BATTLE_TEST                    = 3,
	EGameMode_SOUND_TEST                     = 4,
	EGameMode_EVENT_TEST                     = 5,
	EGameMode_MAX                            = 6,
};

// Enum EndGame.EGameTrigger
// NumValues: 0x000F
enum class EGameTrigger : uint8
{
	EGameTrigger_NONE                        = 0,
	EGameTrigger_BOOT                        = 1,
	EGameTrigger_EDITOR_BOOT                 = 2,
	EGameTrigger_DEBUG_BOOT                  = 3,
	EGameTrigger_TITLE                       = 4,
	EGameTrigger_INIT_PERSISTENT             = 5,
	EGameTrigger_EDITOR_INIT_PERSISTENT      = 6,
	EGameTrigger_GAME_IDLE                   = 7,
	EGameTrigger_PAUSE                       = 8,
	EGameTrigger_PAUSE_END                   = 9,
	EGameTrigger_MENU                        = 10,
	EGameTrigger_MENU_END                    = 11,
	EGameTrigger_UNINIT_PERSISTENT           = 12,
	EGameTrigger_PAUSE_STARTCHAPTER          = 13,
	EGameTrigger_MAX                         = 14,
};

// Enum EndGame.EGameState
// NumValues: 0x000C
enum class EGameState : uint8
{
	EGameState_NONE                          = 0,
	EGameState_BOOT                          = 1,
	EGameState_EDITOR_BOOT                   = 2,
	EGameState_DEBUG_BOOT                    = 3,
	EGameState_TITLE                         = 4,
	EGameState_INIT_PERSISTENT               = 5,
	EGameState_GAME_IDLE                     = 6,
	EGameState_PAUSE_IDLE                    = 7,
	EGameState_MENU_IDLE                     = 8,
	EGameState_UNINIT_PERSISTENT             = 9,
	EGameState_PAUSE_IDLE_STARTCHAPTER       = 10,
	EGameState_MAX                           = 32,
};

// Enum EndGame.EInterSense
// NumValues: 0x0005
enum class EInterSense : uint8
{
	Vision                                   = 0,
	Hearing                                  = 1,
	TactileSense                             = 2,
	MaxSence                                 = 3,
	EInterSense_MAX                          = 4,
};

// Enum EndGame.EEndInterestPointTemplate
// NumValues: 0x000C
enum class EEndInterestPointTemplate : uint8
{
	None                                     = 0,
	Template00                               = 1,
	Template01                               = 2,
	Template02                               = 3,
	Template03                               = 4,
	Template04                               = 5,
	Template05                               = 6,
	Template06                               = 7,
	Template07                               = 8,
	Template08                               = 9,
	Template09                               = 10,
	MAX                                      = 11,
};

// Enum EndGame.EEndAIInterestActionCommand
// NumValues: 0x0011
enum class EEndAIInterestActionCommand : uint8
{
	Approach                                 = 0,
	PlayAnimation                            = 1,
	OverrideAnim                             = 2,
	Escape                                   = 3,
	Wait                                     = 4,
	LookAt                                   = 5,
	OverrideAnimEnd                          = 6,
	LookAtEnd                                = 7,
	UpperBodyBlendAnimation                  = 8,
	UpperBodyBlendAnimationEnd               = 9,
	Emotion                                  = 10,
	EmotionEnd                               = 11,
	OverrideIdleVariation                    = 12,
	Turn                                     = 13,
	TurnEnd                                  = 14,
	None                                     = 15,
	Max                                      = 16,
};

// Enum EndGame.EEndAIInterestActionPriority
// NumValues: 0x0004
enum class EEndAIInterestActionPriority : uint8
{
	DEFAULT                                  = 0,
	HIGH                                     = 1,
	Priority_Max                             = 2,
	EEndAIInterestActionPriority_MAX         = 3,
};

// Enum EndGame.EEndInterestPointReactionActorType
// NumValues: 0x0005
enum class EEndInterestPointReactionActorType : uint8
{
	Player                                   = 0,
	Party                                    = 1,
	Npc                                      = 2,
	Type_Max                                 = 3,
	EEndInterestPointReactionActorType_MAX   = 4,
};

// Enum EndGame.EEndJointLimitAxis
// NumValues: 0x0004
enum class EEndJointLimitAxis : uint8
{
	X                                        = 0,
	Y                                        = 1,
	Z                                        = 2,
	EEndJointLimitAxis_MAX                   = 3,
};

// Enum EndGame.EEndJointLimitType
// NumValues: 0x0006
enum class EEndJointLimitType : uint8
{
	Free                                     = 0,
	Swing                                    = 1,
	Swing2                                   = 2,
	Euler                                    = 3,
	Hinge                                    = 4,
	EEndJointLimitType_MAX                   = 5,
};

// Enum EndGame.EEndLoadLevelPriority
// NumValues: 0x000F
enum class EEndLoadLevelPriority : uint8
{
	STREAM_LEVEL_BACK_GROUND                 = 64,
	STREAM_LEVEL_DEFAULT_PRIORITY            = 128,
	STREAM_LEVEL_LEVELSEQUENCELOADER_ANIMATION_PRIORITY = 160,
	STREAM_LEVEL_CHARA_POP_LOAD_PRIORITY     = 160,
	STREAM_LEVEL_CHARA_POP_UNLOAD_PRIORITY   = 161,
	STREAM_LEVEL_ENVSET_PRIORITY             = 170,
	STREAM_LEVEL_ABILITY_PRIORITY            = 180,
	STREAM_LEVEL_MENU_PRIORITY               = 190,
	STREAM_LEVEL_LOCATION_ENTRY_PRIORITY     = 195,
	STREAM_LEVEL_FIRST_CINEMA_PRIORITY       = 200,
	STREAM_LEVEL_PLANER_CINEMA_PRIORITY      = 210,
	STREAM_LEVEL_PARTY_CHARACTER_PRIORITY    = 230,
	STREAM_LEVEL_SECONDRY_CINEMA_PRIORITY    = 254,
	STREAM_LEVEL_UNLOAD                      = 255,
	STREAM_LEVEL_MAX                         = 256,
};

// Enum EndGame.StreamLevelSetSlot
// NumValues: 0x000A
enum class EStreamLevelSetSlot : uint8
{
	StreamLevelSet_NONE                      = 0,
	StreamLevelSet_SLOT1                     = 1,
	StreamLevelSet_MateriaResource           = 2,
	StreamLevelSet_SLOT3                     = 3,
	StreamLevelSet_Environment               = 4,
	StreamLevelSet_Environment_Menu          = 5,
	StreamLevelSet_SLOT6                     = 6,
	StreamLevelSet_SLOT7                     = 7,
	StreamLevelSet_SLOT8                     = 8,
	StreamLevelSet_MAX                       = 9,
};

// Enum EndGame.StreamLevelPackageExist
// NumValues: 0x0004
enum class EStreamLevelPackageExist : uint8
{
	StreamLevelPackageExist_RESET            = 0,
	StreamLevelPackageExist_NONE_FILE        = 1,
	StreamLevelPackageExist_EXIT_FILE        = 2,
	StreamLevelPackageExist_MAX              = 3,
};

// Enum EndGame.EEndMenuColosseumHandicapCategoryPrototype
// NumValues: 0x0005
enum class EEndMenuColosseumHandicapCategoryPrototype : uint8
{
	None                                     = 0,
	Light                                    = 1,
	Middle                                   = 2,
	Heavy                                    = 3,
	EEndMenuColosseumHandicapCategoryPrototype_MAX = 4,
};

// Enum EndGame.EEndMenuMiniGameKeyMappingMode
// NumValues: 0x0004
enum class EEndMenuMiniGameKeyMappingMode : uint8
{
	None                                     = 0,
	Squat                                    = 1,
	Dance                                    = 2,
	EEndMenuMiniGameKeyMappingMode_MAX       = 3,
};

// Enum EndGame.EEndMenuGamepadType
// NumValues: 0x0004
enum class EEndMenuGamepadType : uint8
{
	Default                                  = 0,
	XInput                                   = 1,
	DirectInput                              = 2,
	EEndMenuGamepadType_MAX                  = 3,
};

// Enum EndGame.EEndMenuDirectInputButtonMode
// NumValues: 0x0004
enum class EEndMenuDirectInputButtonMode : uint8
{
	Numerical                                = 0,
	Alphabetical                             = 1,
	Symbolic                                 = 2,
	EEndMenuDirectInputButtonMode_MAX        = 3,
};

// Enum EndGame.EEndMenuKeyGuideMode
// NumValues: 0x0005
enum class EEndMenuKeyGuideMode : uint8
{
	Gamepad                                  = 0,
	Keyboard                                 = 1,
	Gamepad_XInput                           = 2,
	Gamepad_DirectInput                      = 3,
	EEndMenuKeyGuideMode_MAX                 = 4,
};

// Enum EndGame.EEndMenuNextSaveIconKind
// NumValues: 0x0005
enum class EEndMenuNextSaveIconKind : uint8
{
	None                                     = 0,
	CheckpointUpdated                        = 1,
	FailedToSave                             = 2,
	FailedToLoad                             = 3,
	EEndMenuNextSaveIconKind_MAX             = 4,
};

// Enum EndGame.EEndMenuQuestBattleMessageKind
// NumValues: 0x0003
enum class EEndMenuQuestBattleMessageKind : uint8
{
	TargetDiscovered                         = 0,
	TargetDestroyed                          = 1,
	EEndMenuQuestBattleMessageKind_MAX       = 2,
};

// Enum EndGame.EEndMenuMessageWindowFlags
// NumValues: 0x0004
enum class EEndMenuMessageWindowFlags : uint8
{
	None                                     = 0,
	LeftAlignedOptions                       = 1,
	PauseMenu                                = 2,
	EEndMenuMessageWindowFlags_MAX           = 3,
};

// Enum EndGame.EEndMenuGBikeGaugeType
// NumValues: 0x0004
enum class EEndMenuGBikeGaugeType : uint8
{
	Default                                  = 0,
	Boss                                     = 1,
	Wimp                                     = 2,
	EEndMenuGBikeGaugeType_MAX               = 3,
};

// Enum EndGame.EEndMenuLoadingScreenType
// NumValues: 0x0003
enum class EEndMenuLoadingScreenType : uint8
{
	Normal                                   = 0,
	ChocoboFastTravel                        = 1,
	EEndMenuLoadingScreenType_MAX            = 2,
};

// Enum EndGame.EEndMenuTalkViewType
// NumValues: 0x0004
enum class EEndMenuTalkViewType : uint8
{
	Both                                     = 0,
	OnlyText                                 = 1,
	Hidden                                   = 2,
	EEndMenuTalkViewType_MAX                 = 3,
};

// Enum EndGame.EEndMenuLockonSiteType
// NumValues: 0x0003
enum class EEndMenuLockonSiteType : uint8
{
	Default                                  = 0,
	Shooting                                 = 1,
	EEndMenuLockonSiteType_MAX               = 2,
};

// Enum EndGame.EEndMenuLockonMarkerType
// NumValues: 0x0004
enum class EEndMenuLockonMarkerType : uint8
{
	Default                                  = 0,
	Wimp                                     = 1,
	Libra                                    = 2,
	EEndMenuLockonMarkerType_MAX             = 3,
};

// Enum EndGame.EEndMenuKeyGuideType
// NumValues: 0x0003
enum class EEndMenuKeyGuideType : uint8
{
	Field                                    = 0,
	GBike                                    = 1,
	EEndMenuKeyGuideType_MAX                 = 2,
};

// Enum EndGame.EEndMenuCinemaButtonKindMask
// NumValues: 0x0005
enum class EEndMenuCinemaButtonKindMask : uint8
{
	Default                                  = 0,
	Cinema                                   = 1,
	PlannerEvent                             = 2,
	PlannerEventBlend                        = 3,
	EEndMenuCinemaButtonKindMask_MAX         = 4,
};

// Enum EndGame.EEndMenuCinemaButtonKind
// NumValues: 0x0004
enum class EEndMenuCinemaButtonKind : uint8
{
	EventSkip                                = 0,
	MainMenu                                 = 1,
	FastForward                              = 2,
	EEndMenuCinemaButtonKind_MAX             = 3,
};

// Enum EndGame.EMenuSkillFrameType
// NumValues: 0x0003
enum class EMenuSkillFrameType : uint8
{
	Ally                                     = 0,
	Enemy                                    = 1,
	EMenuSkillFrameType_MAX                  = 2,
};

// Enum EndGame.ECommandRequestHideType
// NumValues: 0x0003
enum class ECommandRequestHideType : uint8
{
	OK                                       = 0,
	NG                                       = 1,
	ECommandRequestHideType_MAX              = 2,
};

// Enum EndGame.ENaviMapIconDirection
// NumValues: 0x000A
enum class ENaviMapIconDirection : uint8
{
	None                                     = 0,
	North                                    = 1,
	NorthEast                                = 2,
	East                                     = 3,
	SouthEast                                = 4,
	South                                    = 5,
	SouthWest                                = 6,
	West                                     = 7,
	NorthWest                                = 8,
	ENaviMapIconDirection_MAX                = 9,
};

// Enum EndGame.EEquipType
// NumValues: 0x0004
enum class EEquipType : uint8
{
	Weapon                                   = 0,
	Bangle                                   = 1,
	Accessory                                = 2,
	Max                                      = 3,
};

// Enum EndGame.EEndMenuMainMenuItemKind
// NumValues: 0x000E
enum class EEndMenuMainMenuItemKind : uint8
{
	MateriaEquip                             = 0,
	WeaponUpgrade                            = 1,
	BattleSettings                           = 2,
	BattleReport                             = 3,
	EnemyReport                              = 4,
	Magic                                    = 5,
	Item                                     = 6,
	Status                                   = 7,
	Manual                                   = 8,
	SaveLoad                                 = 9,
	AdditionalEpisode                        = 10,
	System                                   = 11,
	TrialSpecial                             = 12,
	EEndMenuMainMenuItemKind_MAX             = 13,
};

// Enum EndGame.EEndMenuMapIconKind
// NumValues: 0x0027
enum class EEndMenuMapIconKind : uint8
{
	PartyMember                              = 0,
	Enemy                                    = 1,
	MainStory                                = 2,
	SubStory                                 = 3,
	Elevator                                 = 4,
	Up                                       = 5,
	Down                                     = 6,
	Shop                                     = 7,
	Location                                 = 8,
	Inn                                      = 9,
	Reserved2                                = 10,
	MainStoryIntermediate                    = 11,
	SideDestination                          = 12,
	VendingMachine                           = 13,
	WeaponShop                               = 14,
	MateriaShop                              = 15,
	Chadley                                  = 16,
	ChocoboCarriage                          = 17,
	VRBattle                                 = 18,
	Colosseum                                = 19,
	MogShop                                  = 20,
	PHS                                      = 21,
	CorneoTreasure                           = 22,
	Jukebox                                  = 23,
	RoadClosed                               = 24,
	CondorR1                                 = 25,
	CondorR1Cleared                          = 26,
	CondorR2                                 = 27,
	CondorR2Cleared                          = 28,
	CondorR3                                 = 29,
	CondorR3Cleared                          = 30,
	CondorR4                                 = 31,
	CondorR4Cleared                          = 32,
	CondorR5                                 = 33,
	CondorR5Cleared                          = 34,
	CondorR6                                 = 35,
	CondorR6Cleared                          = 36,
	Lift                                     = 37,
	EEndMenuMapIconKind_MAX                  = 38,
};

// Enum EndGame.EEndMenuFieldMenuStatus
// NumValues: 0x0004
enum class EEndMenuFieldMenuStatus : uint8
{
	IsWaitMode                               = 0,
	IsWaitModeCmd                            = 1,
	IsLockonSelect                           = 2,
	EEndMenuFieldMenuStatus_MAX              = 3,
};

// Enum EndGame.EEndMenuFieldPaneType
// NumValues: 0x0004
enum class EEndMenuFieldPaneType : uint8
{
	Command                                  = 0,
	Status                                   = 1,
	TypeMax                                  = 2,
	EEndMenuFieldPaneType_MAX                = 3,
};

// Enum EndGame.EEndMenuInputGuidelineType
// NumValues: 0x0005
enum class EEndMenuInputGuidelineType : uint8
{
	Attack                                   = 0,
	BindUnleash                              = 1,
	CharacterChange                          = 2,
	TypeMax                                  = 3,
	EEndMenuInputGuidelineType_MAX           = 4,
};

// Enum EndGame.EEndMenuDigitFontType
// NumValues: 0x0003
enum class EEndMenuDigitFontType : uint8
{
	Normal                                   = 0,
	Large                                    = 1,
	EEndMenuDigitFontType_MAX                = 2,
};

// Enum EndGame.EEndMenuSystemFontType
// NumValues: 0x0005
enum class EEndMenuSystemFontType : uint8
{
	Normal                                   = 0,
	Small                                    = 1,
	Large                                    = 2,
	XLarge                                   = 3,
	EEndMenuSystemFontType_MAX               = 4,
};

// Enum EndGame.EEndMenuUIFilterType
// NumValues: 0x0008
enum class EEndMenuUIFilterType : uint8
{
	WaitMode                                 = 0,
	Dying                                    = 1,
	MainMenu                                 = 2,
	MainMenuParticle                         = 3,
	MainMenuFade                             = 4,
	MainMenuMono                             = 5,
	FilterMax                                = 6,
	EEndMenuUIFilterType_MAX                 = 7,
};

// Enum EndGame.EEndMenuTalkSelectWindowType
// NumValues: 0x0003
enum class EEndMenuTalkSelectWindowType : uint8
{
	center                                   = 0,
	left                                     = 1,
	EEndMenuTalkSelectWindowType_MAX         = 2,
};

// Enum EndGame.EEndMenuJoinMode
// NumValues: 0x0004
enum class EEndMenuJoinMode : uint8
{
	NewJoin                                  = 0,
	ReJoin                                   = 1,
	LeftOut                                  = 2,
	EEndMenuJoinMode_MAX                     = 3,
};

// Enum EndGame.EEndMenuPauseMode
// NumValues: 0x000B
enum class EEndMenuPauseMode : uint8
{
	Normal                                   = 0,
	Simple                                   = 1,
	Cinema                                   = 2,
	CinemaNoSkip                             = 3,
	Battle                                   = 4,
	MapJournal                               = 5,
	Colosseum                                = 6,
	ColosseumResult                          = 7,
	Libra                                    = 8,
	MiniGamePause                            = 9,
	EEndMenuPauseMode_MAX                    = 10,
};

// Enum EndGame.EEndMenuLogEffectKind
// NumValues: 0x0006
enum class EEndMenuLogEffectKind : uint8
{
	None                                     = 0,
	Small                                    = 1,
	Middle                                   = 2,
	Large                                    = 3,
	Weapon                                   = 4,
	EEndMenuLogEffectKind_MAX                = 5,
};

// Enum EndGame.EEndMenuIconKind
// NumValues: 0x0018
enum class EEndMenuIconKind : uint8
{
	None                                     = 0,
	Item                                     = 1,
	KeyItem                                  = 2,
	WeaponCloud                              = 3,
	WeaponBarret                             = 4,
	WeaponTifa                               = 5,
	WeaponAerith                             = 6,
	Bangle                                   = 7,
	Accessory                                = 8,
	Materia                                  = 9,
	Resource                                 = 10,
	KnockOut                                 = 11,
	Defeat                                   = 12,
	LevelUpMateria                           = 13,
	UpgradeWeaponCloud                       = 14,
	UpgradeWeaponBarret                      = 15,
	UpgradeWeaponTifa                        = 16,
	UpgradeWeaponAerith                      = 17,
	BattleReport                             = 18,
	WeaponYuffie                             = 19,
	WeaponSonon                              = 20,
	UpgradeWeaponYuffie                      = 21,
	UpgradeWeaponSonon                       = 22,
	EEndMenuIconKind_MAX                     = 23,
};

// Enum EndGame.EEndMenuBattleTargetState
// NumValues: 0x000A
enum class EEndMenuBattleTargetState : uint8
{
	None                                     = 0,
	Enabled                                  = 1,
	Disabled                                 = 2,
	LockedEnabled                            = 3,
	LockedDisabled                           = 4,
	OutEnabled                               = 5,
	OutDisabled                              = 6,
	OutLockedEnabled                         = 7,
	OutLockedDisabled                        = 8,
	EEndMenuBattleTargetState_MAX            = 9,
};

// Enum EndGame.EEndMenuPopupMessageFlags
// NumValues: 0x000A
enum class EEndMenuPopupMessageFlags : uint8
{
	None                                     = 0,
	Critical                                 = 1,
	OverTime                                 = 2,
	Guarded                                  = 4,
	Chain                                    = 8,
	Area                                     = 16,
	Whack                                    = 32,
	Burst                                    = 64,
	AttributeWeak                            = 128,
	EEndMenuPopupMessageFlags_MAX            = 129,
};

// Enum EndGame.EEndMenuDamageResistance
// NumValues: 0x0004
enum class EEndMenuDamageResistance : uint8
{
	None                                     = 0,
	Weakness                                 = 1,
	Reduced                                  = 2,
	EEndMenuDamageResistance_MAX             = 3,
};

// Enum EndGame.EEndMenuPopupMessageKind
// NumValues: 0x0020
enum class EEndMenuPopupMessageKind : uint8
{
	None                                     = 0,
	Damage                                   = 1,
	Heal                                     = 2,
	PartyDamage                              = 3,
	MpDamage                                 = 4,
	MpHeal                                   = 5,
	Dodge                                    = 6,
	EnemyDodge                               = 7,
	StealFailed                              = 8,
	AlreadyStolen                            = 9,
	NothingToSteal                           = 10,
	LevelUp                                  = 11,
	CatchStart                               = 12,
	CatchEnd                                 = 13,
	MountStart                               = 14,
	MountEnd                                 = 15,
	JumpStart                                = 16,
	JumpEnd                                  = 17,
	StealSucceeded                           = 18,
	LevelUpMateria                           = 19,
	UpgradeWeapon                            = 20,
	Death                                    = 21,
	Learning                                 = 22,
	Area                                     = 23,
	Reject                                   = 24,
	NoEffect                                 = 25,
	LevelUpWeapon                            = 26,
	TargetDestroyed                          = 27,
	Recover                                  = 28,
	Danger                                   = 29,
	YuffieDodge                              = 30,
	EEndMenuPopupMessageKind_MAX             = 31,
};

// Enum EndGame.EEndMenuFieldTargetIconType
// NumValues: 0x0003
enum class EEndMenuFieldTargetIconType : uint8
{
	Triangle                                 = 0,
	Square                                   = 1,
	EEndMenuFieldTargetIconType_MAX          = 2,
};

// Enum EndGame.EEndMenuFieldTargetState
// NumValues: 0x0007
enum class EEndMenuFieldTargetState : uint8
{
	None                                     = 0,
	On                                       = 1,
	On2                                      = 2,
	Off                                      = 3,
	NG                                       = 4,
	Hold                                     = 5,
	EEndMenuFieldTargetState_MAX             = 6,
};

// Enum EndGame.EEndNavLayerType
// NumValues: 0x0008
enum class EEndNavLayerType : uint8
{
	Normal                                   = 0,
	Medium                                   = 1,
	OneLarge                                 = 2,
	TwoLarge                                 = 3,
	ThreeLarge                               = 4,
	FourLarge                                = 5,
	LayerMax                                 = 6,
	EEndNavLayerType_MAX                     = 7,
};

// Enum EndGame.EEndNavAreaPermission
// NumValues: 0x0003
enum class EEndNavAreaPermission : uint8
{
	WhiteList                                = 0,
	BlackList                                = 1,
	EEndNavAreaPermission_MAX                = 2,
};

// Enum EndGame.EEndSceneNaviMapState
// NumValues: 0x0004
enum class EEndSceneNaviMapState : uint32
{
	Unopened                                 = 0,
	Opened                                   = 1,
	Visited                                  = 2,
	EEndSceneNaviMapState_MAX                = 3,
};

// Enum EndGame.EEndNaviMapUniqueIndexOffset
// NumValues: 0x0009
enum class EEndNaviMapUniqueIndexOffset : uint32
{
	Offset_0                                 = 0,
	Offset_1                                 = 1,
	Offset_2                                 = 2,
	Offset_3                                 = 3,
	Offset_4                                 = 4,
	Offset_5                                 = 5,
	Offset_6                                 = 6,
	Offset_7                                 = 7,
	Offset_Max                               = 8,
};

// Enum EndGame.EEndNaviMapSplitNum
// NumValues: 0x0003
enum class EEndNaviMapSplitNum : uint32
{
	Split_None                               = 1,
	Split_4                                  = 4,
	Split_MAX                                = 4,
};

// Enum EndGame.EEndNaviMapVisitGroup
// NumValues: 0x0081
enum class EEndNaviMapVisitGroup : uint32
{
	VisitGroup_None                          = 0,
	VisitGroup_001                           = 1,
	VisitGroup_002                           = 2,
	VisitGroup_003                           = 3,
	VisitGroup_004                           = 4,
	VisitGroup_005                           = 5,
	VisitGroup_006                           = 6,
	VisitGroup_007                           = 7,
	VisitGroup_008                           = 8,
	VisitGroup_009                           = 9,
	VisitGroup_010                           = 10,
	VisitGroup_011                           = 11,
	VisitGroup_012                           = 12,
	VisitGroup_013                           = 13,
	VisitGroup_014                           = 14,
	VisitGroup_015                           = 15,
	VisitGroup_016                           = 16,
	VisitGroup_017                           = 17,
	VisitGroup_018                           = 18,
	VisitGroup_019                           = 19,
	VisitGroup_020                           = 20,
	VisitGroup_021                           = 21,
	VisitGroup_022                           = 22,
	VisitGroup_023                           = 23,
	VisitGroup_024                           = 24,
	VisitGroup_025                           = 25,
	VisitGroup_026                           = 26,
	VisitGroup_027                           = 27,
	VisitGroup_028                           = 28,
	VisitGroup_029                           = 29,
	VisitGroup_030                           = 30,
	VisitGroup_031                           = 31,
	VisitGroup_032                           = 32,
	VisitGroup_033                           = 33,
	VisitGroup_034                           = 34,
	VisitGroup_035                           = 35,
	VisitGroup_036                           = 36,
	VisitGroup_037                           = 37,
	VisitGroup_038                           = 38,
	VisitGroup_039                           = 39,
	VisitGroup_040                           = 40,
	VisitGroup_041                           = 41,
	VisitGroup_042                           = 42,
	VisitGroup_043                           = 43,
	VisitGroup_044                           = 44,
	VisitGroup_045                           = 45,
	VisitGroup_046                           = 46,
	VisitGroup_047                           = 47,
	VisitGroup_048                           = 48,
	VisitGroup_049                           = 49,
	VisitGroup_050                           = 50,
	VisitGroup_051                           = 51,
	VisitGroup_052                           = 52,
	VisitGroup_053                           = 53,
	VisitGroup_054                           = 54,
	VisitGroup_055                           = 55,
	VisitGroup_056                           = 56,
	VisitGroup_057                           = 57,
	VisitGroup_058                           = 58,
	VisitGroup_059                           = 59,
	VisitGroup_060                           = 60,
	VisitGroup_061                           = 61,
	VisitGroup_062                           = 62,
	VisitGroup_063                           = 63,
	VisitGroup_064                           = 64,
	VisitGroup_065                           = 65,
	VisitGroup_066                           = 66,
	VisitGroup_067                           = 67,
	VisitGroup_068                           = 68,
	VisitGroup_069                           = 69,
	VisitGroup_070                           = 70,
	VisitGroup_071                           = 71,
	VisitGroup_072                           = 72,
	VisitGroup_073                           = 73,
	VisitGroup_074                           = 74,
	VisitGroup_075                           = 75,
	VisitGroup_076                           = 76,
	VisitGroup_077                           = 77,
	VisitGroup_078                           = 78,
	VisitGroup_079                           = 79,
	VisitGroup_080                           = 80,
	VisitGroup_081                           = 81,
	VisitGroup_082                           = 82,
	VisitGroup_083                           = 83,
	VisitGroup_084                           = 84,
	VisitGroup_085                           = 85,
	VisitGroup_086                           = 86,
	VisitGroup_087                           = 87,
	VisitGroup_088                           = 88,
	VisitGroup_089                           = 89,
	VisitGroup_090                           = 90,
	VisitGroup_091                           = 91,
	VisitGroup_092                           = 92,
	VisitGroup_093                           = 93,
	VisitGroup_094                           = 94,
	VisitGroup_095                           = 95,
	VisitGroup_096                           = 96,
	VisitGroup_097                           = 97,
	VisitGroup_098                           = 98,
	VisitGroup_099                           = 99,
	VisitGroup_100                           = 100,
	VisitGroup_101                           = 101,
	VisitGroup_102                           = 102,
	VisitGroup_103                           = 103,
	VisitGroup_104                           = 104,
	VisitGroup_105                           = 105,
	VisitGroup_106                           = 106,
	VisitGroup_107                           = 107,
	VisitGroup_108                           = 108,
	VisitGroup_109                           = 109,
	VisitGroup_110                           = 110,
	VisitGroup_111                           = 111,
	VisitGroup_112                           = 112,
	VisitGroup_113                           = 113,
	VisitGroup_114                           = 114,
	VisitGroup_115                           = 115,
	VisitGroup_116                           = 116,
	VisitGroup_117                           = 117,
	VisitGroup_118                           = 118,
	VisitGroup_119                           = 119,
	VisitGroup_120                           = 120,
	VisitGroup_121                           = 121,
	VisitGroup_122                           = 122,
	VisitGroup_123                           = 123,
	VisitGroup_124                           = 124,
	VisitGroup_125                           = 125,
	VisitGroup_126                           = 126,
	VisitGroup_127                           = 127,
	VisitGroup_Max                           = 128,
};

// Enum EndGame.EEndNaviMapOpenGroup
// NumValues: 0x0081
enum class EEndNaviMapOpenGroup : uint32
{
	OpenGroup_None                           = 0,
	OpenGroup_001                            = 1,
	OpenGroup_002                            = 2,
	OpenGroup_003                            = 3,
	OpenGroup_004                            = 4,
	OpenGroup_005                            = 5,
	OpenGroup_006                            = 6,
	OpenGroup_007                            = 7,
	OpenGroup_008                            = 8,
	OpenGroup_009                            = 9,
	OpenGroup_010                            = 10,
	OpenGroup_011                            = 11,
	OpenGroup_012                            = 12,
	OpenGroup_013                            = 13,
	OpenGroup_014                            = 14,
	OpenGroup_015                            = 15,
	OpenGroup_016                            = 16,
	OpenGroup_017                            = 17,
	OpenGroup_018                            = 18,
	OpenGroup_019                            = 19,
	OpenGroup_020                            = 20,
	OpenGroup_021                            = 21,
	OpenGroup_022                            = 22,
	OpenGroup_023                            = 23,
	OpenGroup_024                            = 24,
	OpenGroup_025                            = 25,
	OpenGroup_026                            = 26,
	OpenGroup_027                            = 27,
	OpenGroup_028                            = 28,
	OpenGroup_029                            = 29,
	OpenGroup_030                            = 30,
	OpenGroup_031                            = 31,
	OpenGroup_032                            = 32,
	OpenGroup_033                            = 33,
	OpenGroup_034                            = 34,
	OpenGroup_035                            = 35,
	OpenGroup_036                            = 36,
	OpenGroup_037                            = 37,
	OpenGroup_038                            = 38,
	OpenGroup_039                            = 39,
	OpenGroup_040                            = 40,
	OpenGroup_041                            = 41,
	OpenGroup_042                            = 42,
	OpenGroup_043                            = 43,
	OpenGroup_044                            = 44,
	OpenGroup_045                            = 45,
	OpenGroup_046                            = 46,
	OpenGroup_047                            = 47,
	OpenGroup_048                            = 48,
	OpenGroup_049                            = 49,
	OpenGroup_050                            = 50,
	OpenGroup_051                            = 51,
	OpenGroup_052                            = 52,
	OpenGroup_053                            = 53,
	OpenGroup_054                            = 54,
	OpenGroup_055                            = 55,
	OpenGroup_056                            = 56,
	OpenGroup_057                            = 57,
	OpenGroup_058                            = 58,
	OpenGroup_059                            = 59,
	OpenGroup_060                            = 60,
	OpenGroup_061                            = 61,
	OpenGroup_062                            = 62,
	OpenGroup_063                            = 63,
	OpenGroup_064                            = 64,
	OpenGroup_065                            = 65,
	OpenGroup_066                            = 66,
	OpenGroup_067                            = 67,
	OpenGroup_068                            = 68,
	OpenGroup_069                            = 69,
	OpenGroup_070                            = 70,
	OpenGroup_071                            = 71,
	OpenGroup_072                            = 72,
	OpenGroup_073                            = 73,
	OpenGroup_074                            = 74,
	OpenGroup_075                            = 75,
	OpenGroup_076                            = 76,
	OpenGroup_077                            = 77,
	OpenGroup_078                            = 78,
	OpenGroup_079                            = 79,
	OpenGroup_080                            = 80,
	OpenGroup_081                            = 81,
	OpenGroup_082                            = 82,
	OpenGroup_083                            = 83,
	OpenGroup_084                            = 84,
	OpenGroup_085                            = 85,
	OpenGroup_086                            = 86,
	OpenGroup_087                            = 87,
	OpenGroup_088                            = 88,
	OpenGroup_089                            = 89,
	OpenGroup_090                            = 90,
	OpenGroup_091                            = 91,
	OpenGroup_092                            = 92,
	OpenGroup_093                            = 93,
	OpenGroup_094                            = 94,
	OpenGroup_095                            = 95,
	OpenGroup_096                            = 96,
	OpenGroup_097                            = 97,
	OpenGroup_098                            = 98,
	OpenGroup_099                            = 99,
	OpenGroup_100                            = 100,
	OpenGroup_101                            = 101,
	OpenGroup_102                            = 102,
	OpenGroup_103                            = 103,
	OpenGroup_104                            = 104,
	OpenGroup_105                            = 105,
	OpenGroup_106                            = 106,
	OpenGroup_107                            = 107,
	OpenGroup_108                            = 108,
	OpenGroup_109                            = 109,
	OpenGroup_110                            = 110,
	OpenGroup_111                            = 111,
	OpenGroup_112                            = 112,
	OpenGroup_113                            = 113,
	OpenGroup_114                            = 114,
	OpenGroup_115                            = 115,
	OpenGroup_116                            = 116,
	OpenGroup_117                            = 117,
	OpenGroup_118                            = 118,
	OpenGroup_119                            = 119,
	OpenGroup_120                            = 120,
	OpenGroup_121                            = 121,
	OpenGroup_122                            = 122,
	OpenGroup_123                            = 123,
	OpenGroup_124                            = 124,
	OpenGroup_125                            = 125,
	OpenGroup_126                            = 126,
	OpenGroup_127                            = 127,
	OpenGroup_Max                            = 128,
};

// Enum EndGame.EEndNaviMapLayer
// NumValues: 0x0041
enum class EEndNaviMapLayer : uint32
{
	Layer_00                                 = 0,
	Layer_01                                 = 1,
	Layer_02                                 = 2,
	Layer_03                                 = 3,
	Layer_04                                 = 4,
	Layer_05                                 = 5,
	Layer_06                                 = 6,
	Layer_07                                 = 7,
	Layer_08                                 = 8,
	Layer_09                                 = 9,
	Layer_10                                 = 10,
	Layer_11                                 = 11,
	Layer_12                                 = 12,
	Layer_13                                 = 13,
	Layer_14                                 = 14,
	Layer_15                                 = 15,
	Layer_16                                 = 16,
	Layer_17                                 = 17,
	Layer_18                                 = 18,
	Layer_19                                 = 19,
	Layer_20                                 = 20,
	Layer_21                                 = 21,
	Layer_22                                 = 22,
	Layer_23                                 = 23,
	Layer_24                                 = 24,
	Layer_25                                 = 25,
	Layer_26                                 = 26,
	Layer_27                                 = 27,
	Layer_28                                 = 28,
	Layer_29                                 = 29,
	Layer_30                                 = 30,
	Layer_31                                 = 31,
	Layer_32                                 = 32,
	Layer_33                                 = 33,
	Layer_34                                 = 34,
	Layer_35                                 = 35,
	Layer_36                                 = 36,
	Layer_37                                 = 37,
	Layer_38                                 = 38,
	Layer_39                                 = 39,
	Layer_40                                 = 40,
	Layer_41                                 = 41,
	Layer_42                                 = 42,
	Layer_43                                 = 43,
	Layer_44                                 = 44,
	Layer_45                                 = 45,
	Layer_46                                 = 46,
	Layer_47                                 = 47,
	Layer_48                                 = 48,
	Layer_49                                 = 49,
	Layer_50                                 = 50,
	Layer_51                                 = 51,
	Layer_52                                 = 52,
	Layer_53                                 = 53,
	Layer_54                                 = 54,
	Layer_55                                 = 55,
	Layer_56                                 = 56,
	Layer_57                                 = 57,
	Layer_58                                 = 58,
	Layer_59                                 = 59,
	Layer_60                                 = 60,
	Layer_61                                 = 61,
	Layer_62                                 = 62,
	Layer_63                                 = 63,
	Layer_Max                                = 64,
};

// Enum EndGame.EEndFieldCameraInDoorPriorityType
// NumValues: 0x0003
enum class EEndFieldCameraInDoorPriorityType : uint8
{
	Town                                     = 0,
	InDoor                                   = 1,
	EEndFieldCameraInDoorPriorityType_MAX    = 2,
};

// Enum EndGame.EEndFieldCameraInDoorType
// NumValues: 0x0005
enum class EEndFieldCameraInDoorType : uint8
{
	Town                                     = 0,
	Narrow                                   = 1,
	Normal                                   = 2,
	Override                                 = 3,
	EEndFieldCameraInDoorType_MAX            = 4,
};

// Enum EndGame.EEndModifierType
// NumValues: 0x000B
enum class EEndModifierType : uint8
{
	COVER_TYPE                               = 0,
	BATTLEAREA_TYPE                          = 1,
	FIELDACTION_TYPE                         = 2,
	SWITCHING_TYPE                           = 3,
	PATHWAY_TYPE                             = 4,
	INDOOR_TYPE                              = 5,
	ADDATTRIBUTE_TYPE                        = 6,
	FOOTBGM_TYPE                             = 7,
	FIELD_TYPE                               = 8,
	MOB_TYPE                                 = 9,
	EEndModifierType_MAX                     = 10,
};

// Enum EndGame.EModifierVolumeCoverPostureType
// NumValues: 0x0004
enum class EModifierVolumeCoverPostureType : uint8
{
	Stand                                    = 0,
	Crouch                                   = 1,
	Sit                                      = 2,
	EModifierVolumeCoverPostureType_MAX      = 3,
};

// Enum EndGame.EModifierVolumeType
// NumValues: 0x0013
enum class EModifierVolumeType : uint8
{
	CoverPc                                  = 0,
	CoverEnemy                               = 1,
	Cover                                    = 2,
	WhiteList                                = 3,
	BlackList                                = 4,
	Defence                                  = 5,
	Path                                     = 6,
	AirPoint                                 = 7,
	Chase                                    = 8,
	Wall                                     = 9,
	Ceil                                     = 10,
	Water                                    = 11,
	TargetLocation                           = 12,
	Decoy                                    = 13,
	PopPoint                                 = 14,
	Overlap                                  = 15,
	FlyThrough                               = 16,
	Ignore                                   = 17,
	EModifierVolumeType_MAX                  = 18,
};

// Enum EndGame.ECollisionProfileType
// NumValues: 0x0006
enum class ECollisionProfileType : uint8
{
	Wall                                     = 0,
	Pc_Wall                                  = 1,
	Party_Wall                               = 2,
	Enemy_Wall                               = 3,
	NoCollision                              = 4,
	ECollisionProfileType_MAX                = 5,
};

// Enum EndGame.EOptionCategory
// NumValues: 0x0074
enum class EOptionCategory : uint8
{
	Difficulty                               = 0,
	MenuCursor                               = 1,
	BattleCursor                             = 2,
	NaviMap                                  = 3,
	Subtitle                                 = 4,
	AutoTalk                                 = 5,
	BattleGuide                              = 6,
	BrightnessSDR                            = 7,
	BrightnessHDR                            = 8,
	StrengthHDR                              = 9,
	IntensityHDR                             = 10,
	MinLuminanceHDR                          = 11,
	BattleChangeButton                       = 12,
	GraphicsMode                             = 13,
	CameraDistanceField                      = 14,
	CameraDistanceBattle                     = 15,
	CameraMoveFollow                         = 16,
	CameraAttackFollow                       = 17,
	CameraSlopeFollow                        = 18,
	CameraSpaceOffset                        = 19,
	CameraSensitivity                        = 20,
	CameraX                                  = 21,
	CameraY                                  = 22,
	FriendCommandCameraType                  = 23,
	TargetLockOnKey                          = 24,
	TargetLockOnType                         = 25,
	SequenceNormalAttackTargetChange         = 26,
	Vibration                                = 27,
	VibrationScreen                          = 28,
	MouseSensitivity                         = 29,
	MasterVolume                             = 30,
	BGMVolume                                = 31,
	SEVolume                                 = 32,
	VoiceVolume                              = 33,
	VoiceLanguage                            = 34,
	LODDistanceScale                         = 35,
	WindowMode                               = 36,
	ScreenResolution                         = 37,
	TextureQuality                           = 38,
	ShadowQuality                            = 39,
	FPS                                      = 40,
	HDR                                      = 41,
	FastForwardPlayRate                      = 42,
	GamepadLeftStick                         = 43,
	GamepadRightStick                        = 44,
	GamepadDPad                              = 45,
	GamepadFaceButtonLeft                    = 46,
	GamepadFaceButtonTop                     = 47,
	GamepadDecide                            = 48,
	GamepadCancel                            = 49,
	GamepadLeftShoulder                      = 50,
	GamepadRightShoulder                     = 51,
	GamepadLeftTrigger                       = 52,
	GamepadRightTrigger                      = 53,
	GamepadLeftThumb                         = 54,
	GamepadRightThumb                        = 55,
	GamepadSpecialLeft                       = 56,
	GamepadSpecialRight                      = 57,
	KeyboardLeftStickUp                      = 58,
	KeyboardLeftStickDown                    = 59,
	KeyboardLeftStickLeft                    = 60,
	KeyboardLeftStickRight                   = 61,
	KeyboardRightStickUp                     = 62,
	KeyboardRightStickDown                   = 63,
	KeyboardRightStickLeft                   = 64,
	KeyboardRightStickRight                  = 65,
	KeyboardPauseMenu                        = 66,
	KeyboardCommandMenu                      = 67,
	KeyboardAttack                           = 68,
	KeyboardPrevRank                         = 69,
	KeyboardNextRank                         = 70,
	KeyboardMagnify                          = 71,
	KeyboardFieldAction                      = 72,
	KeyboardDashHold1                        = 73,
	KeyboardDash                             = 74,
	KeyboardMapMenu                          = 75,
	KeyboardShowStatus                       = 76,
	KeyboardToggleMap                        = 77,
	KeyboardResetCamera                      = 78,
	KeyboardDodge                            = 79,
	KeyboardUniqueAbility                    = 80,
	KeyboardGuard                            = 81,
	KeyboardTargetLock                       = 82,
	KeyboardEnemyIntel                       = 83,
	KeyboardShortcut5                        = 84,
	KeyboardPrevTarget                       = 85,
	KeyboardNextTarget                       = 86,
	KeyboardPrevMember                       = 87,
	KeyboardNextMember                       = 88,
	KeyboardChangeLeaderPrev                 = 89,
	KeyboardChangeLeaderNext                 = 90,
	KeyboardShortcutMenu                     = 91,
	KeyboardShortcut1                        = 92,
	KeyboardShortcut2                        = 93,
	KeyboardShortcut3                        = 94,
	KeyboardShortcut4                        = 95,
	KeyboardShortcut6                        = 96,
	KeyboardDPadUp                           = 97,
	KeyboardDPadDown                         = 98,
	KeyboardDPadLeft                         = 99,
	KeyboardDPadRight                        = 100,
	KeyboardDecide                           = 101,
	KeyboardCancel                           = 102,
	KeyboardLeftTrigger                      = 103,
	KeyboardRightTrigger                     = 104,
	KeyboardScrollUp                         = 105,
	KeyboardScrollDown                       = 106,
	KeyboardFaceButtonTop                    = 107,
	KeyboardFaceButtonLeft                   = 108,
	KeyboardLeftShoulder                     = 109,
	KeyboardRightShoulder                    = 110,
	KeyboardLeftThumb                        = 111,
	KeyboardRightThumb                       = 112,
	KeyboardSpecialRight                     = 113,
	KeyboardSpecialLeft                      = 114,
	EOptionCategory_MAX                      = 115,
};

// Enum EndGame.EMenuItemCategory
// NumValues: 0x0008
enum class EMenuItemCategory : uint8
{
	GamePlay                                 = 0,
	CameraController                         = 1,
	Sound                                    = 2,
	Language                                 = 3,
	Graphics                                 = 4,
	Gamepad                                  = 5,
	Keyboard                                 = 6,
	EMenuItemCategory_MAX                    = 7,
};

// Enum EndGame.EOptionSelectionKind
// NumValues: 0x0005
enum class EOptionSelectionKind : uint8
{
	List                                     = 0,
	Range                                    = 1,
	Gamepad                                  = 2,
	Keyboard                                 = 3,
	EOptionSelectionKind_MAX                 = 4,
};

// Enum EndGame.EVfxCircleLocationKind
// NumValues: 0x0004
enum class EVfxCircleLocationKind : uint8
{
	XZ                                       = 0,
	XY                                       = 1,
	YZ                                       = 2,
	EVfxCircleLocationKind_MAX               = 3,
};

// Enum EndGame.EEndEffectEventKind
// NumValues: 0x0004
enum class EEndEffectEventKind : uint8
{
	EE_EK_Begin                              = 0,
	EE_EK_End                                = 1,
	EE_EK_LoopOff                            = 2,
	EE_EK_MAX                                = 3,
};

// Enum EndGame.EVfxEffectLightKind
// NumValues: 0x0003
enum class EVfxEffectLightKind : uint8
{
	Unpunctual                               = 0,
	Punctual                                 = 1,
	Max                                      = 2,
};

// Enum EndGame.EEndEffectStaticMeshSelectKind
// NumValues: 0x0007
enum class EEndEffectStaticMeshSelectKind : uint8
{
	Random                                   = 0,
	Order                                    = 1,
	UserSet                                  = 2,
	RandomUserSet                            = 3,
	Surface_Random                           = 4,
	Surface_Order                            = 5,
	EEndEffectStaticMeshSelectKind_MAX       = 6,
};

// Enum EndGame.EEndWeaponUpgradeEffectsKind
// NumValues: 0x000A
enum class EEndWeaponUpgradeEffectsKind : uint8
{
	None                                     = 0,
	BeginMenu                                = 1,
	FadeInFadeOut                            = 2,
	SpawnCore                                = 3,
	ActivationSkill                          = 4,
	Root                                     = 5,
	StartMenu                                = 6,
	EndMenu                                  = 7,
	Cursor                                   = 8,
	Max                                      = 9,
};

// Enum EndGame.EEndWeaponUpgradeStageEffectsStatus
// NumValues: 0x0008
enum class EEndWeaponUpgradeStageEffectsStatus : uint8
{
	None                                     = 0,
	PlayStage                                = 1,
	WaitCameraMove                           = 2,
	WaitSpawn                                = 3,
	WaitActive                               = 4,
	WaitStage                                = 5,
	Done                                     = 6,
	EEndWeaponUpgradeStageEffectsStatus_MAX  = 7,
};

// Enum EndGame.EEndWeaponUpgradeKind
// NumValues: 0x0008
enum class EEndWeaponUpgradeKind : uint8
{
	UnKnown                                  = 255,
	Core                                     = 0,
	Skill                                    = 1,
	Upgrade                                  = 2,
	MaxUpgrade                               = 1,
	MaxMainCoreResource                      = 6,
	MaxSubCoreResource                       = 6,
	EEndWeaponUpgradeKind_MAX                = 256,
};

// Enum EndGame.EPlayerActorRefreshState
// NumValues: 0x0005
enum class EPlayerActorRefreshState : uint8
{
	EPlayerActorRefreshState_NONE            = 0,
	EPlayerActorRefreshState_BUILD           = 1,
	EPlayerActorRefreshState_REBUILD         = 2,
	EPlayerActorRefreshState_DELETE          = 3,
	EPlayerActorRefreshState_MAX             = 4,
};

// Enum EndGame.EPlayerStreamStep
// NumValues: 0x0004
enum class EPlayerStreamStep : uint8
{
	EPlayerStreamStep_WAIT                   = 0,
	EPlayerStreamStep_REQUEST                = 1,
	EPlayerStreamStep_STREAMING              = 2,
	EPlayerStreamStep_MAX                    = 3,
};

// Enum EndGame.EPlayerStatus
// NumValues: 0x0007
enum class EPlayerStatus : uint8
{
	EPlayerType_NONE                         = 0,
	EPlayerType_PARTY                        = 1,
	EPlayerType_GUEST                        = 2,
	EPlayerType_CACHE                        = 3,
	EPlayerType_GUEST_Battle                 = 4,
	EPlayerType_PARTY_Battle_Support         = 5,
	EPlayerType_MAX                          = 6,
};

// Enum EndGame.EPlayerType
// NumValues: 0x000A
enum class EPlayerType : uint8
{
	EPlayerType_CLOUD                        = 0,
	EPlayerType_BARRET                       = 1,
	EPlayerType_TIFA                         = 2,
	EPlayerType_AERITH                       = 3,
	EPlayerType_REDXIII                      = 4,
	EPlayerType_YUFFIE                       = 5,
	EPlayerType_SONON                        = 6,
	EPlayerType_DUMMY                        = 7,
	EPlayerType_MAX                          = 8,
	EPlayerType_NONE                         = 9,
};

// Enum EndGame.EEquipmentType
// NumValues: 0x0003
enum class EEquipmentType : uint8
{
	EEquipmentType_PLAYER                    = 0,
	EEquipmentType_WEAPON                    = 1,
	EEquipmentType_MAX                       = 2,
};

// Enum EndGame.EShortCutCommandType
// NumValues: 0x0007
enum class EShortCutCommandType : uint8
{
	EShortCutCommandType_FACEBUTTON_LEFT     = 0,
	EShortCutCommandType_L1_FACEBUTTON_TOP   = 1,
	EShortCutCommandType_L1_FACEBUTTON_BOTTOM = 2,
	EShortCutCommandType_FACEBUTTON_TOP      = 3,
	EShortCutCommandType_L1_FACEBUTTON_LEFT  = 4,
	EShortCutCommandType_L1_FACEBUTTON_RIGHT = 5,
	EShortCutCommandType_MAX                 = 6,
};

// Enum EndGame.ECommandType
// NumValues: 0x0006
enum class ECommandType : uint8
{
	ECommandType_ABILITY                     = 0,
	ECommandType_MAGIC                       = 1,
	ECommandType_LIMIT                       = 2,
	ECommandType_SUMMON                      = 3,
	ECommandType_ITEM                        = 4,
	ECommandType_MAX                         = 5,
};

// Enum EndGame.EPartyLeaderType
// NumValues: 0x0003
enum class EPartyLeaderType : uint8
{
	EPartyLeaderType_Current                 = 0,
	EPartyLeaderType_ForceField              = 1,
	EPartyLeaderType_MAX                     = 2,
};

// Enum EndGame.EEndPhysicalConstraintMessage
// NumValues: 0x000A
enum class EEndPhysicalConstraintMessage : uint8
{
	Deactivate                               = 0,
	Activate                                 = 1,
	DisableGravity                           = 2,
	EnableGravity                            = 3,
	DisableForceResetVelocity                = 4,
	EnableForceResetVelocity                 = 5,
	RequestReinitialize                      = 6,
	DisableRandomVelocity                    = 7,
	EnableRandomVelocity                     = 8,
	EEndPhysicalConstraintMessage_MAX        = 9,
};

// Enum EndGame.EEndMovementModeLayer
// NumValues: 0x000E
enum class EEndMovementModeLayer : uint16
{
	EEndMovementModeLayer_Debug              = 49152,
	EEndMovementModeLayer_Interrupt          = 45056,
	EEndMovementModeLayer_Cinema             = 40960,
	EEndMovementModeLayer_Loading            = 36864,
	EEndMovementModeLayer_BattleSyncAction   = 32768,
	EEndMovementModeLayer_Battle             = 28672,
	EEndMovementModeLayer_Animation          = 24576,
	EEndMovementModeLayer_Battle_Low         = 20480,
	EEndMovementModeLayer_Notify             = 16384,
	EEndMovementModeLayer_Field              = 12288,
	EEndMovementModeLayer_Temporary          = 8192,
	EEndMovementModeLayer_FlyThroughWall     = 4096,
	EEndMovementModeLayer_Normal             = 0,
	EEndMovementModeLayer_MAX                = 49153,
};

// Enum EndGame.ERouteSearchPriority
// NumValues: 0x0005
enum class ERouteSearchPriority : uint8
{
	SEARCH_PRIORITY_LOW                      = 0,
	SEARCH_PRIORITY_NORMAL                   = 1,
	SEARCH_PRIORITY_HIGH                     = 2,
	SEARCH_PRIORITY_IMMEDIATE                = 3,
	SEARCH_PRIORITY_MAX                      = 4,
};

// Enum EndGame.ERouteSearchType
// NumValues: 0x0004
enum class ERouteSearchType : uint8
{
	SEARCH_TYPE_GROUND                       = 0,
	SEARCH_TYPE_AERIAL                       = 1,
	SEARCH_TYPE_OTHER                        = 2,
	SEARCH_TYPE_MAX                          = 3,
};

// Enum EndGame.EEndDashType
// NumValues: 0x0004
enum class EEndDashType : uint8
{
	Enable                                   = 0,
	Disable                                  = 1,
	SpecificMoveDash                         = 2,
	Max                                      = 3,
};

// Enum EndGame.EEndSpecificMoveTypeLayer
// NumValues: 0x0008
enum class EEndSpecificMoveTypeLayer : uint8
{
	StateChange                              = 0,
	ActionPlayerMoveType                     = 1,
	ActionPlayerAfterGlowMoveType            = 2,
	ActionRestrictDashWhenActorsNear         = 3,
	ActionAutoWalkType                       = 4,
	ActionTurnBack                           = 5,
	RoomBox                                  = 6,
	Max                                      = 7,
};

// Enum EndGame.EActorMoveMode
// NumValues: 0x0005
enum class EActorMoveMode : uint8
{
	Ground                                   = 0,
	Fly                                      = 1,
	Other                                    = 2,
	None                                     = 3,
	EActorMoveMode_MAX                       = 4,
};

// Enum EndGame.ESimpleCameraCollisionProfileType
// NumValues: 0x0004
enum class ESimpleCameraCollisionProfileType : uint8
{
	GameCameraWall                           = 0,
	CameraHitOnly                            = 1,
	GameCameraSeeThroughWall                 = 2,
	ESimpleCameraCollisionProfileType_MAX    = 3,
};

// Enum EndGame.EEndSoundLayer
// NumValues: 0x001A
enum class EEndSoundLayer : uint8
{
	Pause_ON                                 = 0,
	Pause_OFF                                = 1,
	Skip_Cut                                 = 2,
	Reset_Game                               = 3,
	Movie_IN                                 = 4,
	Movie_OUT                                = 5,
	Menu_Open                                = 6,
	Menu_Close                               = 7,
	Title_IN                                 = 8,
	Title_OUT                                = 9,
	JBMusic_FocusMode_ON                     = 10,
	JBMusic_FocusMode_OFF                    = 11,
	WaitMode_ON                              = 12,
	WaitMode_OFF                             = 13,
	Game_Blackout_IN                         = 14,
	Game_Blackout_OUT                        = 15,
	Level_Blackout_IN                        = 16,
	Level_Blackout_OUT                       = 17,
	CutScene_IN                              = 18,
	CutScene_OUT                             = 19,
	MiniGameMenu_IN                          = 20,
	MiniGameMenu_OUT                         = 21,
	FastForward_Start                        = 22,
	FastForward_End                          = 23,
	_MAX                                     = 24,
	EEndSoundLayer_MAX                       = 25,
};

// Enum EndGame.EFA0122_ArmMessage
// NumValues: 0x0007
enum class EFA0122_ArmMessage : uint8
{
	BeginControl                             = 0,
	EndControl                               = 1,
	BeginGrab                                = 2,
	EndGrab                                  = 3,
	BeginPlaceOnCharacter                    = 4,
	EndPlaceOnCharacter                      = 5,
	EFA0122_MAX                              = 6,
};

// Enum EndGame.EFA0122_ArmState
// NumValues: 0x0005
enum class EFA0122_ArmState : uint8
{
	Deactive                                 = 0,
	Idle                                     = 1,
	Grab                                     = 2,
	PlaceOnCharacter                         = 3,
	EFA0122_MAX                              = 4,
};

// Enum EndGame.EFA0122_PoseReference
// NumValues: 0x0005
enum class EFA0122_PoseReference : uint8
{
	PlaceOnCharacter                         = 0,
	LiftCharacter                            = 1,
	GrabContainer                            = 2,
	LiftContainer                            = 3,
	EFA0122_MAX                              = 4,
};

// Enum EndGame.EFA0222_PoseReference
// NumValues: 0x0006
enum class EFA0222_PoseReference : uint8
{
	CenterHandle                             = 0,
	UpHandle                                 = 1,
	DownHandle                               = 2,
	LeftHandle                               = 3,
	RightHandle                              = 4,
	EFA0222_MAX                              = 5,
};

// Enum EndGame.EVfxTrajectoryRenderAxisOption
// NumValues: 0x0004
enum class EVfxTrajectoryRenderAxisOption : uint8
{
	EVTRAO_RightVector                       = 0,
	EVTRAO_UpVector                          = 1,
	EVTRAO_BillBoard                         = 2,
	EVTRAO_MAX                               = 3,
};

// ScriptStruct EndGame.EndAutoRotateBoneSetting
// 0x0024 (0x0024 - 0x0000)
struct FEndAutoRotateBoneSetting final
{
public:
	struct FBoneReference                         Bone;                                              // 0x0000(0x0014)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               RotationRate;                                      // 0x0014(0x000C)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bUseLocalAxisAsRightVector;                        // 0x0020(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAxis                                         RightVectorAxis;                                   // 0x0021(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPerformComponentSpaceVelocityCalculation;         // 0x0022(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23[0x1];                                       // 0x0023(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndAutoRotateBoneSetting) == 0x000004, "Wrong alignment on FEndAutoRotateBoneSetting");
static_assert(sizeof(FEndAutoRotateBoneSetting) == 0x000024, "Wrong size on FEndAutoRotateBoneSetting");
static_assert(offsetof(FEndAutoRotateBoneSetting, Bone) == 0x000000, "Member 'FEndAutoRotateBoneSetting::Bone' has a wrong offset!");
static_assert(offsetof(FEndAutoRotateBoneSetting, RotationRate) == 0x000014, "Member 'FEndAutoRotateBoneSetting::RotationRate' has a wrong offset!");
static_assert(offsetof(FEndAutoRotateBoneSetting, bUseLocalAxisAsRightVector) == 0x000020, "Member 'FEndAutoRotateBoneSetting::bUseLocalAxisAsRightVector' has a wrong offset!");
static_assert(offsetof(FEndAutoRotateBoneSetting, RightVectorAxis) == 0x000021, "Member 'FEndAutoRotateBoneSetting::RightVectorAxis' has a wrong offset!");
static_assert(offsetof(FEndAutoRotateBoneSetting, bPerformComponentSpaceVelocityCalculation) == 0x000022, "Member 'FEndAutoRotateBoneSetting::bPerformComponentSpaceVelocityCalculation' has a wrong offset!");

// ScriptStruct EndGame.AnimNode_EndAutoRotate
// 0x0090 (0x00C0 - 0x0030)
struct FAnimNode_EndAutoRotate final : public FAnimNode_Base
{
public:
	struct FPoseLink                              Source;                                            // 0x0030(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FEndAutoRotateBoneSetting>      BoneSettings;                                      // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         AccelerationRate;                                  // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x64];                                      // 0x005C(0x0064)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_EndAutoRotate) == 0x000008, "Wrong alignment on FAnimNode_EndAutoRotate");
static_assert(sizeof(FAnimNode_EndAutoRotate) == 0x0000C0, "Wrong size on FAnimNode_EndAutoRotate");
static_assert(offsetof(FAnimNode_EndAutoRotate, Source) == 0x000030, "Member 'FAnimNode_EndAutoRotate::Source' has a wrong offset!");
static_assert(offsetof(FAnimNode_EndAutoRotate, BoneSettings) == 0x000048, "Member 'FAnimNode_EndAutoRotate::BoneSettings' has a wrong offset!");
static_assert(offsetof(FAnimNode_EndAutoRotate, AccelerationRate) == 0x000058, "Member 'FAnimNode_EndAutoRotate::AccelerationRate' has a wrong offset!");

// ScriptStruct EndGame.EndNaviMapTexturePrototypeData
// 0x0038 (0x0038 - 0x0000)
struct FEndNaviMapTexturePrototypeData final
{
public:
	struct FSoftObjectPath                        Path;                                              // 0x0000(0x0018)(Edit, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              BasePosition;                                      // 0x0018(0x0008)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PixelPerCm;                                        // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   IncludedLevel;                                     // 0x0024(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ExcludedLevel;                                     // 0x002C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndNaviMapTexturePrototypeData) == 0x000008, "Wrong alignment on FEndNaviMapTexturePrototypeData");
static_assert(sizeof(FEndNaviMapTexturePrototypeData) == 0x000038, "Wrong size on FEndNaviMapTexturePrototypeData");
static_assert(offsetof(FEndNaviMapTexturePrototypeData, Path) == 0x000000, "Member 'FEndNaviMapTexturePrototypeData::Path' has a wrong offset!");
static_assert(offsetof(FEndNaviMapTexturePrototypeData, BasePosition) == 0x000018, "Member 'FEndNaviMapTexturePrototypeData::BasePosition' has a wrong offset!");
static_assert(offsetof(FEndNaviMapTexturePrototypeData, PixelPerCm) == 0x000020, "Member 'FEndNaviMapTexturePrototypeData::PixelPerCm' has a wrong offset!");
static_assert(offsetof(FEndNaviMapTexturePrototypeData, IncludedLevel) == 0x000024, "Member 'FEndNaviMapTexturePrototypeData::IncludedLevel' has a wrong offset!");
static_assert(offsetof(FEndNaviMapTexturePrototypeData, ExcludedLevel) == 0x00002C, "Member 'FEndNaviMapTexturePrototypeData::ExcludedLevel' has a wrong offset!");

// ScriptStruct EndGame.EndNaviMapLayerPrototypeData
// 0x0050 (0x0050 - 0x0000)
struct FEndNaviMapLayerPrototypeData final
{
public:
	class FString                                 LongName;                                          // 0x0000(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ShortName;                                         // 0x0010(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBox                                   Bounds;                                            // 0x0020(0x001C)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FEndNaviMapTexturePrototypeData> Textures;                                          // 0x0040(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndNaviMapLayerPrototypeData) == 0x000008, "Wrong alignment on FEndNaviMapLayerPrototypeData");
static_assert(sizeof(FEndNaviMapLayerPrototypeData) == 0x000050, "Wrong size on FEndNaviMapLayerPrototypeData");
static_assert(offsetof(FEndNaviMapLayerPrototypeData, LongName) == 0x000000, "Member 'FEndNaviMapLayerPrototypeData::LongName' has a wrong offset!");
static_assert(offsetof(FEndNaviMapLayerPrototypeData, ShortName) == 0x000010, "Member 'FEndNaviMapLayerPrototypeData::ShortName' has a wrong offset!");
static_assert(offsetof(FEndNaviMapLayerPrototypeData, Bounds) == 0x000020, "Member 'FEndNaviMapLayerPrototypeData::Bounds' has a wrong offset!");
static_assert(offsetof(FEndNaviMapLayerPrototypeData, Textures) == 0x000040, "Member 'FEndNaviMapLayerPrototypeData::Textures' has a wrong offset!");

// ScriptStruct EndGame.EndNaviMapLocationPrototypeData
// 0x0020 (0x0020 - 0x0000)
struct FEndNaviMapLocationPrototypeData final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FEndNaviMapLayerPrototypeData>  Layers;                                            // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndNaviMapLocationPrototypeData) == 0x000008, "Wrong alignment on FEndNaviMapLocationPrototypeData");
static_assert(sizeof(FEndNaviMapLocationPrototypeData) == 0x000020, "Wrong size on FEndNaviMapLocationPrototypeData");
static_assert(offsetof(FEndNaviMapLocationPrototypeData, Name) == 0x000000, "Member 'FEndNaviMapLocationPrototypeData::Name' has a wrong offset!");
static_assert(offsetof(FEndNaviMapLocationPrototypeData, Layers) == 0x000010, "Member 'FEndNaviMapLocationPrototypeData::Layers' has a wrong offset!");

// ScriptStruct EndGame.EndAIActorCognition
// 0x001C (0x001C - 0x0000)
struct FEndAIActorCognition final
{
public:
	struct FVector                                RecognizedLocation;                                // 0x0000(0x000C)(Edit, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LastRecognitionTimer;                              // 0x000C(0x0004)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Interest;                                          // 0x0010(0x0004)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Experience;                                        // 0x0014(0x0004)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Caution;                                           // 0x0018(0x0004)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndAIActorCognition) == 0x000004, "Wrong alignment on FEndAIActorCognition");
static_assert(sizeof(FEndAIActorCognition) == 0x00001C, "Wrong size on FEndAIActorCognition");
static_assert(offsetof(FEndAIActorCognition, RecognizedLocation) == 0x000000, "Member 'FEndAIActorCognition::RecognizedLocation' has a wrong offset!");
static_assert(offsetof(FEndAIActorCognition, LastRecognitionTimer) == 0x00000C, "Member 'FEndAIActorCognition::LastRecognitionTimer' has a wrong offset!");
static_assert(offsetof(FEndAIActorCognition, Interest) == 0x000010, "Member 'FEndAIActorCognition::Interest' has a wrong offset!");
static_assert(offsetof(FEndAIActorCognition, Experience) == 0x000014, "Member 'FEndAIActorCognition::Experience' has a wrong offset!");
static_assert(offsetof(FEndAIActorCognition, Caution) == 0x000018, "Member 'FEndAIActorCognition::Caution' has a wrong offset!");

// ScriptStruct EndGame.EndAIBlackboard
// 0x0120 (0x0120 - 0x0000)
struct FEndAIBlackboard final
{
public:
	float                                         Pleasure;                                          // 0x0000(0x0004)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Sadness;                                           // 0x0004(0x0004)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Anger;                                             // 0x0008(0x0004)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Caution;                                           // 0x000C(0x0004)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x38];                                      // 0x0010(0x0038)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class AActor*, struct FEndAIActorCognition> ActorCognitions;                                   // 0x0048(0x0050)(Edit, ZeroConstructor, Transient, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_98[0x88];                                      // 0x0098(0x0088)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndAIBlackboard) == 0x000008, "Wrong alignment on FEndAIBlackboard");
static_assert(sizeof(FEndAIBlackboard) == 0x000120, "Wrong size on FEndAIBlackboard");
static_assert(offsetof(FEndAIBlackboard, Pleasure) == 0x000000, "Member 'FEndAIBlackboard::Pleasure' has a wrong offset!");
static_assert(offsetof(FEndAIBlackboard, Sadness) == 0x000004, "Member 'FEndAIBlackboard::Sadness' has a wrong offset!");
static_assert(offsetof(FEndAIBlackboard, Anger) == 0x000008, "Member 'FEndAIBlackboard::Anger' has a wrong offset!");
static_assert(offsetof(FEndAIBlackboard, Caution) == 0x00000C, "Member 'FEndAIBlackboard::Caution' has a wrong offset!");
static_assert(offsetof(FEndAIBlackboard, ActorCognitions) == 0x000048, "Member 'FEndAIBlackboard::ActorCognitions' has a wrong offset!");

// ScriptStruct EndGame.EndAIModel
// 0x0318 (0x0318 - 0x0000)
struct FEndAIModel final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bActive;                                           // 0x0008(0x0001)(Edit, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowedUpdating;                                  // 0x0009(0x0001)(Edit, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTeleported;                                       // 0x000A(0x0001)(Edit, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEndAIBlackboard                       Blackboard;                                        // 0x0010(0x0120)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	EEndAIUpdatePriority                          UpdatePriority;                                    // 0x0130(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_131[0x7];                                      // 0x0131(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, bool>                       DebugDrawSensors;                                  // 0x0138(0x0050)(Edit, ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	TMap<class FName, bool>                       DebugDrawIntentions;                               // 0x0188(0x0050)(Edit, ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	bool                                          DebugDrawBehaviors;                                // 0x01D8(0x0001)(Edit, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D9[0x13F];                                    // 0x01D9(0x013F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndAIModel) == 0x000008, "Wrong alignment on FEndAIModel");
static_assert(sizeof(FEndAIModel) == 0x000318, "Wrong size on FEndAIModel");
static_assert(offsetof(FEndAIModel, bActive) == 0x000008, "Member 'FEndAIModel::bActive' has a wrong offset!");
static_assert(offsetof(FEndAIModel, bAllowedUpdating) == 0x000009, "Member 'FEndAIModel::bAllowedUpdating' has a wrong offset!");
static_assert(offsetof(FEndAIModel, bTeleported) == 0x00000A, "Member 'FEndAIModel::bTeleported' has a wrong offset!");
static_assert(offsetof(FEndAIModel, Blackboard) == 0x000010, "Member 'FEndAIModel::Blackboard' has a wrong offset!");
static_assert(offsetof(FEndAIModel, UpdatePriority) == 0x000130, "Member 'FEndAIModel::UpdatePriority' has a wrong offset!");
static_assert(offsetof(FEndAIModel, DebugDrawSensors) == 0x000138, "Member 'FEndAIModel::DebugDrawSensors' has a wrong offset!");
static_assert(offsetof(FEndAIModel, DebugDrawIntentions) == 0x000188, "Member 'FEndAIModel::DebugDrawIntentions' has a wrong offset!");
static_assert(offsetof(FEndAIModel, DebugDrawBehaviors) == 0x0001D8, "Member 'FEndAIModel::DebugDrawBehaviors' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableRowBase
// 0x0000 (0x0008 - 0x0008)
struct FEndDataTableRowBase : public FTableRowBase
{
};
static_assert(alignof(FEndDataTableRowBase) == 0x000008, "Wrong alignment on FEndDataTableRowBase");
static_assert(sizeof(FEndDataTableRowBase) == 0x000008, "Wrong size on FEndDataTableRowBase");

// ScriptStruct EndGame.EndDataTableCharaSpec
// 0x0158 (0x0160 - 0x0008)
struct FEndDataTableCharaSpec final : public FEndDataTableRowBase
{
public:
	class FString                                 CharaID;                                           // 0x0008(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ContentsModel;                                     // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           FieldAIList_Array;                                 // 0x0020(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           BattleAIList_Array;                                // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         EnableCollision;                                   // 0x0040(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         WeightType;                                        // 0x0041(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         PhysiqueSize;                                      // 0x0042(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         MoveType;                                          // 0x0043(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RootMotionTranslationScale;                        // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AnimationPlayRate;                                 // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         UseMasterPose;                                     // 0x004C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         IgnoreRagdollPhysics;                              // 0x004D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4E[0x2];                                       // 0x004E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   AISpec;                                            // 0x0050(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         FlyAnimationBattlePackIndex;                       // 0x0058(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         FlyAnimationFieldPackIndex;                        // 0x0059(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5A[0x6];                                       // 0x005A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           OverrideAnimationSetString_Array;                  // 0x0060(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         CreateFieldCharaController;                        // 0x0070(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           FieldActionSetString_Array;                        // 0x0078(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   SoundCategoryId;                                   // 0x0088(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ContentsSoundSE;                                   // 0x0090(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ContentsSoundAutoSE;                               // 0x00A0(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         ContentSoundVoice_Array;                           // 0x00B0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 ContentSoundExpsionVoice;                          // 0x00C0(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ContentsEffect;                                    // 0x00D0(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ContentsBattleCamera;                              // 0x00E0(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           OverrideWeaponSocketNames_Array;                   // 0x00F0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           NaturalSoketNameList_Array;                        // 0x0100(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           AggressiveSoketNameList_Array;                     // 0x0110(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           EquipmentCharaSpecList_Array;                      // 0x0120(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 EquipmentDefaultHiddenList_Array;                  // 0x0130(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           SharedCharaSpecList_Array;                         // 0x0140(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         AnimationSetList_Array;                            // 0x0150(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableCharaSpec) == 0x000008, "Wrong alignment on FEndDataTableCharaSpec");
static_assert(sizeof(FEndDataTableCharaSpec) == 0x000160, "Wrong size on FEndDataTableCharaSpec");
static_assert(offsetof(FEndDataTableCharaSpec, CharaID) == 0x000008, "Member 'FEndDataTableCharaSpec::CharaID' has a wrong offset!");
static_assert(offsetof(FEndDataTableCharaSpec, ContentsModel) == 0x000018, "Member 'FEndDataTableCharaSpec::ContentsModel' has a wrong offset!");
static_assert(offsetof(FEndDataTableCharaSpec, FieldAIList_Array) == 0x000020, "Member 'FEndDataTableCharaSpec::FieldAIList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableCharaSpec, BattleAIList_Array) == 0x000030, "Member 'FEndDataTableCharaSpec::BattleAIList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableCharaSpec, EnableCollision) == 0x000040, "Member 'FEndDataTableCharaSpec::EnableCollision' has a wrong offset!");
static_assert(offsetof(FEndDataTableCharaSpec, WeightType) == 0x000041, "Member 'FEndDataTableCharaSpec::WeightType' has a wrong offset!");
static_assert(offsetof(FEndDataTableCharaSpec, PhysiqueSize) == 0x000042, "Member 'FEndDataTableCharaSpec::PhysiqueSize' has a wrong offset!");
static_assert(offsetof(FEndDataTableCharaSpec, MoveType) == 0x000043, "Member 'FEndDataTableCharaSpec::MoveType' has a wrong offset!");
static_assert(offsetof(FEndDataTableCharaSpec, RootMotionTranslationScale) == 0x000044, "Member 'FEndDataTableCharaSpec::RootMotionTranslationScale' has a wrong offset!");
static_assert(offsetof(FEndDataTableCharaSpec, AnimationPlayRate) == 0x000048, "Member 'FEndDataTableCharaSpec::AnimationPlayRate' has a wrong offset!");
static_assert(offsetof(FEndDataTableCharaSpec, UseMasterPose) == 0x00004C, "Member 'FEndDataTableCharaSpec::UseMasterPose' has a wrong offset!");
static_assert(offsetof(FEndDataTableCharaSpec, IgnoreRagdollPhysics) == 0x00004D, "Member 'FEndDataTableCharaSpec::IgnoreRagdollPhysics' has a wrong offset!");
static_assert(offsetof(FEndDataTableCharaSpec, AISpec) == 0x000050, "Member 'FEndDataTableCharaSpec::AISpec' has a wrong offset!");
static_assert(offsetof(FEndDataTableCharaSpec, FlyAnimationBattlePackIndex) == 0x000058, "Member 'FEndDataTableCharaSpec::FlyAnimationBattlePackIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTableCharaSpec, FlyAnimationFieldPackIndex) == 0x000059, "Member 'FEndDataTableCharaSpec::FlyAnimationFieldPackIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTableCharaSpec, OverrideAnimationSetString_Array) == 0x000060, "Member 'FEndDataTableCharaSpec::OverrideAnimationSetString_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableCharaSpec, CreateFieldCharaController) == 0x000070, "Member 'FEndDataTableCharaSpec::CreateFieldCharaController' has a wrong offset!");
static_assert(offsetof(FEndDataTableCharaSpec, FieldActionSetString_Array) == 0x000078, "Member 'FEndDataTableCharaSpec::FieldActionSetString_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableCharaSpec, SoundCategoryId) == 0x000088, "Member 'FEndDataTableCharaSpec::SoundCategoryId' has a wrong offset!");
static_assert(offsetof(FEndDataTableCharaSpec, ContentsSoundSE) == 0x000090, "Member 'FEndDataTableCharaSpec::ContentsSoundSE' has a wrong offset!");
static_assert(offsetof(FEndDataTableCharaSpec, ContentsSoundAutoSE) == 0x0000A0, "Member 'FEndDataTableCharaSpec::ContentsSoundAutoSE' has a wrong offset!");
static_assert(offsetof(FEndDataTableCharaSpec, ContentSoundVoice_Array) == 0x0000B0, "Member 'FEndDataTableCharaSpec::ContentSoundVoice_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableCharaSpec, ContentSoundExpsionVoice) == 0x0000C0, "Member 'FEndDataTableCharaSpec::ContentSoundExpsionVoice' has a wrong offset!");
static_assert(offsetof(FEndDataTableCharaSpec, ContentsEffect) == 0x0000D0, "Member 'FEndDataTableCharaSpec::ContentsEffect' has a wrong offset!");
static_assert(offsetof(FEndDataTableCharaSpec, ContentsBattleCamera) == 0x0000E0, "Member 'FEndDataTableCharaSpec::ContentsBattleCamera' has a wrong offset!");
static_assert(offsetof(FEndDataTableCharaSpec, OverrideWeaponSocketNames_Array) == 0x0000F0, "Member 'FEndDataTableCharaSpec::OverrideWeaponSocketNames_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableCharaSpec, NaturalSoketNameList_Array) == 0x000100, "Member 'FEndDataTableCharaSpec::NaturalSoketNameList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableCharaSpec, AggressiveSoketNameList_Array) == 0x000110, "Member 'FEndDataTableCharaSpec::AggressiveSoketNameList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableCharaSpec, EquipmentCharaSpecList_Array) == 0x000120, "Member 'FEndDataTableCharaSpec::EquipmentCharaSpecList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableCharaSpec, EquipmentDefaultHiddenList_Array) == 0x000130, "Member 'FEndDataTableCharaSpec::EquipmentDefaultHiddenList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableCharaSpec, SharedCharaSpecList_Array) == 0x000140, "Member 'FEndDataTableCharaSpec::SharedCharaSpecList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableCharaSpec, AnimationSetList_Array) == 0x000150, "Member 'FEndDataTableCharaSpec::AnimationSetList_Array' has a wrong offset!");

// ScriptStruct EndGame.EndEffectAttachInfo
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x04) FEndEffectAttachInfo final
{
public:
	EAttachmentRule                               m_LocationRule;                                    // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAttachmentRule                               m_RotationRule;                                    // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAttachmentRule                               m_ScaleRule;                                       // 0x0002(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         m_bInWeldSimulatedBodies : 1;                      // 0x0004(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndEffectAttachInfo) == 0x000004, "Wrong alignment on FEndEffectAttachInfo");
static_assert(sizeof(FEndEffectAttachInfo) == 0x000008, "Wrong size on FEndEffectAttachInfo");
static_assert(offsetof(FEndEffectAttachInfo, m_LocationRule) == 0x000000, "Member 'FEndEffectAttachInfo::m_LocationRule' has a wrong offset!");
static_assert(offsetof(FEndEffectAttachInfo, m_RotationRule) == 0x000001, "Member 'FEndEffectAttachInfo::m_RotationRule' has a wrong offset!");
static_assert(offsetof(FEndEffectAttachInfo, m_ScaleRule) == 0x000002, "Member 'FEndEffectAttachInfo::m_ScaleRule' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableNaviMapInfo
// 0x0048 (0x0050 - 0x0008)
struct FEndDataTableNaviMapInfo final : public FEndDataTableRowBase
{
public:
	int32                                         LayerNumber;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PixcelPerCm;                                       // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           TextureName_Array;                                 // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 LayerToTexOriginX_Array;                           // 0x0020(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 LayerToTexOriginY_Array;                           // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 LayerToTexOriginZ_Array;                           // 0x0040(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableNaviMapInfo) == 0x000008, "Wrong alignment on FEndDataTableNaviMapInfo");
static_assert(sizeof(FEndDataTableNaviMapInfo) == 0x000050, "Wrong size on FEndDataTableNaviMapInfo");
static_assert(offsetof(FEndDataTableNaviMapInfo, LayerNumber) == 0x000008, "Member 'FEndDataTableNaviMapInfo::LayerNumber' has a wrong offset!");
static_assert(offsetof(FEndDataTableNaviMapInfo, PixcelPerCm) == 0x00000C, "Member 'FEndDataTableNaviMapInfo::PixcelPerCm' has a wrong offset!");
static_assert(offsetof(FEndDataTableNaviMapInfo, TextureName_Array) == 0x000010, "Member 'FEndDataTableNaviMapInfo::TextureName_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableNaviMapInfo, LayerToTexOriginX_Array) == 0x000020, "Member 'FEndDataTableNaviMapInfo::LayerToTexOriginX_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableNaviMapInfo, LayerToTexOriginY_Array) == 0x000030, "Member 'FEndDataTableNaviMapInfo::LayerToTexOriginY_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableNaviMapInfo, LayerToTexOriginZ_Array) == 0x000040, "Member 'FEndDataTableNaviMapInfo::LayerToTexOriginZ_Array' has a wrong offset!");

// ScriptStruct EndGame.OptionBaseInfo
// 0x0028 (0x0028 - 0x0000)
struct FOptionBaseInfo final
{
public:
	EOptionSelectionKind                          Kind;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOptionCategory                               OptionCategory;                                    // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Text;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 HelpText;                                          // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOptionBaseInfo) == 0x000008, "Wrong alignment on FOptionBaseInfo");
static_assert(sizeof(FOptionBaseInfo) == 0x000028, "Wrong size on FOptionBaseInfo");
static_assert(offsetof(FOptionBaseInfo, Kind) == 0x000000, "Member 'FOptionBaseInfo::Kind' has a wrong offset!");
static_assert(offsetof(FOptionBaseInfo, OptionCategory) == 0x000001, "Member 'FOptionBaseInfo::OptionCategory' has a wrong offset!");
static_assert(offsetof(FOptionBaseInfo, Text) == 0x000008, "Member 'FOptionBaseInfo::Text' has a wrong offset!");
static_assert(offsetof(FOptionBaseInfo, HelpText) == 0x000018, "Member 'FOptionBaseInfo::HelpText' has a wrong offset!");

// ScriptStruct EndGame.OptionSelectInfo
// 0x0030 (0x0030 - 0x0000)
struct FOptionSelectInfo final
{
public:
	TArray<class FString>                         ValueTexts;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         ValueHelps;                                        // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           OpenFlags;                                         // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOptionSelectInfo) == 0x000008, "Wrong alignment on FOptionSelectInfo");
static_assert(sizeof(FOptionSelectInfo) == 0x000030, "Wrong size on FOptionSelectInfo");
static_assert(offsetof(FOptionSelectInfo, ValueTexts) == 0x000000, "Member 'FOptionSelectInfo::ValueTexts' has a wrong offset!");
static_assert(offsetof(FOptionSelectInfo, ValueHelps) == 0x000010, "Member 'FOptionSelectInfo::ValueHelps' has a wrong offset!");
static_assert(offsetof(FOptionSelectInfo, OpenFlags) == 0x000020, "Member 'FOptionSelectInfo::OpenFlags' has a wrong offset!");

// ScriptStruct EndGame.OptionRangeInfo
// 0x0010 (0x0010 - 0x0000)
struct FOptionRangeInfo final
{
public:
	int32                                         MinValue;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxValue;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OpenFlag;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOptionRangeInfo) == 0x000004, "Wrong alignment on FOptionRangeInfo");
static_assert(sizeof(FOptionRangeInfo) == 0x000010, "Wrong size on FOptionRangeInfo");
static_assert(offsetof(FOptionRangeInfo, MinValue) == 0x000000, "Member 'FOptionRangeInfo::MinValue' has a wrong offset!");
static_assert(offsetof(FOptionRangeInfo, MaxValue) == 0x000004, "Member 'FOptionRangeInfo::MaxValue' has a wrong offset!");
static_assert(offsetof(FOptionRangeInfo, OpenFlag) == 0x000008, "Member 'FOptionRangeInfo::OpenFlag' has a wrong offset!");

// ScriptStruct EndGame.OptionInfo
// 0x0068 (0x0068 - 0x0000)
struct FOptionInfo final
{
public:
	struct FOptionBaseInfo                        BaseInfo;                                          // 0x0000(0x0028)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FOptionSelectInfo                      SelectInfo;                                        // 0x0028(0x0030)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FOptionRangeInfo                       RangeInfo;                                         // 0x0058(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOptionInfo) == 0x000008, "Wrong alignment on FOptionInfo");
static_assert(sizeof(FOptionInfo) == 0x000068, "Wrong size on FOptionInfo");
static_assert(offsetof(FOptionInfo, BaseInfo) == 0x000000, "Member 'FOptionInfo::BaseInfo' has a wrong offset!");
static_assert(offsetof(FOptionInfo, SelectInfo) == 0x000028, "Member 'FOptionInfo::SelectInfo' has a wrong offset!");
static_assert(offsetof(FOptionInfo, RangeInfo) == 0x000058, "Member 'FOptionInfo::RangeInfo' has a wrong offset!");

// ScriptStruct EndGame.EndBoidsTypeParam
// 0x0198 (0x0198 - 0x0000)
struct FEndBoidsTypeParam final
{
public:
	EEndAiCharaType                               InfluencersType;                                   // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         Influencers;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          RoleCheck;                                         // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBoids;                                            // 0x0019(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BoidsRadius;                                       // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRepulsive;                                        // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RepulsiveRadius;                                   // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28[0x170];                                     // 0x0028(0x0170)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBoidsTypeParam) == 0x000008, "Wrong alignment on FEndBoidsTypeParam");
static_assert(sizeof(FEndBoidsTypeParam) == 0x000198, "Wrong size on FEndBoidsTypeParam");
static_assert(offsetof(FEndBoidsTypeParam, InfluencersType) == 0x000000, "Member 'FEndBoidsTypeParam::InfluencersType' has a wrong offset!");
static_assert(offsetof(FEndBoidsTypeParam, Influencers) == 0x000008, "Member 'FEndBoidsTypeParam::Influencers' has a wrong offset!");
static_assert(offsetof(FEndBoidsTypeParam, RoleCheck) == 0x000018, "Member 'FEndBoidsTypeParam::RoleCheck' has a wrong offset!");
static_assert(offsetof(FEndBoidsTypeParam, bBoids) == 0x000019, "Member 'FEndBoidsTypeParam::bBoids' has a wrong offset!");
static_assert(offsetof(FEndBoidsTypeParam, BoidsRadius) == 0x00001C, "Member 'FEndBoidsTypeParam::BoidsRadius' has a wrong offset!");
static_assert(offsetof(FEndBoidsTypeParam, bRepulsive) == 0x000020, "Member 'FEndBoidsTypeParam::bRepulsive' has a wrong offset!");
static_assert(offsetof(FEndBoidsTypeParam, RepulsiveRadius) == 0x000024, "Member 'FEndBoidsTypeParam::RepulsiveRadius' has a wrong offset!");

// ScriptStruct EndGame.EndBoidsParam
// 0x0020 (0x0020 - 0x0000)
struct FEndBoidsParam final
{
public:
	float                                         PersonalSpace;                                     // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FEndBoidsTypeParam>             BoidsParameter;                                    // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBoidsParam) == 0x000008, "Wrong alignment on FEndBoidsParam");
static_assert(sizeof(FEndBoidsParam) == 0x000020, "Wrong size on FEndBoidsParam");
static_assert(offsetof(FEndBoidsParam, PersonalSpace) == 0x000000, "Member 'FEndBoidsParam::PersonalSpace' has a wrong offset!");
static_assert(offsetof(FEndBoidsParam, BoidsParameter) == 0x000008, "Member 'FEndBoidsParam::BoidsParameter' has a wrong offset!");

// ScriptStruct EndGame.EndHandEffectorSolveHand
// 0x0028 (0x0028 - 0x0000)
struct FEndHandEffectorSolveHand final
{
public:
	TArray<EEndHandType>                          ContainsHandTypes;                                 // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   HandBoneName;                                      // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShoulderStiffness;                                 // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HandProcessNumBonesInLimb;                         // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAxis                                         HandBoneForwardAxis;                               // 0x0020(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableElbowTwistCorrection;                       // 0x0021(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndHandEffectorSolveHand) == 0x000008, "Wrong alignment on FEndHandEffectorSolveHand");
static_assert(sizeof(FEndHandEffectorSolveHand) == 0x000028, "Wrong size on FEndHandEffectorSolveHand");
static_assert(offsetof(FEndHandEffectorSolveHand, ContainsHandTypes) == 0x000000, "Member 'FEndHandEffectorSolveHand::ContainsHandTypes' has a wrong offset!");
static_assert(offsetof(FEndHandEffectorSolveHand, HandBoneName) == 0x000010, "Member 'FEndHandEffectorSolveHand::HandBoneName' has a wrong offset!");
static_assert(offsetof(FEndHandEffectorSolveHand, ShoulderStiffness) == 0x000018, "Member 'FEndHandEffectorSolveHand::ShoulderStiffness' has a wrong offset!");
static_assert(offsetof(FEndHandEffectorSolveHand, HandProcessNumBonesInLimb) == 0x00001C, "Member 'FEndHandEffectorSolveHand::HandProcessNumBonesInLimb' has a wrong offset!");
static_assert(offsetof(FEndHandEffectorSolveHand, HandBoneForwardAxis) == 0x000020, "Member 'FEndHandEffectorSolveHand::HandBoneForwardAxis' has a wrong offset!");
static_assert(offsetof(FEndHandEffectorSolveHand, bEnableElbowTwistCorrection) == 0x000021, "Member 'FEndHandEffectorSolveHand::bEnableElbowTwistCorrection' has a wrong offset!");

// ScriptStruct EndGame.AnimNode_EndAdjustOrientation
// 0x0030 (0x00A0 - 0x0070)
struct FAnimNode_EndAdjustOrientation final : public FAnimNode_SkeletalControlBase
{
public:
	uint8                                         Pad_70[0x30];                                      // 0x0070(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_EndAdjustOrientation) == 0x000008, "Wrong alignment on FAnimNode_EndAdjustOrientation");
static_assert(sizeof(FAnimNode_EndAdjustOrientation) == 0x0000A0, "Wrong size on FAnimNode_EndAdjustOrientation");

// ScriptStruct EndGame.EndAIIntention
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FEndAIIntention
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bUpdatableWhenAIStop;                              // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndAIIntentionPriority                       Priority;                                          // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndAIIntention) == 0x000008, "Wrong alignment on FEndAIIntention");
static_assert(sizeof(FEndAIIntention) == 0x000010, "Wrong size on FEndAIIntention");
static_assert(offsetof(FEndAIIntention, bUpdatableWhenAIStop) == 0x000008, "Member 'FEndAIIntention::bUpdatableWhenAIStop' has a wrong offset!");
static_assert(offsetof(FEndAIIntention, Priority) == 0x000009, "Member 'FEndAIIntention::Priority' has a wrong offset!");

// ScriptStruct EndGame.EndAIIntentionWallContact
// 0x0050 (0x0060 - 0x0010)
struct FEndAIIntentionWallContact final : public FEndAIIntention
{
public:
	bool                                          bPlayingAnimation;                                 // 0x0010(0x0001)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AnimationTimer;                                    // 0x0014(0x0004)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AnimationCoolDownTime;                             // 0x0018(0x0004)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayingHipMove;                                   // 0x001C(0x0001)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HipMoveTimer;                                      // 0x0020(0x0004)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HipMoveCoolDownTime;                               // 0x0024(0x0004)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28[0x38];                                      // 0x0028(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndAIIntentionWallContact) == 0x000008, "Wrong alignment on FEndAIIntentionWallContact");
static_assert(sizeof(FEndAIIntentionWallContact) == 0x000060, "Wrong size on FEndAIIntentionWallContact");
static_assert(offsetof(FEndAIIntentionWallContact, bPlayingAnimation) == 0x000010, "Member 'FEndAIIntentionWallContact::bPlayingAnimation' has a wrong offset!");
static_assert(offsetof(FEndAIIntentionWallContact, AnimationTimer) == 0x000014, "Member 'FEndAIIntentionWallContact::AnimationTimer' has a wrong offset!");
static_assert(offsetof(FEndAIIntentionWallContact, AnimationCoolDownTime) == 0x000018, "Member 'FEndAIIntentionWallContact::AnimationCoolDownTime' has a wrong offset!");
static_assert(offsetof(FEndAIIntentionWallContact, bPlayingHipMove) == 0x00001C, "Member 'FEndAIIntentionWallContact::bPlayingHipMove' has a wrong offset!");
static_assert(offsetof(FEndAIIntentionWallContact, HipMoveTimer) == 0x000020, "Member 'FEndAIIntentionWallContact::HipMoveTimer' has a wrong offset!");
static_assert(offsetof(FEndAIIntentionWallContact, HipMoveCoolDownTime) == 0x000024, "Member 'FEndAIIntentionWallContact::HipMoveCoolDownTime' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableStateChange
// 0x00B8 (0x00C0 - 0x0008)
struct FEndDataTableStateChange final : public FEndDataTableRowBase
{
public:
	int32                                         UniqueIndex;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         SwapStateConditionNot_Array;                       // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           SwapStateCondition_Array;                          // 0x0020(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           SwapStateChange_Array;                             // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           EnterActionList_Array;                             // 0x0040(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 Status;                                            // 0x0050(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LoopAnimation;                                     // 0x0060(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LoopEffect;                                        // 0x0070(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           StringArgumentList_Array;                          // 0x0078(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 IntegerArgumentList_Array;                         // 0x0088(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           StateTriggerList_Array;                            // 0x0098(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         NextStateChange_Array;                             // 0x00A8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         ForceChange;                                       // 0x00B8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableStateChange) == 0x000008, "Wrong alignment on FEndDataTableStateChange");
static_assert(sizeof(FEndDataTableStateChange) == 0x0000C0, "Wrong size on FEndDataTableStateChange");
static_assert(offsetof(FEndDataTableStateChange, UniqueIndex) == 0x000008, "Member 'FEndDataTableStateChange::UniqueIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTableStateChange, SwapStateConditionNot_Array) == 0x000010, "Member 'FEndDataTableStateChange::SwapStateConditionNot_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableStateChange, SwapStateCondition_Array) == 0x000020, "Member 'FEndDataTableStateChange::SwapStateCondition_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableStateChange, SwapStateChange_Array) == 0x000030, "Member 'FEndDataTableStateChange::SwapStateChange_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableStateChange, EnterActionList_Array) == 0x000040, "Member 'FEndDataTableStateChange::EnterActionList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableStateChange, Status) == 0x000050, "Member 'FEndDataTableStateChange::Status' has a wrong offset!");
static_assert(offsetof(FEndDataTableStateChange, LoopAnimation) == 0x000060, "Member 'FEndDataTableStateChange::LoopAnimation' has a wrong offset!");
static_assert(offsetof(FEndDataTableStateChange, LoopEffect) == 0x000070, "Member 'FEndDataTableStateChange::LoopEffect' has a wrong offset!");
static_assert(offsetof(FEndDataTableStateChange, StringArgumentList_Array) == 0x000078, "Member 'FEndDataTableStateChange::StringArgumentList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableStateChange, IntegerArgumentList_Array) == 0x000088, "Member 'FEndDataTableStateChange::IntegerArgumentList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableStateChange, StateTriggerList_Array) == 0x000098, "Member 'FEndDataTableStateChange::StateTriggerList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableStateChange, NextStateChange_Array) == 0x0000A8, "Member 'FEndDataTableStateChange::NextStateChange_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableStateChange, ForceChange) == 0x0000B8, "Member 'FEndDataTableStateChange::ForceChange' has a wrong offset!");

// ScriptStruct EndGame.MonkeyBarLinkPoint
// 0x0004 (0x0004 - 0x0000)
struct FMonkeyBarLinkPoint final
{
public:
	uint16                                        Index;                                             // 0x0000(0x0002)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMonkeyBarsActorDirState                      Dir;                                               // 0x0002(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMonkeyBarLinkPoint) == 0x000002, "Wrong alignment on FMonkeyBarLinkPoint");
static_assert(sizeof(FMonkeyBarLinkPoint) == 0x000004, "Wrong size on FMonkeyBarLinkPoint");
static_assert(offsetof(FMonkeyBarLinkPoint, Index) == 0x000000, "Member 'FMonkeyBarLinkPoint::Index' has a wrong offset!");
static_assert(offsetof(FMonkeyBarLinkPoint, Dir) == 0x000002, "Member 'FMonkeyBarLinkPoint::Dir' has a wrong offset!");

// ScriptStruct EndGame.EndAIBehavior
// 0x0140 (0x0140 - 0x0000)
#pragma pack(push, 0x1)
struct alignas(0x10) FEndAIBehavior
{
public:
	uint8                                         Pad_0[0x110];                                      // 0x0000(0x0110)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bUpdatableWhenAIStop;                              // 0x0110(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_111[0x3];                                      // 0x0111(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Name;                                              // 0x0114(0x0008)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11C[0x4];                                      // 0x011C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EEndAIBehaviorTag>                     Tags;                                              // 0x0120(0x0010)(Edit, ZeroConstructor, Transient, EditConst, NativeAccessSpecifierPublic)
	EEndAIIntentionPriority                       Priority;                                          // 0x0130(0x0001)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndAIBehaviorState                           CurrentState;                                      // 0x0131(0x0001)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_132[0x2];                                      // 0x0132(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        Index;                                             // 0x0134(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
#pragma pack(pop)
static_assert(alignof(FEndAIBehavior) == 0x000010, "Wrong alignment on FEndAIBehavior");
static_assert(sizeof(FEndAIBehavior) == 0x000140, "Wrong size on FEndAIBehavior");
static_assert(offsetof(FEndAIBehavior, bUpdatableWhenAIStop) == 0x000110, "Member 'FEndAIBehavior::bUpdatableWhenAIStop' has a wrong offset!");
static_assert(offsetof(FEndAIBehavior, Name) == 0x000114, "Member 'FEndAIBehavior::Name' has a wrong offset!");
static_assert(offsetof(FEndAIBehavior, Tags) == 0x000120, "Member 'FEndAIBehavior::Tags' has a wrong offset!");
static_assert(offsetof(FEndAIBehavior, Priority) == 0x000130, "Member 'FEndAIBehavior::Priority' has a wrong offset!");
static_assert(offsetof(FEndAIBehavior, CurrentState) == 0x000131, "Member 'FEndAIBehavior::CurrentState' has a wrong offset!");
static_assert(offsetof(FEndAIBehavior, Index) == 0x000134, "Member 'FEndAIBehavior::Index' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableBattleStunInformation
// 0x0038 (0x0040 - 0x0008)
struct FEndDataTableBattleStunInformation final : public FEndDataTableRowBase
{
public:
	class FName                                   AttachEffect;                                      // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttachSocket;                                      // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StartReaction;                                     // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LoopReaction;                                      // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EndReaction;                                       // 0x0028(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 Rtype_Array;                                       // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableBattleStunInformation) == 0x000008, "Wrong alignment on FEndDataTableBattleStunInformation");
static_assert(sizeof(FEndDataTableBattleStunInformation) == 0x000040, "Wrong size on FEndDataTableBattleStunInformation");
static_assert(offsetof(FEndDataTableBattleStunInformation, AttachEffect) == 0x000008, "Member 'FEndDataTableBattleStunInformation::AttachEffect' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleStunInformation, AttachSocket) == 0x000010, "Member 'FEndDataTableBattleStunInformation::AttachSocket' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleStunInformation, StartReaction) == 0x000018, "Member 'FEndDataTableBattleStunInformation::StartReaction' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleStunInformation, LoopReaction) == 0x000020, "Member 'FEndDataTableBattleStunInformation::LoopReaction' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleStunInformation, EndReaction) == 0x000028, "Member 'FEndDataTableBattleStunInformation::EndReaction' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleStunInformation, Rtype_Array) == 0x000030, "Member 'FEndDataTableBattleStunInformation::Rtype_Array' has a wrong offset!");

// ScriptStruct EndGame.AnimNode_EndAttach
// 0x0020 (0x0090 - 0x0070)
struct FAnimNode_EndAttach final : public FAnimNode_SkeletalControlBase
{
public:
	struct FBoneReference                         AttachBone;                                        // 0x0070(0x0014)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	EAnimNodeEndAttachTarget                      AttachTarget;                                      // 0x0084(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_85[0x3];                                       // 0x0085(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   AttachTargetBoneName;                              // 0x0088(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAnimNode_EndAttach) == 0x000008, "Wrong alignment on FAnimNode_EndAttach");
static_assert(sizeof(FAnimNode_EndAttach) == 0x000090, "Wrong size on FAnimNode_EndAttach");
static_assert(offsetof(FAnimNode_EndAttach, AttachBone) == 0x000070, "Member 'FAnimNode_EndAttach::AttachBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_EndAttach, AttachTarget) == 0x000084, "Member 'FAnimNode_EndAttach::AttachTarget' has a wrong offset!");
static_assert(offsetof(FAnimNode_EndAttach, AttachTargetBoneName) == 0x000088, "Member 'FAnimNode_EndAttach::AttachTargetBoneName' has a wrong offset!");

// ScriptStruct EndGame.EndAIEvaluteRuntimeParamter
// 0x0004 (0x0004 - 0x0000)
struct alignas(0x04) FEndAIEvaluteRuntimeParamter final
{
public:
	uint8                                         Pad_0[0x4];                                        // 0x0000(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndAIEvaluteRuntimeParamter) == 0x000004, "Wrong alignment on FEndAIEvaluteRuntimeParamter");
static_assert(sizeof(FEndAIEvaluteRuntimeParamter) == 0x000004, "Wrong size on FEndAIEvaluteRuntimeParamter");

// ScriptStruct EndGame.AnimNode_EndBehavior
// 0x0000 (0x0030 - 0x0030)
struct FAnimNode_EndBehavior final : public FAnimNode_Base
{
};
static_assert(alignof(FAnimNode_EndBehavior) == 0x000008, "Wrong alignment on FAnimNode_EndBehavior");
static_assert(sizeof(FAnimNode_EndBehavior) == 0x000030, "Wrong size on FAnimNode_EndBehavior");

// ScriptStruct EndGame.EndBizarreBugWallInstanceContext
// 0x000C (0x000C - 0x0000)
struct FEndBizarreBugWallInstanceContext final
{
public:
	bool                                          bActive;                                           // 0x0000(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InstanceIndex;                                     // 0x0004(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Distance;                                          // 0x0008(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndBizarreBugWallInstanceContext) == 0x000004, "Wrong alignment on FEndBizarreBugWallInstanceContext");
static_assert(sizeof(FEndBizarreBugWallInstanceContext) == 0x00000C, "Wrong size on FEndBizarreBugWallInstanceContext");
static_assert(offsetof(FEndBizarreBugWallInstanceContext, bActive) == 0x000000, "Member 'FEndBizarreBugWallInstanceContext::bActive' has a wrong offset!");
static_assert(offsetof(FEndBizarreBugWallInstanceContext, InstanceIndex) == 0x000004, "Member 'FEndBizarreBugWallInstanceContext::InstanceIndex' has a wrong offset!");
static_assert(offsetof(FEndBizarreBugWallInstanceContext, Distance) == 0x000008, "Member 'FEndBizarreBugWallInstanceContext::Distance' has a wrong offset!");

// ScriptStruct EndGame.EndMenuColosseumBattleScenePrototypeData
// 0x0048 (0x0048 - 0x0000)
struct FEndMenuColosseumBattleScenePrototypeData final
{
public:
	class FName                                   BattleSceneID;                                     // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Title;                                             // 0x0008(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0018(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           PowerUpList;                                       // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           HandicapList;                                      // 0x0038(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndMenuColosseumBattleScenePrototypeData) == 0x000008, "Wrong alignment on FEndMenuColosseumBattleScenePrototypeData");
static_assert(sizeof(FEndMenuColosseumBattleScenePrototypeData) == 0x000048, "Wrong size on FEndMenuColosseumBattleScenePrototypeData");
static_assert(offsetof(FEndMenuColosseumBattleScenePrototypeData, BattleSceneID) == 0x000000, "Member 'FEndMenuColosseumBattleScenePrototypeData::BattleSceneID' has a wrong offset!");
static_assert(offsetof(FEndMenuColosseumBattleScenePrototypeData, Title) == 0x000008, "Member 'FEndMenuColosseumBattleScenePrototypeData::Title' has a wrong offset!");
static_assert(offsetof(FEndMenuColosseumBattleScenePrototypeData, Description) == 0x000018, "Member 'FEndMenuColosseumBattleScenePrototypeData::Description' has a wrong offset!");
static_assert(offsetof(FEndMenuColosseumBattleScenePrototypeData, PowerUpList) == 0x000028, "Member 'FEndMenuColosseumBattleScenePrototypeData::PowerUpList' has a wrong offset!");
static_assert(offsetof(FEndMenuColosseumBattleScenePrototypeData, HandicapList) == 0x000038, "Member 'FEndMenuColosseumBattleScenePrototypeData::HandicapList' has a wrong offset!");

// ScriptStruct EndGame.EndAIBehaviorWait
// 0x0000 (0x0140 - 0x0140)
struct FEndAIBehaviorWait : public FEndAIBehavior
{
public:
	float                                         WaitTime;                                          // 0x0138(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13C[0x4];                                      // 0x013C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndAIBehaviorWait) == 0x000010, "Wrong alignment on FEndAIBehaviorWait");
static_assert(sizeof(FEndAIBehaviorWait) == 0x000140, "Wrong size on FEndAIBehaviorWait");
static_assert(offsetof(FEndAIBehaviorWait, WaitTime) == 0x000138, "Member 'FEndAIBehaviorWait::WaitTime' has a wrong offset!");

// ScriptStruct EndGame.AnimNode_EndFaceBlend
// 0x0040 (0x0070 - 0x0030)
struct FAnimNode_EndFaceBlend final : public FAnimNode_Base
{
public:
	struct FPoseLink                              BasePose;                                          // 0x0030(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FPoseLink                              FacePose;                                          // 0x0048(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_60[0x10];                                      // 0x0060(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_EndFaceBlend) == 0x000008, "Wrong alignment on FAnimNode_EndFaceBlend");
static_assert(sizeof(FAnimNode_EndFaceBlend) == 0x000070, "Wrong size on FAnimNode_EndFaceBlend");
static_assert(offsetof(FAnimNode_EndFaceBlend, BasePose) == 0x000030, "Member 'FAnimNode_EndFaceBlend::BasePose' has a wrong offset!");
static_assert(offsetof(FAnimNode_EndFaceBlend, FacePose) == 0x000048, "Member 'FAnimNode_EndFaceBlend::FacePose' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableCutSceneChangeEquipList
// 0x0020 (0x0028 - 0x0008)
struct FEndDataTableCutSceneChangeEquipList final : public FEndDataTableRowBase
{
public:
	class FName                                   TargetCharacterName;                               // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AfterWeaponID;                                     // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           BeforeWeaponIDArray_Array;                         // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableCutSceneChangeEquipList) == 0x000008, "Wrong alignment on FEndDataTableCutSceneChangeEquipList");
static_assert(sizeof(FEndDataTableCutSceneChangeEquipList) == 0x000028, "Wrong size on FEndDataTableCutSceneChangeEquipList");
static_assert(offsetof(FEndDataTableCutSceneChangeEquipList, TargetCharacterName) == 0x000008, "Member 'FEndDataTableCutSceneChangeEquipList::TargetCharacterName' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneChangeEquipList, AfterWeaponID) == 0x000010, "Member 'FEndDataTableCutSceneChangeEquipList::AfterWeaponID' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneChangeEquipList, BeforeWeaponIDArray_Array) == 0x000018, "Member 'FEndDataTableCutSceneChangeEquipList::BeforeWeaponIDArray_Array' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableChapter
// 0x00A0 (0x00A8 - 0x0008)
struct FEndDataTableChapter final : public FEndDataTableRowBase
{
public:
	int32                                         UniqueID;                                          // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ChapterNameID;                                     // 0x000C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         LocationSlotIndex;                                 // 0x0014(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         IsAlwaysInitialize;                                // 0x0015(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         DelayShowChapterClear;                             // 0x0016(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17[0x1];                                       // 0x0017(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   StoryParentID;                                     // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         LocationResidentID_Array;                          // 0x0020(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         StateTriggerId_Array;                              // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 PlayerInfo_Array;                                  // 0x0040(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   HardModeClearStoryFlag;                            // 0x0050(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           RaiseStoryFlag_Array;                              // 0x0058(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           DropStoryFlag_Array;                               // 0x0068(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           AddKeyItem_Array;                                  // 0x0078(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           DeleteKeyItem_Array;                               // 0x0088(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         HiddenNaviMapLayerNumber_Array;                    // 0x0098(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableChapter) == 0x000008, "Wrong alignment on FEndDataTableChapter");
static_assert(sizeof(FEndDataTableChapter) == 0x0000A8, "Wrong size on FEndDataTableChapter");
static_assert(offsetof(FEndDataTableChapter, UniqueID) == 0x000008, "Member 'FEndDataTableChapter::UniqueID' has a wrong offset!");
static_assert(offsetof(FEndDataTableChapter, ChapterNameID) == 0x00000C, "Member 'FEndDataTableChapter::ChapterNameID' has a wrong offset!");
static_assert(offsetof(FEndDataTableChapter, LocationSlotIndex) == 0x000014, "Member 'FEndDataTableChapter::LocationSlotIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTableChapter, IsAlwaysInitialize) == 0x000015, "Member 'FEndDataTableChapter::IsAlwaysInitialize' has a wrong offset!");
static_assert(offsetof(FEndDataTableChapter, DelayShowChapterClear) == 0x000016, "Member 'FEndDataTableChapter::DelayShowChapterClear' has a wrong offset!");
static_assert(offsetof(FEndDataTableChapter, StoryParentID) == 0x000018, "Member 'FEndDataTableChapter::StoryParentID' has a wrong offset!");
static_assert(offsetof(FEndDataTableChapter, LocationResidentID_Array) == 0x000020, "Member 'FEndDataTableChapter::LocationResidentID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableChapter, StateTriggerId_Array) == 0x000030, "Member 'FEndDataTableChapter::StateTriggerId_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableChapter, PlayerInfo_Array) == 0x000040, "Member 'FEndDataTableChapter::PlayerInfo_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableChapter, HardModeClearStoryFlag) == 0x000050, "Member 'FEndDataTableChapter::HardModeClearStoryFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTableChapter, RaiseStoryFlag_Array) == 0x000058, "Member 'FEndDataTableChapter::RaiseStoryFlag_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableChapter, DropStoryFlag_Array) == 0x000068, "Member 'FEndDataTableChapter::DropStoryFlag_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableChapter, AddKeyItem_Array) == 0x000078, "Member 'FEndDataTableChapter::AddKeyItem_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableChapter, DeleteKeyItem_Array) == 0x000088, "Member 'FEndDataTableChapter::DeleteKeyItem_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableChapter, HiddenNaviMapLayerNumber_Array) == 0x000098, "Member 'FEndDataTableChapter::HiddenNaviMapLayerNumber_Array' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableCommonSaveDataConfig
// 0x0028 (0x0030 - 0x0008)
struct FEndDataTableCommonSaveDataConfig final : public FEndDataTableRowBase
{
public:
	uint8                                         DifficultyType;                                    // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         WaitMode;                                          // 0x0009(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         LearnMenuCursor;                                   // 0x000A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         LearnBattleCursor;                                 // 0x000B(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         NaviMapAutoRotate;                                 // 0x000C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ViewTutorial;                                      // 0x000D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ViewSubtitle;                                      // 0x000E(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         AutoTalk;                                          // 0x000F(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         FontSize;                                          // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         TargetLockChangeMethodType;                        // 0x0011(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         CameraSideRotType;                                 // 0x0012(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         CameraVerticalRotType;                             // 0x0013(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ControllerVibration;                               // 0x0014(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         SpeakerOutputType;                                 // 0x0015(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         BgmVolume;                                         // 0x0016(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         SeVolume;                                          // 0x0017(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         VoiceVolume;                                       // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         BrightnessSetting;                                 // 0x0019(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         TextLanguage;                                      // 0x001A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         VoiceLanguage;                                     // 0x001B(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         CameraLeapTime;                                    // 0x001C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         CameraLengthField;                                 // 0x001D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         CameraLengthBattle;                                // 0x001E(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ChangeKeyAssignForTargetLock;                      // 0x001F(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         AutoUnlockForTargetLock;                           // 0x0020(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         LockOnType;                                        // 0x0021(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         SequenceNormalAttackTargetChange;                  // 0x0022(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         CameraMoveFollow;                                  // 0x0023(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         CameraSlopeFollow;                                 // 0x0024(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         TargetLockChangeOperationType;                     // 0x0025(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         CameraSpaceOffset;                                 // 0x0026(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ScreenVibration;                                   // 0x0027(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         CameraAttackFollow;                                // 0x0028(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         FriendCommandCameraType;                           // 0x0029(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         AutoPlayMode;                                      // 0x002A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ShowBattleGuide;                                   // 0x002B(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         BattleButtonChange;                                // 0x002C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableCommonSaveDataConfig) == 0x000008, "Wrong alignment on FEndDataTableCommonSaveDataConfig");
static_assert(sizeof(FEndDataTableCommonSaveDataConfig) == 0x000030, "Wrong size on FEndDataTableCommonSaveDataConfig");
static_assert(offsetof(FEndDataTableCommonSaveDataConfig, DifficultyType) == 0x000008, "Member 'FEndDataTableCommonSaveDataConfig::DifficultyType' has a wrong offset!");
static_assert(offsetof(FEndDataTableCommonSaveDataConfig, WaitMode) == 0x000009, "Member 'FEndDataTableCommonSaveDataConfig::WaitMode' has a wrong offset!");
static_assert(offsetof(FEndDataTableCommonSaveDataConfig, LearnMenuCursor) == 0x00000A, "Member 'FEndDataTableCommonSaveDataConfig::LearnMenuCursor' has a wrong offset!");
static_assert(offsetof(FEndDataTableCommonSaveDataConfig, LearnBattleCursor) == 0x00000B, "Member 'FEndDataTableCommonSaveDataConfig::LearnBattleCursor' has a wrong offset!");
static_assert(offsetof(FEndDataTableCommonSaveDataConfig, NaviMapAutoRotate) == 0x00000C, "Member 'FEndDataTableCommonSaveDataConfig::NaviMapAutoRotate' has a wrong offset!");
static_assert(offsetof(FEndDataTableCommonSaveDataConfig, ViewTutorial) == 0x00000D, "Member 'FEndDataTableCommonSaveDataConfig::ViewTutorial' has a wrong offset!");
static_assert(offsetof(FEndDataTableCommonSaveDataConfig, ViewSubtitle) == 0x00000E, "Member 'FEndDataTableCommonSaveDataConfig::ViewSubtitle' has a wrong offset!");
static_assert(offsetof(FEndDataTableCommonSaveDataConfig, AutoTalk) == 0x00000F, "Member 'FEndDataTableCommonSaveDataConfig::AutoTalk' has a wrong offset!");
static_assert(offsetof(FEndDataTableCommonSaveDataConfig, FontSize) == 0x000010, "Member 'FEndDataTableCommonSaveDataConfig::FontSize' has a wrong offset!");
static_assert(offsetof(FEndDataTableCommonSaveDataConfig, TargetLockChangeMethodType) == 0x000011, "Member 'FEndDataTableCommonSaveDataConfig::TargetLockChangeMethodType' has a wrong offset!");
static_assert(offsetof(FEndDataTableCommonSaveDataConfig, CameraSideRotType) == 0x000012, "Member 'FEndDataTableCommonSaveDataConfig::CameraSideRotType' has a wrong offset!");
static_assert(offsetof(FEndDataTableCommonSaveDataConfig, CameraVerticalRotType) == 0x000013, "Member 'FEndDataTableCommonSaveDataConfig::CameraVerticalRotType' has a wrong offset!");
static_assert(offsetof(FEndDataTableCommonSaveDataConfig, ControllerVibration) == 0x000014, "Member 'FEndDataTableCommonSaveDataConfig::ControllerVibration' has a wrong offset!");
static_assert(offsetof(FEndDataTableCommonSaveDataConfig, SpeakerOutputType) == 0x000015, "Member 'FEndDataTableCommonSaveDataConfig::SpeakerOutputType' has a wrong offset!");
static_assert(offsetof(FEndDataTableCommonSaveDataConfig, BgmVolume) == 0x000016, "Member 'FEndDataTableCommonSaveDataConfig::BgmVolume' has a wrong offset!");
static_assert(offsetof(FEndDataTableCommonSaveDataConfig, SeVolume) == 0x000017, "Member 'FEndDataTableCommonSaveDataConfig::SeVolume' has a wrong offset!");
static_assert(offsetof(FEndDataTableCommonSaveDataConfig, VoiceVolume) == 0x000018, "Member 'FEndDataTableCommonSaveDataConfig::VoiceVolume' has a wrong offset!");
static_assert(offsetof(FEndDataTableCommonSaveDataConfig, BrightnessSetting) == 0x000019, "Member 'FEndDataTableCommonSaveDataConfig::BrightnessSetting' has a wrong offset!");
static_assert(offsetof(FEndDataTableCommonSaveDataConfig, TextLanguage) == 0x00001A, "Member 'FEndDataTableCommonSaveDataConfig::TextLanguage' has a wrong offset!");
static_assert(offsetof(FEndDataTableCommonSaveDataConfig, VoiceLanguage) == 0x00001B, "Member 'FEndDataTableCommonSaveDataConfig::VoiceLanguage' has a wrong offset!");
static_assert(offsetof(FEndDataTableCommonSaveDataConfig, CameraLeapTime) == 0x00001C, "Member 'FEndDataTableCommonSaveDataConfig::CameraLeapTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableCommonSaveDataConfig, CameraLengthField) == 0x00001D, "Member 'FEndDataTableCommonSaveDataConfig::CameraLengthField' has a wrong offset!");
static_assert(offsetof(FEndDataTableCommonSaveDataConfig, CameraLengthBattle) == 0x00001E, "Member 'FEndDataTableCommonSaveDataConfig::CameraLengthBattle' has a wrong offset!");
static_assert(offsetof(FEndDataTableCommonSaveDataConfig, ChangeKeyAssignForTargetLock) == 0x00001F, "Member 'FEndDataTableCommonSaveDataConfig::ChangeKeyAssignForTargetLock' has a wrong offset!");
static_assert(offsetof(FEndDataTableCommonSaveDataConfig, AutoUnlockForTargetLock) == 0x000020, "Member 'FEndDataTableCommonSaveDataConfig::AutoUnlockForTargetLock' has a wrong offset!");
static_assert(offsetof(FEndDataTableCommonSaveDataConfig, LockOnType) == 0x000021, "Member 'FEndDataTableCommonSaveDataConfig::LockOnType' has a wrong offset!");
static_assert(offsetof(FEndDataTableCommonSaveDataConfig, SequenceNormalAttackTargetChange) == 0x000022, "Member 'FEndDataTableCommonSaveDataConfig::SequenceNormalAttackTargetChange' has a wrong offset!");
static_assert(offsetof(FEndDataTableCommonSaveDataConfig, CameraMoveFollow) == 0x000023, "Member 'FEndDataTableCommonSaveDataConfig::CameraMoveFollow' has a wrong offset!");
static_assert(offsetof(FEndDataTableCommonSaveDataConfig, CameraSlopeFollow) == 0x000024, "Member 'FEndDataTableCommonSaveDataConfig::CameraSlopeFollow' has a wrong offset!");
static_assert(offsetof(FEndDataTableCommonSaveDataConfig, TargetLockChangeOperationType) == 0x000025, "Member 'FEndDataTableCommonSaveDataConfig::TargetLockChangeOperationType' has a wrong offset!");
static_assert(offsetof(FEndDataTableCommonSaveDataConfig, CameraSpaceOffset) == 0x000026, "Member 'FEndDataTableCommonSaveDataConfig::CameraSpaceOffset' has a wrong offset!");
static_assert(offsetof(FEndDataTableCommonSaveDataConfig, ScreenVibration) == 0x000027, "Member 'FEndDataTableCommonSaveDataConfig::ScreenVibration' has a wrong offset!");
static_assert(offsetof(FEndDataTableCommonSaveDataConfig, CameraAttackFollow) == 0x000028, "Member 'FEndDataTableCommonSaveDataConfig::CameraAttackFollow' has a wrong offset!");
static_assert(offsetof(FEndDataTableCommonSaveDataConfig, FriendCommandCameraType) == 0x000029, "Member 'FEndDataTableCommonSaveDataConfig::FriendCommandCameraType' has a wrong offset!");
static_assert(offsetof(FEndDataTableCommonSaveDataConfig, AutoPlayMode) == 0x00002A, "Member 'FEndDataTableCommonSaveDataConfig::AutoPlayMode' has a wrong offset!");
static_assert(offsetof(FEndDataTableCommonSaveDataConfig, ShowBattleGuide) == 0x00002B, "Member 'FEndDataTableCommonSaveDataConfig::ShowBattleGuide' has a wrong offset!");
static_assert(offsetof(FEndDataTableCommonSaveDataConfig, BattleButtonChange) == 0x00002C, "Member 'FEndDataTableCommonSaveDataConfig::BattleButtonChange' has a wrong offset!");

// ScriptStruct EndGame.EndDuctSplineLinkInfo
// 0x0002 (0x0002 - 0x0000)
struct FEndDuctSplineLinkInfo final
{
public:
	int8                                          Index;                                             // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndPointOrder                                Order;                                             // 0x0001(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDuctSplineLinkInfo) == 0x000001, "Wrong alignment on FEndDuctSplineLinkInfo");
static_assert(sizeof(FEndDuctSplineLinkInfo) == 0x000002, "Wrong size on FEndDuctSplineLinkInfo");
static_assert(offsetof(FEndDuctSplineLinkInfo, Index) == 0x000000, "Member 'FEndDuctSplineLinkInfo::Index' has a wrong offset!");
static_assert(offsetof(FEndDuctSplineLinkInfo, Order) == 0x000001, "Member 'FEndDuctSplineLinkInfo::Order' has a wrong offset!");

// ScriptStruct EndGame.EndAIIntentionIdleBase
// 0x0068 (0x0078 - 0x0010)
struct FEndAIIntentionIdleBase : public FEndAIIntention
{
public:
	bool                                          bPlayingLookAt;                                    // 0x0010(0x0001)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LookAtTimer;                                       // 0x0014(0x0004)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LookAtWaitTime;                                    // 0x0018(0x0004)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               LookAtTargetRotation;                              // 0x001C(0x000C)(Edit, Transient, EditConst, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         SaccadeTimer;                                      // 0x0028(0x0004)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SaccadeWaitTime;                                   // 0x002C(0x0004)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SaccadeWaitTimerByLookAt;                          // 0x0030(0x0004)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SaccadeUpdateTimer;                                // 0x0034(0x0004)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               SaccadeTargetRotation;                             // 0x0038(0x000C)(Edit, Transient, EditConst, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                MeshSpaceSaccadeTargetLocation;                    // 0x0044(0x000C)(Edit, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x28];                                      // 0x0050(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndAIIntentionIdleBase) == 0x000008, "Wrong alignment on FEndAIIntentionIdleBase");
static_assert(sizeof(FEndAIIntentionIdleBase) == 0x000078, "Wrong size on FEndAIIntentionIdleBase");
static_assert(offsetof(FEndAIIntentionIdleBase, bPlayingLookAt) == 0x000010, "Member 'FEndAIIntentionIdleBase::bPlayingLookAt' has a wrong offset!");
static_assert(offsetof(FEndAIIntentionIdleBase, LookAtTimer) == 0x000014, "Member 'FEndAIIntentionIdleBase::LookAtTimer' has a wrong offset!");
static_assert(offsetof(FEndAIIntentionIdleBase, LookAtWaitTime) == 0x000018, "Member 'FEndAIIntentionIdleBase::LookAtWaitTime' has a wrong offset!");
static_assert(offsetof(FEndAIIntentionIdleBase, LookAtTargetRotation) == 0x00001C, "Member 'FEndAIIntentionIdleBase::LookAtTargetRotation' has a wrong offset!");
static_assert(offsetof(FEndAIIntentionIdleBase, SaccadeTimer) == 0x000028, "Member 'FEndAIIntentionIdleBase::SaccadeTimer' has a wrong offset!");
static_assert(offsetof(FEndAIIntentionIdleBase, SaccadeWaitTime) == 0x00002C, "Member 'FEndAIIntentionIdleBase::SaccadeWaitTime' has a wrong offset!");
static_assert(offsetof(FEndAIIntentionIdleBase, SaccadeWaitTimerByLookAt) == 0x000030, "Member 'FEndAIIntentionIdleBase::SaccadeWaitTimerByLookAt' has a wrong offset!");
static_assert(offsetof(FEndAIIntentionIdleBase, SaccadeUpdateTimer) == 0x000034, "Member 'FEndAIIntentionIdleBase::SaccadeUpdateTimer' has a wrong offset!");
static_assert(offsetof(FEndAIIntentionIdleBase, SaccadeTargetRotation) == 0x000038, "Member 'FEndAIIntentionIdleBase::SaccadeTargetRotation' has a wrong offset!");
static_assert(offsetof(FEndAIIntentionIdleBase, MeshSpaceSaccadeTargetLocation) == 0x000044, "Member 'FEndAIIntentionIdleBase::MeshSpaceSaccadeTargetLocation' has a wrong offset!");

// ScriptStruct EndGame.EndAIIntentionTalkControl
// 0x00A8 (0x0120 - 0x0078)
struct FEndAIIntentionTalkControl final : public FEndAIIntentionIdleBase
{
public:
	class UEndAIIntentionTalkControlSetting*      Setting;                                           // 0x0078(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SentenceId;                                        // 0x0080(0x0004)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentPosingStateIndex;                           // 0x0084(0x0004)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentPosingWaitTimer;                            // 0x0088(0x0004)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LastEmotionalActionName;                           // 0x008C(0x0008)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TalkInRequestId;                                   // 0x0094(0x0004)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TalkOutRequestId;                                  // 0x0098(0x0004)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TotalInterest;                                     // 0x009C(0x0004)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SnapTotalInterest;                                 // 0x00A0(0x0004)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InterestLookAtLocation;                            // 0x00A4(0x000C)(Edit, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InterestSaccadeLocation;                           // 0x00B0(0x000C)(Edit, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InterestLocationOffsetHeight;                      // 0x00BC(0x0004)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ManualLookAtId;                                    // 0x00C0(0x0004)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LookAtTurnWaitTimer;                               // 0x00C4(0x0004)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LookAtTurnWaitTimeMax;                             // 0x00C8(0x0004)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LookAtTurnSentenceId;                              // 0x00CC(0x0004)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D0[0x50];                                      // 0x00D0(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndAIIntentionTalkControl) == 0x000008, "Wrong alignment on FEndAIIntentionTalkControl");
static_assert(sizeof(FEndAIIntentionTalkControl) == 0x000120, "Wrong size on FEndAIIntentionTalkControl");
static_assert(offsetof(FEndAIIntentionTalkControl, Setting) == 0x000078, "Member 'FEndAIIntentionTalkControl::Setting' has a wrong offset!");
static_assert(offsetof(FEndAIIntentionTalkControl, SentenceId) == 0x000080, "Member 'FEndAIIntentionTalkControl::SentenceId' has a wrong offset!");
static_assert(offsetof(FEndAIIntentionTalkControl, CurrentPosingStateIndex) == 0x000084, "Member 'FEndAIIntentionTalkControl::CurrentPosingStateIndex' has a wrong offset!");
static_assert(offsetof(FEndAIIntentionTalkControl, CurrentPosingWaitTimer) == 0x000088, "Member 'FEndAIIntentionTalkControl::CurrentPosingWaitTimer' has a wrong offset!");
static_assert(offsetof(FEndAIIntentionTalkControl, LastEmotionalActionName) == 0x00008C, "Member 'FEndAIIntentionTalkControl::LastEmotionalActionName' has a wrong offset!");
static_assert(offsetof(FEndAIIntentionTalkControl, TalkInRequestId) == 0x000094, "Member 'FEndAIIntentionTalkControl::TalkInRequestId' has a wrong offset!");
static_assert(offsetof(FEndAIIntentionTalkControl, TalkOutRequestId) == 0x000098, "Member 'FEndAIIntentionTalkControl::TalkOutRequestId' has a wrong offset!");
static_assert(offsetof(FEndAIIntentionTalkControl, TotalInterest) == 0x00009C, "Member 'FEndAIIntentionTalkControl::TotalInterest' has a wrong offset!");
static_assert(offsetof(FEndAIIntentionTalkControl, SnapTotalInterest) == 0x0000A0, "Member 'FEndAIIntentionTalkControl::SnapTotalInterest' has a wrong offset!");
static_assert(offsetof(FEndAIIntentionTalkControl, InterestLookAtLocation) == 0x0000A4, "Member 'FEndAIIntentionTalkControl::InterestLookAtLocation' has a wrong offset!");
static_assert(offsetof(FEndAIIntentionTalkControl, InterestSaccadeLocation) == 0x0000B0, "Member 'FEndAIIntentionTalkControl::InterestSaccadeLocation' has a wrong offset!");
static_assert(offsetof(FEndAIIntentionTalkControl, InterestLocationOffsetHeight) == 0x0000BC, "Member 'FEndAIIntentionTalkControl::InterestLocationOffsetHeight' has a wrong offset!");
static_assert(offsetof(FEndAIIntentionTalkControl, ManualLookAtId) == 0x0000C0, "Member 'FEndAIIntentionTalkControl::ManualLookAtId' has a wrong offset!");
static_assert(offsetof(FEndAIIntentionTalkControl, LookAtTurnWaitTimer) == 0x0000C4, "Member 'FEndAIIntentionTalkControl::LookAtTurnWaitTimer' has a wrong offset!");
static_assert(offsetof(FEndAIIntentionTalkControl, LookAtTurnWaitTimeMax) == 0x0000C8, "Member 'FEndAIIntentionTalkControl::LookAtTurnWaitTimeMax' has a wrong offset!");
static_assert(offsetof(FEndAIIntentionTalkControl, LookAtTurnSentenceId) == 0x0000CC, "Member 'FEndAIIntentionTalkControl::LookAtTurnSentenceId' has a wrong offset!");

// ScriptStruct EndGame.AnimNode_EndBodyDriver
// 0x0020 (0x08D0 - 0x08B0)
struct FAnimNode_EndBodyDriver final : public FAnimNode_BodyDriver
{
public:
	bool                                          bForceDead;                                        // 0x08A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8A9[0x27];                                     // 0x08A9(0x0027)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_EndBodyDriver) == 0x000010, "Wrong alignment on FAnimNode_EndBodyDriver");
static_assert(sizeof(FAnimNode_EndBodyDriver) == 0x0008D0, "Wrong size on FAnimNode_EndBodyDriver");
static_assert(offsetof(FAnimNode_EndBodyDriver, bForceDead) == 0x0008A8, "Member 'FAnimNode_EndBodyDriver::bForceDead' has a wrong offset!");

// ScriptStruct EndGame.EndBehaviorAction
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FEndBehaviorAction
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorAction) == 0x000008, "Wrong alignment on FEndBehaviorAction");
static_assert(sizeof(FEndBehaviorAction) == 0x000018, "Wrong size on FEndBehaviorAction");

// ScriptStruct EndGame.EndBehaviorSequencePlayAction
// 0x0630 (0x0648 - 0x0018)
struct FEndBehaviorSequencePlayAction : public FEndBehaviorAction
{
public:
	uint8                                         Pad_18[0x630];                                     // 0x0018(0x0630)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorSequencePlayAction) == 0x000008, "Wrong alignment on FEndBehaviorSequencePlayAction");
static_assert(sizeof(FEndBehaviorSequencePlayAction) == 0x000648, "Wrong size on FEndBehaviorSequencePlayAction");

// ScriptStruct EndGame.EndBehaviorExtraAction
// 0x0178 (0x07C0 - 0x0648)
struct alignas(0x10) FEndBehaviorExtraAction : public FEndBehaviorSequencePlayAction
{
public:
	uint8                                         Pad_648[0x178];                                    // 0x0648(0x0178)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorExtraAction");
static_assert(sizeof(FEndBehaviorExtraAction) == 0x0007C0, "Wrong size on FEndBehaviorExtraAction");

// ScriptStruct EndGame.EndBehaviorEndBranchFsmExtraAction
// 0x0320 (0x0AE0 - 0x07C0)
struct FEndBehaviorEndBranchFsmExtraAction final : public FEndBehaviorExtraAction
{
public:
	uint8                                         Pad_7C0[0x320];                                    // 0x07C0(0x0320)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorEndBranchFsmExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorEndBranchFsmExtraAction");
static_assert(sizeof(FEndBehaviorEndBranchFsmExtraAction) == 0x000AE0, "Wrong size on FEndBehaviorEndBranchFsmExtraAction");

// ScriptStruct EndGame.AnimNode_EndChocoboCarriage
// 0x0028 (0x0058 - 0x0030)
struct FAnimNode_EndChocoboCarriage final : public FAnimNode_Base
{
public:
	struct FPoseLink                              BasePose;                                          // 0x0030(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FBoneReference>                 HideBones;                                         // 0x0048(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAnimNode_EndChocoboCarriage) == 0x000008, "Wrong alignment on FAnimNode_EndChocoboCarriage");
static_assert(sizeof(FAnimNode_EndChocoboCarriage) == 0x000058, "Wrong size on FAnimNode_EndChocoboCarriage");
static_assert(offsetof(FAnimNode_EndChocoboCarriage, BasePose) == 0x000030, "Member 'FAnimNode_EndChocoboCarriage::BasePose' has a wrong offset!");
static_assert(offsetof(FAnimNode_EndChocoboCarriage, HideBones) == 0x000048, "Member 'FAnimNode_EndChocoboCarriage::HideBones' has a wrong offset!");

// ScriptStruct EndGame.AnimNode_EndWire
// 0x0010 (0x0040 - 0x0030)
struct FAnimNode_EndWire final : public FAnimNode_Base
{
public:
	TArray<struct FBoneReference>                 WireBones;                                         // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAnimNode_EndWire) == 0x000008, "Wrong alignment on FAnimNode_EndWire");
static_assert(sizeof(FAnimNode_EndWire) == 0x000040, "Wrong size on FAnimNode_EndWire");
static_assert(offsetof(FAnimNode_EndWire, WireBones) == 0x000030, "Member 'FAnimNode_EndWire::WireBones' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableTreasureSpec
// 0x0038 (0x0040 - 0x0008)
struct FEndDataTableTreasureSpec final : public FEndDataTableRowBase
{
public:
	class FString                                 aa;                                                // 0x0008(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           CharaSpecID_Array;                                 // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   ResponseAreaID;                                    // 0x0028(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ResponseAreaPlayerID;                              // 0x0030(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         HideGet;                                           // 0x0038(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableTreasureSpec) == 0x000008, "Wrong alignment on FEndDataTableTreasureSpec");
static_assert(sizeof(FEndDataTableTreasureSpec) == 0x000040, "Wrong size on FEndDataTableTreasureSpec");
static_assert(offsetof(FEndDataTableTreasureSpec, aa) == 0x000008, "Member 'FEndDataTableTreasureSpec::aa' has a wrong offset!");
static_assert(offsetof(FEndDataTableTreasureSpec, CharaSpecID_Array) == 0x000018, "Member 'FEndDataTableTreasureSpec::CharaSpecID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableTreasureSpec, ResponseAreaID) == 0x000028, "Member 'FEndDataTableTreasureSpec::ResponseAreaID' has a wrong offset!");
static_assert(offsetof(FEndDataTableTreasureSpec, ResponseAreaPlayerID) == 0x000030, "Member 'FEndDataTableTreasureSpec::ResponseAreaPlayerID' has a wrong offset!");
static_assert(offsetof(FEndDataTableTreasureSpec, HideGet) == 0x000038, "Member 'FEndDataTableTreasureSpec::HideGet' has a wrong offset!");

// ScriptStruct EndGame.AnimNode_EndFace
// 0x0000 (0x03B0 - 0x03B0)
struct FAnimNode_EndFace final : public FAnimNode_HSFLipSync
{
};
static_assert(alignof(FAnimNode_EndFace) == 0x000010, "Wrong alignment on FAnimNode_EndFace");
static_assert(sizeof(FAnimNode_EndFace) == 0x0003B0, "Wrong size on FAnimNode_EndFace");

// ScriptStruct EndGame.AnimNode_EndFullBodySolver
// 0x08D0 (0x0940 - 0x0070)
struct alignas(0x10) FAnimNode_EndFullBodySolver final : public FAnimNode_SkeletalControlBase
{
public:
	uint8                                         Pad_70[0x8D0];                                     // 0x0070(0x08D0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_EndFullBodySolver) == 0x000010, "Wrong alignment on FAnimNode_EndFullBodySolver");
static_assert(sizeof(FAnimNode_EndFullBodySolver) == 0x000940, "Wrong size on FAnimNode_EndFullBodySolver");

// ScriptStruct EndGame.EndLocalRotateBoneSetting
// 0x0030 (0x0030 - 0x0000)
struct FEndLocalRotateBoneSetting final
{
public:
	struct FBoneReference                         Bone;                                              // 0x0000(0x0014)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               RotationRate;                                      // 0x0014(0x000C)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         RotationSpeed;                                     // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendInTime;                                       // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendOutTime;                                      // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceBlend;                                       // 0x002C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndLocalRotateBoneSetting) == 0x000004, "Wrong alignment on FEndLocalRotateBoneSetting");
static_assert(sizeof(FEndLocalRotateBoneSetting) == 0x000030, "Wrong size on FEndLocalRotateBoneSetting");
static_assert(offsetof(FEndLocalRotateBoneSetting, Bone) == 0x000000, "Member 'FEndLocalRotateBoneSetting::Bone' has a wrong offset!");
static_assert(offsetof(FEndLocalRotateBoneSetting, RotationRate) == 0x000014, "Member 'FEndLocalRotateBoneSetting::RotationRate' has a wrong offset!");
static_assert(offsetof(FEndLocalRotateBoneSetting, RotationSpeed) == 0x000020, "Member 'FEndLocalRotateBoneSetting::RotationSpeed' has a wrong offset!");
static_assert(offsetof(FEndLocalRotateBoneSetting, BlendInTime) == 0x000024, "Member 'FEndLocalRotateBoneSetting::BlendInTime' has a wrong offset!");
static_assert(offsetof(FEndLocalRotateBoneSetting, BlendOutTime) == 0x000028, "Member 'FEndLocalRotateBoneSetting::BlendOutTime' has a wrong offset!");
static_assert(offsetof(FEndLocalRotateBoneSetting, bForceBlend) == 0x00002C, "Member 'FEndLocalRotateBoneSetting::bForceBlend' has a wrong offset!");

// ScriptStruct EndGame.AnimNode_EndLocalRotate
// 0x0078 (0x00A8 - 0x0030)
struct FAnimNode_EndLocalRotate final : public FAnimNode_Base
{
public:
	struct FPoseLink                              Source;                                            // 0x0030(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FEndLocalRotateBoneSetting>     BoneSettings;                                      // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_58[0x50];                                      // 0x0058(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_EndLocalRotate) == 0x000008, "Wrong alignment on FAnimNode_EndLocalRotate");
static_assert(sizeof(FAnimNode_EndLocalRotate) == 0x0000A8, "Wrong size on FAnimNode_EndLocalRotate");
static_assert(offsetof(FAnimNode_EndLocalRotate, Source) == 0x000030, "Member 'FAnimNode_EndLocalRotate::Source' has a wrong offset!");
static_assert(offsetof(FAnimNode_EndLocalRotate, BoneSettings) == 0x000048, "Member 'FAnimNode_EndLocalRotate::BoneSettings' has a wrong offset!");

// ScriptStruct EndGame.End3DAudioSimpleCylinder
// 0x0038 (0x0038 - 0x0000)
struct FEnd3DAudioSimpleCylinder final
{
public:
	uint8                                         Pad_0[0x2];                                        // 0x0000(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          Enable;                                            // 0x0002(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Radius;                                            // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HalfHeight;                                        // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HeightOffset;                                      // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsSendStateTriggerPlayingOnly;                     // 0x0010(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 StateTriggerOnEnter;                               // 0x0018(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StateTriggerOnLeave;                               // 0x0028(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEnd3DAudioSimpleCylinder) == 0x000008, "Wrong alignment on FEnd3DAudioSimpleCylinder");
static_assert(sizeof(FEnd3DAudioSimpleCylinder) == 0x000038, "Wrong size on FEnd3DAudioSimpleCylinder");
static_assert(offsetof(FEnd3DAudioSimpleCylinder, Enable) == 0x000002, "Member 'FEnd3DAudioSimpleCylinder::Enable' has a wrong offset!");
static_assert(offsetof(FEnd3DAudioSimpleCylinder, Radius) == 0x000004, "Member 'FEnd3DAudioSimpleCylinder::Radius' has a wrong offset!");
static_assert(offsetof(FEnd3DAudioSimpleCylinder, HalfHeight) == 0x000008, "Member 'FEnd3DAudioSimpleCylinder::HalfHeight' has a wrong offset!");
static_assert(offsetof(FEnd3DAudioSimpleCylinder, HeightOffset) == 0x00000C, "Member 'FEnd3DAudioSimpleCylinder::HeightOffset' has a wrong offset!");
static_assert(offsetof(FEnd3DAudioSimpleCylinder, IsSendStateTriggerPlayingOnly) == 0x000010, "Member 'FEnd3DAudioSimpleCylinder::IsSendStateTriggerPlayingOnly' has a wrong offset!");
static_assert(offsetof(FEnd3DAudioSimpleCylinder, StateTriggerOnEnter) == 0x000018, "Member 'FEnd3DAudioSimpleCylinder::StateTriggerOnEnter' has a wrong offset!");
static_assert(offsetof(FEnd3DAudioSimpleCylinder, StateTriggerOnLeave) == 0x000028, "Member 'FEnd3DAudioSimpleCylinder::StateTriggerOnLeave' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableBattleAIPCSceneSetting
// 0x0018 (0x0020 - 0x0008)
struct FEndDataTableBattleAIPCSceneSetting final : public FEndDataTableRowBase
{
public:
	class FName                                   Target;                                            // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SceneID;                                           // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Phase;                                             // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Guard;                                             // 0x001C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          BackAttack;                                        // 0x001D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SideAttack;                                        // 0x001E(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F[0x1];                                       // 0x001F(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableBattleAIPCSceneSetting) == 0x000008, "Wrong alignment on FEndDataTableBattleAIPCSceneSetting");
static_assert(sizeof(FEndDataTableBattleAIPCSceneSetting) == 0x000020, "Wrong size on FEndDataTableBattleAIPCSceneSetting");
static_assert(offsetof(FEndDataTableBattleAIPCSceneSetting, Target) == 0x000008, "Member 'FEndDataTableBattleAIPCSceneSetting::Target' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAIPCSceneSetting, SceneID) == 0x000010, "Member 'FEndDataTableBattleAIPCSceneSetting::SceneID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAIPCSceneSetting, Phase) == 0x000018, "Member 'FEndDataTableBattleAIPCSceneSetting::Phase' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAIPCSceneSetting, Guard) == 0x00001C, "Member 'FEndDataTableBattleAIPCSceneSetting::Guard' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAIPCSceneSetting, BackAttack) == 0x00001D, "Member 'FEndDataTableBattleAIPCSceneSetting::BackAttack' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAIPCSceneSetting, SideAttack) == 0x00001E, "Member 'FEndDataTableBattleAIPCSceneSetting::SideAttack' has a wrong offset!");

// ScriptStruct EndGame.AnimNode_EndPhysicalRotate
// 0x00A0 (0x0110 - 0x0070)
struct FAnimNode_EndPhysicalRotate final : public FAnimNode_SkeletalControlBase
{
public:
	struct FBoneReference                         TargetBone;                                        // 0x0070(0x0014)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FAxis                                  EndPointDirection;                                 // 0x0084(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	float                                         EndPointDistance;                                  // 0x0094(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabledEndPointGravity;                           // 0x0098(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_99[0x3];                                       // 0x0099(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AnimatedPositionStiffness;                         // 0x009C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VelocityFriction;                                  // 0x00A0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ConstraintAngle;                                   // 0x00A4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ConstraintAngleStiffness;                          // 0x00A8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FBoneReference>                 ContactBones;                                      // 0x00B0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         ContactPadding;                                    // 0x00C0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ContactPaddingToAnimPositionRate;                  // 0x00C4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ContactPositionStiffness;                          // 0x00C8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ContactVelocityStiffness;                          // 0x00CC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PositionIterationCount;                            // 0x00D0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VelocityIterationCount;                            // 0x00D4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WeightSmoothRate;                                  // 0x00D8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ActiveDuringTime;                                  // 0x00DC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E0[0x30];                                      // 0x00E0(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_EndPhysicalRotate) == 0x000008, "Wrong alignment on FAnimNode_EndPhysicalRotate");
static_assert(sizeof(FAnimNode_EndPhysicalRotate) == 0x000110, "Wrong size on FAnimNode_EndPhysicalRotate");
static_assert(offsetof(FAnimNode_EndPhysicalRotate, TargetBone) == 0x000070, "Member 'FAnimNode_EndPhysicalRotate::TargetBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_EndPhysicalRotate, EndPointDirection) == 0x000084, "Member 'FAnimNode_EndPhysicalRotate::EndPointDirection' has a wrong offset!");
static_assert(offsetof(FAnimNode_EndPhysicalRotate, EndPointDistance) == 0x000094, "Member 'FAnimNode_EndPhysicalRotate::EndPointDistance' has a wrong offset!");
static_assert(offsetof(FAnimNode_EndPhysicalRotate, bEnabledEndPointGravity) == 0x000098, "Member 'FAnimNode_EndPhysicalRotate::bEnabledEndPointGravity' has a wrong offset!");
static_assert(offsetof(FAnimNode_EndPhysicalRotate, AnimatedPositionStiffness) == 0x00009C, "Member 'FAnimNode_EndPhysicalRotate::AnimatedPositionStiffness' has a wrong offset!");
static_assert(offsetof(FAnimNode_EndPhysicalRotate, VelocityFriction) == 0x0000A0, "Member 'FAnimNode_EndPhysicalRotate::VelocityFriction' has a wrong offset!");
static_assert(offsetof(FAnimNode_EndPhysicalRotate, ConstraintAngle) == 0x0000A4, "Member 'FAnimNode_EndPhysicalRotate::ConstraintAngle' has a wrong offset!");
static_assert(offsetof(FAnimNode_EndPhysicalRotate, ConstraintAngleStiffness) == 0x0000A8, "Member 'FAnimNode_EndPhysicalRotate::ConstraintAngleStiffness' has a wrong offset!");
static_assert(offsetof(FAnimNode_EndPhysicalRotate, ContactBones) == 0x0000B0, "Member 'FAnimNode_EndPhysicalRotate::ContactBones' has a wrong offset!");
static_assert(offsetof(FAnimNode_EndPhysicalRotate, ContactPadding) == 0x0000C0, "Member 'FAnimNode_EndPhysicalRotate::ContactPadding' has a wrong offset!");
static_assert(offsetof(FAnimNode_EndPhysicalRotate, ContactPaddingToAnimPositionRate) == 0x0000C4, "Member 'FAnimNode_EndPhysicalRotate::ContactPaddingToAnimPositionRate' has a wrong offset!");
static_assert(offsetof(FAnimNode_EndPhysicalRotate, ContactPositionStiffness) == 0x0000C8, "Member 'FAnimNode_EndPhysicalRotate::ContactPositionStiffness' has a wrong offset!");
static_assert(offsetof(FAnimNode_EndPhysicalRotate, ContactVelocityStiffness) == 0x0000CC, "Member 'FAnimNode_EndPhysicalRotate::ContactVelocityStiffness' has a wrong offset!");
static_assert(offsetof(FAnimNode_EndPhysicalRotate, PositionIterationCount) == 0x0000D0, "Member 'FAnimNode_EndPhysicalRotate::PositionIterationCount' has a wrong offset!");
static_assert(offsetof(FAnimNode_EndPhysicalRotate, VelocityIterationCount) == 0x0000D4, "Member 'FAnimNode_EndPhysicalRotate::VelocityIterationCount' has a wrong offset!");
static_assert(offsetof(FAnimNode_EndPhysicalRotate, WeightSmoothRate) == 0x0000D8, "Member 'FAnimNode_EndPhysicalRotate::WeightSmoothRate' has a wrong offset!");
static_assert(offsetof(FAnimNode_EndPhysicalRotate, ActiveDuringTime) == 0x0000DC, "Member 'FAnimNode_EndPhysicalRotate::ActiveDuringTime' has a wrong offset!");

// ScriptStruct EndGame.AnimNode_EndRedXIIIFire
// 0x0030 (0x00A0 - 0x0070)
struct FAnimNode_EndRedXIIIFire final : public FAnimNode_SkeletalControlBase
{
public:
	struct FBoneReference                         TargetBone;                                        // 0x0070(0x0014)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	float                                         FireSize;                                          // 0x0084(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Stiffness;                                         // 0x0088(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x14];                                      // 0x008C(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_EndRedXIIIFire) == 0x000008, "Wrong alignment on FAnimNode_EndRedXIIIFire");
static_assert(sizeof(FAnimNode_EndRedXIIIFire) == 0x0000A0, "Wrong size on FAnimNode_EndRedXIIIFire");
static_assert(offsetof(FAnimNode_EndRedXIIIFire, TargetBone) == 0x000070, "Member 'FAnimNode_EndRedXIIIFire::TargetBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_EndRedXIIIFire, FireSize) == 0x000084, "Member 'FAnimNode_EndRedXIIIFire::FireSize' has a wrong offset!");
static_assert(offsetof(FAnimNode_EndRedXIIIFire, Stiffness) == 0x000088, "Member 'FAnimNode_EndRedXIIIFire::Stiffness' has a wrong offset!");

// ScriptStruct EndGame.AnimNode_EndSaveLastPose
// 0x0018 (0x0048 - 0x0030)
struct FAnimNode_EndSaveLastPose final : public FAnimNode_Base
{
public:
	struct FPoseLink                              Source;                                            // 0x0030(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAnimNode_EndSaveLastPose) == 0x000008, "Wrong alignment on FAnimNode_EndSaveLastPose");
static_assert(sizeof(FAnimNode_EndSaveLastPose) == 0x000048, "Wrong size on FAnimNode_EndSaveLastPose");
static_assert(offsetof(FAnimNode_EndSaveLastPose, Source) == 0x000030, "Member 'FAnimNode_EndSaveLastPose::Source' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableSummonParameter
// 0x0008 (0x0010 - 0x0008)
struct FEndDataTableSummonParameter final : public FEndDataTableRowBase
{
public:
	int32                                         Strength;                                          // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Magic;                                             // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableSummonParameter) == 0x000008, "Wrong alignment on FEndDataTableSummonParameter");
static_assert(sizeof(FEndDataTableSummonParameter) == 0x000010, "Wrong size on FEndDataTableSummonParameter");
static_assert(offsetof(FEndDataTableSummonParameter, Strength) == 0x000008, "Member 'FEndDataTableSummonParameter::Strength' has a wrong offset!");
static_assert(offsetof(FEndDataTableSummonParameter, Magic) == 0x00000C, "Member 'FEndDataTableSummonParameter::Magic' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableBattleCharaAttach
// 0x0038 (0x0040 - 0x0008)
struct FEndDataTableBattleCharaAttach final : public FEndDataTableRowBase
{
public:
	uint8                                         Attached;                                          // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         AttachMethod;                                      // 0x0009(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         OwnerSync;                                         // 0x000A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         EnableTarget;                                      // 0x000B(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         EnableAttachedInvincible;                          // 0x000C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         DisableAttachedCollision;                          // 0x000D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         KindMesh;                                          // 0x000E(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         AttachedResetRelativeTransform;                    // 0x000F(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParentCharacterName;                               // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttachParentSocketName0;                           // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         AttachedCameraLockPos;                             // 0x0020(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   MasterMeshName;                                    // 0x0024(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ChildMeshName1;                                    // 0x002C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ChildMeshName2;                                    // 0x0034(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         CharacterType;                                     // 0x003C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         AffectedParentStop;                                // 0x003D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3E[0x2];                                       // 0x003E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableBattleCharaAttach) == 0x000008, "Wrong alignment on FEndDataTableBattleCharaAttach");
static_assert(sizeof(FEndDataTableBattleCharaAttach) == 0x000040, "Wrong size on FEndDataTableBattleCharaAttach");
static_assert(offsetof(FEndDataTableBattleCharaAttach, Attached) == 0x000008, "Member 'FEndDataTableBattleCharaAttach::Attached' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaAttach, AttachMethod) == 0x000009, "Member 'FEndDataTableBattleCharaAttach::AttachMethod' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaAttach, OwnerSync) == 0x00000A, "Member 'FEndDataTableBattleCharaAttach::OwnerSync' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaAttach, EnableTarget) == 0x00000B, "Member 'FEndDataTableBattleCharaAttach::EnableTarget' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaAttach, EnableAttachedInvincible) == 0x00000C, "Member 'FEndDataTableBattleCharaAttach::EnableAttachedInvincible' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaAttach, DisableAttachedCollision) == 0x00000D, "Member 'FEndDataTableBattleCharaAttach::DisableAttachedCollision' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaAttach, KindMesh) == 0x00000E, "Member 'FEndDataTableBattleCharaAttach::KindMesh' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaAttach, AttachedResetRelativeTransform) == 0x00000F, "Member 'FEndDataTableBattleCharaAttach::AttachedResetRelativeTransform' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaAttach, ParentCharacterName) == 0x000010, "Member 'FEndDataTableBattleCharaAttach::ParentCharacterName' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaAttach, AttachParentSocketName0) == 0x000018, "Member 'FEndDataTableBattleCharaAttach::AttachParentSocketName0' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaAttach, AttachedCameraLockPos) == 0x000020, "Member 'FEndDataTableBattleCharaAttach::AttachedCameraLockPos' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaAttach, MasterMeshName) == 0x000024, "Member 'FEndDataTableBattleCharaAttach::MasterMeshName' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaAttach, ChildMeshName1) == 0x00002C, "Member 'FEndDataTableBattleCharaAttach::ChildMeshName1' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaAttach, ChildMeshName2) == 0x000034, "Member 'FEndDataTableBattleCharaAttach::ChildMeshName2' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaAttach, CharacterType) == 0x00003C, "Member 'FEndDataTableBattleCharaAttach::CharacterType' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaAttach, AffectedParentStop) == 0x00003D, "Member 'FEndDataTableBattleCharaAttach::AffectedParentStop' has a wrong offset!");

// ScriptStruct EndGame.EndLocomotionAnim
// 0x000C (0x000C - 0x0000)
struct FEndLocomotionAnim final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAbstract;                                         // 0x0008(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndLocomotionAnim) == 0x000004, "Wrong alignment on FEndLocomotionAnim");
static_assert(sizeof(FEndLocomotionAnim) == 0x00000C, "Wrong size on FEndLocomotionAnim");
static_assert(offsetof(FEndLocomotionAnim, Name) == 0x000000, "Member 'FEndLocomotionAnim::Name' has a wrong offset!");
static_assert(offsetof(FEndLocomotionAnim, bAbstract) == 0x000008, "Member 'FEndLocomotionAnim::bAbstract' has a wrong offset!");

// ScriptStruct EndGame.AnimNode_EndSlotBlend
// 0x0018 (0x00F8 - 0x00E0)
struct FAnimNode_EndSlotBlend final : public FAnimNode_LayeredBoneBlend
{
public:
	class FName                                   SlotName;                                          // 0x00E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E8[0x10];                                      // 0x00E8(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_EndSlotBlend) == 0x000008, "Wrong alignment on FAnimNode_EndSlotBlend");
static_assert(sizeof(FAnimNode_EndSlotBlend) == 0x0000F8, "Wrong size on FAnimNode_EndSlotBlend");
static_assert(offsetof(FAnimNode_EndSlotBlend, SlotName) == 0x0000E0, "Member 'FAnimNode_EndSlotBlend::SlotName' has a wrong offset!");

// ScriptStruct EndGame.EndPhysicalConstraintSetting_TemporalAnimPosition
// 0x001C (0x001C - 0x0000)
struct FEndPhysicalConstraintSetting_TemporalAnimPosition final
{
public:
	class FName                                   BoneName0;                                         // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName1;                                         // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BoneInvMassBias0;                                  // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BoneInvMassBias1;                                  // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Stiffness;                                         // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndPhysicalConstraintSetting_TemporalAnimPosition) == 0x000004, "Wrong alignment on FEndPhysicalConstraintSetting_TemporalAnimPosition");
static_assert(sizeof(FEndPhysicalConstraintSetting_TemporalAnimPosition) == 0x00001C, "Wrong size on FEndPhysicalConstraintSetting_TemporalAnimPosition");
static_assert(offsetof(FEndPhysicalConstraintSetting_TemporalAnimPosition, BoneName0) == 0x000000, "Member 'FEndPhysicalConstraintSetting_TemporalAnimPosition::BoneName0' has a wrong offset!");
static_assert(offsetof(FEndPhysicalConstraintSetting_TemporalAnimPosition, BoneName1) == 0x000008, "Member 'FEndPhysicalConstraintSetting_TemporalAnimPosition::BoneName1' has a wrong offset!");
static_assert(offsetof(FEndPhysicalConstraintSetting_TemporalAnimPosition, BoneInvMassBias0) == 0x000010, "Member 'FEndPhysicalConstraintSetting_TemporalAnimPosition::BoneInvMassBias0' has a wrong offset!");
static_assert(offsetof(FEndPhysicalConstraintSetting_TemporalAnimPosition, BoneInvMassBias1) == 0x000014, "Member 'FEndPhysicalConstraintSetting_TemporalAnimPosition::BoneInvMassBias1' has a wrong offset!");
static_assert(offsetof(FEndPhysicalConstraintSetting_TemporalAnimPosition, Stiffness) == 0x000018, "Member 'FEndPhysicalConstraintSetting_TemporalAnimPosition::Stiffness' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableCondorFortUnit
// 0x0058 (0x0060 - 0x0008)
struct FEndDataTableCondorFortUnit final : public FEndDataTableRowBase
{
public:
	uint8                                         UniqueID;                                          // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   NameTextID;                                        // 0x000C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   HelpTextID;                                        // 0x0014(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Reality;                                           // 0x001C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Icon;                                              // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Image;                                             // 0x0028(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Role;                                              // 0x0030(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Cost;                                              // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FormationID;                                       // 0x0038(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           CharacterID_Array;                                 // 0x0040(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<uint8>                                 PointIndex_Array;                                  // 0x0050(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableCondorFortUnit) == 0x000008, "Wrong alignment on FEndDataTableCondorFortUnit");
static_assert(sizeof(FEndDataTableCondorFortUnit) == 0x000060, "Wrong size on FEndDataTableCondorFortUnit");
static_assert(offsetof(FEndDataTableCondorFortUnit, UniqueID) == 0x000008, "Member 'FEndDataTableCondorFortUnit::UniqueID' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortUnit, NameTextID) == 0x00000C, "Member 'FEndDataTableCondorFortUnit::NameTextID' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortUnit, HelpTextID) == 0x000014, "Member 'FEndDataTableCondorFortUnit::HelpTextID' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortUnit, Reality) == 0x00001C, "Member 'FEndDataTableCondorFortUnit::Reality' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortUnit, Icon) == 0x000020, "Member 'FEndDataTableCondorFortUnit::Icon' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortUnit, Image) == 0x000028, "Member 'FEndDataTableCondorFortUnit::Image' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortUnit, Role) == 0x000030, "Member 'FEndDataTableCondorFortUnit::Role' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortUnit, Cost) == 0x000034, "Member 'FEndDataTableCondorFortUnit::Cost' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortUnit, FormationID) == 0x000038, "Member 'FEndDataTableCondorFortUnit::FormationID' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortUnit, CharacterID_Array) == 0x000040, "Member 'FEndDataTableCondorFortUnit::CharacterID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortUnit, PointIndex_Array) == 0x000050, "Member 'FEndDataTableCondorFortUnit::PointIndex_Array' has a wrong offset!");

// ScriptStruct EndGame.EndOverrideLocomotionSetting
// 0x000C (0x000C - 0x0000)
struct FEndOverrideLocomotionSetting final
{
public:
	class FName                                   SequenceName;                                      // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Rate;                                              // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndOverrideLocomotionSetting) == 0x000004, "Wrong alignment on FEndOverrideLocomotionSetting");
static_assert(sizeof(FEndOverrideLocomotionSetting) == 0x00000C, "Wrong size on FEndOverrideLocomotionSetting");
static_assert(offsetof(FEndOverrideLocomotionSetting, SequenceName) == 0x000000, "Member 'FEndOverrideLocomotionSetting::SequenceName' has a wrong offset!");
static_assert(offsetof(FEndOverrideLocomotionSetting, Rate) == 0x000008, "Member 'FEndOverrideLocomotionSetting::Rate' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableEmotion
// 0x0018 (0x0020 - 0x0008)
struct FEndDataTableEmotion final : public FEndDataTableRowBase
{
public:
	uint8                                         CanUpperBodyAnimation;                             // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         MotionName_Array;                                  // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableEmotion) == 0x000008, "Wrong alignment on FEndDataTableEmotion");
static_assert(sizeof(FEndDataTableEmotion) == 0x000020, "Wrong size on FEndDataTableEmotion");
static_assert(offsetof(FEndDataTableEmotion, CanUpperBodyAnimation) == 0x000008, "Member 'FEndDataTableEmotion::CanUpperBodyAnimation' has a wrong offset!");
static_assert(offsetof(FEndDataTableEmotion, MotionName_Array) == 0x000010, "Member 'FEndDataTableEmotion::MotionName_Array' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableBattleCharaLevel
// 0x0020 (0x0028 - 0x0008)
struct FEndDataTableBattleCharaLevel final : public FEndDataTableRowBase
{
public:
	TArray<class FName>                           StoryFlag_Array;                                   // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<uint8>                                 Level_Array;                                       // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableBattleCharaLevel) == 0x000008, "Wrong alignment on FEndDataTableBattleCharaLevel");
static_assert(sizeof(FEndDataTableBattleCharaLevel) == 0x000028, "Wrong size on FEndDataTableBattleCharaLevel");
static_assert(offsetof(FEndDataTableBattleCharaLevel, StoryFlag_Array) == 0x000008, "Member 'FEndDataTableBattleCharaLevel::StoryFlag_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaLevel, Level_Array) == 0x000018, "Member 'FEndDataTableBattleCharaLevel::Level_Array' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableCutCharaID
// 0x0028 (0x0030 - 0x0008)
struct FEndDataTableCutCharaID final : public FTableRowBase
{
public:
	class FName                                   CutsceneID;                                        // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PachiCharaName;                                    // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PachiCharaSpec;                                    // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LocationLevelName;                                 // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PachiCharaFlag;                                    // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableCutCharaID) == 0x000008, "Wrong alignment on FEndDataTableCutCharaID");
static_assert(sizeof(FEndDataTableCutCharaID) == 0x000030, "Wrong size on FEndDataTableCutCharaID");
static_assert(offsetof(FEndDataTableCutCharaID, CutsceneID) == 0x000008, "Member 'FEndDataTableCutCharaID::CutsceneID' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutCharaID, PachiCharaName) == 0x000010, "Member 'FEndDataTableCutCharaID::PachiCharaName' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutCharaID, PachiCharaSpec) == 0x000018, "Member 'FEndDataTableCutCharaID::PachiCharaSpec' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutCharaID, LocationLevelName) == 0x000020, "Member 'FEndDataTableCutCharaID::LocationLevelName' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutCharaID, PachiCharaFlag) == 0x000028, "Member 'FEndDataTableCutCharaID::PachiCharaFlag' has a wrong offset!");

// ScriptStruct EndGame.EndPlayParticleActorInfo
// 0x000C (0x000C - 0x0000)
struct FEndPlayParticleActorInfo final
{
public:
	uint8                                         m_Enable : 1;                                      // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   m_SocketName;                                      // 0x0004(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndPlayParticleActorInfo) == 0x000004, "Wrong alignment on FEndPlayParticleActorInfo");
static_assert(sizeof(FEndPlayParticleActorInfo) == 0x00000C, "Wrong size on FEndPlayParticleActorInfo");
static_assert(offsetof(FEndPlayParticleActorInfo, m_SocketName) == 0x000004, "Member 'FEndPlayParticleActorInfo::m_SocketName' has a wrong offset!");

// ScriptStruct EndGame.EndPhysicsSeSetting
// 0x00B0 (0x00B0 - 0x0000)
struct FEndPhysicsSeSetting final
{
public:
	uint8                                         bEnable : 1;                                       // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSQEXSEADSoundKey                      HitSEKey;                                          // 0x0008(0x0038)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         HitImpulseThreshold;                               // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HitDistanceThreshold;                              // 0x0044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HitImpulseSizeMax;                                 // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundAttenuation*                      HitAttenuationSetting;                             // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundConcurrency*                      HitConcurrencySetting;                             // 0x0058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSQEXSEADSoundKey                      FractureSEKey;                                     // 0x0060(0x0038)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         FractureImpulseSizeMax;                            // 0x0098(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundAttenuation*                      FractureAttenuationSetting;                        // 0x00A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bHitSensitive : 1;                                 // 0x00A8(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_A9[0x3];                                       // 0x00A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HitSensitiveScalingValue;                          // 0x00AC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndPhysicsSeSetting) == 0x000008, "Wrong alignment on FEndPhysicsSeSetting");
static_assert(sizeof(FEndPhysicsSeSetting) == 0x0000B0, "Wrong size on FEndPhysicsSeSetting");
static_assert(offsetof(FEndPhysicsSeSetting, HitSEKey) == 0x000008, "Member 'FEndPhysicsSeSetting::HitSEKey' has a wrong offset!");
static_assert(offsetof(FEndPhysicsSeSetting, HitImpulseThreshold) == 0x000040, "Member 'FEndPhysicsSeSetting::HitImpulseThreshold' has a wrong offset!");
static_assert(offsetof(FEndPhysicsSeSetting, HitDistanceThreshold) == 0x000044, "Member 'FEndPhysicsSeSetting::HitDistanceThreshold' has a wrong offset!");
static_assert(offsetof(FEndPhysicsSeSetting, HitImpulseSizeMax) == 0x000048, "Member 'FEndPhysicsSeSetting::HitImpulseSizeMax' has a wrong offset!");
static_assert(offsetof(FEndPhysicsSeSetting, HitAttenuationSetting) == 0x000050, "Member 'FEndPhysicsSeSetting::HitAttenuationSetting' has a wrong offset!");
static_assert(offsetof(FEndPhysicsSeSetting, HitConcurrencySetting) == 0x000058, "Member 'FEndPhysicsSeSetting::HitConcurrencySetting' has a wrong offset!");
static_assert(offsetof(FEndPhysicsSeSetting, FractureSEKey) == 0x000060, "Member 'FEndPhysicsSeSetting::FractureSEKey' has a wrong offset!");
static_assert(offsetof(FEndPhysicsSeSetting, FractureImpulseSizeMax) == 0x000098, "Member 'FEndPhysicsSeSetting::FractureImpulseSizeMax' has a wrong offset!");
static_assert(offsetof(FEndPhysicsSeSetting, FractureAttenuationSetting) == 0x0000A0, "Member 'FEndPhysicsSeSetting::FractureAttenuationSetting' has a wrong offset!");
static_assert(offsetof(FEndPhysicsSeSetting, HitSensitiveScalingValue) == 0x0000AC, "Member 'FEndPhysicsSeSetting::HitSensitiveScalingValue' has a wrong offset!");

// ScriptStruct EndGame.EndBreakBoxMiniGameBoxPhysicsSe
// 0x00B8 (0x00B8 - 0x0000)
struct FEndBreakBoxMiniGameBoxPhysicsSe final
{
public:
	class UObject*                                AssetUserData;                                     // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEndPhysicsSeSetting                   SeSetting;                                         // 0x0008(0x00B0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndBreakBoxMiniGameBoxPhysicsSe) == 0x000008, "Wrong alignment on FEndBreakBoxMiniGameBoxPhysicsSe");
static_assert(sizeof(FEndBreakBoxMiniGameBoxPhysicsSe) == 0x0000B8, "Wrong size on FEndBreakBoxMiniGameBoxPhysicsSe");
static_assert(offsetof(FEndBreakBoxMiniGameBoxPhysicsSe, AssetUserData) == 0x000000, "Member 'FEndBreakBoxMiniGameBoxPhysicsSe::AssetUserData' has a wrong offset!");
static_assert(offsetof(FEndBreakBoxMiniGameBoxPhysicsSe, SeSetting) == 0x000008, "Member 'FEndBreakBoxMiniGameBoxPhysicsSe::SeSetting' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableResidentBattleTalkGroup
// 0x0020 (0x0028 - 0x0008)
struct FEndDataTableResidentBattleTalkGroup final : public FEndDataTableRowBase
{
public:
	TArray<class FName>                           BattleConditionTriggerGroupId_Array;               // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           TalkGroupID_Array;                                 // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableResidentBattleTalkGroup) == 0x000008, "Wrong alignment on FEndDataTableResidentBattleTalkGroup");
static_assert(sizeof(FEndDataTableResidentBattleTalkGroup) == 0x000028, "Wrong size on FEndDataTableResidentBattleTalkGroup");
static_assert(offsetof(FEndDataTableResidentBattleTalkGroup, BattleConditionTriggerGroupId_Array) == 0x000008, "Member 'FEndDataTableResidentBattleTalkGroup::BattleConditionTriggerGroupId_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableResidentBattleTalkGroup, TalkGroupID_Array) == 0x000018, "Member 'FEndDataTableResidentBattleTalkGroup::TalkGroupID_Array' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableCounters
// 0x0010 (0x0018 - 0x0008)
struct FEndDataTableCounters final : public FEndDataTableRowBase
{
public:
	int32                                         ArrayIndex;                                        // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinValue;                                          // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxValue;                                          // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         CallbackFuncType;                                  // 0x0014(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableCounters) == 0x000008, "Wrong alignment on FEndDataTableCounters");
static_assert(sizeof(FEndDataTableCounters) == 0x000018, "Wrong size on FEndDataTableCounters");
static_assert(offsetof(FEndDataTableCounters, ArrayIndex) == 0x000008, "Member 'FEndDataTableCounters::ArrayIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTableCounters, MinValue) == 0x00000C, "Member 'FEndDataTableCounters::MinValue' has a wrong offset!");
static_assert(offsetof(FEndDataTableCounters, MaxValue) == 0x000010, "Member 'FEndDataTableCounters::MaxValue' has a wrong offset!");
static_assert(offsetof(FEndDataTableCounters, CallbackFuncType) == 0x000014, "Member 'FEndDataTableCounters::CallbackFuncType' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableObjectParty
// 0x0040 (0x0048 - 0x0008)
struct FEndDataTableObjectParty final : public FEndDataTableRowBase
{
public:
	int32                                         UniqueIndex;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Priority;                                          // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActorName;                                         // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ResponseAreaID;                                    // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ResponseAreaPlayerID;                              // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TweetResponseAreaID;                               // 0x0028(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TweetResponseAreaPlayerID;                         // 0x0030(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         AttributeList_Array;                               // 0x0038(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableObjectParty) == 0x000008, "Wrong alignment on FEndDataTableObjectParty");
static_assert(sizeof(FEndDataTableObjectParty) == 0x000048, "Wrong size on FEndDataTableObjectParty");
static_assert(offsetof(FEndDataTableObjectParty, UniqueIndex) == 0x000008, "Member 'FEndDataTableObjectParty::UniqueIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectParty, Priority) == 0x00000C, "Member 'FEndDataTableObjectParty::Priority' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectParty, ActorName) == 0x000010, "Member 'FEndDataTableObjectParty::ActorName' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectParty, ResponseAreaID) == 0x000018, "Member 'FEndDataTableObjectParty::ResponseAreaID' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectParty, ResponseAreaPlayerID) == 0x000020, "Member 'FEndDataTableObjectParty::ResponseAreaPlayerID' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectParty, TweetResponseAreaID) == 0x000028, "Member 'FEndDataTableObjectParty::TweetResponseAreaID' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectParty, TweetResponseAreaPlayerID) == 0x000030, "Member 'FEndDataTableObjectParty::TweetResponseAreaPlayerID' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectParty, AttributeList_Array) == 0x000038, "Member 'FEndDataTableObjectParty::AttributeList_Array' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableDebugPartyList
// 0x0040 (0x0048 - 0x0008)
struct FEndDataTableDebugPartyList final : public FEndDataTableRowBase
{
public:
	class FName                                   ViewText;                                          // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         UsePartyInFlag;                                    // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DebugInventoryID;                                  // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 PartyInFlag_Array;                                 // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<uint8>                                 PartyState_Array;                                  // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 InitParamGroupID_Array;                            // 0x0038(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableDebugPartyList) == 0x000008, "Wrong alignment on FEndDataTableDebugPartyList");
static_assert(sizeof(FEndDataTableDebugPartyList) == 0x000048, "Wrong size on FEndDataTableDebugPartyList");
static_assert(offsetof(FEndDataTableDebugPartyList, ViewText) == 0x000008, "Member 'FEndDataTableDebugPartyList::ViewText' has a wrong offset!");
static_assert(offsetof(FEndDataTableDebugPartyList, UsePartyInFlag) == 0x000010, "Member 'FEndDataTableDebugPartyList::UsePartyInFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTableDebugPartyList, DebugInventoryID) == 0x000014, "Member 'FEndDataTableDebugPartyList::DebugInventoryID' has a wrong offset!");
static_assert(offsetof(FEndDataTableDebugPartyList, PartyInFlag_Array) == 0x000018, "Member 'FEndDataTableDebugPartyList::PartyInFlag_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableDebugPartyList, PartyState_Array) == 0x000028, "Member 'FEndDataTableDebugPartyList::PartyState_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableDebugPartyList, InitParamGroupID_Array) == 0x000038, "Member 'FEndDataTableDebugPartyList::InitParamGroupID_Array' has a wrong offset!");

// ScriptStruct EndGame.AerialPointData
// 0x0038 (0x0038 - 0x0000)
struct FAerialPointData final
{
public:
	uint16                                        Index;                                             // 0x0000(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                pos;                                               // 0x0004(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint16>                                neighborPointIndexes;                              // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          InBattleArea;                                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x17];                                      // 0x0021(0x0017)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAerialPointData) == 0x000008, "Wrong alignment on FAerialPointData");
static_assert(sizeof(FAerialPointData) == 0x000038, "Wrong size on FAerialPointData");
static_assert(offsetof(FAerialPointData, Index) == 0x000000, "Member 'FAerialPointData::Index' has a wrong offset!");
static_assert(offsetof(FAerialPointData, pos) == 0x000004, "Member 'FAerialPointData::pos' has a wrong offset!");
static_assert(offsetof(FAerialPointData, neighborPointIndexes) == 0x000010, "Member 'FAerialPointData::neighborPointIndexes' has a wrong offset!");
static_assert(offsetof(FAerialPointData, InBattleArea) == 0x000020, "Member 'FAerialPointData::InBattleArea' has a wrong offset!");

// ScriptStruct EndGame.AerialPointInfo
// 0x0050 (0x0050 - 0x0000)
struct FAerialPointInfo final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAerialPointData                       Data;                                              // 0x0018(0x0038)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FAerialPointInfo) == 0x000008, "Wrong alignment on FAerialPointInfo");
static_assert(sizeof(FAerialPointInfo) == 0x000050, "Wrong size on FAerialPointInfo");
static_assert(offsetof(FAerialPointInfo, Data) == 0x000018, "Member 'FAerialPointInfo::Data' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableBattleSpecialStateEffect
// 0x0038 (0x0040 - 0x0008)
struct FEndDataTableBattleSpecialStateEffect final : public FEndDataTableRowBase
{
public:
	uint8                                         RemoveOnEscape;                                    // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         RemoveOnDeath;                                     // 0x0009(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         DetachOnRemove;                                    // 0x000A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         CreateEffectResourceCategory;                      // 0x000B(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           CreateEffectResourceName_Array;                    // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           AttachSocketName_Array;                            // 0x0020(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           BeamTargetAttachSocketName_Array;                  // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableBattleSpecialStateEffect) == 0x000008, "Wrong alignment on FEndDataTableBattleSpecialStateEffect");
static_assert(sizeof(FEndDataTableBattleSpecialStateEffect) == 0x000040, "Wrong size on FEndDataTableBattleSpecialStateEffect");
static_assert(offsetof(FEndDataTableBattleSpecialStateEffect, RemoveOnEscape) == 0x000008, "Member 'FEndDataTableBattleSpecialStateEffect::RemoveOnEscape' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSpecialStateEffect, RemoveOnDeath) == 0x000009, "Member 'FEndDataTableBattleSpecialStateEffect::RemoveOnDeath' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSpecialStateEffect, DetachOnRemove) == 0x00000A, "Member 'FEndDataTableBattleSpecialStateEffect::DetachOnRemove' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSpecialStateEffect, CreateEffectResourceCategory) == 0x00000B, "Member 'FEndDataTableBattleSpecialStateEffect::CreateEffectResourceCategory' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSpecialStateEffect, CreateEffectResourceName_Array) == 0x000010, "Member 'FEndDataTableBattleSpecialStateEffect::CreateEffectResourceName_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSpecialStateEffect, AttachSocketName_Array) == 0x000020, "Member 'FEndDataTableBattleSpecialStateEffect::AttachSocketName_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSpecialStateEffect, BeamTargetAttachSocketName_Array) == 0x000030, "Member 'FEndDataTableBattleSpecialStateEffect::BeamTargetAttachSocketName_Array' has a wrong offset!");

// ScriptStruct EndGame.EndAIBehaviorOverrideIdleVariation
// 0x00C0 (0x0200 - 0x0140)
struct FEndAIBehaviorOverrideIdleVariation final : public FEndAIBehavior
{
public:
	TMap<class FName, float>                      OverrideIdleVariationList;                         // 0x0138(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_188[0x78];                                     // 0x0188(0x0078)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndAIBehaviorOverrideIdleVariation) == 0x000010, "Wrong alignment on FEndAIBehaviorOverrideIdleVariation");
static_assert(sizeof(FEndAIBehaviorOverrideIdleVariation) == 0x000200, "Wrong size on FEndAIBehaviorOverrideIdleVariation");
static_assert(offsetof(FEndAIBehaviorOverrideIdleVariation, OverrideIdleVariationList) == 0x000138, "Member 'FEndAIBehaviorOverrideIdleVariation::OverrideIdleVariationList' has a wrong offset!");

// ScriptStruct EndGame.EndAIIntentionTalkControlStateContext
// 0x00B8 (0x00B8 - 0x0000)
struct FEndAIIntentionTalkControlStateContext final
{
public:
	class FName                                   LoopAnimation;                                     // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           ActionAnimations;                                  // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<EEndEmotionType, class FName>            EmotionalActionAnimations;                         // 0x0018(0x0050)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<int32, class FName>                      TransitionAnimations;                              // 0x0068(0x0050)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndAIIntentionTalkControlStateContext) == 0x000008, "Wrong alignment on FEndAIIntentionTalkControlStateContext");
static_assert(sizeof(FEndAIIntentionTalkControlStateContext) == 0x0000B8, "Wrong size on FEndAIIntentionTalkControlStateContext");
static_assert(offsetof(FEndAIIntentionTalkControlStateContext, LoopAnimation) == 0x000000, "Member 'FEndAIIntentionTalkControlStateContext::LoopAnimation' has a wrong offset!");
static_assert(offsetof(FEndAIIntentionTalkControlStateContext, ActionAnimations) == 0x000008, "Member 'FEndAIIntentionTalkControlStateContext::ActionAnimations' has a wrong offset!");
static_assert(offsetof(FEndAIIntentionTalkControlStateContext, EmotionalActionAnimations) == 0x000018, "Member 'FEndAIIntentionTalkControlStateContext::EmotionalActionAnimations' has a wrong offset!");
static_assert(offsetof(FEndAIIntentionTalkControlStateContext, TransitionAnimations) == 0x000068, "Member 'FEndAIIntentionTalkControlStateContext::TransitionAnimations' has a wrong offset!");

// ScriptStruct EndGame.EndFeelerWallExInstanceContext
// 0x0004 (0x0004 - 0x0000)
struct FEndFeelerWallExInstanceContext final
{
public:
	int32                                         InstanceIndex;                                     // 0x0000(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndFeelerWallExInstanceContext) == 0x000004, "Wrong alignment on FEndFeelerWallExInstanceContext");
static_assert(sizeof(FEndFeelerWallExInstanceContext) == 0x000004, "Wrong size on FEndFeelerWallExInstanceContext");
static_assert(offsetof(FEndFeelerWallExInstanceContext, InstanceIndex) == 0x000000, "Member 'FEndFeelerWallExInstanceContext::InstanceIndex' has a wrong offset!");

// ScriptStruct EndGame.EndFeelerWallExWave
// 0x0058 (0x0058 - 0x0000)
struct FEndFeelerWallExWave final
{
public:
	TArray<struct FEndFeelerWallExInstanceContext> InstanceContexts;                                  // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<class UInstancedStaticMeshComponent*>  InstancedMeshComponents;                           // 0x0010(0x0010)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_20[0x38];                                      // 0x0020(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndFeelerWallExWave) == 0x000008, "Wrong alignment on FEndFeelerWallExWave");
static_assert(sizeof(FEndFeelerWallExWave) == 0x000058, "Wrong size on FEndFeelerWallExWave");
static_assert(offsetof(FEndFeelerWallExWave, InstanceContexts) == 0x000000, "Member 'FEndFeelerWallExWave::InstanceContexts' has a wrong offset!");
static_assert(offsetof(FEndFeelerWallExWave, InstancedMeshComponents) == 0x000010, "Member 'FEndFeelerWallExWave::InstancedMeshComponents' has a wrong offset!");

// ScriptStruct EndGame.EndAIIntentionContact
// 0x0080 (0x0090 - 0x0010)
struct FEndAIIntentionContact final : public FEndAIIntention
{
public:
	class UEndAIIntentionContactSetting*          Setting;                                           // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayingLookAt;                                    // 0x0018(0x0001)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LookAtTimer;                                       // 0x001C(0x0004)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LookAtDuration;                                    // 0x0020(0x0004)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LookAtCoolDownTime;                                // 0x0024(0x0004)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayingAnimation;                                 // 0x0028(0x0001)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AnimationTimer;                                    // 0x002C(0x0004)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AnimationCoolDownTime;                             // 0x0030(0x0004)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayingHipMove;                                   // 0x0034(0x0001)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HipMoveTimer;                                      // 0x0038(0x0004)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HipMoveCoolDownTime;                               // 0x003C(0x0004)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_40[0x50];                                      // 0x0040(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndAIIntentionContact) == 0x000008, "Wrong alignment on FEndAIIntentionContact");
static_assert(sizeof(FEndAIIntentionContact) == 0x000090, "Wrong size on FEndAIIntentionContact");
static_assert(offsetof(FEndAIIntentionContact, Setting) == 0x000010, "Member 'FEndAIIntentionContact::Setting' has a wrong offset!");
static_assert(offsetof(FEndAIIntentionContact, bPlayingLookAt) == 0x000018, "Member 'FEndAIIntentionContact::bPlayingLookAt' has a wrong offset!");
static_assert(offsetof(FEndAIIntentionContact, LookAtTimer) == 0x00001C, "Member 'FEndAIIntentionContact::LookAtTimer' has a wrong offset!");
static_assert(offsetof(FEndAIIntentionContact, LookAtDuration) == 0x000020, "Member 'FEndAIIntentionContact::LookAtDuration' has a wrong offset!");
static_assert(offsetof(FEndAIIntentionContact, LookAtCoolDownTime) == 0x000024, "Member 'FEndAIIntentionContact::LookAtCoolDownTime' has a wrong offset!");
static_assert(offsetof(FEndAIIntentionContact, bPlayingAnimation) == 0x000028, "Member 'FEndAIIntentionContact::bPlayingAnimation' has a wrong offset!");
static_assert(offsetof(FEndAIIntentionContact, AnimationTimer) == 0x00002C, "Member 'FEndAIIntentionContact::AnimationTimer' has a wrong offset!");
static_assert(offsetof(FEndAIIntentionContact, AnimationCoolDownTime) == 0x000030, "Member 'FEndAIIntentionContact::AnimationCoolDownTime' has a wrong offset!");
static_assert(offsetof(FEndAIIntentionContact, bPlayingHipMove) == 0x000034, "Member 'FEndAIIntentionContact::bPlayingHipMove' has a wrong offset!");
static_assert(offsetof(FEndAIIntentionContact, HipMoveTimer) == 0x000038, "Member 'FEndAIIntentionContact::HipMoveTimer' has a wrong offset!");
static_assert(offsetof(FEndAIIntentionContact, HipMoveCoolDownTime) == 0x00003C, "Member 'FEndAIIntentionContact::HipMoveCoolDownTime' has a wrong offset!");

// ScriptStruct EndGame.EndAIBehaviorDirectMoveTimer
// 0x0010 (0x0150 - 0x0140)
struct FEndAIBehaviorDirectMoveTimer final : public FEndAIBehavior
{
public:
	uint8                                         Pad_138[0x4];                                      // 0x0138(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Velocity;                                          // 0x013C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveTime;                                          // 0x0148(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14C[0x4];                                      // 0x014C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndAIBehaviorDirectMoveTimer) == 0x000010, "Wrong alignment on FEndAIBehaviorDirectMoveTimer");
static_assert(sizeof(FEndAIBehaviorDirectMoveTimer) == 0x000150, "Wrong size on FEndAIBehaviorDirectMoveTimer");
static_assert(offsetof(FEndAIBehaviorDirectMoveTimer, Velocity) == 0x00013C, "Member 'FEndAIBehaviorDirectMoveTimer::Velocity' has a wrong offset!");
static_assert(offsetof(FEndAIBehaviorDirectMoveTimer, MoveTime) == 0x000148, "Member 'FEndAIBehaviorDirectMoveTimer::MoveTime' has a wrong offset!");

// ScriptStruct EndGame.BonamikHelicopterWindData
// 0x000C (0x000C - 0x0000)
struct FBonamikHelicopterWindData final
{
public:
	float                                         BaseStrength;                                      // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsAdditive;                                       // 0x0004(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FColor                                 PreviewColor;                                      // 0x0008(0x0004)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBonamikHelicopterWindData) == 0x000004, "Wrong alignment on FBonamikHelicopterWindData");
static_assert(sizeof(FBonamikHelicopterWindData) == 0x00000C, "Wrong size on FBonamikHelicopterWindData");
static_assert(offsetof(FBonamikHelicopterWindData, BaseStrength) == 0x000000, "Member 'FBonamikHelicopterWindData::BaseStrength' has a wrong offset!");
static_assert(offsetof(FBonamikHelicopterWindData, bIsAdditive) == 0x000004, "Member 'FBonamikHelicopterWindData::bIsAdditive' has a wrong offset!");
static_assert(offsetof(FBonamikHelicopterWindData, PreviewColor) == 0x000008, "Member 'FBonamikHelicopterWindData::PreviewColor' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableInterestPointTable
// 0x0078 (0x0080 - 0x0008)
struct FEndDataTableInterestPointTable final : public FEndDataTableRowBase
{
public:
	class FString                                 NextActionID;                                      // 0x0008(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ActorGroup;                                        // 0x0018(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Sence;                                             // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Capacity;                                          // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Presence;                                          // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Priority;                                          // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Incidence;                                         // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IsOnly;                                            // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IsBehaviorToLast;                                  // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RemainTime;                                        // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Command;                                           // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PollingID;                                         // 0x0050(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 IntegerArgumentList_Array;                         // 0x0060(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         StringArgumentList_Array;                          // 0x0070(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableInterestPointTable) == 0x000008, "Wrong alignment on FEndDataTableInterestPointTable");
static_assert(sizeof(FEndDataTableInterestPointTable) == 0x000080, "Wrong size on FEndDataTableInterestPointTable");
static_assert(offsetof(FEndDataTableInterestPointTable, NextActionID) == 0x000008, "Member 'FEndDataTableInterestPointTable::NextActionID' has a wrong offset!");
static_assert(offsetof(FEndDataTableInterestPointTable, ActorGroup) == 0x000018, "Member 'FEndDataTableInterestPointTable::ActorGroup' has a wrong offset!");
static_assert(offsetof(FEndDataTableInterestPointTable, Sence) == 0x000028, "Member 'FEndDataTableInterestPointTable::Sence' has a wrong offset!");
static_assert(offsetof(FEndDataTableInterestPointTable, Capacity) == 0x00002C, "Member 'FEndDataTableInterestPointTable::Capacity' has a wrong offset!");
static_assert(offsetof(FEndDataTableInterestPointTable, Presence) == 0x000030, "Member 'FEndDataTableInterestPointTable::Presence' has a wrong offset!");
static_assert(offsetof(FEndDataTableInterestPointTable, Priority) == 0x000034, "Member 'FEndDataTableInterestPointTable::Priority' has a wrong offset!");
static_assert(offsetof(FEndDataTableInterestPointTable, Incidence) == 0x000038, "Member 'FEndDataTableInterestPointTable::Incidence' has a wrong offset!");
static_assert(offsetof(FEndDataTableInterestPointTable, IsOnly) == 0x00003C, "Member 'FEndDataTableInterestPointTable::IsOnly' has a wrong offset!");
static_assert(offsetof(FEndDataTableInterestPointTable, IsBehaviorToLast) == 0x000040, "Member 'FEndDataTableInterestPointTable::IsBehaviorToLast' has a wrong offset!");
static_assert(offsetof(FEndDataTableInterestPointTable, RemainTime) == 0x000044, "Member 'FEndDataTableInterestPointTable::RemainTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableInterestPointTable, Command) == 0x000048, "Member 'FEndDataTableInterestPointTable::Command' has a wrong offset!");
static_assert(offsetof(FEndDataTableInterestPointTable, PollingID) == 0x000050, "Member 'FEndDataTableInterestPointTable::PollingID' has a wrong offset!");
static_assert(offsetof(FEndDataTableInterestPointTable, IntegerArgumentList_Array) == 0x000060, "Member 'FEndDataTableInterestPointTable::IntegerArgumentList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableInterestPointTable, StringArgumentList_Array) == 0x000070, "Member 'FEndDataTableInterestPointTable::StringArgumentList_Array' has a wrong offset!");

// ScriptStruct EndGame.EndAIBehaviorPlayVoice
// 0x0010 (0x0150 - 0x0140)
struct FEndAIBehaviorPlayVoice final : public FEndAIBehavior
{
public:
	uint8                                         Pad_138[0x18];                                     // 0x0138(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndAIBehaviorPlayVoice) == 0x000010, "Wrong alignment on FEndAIBehaviorPlayVoice");
static_assert(sizeof(FEndAIBehaviorPlayVoice) == 0x000150, "Wrong size on FEndAIBehaviorPlayVoice");

// ScriptStruct EndGame.EndAIBehaviorEmotion
// 0x0050 (0x0190 - 0x0140)
struct FEndAIBehaviorEmotion final : public FEndAIBehavior
{
public:
	class FName                                   EmotionID;                                         // 0x0138(0x0008)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LoopTime;                                          // 0x0140(0x0004)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InterestDirection;                                 // 0x0144(0x0001)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_145[0x3];                                      // 0x0145(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class AActor>                  TargetActor;                                       // 0x0148(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_150[0x40];                                     // 0x0150(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndAIBehaviorEmotion) == 0x000010, "Wrong alignment on FEndAIBehaviorEmotion");
static_assert(sizeof(FEndAIBehaviorEmotion) == 0x000190, "Wrong size on FEndAIBehaviorEmotion");
static_assert(offsetof(FEndAIBehaviorEmotion, EmotionID) == 0x000138, "Member 'FEndAIBehaviorEmotion::EmotionID' has a wrong offset!");
static_assert(offsetof(FEndAIBehaviorEmotion, LoopTime) == 0x000140, "Member 'FEndAIBehaviorEmotion::LoopTime' has a wrong offset!");
static_assert(offsetof(FEndAIBehaviorEmotion, InterestDirection) == 0x000144, "Member 'FEndAIBehaviorEmotion::InterestDirection' has a wrong offset!");
static_assert(offsetof(FEndAIBehaviorEmotion, TargetActor) == 0x000148, "Member 'FEndAIBehaviorEmotion::TargetActor' has a wrong offset!");

// ScriptStruct EndGame.EndBattleHelicopterSpec
// 0x0028 (0x0028 - 0x0000)
struct FEndBattleHelicopterSpec final
{
public:
	float                                         FutureTime;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FutureRotate;                                      // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxSpeed;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               RotateSpeed;                                       // 0x000C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               Limit;                                             // 0x0018(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          Strafe;                                            // 0x0024(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBattleHelicopterSpec) == 0x000004, "Wrong alignment on FEndBattleHelicopterSpec");
static_assert(sizeof(FEndBattleHelicopterSpec) == 0x000028, "Wrong size on FEndBattleHelicopterSpec");
static_assert(offsetof(FEndBattleHelicopterSpec, FutureTime) == 0x000000, "Member 'FEndBattleHelicopterSpec::FutureTime' has a wrong offset!");
static_assert(offsetof(FEndBattleHelicopterSpec, FutureRotate) == 0x000004, "Member 'FEndBattleHelicopterSpec::FutureRotate' has a wrong offset!");
static_assert(offsetof(FEndBattleHelicopterSpec, MaxSpeed) == 0x000008, "Member 'FEndBattleHelicopterSpec::MaxSpeed' has a wrong offset!");
static_assert(offsetof(FEndBattleHelicopterSpec, RotateSpeed) == 0x00000C, "Member 'FEndBattleHelicopterSpec::RotateSpeed' has a wrong offset!");
static_assert(offsetof(FEndBattleHelicopterSpec, Limit) == 0x000018, "Member 'FEndBattleHelicopterSpec::Limit' has a wrong offset!");
static_assert(offsetof(FEndBattleHelicopterSpec, Strafe) == 0x000024, "Member 'FEndBattleHelicopterSpec::Strafe' has a wrong offset!");

// ScriptStruct EndGame.EndAIBehaviorTurn
// 0x0030 (0x0170 - 0x0140)
struct FEndAIBehaviorTurn final : public FEndAIBehavior
{
public:
	bool                                          bContinueTurn;                                     // 0x0138(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_139[0x3];                                      // 0x0139(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TurnTime;                                          // 0x013C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetLocation;                                    // 0x0140(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14C[0x4];                                      // 0x014C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class AActor>                  TargetActor;                                       // 0x0150(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_158[0x18];                                     // 0x0158(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndAIBehaviorTurn) == 0x000010, "Wrong alignment on FEndAIBehaviorTurn");
static_assert(sizeof(FEndAIBehaviorTurn) == 0x000170, "Wrong size on FEndAIBehaviorTurn");
static_assert(offsetof(FEndAIBehaviorTurn, bContinueTurn) == 0x000138, "Member 'FEndAIBehaviorTurn::bContinueTurn' has a wrong offset!");
static_assert(offsetof(FEndAIBehaviorTurn, TurnTime) == 0x00013C, "Member 'FEndAIBehaviorTurn::TurnTime' has a wrong offset!");
static_assert(offsetof(FEndAIBehaviorTurn, TargetLocation) == 0x000140, "Member 'FEndAIBehaviorTurn::TargetLocation' has a wrong offset!");
static_assert(offsetof(FEndAIBehaviorTurn, TargetActor) == 0x000150, "Member 'FEndAIBehaviorTurn::TargetActor' has a wrong offset!");

// ScriptStruct EndGame.EndAIBehaviorEscape
// 0x0110 (0x0250 - 0x0140)
struct FEndAIBehaviorEscape final : public FEndAIBehavior
{
public:
	TWeakObjectPtr<class AActor>                  TargetActor;                                       // 0x0138(0x0008)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EscapeDistance;                                    // 0x0140(0x0004)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EscapeDirRange;                                    // 0x0144(0x0004)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          StrafeMove;                                        // 0x0148(0x0001)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEscapeLookAtTurn;                                 // 0x0149(0x0001)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14A[0x106];                                    // 0x014A(0x0106)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndAIBehaviorEscape) == 0x000010, "Wrong alignment on FEndAIBehaviorEscape");
static_assert(sizeof(FEndAIBehaviorEscape) == 0x000250, "Wrong size on FEndAIBehaviorEscape");
static_assert(offsetof(FEndAIBehaviorEscape, TargetActor) == 0x000138, "Member 'FEndAIBehaviorEscape::TargetActor' has a wrong offset!");
static_assert(offsetof(FEndAIBehaviorEscape, EscapeDistance) == 0x000140, "Member 'FEndAIBehaviorEscape::EscapeDistance' has a wrong offset!");
static_assert(offsetof(FEndAIBehaviorEscape, EscapeDirRange) == 0x000144, "Member 'FEndAIBehaviorEscape::EscapeDirRange' has a wrong offset!");
static_assert(offsetof(FEndAIBehaviorEscape, StrafeMove) == 0x000148, "Member 'FEndAIBehaviorEscape::StrafeMove' has a wrong offset!");
static_assert(offsetof(FEndAIBehaviorEscape, bEscapeLookAtTurn) == 0x000149, "Member 'FEndAIBehaviorEscape::bEscapeLookAtTurn' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableSituationAction
// 0x0100 (0x0108 - 0x0008)
struct FEndDataTableSituationAction final : public FEndDataTableRowBase
{
public:
	uint8                                         Type;                                              // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CameraRailName;                                    // 0x000C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         FinishType;                                        // 0x0014(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SmoothObjectName00;                                // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SmoothObjectName01;                                // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         StartAfterSmoothing;                               // 0x0028(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   AIParameterID;                                     // 0x002C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           ActorName_Array;                                   // 0x0038(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           Idle_Array;                                        // 0x0048(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           NextIdle_Array;                                    // 0x0058(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           Front_Array;                                       // 0x0068(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           NextFront_Array;                                   // 0x0078(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           Back_Array;                                        // 0x0088(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           NextBack_Array;                                    // 0x0098(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           Left_Array;                                        // 0x00A8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           NextLeft_Array;                                    // 0x00B8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           Right_Array;                                       // 0x00C8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           NextRight_Array;                                   // 0x00D8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           StartStateTrigger_Array;                           // 0x00E8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           EndStateTrigger_Array;                             // 0x00F8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableSituationAction) == 0x000008, "Wrong alignment on FEndDataTableSituationAction");
static_assert(sizeof(FEndDataTableSituationAction) == 0x000108, "Wrong size on FEndDataTableSituationAction");
static_assert(offsetof(FEndDataTableSituationAction, Type) == 0x000008, "Member 'FEndDataTableSituationAction::Type' has a wrong offset!");
static_assert(offsetof(FEndDataTableSituationAction, CameraRailName) == 0x00000C, "Member 'FEndDataTableSituationAction::CameraRailName' has a wrong offset!");
static_assert(offsetof(FEndDataTableSituationAction, FinishType) == 0x000014, "Member 'FEndDataTableSituationAction::FinishType' has a wrong offset!");
static_assert(offsetof(FEndDataTableSituationAction, SmoothObjectName00) == 0x000018, "Member 'FEndDataTableSituationAction::SmoothObjectName00' has a wrong offset!");
static_assert(offsetof(FEndDataTableSituationAction, SmoothObjectName01) == 0x000020, "Member 'FEndDataTableSituationAction::SmoothObjectName01' has a wrong offset!");
static_assert(offsetof(FEndDataTableSituationAction, StartAfterSmoothing) == 0x000028, "Member 'FEndDataTableSituationAction::StartAfterSmoothing' has a wrong offset!");
static_assert(offsetof(FEndDataTableSituationAction, AIParameterID) == 0x00002C, "Member 'FEndDataTableSituationAction::AIParameterID' has a wrong offset!");
static_assert(offsetof(FEndDataTableSituationAction, ActorName_Array) == 0x000038, "Member 'FEndDataTableSituationAction::ActorName_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableSituationAction, Idle_Array) == 0x000048, "Member 'FEndDataTableSituationAction::Idle_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableSituationAction, NextIdle_Array) == 0x000058, "Member 'FEndDataTableSituationAction::NextIdle_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableSituationAction, Front_Array) == 0x000068, "Member 'FEndDataTableSituationAction::Front_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableSituationAction, NextFront_Array) == 0x000078, "Member 'FEndDataTableSituationAction::NextFront_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableSituationAction, Back_Array) == 0x000088, "Member 'FEndDataTableSituationAction::Back_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableSituationAction, NextBack_Array) == 0x000098, "Member 'FEndDataTableSituationAction::NextBack_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableSituationAction, Left_Array) == 0x0000A8, "Member 'FEndDataTableSituationAction::Left_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableSituationAction, NextLeft_Array) == 0x0000B8, "Member 'FEndDataTableSituationAction::NextLeft_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableSituationAction, Right_Array) == 0x0000C8, "Member 'FEndDataTableSituationAction::Right_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableSituationAction, NextRight_Array) == 0x0000D8, "Member 'FEndDataTableSituationAction::NextRight_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableSituationAction, StartStateTrigger_Array) == 0x0000E8, "Member 'FEndDataTableSituationAction::StartStateTrigger_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableSituationAction, EndStateTrigger_Array) == 0x0000F8, "Member 'FEndDataTableSituationAction::EndStateTrigger_Array' has a wrong offset!");

// ScriptStruct EndGame.EndAIBehaviorHipMoveTimer
// 0x0030 (0x0170 - 0x0140)
struct FEndAIBehaviorHipMoveTimer final : public FEndAIBehavior
{
public:
	struct FVector                                MoveValue;                                         // 0x0138(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveTime;                                          // 0x0144(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendInTime;                                       // 0x0148(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendOutTime;                                      // 0x014C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_150[0x20];                                     // 0x0150(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndAIBehaviorHipMoveTimer) == 0x000010, "Wrong alignment on FEndAIBehaviorHipMoveTimer");
static_assert(sizeof(FEndAIBehaviorHipMoveTimer) == 0x000170, "Wrong size on FEndAIBehaviorHipMoveTimer");
static_assert(offsetof(FEndAIBehaviorHipMoveTimer, MoveValue) == 0x000138, "Member 'FEndAIBehaviorHipMoveTimer::MoveValue' has a wrong offset!");
static_assert(offsetof(FEndAIBehaviorHipMoveTimer, MoveTime) == 0x000144, "Member 'FEndAIBehaviorHipMoveTimer::MoveTime' has a wrong offset!");
static_assert(offsetof(FEndAIBehaviorHipMoveTimer, BlendInTime) == 0x000148, "Member 'FEndAIBehaviorHipMoveTimer::BlendInTime' has a wrong offset!");
static_assert(offsetof(FEndAIBehaviorHipMoveTimer, BlendOutTime) == 0x00014C, "Member 'FEndAIBehaviorHipMoveTimer::BlendOutTime' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableCondorFortOpponent
// 0x0060 (0x0068 - 0x0008)
struct FEndDataTableCondorFortOpponent final : public FEndDataTableRowBase
{
public:
	class FName                                   NameTextID;                                        // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   HelpTextID;                                        // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AI;                                                // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoardID;                                           // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           UnitID_Array;                                      // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   FirstRewardFlagID;                                 // 0x0038(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           RewardID_Array;                                    // 0x0040(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   HomeBaseID;                                        // 0x0050(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           RelayBaseID_Array;                                 // 0x0058(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableCondorFortOpponent) == 0x000008, "Wrong alignment on FEndDataTableCondorFortOpponent");
static_assert(sizeof(FEndDataTableCondorFortOpponent) == 0x000068, "Wrong size on FEndDataTableCondorFortOpponent");
static_assert(offsetof(FEndDataTableCondorFortOpponent, NameTextID) == 0x000008, "Member 'FEndDataTableCondorFortOpponent::NameTextID' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortOpponent, HelpTextID) == 0x000010, "Member 'FEndDataTableCondorFortOpponent::HelpTextID' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortOpponent, AI) == 0x000018, "Member 'FEndDataTableCondorFortOpponent::AI' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortOpponent, BoardID) == 0x000020, "Member 'FEndDataTableCondorFortOpponent::BoardID' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortOpponent, UnitID_Array) == 0x000028, "Member 'FEndDataTableCondorFortOpponent::UnitID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortOpponent, FirstRewardFlagID) == 0x000038, "Member 'FEndDataTableCondorFortOpponent::FirstRewardFlagID' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortOpponent, RewardID_Array) == 0x000040, "Member 'FEndDataTableCondorFortOpponent::RewardID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortOpponent, HomeBaseID) == 0x000050, "Member 'FEndDataTableCondorFortOpponent::HomeBaseID' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortOpponent, RelayBaseID_Array) == 0x000058, "Member 'FEndDataTableCondorFortOpponent::RelayBaseID_Array' has a wrong offset!");

// ScriptStruct EndGame.EndPhysicsChangeCollisionResponseData
// 0x0002 (0x0002 - 0x0000)
struct FEndPhysicsChangeCollisionResponseData final
{
public:
	ECollisionChannel                             CollisionChannel;                                  // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionResponse                            CollisionResponse;                                 // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndPhysicsChangeCollisionResponseData) == 0x000001, "Wrong alignment on FEndPhysicsChangeCollisionResponseData");
static_assert(sizeof(FEndPhysicsChangeCollisionResponseData) == 0x000002, "Wrong size on FEndPhysicsChangeCollisionResponseData");
static_assert(offsetof(FEndPhysicsChangeCollisionResponseData, CollisionChannel) == 0x000000, "Member 'FEndPhysicsChangeCollisionResponseData::CollisionChannel' has a wrong offset!");
static_assert(offsetof(FEndPhysicsChangeCollisionResponseData, CollisionResponse) == 0x000001, "Member 'FEndPhysicsChangeCollisionResponseData::CollisionResponse' has a wrong offset!");

// ScriptStruct EndGame.EndAIBehaviorLookAt
// 0x0030 (0x0170 - 0x0140)
struct FEndAIBehaviorLookAt : public FEndAIBehavior
{
public:
	EEndLookAtRequestType                         RequestType;                                       // 0x0138(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_139[0x3];                                      // 0x0139(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                TargetLocation;                                    // 0x013C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AActor>                  TargetActor;                                       // 0x0148(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TargetName;                                        // 0x0150(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_158[0x18];                                     // 0x0158(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndAIBehaviorLookAt) == 0x000010, "Wrong alignment on FEndAIBehaviorLookAt");
static_assert(sizeof(FEndAIBehaviorLookAt) == 0x000170, "Wrong size on FEndAIBehaviorLookAt");
static_assert(offsetof(FEndAIBehaviorLookAt, RequestType) == 0x000138, "Member 'FEndAIBehaviorLookAt::RequestType' has a wrong offset!");
static_assert(offsetof(FEndAIBehaviorLookAt, TargetLocation) == 0x00013C, "Member 'FEndAIBehaviorLookAt::TargetLocation' has a wrong offset!");
static_assert(offsetof(FEndAIBehaviorLookAt, TargetActor) == 0x000148, "Member 'FEndAIBehaviorLookAt::TargetActor' has a wrong offset!");
static_assert(offsetof(FEndAIBehaviorLookAt, TargetName) == 0x000150, "Member 'FEndAIBehaviorLookAt::TargetName' has a wrong offset!");

// ScriptStruct EndGame.EndAIBehaviorLookAtForceDeactive
// 0x0010 (0x0150 - 0x0140)
struct FEndAIBehaviorLookAtForceDeactive final : public FEndAIBehavior
{
public:
	EEndLookAtForceDeactiveType                   Type;                                              // 0x0138(0x0001)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_139[0x17];                                     // 0x0139(0x0017)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndAIBehaviorLookAtForceDeactive) == 0x000010, "Wrong alignment on FEndAIBehaviorLookAtForceDeactive");
static_assert(sizeof(FEndAIBehaviorLookAtForceDeactive) == 0x000150, "Wrong size on FEndAIBehaviorLookAtForceDeactive");
static_assert(offsetof(FEndAIBehaviorLookAtForceDeactive, Type) == 0x000138, "Member 'FEndAIBehaviorLookAtForceDeactive::Type' has a wrong offset!");

// ScriptStruct EndGame.EndAIBehaviorLookAtTimer
// 0x0010 (0x0180 - 0x0170)
struct FEndAIBehaviorLookAtTimer final : public FEndAIBehaviorLookAt
{
public:
	float                                         LookAtTime;                                        // 0x0170(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_174[0xC];                                      // 0x0174(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndAIBehaviorLookAtTimer) == 0x000010, "Wrong alignment on FEndAIBehaviorLookAtTimer");
static_assert(sizeof(FEndAIBehaviorLookAtTimer) == 0x000180, "Wrong size on FEndAIBehaviorLookAtTimer");
static_assert(offsetof(FEndAIBehaviorLookAtTimer, LookAtTime) == 0x000170, "Member 'FEndAIBehaviorLookAtTimer::LookAtTime' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableBikeTalkTriggerSet
// 0x0030 (0x0038 - 0x0008)
struct FEndDataTableBikeTalkTriggerSet final : public FEndDataTableRowBase
{
public:
	TArray<class FName>                           TriggerID_Array;                                   // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           PlanEvID_Array;                                    // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 TriggerOdds_Array;                                 // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableBikeTalkTriggerSet) == 0x000008, "Wrong alignment on FEndDataTableBikeTalkTriggerSet");
static_assert(sizeof(FEndDataTableBikeTalkTriggerSet) == 0x000038, "Wrong size on FEndDataTableBikeTalkTriggerSet");
static_assert(offsetof(FEndDataTableBikeTalkTriggerSet, TriggerID_Array) == 0x000008, "Member 'FEndDataTableBikeTalkTriggerSet::TriggerID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeTalkTriggerSet, PlanEvID_Array) == 0x000018, "Member 'FEndDataTableBikeTalkTriggerSet::PlanEvID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeTalkTriggerSet, TriggerOdds_Array) == 0x000028, "Member 'FEndDataTableBikeTalkTriggerSet::TriggerOdds_Array' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableBikeInterruptAction
// 0x0018 (0x0020 - 0x0008)
struct FEndDataTableBikeInterruptAction final : public FEndDataTableRowBase
{
public:
	class FName                                   OwnerMotion;                                       // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TargetMotion;                                      // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         OwnerKnockBack;                                    // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         TargetKnockBack;                                   // 0x0019(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableBikeInterruptAction) == 0x000008, "Wrong alignment on FEndDataTableBikeInterruptAction");
static_assert(sizeof(FEndDataTableBikeInterruptAction) == 0x000020, "Wrong size on FEndDataTableBikeInterruptAction");
static_assert(offsetof(FEndDataTableBikeInterruptAction, OwnerMotion) == 0x000008, "Member 'FEndDataTableBikeInterruptAction::OwnerMotion' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeInterruptAction, TargetMotion) == 0x000010, "Member 'FEndDataTableBikeInterruptAction::TargetMotion' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeInterruptAction, OwnerKnockBack) == 0x000018, "Member 'FEndDataTableBikeInterruptAction::OwnerKnockBack' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeInterruptAction, TargetKnockBack) == 0x000019, "Member 'FEndDataTableBikeInterruptAction::TargetKnockBack' has a wrong offset!");

// ScriptStruct EndGame.EndAIBehaviorManual
// 0x0000 (0x0140 - 0x0140)
struct FEndAIBehaviorManual final : public FEndAIBehavior
{
public:
	EEndAIBehaviorTag                             BehaviorTag;                                       // 0x0138(0x0001)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_139[0x7];                                      // 0x0139(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndAIBehaviorManual) == 0x000010, "Wrong alignment on FEndAIBehaviorManual");
static_assert(sizeof(FEndAIBehaviorManual) == 0x000140, "Wrong size on FEndAIBehaviorManual");
static_assert(offsetof(FEndAIBehaviorManual, BehaviorTag) == 0x000138, "Member 'FEndAIBehaviorManual::BehaviorTag' has a wrong offset!");

// ScriptStruct EndGame.EndAISensor
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FEndAISensor
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bUpdatableWhenAIStop;                              // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndAISensor) == 0x000008, "Wrong alignment on FEndAISensor");
static_assert(sizeof(FEndAISensor) == 0x000010, "Wrong size on FEndAISensor");
static_assert(offsetof(FEndAISensor, bUpdatableWhenAIStop) == 0x000008, "Member 'FEndAISensor::bUpdatableWhenAIStop' has a wrong offset!");

// ScriptStruct EndGame.EndAISensorHearing
// 0x0008 (0x0018 - 0x0010)
struct FEndAISensorHearing final : public FEndAISensor
{
public:
	float                                         HearDistance;                                      // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndAISensorHearing) == 0x000008, "Wrong alignment on FEndAISensorHearing");
static_assert(sizeof(FEndAISensorHearing) == 0x000018, "Wrong size on FEndAISensorHearing");
static_assert(offsetof(FEndAISensorHearing, HearDistance) == 0x000010, "Member 'FEndAISensorHearing::HearDistance' has a wrong offset!");

// ScriptStruct EndGame.EndBehaviorLoopExtraAction
// 0x0010 (0x07D0 - 0x07C0)
struct FEndBehaviorLoopExtraAction : public FEndBehaviorExtraAction
{
public:
	uint8                                         Pad_7C0[0x10];                                     // 0x07C0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorLoopExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorLoopExtraAction");
static_assert(sizeof(FEndBehaviorLoopExtraAction) == 0x0007D0, "Wrong size on FEndBehaviorLoopExtraAction");

// ScriptStruct EndGame.EndBehaviorBattleOffensiveExtraAction
// 0x0010 (0x07E0 - 0x07D0)
struct FEndBehaviorBattleOffensiveExtraAction final : public FEndBehaviorLoopExtraAction
{
public:
	uint8                                         Pad_7D0[0x10];                                     // 0x07D0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorBattleOffensiveExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorBattleOffensiveExtraAction");
static_assert(sizeof(FEndBehaviorBattleOffensiveExtraAction) == 0x0007E0, "Wrong size on FEndBehaviorBattleOffensiveExtraAction");

// ScriptStruct EndGame.EndPhysicalConstraintSetting_Distance
// 0x0028 (0x0028 - 0x0000)
struct FEndPhysicalConstraintSetting_Distance final
{
public:
	class FName                                   BoneName0;                                         // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName1;                                         // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BoneInvMassBias0;                                  // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BoneInvMassBias1;                                  // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CompressionStiffness;                              // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StretchStiffness;                                  // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OverrideDistance;                                  // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCalculate2D;                                      // 0x0024(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndPhysicalConstraintSetting_Distance) == 0x000004, "Wrong alignment on FEndPhysicalConstraintSetting_Distance");
static_assert(sizeof(FEndPhysicalConstraintSetting_Distance) == 0x000028, "Wrong size on FEndPhysicalConstraintSetting_Distance");
static_assert(offsetof(FEndPhysicalConstraintSetting_Distance, BoneName0) == 0x000000, "Member 'FEndPhysicalConstraintSetting_Distance::BoneName0' has a wrong offset!");
static_assert(offsetof(FEndPhysicalConstraintSetting_Distance, BoneName1) == 0x000008, "Member 'FEndPhysicalConstraintSetting_Distance::BoneName1' has a wrong offset!");
static_assert(offsetof(FEndPhysicalConstraintSetting_Distance, BoneInvMassBias0) == 0x000010, "Member 'FEndPhysicalConstraintSetting_Distance::BoneInvMassBias0' has a wrong offset!");
static_assert(offsetof(FEndPhysicalConstraintSetting_Distance, BoneInvMassBias1) == 0x000014, "Member 'FEndPhysicalConstraintSetting_Distance::BoneInvMassBias1' has a wrong offset!");
static_assert(offsetof(FEndPhysicalConstraintSetting_Distance, CompressionStiffness) == 0x000018, "Member 'FEndPhysicalConstraintSetting_Distance::CompressionStiffness' has a wrong offset!");
static_assert(offsetof(FEndPhysicalConstraintSetting_Distance, StretchStiffness) == 0x00001C, "Member 'FEndPhysicalConstraintSetting_Distance::StretchStiffness' has a wrong offset!");
static_assert(offsetof(FEndPhysicalConstraintSetting_Distance, OverrideDistance) == 0x000020, "Member 'FEndPhysicalConstraintSetting_Distance::OverrideDistance' has a wrong offset!");
static_assert(offsetof(FEndPhysicalConstraintSetting_Distance, bCalculate2D) == 0x000024, "Member 'FEndPhysicalConstraintSetting_Distance::bCalculate2D' has a wrong offset!");

// ScriptStruct EndGame.EndAIIntentionIdle
// 0x0028 (0x00A0 - 0x0078)
struct FEndAIIntentionIdle final : public FEndAIIntentionIdleBase
{
public:
	class UEndAIIntentionIdleSetting*             Setting;                                           // 0x0078(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCautionLookAtPositiveAngle;                       // 0x0080(0x0001)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x3];                                       // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AnimationTimer;                                    // 0x0084(0x0004)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AnimationWaitTime;                                 // 0x0088(0x0004)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideIdleAnimationWaitTimeRange;               // 0x008C(0x0001)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8D[0x13];                                      // 0x008D(0x0013)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndAIIntentionIdle) == 0x000008, "Wrong alignment on FEndAIIntentionIdle");
static_assert(sizeof(FEndAIIntentionIdle) == 0x0000A0, "Wrong size on FEndAIIntentionIdle");
static_assert(offsetof(FEndAIIntentionIdle, Setting) == 0x000078, "Member 'FEndAIIntentionIdle::Setting' has a wrong offset!");
static_assert(offsetof(FEndAIIntentionIdle, bCautionLookAtPositiveAngle) == 0x000080, "Member 'FEndAIIntentionIdle::bCautionLookAtPositiveAngle' has a wrong offset!");
static_assert(offsetof(FEndAIIntentionIdle, AnimationTimer) == 0x000084, "Member 'FEndAIIntentionIdle::AnimationTimer' has a wrong offset!");
static_assert(offsetof(FEndAIIntentionIdle, AnimationWaitTime) == 0x000088, "Member 'FEndAIIntentionIdle::AnimationWaitTime' has a wrong offset!");
static_assert(offsetof(FEndAIIntentionIdle, bOverrideIdleAnimationWaitTimeRange) == 0x00008C, "Member 'FEndAIIntentionIdle::bOverrideIdleAnimationWaitTimeRange' has a wrong offset!");

// ScriptStruct EndGame.EndMenuImageMapping
// 0x00A0 (0x00A0 - 0x0000)
struct FEndMenuImageMapping final
{
public:
	class FName                                   MappingName;                                       // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ChangeFlag;                                        // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateBrush                            Brush;                                             // 0x0010(0x0078)(Edit, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        SubFrameImagePath;                                 // 0x0088(0x0018)(Edit, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndMenuImageMapping) == 0x000008, "Wrong alignment on FEndMenuImageMapping");
static_assert(sizeof(FEndMenuImageMapping) == 0x0000A0, "Wrong size on FEndMenuImageMapping");
static_assert(offsetof(FEndMenuImageMapping, MappingName) == 0x000000, "Member 'FEndMenuImageMapping::MappingName' has a wrong offset!");
static_assert(offsetof(FEndMenuImageMapping, ChangeFlag) == 0x000008, "Member 'FEndMenuImageMapping::ChangeFlag' has a wrong offset!");
static_assert(offsetof(FEndMenuImageMapping, Brush) == 0x000010, "Member 'FEndMenuImageMapping::Brush' has a wrong offset!");
static_assert(offsetof(FEndMenuImageMapping, SubFrameImagePath) == 0x000088, "Member 'FEndMenuImageMapping::SubFrameImagePath' has a wrong offset!");

// ScriptStruct EndGame.EndAIBehaviorMoveTo
// 0x0030 (0x0170 - 0x0140)
struct FEndAIBehaviorMoveTo final : public FEndAIBehavior
{
public:
	struct FVector                                TargetLocation;                                    // 0x0138(0x000C)(Edit, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WalkTolerance;                                     // 0x0144(0x0004)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StopTolerance;                                     // 0x0148(0x0004)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInterpolationMove;                                // 0x014C(0x0001)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndAiMoveType                                MoveType;                                          // 0x014D(0x0001)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFieldAiPathWayType                           PathType;                                          // 0x014E(0x0001)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanOutSideMove;                                   // 0x014F(0x0001)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_150[0x20];                                     // 0x0150(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndAIBehaviorMoveTo) == 0x000010, "Wrong alignment on FEndAIBehaviorMoveTo");
static_assert(sizeof(FEndAIBehaviorMoveTo) == 0x000170, "Wrong size on FEndAIBehaviorMoveTo");
static_assert(offsetof(FEndAIBehaviorMoveTo, TargetLocation) == 0x000138, "Member 'FEndAIBehaviorMoveTo::TargetLocation' has a wrong offset!");
static_assert(offsetof(FEndAIBehaviorMoveTo, WalkTolerance) == 0x000144, "Member 'FEndAIBehaviorMoveTo::WalkTolerance' has a wrong offset!");
static_assert(offsetof(FEndAIBehaviorMoveTo, StopTolerance) == 0x000148, "Member 'FEndAIBehaviorMoveTo::StopTolerance' has a wrong offset!");
static_assert(offsetof(FEndAIBehaviorMoveTo, bInterpolationMove) == 0x00014C, "Member 'FEndAIBehaviorMoveTo::bInterpolationMove' has a wrong offset!");
static_assert(offsetof(FEndAIBehaviorMoveTo, MoveType) == 0x00014D, "Member 'FEndAIBehaviorMoveTo::MoveType' has a wrong offset!");
static_assert(offsetof(FEndAIBehaviorMoveTo, PathType) == 0x00014E, "Member 'FEndAIBehaviorMoveTo::PathType' has a wrong offset!");
static_assert(offsetof(FEndAIBehaviorMoveTo, bCanOutSideMove) == 0x00014F, "Member 'FEndAIBehaviorMoveTo::bCanOutSideMove' has a wrong offset!");

// ScriptStruct EndGame.EndFeelerBarrierTimeRateAndSize
// 0x000C (0x000C - 0x0000)
struct FEndFeelerBarrierTimeRateAndSize final
{
public:
	float                                         TimeRate;                                          // 0x0000(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeRateSpeed;                                     // 0x0004(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Size;                                              // 0x0008(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndFeelerBarrierTimeRateAndSize) == 0x000004, "Wrong alignment on FEndFeelerBarrierTimeRateAndSize");
static_assert(sizeof(FEndFeelerBarrierTimeRateAndSize) == 0x00000C, "Wrong size on FEndFeelerBarrierTimeRateAndSize");
static_assert(offsetof(FEndFeelerBarrierTimeRateAndSize, TimeRate) == 0x000000, "Member 'FEndFeelerBarrierTimeRateAndSize::TimeRate' has a wrong offset!");
static_assert(offsetof(FEndFeelerBarrierTimeRateAndSize, TimeRateSpeed) == 0x000004, "Member 'FEndFeelerBarrierTimeRateAndSize::TimeRateSpeed' has a wrong offset!");
static_assert(offsetof(FEndFeelerBarrierTimeRateAndSize, Size) == 0x000008, "Member 'FEndFeelerBarrierTimeRateAndSize::Size' has a wrong offset!");

// ScriptStruct EndGame.EndAIBehaviorOverrideAnim
// 0x0030 (0x0170 - 0x0140)
struct FEndAIBehaviorOverrideAnim final : public FEndAIBehavior
{
public:
	class FName                                   OverrideBehaviorMode;                              // 0x0138(0x0008)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OverrideAnimSetID;                                 // 0x0140(0x0004)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_144[0x2C];                                     // 0x0144(0x002C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndAIBehaviorOverrideAnim) == 0x000010, "Wrong alignment on FEndAIBehaviorOverrideAnim");
static_assert(sizeof(FEndAIBehaviorOverrideAnim) == 0x000170, "Wrong size on FEndAIBehaviorOverrideAnim");
static_assert(offsetof(FEndAIBehaviorOverrideAnim, OverrideBehaviorMode) == 0x000138, "Member 'FEndAIBehaviorOverrideAnim::OverrideBehaviorMode' has a wrong offset!");
static_assert(offsetof(FEndAIBehaviorOverrideAnim, OverrideAnimSetID) == 0x000140, "Member 'FEndAIBehaviorOverrideAnim::OverrideAnimSetID' has a wrong offset!");

// ScriptStruct EndGame.EndAnimVehicleWheel
// 0x0030 (0x0030 - 0x0000)
struct FEndAnimVehicleWheel final
{
public:
	float                                         WheelRadius;                                       // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WheelRotation;                                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GroundHeight;                                      // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               RotationAxis;                                      // 0x000C(0x000C)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         BoneReference;                                     // 0x0018(0x0014)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	float                                         MaxAngularSpeed;                                   // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndAnimVehicleWheel) == 0x000004, "Wrong alignment on FEndAnimVehicleWheel");
static_assert(sizeof(FEndAnimVehicleWheel) == 0x000030, "Wrong size on FEndAnimVehicleWheel");
static_assert(offsetof(FEndAnimVehicleWheel, WheelRadius) == 0x000000, "Member 'FEndAnimVehicleWheel::WheelRadius' has a wrong offset!");
static_assert(offsetof(FEndAnimVehicleWheel, WheelRotation) == 0x000004, "Member 'FEndAnimVehicleWheel::WheelRotation' has a wrong offset!");
static_assert(offsetof(FEndAnimVehicleWheel, GroundHeight) == 0x000008, "Member 'FEndAnimVehicleWheel::GroundHeight' has a wrong offset!");
static_assert(offsetof(FEndAnimVehicleWheel, RotationAxis) == 0x00000C, "Member 'FEndAnimVehicleWheel::RotationAxis' has a wrong offset!");
static_assert(offsetof(FEndAnimVehicleWheel, BoneReference) == 0x000018, "Member 'FEndAnimVehicleWheel::BoneReference' has a wrong offset!");
static_assert(offsetof(FEndAnimVehicleWheel, MaxAngularSpeed) == 0x00002C, "Member 'FEndAnimVehicleWheel::MaxAngularSpeed' has a wrong offset!");

// ScriptStruct EndGame.EndAnimVehicleLinearSuspension
// 0x0064 (0x0064 - 0x0000)
struct FEndAnimVehicleLinearSuspension final
{
public:
	struct FVector2D                              TranslationLimit;                                  // 0x0000(0x0008)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Mass;                                              // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Stiffness;                                         // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBoneReference                         SuspensionBone;                                    // 0x0010(0x0014)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FEndAnimVehicleWheel                   Wheel;                                             // 0x0024(0x0030)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0xC];                                       // 0x0054(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	ESuspensionAxisType                           MovementAxis;                                      // 0x0060(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndAnimVehicleLinearSuspension) == 0x000004, "Wrong alignment on FEndAnimVehicleLinearSuspension");
static_assert(sizeof(FEndAnimVehicleLinearSuspension) == 0x000064, "Wrong size on FEndAnimVehicleLinearSuspension");
static_assert(offsetof(FEndAnimVehicleLinearSuspension, TranslationLimit) == 0x000000, "Member 'FEndAnimVehicleLinearSuspension::TranslationLimit' has a wrong offset!");
static_assert(offsetof(FEndAnimVehicleLinearSuspension, Mass) == 0x000008, "Member 'FEndAnimVehicleLinearSuspension::Mass' has a wrong offset!");
static_assert(offsetof(FEndAnimVehicleLinearSuspension, Stiffness) == 0x00000C, "Member 'FEndAnimVehicleLinearSuspension::Stiffness' has a wrong offset!");
static_assert(offsetof(FEndAnimVehicleLinearSuspension, SuspensionBone) == 0x000010, "Member 'FEndAnimVehicleLinearSuspension::SuspensionBone' has a wrong offset!");
static_assert(offsetof(FEndAnimVehicleLinearSuspension, Wheel) == 0x000024, "Member 'FEndAnimVehicleLinearSuspension::Wheel' has a wrong offset!");
static_assert(offsetof(FEndAnimVehicleLinearSuspension, MovementAxis) == 0x000060, "Member 'FEndAnimVehicleLinearSuspension::MovementAxis' has a wrong offset!");

// ScriptStruct EndGame.EndAIBehaviorOverrideLocomotion
// 0x0020 (0x0160 - 0x0140)
struct FEndAIBehaviorOverrideLocomotion final : public FEndAIBehaviorWait
{
public:
	EEndLocomotionAnim                            LocomotionAnim;                                    // 0x0140(0x0001)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_141[0x3];                                      // 0x0141(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SequenceName;                                      // 0x0144(0x0008)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14C[0x14];                                     // 0x014C(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndAIBehaviorOverrideLocomotion) == 0x000010, "Wrong alignment on FEndAIBehaviorOverrideLocomotion");
static_assert(sizeof(FEndAIBehaviorOverrideLocomotion) == 0x000160, "Wrong size on FEndAIBehaviorOverrideLocomotion");
static_assert(offsetof(FEndAIBehaviorOverrideLocomotion, LocomotionAnim) == 0x000140, "Member 'FEndAIBehaviorOverrideLocomotion::LocomotionAnim' has a wrong offset!");
static_assert(offsetof(FEndAIBehaviorOverrideLocomotion, SequenceName) == 0x000144, "Member 'FEndAIBehaviorOverrideLocomotion::SequenceName' has a wrong offset!");

// ScriptStruct EndGame.EndAIBehaviorPlayAnimation
// 0x0060 (0x01A0 - 0x0140)
struct FEndAIBehaviorPlayAnimation : public FEndAIBehavior
{
public:
	class FName                                   LevelName;                                         // 0x0138(0x0008)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AnimationName;                                     // 0x0140(0x0008)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLoop;                                            // 0x0148(0x0001)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_149[0x57];                                     // 0x0149(0x0057)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndAIBehaviorPlayAnimation) == 0x000010, "Wrong alignment on FEndAIBehaviorPlayAnimation");
static_assert(sizeof(FEndAIBehaviorPlayAnimation) == 0x0001A0, "Wrong size on FEndAIBehaviorPlayAnimation");
static_assert(offsetof(FEndAIBehaviorPlayAnimation, LevelName) == 0x000138, "Member 'FEndAIBehaviorPlayAnimation::LevelName' has a wrong offset!");
static_assert(offsetof(FEndAIBehaviorPlayAnimation, AnimationName) == 0x000140, "Member 'FEndAIBehaviorPlayAnimation::AnimationName' has a wrong offset!");
static_assert(offsetof(FEndAIBehaviorPlayAnimation, IsLoop) == 0x000148, "Member 'FEndAIBehaviorPlayAnimation::IsLoop' has a wrong offset!");

// ScriptStruct EndGame.EndDataTablePlannerEventRelativeCamera
// 0x0040 (0x0048 - 0x0008)
struct FEndDataTablePlannerEventRelativeCamera final : public FEndDataTableRowBase
{
public:
	class FName                                   MainTargetName;                                    // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MainTargetOffsetZ;                                 // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SubTargetName;                                     // 0x0014(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SubTargetOffsetZ;                                  // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotatePitch;                                       // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotateYaw;                                         // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RelativeRate;                                      // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RelativeZRate;                                     // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CameraDist;                                        // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FOV;                                               // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NextCamera;                                        // 0x0038(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayTime;                                          // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTablePlannerEventRelativeCamera) == 0x000008, "Wrong alignment on FEndDataTablePlannerEventRelativeCamera");
static_assert(sizeof(FEndDataTablePlannerEventRelativeCamera) == 0x000048, "Wrong size on FEndDataTablePlannerEventRelativeCamera");
static_assert(offsetof(FEndDataTablePlannerEventRelativeCamera, MainTargetName) == 0x000008, "Member 'FEndDataTablePlannerEventRelativeCamera::MainTargetName' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlannerEventRelativeCamera, MainTargetOffsetZ) == 0x000010, "Member 'FEndDataTablePlannerEventRelativeCamera::MainTargetOffsetZ' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlannerEventRelativeCamera, SubTargetName) == 0x000014, "Member 'FEndDataTablePlannerEventRelativeCamera::SubTargetName' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlannerEventRelativeCamera, SubTargetOffsetZ) == 0x00001C, "Member 'FEndDataTablePlannerEventRelativeCamera::SubTargetOffsetZ' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlannerEventRelativeCamera, RotatePitch) == 0x000020, "Member 'FEndDataTablePlannerEventRelativeCamera::RotatePitch' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlannerEventRelativeCamera, RotateYaw) == 0x000024, "Member 'FEndDataTablePlannerEventRelativeCamera::RotateYaw' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlannerEventRelativeCamera, RelativeRate) == 0x000028, "Member 'FEndDataTablePlannerEventRelativeCamera::RelativeRate' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlannerEventRelativeCamera, RelativeZRate) == 0x00002C, "Member 'FEndDataTablePlannerEventRelativeCamera::RelativeZRate' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlannerEventRelativeCamera, CameraDist) == 0x000030, "Member 'FEndDataTablePlannerEventRelativeCamera::CameraDist' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlannerEventRelativeCamera, FOV) == 0x000034, "Member 'FEndDataTablePlannerEventRelativeCamera::FOV' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlannerEventRelativeCamera, NextCamera) == 0x000038, "Member 'FEndDataTablePlannerEventRelativeCamera::NextCamera' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlannerEventRelativeCamera, PlayTime) == 0x000040, "Member 'FEndDataTablePlannerEventRelativeCamera::PlayTime' has a wrong offset!");

// ScriptStruct EndGame.EndAIBehaviorPlayBeginLoopAnimation
// 0x0050 (0x0190 - 0x0140)
struct FEndAIBehaviorPlayBeginLoopAnimation final : public FEndAIBehavior
{
public:
	class FName                                   BeginAnimationName;                                // 0x0138(0x0008)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                      BeginAnimation;                                    // 0x0140(0x0008)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LoopAnimationName;                                 // 0x0148(0x0008)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                      LoopAnimation;                                     // 0x0150(0x0008)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_158[0x38];                                     // 0x0158(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndAIBehaviorPlayBeginLoopAnimation) == 0x000010, "Wrong alignment on FEndAIBehaviorPlayBeginLoopAnimation");
static_assert(sizeof(FEndAIBehaviorPlayBeginLoopAnimation) == 0x000190, "Wrong size on FEndAIBehaviorPlayBeginLoopAnimation");
static_assert(offsetof(FEndAIBehaviorPlayBeginLoopAnimation, BeginAnimationName) == 0x000138, "Member 'FEndAIBehaviorPlayBeginLoopAnimation::BeginAnimationName' has a wrong offset!");
static_assert(offsetof(FEndAIBehaviorPlayBeginLoopAnimation, BeginAnimation) == 0x000140, "Member 'FEndAIBehaviorPlayBeginLoopAnimation::BeginAnimation' has a wrong offset!");
static_assert(offsetof(FEndAIBehaviorPlayBeginLoopAnimation, LoopAnimationName) == 0x000148, "Member 'FEndAIBehaviorPlayBeginLoopAnimation::LoopAnimationName' has a wrong offset!");
static_assert(offsetof(FEndAIBehaviorPlayBeginLoopAnimation, LoopAnimation) == 0x000150, "Member 'FEndAIBehaviorPlayBeginLoopAnimation::LoopAnimation' has a wrong offset!");

// ScriptStruct EndGame.EndAIBehaviorPlayContactAnimation
// 0x0010 (0x01B0 - 0x01A0)
struct FEndAIBehaviorPlayContactAnimation final : public FEndAIBehaviorPlayAnimation
{
public:
	uint8                                         Pad_1A0[0x10];                                     // 0x01A0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndAIBehaviorPlayContactAnimation) == 0x000010, "Wrong alignment on FEndAIBehaviorPlayContactAnimation");
static_assert(sizeof(FEndAIBehaviorPlayContactAnimation) == 0x0001B0, "Wrong size on FEndAIBehaviorPlayContactAnimation");

// ScriptStruct EndGame.EndDataTableBattleCommandLinkage
// 0x0018 (0x0020 - 0x0008)
struct FEndDataTableBattleCommandLinkage final : public FEndDataTableRowBase
{
public:
	int32                                         Bonus;                                             // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Second;                                            // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TextLabel;                                         // 0x0010(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableBattleCommandLinkage) == 0x000008, "Wrong alignment on FEndDataTableBattleCommandLinkage");
static_assert(sizeof(FEndDataTableBattleCommandLinkage) == 0x000020, "Wrong size on FEndDataTableBattleCommandLinkage");
static_assert(offsetof(FEndDataTableBattleCommandLinkage, Bonus) == 0x000008, "Member 'FEndDataTableBattleCommandLinkage::Bonus' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCommandLinkage, Second) == 0x00000C, "Member 'FEndDataTableBattleCommandLinkage::Second' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCommandLinkage, TextLabel) == 0x000010, "Member 'FEndDataTableBattleCommandLinkage::TextLabel' has a wrong offset!");

// ScriptStruct EndGame.EndAIBehaviorPlayExtraAction
// 0x0020 (0x0160 - 0x0140)
struct FEndAIBehaviorPlayExtraAction final : public FEndAIBehavior
{
public:
	uint8                                         Pad_138[0x28];                                     // 0x0138(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndAIBehaviorPlayExtraAction) == 0x000010, "Wrong alignment on FEndAIBehaviorPlayExtraAction");
static_assert(sizeof(FEndAIBehaviorPlayExtraAction) == 0x000160, "Wrong size on FEndAIBehaviorPlayExtraAction");

// ScriptStruct EndGame.EndAIBehaviorSaccade
// 0x0010 (0x0150 - 0x0140)
struct FEndAIBehaviorSaccade final : public FEndAIBehavior
{
public:
	EEndLookAtRequestType                         RequestType;                                       // 0x0138(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_139[0x3];                                      // 0x0139(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                TargetLocation;                                    // 0x013C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_148[0x8];                                      // 0x0148(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndAIBehaviorSaccade) == 0x000010, "Wrong alignment on FEndAIBehaviorSaccade");
static_assert(sizeof(FEndAIBehaviorSaccade) == 0x000150, "Wrong size on FEndAIBehaviorSaccade");
static_assert(offsetof(FEndAIBehaviorSaccade, RequestType) == 0x000138, "Member 'FEndAIBehaviorSaccade::RequestType' has a wrong offset!");
static_assert(offsetof(FEndAIBehaviorSaccade, TargetLocation) == 0x00013C, "Member 'FEndAIBehaviorSaccade::TargetLocation' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableBikeSequence
// 0x0038 (0x0040 - 0x0008)
struct FEndDataTableBikeSequence final : public FEndDataTableRowBase
{
public:
	class FName                                   PlayerBikeCharaSpec;                               // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AllyBikeCharaSpec;                                 // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FirstSplineId;                                     // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartLocationX;                                    // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartLocationY;                                    // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartLocationZ;                                    // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           BikePhaseIDList_Array;                             // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableBikeSequence) == 0x000008, "Wrong alignment on FEndDataTableBikeSequence");
static_assert(sizeof(FEndDataTableBikeSequence) == 0x000040, "Wrong size on FEndDataTableBikeSequence");
static_assert(offsetof(FEndDataTableBikeSequence, PlayerBikeCharaSpec) == 0x000008, "Member 'FEndDataTableBikeSequence::PlayerBikeCharaSpec' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeSequence, AllyBikeCharaSpec) == 0x000010, "Member 'FEndDataTableBikeSequence::AllyBikeCharaSpec' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeSequence, FirstSplineId) == 0x000018, "Member 'FEndDataTableBikeSequence::FirstSplineId' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeSequence, StartLocationX) == 0x000020, "Member 'FEndDataTableBikeSequence::StartLocationX' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeSequence, StartLocationY) == 0x000024, "Member 'FEndDataTableBikeSequence::StartLocationY' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeSequence, StartLocationZ) == 0x000028, "Member 'FEndDataTableBikeSequence::StartLocationZ' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeSequence, BikePhaseIDList_Array) == 0x000030, "Member 'FEndDataTableBikeSequence::BikePhaseIDList_Array' has a wrong offset!");

// ScriptStruct EndGame.EndAIIntentionCuriosity
// 0x0038 (0x0048 - 0x0010)
struct FEndAIIntentionCuriosity final : public FEndAIIntention
{
public:
	class UEndAIIntentionCuriositySetting*        Setting;                                           // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInterestLooking;                                  // 0x0018(0x0001)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                InterestLocation;                                  // 0x001C(0x000C)(Edit, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InterestActorDuringTimer;                          // 0x0028(0x0004)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x1C];                                      // 0x002C(0x001C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndAIIntentionCuriosity) == 0x000008, "Wrong alignment on FEndAIIntentionCuriosity");
static_assert(sizeof(FEndAIIntentionCuriosity) == 0x000048, "Wrong size on FEndAIIntentionCuriosity");
static_assert(offsetof(FEndAIIntentionCuriosity, Setting) == 0x000010, "Member 'FEndAIIntentionCuriosity::Setting' has a wrong offset!");
static_assert(offsetof(FEndAIIntentionCuriosity, bInterestLooking) == 0x000018, "Member 'FEndAIIntentionCuriosity::bInterestLooking' has a wrong offset!");
static_assert(offsetof(FEndAIIntentionCuriosity, InterestLocation) == 0x00001C, "Member 'FEndAIIntentionCuriosity::InterestLocation' has a wrong offset!");
static_assert(offsetof(FEndAIIntentionCuriosity, InterestActorDuringTimer) == 0x000028, "Member 'FEndAIIntentionCuriosity::InterestActorDuringTimer' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableAutoCameraGroup
// 0x0018 (0x0020 - 0x0008)
struct FEndDataTableAutoCameraGroup final : public FEndDataTableRowBase
{
public:
	int32                                         GroupType;                                         // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           GroupMemberList_Array;                             // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableAutoCameraGroup) == 0x000008, "Wrong alignment on FEndDataTableAutoCameraGroup");
static_assert(sizeof(FEndDataTableAutoCameraGroup) == 0x000020, "Wrong size on FEndDataTableAutoCameraGroup");
static_assert(offsetof(FEndDataTableAutoCameraGroup, GroupType) == 0x000008, "Member 'FEndDataTableAutoCameraGroup::GroupType' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraGroup, GroupMemberList_Array) == 0x000010, "Member 'FEndDataTableAutoCameraGroup::GroupMemberList_Array' has a wrong offset!");

// ScriptStruct EndGame.EndAIInterestPoint
// 0x0010 (0x0010 - 0x0000)
struct FEndAIInterestPoint final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InterestRate;                                      // 0x0008(0x0004)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInterSense                                   Sense;                                             // 0x000C(0x0001)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndAIInterestPoint) == 0x000008, "Wrong alignment on FEndAIInterestPoint");
static_assert(sizeof(FEndAIInterestPoint) == 0x000010, "Wrong size on FEndAIInterestPoint");
static_assert(offsetof(FEndAIInterestPoint, Actor) == 0x000000, "Member 'FEndAIInterestPoint::Actor' has a wrong offset!");
static_assert(offsetof(FEndAIInterestPoint, InterestRate) == 0x000008, "Member 'FEndAIInterestPoint::InterestRate' has a wrong offset!");
static_assert(offsetof(FEndAIInterestPoint, Sense) == 0x00000C, "Member 'FEndAIInterestPoint::Sense' has a wrong offset!");

// ScriptStruct EndGame.EndAerialBoidsParam
// 0x0050 (0x0050 - 0x0000)
struct FEndAerialBoidsParam final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AccuracyX;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AccuracyY;                                         // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AccuracyZ;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PersonalSpace;                                     // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Prediction;                                        // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FlatUcpc;                                          // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FlatTarget;                                        // 0x0021(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHorizontal;                                       // 0x0022(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23[0x1];                                       // 0x0023(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CountZ;                                            // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         QuantityZ;                                         // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FEndBoidsTypeParam>             BoidsParameter;                                    // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_40[0x10];                                      // 0x0040(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndAerialBoidsParam) == 0x000008, "Wrong alignment on FEndAerialBoidsParam");
static_assert(sizeof(FEndAerialBoidsParam) == 0x000050, "Wrong size on FEndAerialBoidsParam");
static_assert(offsetof(FEndAerialBoidsParam, AccuracyX) == 0x000008, "Member 'FEndAerialBoidsParam::AccuracyX' has a wrong offset!");
static_assert(offsetof(FEndAerialBoidsParam, AccuracyY) == 0x00000C, "Member 'FEndAerialBoidsParam::AccuracyY' has a wrong offset!");
static_assert(offsetof(FEndAerialBoidsParam, AccuracyZ) == 0x000010, "Member 'FEndAerialBoidsParam::AccuracyZ' has a wrong offset!");
static_assert(offsetof(FEndAerialBoidsParam, PersonalSpace) == 0x000018, "Member 'FEndAerialBoidsParam::PersonalSpace' has a wrong offset!");
static_assert(offsetof(FEndAerialBoidsParam, Prediction) == 0x00001C, "Member 'FEndAerialBoidsParam::Prediction' has a wrong offset!");
static_assert(offsetof(FEndAerialBoidsParam, FlatUcpc) == 0x000020, "Member 'FEndAerialBoidsParam::FlatUcpc' has a wrong offset!");
static_assert(offsetof(FEndAerialBoidsParam, FlatTarget) == 0x000021, "Member 'FEndAerialBoidsParam::FlatTarget' has a wrong offset!");
static_assert(offsetof(FEndAerialBoidsParam, bHorizontal) == 0x000022, "Member 'FEndAerialBoidsParam::bHorizontal' has a wrong offset!");
static_assert(offsetof(FEndAerialBoidsParam, CountZ) == 0x000024, "Member 'FEndAerialBoidsParam::CountZ' has a wrong offset!");
static_assert(offsetof(FEndAerialBoidsParam, QuantityZ) == 0x000028, "Member 'FEndAerialBoidsParam::QuantityZ' has a wrong offset!");
static_assert(offsetof(FEndAerialBoidsParam, BoidsParameter) == 0x000030, "Member 'FEndAerialBoidsParam::BoidsParameter' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableBikeSplineMetaData
// 0x0030 (0x0038 - 0x0008)
struct FEndDataTableBikeSplineMetaData final : public FEndDataTableRowBase
{
public:
	TArray<float>                                 RoadWidth_Array;                                   // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         ExistMedianStrip;                                  // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 MedianStripWidth_Array;                            // 0x0020(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         DisableCutScene;                                   // 0x0030(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableBikeSplineMetaData) == 0x000008, "Wrong alignment on FEndDataTableBikeSplineMetaData");
static_assert(sizeof(FEndDataTableBikeSplineMetaData) == 0x000038, "Wrong size on FEndDataTableBikeSplineMetaData");
static_assert(offsetof(FEndDataTableBikeSplineMetaData, RoadWidth_Array) == 0x000008, "Member 'FEndDataTableBikeSplineMetaData::RoadWidth_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeSplineMetaData, ExistMedianStrip) == 0x000018, "Member 'FEndDataTableBikeSplineMetaData::ExistMedianStrip' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeSplineMetaData, MedianStripWidth_Array) == 0x000020, "Member 'FEndDataTableBikeSplineMetaData::MedianStripWidth_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeSplineMetaData, DisableCutScene) == 0x000030, "Member 'FEndDataTableBikeSplineMetaData::DisableCutScene' has a wrong offset!");

// ScriptStruct EndGame.EndAIModelModifier
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FEndAIModelModifier
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndAIModelModifier) == 0x000008, "Wrong alignment on FEndAIModelModifier");
static_assert(sizeof(FEndAIModelModifier) == 0x000010, "Wrong size on FEndAIModelModifier");

// ScriptStruct EndGame.EndAIIntentionCognition
// 0x0000 (0x0010 - 0x0010)
struct FEndAIIntentionCognition final : public FEndAIIntention
{
};
static_assert(alignof(FEndAIIntentionCognition) == 0x000008, "Wrong alignment on FEndAIIntentionCognition");
static_assert(sizeof(FEndAIIntentionCognition) == 0x000010, "Wrong size on FEndAIIntentionCognition");

// ScriptStruct EndGame.EndEnvironmentPhysActorSpawnerParam
// 0x0040 (0x0040 - 0x0000)
struct FEndEnvironmentPhysActorSpawnerParam final
{
public:
	struct FTransform                             Origin;                                            // 0x0000(0x0030)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bRandomRotation;                                   // 0x0030(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   UsedEnvironmentPhysicsSpecName;                    // 0x0034(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndEnvironmentPhysActorSpawnerParam) == 0x000010, "Wrong alignment on FEndEnvironmentPhysActorSpawnerParam");
static_assert(sizeof(FEndEnvironmentPhysActorSpawnerParam) == 0x000040, "Wrong size on FEndEnvironmentPhysActorSpawnerParam");
static_assert(offsetof(FEndEnvironmentPhysActorSpawnerParam, Origin) == 0x000000, "Member 'FEndEnvironmentPhysActorSpawnerParam::Origin' has a wrong offset!");
static_assert(offsetof(FEndEnvironmentPhysActorSpawnerParam, bRandomRotation) == 0x000030, "Member 'FEndEnvironmentPhysActorSpawnerParam::bRandomRotation' has a wrong offset!");
static_assert(offsetof(FEndEnvironmentPhysActorSpawnerParam, UsedEnvironmentPhysicsSpecName) == 0x000034, "Member 'FEndEnvironmentPhysActorSpawnerParam::UsedEnvironmentPhysicsSpecName' has a wrong offset!");

// ScriptStruct EndGame.EndAIIntentionInterestActionControl
// 0x06C8 (0x06D8 - 0x0010)
struct FEndAIIntentionInterestActionControl final : public FEndAIIntention
{
public:
	uint8                                         Pad_10[0x6C8];                                     // 0x0010(0x06C8)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndAIIntentionInterestActionControl) == 0x000008, "Wrong alignment on FEndAIIntentionInterestActionControl");
static_assert(sizeof(FEndAIIntentionInterestActionControl) == 0x0006D8, "Wrong size on FEndAIIntentionInterestActionControl");

// ScriptStruct EndGame.EndDataTableWeaponUpgradeTreeLevel
// 0x0010 (0x0018 - 0x0008)
struct FEndDataTableWeaponUpgradeTreeLevel final : public FEndDataTableRowBase
{
public:
	class FName                                   EquipmentID;                                       // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         TreeLevel;                                         // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Percent;                                           // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableWeaponUpgradeTreeLevel) == 0x000008, "Wrong alignment on FEndDataTableWeaponUpgradeTreeLevel");
static_assert(sizeof(FEndDataTableWeaponUpgradeTreeLevel) == 0x000018, "Wrong size on FEndDataTableWeaponUpgradeTreeLevel");
static_assert(offsetof(FEndDataTableWeaponUpgradeTreeLevel, EquipmentID) == 0x000008, "Member 'FEndDataTableWeaponUpgradeTreeLevel::EquipmentID' has a wrong offset!");
static_assert(offsetof(FEndDataTableWeaponUpgradeTreeLevel, TreeLevel) == 0x000010, "Member 'FEndDataTableWeaponUpgradeTreeLevel::TreeLevel' has a wrong offset!");
static_assert(offsetof(FEndDataTableWeaponUpgradeTreeLevel, Percent) == 0x000014, "Member 'FEndDataTableWeaponUpgradeTreeLevel::Percent' has a wrong offset!");

// ScriptStruct EndGame.EndAIIntentionManualControl
// 0x0030 (0x0040 - 0x0010)
struct FEndAIIntentionManualControl final : public FEndAIIntention
{
public:
	uint8                                         Pad_10[0x30];                                      // 0x0010(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndAIIntentionManualControl) == 0x000008, "Wrong alignment on FEndAIIntentionManualControl");
static_assert(sizeof(FEndAIIntentionManualControl) == 0x000040, "Wrong size on FEndAIIntentionManualControl");

// ScriptStruct EndGame.EndAIModelTalkModifier
// 0x0070 (0x0080 - 0x0010)
struct FEndAIModelTalkModifier final : public FEndAIModelModifier
{
public:
	uint8                                         Pad_10[0x70];                                      // 0x0010(0x0070)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndAIModelTalkModifier) == 0x000008, "Wrong alignment on FEndAIModelTalkModifier");
static_assert(sizeof(FEndAIModelTalkModifier) == 0x000080, "Wrong size on FEndAIModelTalkModifier");

// ScriptStruct EndGame.EndDataTableBattleSpecialStatusChange
// 0x0030 (0x0038 - 0x0008)
struct FEndDataTableBattleSpecialStatusChange final : public FEndDataTableRowBase
{
public:
	uint8                                         Type;                                              // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 Param_Array;                                       // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           ParamID_Array;                                     // 0x0020(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         ParamFlag;                                         // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableBattleSpecialStatusChange) == 0x000008, "Wrong alignment on FEndDataTableBattleSpecialStatusChange");
static_assert(sizeof(FEndDataTableBattleSpecialStatusChange) == 0x000038, "Wrong size on FEndDataTableBattleSpecialStatusChange");
static_assert(offsetof(FEndDataTableBattleSpecialStatusChange, Type) == 0x000008, "Member 'FEndDataTableBattleSpecialStatusChange::Type' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSpecialStatusChange, Param_Array) == 0x000010, "Member 'FEndDataTableBattleSpecialStatusChange::Param_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSpecialStatusChange, ParamID_Array) == 0x000020, "Member 'FEndDataTableBattleSpecialStatusChange::ParamID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSpecialStatusChange, ParamFlag) == 0x000030, "Member 'FEndDataTableBattleSpecialStatusChange::ParamFlag' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableSceneChanger
// 0x0040 (0x0048 - 0x0008)
struct FEndDataTableSceneChanger final : public FEndDataTableRowBase
{
public:
	float                                         ShowTime;                                          // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChangeBGMDelayTime;                                // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChangeBGMTime;                                     // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ChangeBGMType;                                     // 0x0014(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ChangeBGMNameA;                                    // 0x0018(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ChangeBGMNameB;                                    // 0x0028(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChangeFadeDelayTime;                               // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChangeFadeTime;                                    // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ChangeFadeType;                                    // 0x0040(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         FadeTargetA;                                       // 0x0041(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         FadeTargetB;                                       // 0x0042(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_43[0x5];                                       // 0x0043(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableSceneChanger) == 0x000008, "Wrong alignment on FEndDataTableSceneChanger");
static_assert(sizeof(FEndDataTableSceneChanger) == 0x000048, "Wrong size on FEndDataTableSceneChanger");
static_assert(offsetof(FEndDataTableSceneChanger, ShowTime) == 0x000008, "Member 'FEndDataTableSceneChanger::ShowTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableSceneChanger, ChangeBGMDelayTime) == 0x00000C, "Member 'FEndDataTableSceneChanger::ChangeBGMDelayTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableSceneChanger, ChangeBGMTime) == 0x000010, "Member 'FEndDataTableSceneChanger::ChangeBGMTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableSceneChanger, ChangeBGMType) == 0x000014, "Member 'FEndDataTableSceneChanger::ChangeBGMType' has a wrong offset!");
static_assert(offsetof(FEndDataTableSceneChanger, ChangeBGMNameA) == 0x000018, "Member 'FEndDataTableSceneChanger::ChangeBGMNameA' has a wrong offset!");
static_assert(offsetof(FEndDataTableSceneChanger, ChangeBGMNameB) == 0x000028, "Member 'FEndDataTableSceneChanger::ChangeBGMNameB' has a wrong offset!");
static_assert(offsetof(FEndDataTableSceneChanger, ChangeFadeDelayTime) == 0x000038, "Member 'FEndDataTableSceneChanger::ChangeFadeDelayTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableSceneChanger, ChangeFadeTime) == 0x00003C, "Member 'FEndDataTableSceneChanger::ChangeFadeTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableSceneChanger, ChangeFadeType) == 0x000040, "Member 'FEndDataTableSceneChanger::ChangeFadeType' has a wrong offset!");
static_assert(offsetof(FEndDataTableSceneChanger, FadeTargetA) == 0x000041, "Member 'FEndDataTableSceneChanger::FadeTargetA' has a wrong offset!");
static_assert(offsetof(FEndDataTableSceneChanger, FadeTargetB) == 0x000042, "Member 'FEndDataTableSceneChanger::FadeTargetB' has a wrong offset!");

// ScriptStruct EndGame.EndAimSolveBone
// 0x0018 (0x0018 - 0x0000)
struct FEndAimSolveBone final
{
public:
	class FName                                   BoneName;                                          // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UpRate;                                            // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUpOnly;                                           // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreBoneUpRate;                                 // 0x0011(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TranslationRate;                                   // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndAimSolveBone) == 0x000004, "Wrong alignment on FEndAimSolveBone");
static_assert(sizeof(FEndAimSolveBone) == 0x000018, "Wrong size on FEndAimSolveBone");
static_assert(offsetof(FEndAimSolveBone, BoneName) == 0x000000, "Member 'FEndAimSolveBone::BoneName' has a wrong offset!");
static_assert(offsetof(FEndAimSolveBone, Weight) == 0x000008, "Member 'FEndAimSolveBone::Weight' has a wrong offset!");
static_assert(offsetof(FEndAimSolveBone, UpRate) == 0x00000C, "Member 'FEndAimSolveBone::UpRate' has a wrong offset!");
static_assert(offsetof(FEndAimSolveBone, bUpOnly) == 0x000010, "Member 'FEndAimSolveBone::bUpOnly' has a wrong offset!");
static_assert(offsetof(FEndAimSolveBone, bIgnoreBoneUpRate) == 0x000011, "Member 'FEndAimSolveBone::bIgnoreBoneUpRate' has a wrong offset!");
static_assert(offsetof(FEndAimSolveBone, TranslationRate) == 0x000014, "Member 'FEndAimSolveBone::TranslationRate' has a wrong offset!");

// ScriptStruct EndGame.EndAimSolveEffector
// 0x0068 (0x0068 - 0x0000)
struct FEndAimSolveEffector final
{
public:
	class FName                                   EffectorBoneName;                                  // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bComponentSpaceForwardAim;                         // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ComponentSpaceAimForward;                          // 0x000C(0x000C)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ActiveAngle;                                       // 0x0018(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ActiveYawRange;                                    // 0x001C(0x0008)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ActivePitchRange;                                  // 0x0024(0x0008)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceSkipSolvedTarget;                            // 0x002C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AdditiveContinuationTargetScore;                   // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           SolveBoneNames;                                    // 0x0038(0x0010)(ZeroConstructor, Deprecated, NativeAccessSpecifierPublic)
	TArray<struct FEndAimSolveBone>               SolveBones;                                        // 0x0048(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FEndAimSolveBone>               ExtendSolveBones;                                  // 0x0058(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndAimSolveEffector) == 0x000008, "Wrong alignment on FEndAimSolveEffector");
static_assert(sizeof(FEndAimSolveEffector) == 0x000068, "Wrong size on FEndAimSolveEffector");
static_assert(offsetof(FEndAimSolveEffector, EffectorBoneName) == 0x000000, "Member 'FEndAimSolveEffector::EffectorBoneName' has a wrong offset!");
static_assert(offsetof(FEndAimSolveEffector, bComponentSpaceForwardAim) == 0x000008, "Member 'FEndAimSolveEffector::bComponentSpaceForwardAim' has a wrong offset!");
static_assert(offsetof(FEndAimSolveEffector, ComponentSpaceAimForward) == 0x00000C, "Member 'FEndAimSolveEffector::ComponentSpaceAimForward' has a wrong offset!");
static_assert(offsetof(FEndAimSolveEffector, ActiveAngle) == 0x000018, "Member 'FEndAimSolveEffector::ActiveAngle' has a wrong offset!");
static_assert(offsetof(FEndAimSolveEffector, ActiveYawRange) == 0x00001C, "Member 'FEndAimSolveEffector::ActiveYawRange' has a wrong offset!");
static_assert(offsetof(FEndAimSolveEffector, ActivePitchRange) == 0x000024, "Member 'FEndAimSolveEffector::ActivePitchRange' has a wrong offset!");
static_assert(offsetof(FEndAimSolveEffector, bForceSkipSolvedTarget) == 0x00002C, "Member 'FEndAimSolveEffector::bForceSkipSolvedTarget' has a wrong offset!");
static_assert(offsetof(FEndAimSolveEffector, AdditiveContinuationTargetScore) == 0x000030, "Member 'FEndAimSolveEffector::AdditiveContinuationTargetScore' has a wrong offset!");
static_assert(offsetof(FEndAimSolveEffector, SolveBoneNames) == 0x000038, "Member 'FEndAimSolveEffector::SolveBoneNames' has a wrong offset!");
static_assert(offsetof(FEndAimSolveEffector, SolveBones) == 0x000048, "Member 'FEndAimSolveEffector::SolveBones' has a wrong offset!");
static_assert(offsetof(FEndAimSolveEffector, ExtendSolveBones) == 0x000058, "Member 'FEndAimSolveEffector::ExtendSolveBones' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableBattlePointLinkData
// 0x0048 (0x0050 - 0x0008)
struct FEndDataTableBattlePointLinkData final : public FEndDataTableRowBase
{
public:
	int32                                         Number;                                            // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           LinkDest_Array;                                    // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         PeakHeight;                                        // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PeakBias;                                          // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BeginAnimation;                                    // 0x002C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LoopAnimation;                                     // 0x0034(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EndAnimation0;                                     // 0x003C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EndAnimation1;                                     // 0x0044(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableBattlePointLinkData) == 0x000008, "Wrong alignment on FEndDataTableBattlePointLinkData");
static_assert(sizeof(FEndDataTableBattlePointLinkData) == 0x000050, "Wrong size on FEndDataTableBattlePointLinkData");
static_assert(offsetof(FEndDataTableBattlePointLinkData, Number) == 0x000008, "Member 'FEndDataTableBattlePointLinkData::Number' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattlePointLinkData, LinkDest_Array) == 0x000010, "Member 'FEndDataTableBattlePointLinkData::LinkDest_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattlePointLinkData, PeakHeight) == 0x000020, "Member 'FEndDataTableBattlePointLinkData::PeakHeight' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattlePointLinkData, PeakBias) == 0x000024, "Member 'FEndDataTableBattlePointLinkData::PeakBias' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattlePointLinkData, Duration) == 0x000028, "Member 'FEndDataTableBattlePointLinkData::Duration' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattlePointLinkData, BeginAnimation) == 0x00002C, "Member 'FEndDataTableBattlePointLinkData::BeginAnimation' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattlePointLinkData, LoopAnimation) == 0x000034, "Member 'FEndDataTableBattlePointLinkData::LoopAnimation' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattlePointLinkData, EndAnimation0) == 0x00003C, "Member 'FEndDataTableBattlePointLinkData::EndAnimation0' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattlePointLinkData, EndAnimation1) == 0x000044, "Member 'FEndDataTableBattlePointLinkData::EndAnimation1' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableItemDropBox
// 0x0040 (0x0048 - 0x0008)
struct FEndDataTableItemDropBox final : public FEndDataTableRowBase
{
public:
	int32                                         DropPercent;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DropStoryFlagName;                                 // 0x000C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DropedStoryFlag;                                   // 0x0014(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OverrideFieldAttackResponseAreaID;                 // 0x001C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           StateConditionList_Array;                          // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           ItemDropList_Array;                                // 0x0038(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableItemDropBox) == 0x000008, "Wrong alignment on FEndDataTableItemDropBox");
static_assert(sizeof(FEndDataTableItemDropBox) == 0x000048, "Wrong size on FEndDataTableItemDropBox");
static_assert(offsetof(FEndDataTableItemDropBox, DropPercent) == 0x000008, "Member 'FEndDataTableItemDropBox::DropPercent' has a wrong offset!");
static_assert(offsetof(FEndDataTableItemDropBox, DropStoryFlagName) == 0x00000C, "Member 'FEndDataTableItemDropBox::DropStoryFlagName' has a wrong offset!");
static_assert(offsetof(FEndDataTableItemDropBox, DropedStoryFlag) == 0x000014, "Member 'FEndDataTableItemDropBox::DropedStoryFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTableItemDropBox, OverrideFieldAttackResponseAreaID) == 0x00001C, "Member 'FEndDataTableItemDropBox::OverrideFieldAttackResponseAreaID' has a wrong offset!");
static_assert(offsetof(FEndDataTableItemDropBox, StateConditionList_Array) == 0x000028, "Member 'FEndDataTableItemDropBox::StateConditionList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableItemDropBox, ItemDropList_Array) == 0x000038, "Member 'FEndDataTableItemDropBox::ItemDropList_Array' has a wrong offset!");

// ScriptStruct EndGame.EndAISensorTactileSense
// 0x0008 (0x0018 - 0x0010)
struct FEndAISensorTactileSense final : public FEndAISensor
{
public:
	float                                         HeatDistance;                                      // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndAISensorTactileSense) == 0x000008, "Wrong alignment on FEndAISensorTactileSense");
static_assert(sizeof(FEndAISensorTactileSense) == 0x000018, "Wrong size on FEndAISensorTactileSense");
static_assert(offsetof(FEndAISensorTactileSense, HeatDistance) == 0x000010, "Member 'FEndAISensorTactileSense::HeatDistance' has a wrong offset!");

// ScriptStruct EndGame.EndAISensorVision
// 0x0070 (0x0080 - 0x0010)
struct FEndAISensorVision final : public FEndAISensor
{
public:
	float                                         VisibleAngleAtIdle;                                // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VisibleDistanceAtIdle;                             // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VisibleAngleAtMoving;                              // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VisibleDistanceAtMoving;                           // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20[0x60];                                      // 0x0020(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndAISensorVision) == 0x000008, "Wrong alignment on FEndAISensorVision");
static_assert(sizeof(FEndAISensorVision) == 0x000080, "Wrong size on FEndAISensorVision");
static_assert(offsetof(FEndAISensorVision, VisibleAngleAtIdle) == 0x000010, "Member 'FEndAISensorVision::VisibleAngleAtIdle' has a wrong offset!");
static_assert(offsetof(FEndAISensorVision, VisibleDistanceAtIdle) == 0x000014, "Member 'FEndAISensorVision::VisibleDistanceAtIdle' has a wrong offset!");
static_assert(offsetof(FEndAISensorVision, VisibleAngleAtMoving) == 0x000018, "Member 'FEndAISensorVision::VisibleAngleAtMoving' has a wrong offset!");
static_assert(offsetof(FEndAISensorVision, VisibleDistanceAtMoving) == 0x00001C, "Member 'FEndAISensorVision::VisibleDistanceAtMoving' has a wrong offset!");

// ScriptStruct EndGame.EndAdditiveDamageImpact
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x04) FEndAdditiveDamageImpact final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndAdditiveDamageImpact) == 0x000004, "Wrong alignment on FEndAdditiveDamageImpact");
static_assert(sizeof(FEndAdditiveDamageImpact) == 0x000020, "Wrong size on FEndAdditiveDamageImpact");

// ScriptStruct EndGame.EndDataTableCutSceneLoadCharaSpecList
// 0x0010 (0x0018 - 0x0008)
struct FEndDataTableCutSceneLoadCharaSpecList final : public FEndDataTableRowBase
{
public:
	TArray<class FName>                           LoadCharaSpecList_Array;                           // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableCutSceneLoadCharaSpecList) == 0x000008, "Wrong alignment on FEndDataTableCutSceneLoadCharaSpecList");
static_assert(sizeof(FEndDataTableCutSceneLoadCharaSpecList) == 0x000018, "Wrong size on FEndDataTableCutSceneLoadCharaSpecList");
static_assert(offsetof(FEndDataTableCutSceneLoadCharaSpecList, LoadCharaSpecList_Array) == 0x000008, "Member 'FEndDataTableCutSceneLoadCharaSpecList::LoadCharaSpecList_Array' has a wrong offset!");

// ScriptStruct EndGame.EndAdjustOrientationBoneSetting
// 0x0020 (0x0020 - 0x0000)
struct FEndAdjustOrientationBoneSetting final
{
public:
	class FName                                   BoneName;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               AdjustRotation;                                    // 0x0008(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector2D                              AdjustLimit;                                       // 0x0014(0x0008)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AdjustSpeed;                                       // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndAdjustOrientationBoneSetting) == 0x000004, "Wrong alignment on FEndAdjustOrientationBoneSetting");
static_assert(sizeof(FEndAdjustOrientationBoneSetting) == 0x000020, "Wrong size on FEndAdjustOrientationBoneSetting");
static_assert(offsetof(FEndAdjustOrientationBoneSetting, BoneName) == 0x000000, "Member 'FEndAdjustOrientationBoneSetting::BoneName' has a wrong offset!");
static_assert(offsetof(FEndAdjustOrientationBoneSetting, AdjustRotation) == 0x000008, "Member 'FEndAdjustOrientationBoneSetting::AdjustRotation' has a wrong offset!");
static_assert(offsetof(FEndAdjustOrientationBoneSetting, AdjustLimit) == 0x000014, "Member 'FEndAdjustOrientationBoneSetting::AdjustLimit' has a wrong offset!");
static_assert(offsetof(FEndAdjustOrientationBoneSetting, AdjustSpeed) == 0x00001C, "Member 'FEndAdjustOrientationBoneSetting::AdjustSpeed' has a wrong offset!");

// ScriptStruct EndGame.EndAdjustOrientationWalkSetting
// 0x0010 (0x0010 - 0x0000)
struct FEndAdjustOrientationWalkSetting final
{
public:
	TArray<struct FEndAdjustOrientationBoneSetting> BoneSettings;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndAdjustOrientationWalkSetting) == 0x000008, "Wrong alignment on FEndAdjustOrientationWalkSetting");
static_assert(sizeof(FEndAdjustOrientationWalkSetting) == 0x000010, "Wrong size on FEndAdjustOrientationWalkSetting");
static_assert(offsetof(FEndAdjustOrientationWalkSetting, BoneSettings) == 0x000000, "Member 'FEndAdjustOrientationWalkSetting::BoneSettings' has a wrong offset!");

// ScriptStruct EndGame.EndAdjustOrientationBehaviorSetting
// 0x0030 (0x0030 - 0x0000)
struct FEndAdjustOrientationBehaviorSetting final
{
public:
	struct FEndAdjustOrientationWalkSetting       Walk;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FEndAdjustOrientationWalkSetting       Run;                                               // 0x0010(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FEndAdjustOrientationWalkSetting       Dash;                                              // 0x0020(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndAdjustOrientationBehaviorSetting) == 0x000008, "Wrong alignment on FEndAdjustOrientationBehaviorSetting");
static_assert(sizeof(FEndAdjustOrientationBehaviorSetting) == 0x000030, "Wrong size on FEndAdjustOrientationBehaviorSetting");
static_assert(offsetof(FEndAdjustOrientationBehaviorSetting, Walk) == 0x000000, "Member 'FEndAdjustOrientationBehaviorSetting::Walk' has a wrong offset!");
static_assert(offsetof(FEndAdjustOrientationBehaviorSetting, Run) == 0x000010, "Member 'FEndAdjustOrientationBehaviorSetting::Run' has a wrong offset!");
static_assert(offsetof(FEndAdjustOrientationBehaviorSetting, Dash) == 0x000020, "Member 'FEndAdjustOrientationBehaviorSetting::Dash' has a wrong offset!");

// ScriptStruct EndGame.EndAdjustOrientationSetting
// 0x0090 (0x0090 - 0x0000)
struct FEndAdjustOrientationSetting final
{
public:
	struct FEndAdjustOrientationBehaviorSetting   Neutral;                                           // 0x0000(0x0030)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FEndAdjustOrientationBehaviorSetting   Battle;                                            // 0x0030(0x0030)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FEndAdjustOrientationBehaviorSetting   Caution;                                           // 0x0060(0x0030)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndAdjustOrientationSetting) == 0x000008, "Wrong alignment on FEndAdjustOrientationSetting");
static_assert(sizeof(FEndAdjustOrientationSetting) == 0x000090, "Wrong size on FEndAdjustOrientationSetting");
static_assert(offsetof(FEndAdjustOrientationSetting, Neutral) == 0x000000, "Member 'FEndAdjustOrientationSetting::Neutral' has a wrong offset!");
static_assert(offsetof(FEndAdjustOrientationSetting, Battle) == 0x000030, "Member 'FEndAdjustOrientationSetting::Battle' has a wrong offset!");
static_assert(offsetof(FEndAdjustOrientationSetting, Caution) == 0x000060, "Member 'FEndAdjustOrientationSetting::Caution' has a wrong offset!");

// ScriptStruct EndGame.EndIgnoreSkillCameraRelatedActorData
// 0x0010 (0x0010 - 0x0000)
struct FEndIgnoreSkillCameraRelatedActorData final
{
public:
	class FName                                   LevelID;                                           // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActorName;                                         // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndIgnoreSkillCameraRelatedActorData) == 0x000004, "Wrong alignment on FEndIgnoreSkillCameraRelatedActorData");
static_assert(sizeof(FEndIgnoreSkillCameraRelatedActorData) == 0x000010, "Wrong size on FEndIgnoreSkillCameraRelatedActorData");
static_assert(offsetof(FEndIgnoreSkillCameraRelatedActorData, LevelID) == 0x000000, "Member 'FEndIgnoreSkillCameraRelatedActorData::LevelID' has a wrong offset!");
static_assert(offsetof(FEndIgnoreSkillCameraRelatedActorData, ActorName) == 0x000008, "Member 'FEndIgnoreSkillCameraRelatedActorData::ActorName' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableAutoCameraLightInfo
// 0x0070 (0x0078 - 0x0008)
struct FEndDataTableAutoCameraLightInfo final : public FEndDataTableRowBase
{
public:
	float                                         OffsetX;                                           // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OffsetY;                                           // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OffsetZ;                                           // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Pitch;                                             // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Yaw;                                               // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Roll;                                              // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Distance;                                          // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Intensity;                                         // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LightR;                                            // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LightG;                                            // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LightB;                                            // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LightA;                                            // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InnerConeAngle;                                    // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OuterConeAngle;                                    // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AttenuationRadius;                                 // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SourceRadius;                                      // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SoftSourceRadius;                                  // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SourceLength;                                      // 0x004C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Temperature;                                       // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ColorTemperatureWhite;                             // 0x0054(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UseTemperature;                                    // 0x0058(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AffectsWorld;                                      // 0x005C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CastShadow;                                        // 0x0060(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IndirectLightingIntensity;                         // 0x0064(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumetricScatteringIntensity;                     // 0x0068(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShadowResolutionScale;                             // 0x006C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ContactShadowLength;                               // 0x0070(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShadowBias;                                        // 0x0074(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableAutoCameraLightInfo) == 0x000008, "Wrong alignment on FEndDataTableAutoCameraLightInfo");
static_assert(sizeof(FEndDataTableAutoCameraLightInfo) == 0x000078, "Wrong size on FEndDataTableAutoCameraLightInfo");
static_assert(offsetof(FEndDataTableAutoCameraLightInfo, OffsetX) == 0x000008, "Member 'FEndDataTableAutoCameraLightInfo::OffsetX' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraLightInfo, OffsetY) == 0x00000C, "Member 'FEndDataTableAutoCameraLightInfo::OffsetY' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraLightInfo, OffsetZ) == 0x000010, "Member 'FEndDataTableAutoCameraLightInfo::OffsetZ' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraLightInfo, Pitch) == 0x000014, "Member 'FEndDataTableAutoCameraLightInfo::Pitch' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraLightInfo, Yaw) == 0x000018, "Member 'FEndDataTableAutoCameraLightInfo::Yaw' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraLightInfo, Roll) == 0x00001C, "Member 'FEndDataTableAutoCameraLightInfo::Roll' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraLightInfo, Distance) == 0x000020, "Member 'FEndDataTableAutoCameraLightInfo::Distance' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraLightInfo, Intensity) == 0x000024, "Member 'FEndDataTableAutoCameraLightInfo::Intensity' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraLightInfo, LightR) == 0x000028, "Member 'FEndDataTableAutoCameraLightInfo::LightR' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraLightInfo, LightG) == 0x00002C, "Member 'FEndDataTableAutoCameraLightInfo::LightG' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraLightInfo, LightB) == 0x000030, "Member 'FEndDataTableAutoCameraLightInfo::LightB' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraLightInfo, LightA) == 0x000034, "Member 'FEndDataTableAutoCameraLightInfo::LightA' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraLightInfo, InnerConeAngle) == 0x000038, "Member 'FEndDataTableAutoCameraLightInfo::InnerConeAngle' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraLightInfo, OuterConeAngle) == 0x00003C, "Member 'FEndDataTableAutoCameraLightInfo::OuterConeAngle' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraLightInfo, AttenuationRadius) == 0x000040, "Member 'FEndDataTableAutoCameraLightInfo::AttenuationRadius' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraLightInfo, SourceRadius) == 0x000044, "Member 'FEndDataTableAutoCameraLightInfo::SourceRadius' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraLightInfo, SoftSourceRadius) == 0x000048, "Member 'FEndDataTableAutoCameraLightInfo::SoftSourceRadius' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraLightInfo, SourceLength) == 0x00004C, "Member 'FEndDataTableAutoCameraLightInfo::SourceLength' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraLightInfo, Temperature) == 0x000050, "Member 'FEndDataTableAutoCameraLightInfo::Temperature' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraLightInfo, ColorTemperatureWhite) == 0x000054, "Member 'FEndDataTableAutoCameraLightInfo::ColorTemperatureWhite' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraLightInfo, UseTemperature) == 0x000058, "Member 'FEndDataTableAutoCameraLightInfo::UseTemperature' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraLightInfo, AffectsWorld) == 0x00005C, "Member 'FEndDataTableAutoCameraLightInfo::AffectsWorld' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraLightInfo, CastShadow) == 0x000060, "Member 'FEndDataTableAutoCameraLightInfo::CastShadow' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraLightInfo, IndirectLightingIntensity) == 0x000064, "Member 'FEndDataTableAutoCameraLightInfo::IndirectLightingIntensity' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraLightInfo, VolumetricScatteringIntensity) == 0x000068, "Member 'FEndDataTableAutoCameraLightInfo::VolumetricScatteringIntensity' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraLightInfo, ShadowResolutionScale) == 0x00006C, "Member 'FEndDataTableAutoCameraLightInfo::ShadowResolutionScale' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraLightInfo, ContactShadowLength) == 0x000070, "Member 'FEndDataTableAutoCameraLightInfo::ContactShadowLength' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraLightInfo, ShadowBias) == 0x000074, "Member 'FEndDataTableAutoCameraLightInfo::ShadowBias' has a wrong offset!");

// ScriptStruct EndGame.EndMenuPolygonVertex
// 0x0014 (0x0014 - 0x0000)
struct FEndMenuPolygonVertex final
{
public:
	struct FVector2D                              Position;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              TexCoords;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 Color;                                             // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndMenuPolygonVertex) == 0x000004, "Wrong alignment on FEndMenuPolygonVertex");
static_assert(sizeof(FEndMenuPolygonVertex) == 0x000014, "Wrong size on FEndMenuPolygonVertex");
static_assert(offsetof(FEndMenuPolygonVertex, Position) == 0x000000, "Member 'FEndMenuPolygonVertex::Position' has a wrong offset!");
static_assert(offsetof(FEndMenuPolygonVertex, TexCoords) == 0x000008, "Member 'FEndMenuPolygonVertex::TexCoords' has a wrong offset!");
static_assert(offsetof(FEndMenuPolygonVertex, Color) == 0x000010, "Member 'FEndMenuPolygonVertex::Color' has a wrong offset!");

// ScriptStruct EndGame.EndBikeAIHelicopterAbilitySet
// 0x0020 (0x0020 - 0x0000)
struct FEndBikeAIHelicopterAbilitySet final
{
public:
	class FName                                   AbilitySet_FR;                                     // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AbilitySet_FL;                                     // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AbilitySet_RR;                                     // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AbilitySet_RL;                                     // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndBikeAIHelicopterAbilitySet) == 0x000004, "Wrong alignment on FEndBikeAIHelicopterAbilitySet");
static_assert(sizeof(FEndBikeAIHelicopterAbilitySet) == 0x000020, "Wrong size on FEndBikeAIHelicopterAbilitySet");
static_assert(offsetof(FEndBikeAIHelicopterAbilitySet, AbilitySet_FR) == 0x000000, "Member 'FEndBikeAIHelicopterAbilitySet::AbilitySet_FR' has a wrong offset!");
static_assert(offsetof(FEndBikeAIHelicopterAbilitySet, AbilitySet_FL) == 0x000008, "Member 'FEndBikeAIHelicopterAbilitySet::AbilitySet_FL' has a wrong offset!");
static_assert(offsetof(FEndBikeAIHelicopterAbilitySet, AbilitySet_RR) == 0x000010, "Member 'FEndBikeAIHelicopterAbilitySet::AbilitySet_RR' has a wrong offset!");
static_assert(offsetof(FEndBikeAIHelicopterAbilitySet, AbilitySet_RL) == 0x000018, "Member 'FEndBikeAIHelicopterAbilitySet::AbilitySet_RL' has a wrong offset!");

// ScriptStruct EndGame.EndAimRuntimeSetting
// 0x00E8 (0x00E8 - 0x0000)
struct alignas(0x08) FEndAimRuntimeSetting final
{
public:
	uint8                                         Pad_0[0xE8];                                       // 0x0000(0x00E8)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndAimRuntimeSetting) == 0x000008, "Wrong alignment on FEndAimRuntimeSetting");
static_assert(sizeof(FEndAimRuntimeSetting) == 0x0000E8, "Wrong size on FEndAimRuntimeSetting");

// ScriptStruct EndGame.EndDataTableSubtitleChange
// 0x0048 (0x0050 - 0x0008)
struct FEndDataTableSubtitleChange final : public FEndDataTableRowBase
{
public:
	int32                                         LowerBound;                                        // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UpperBound;                                        // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CinemaStatusFromCinema;                            // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ActFromCinema;                                     // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LogFromCinema;                                     // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VoiceFromCinema;                                   // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VolumeFromCinema;                                  // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CinemaStatusFromCaption;                           // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ActFromCaption;                                    // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LogFromCaption;                                    // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VoiceFromCaption;                                  // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VolumeFromCaption;                                 // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CinemaStatusFromLog;                               // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ActFromLog;                                        // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LogFromLog;                                        // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VoiceFromLog;                                      // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VolumeFromLog;                                     // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableSubtitleChange) == 0x000008, "Wrong alignment on FEndDataTableSubtitleChange");
static_assert(sizeof(FEndDataTableSubtitleChange) == 0x000050, "Wrong size on FEndDataTableSubtitleChange");
static_assert(offsetof(FEndDataTableSubtitleChange, LowerBound) == 0x000008, "Member 'FEndDataTableSubtitleChange::LowerBound' has a wrong offset!");
static_assert(offsetof(FEndDataTableSubtitleChange, UpperBound) == 0x00000C, "Member 'FEndDataTableSubtitleChange::UpperBound' has a wrong offset!");
static_assert(offsetof(FEndDataTableSubtitleChange, CinemaStatusFromCinema) == 0x000010, "Member 'FEndDataTableSubtitleChange::CinemaStatusFromCinema' has a wrong offset!");
static_assert(offsetof(FEndDataTableSubtitleChange, ActFromCinema) == 0x000014, "Member 'FEndDataTableSubtitleChange::ActFromCinema' has a wrong offset!");
static_assert(offsetof(FEndDataTableSubtitleChange, LogFromCinema) == 0x000018, "Member 'FEndDataTableSubtitleChange::LogFromCinema' has a wrong offset!");
static_assert(offsetof(FEndDataTableSubtitleChange, VoiceFromCinema) == 0x00001C, "Member 'FEndDataTableSubtitleChange::VoiceFromCinema' has a wrong offset!");
static_assert(offsetof(FEndDataTableSubtitleChange, VolumeFromCinema) == 0x000020, "Member 'FEndDataTableSubtitleChange::VolumeFromCinema' has a wrong offset!");
static_assert(offsetof(FEndDataTableSubtitleChange, CinemaStatusFromCaption) == 0x000024, "Member 'FEndDataTableSubtitleChange::CinemaStatusFromCaption' has a wrong offset!");
static_assert(offsetof(FEndDataTableSubtitleChange, ActFromCaption) == 0x000028, "Member 'FEndDataTableSubtitleChange::ActFromCaption' has a wrong offset!");
static_assert(offsetof(FEndDataTableSubtitleChange, LogFromCaption) == 0x00002C, "Member 'FEndDataTableSubtitleChange::LogFromCaption' has a wrong offset!");
static_assert(offsetof(FEndDataTableSubtitleChange, VoiceFromCaption) == 0x000030, "Member 'FEndDataTableSubtitleChange::VoiceFromCaption' has a wrong offset!");
static_assert(offsetof(FEndDataTableSubtitleChange, VolumeFromCaption) == 0x000034, "Member 'FEndDataTableSubtitleChange::VolumeFromCaption' has a wrong offset!");
static_assert(offsetof(FEndDataTableSubtitleChange, CinemaStatusFromLog) == 0x000038, "Member 'FEndDataTableSubtitleChange::CinemaStatusFromLog' has a wrong offset!");
static_assert(offsetof(FEndDataTableSubtitleChange, ActFromLog) == 0x00003C, "Member 'FEndDataTableSubtitleChange::ActFromLog' has a wrong offset!");
static_assert(offsetof(FEndDataTableSubtitleChange, LogFromLog) == 0x000040, "Member 'FEndDataTableSubtitleChange::LogFromLog' has a wrong offset!");
static_assert(offsetof(FEndDataTableSubtitleChange, VoiceFromLog) == 0x000044, "Member 'FEndDataTableSubtitleChange::VoiceFromLog' has a wrong offset!");
static_assert(offsetof(FEndDataTableSubtitleChange, VolumeFromLog) == 0x000048, "Member 'FEndDataTableSubtitleChange::VolumeFromLog' has a wrong offset!");

// ScriptStruct EndGame.EndFootEffectorRuntimeSetting
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x04) FEndFootEffectorRuntimeSetting final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndFootEffectorRuntimeSetting) == 0x000004, "Wrong alignment on FEndFootEffectorRuntimeSetting");
static_assert(sizeof(FEndFootEffectorRuntimeSetting) == 0x000010, "Wrong size on FEndFootEffectorRuntimeSetting");

// ScriptStruct EndGame.EndHandEffectorRuntimeSetting
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FEndHandEffectorRuntimeSetting final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndHandEffectorRuntimeSetting) == 0x000008, "Wrong alignment on FEndHandEffectorRuntimeSetting");
static_assert(sizeof(FEndHandEffectorRuntimeSetting) == 0x000018, "Wrong size on FEndHandEffectorRuntimeSetting");

// ScriptStruct EndGame.EndHandConstraintSetting
// 0x0060 (0x0060 - 0x0000)
struct alignas(0x10) FEndHandConstraintSetting final
{
public:
	uint8                                         Pad_0[0x60];                                       // 0x0000(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndHandConstraintSetting) == 0x000010, "Wrong alignment on FEndHandConstraintSetting");
static_assert(sizeof(FEndHandConstraintSetting) == 0x000060, "Wrong size on FEndHandConstraintSetting");

// ScriptStruct EndGame.EndDataTableLocationResident
// 0x0190 (0x0198 - 0x0008)
struct FEndDataTableLocationResident final : public FEndDataTableRowBase
{
public:
	class FString                                 Detail;                                            // 0x0008(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UniqueIndex;                                       // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         SaveLocationSlot;                                  // 0x001C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ChapterID;                                         // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ExistGroundCreateActor;                            // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UnuseRelease;                                      // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HiddenFieldTest;                                   // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IsPlusLocation;                                    // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DebugReserveCharaPopMemory;                        // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CharaPopLODLightEnableDrawDist;                    // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CharaPopLODLightInCameraTickDist;                  // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CharaPopLODLightOutCameraTickDist;                 // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CharaPopLODLightShouldTickDist;                    // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CharaPopLODMiddleEnableDrawDist;                   // 0x004C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CharaPopLODMiddleInCameraTickDist;                 // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CharaPopLODMiddleOutCameraTickDist;                // 0x0054(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CharaPopLODMiddleShouldTickDist;                   // 0x0058(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CharaPopLODLightEnableDrawDistNEO;                 // 0x005C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CharaPopLODLightInCameraTickDistNEO;               // 0x0060(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CharaPopLODLightOutCameraTickDistNEO;              // 0x0064(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CharaPopLODLightShouldTickDistNEO;                 // 0x0068(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CharaPopLODMiddleEnableDrawDistNEO;                // 0x006C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CharaPopLODMiddleInCameraTickDistNEO;              // 0x0070(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CharaPopLODMiddleOutCameraTickDistNEO;             // 0x0074(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CharaPopLODMiddleShouldTickDistNEO;                // 0x0078(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CharaPopMemOverrideEnable;                         // 0x007C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CharaPopMemOverrideAssetName0;                     // 0x0080(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CharaPopMemOverrideAssetName1;                     // 0x0088(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CharaPopMemOverrideAssetName2;                     // 0x0090(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CharaPopMemOverrideAssetName3;                     // 0x0098(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CharaPopMemOverrideValue;                          // 0x00A0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TruthLocationID;                                   // 0x00A4(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TruthLocationLayerIndex;                           // 0x00AC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LocationName;                                      // 0x00B0(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         FinishTurorial;                                    // 0x00C0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         HideLocationGUI;                                   // 0x00C1(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         TreasureSpecIndex;                                 // 0x00C2(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C3[0x5];                                       // 0x00C3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 PlayerInfo_Array;                                  // 0x00C8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           EntryObject_Array;                                 // 0x00D8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           LocationInStateTrigger_Array;                      // 0x00E8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           ResidentPlannerLevelSet_Array;                     // 0x00F8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           IgnoreCollisionAttributeStoryFlagName_Array;       // 0x0108(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           IgnoreCollisionAttributeActorName_Array;           // 0x0118(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           IgnoreFootAttributeActorName_Array;                // 0x0128(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         SlotDetailList_Array;                              // 0x0138(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           SlotPresetList_Array;                              // 0x0148(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           DebugBeginingStoryFlag_Array;                      // 0x0158(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           DebugStoryFlag_Array;                              // 0x0168(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           DebugDisabeStoryFlag_Array;                        // 0x0178(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 LocationJumpTransform_Array;                       // 0x0188(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableLocationResident) == 0x000008, "Wrong alignment on FEndDataTableLocationResident");
static_assert(sizeof(FEndDataTableLocationResident) == 0x000198, "Wrong size on FEndDataTableLocationResident");
static_assert(offsetof(FEndDataTableLocationResident, Detail) == 0x000008, "Member 'FEndDataTableLocationResident::Detail' has a wrong offset!");
static_assert(offsetof(FEndDataTableLocationResident, UniqueIndex) == 0x000018, "Member 'FEndDataTableLocationResident::UniqueIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTableLocationResident, SaveLocationSlot) == 0x00001C, "Member 'FEndDataTableLocationResident::SaveLocationSlot' has a wrong offset!");
static_assert(offsetof(FEndDataTableLocationResident, ChapterID) == 0x000020, "Member 'FEndDataTableLocationResident::ChapterID' has a wrong offset!");
static_assert(offsetof(FEndDataTableLocationResident, ExistGroundCreateActor) == 0x000028, "Member 'FEndDataTableLocationResident::ExistGroundCreateActor' has a wrong offset!");
static_assert(offsetof(FEndDataTableLocationResident, UnuseRelease) == 0x00002C, "Member 'FEndDataTableLocationResident::UnuseRelease' has a wrong offset!");
static_assert(offsetof(FEndDataTableLocationResident, HiddenFieldTest) == 0x000030, "Member 'FEndDataTableLocationResident::HiddenFieldTest' has a wrong offset!");
static_assert(offsetof(FEndDataTableLocationResident, IsPlusLocation) == 0x000034, "Member 'FEndDataTableLocationResident::IsPlusLocation' has a wrong offset!");
static_assert(offsetof(FEndDataTableLocationResident, DebugReserveCharaPopMemory) == 0x000038, "Member 'FEndDataTableLocationResident::DebugReserveCharaPopMemory' has a wrong offset!");
static_assert(offsetof(FEndDataTableLocationResident, CharaPopLODLightEnableDrawDist) == 0x00003C, "Member 'FEndDataTableLocationResident::CharaPopLODLightEnableDrawDist' has a wrong offset!");
static_assert(offsetof(FEndDataTableLocationResident, CharaPopLODLightInCameraTickDist) == 0x000040, "Member 'FEndDataTableLocationResident::CharaPopLODLightInCameraTickDist' has a wrong offset!");
static_assert(offsetof(FEndDataTableLocationResident, CharaPopLODLightOutCameraTickDist) == 0x000044, "Member 'FEndDataTableLocationResident::CharaPopLODLightOutCameraTickDist' has a wrong offset!");
static_assert(offsetof(FEndDataTableLocationResident, CharaPopLODLightShouldTickDist) == 0x000048, "Member 'FEndDataTableLocationResident::CharaPopLODLightShouldTickDist' has a wrong offset!");
static_assert(offsetof(FEndDataTableLocationResident, CharaPopLODMiddleEnableDrawDist) == 0x00004C, "Member 'FEndDataTableLocationResident::CharaPopLODMiddleEnableDrawDist' has a wrong offset!");
static_assert(offsetof(FEndDataTableLocationResident, CharaPopLODMiddleInCameraTickDist) == 0x000050, "Member 'FEndDataTableLocationResident::CharaPopLODMiddleInCameraTickDist' has a wrong offset!");
static_assert(offsetof(FEndDataTableLocationResident, CharaPopLODMiddleOutCameraTickDist) == 0x000054, "Member 'FEndDataTableLocationResident::CharaPopLODMiddleOutCameraTickDist' has a wrong offset!");
static_assert(offsetof(FEndDataTableLocationResident, CharaPopLODMiddleShouldTickDist) == 0x000058, "Member 'FEndDataTableLocationResident::CharaPopLODMiddleShouldTickDist' has a wrong offset!");
static_assert(offsetof(FEndDataTableLocationResident, CharaPopLODLightEnableDrawDistNEO) == 0x00005C, "Member 'FEndDataTableLocationResident::CharaPopLODLightEnableDrawDistNEO' has a wrong offset!");
static_assert(offsetof(FEndDataTableLocationResident, CharaPopLODLightInCameraTickDistNEO) == 0x000060, "Member 'FEndDataTableLocationResident::CharaPopLODLightInCameraTickDistNEO' has a wrong offset!");
static_assert(offsetof(FEndDataTableLocationResident, CharaPopLODLightOutCameraTickDistNEO) == 0x000064, "Member 'FEndDataTableLocationResident::CharaPopLODLightOutCameraTickDistNEO' has a wrong offset!");
static_assert(offsetof(FEndDataTableLocationResident, CharaPopLODLightShouldTickDistNEO) == 0x000068, "Member 'FEndDataTableLocationResident::CharaPopLODLightShouldTickDistNEO' has a wrong offset!");
static_assert(offsetof(FEndDataTableLocationResident, CharaPopLODMiddleEnableDrawDistNEO) == 0x00006C, "Member 'FEndDataTableLocationResident::CharaPopLODMiddleEnableDrawDistNEO' has a wrong offset!");
static_assert(offsetof(FEndDataTableLocationResident, CharaPopLODMiddleInCameraTickDistNEO) == 0x000070, "Member 'FEndDataTableLocationResident::CharaPopLODMiddleInCameraTickDistNEO' has a wrong offset!");
static_assert(offsetof(FEndDataTableLocationResident, CharaPopLODMiddleOutCameraTickDistNEO) == 0x000074, "Member 'FEndDataTableLocationResident::CharaPopLODMiddleOutCameraTickDistNEO' has a wrong offset!");
static_assert(offsetof(FEndDataTableLocationResident, CharaPopLODMiddleShouldTickDistNEO) == 0x000078, "Member 'FEndDataTableLocationResident::CharaPopLODMiddleShouldTickDistNEO' has a wrong offset!");
static_assert(offsetof(FEndDataTableLocationResident, CharaPopMemOverrideEnable) == 0x00007C, "Member 'FEndDataTableLocationResident::CharaPopMemOverrideEnable' has a wrong offset!");
static_assert(offsetof(FEndDataTableLocationResident, CharaPopMemOverrideAssetName0) == 0x000080, "Member 'FEndDataTableLocationResident::CharaPopMemOverrideAssetName0' has a wrong offset!");
static_assert(offsetof(FEndDataTableLocationResident, CharaPopMemOverrideAssetName1) == 0x000088, "Member 'FEndDataTableLocationResident::CharaPopMemOverrideAssetName1' has a wrong offset!");
static_assert(offsetof(FEndDataTableLocationResident, CharaPopMemOverrideAssetName2) == 0x000090, "Member 'FEndDataTableLocationResident::CharaPopMemOverrideAssetName2' has a wrong offset!");
static_assert(offsetof(FEndDataTableLocationResident, CharaPopMemOverrideAssetName3) == 0x000098, "Member 'FEndDataTableLocationResident::CharaPopMemOverrideAssetName3' has a wrong offset!");
static_assert(offsetof(FEndDataTableLocationResident, CharaPopMemOverrideValue) == 0x0000A0, "Member 'FEndDataTableLocationResident::CharaPopMemOverrideValue' has a wrong offset!");
static_assert(offsetof(FEndDataTableLocationResident, TruthLocationID) == 0x0000A4, "Member 'FEndDataTableLocationResident::TruthLocationID' has a wrong offset!");
static_assert(offsetof(FEndDataTableLocationResident, TruthLocationLayerIndex) == 0x0000AC, "Member 'FEndDataTableLocationResident::TruthLocationLayerIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTableLocationResident, LocationName) == 0x0000B0, "Member 'FEndDataTableLocationResident::LocationName' has a wrong offset!");
static_assert(offsetof(FEndDataTableLocationResident, FinishTurorial) == 0x0000C0, "Member 'FEndDataTableLocationResident::FinishTurorial' has a wrong offset!");
static_assert(offsetof(FEndDataTableLocationResident, HideLocationGUI) == 0x0000C1, "Member 'FEndDataTableLocationResident::HideLocationGUI' has a wrong offset!");
static_assert(offsetof(FEndDataTableLocationResident, TreasureSpecIndex) == 0x0000C2, "Member 'FEndDataTableLocationResident::TreasureSpecIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTableLocationResident, PlayerInfo_Array) == 0x0000C8, "Member 'FEndDataTableLocationResident::PlayerInfo_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableLocationResident, EntryObject_Array) == 0x0000D8, "Member 'FEndDataTableLocationResident::EntryObject_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableLocationResident, LocationInStateTrigger_Array) == 0x0000E8, "Member 'FEndDataTableLocationResident::LocationInStateTrigger_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableLocationResident, ResidentPlannerLevelSet_Array) == 0x0000F8, "Member 'FEndDataTableLocationResident::ResidentPlannerLevelSet_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableLocationResident, IgnoreCollisionAttributeStoryFlagName_Array) == 0x000108, "Member 'FEndDataTableLocationResident::IgnoreCollisionAttributeStoryFlagName_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableLocationResident, IgnoreCollisionAttributeActorName_Array) == 0x000118, "Member 'FEndDataTableLocationResident::IgnoreCollisionAttributeActorName_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableLocationResident, IgnoreFootAttributeActorName_Array) == 0x000128, "Member 'FEndDataTableLocationResident::IgnoreFootAttributeActorName_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableLocationResident, SlotDetailList_Array) == 0x000138, "Member 'FEndDataTableLocationResident::SlotDetailList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableLocationResident, SlotPresetList_Array) == 0x000148, "Member 'FEndDataTableLocationResident::SlotPresetList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableLocationResident, DebugBeginingStoryFlag_Array) == 0x000158, "Member 'FEndDataTableLocationResident::DebugBeginingStoryFlag_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableLocationResident, DebugStoryFlag_Array) == 0x000168, "Member 'FEndDataTableLocationResident::DebugStoryFlag_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableLocationResident, DebugDisabeStoryFlag_Array) == 0x000178, "Member 'FEndDataTableLocationResident::DebugDisabeStoryFlag_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableLocationResident, LocationJumpTransform_Array) == 0x000188, "Member 'FEndDataTableLocationResident::LocationJumpTransform_Array' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableBikeSequenceAction
// 0x0048 (0x0050 - 0x0008)
struct FEndDataTableBikeSequenceAction final : public FEndDataTableRowBase
{
public:
	uint8                                         RetryPoint;                                        // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         DisableGauge;                                      // 0x0009(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Type;                                              // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   JumpParamID;                                       // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TalkConditionID;                                   // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         ParamStringList_Array;                             // 0x0020(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 ParamIntList_Array;                                // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 ParamFloatList_Array;                              // 0x0040(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableBikeSequenceAction) == 0x000008, "Wrong alignment on FEndDataTableBikeSequenceAction");
static_assert(sizeof(FEndDataTableBikeSequenceAction) == 0x000050, "Wrong size on FEndDataTableBikeSequenceAction");
static_assert(offsetof(FEndDataTableBikeSequenceAction, RetryPoint) == 0x000008, "Member 'FEndDataTableBikeSequenceAction::RetryPoint' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeSequenceAction, DisableGauge) == 0x000009, "Member 'FEndDataTableBikeSequenceAction::DisableGauge' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeSequenceAction, Type) == 0x00000C, "Member 'FEndDataTableBikeSequenceAction::Type' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeSequenceAction, JumpParamID) == 0x000010, "Member 'FEndDataTableBikeSequenceAction::JumpParamID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeSequenceAction, TalkConditionID) == 0x000018, "Member 'FEndDataTableBikeSequenceAction::TalkConditionID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeSequenceAction, ParamStringList_Array) == 0x000020, "Member 'FEndDataTableBikeSequenceAction::ParamStringList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeSequenceAction, ParamIntList_Array) == 0x000030, "Member 'FEndDataTableBikeSequenceAction::ParamIntList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeSequenceAction, ParamFloatList_Array) == 0x000040, "Member 'FEndDataTableBikeSequenceAction::ParamFloatList_Array' has a wrong offset!");

// ScriptStruct EndGame.EndLocomotionAnimSetting
// 0x0010 (0x0010 - 0x0000)
struct FEndLocomotionAnimSetting final
{
public:
	TArray<struct FEndLocomotionAnim>             Animations;                                        // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndLocomotionAnimSetting) == 0x000008, "Wrong alignment on FEndLocomotionAnimSetting");
static_assert(sizeof(FEndLocomotionAnimSetting) == 0x000010, "Wrong size on FEndLocomotionAnimSetting");
static_assert(offsetof(FEndLocomotionAnimSetting, Animations) == 0x000000, "Member 'FEndLocomotionAnimSetting::Animations' has a wrong offset!");

// ScriptStruct EndGame.EndLocomotionSetting
// 0x00C8 (0x00C8 - 0x0000)
struct FEndLocomotionSetting final
{
public:
	float                                         BlendTime;                                         // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EEndLocomotionState, float>              PreStateOverrideBlendTimes;                        // 0x0008(0x0050)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bOverrideUpperBodyBlend;                           // 0x0058(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         UpperBodyBlendTime;                                // 0x005C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<EEndLocomotionState, float>              PreStateOverrideUpperBodyBlendTimes;               // 0x0060(0x0050)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         RotationRate;                                      // 0x00B0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseSmoothRotationRate;                            // 0x00B4(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B5[0x3];                                       // 0x00B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SmoothRotationRateMax;                             // 0x00B8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SmoothRotationRateInputAngleMax;                   // 0x00BC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InputBlockTime;                                    // 0x00C0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C4[0x4];                                       // 0x00C4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndLocomotionSetting) == 0x000008, "Wrong alignment on FEndLocomotionSetting");
static_assert(sizeof(FEndLocomotionSetting) == 0x0000C8, "Wrong size on FEndLocomotionSetting");
static_assert(offsetof(FEndLocomotionSetting, BlendTime) == 0x000000, "Member 'FEndLocomotionSetting::BlendTime' has a wrong offset!");
static_assert(offsetof(FEndLocomotionSetting, PreStateOverrideBlendTimes) == 0x000008, "Member 'FEndLocomotionSetting::PreStateOverrideBlendTimes' has a wrong offset!");
static_assert(offsetof(FEndLocomotionSetting, bOverrideUpperBodyBlend) == 0x000058, "Member 'FEndLocomotionSetting::bOverrideUpperBodyBlend' has a wrong offset!");
static_assert(offsetof(FEndLocomotionSetting, UpperBodyBlendTime) == 0x00005C, "Member 'FEndLocomotionSetting::UpperBodyBlendTime' has a wrong offset!");
static_assert(offsetof(FEndLocomotionSetting, PreStateOverrideUpperBodyBlendTimes) == 0x000060, "Member 'FEndLocomotionSetting::PreStateOverrideUpperBodyBlendTimes' has a wrong offset!");
static_assert(offsetof(FEndLocomotionSetting, RotationRate) == 0x0000B0, "Member 'FEndLocomotionSetting::RotationRate' has a wrong offset!");
static_assert(offsetof(FEndLocomotionSetting, bUseSmoothRotationRate) == 0x0000B4, "Member 'FEndLocomotionSetting::bUseSmoothRotationRate' has a wrong offset!");
static_assert(offsetof(FEndLocomotionSetting, SmoothRotationRateMax) == 0x0000B8, "Member 'FEndLocomotionSetting::SmoothRotationRateMax' has a wrong offset!");
static_assert(offsetof(FEndLocomotionSetting, SmoothRotationRateInputAngleMax) == 0x0000BC, "Member 'FEndLocomotionSetting::SmoothRotationRateInputAngleMax' has a wrong offset!");
static_assert(offsetof(FEndLocomotionSetting, InputBlockTime) == 0x0000C0, "Member 'FEndLocomotionSetting::InputBlockTime' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableBattleAbility
// 0x01E8 (0x01F0 - 0x0008)
struct FEndDataTableBattleAbility final : public FEndDataTableRowBase
{
public:
	int32                                         UniqueID;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Name;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Explanation;                                       // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         ExplanationInvalid_Array;                          // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         ShowName;                                          // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ShowNameSecond;                                    // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ShowNameNonGuardableIcon;                          // 0x0048(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InputBufferTime;                                   // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         CommandType;                                       // 0x0050(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         CommandTargetType;                                 // 0x0051(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         CastMagicEffectType;                               // 0x0052(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_53[0x1];                                       // 0x0053(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ATB;                                               // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MP;                                                // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Range;                                             // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReactionInfluenceID;                               // 0x0060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 CancelNumber_Array;                                // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   AnimResourceReferenceBattleCharaSpecID;            // 0x0078(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         AnimResourceReferencePlayerType;                   // 0x0080(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         AnimationSelectType;                               // 0x0081(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_82[0x6];                                       // 0x0082(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         AnimationID_Array;                                 // 0x0088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 AnimationLoopTime_Array;                           // 0x0098(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<uint8>                                 AddAnimationIndex_Array;                           // 0x00A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           AddAnimationName_Array;                            // 0x00B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<uint8>                                 AddAnimationPlayCount_Array;                       // 0x00C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 AddAnimationPlayInterval_Array;                    // 0x00D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<uint8>                                 AddAnimationEndBase_Array;                         // 0x00E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   AnimationUpperBodyName;                            // 0x00F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         SkeletonControlType;                               // 0x0100(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         TargetCount;                                       // 0x0101(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         TargetAimPosition;                                 // 0x0102(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         TargetCorrectionDistance;                          // 0x0103(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         TargetCorrectionDirection;                         // 0x0104(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_105[0x3];                                      // 0x0105(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TargetCorrectionDirectionAngle;                    // 0x0108(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         TargetCorrectionHeight;                            // 0x010C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10D[0x3];                                      // 0x010D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TargetCorrectionHeightSpeed;                       // 0x0110(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         TargetCloseMove;                                   // 0x0114(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         TargetCorrectionDirectionImmediately;              // 0x0115(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_116[0x2];                                      // 0x0116(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReplaceDamageSourceID;                             // 0x0118(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         DamageCreateMoveCollisionObjectOff;                // 0x0128(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         CameraSequenceNotify;                              // 0x0129(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12A[0x2];                                      // 0x012A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CameraSequenceID;                                  // 0x012C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SpecialStatusChangeID;                             // 0x0134(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         KeepValue;                                         // 0x013C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         DistFeelType;                                      // 0x013D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         UseSoundResourceCategory;                          // 0x013E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13F[0x1];                                      // 0x013F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   UseSoundResourceName;                              // 0x0140(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 ReactionCondition_Array;                           // 0x0148(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 ReactionConditionParameterValue_Array;             // 0x0158(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<uint8>                                 ReactionConditionNotifyIndex_Array;                // 0x0168(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<uint8>                                 ReactionType_Array;                                // 0x0178(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 ReactionParameterValue_Array;                      // 0x0188(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           ReactionParameterString_Array;                     // 0x0198(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           ResourceID_Array;                                  // 0x01A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         SummonPoint;                                       // 0x01B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         AfterWalkType;                                     // 0x01BC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BD[0x3];                                      // 0x01BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TeleportMinDistance;                               // 0x01C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LinkMaxDistance;                                   // 0x01C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LearningSkillID;                                   // 0x01C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SortId;                                            // 0x01D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D4[0x4];                                      // 0x01D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           ResourceName_Array;                                // 0x01D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         Flag0;                                             // 0x01E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EC[0x4];                                      // 0x01EC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableBattleAbility) == 0x000008, "Wrong alignment on FEndDataTableBattleAbility");
static_assert(sizeof(FEndDataTableBattleAbility) == 0x0001F0, "Wrong size on FEndDataTableBattleAbility");
static_assert(offsetof(FEndDataTableBattleAbility, UniqueID) == 0x000008, "Member 'FEndDataTableBattleAbility::UniqueID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAbility, Name) == 0x000010, "Member 'FEndDataTableBattleAbility::Name' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAbility, Explanation) == 0x000020, "Member 'FEndDataTableBattleAbility::Explanation' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAbility, ExplanationInvalid_Array) == 0x000030, "Member 'FEndDataTableBattleAbility::ExplanationInvalid_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAbility, ShowName) == 0x000040, "Member 'FEndDataTableBattleAbility::ShowName' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAbility, ShowNameSecond) == 0x000044, "Member 'FEndDataTableBattleAbility::ShowNameSecond' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAbility, ShowNameNonGuardableIcon) == 0x000048, "Member 'FEndDataTableBattleAbility::ShowNameNonGuardableIcon' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAbility, InputBufferTime) == 0x00004C, "Member 'FEndDataTableBattleAbility::InputBufferTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAbility, CommandType) == 0x000050, "Member 'FEndDataTableBattleAbility::CommandType' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAbility, CommandTargetType) == 0x000051, "Member 'FEndDataTableBattleAbility::CommandTargetType' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAbility, CastMagicEffectType) == 0x000052, "Member 'FEndDataTableBattleAbility::CastMagicEffectType' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAbility, ATB) == 0x000054, "Member 'FEndDataTableBattleAbility::ATB' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAbility, MP) == 0x000058, "Member 'FEndDataTableBattleAbility::MP' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAbility, Range) == 0x00005C, "Member 'FEndDataTableBattleAbility::Range' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAbility, ReactionInfluenceID) == 0x000060, "Member 'FEndDataTableBattleAbility::ReactionInfluenceID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAbility, CancelNumber_Array) == 0x000068, "Member 'FEndDataTableBattleAbility::CancelNumber_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAbility, AnimResourceReferenceBattleCharaSpecID) == 0x000078, "Member 'FEndDataTableBattleAbility::AnimResourceReferenceBattleCharaSpecID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAbility, AnimResourceReferencePlayerType) == 0x000080, "Member 'FEndDataTableBattleAbility::AnimResourceReferencePlayerType' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAbility, AnimationSelectType) == 0x000081, "Member 'FEndDataTableBattleAbility::AnimationSelectType' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAbility, AnimationID_Array) == 0x000088, "Member 'FEndDataTableBattleAbility::AnimationID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAbility, AnimationLoopTime_Array) == 0x000098, "Member 'FEndDataTableBattleAbility::AnimationLoopTime_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAbility, AddAnimationIndex_Array) == 0x0000A8, "Member 'FEndDataTableBattleAbility::AddAnimationIndex_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAbility, AddAnimationName_Array) == 0x0000B8, "Member 'FEndDataTableBattleAbility::AddAnimationName_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAbility, AddAnimationPlayCount_Array) == 0x0000C8, "Member 'FEndDataTableBattleAbility::AddAnimationPlayCount_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAbility, AddAnimationPlayInterval_Array) == 0x0000D8, "Member 'FEndDataTableBattleAbility::AddAnimationPlayInterval_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAbility, AddAnimationEndBase_Array) == 0x0000E8, "Member 'FEndDataTableBattleAbility::AddAnimationEndBase_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAbility, AnimationUpperBodyName) == 0x0000F8, "Member 'FEndDataTableBattleAbility::AnimationUpperBodyName' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAbility, SkeletonControlType) == 0x000100, "Member 'FEndDataTableBattleAbility::SkeletonControlType' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAbility, TargetCount) == 0x000101, "Member 'FEndDataTableBattleAbility::TargetCount' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAbility, TargetAimPosition) == 0x000102, "Member 'FEndDataTableBattleAbility::TargetAimPosition' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAbility, TargetCorrectionDistance) == 0x000103, "Member 'FEndDataTableBattleAbility::TargetCorrectionDistance' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAbility, TargetCorrectionDirection) == 0x000104, "Member 'FEndDataTableBattleAbility::TargetCorrectionDirection' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAbility, TargetCorrectionDirectionAngle) == 0x000108, "Member 'FEndDataTableBattleAbility::TargetCorrectionDirectionAngle' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAbility, TargetCorrectionHeight) == 0x00010C, "Member 'FEndDataTableBattleAbility::TargetCorrectionHeight' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAbility, TargetCorrectionHeightSpeed) == 0x000110, "Member 'FEndDataTableBattleAbility::TargetCorrectionHeightSpeed' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAbility, TargetCloseMove) == 0x000114, "Member 'FEndDataTableBattleAbility::TargetCloseMove' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAbility, TargetCorrectionDirectionImmediately) == 0x000115, "Member 'FEndDataTableBattleAbility::TargetCorrectionDirectionImmediately' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAbility, ReplaceDamageSourceID) == 0x000118, "Member 'FEndDataTableBattleAbility::ReplaceDamageSourceID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAbility, DamageCreateMoveCollisionObjectOff) == 0x000128, "Member 'FEndDataTableBattleAbility::DamageCreateMoveCollisionObjectOff' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAbility, CameraSequenceNotify) == 0x000129, "Member 'FEndDataTableBattleAbility::CameraSequenceNotify' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAbility, CameraSequenceID) == 0x00012C, "Member 'FEndDataTableBattleAbility::CameraSequenceID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAbility, SpecialStatusChangeID) == 0x000134, "Member 'FEndDataTableBattleAbility::SpecialStatusChangeID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAbility, KeepValue) == 0x00013C, "Member 'FEndDataTableBattleAbility::KeepValue' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAbility, DistFeelType) == 0x00013D, "Member 'FEndDataTableBattleAbility::DistFeelType' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAbility, UseSoundResourceCategory) == 0x00013E, "Member 'FEndDataTableBattleAbility::UseSoundResourceCategory' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAbility, UseSoundResourceName) == 0x000140, "Member 'FEndDataTableBattleAbility::UseSoundResourceName' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAbility, ReactionCondition_Array) == 0x000148, "Member 'FEndDataTableBattleAbility::ReactionCondition_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAbility, ReactionConditionParameterValue_Array) == 0x000158, "Member 'FEndDataTableBattleAbility::ReactionConditionParameterValue_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAbility, ReactionConditionNotifyIndex_Array) == 0x000168, "Member 'FEndDataTableBattleAbility::ReactionConditionNotifyIndex_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAbility, ReactionType_Array) == 0x000178, "Member 'FEndDataTableBattleAbility::ReactionType_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAbility, ReactionParameterValue_Array) == 0x000188, "Member 'FEndDataTableBattleAbility::ReactionParameterValue_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAbility, ReactionParameterString_Array) == 0x000198, "Member 'FEndDataTableBattleAbility::ReactionParameterString_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAbility, ResourceID_Array) == 0x0001A8, "Member 'FEndDataTableBattleAbility::ResourceID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAbility, SummonPoint) == 0x0001B8, "Member 'FEndDataTableBattleAbility::SummonPoint' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAbility, AfterWalkType) == 0x0001BC, "Member 'FEndDataTableBattleAbility::AfterWalkType' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAbility, TeleportMinDistance) == 0x0001C0, "Member 'FEndDataTableBattleAbility::TeleportMinDistance' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAbility, LinkMaxDistance) == 0x0001C4, "Member 'FEndDataTableBattleAbility::LinkMaxDistance' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAbility, LearningSkillID) == 0x0001C8, "Member 'FEndDataTableBattleAbility::LearningSkillID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAbility, SortId) == 0x0001D0, "Member 'FEndDataTableBattleAbility::SortId' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAbility, ResourceName_Array) == 0x0001D8, "Member 'FEndDataTableBattleAbility::ResourceName_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAbility, Flag0) == 0x0001E8, "Member 'FEndDataTableBattleAbility::Flag0' has a wrong offset!");

// ScriptStruct EndGame.EndLookAtRuntimeSetting
// 0x0400 (0x0400 - 0x0000)
struct alignas(0x08) FEndLookAtRuntimeSetting final
{
public:
	uint8                                         Pad_0[0x400];                                      // 0x0000(0x0400)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndLookAtRuntimeSetting) == 0x000008, "Wrong alignment on FEndLookAtRuntimeSetting");
static_assert(sizeof(FEndLookAtRuntimeSetting) == 0x000400, "Wrong size on FEndLookAtRuntimeSetting");

// ScriptStruct EndGame.SummonAbilityChoice
// 0x0034 (0x0034 - 0x0000)
struct FSummonAbilityChoice final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Priority;                                          // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinDistance;                                       // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDistance;                                       // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinHeight;                                         // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxHeight;                                         // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESummonAbilityInfluenceCenter                 InfluenceCenter;                                   // 0x001C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InfluenceRadius;                                   // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         InfluenceTargets;                                  // 0x0024(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SelfToGroundDist;                                  // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetToGroundDist;                                // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Probability;                                       // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSummonAbilityChoice) == 0x000004, "Wrong alignment on FSummonAbilityChoice");
static_assert(sizeof(FSummonAbilityChoice) == 0x000034, "Wrong size on FSummonAbilityChoice");
static_assert(offsetof(FSummonAbilityChoice, ID) == 0x000000, "Member 'FSummonAbilityChoice::ID' has a wrong offset!");
static_assert(offsetof(FSummonAbilityChoice, Priority) == 0x000008, "Member 'FSummonAbilityChoice::Priority' has a wrong offset!");
static_assert(offsetof(FSummonAbilityChoice, MinDistance) == 0x00000C, "Member 'FSummonAbilityChoice::MinDistance' has a wrong offset!");
static_assert(offsetof(FSummonAbilityChoice, MaxDistance) == 0x000010, "Member 'FSummonAbilityChoice::MaxDistance' has a wrong offset!");
static_assert(offsetof(FSummonAbilityChoice, MinHeight) == 0x000014, "Member 'FSummonAbilityChoice::MinHeight' has a wrong offset!");
static_assert(offsetof(FSummonAbilityChoice, MaxHeight) == 0x000018, "Member 'FSummonAbilityChoice::MaxHeight' has a wrong offset!");
static_assert(offsetof(FSummonAbilityChoice, InfluenceCenter) == 0x00001C, "Member 'FSummonAbilityChoice::InfluenceCenter' has a wrong offset!");
static_assert(offsetof(FSummonAbilityChoice, InfluenceRadius) == 0x000020, "Member 'FSummonAbilityChoice::InfluenceRadius' has a wrong offset!");
static_assert(offsetof(FSummonAbilityChoice, InfluenceTargets) == 0x000024, "Member 'FSummonAbilityChoice::InfluenceTargets' has a wrong offset!");
static_assert(offsetof(FSummonAbilityChoice, SelfToGroundDist) == 0x000028, "Member 'FSummonAbilityChoice::SelfToGroundDist' has a wrong offset!");
static_assert(offsetof(FSummonAbilityChoice, TargetToGroundDist) == 0x00002C, "Member 'FSummonAbilityChoice::TargetToGroundDist' has a wrong offset!");
static_assert(offsetof(FSummonAbilityChoice, Probability) == 0x000030, "Member 'FSummonAbilityChoice::Probability' has a wrong offset!");

// ScriptStruct EndGame.EndLookAtTargetSetting
// 0x0058 (0x0058 - 0x0000)
struct alignas(0x08) FEndLookAtTargetSetting final
{
public:
	uint8                                         Pad_0[0x58];                                       // 0x0000(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndLookAtTargetSetting) == 0x000008, "Wrong alignment on FEndLookAtTargetSetting");
static_assert(sizeof(FEndLookAtTargetSetting) == 0x000058, "Wrong size on FEndLookAtTargetSetting");

// ScriptStruct EndGame.EndPlayedSoundInfo
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FEndPlayedSoundInfo final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndPlayedSoundInfo) == 0x000008, "Wrong alignment on FEndPlayedSoundInfo");
static_assert(sizeof(FEndPlayedSoundInfo) == 0x000018, "Wrong size on FEndPlayedSoundInfo");

// ScriptStruct EndGame.EndPhysicalDamageReactionBoneSetting
// 0x0018 (0x0018 - 0x0000)
struct FEndPhysicalDamageReactionBoneSetting final
{
public:
	class FName                                   BoneName;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ImpulseVelocity;                                   // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ContinuationImpulseVelocity;                       // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AdditionalDownImpulseVelocity;                     // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AdditionalDownContinuationImpulseVelocity;         // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndPhysicalDamageReactionBoneSetting) == 0x000004, "Wrong alignment on FEndPhysicalDamageReactionBoneSetting");
static_assert(sizeof(FEndPhysicalDamageReactionBoneSetting) == 0x000018, "Wrong size on FEndPhysicalDamageReactionBoneSetting");
static_assert(offsetof(FEndPhysicalDamageReactionBoneSetting, BoneName) == 0x000000, "Member 'FEndPhysicalDamageReactionBoneSetting::BoneName' has a wrong offset!");
static_assert(offsetof(FEndPhysicalDamageReactionBoneSetting, ImpulseVelocity) == 0x000008, "Member 'FEndPhysicalDamageReactionBoneSetting::ImpulseVelocity' has a wrong offset!");
static_assert(offsetof(FEndPhysicalDamageReactionBoneSetting, ContinuationImpulseVelocity) == 0x00000C, "Member 'FEndPhysicalDamageReactionBoneSetting::ContinuationImpulseVelocity' has a wrong offset!");
static_assert(offsetof(FEndPhysicalDamageReactionBoneSetting, AdditionalDownImpulseVelocity) == 0x000010, "Member 'FEndPhysicalDamageReactionBoneSetting::AdditionalDownImpulseVelocity' has a wrong offset!");
static_assert(offsetof(FEndPhysicalDamageReactionBoneSetting, AdditionalDownContinuationImpulseVelocity) == 0x000014, "Member 'FEndPhysicalDamageReactionBoneSetting::AdditionalDownContinuationImpulseVelocity' has a wrong offset!");

// ScriptStruct EndGame.EndPhysicalDamageReactionSetting
// 0x0038 (0x0038 - 0x0000)
struct FEndPhysicalDamageReactionSetting final
{
public:
	class UEndPhysicalConstraintSetting*          ConstraintSetting;                                 // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FEndPhysicalDamageReactionBoneSetting> BoneSettings;                                      // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FEndPhysicalDamageReactionBoneSetting> ExtendBoneSettings;                                // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         ActiveTime;                                        // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendOutTime;                                      // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAlwaysReset;                                      // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHitDirection2D;                                   // 0x0031(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisableOnExtraAction;                             // 0x0032(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_33[0x5];                                       // 0x0033(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndPhysicalDamageReactionSetting) == 0x000008, "Wrong alignment on FEndPhysicalDamageReactionSetting");
static_assert(sizeof(FEndPhysicalDamageReactionSetting) == 0x000038, "Wrong size on FEndPhysicalDamageReactionSetting");
static_assert(offsetof(FEndPhysicalDamageReactionSetting, ConstraintSetting) == 0x000000, "Member 'FEndPhysicalDamageReactionSetting::ConstraintSetting' has a wrong offset!");
static_assert(offsetof(FEndPhysicalDamageReactionSetting, BoneSettings) == 0x000008, "Member 'FEndPhysicalDamageReactionSetting::BoneSettings' has a wrong offset!");
static_assert(offsetof(FEndPhysicalDamageReactionSetting, ExtendBoneSettings) == 0x000018, "Member 'FEndPhysicalDamageReactionSetting::ExtendBoneSettings' has a wrong offset!");
static_assert(offsetof(FEndPhysicalDamageReactionSetting, ActiveTime) == 0x000028, "Member 'FEndPhysicalDamageReactionSetting::ActiveTime' has a wrong offset!");
static_assert(offsetof(FEndPhysicalDamageReactionSetting, BlendOutTime) == 0x00002C, "Member 'FEndPhysicalDamageReactionSetting::BlendOutTime' has a wrong offset!");
static_assert(offsetof(FEndPhysicalDamageReactionSetting, bAlwaysReset) == 0x000030, "Member 'FEndPhysicalDamageReactionSetting::bAlwaysReset' has a wrong offset!");
static_assert(offsetof(FEndPhysicalDamageReactionSetting, bHitDirection2D) == 0x000031, "Member 'FEndPhysicalDamageReactionSetting::bHitDirection2D' has a wrong offset!");
static_assert(offsetof(FEndPhysicalDamageReactionSetting, bDisableOnExtraAction) == 0x000032, "Member 'FEndPhysicalDamageReactionSetting::bDisableOnExtraAction' has a wrong offset!");

// ScriptStruct EndGame.EndAnimSetClusterWarning
// 0x0010 (0x0010 - 0x0000)
struct FEndAnimSetClusterWarning final
{
public:
	TArray<class FName>                           Dependencies;                                      // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndAnimSetClusterWarning) == 0x000008, "Wrong alignment on FEndAnimSetClusterWarning");
static_assert(sizeof(FEndAnimSetClusterWarning) == 0x000010, "Wrong size on FEndAnimSetClusterWarning");
static_assert(offsetof(FEndAnimSetClusterWarning, Dependencies) == 0x000000, "Member 'FEndAnimSetClusterWarning::Dependencies' has a wrong offset!");

// ScriptStruct EndGame.EndAnimVehicleInstanceProxy
// 0x02B0 (0x0770 - 0x04C0)
struct FEndAnimVehicleInstanceProxy final : public FAnimInstanceProxy
{
public:
	uint8                                         Pad_4C0[0x2B0];                                    // 0x04C0(0x02B0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndAnimVehicleInstanceProxy) == 0x000010, "Wrong alignment on FEndAnimVehicleInstanceProxy");
static_assert(sizeof(FEndAnimVehicleInstanceProxy) == 0x000770, "Wrong size on FEndAnimVehicleInstanceProxy");

// ScriptStruct EndGame.EndAnimVehicleTurnBone
// 0x0024 (0x0024 - 0x0000)
struct FEndAnimVehicleTurnBone final
{
public:
	struct FBoneReference                         Bone;                                              // 0x0000(0x0014)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Axis;                                              // 0x0014(0x000C)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TurnScale;                                         // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndAnimVehicleTurnBone) == 0x000004, "Wrong alignment on FEndAnimVehicleTurnBone");
static_assert(sizeof(FEndAnimVehicleTurnBone) == 0x000024, "Wrong size on FEndAnimVehicleTurnBone");
static_assert(offsetof(FEndAnimVehicleTurnBone, Bone) == 0x000000, "Member 'FEndAnimVehicleTurnBone::Bone' has a wrong offset!");
static_assert(offsetof(FEndAnimVehicleTurnBone, Axis) == 0x000014, "Member 'FEndAnimVehicleTurnBone::Axis' has a wrong offset!");
static_assert(offsetof(FEndAnimVehicleTurnBone, TurnScale) == 0x000020, "Member 'FEndAnimVehicleTurnBone::TurnScale' has a wrong offset!");

// ScriptStruct EndGame.EndAnimVehicleAngularSuspension
// 0x00E0 (0x00E0 - 0x0000)
struct FEndAnimVehicleAngularSuspension final
{
public:
	struct FVector2D                              TranslationLimit;                                  // 0x0000(0x0008)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              VelocityLimit;                                     // 0x0008(0x0008)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               RotationAxis;                                      // 0x0010(0x000C)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               AdditiveRotation;                                  // 0x001C(0x000C)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bRestrictSuspensionLength;                         // 0x0028(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Mass;                                              // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Stiffness;                                         // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBoneReference                         SuspensionBone;                                    // 0x0034(0x0014)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FEndAnimVehicleWheel                   Wheel;                                             // 0x0048(0x0030)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bKeepWheelRotation;                                // 0x0078(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x3];                                       // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               KeepWheelRotationAxis;                             // 0x007C(0x000C)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               KeepWheelAdditiveRotation;                         // 0x0088(0x000C)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         KeepWheelRotationBone;                             // 0x0094(0x0014)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	float                                         KeepWheelLerpAlpha;                                // 0x00A8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  KeepWheelConcatenateRotation;                      // 0x00B0(0x0010)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_C0[0xC];                                       // 0x00C0(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Length;                                            // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KeepWheelLength;                                   // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D4[0xC];                                       // 0x00D4(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndAnimVehicleAngularSuspension) == 0x000010, "Wrong alignment on FEndAnimVehicleAngularSuspension");
static_assert(sizeof(FEndAnimVehicleAngularSuspension) == 0x0000E0, "Wrong size on FEndAnimVehicleAngularSuspension");
static_assert(offsetof(FEndAnimVehicleAngularSuspension, TranslationLimit) == 0x000000, "Member 'FEndAnimVehicleAngularSuspension::TranslationLimit' has a wrong offset!");
static_assert(offsetof(FEndAnimVehicleAngularSuspension, VelocityLimit) == 0x000008, "Member 'FEndAnimVehicleAngularSuspension::VelocityLimit' has a wrong offset!");
static_assert(offsetof(FEndAnimVehicleAngularSuspension, RotationAxis) == 0x000010, "Member 'FEndAnimVehicleAngularSuspension::RotationAxis' has a wrong offset!");
static_assert(offsetof(FEndAnimVehicleAngularSuspension, AdditiveRotation) == 0x00001C, "Member 'FEndAnimVehicleAngularSuspension::AdditiveRotation' has a wrong offset!");
static_assert(offsetof(FEndAnimVehicleAngularSuspension, bRestrictSuspensionLength) == 0x000028, "Member 'FEndAnimVehicleAngularSuspension::bRestrictSuspensionLength' has a wrong offset!");
static_assert(offsetof(FEndAnimVehicleAngularSuspension, Mass) == 0x00002C, "Member 'FEndAnimVehicleAngularSuspension::Mass' has a wrong offset!");
static_assert(offsetof(FEndAnimVehicleAngularSuspension, Stiffness) == 0x000030, "Member 'FEndAnimVehicleAngularSuspension::Stiffness' has a wrong offset!");
static_assert(offsetof(FEndAnimVehicleAngularSuspension, SuspensionBone) == 0x000034, "Member 'FEndAnimVehicleAngularSuspension::SuspensionBone' has a wrong offset!");
static_assert(offsetof(FEndAnimVehicleAngularSuspension, Wheel) == 0x000048, "Member 'FEndAnimVehicleAngularSuspension::Wheel' has a wrong offset!");
static_assert(offsetof(FEndAnimVehicleAngularSuspension, bKeepWheelRotation) == 0x000078, "Member 'FEndAnimVehicleAngularSuspension::bKeepWheelRotation' has a wrong offset!");
static_assert(offsetof(FEndAnimVehicleAngularSuspension, KeepWheelRotationAxis) == 0x00007C, "Member 'FEndAnimVehicleAngularSuspension::KeepWheelRotationAxis' has a wrong offset!");
static_assert(offsetof(FEndAnimVehicleAngularSuspension, KeepWheelAdditiveRotation) == 0x000088, "Member 'FEndAnimVehicleAngularSuspension::KeepWheelAdditiveRotation' has a wrong offset!");
static_assert(offsetof(FEndAnimVehicleAngularSuspension, KeepWheelRotationBone) == 0x000094, "Member 'FEndAnimVehicleAngularSuspension::KeepWheelRotationBone' has a wrong offset!");
static_assert(offsetof(FEndAnimVehicleAngularSuspension, KeepWheelLerpAlpha) == 0x0000A8, "Member 'FEndAnimVehicleAngularSuspension::KeepWheelLerpAlpha' has a wrong offset!");
static_assert(offsetof(FEndAnimVehicleAngularSuspension, KeepWheelConcatenateRotation) == 0x0000B0, "Member 'FEndAnimVehicleAngularSuspension::KeepWheelConcatenateRotation' has a wrong offset!");
static_assert(offsetof(FEndAnimVehicleAngularSuspension, Length) == 0x0000CC, "Member 'FEndAnimVehicleAngularSuspension::Length' has a wrong offset!");
static_assert(offsetof(FEndAnimVehicleAngularSuspension, KeepWheelLength) == 0x0000D0, "Member 'FEndAnimVehicleAngularSuspension::KeepWheelLength' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableAIParameter
// 0x0048 (0x0050 - 0x0008)
struct FEndDataTableAIParameter final : public FEndDataTableRowBase
{
public:
	uint8                                         Movable;                                           // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         HitWall;                                           // 0x0009(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         HitObject;                                         // 0x000A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         HitSelfReaction;                                   // 0x000B(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         HitOthersReaction;                                 // 0x000C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         FitFloor;                                          // 0x000D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         MaxWeight;                                         // 0x000E(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         DisableTickPause;                                  // 0x000F(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         EnableSafeTransform;                               // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ForceTurn;                                         // 0x0011(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         InterpolationMove;                                 // 0x0012(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13[0x1];                                       // 0x0013(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         WalkRange;                                         // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GoalRadius;                                        // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FollowUpDashDistance;                              // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ForceWalk;                                         // 0x0020(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FlightMaxSpeed;                                    // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FlightAcceleration;                                // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         NoOverTaking;                                      // 0x002C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         NoOverTakingDistance;                              // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StopDistance;                                      // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         LeadTurn;                                          // 0x0038(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RangeRadius;                                       // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StayTimeMIn;                                       // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StayTimeRand;                                      // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TurnBackDistance;                                  // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveStartDistance;                                 // 0x004C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableAIParameter) == 0x000008, "Wrong alignment on FEndDataTableAIParameter");
static_assert(sizeof(FEndDataTableAIParameter) == 0x000050, "Wrong size on FEndDataTableAIParameter");
static_assert(offsetof(FEndDataTableAIParameter, Movable) == 0x000008, "Member 'FEndDataTableAIParameter::Movable' has a wrong offset!");
static_assert(offsetof(FEndDataTableAIParameter, HitWall) == 0x000009, "Member 'FEndDataTableAIParameter::HitWall' has a wrong offset!");
static_assert(offsetof(FEndDataTableAIParameter, HitObject) == 0x00000A, "Member 'FEndDataTableAIParameter::HitObject' has a wrong offset!");
static_assert(offsetof(FEndDataTableAIParameter, HitSelfReaction) == 0x00000B, "Member 'FEndDataTableAIParameter::HitSelfReaction' has a wrong offset!");
static_assert(offsetof(FEndDataTableAIParameter, HitOthersReaction) == 0x00000C, "Member 'FEndDataTableAIParameter::HitOthersReaction' has a wrong offset!");
static_assert(offsetof(FEndDataTableAIParameter, FitFloor) == 0x00000D, "Member 'FEndDataTableAIParameter::FitFloor' has a wrong offset!");
static_assert(offsetof(FEndDataTableAIParameter, MaxWeight) == 0x00000E, "Member 'FEndDataTableAIParameter::MaxWeight' has a wrong offset!");
static_assert(offsetof(FEndDataTableAIParameter, DisableTickPause) == 0x00000F, "Member 'FEndDataTableAIParameter::DisableTickPause' has a wrong offset!");
static_assert(offsetof(FEndDataTableAIParameter, EnableSafeTransform) == 0x000010, "Member 'FEndDataTableAIParameter::EnableSafeTransform' has a wrong offset!");
static_assert(offsetof(FEndDataTableAIParameter, ForceTurn) == 0x000011, "Member 'FEndDataTableAIParameter::ForceTurn' has a wrong offset!");
static_assert(offsetof(FEndDataTableAIParameter, InterpolationMove) == 0x000012, "Member 'FEndDataTableAIParameter::InterpolationMove' has a wrong offset!");
static_assert(offsetof(FEndDataTableAIParameter, WalkRange) == 0x000014, "Member 'FEndDataTableAIParameter::WalkRange' has a wrong offset!");
static_assert(offsetof(FEndDataTableAIParameter, GoalRadius) == 0x000018, "Member 'FEndDataTableAIParameter::GoalRadius' has a wrong offset!");
static_assert(offsetof(FEndDataTableAIParameter, FollowUpDashDistance) == 0x00001C, "Member 'FEndDataTableAIParameter::FollowUpDashDistance' has a wrong offset!");
static_assert(offsetof(FEndDataTableAIParameter, ForceWalk) == 0x000020, "Member 'FEndDataTableAIParameter::ForceWalk' has a wrong offset!");
static_assert(offsetof(FEndDataTableAIParameter, FlightMaxSpeed) == 0x000024, "Member 'FEndDataTableAIParameter::FlightMaxSpeed' has a wrong offset!");
static_assert(offsetof(FEndDataTableAIParameter, FlightAcceleration) == 0x000028, "Member 'FEndDataTableAIParameter::FlightAcceleration' has a wrong offset!");
static_assert(offsetof(FEndDataTableAIParameter, NoOverTaking) == 0x00002C, "Member 'FEndDataTableAIParameter::NoOverTaking' has a wrong offset!");
static_assert(offsetof(FEndDataTableAIParameter, NoOverTakingDistance) == 0x000030, "Member 'FEndDataTableAIParameter::NoOverTakingDistance' has a wrong offset!");
static_assert(offsetof(FEndDataTableAIParameter, StopDistance) == 0x000034, "Member 'FEndDataTableAIParameter::StopDistance' has a wrong offset!");
static_assert(offsetof(FEndDataTableAIParameter, LeadTurn) == 0x000038, "Member 'FEndDataTableAIParameter::LeadTurn' has a wrong offset!");
static_assert(offsetof(FEndDataTableAIParameter, RangeRadius) == 0x00003C, "Member 'FEndDataTableAIParameter::RangeRadius' has a wrong offset!");
static_assert(offsetof(FEndDataTableAIParameter, StayTimeMIn) == 0x000040, "Member 'FEndDataTableAIParameter::StayTimeMIn' has a wrong offset!");
static_assert(offsetof(FEndDataTableAIParameter, StayTimeRand) == 0x000044, "Member 'FEndDataTableAIParameter::StayTimeRand' has a wrong offset!");
static_assert(offsetof(FEndDataTableAIParameter, TurnBackDistance) == 0x000048, "Member 'FEndDataTableAIParameter::TurnBackDistance' has a wrong offset!");
static_assert(offsetof(FEndDataTableAIParameter, MoveStartDistance) == 0x00004C, "Member 'FEndDataTableAIParameter::MoveStartDistance' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableEnvironmentPhysicsSpec
// 0x0040 (0x0048 - 0x0008)
struct FEndDataTableEnvironmentPhysicsSpec final : public FEndDataTableRowBase
{
public:
	class FString                                 ContentsEffect;                                    // 0x0008(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ContentsSE;                                        // 0x0018(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ItemDropId;                                        // 0x0028(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ExistsDummyCollision;                              // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Option;                                            // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StaticMeshSetPath;                                 // 0x0038(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableEnvironmentPhysicsSpec) == 0x000008, "Wrong alignment on FEndDataTableEnvironmentPhysicsSpec");
static_assert(sizeof(FEndDataTableEnvironmentPhysicsSpec) == 0x000048, "Wrong size on FEndDataTableEnvironmentPhysicsSpec");
static_assert(offsetof(FEndDataTableEnvironmentPhysicsSpec, ContentsEffect) == 0x000008, "Member 'FEndDataTableEnvironmentPhysicsSpec::ContentsEffect' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnvironmentPhysicsSpec, ContentsSE) == 0x000018, "Member 'FEndDataTableEnvironmentPhysicsSpec::ContentsSE' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnvironmentPhysicsSpec, ItemDropId) == 0x000028, "Member 'FEndDataTableEnvironmentPhysicsSpec::ItemDropId' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnvironmentPhysicsSpec, ExistsDummyCollision) == 0x000030, "Member 'FEndDataTableEnvironmentPhysicsSpec::ExistsDummyCollision' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnvironmentPhysicsSpec, Option) == 0x000034, "Member 'FEndDataTableEnvironmentPhysicsSpec::Option' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnvironmentPhysicsSpec, StaticMeshSetPath) == 0x000038, "Member 'FEndDataTableEnvironmentPhysicsSpec::StaticMeshSetPath' has a wrong offset!");

// ScriptStruct EndGame.EndMenuDamageInfo
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x04) FEndMenuDamageInfo final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndMenuDamageInfo) == 0x000004, "Wrong alignment on FEndMenuDamageInfo");
static_assert(sizeof(FEndMenuDamageInfo) == 0x000020, "Wrong size on FEndMenuDamageInfo");

// ScriptStruct EndGame.EndDataTableCharaSpecSoundCategory
// 0x0038 (0x0040 - 0x0008)
struct FEndDataTableCharaSpecSoundCategory final : public FEndDataTableRowBase
{
public:
	int32                                         UniqueIndex;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ContentsSoundSE;                                   // 0x0010(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ContentsSoundAutoSE;                               // 0x0020(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         ContentSoundVoice_Array;                           // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableCharaSpecSoundCategory) == 0x000008, "Wrong alignment on FEndDataTableCharaSpecSoundCategory");
static_assert(sizeof(FEndDataTableCharaSpecSoundCategory) == 0x000040, "Wrong size on FEndDataTableCharaSpecSoundCategory");
static_assert(offsetof(FEndDataTableCharaSpecSoundCategory, UniqueIndex) == 0x000008, "Member 'FEndDataTableCharaSpecSoundCategory::UniqueIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTableCharaSpecSoundCategory, ContentsSoundSE) == 0x000010, "Member 'FEndDataTableCharaSpecSoundCategory::ContentsSoundSE' has a wrong offset!");
static_assert(offsetof(FEndDataTableCharaSpecSoundCategory, ContentsSoundAutoSE) == 0x000020, "Member 'FEndDataTableCharaSpecSoundCategory::ContentsSoundAutoSE' has a wrong offset!");
static_assert(offsetof(FEndDataTableCharaSpecSoundCategory, ContentSoundVoice_Array) == 0x000030, "Member 'FEndDataTableCharaSpecSoundCategory::ContentSoundVoice_Array' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableEnemyBookBattleCharaSpec
// 0x0070 (0x0078 - 0x0008)
struct FEndDataTableEnemyBookBattleCharaSpec final : public FEndDataTableRowBase
{
public:
	class FName                                   CharaSpecID;                                       // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TextLabel;                                         // 0x0010(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         EnemyCategory;                                     // 0x0020(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   PossessionItemID;                                  // 0x0024(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 AttributeResist_Array;                             // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<uint8>                                 StatusChangeResist_Array;                          // 0x0040(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<uint8>                                 EffectiveValue_Array;                              // 0x0050(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   EnemyBookID;                                       // 0x0060(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         PropertyResist0;                                   // 0x0068(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         PropertyResist1;                                   // 0x0069(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         RateDamageResist;                                  // 0x006A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         FixDamageResist;                                   // 0x006B(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EnemyBookIDPlus;                                   // 0x006C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableEnemyBookBattleCharaSpec) == 0x000008, "Wrong alignment on FEndDataTableEnemyBookBattleCharaSpec");
static_assert(sizeof(FEndDataTableEnemyBookBattleCharaSpec) == 0x000078, "Wrong size on FEndDataTableEnemyBookBattleCharaSpec");
static_assert(offsetof(FEndDataTableEnemyBookBattleCharaSpec, CharaSpecID) == 0x000008, "Member 'FEndDataTableEnemyBookBattleCharaSpec::CharaSpecID' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyBookBattleCharaSpec, TextLabel) == 0x000010, "Member 'FEndDataTableEnemyBookBattleCharaSpec::TextLabel' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyBookBattleCharaSpec, EnemyCategory) == 0x000020, "Member 'FEndDataTableEnemyBookBattleCharaSpec::EnemyCategory' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyBookBattleCharaSpec, PossessionItemID) == 0x000024, "Member 'FEndDataTableEnemyBookBattleCharaSpec::PossessionItemID' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyBookBattleCharaSpec, AttributeResist_Array) == 0x000030, "Member 'FEndDataTableEnemyBookBattleCharaSpec::AttributeResist_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyBookBattleCharaSpec, StatusChangeResist_Array) == 0x000040, "Member 'FEndDataTableEnemyBookBattleCharaSpec::StatusChangeResist_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyBookBattleCharaSpec, EffectiveValue_Array) == 0x000050, "Member 'FEndDataTableEnemyBookBattleCharaSpec::EffectiveValue_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyBookBattleCharaSpec, EnemyBookID) == 0x000060, "Member 'FEndDataTableEnemyBookBattleCharaSpec::EnemyBookID' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyBookBattleCharaSpec, PropertyResist0) == 0x000068, "Member 'FEndDataTableEnemyBookBattleCharaSpec::PropertyResist0' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyBookBattleCharaSpec, PropertyResist1) == 0x000069, "Member 'FEndDataTableEnemyBookBattleCharaSpec::PropertyResist1' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyBookBattleCharaSpec, RateDamageResist) == 0x00006A, "Member 'FEndDataTableEnemyBookBattleCharaSpec::RateDamageResist' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyBookBattleCharaSpec, FixDamageResist) == 0x00006B, "Member 'FEndDataTableEnemyBookBattleCharaSpec::FixDamageResist' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyBookBattleCharaSpec, EnemyBookIDPlus) == 0x00006C, "Member 'FEndDataTableEnemyBookBattleCharaSpec::EnemyBookIDPlus' has a wrong offset!");

// ScriptStruct EndGame.EndAnimWeaponInstanceProxy
// 0x0610 (0x0C60 - 0x0650)
struct FEndAnimWeaponInstanceProxy final : public FAnimSingleNodeInstanceProxy
{
public:
	uint8                                         Pad_650[0x610];                                    // 0x0650(0x0610)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndAnimWeaponInstanceProxy) == 0x000010, "Wrong alignment on FEndAnimWeaponInstanceProxy");
static_assert(sizeof(FEndAnimWeaponInstanceProxy) == 0x000C60, "Wrong size on FEndAnimWeaponInstanceProxy");

// ScriptStruct EndGame.SEndAssetLocationSaveData
// 0x0020 (0x0020 - 0x0000)
struct FSEndAssetLocationSaveData final
{
public:
	TArray<uint8>                                 LocationChunkData;                                 // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<uint8>                                 LocationSaveData;                                  // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSEndAssetLocationSaveData) == 0x000008, "Wrong alignment on FSEndAssetLocationSaveData");
static_assert(sizeof(FSEndAssetLocationSaveData) == 0x000020, "Wrong size on FSEndAssetLocationSaveData");
static_assert(offsetof(FSEndAssetLocationSaveData, LocationChunkData) == 0x000000, "Member 'FSEndAssetLocationSaveData::LocationChunkData' has a wrong offset!");
static_assert(offsetof(FSEndAssetLocationSaveData, LocationSaveData) == 0x000010, "Member 'FSEndAssetLocationSaveData::LocationSaveData' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableAction
// 0x0130 (0x0138 - 0x0008)
struct FEndDataTableAction final : public FEndDataTableRowBase
{
public:
	int32                                         UniqueIndex;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Type;                                              // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ExclusionID;                                       // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PriorityOverwrite;                                 // 0x0018(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PriorityNumOverwrite;                              // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 BattlePriority;                                    // 0x0030(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EventPriorityDeclineID;                            // 0x0040(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         StartStateConditionNot_Array;                      // 0x0048(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           StartStateCondition_Array;                         // 0x0058(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           EndStateTriggerList_Array;                         // 0x0068(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           StartStoryFlag_Array;                              // 0x0078(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           EndStoryFlag_Array;                                // 0x0088(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           LocationWorkID_Array;                              // 0x0098(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<uint8>                                 LocationWorkType_Array;                            // 0x00A8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 LocationWorkValue_Array;                           // 0x00B8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         StringArgumentList_Array;                          // 0x00C8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 IntegerArgumentList_Array;                         // 0x00D8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 FloatArgumentList_Array;                           // 0x00E8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 BGMName;                                           // 0x00F8(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BGMNameActionEnd;                                  // 0x0108(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StartSceneChangerID;                               // 0x0118(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EndSceneChangerID;                                 // 0x0120(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SaveNaviBGMInfoID;                                 // 0x0128(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         NaviBGMOff;                                        // 0x0130(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_131[0x7];                                      // 0x0131(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableAction) == 0x000008, "Wrong alignment on FEndDataTableAction");
static_assert(sizeof(FEndDataTableAction) == 0x000138, "Wrong size on FEndDataTableAction");
static_assert(offsetof(FEndDataTableAction, UniqueIndex) == 0x000008, "Member 'FEndDataTableAction::UniqueIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTableAction, Type) == 0x00000C, "Member 'FEndDataTableAction::Type' has a wrong offset!");
static_assert(offsetof(FEndDataTableAction, ExclusionID) == 0x000010, "Member 'FEndDataTableAction::ExclusionID' has a wrong offset!");
static_assert(offsetof(FEndDataTableAction, PriorityOverwrite) == 0x000018, "Member 'FEndDataTableAction::PriorityOverwrite' has a wrong offset!");
static_assert(offsetof(FEndDataTableAction, PriorityNumOverwrite) == 0x000028, "Member 'FEndDataTableAction::PriorityNumOverwrite' has a wrong offset!");
static_assert(offsetof(FEndDataTableAction, BattlePriority) == 0x000030, "Member 'FEndDataTableAction::BattlePriority' has a wrong offset!");
static_assert(offsetof(FEndDataTableAction, EventPriorityDeclineID) == 0x000040, "Member 'FEndDataTableAction::EventPriorityDeclineID' has a wrong offset!");
static_assert(offsetof(FEndDataTableAction, StartStateConditionNot_Array) == 0x000048, "Member 'FEndDataTableAction::StartStateConditionNot_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableAction, StartStateCondition_Array) == 0x000058, "Member 'FEndDataTableAction::StartStateCondition_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableAction, EndStateTriggerList_Array) == 0x000068, "Member 'FEndDataTableAction::EndStateTriggerList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableAction, StartStoryFlag_Array) == 0x000078, "Member 'FEndDataTableAction::StartStoryFlag_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableAction, EndStoryFlag_Array) == 0x000088, "Member 'FEndDataTableAction::EndStoryFlag_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableAction, LocationWorkID_Array) == 0x000098, "Member 'FEndDataTableAction::LocationWorkID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableAction, LocationWorkType_Array) == 0x0000A8, "Member 'FEndDataTableAction::LocationWorkType_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableAction, LocationWorkValue_Array) == 0x0000B8, "Member 'FEndDataTableAction::LocationWorkValue_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableAction, StringArgumentList_Array) == 0x0000C8, "Member 'FEndDataTableAction::StringArgumentList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableAction, IntegerArgumentList_Array) == 0x0000D8, "Member 'FEndDataTableAction::IntegerArgumentList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableAction, FloatArgumentList_Array) == 0x0000E8, "Member 'FEndDataTableAction::FloatArgumentList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableAction, BGMName) == 0x0000F8, "Member 'FEndDataTableAction::BGMName' has a wrong offset!");
static_assert(offsetof(FEndDataTableAction, BGMNameActionEnd) == 0x000108, "Member 'FEndDataTableAction::BGMNameActionEnd' has a wrong offset!");
static_assert(offsetof(FEndDataTableAction, StartSceneChangerID) == 0x000118, "Member 'FEndDataTableAction::StartSceneChangerID' has a wrong offset!");
static_assert(offsetof(FEndDataTableAction, EndSceneChangerID) == 0x000120, "Member 'FEndDataTableAction::EndSceneChangerID' has a wrong offset!");
static_assert(offsetof(FEndDataTableAction, SaveNaviBGMInfoID) == 0x000128, "Member 'FEndDataTableAction::SaveNaviBGMInfoID' has a wrong offset!");
static_assert(offsetof(FEndDataTableAction, NaviBGMOff) == 0x000130, "Member 'FEndDataTableAction::NaviBGMOff' has a wrong offset!");

// ScriptStruct EndGame.EndBalancingSolveBone
// 0x0010 (0x0010 - 0x0000)
struct FEndBalancingSolveBone final
{
public:
	class FName                                   BoneName;                                          // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AdditiveRate;                                      // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAddPitch;                                         // 0x000C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAddAbsPitch;                                      // 0x000D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAddRoll;                                          // 0x000E(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F[0x1];                                        // 0x000F(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBalancingSolveBone) == 0x000004, "Wrong alignment on FEndBalancingSolveBone");
static_assert(sizeof(FEndBalancingSolveBone) == 0x000010, "Wrong size on FEndBalancingSolveBone");
static_assert(offsetof(FEndBalancingSolveBone, BoneName) == 0x000000, "Member 'FEndBalancingSolveBone::BoneName' has a wrong offset!");
static_assert(offsetof(FEndBalancingSolveBone, AdditiveRate) == 0x000008, "Member 'FEndBalancingSolveBone::AdditiveRate' has a wrong offset!");
static_assert(offsetof(FEndBalancingSolveBone, bAddPitch) == 0x00000C, "Member 'FEndBalancingSolveBone::bAddPitch' has a wrong offset!");
static_assert(offsetof(FEndBalancingSolveBone, bAddAbsPitch) == 0x00000D, "Member 'FEndBalancingSolveBone::bAddAbsPitch' has a wrong offset!");
static_assert(offsetof(FEndBalancingSolveBone, bAddRoll) == 0x00000E, "Member 'FEndBalancingSolveBone::bAddRoll' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableLoadingTips
// 0x0050 (0x0058 - 0x0008)
struct FEndDataTableLoadingTips final : public FEndDataTableRowBase
{
public:
	uint8                                         IsUseLayerIndex;                                   // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 LayerIndex_Array;                                  // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         ReferenceIndex;                                    // 0x0020(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         ViewTitle_Array;                                   // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         ViewText_Array;                                    // 0x0038(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         ImagePath_Array;                                   // 0x0048(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableLoadingTips) == 0x000008, "Wrong alignment on FEndDataTableLoadingTips");
static_assert(sizeof(FEndDataTableLoadingTips) == 0x000058, "Wrong size on FEndDataTableLoadingTips");
static_assert(offsetof(FEndDataTableLoadingTips, IsUseLayerIndex) == 0x000008, "Member 'FEndDataTableLoadingTips::IsUseLayerIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTableLoadingTips, LayerIndex_Array) == 0x000010, "Member 'FEndDataTableLoadingTips::LayerIndex_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableLoadingTips, ReferenceIndex) == 0x000020, "Member 'FEndDataTableLoadingTips::ReferenceIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTableLoadingTips, ViewTitle_Array) == 0x000028, "Member 'FEndDataTableLoadingTips::ViewTitle_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableLoadingTips, ViewText_Array) == 0x000038, "Member 'FEndDataTableLoadingTips::ViewText_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableLoadingTips, ImagePath_Array) == 0x000048, "Member 'FEndDataTableLoadingTips::ImagePath_Array' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableStoryFlag
// 0x0018 (0x0020 - 0x0008)
struct FEndDataTableStoryFlag final : public FEndDataTableRowBase
{
public:
	int32                                         UniqueIndex;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ChapterID;                                         // 0x000C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ExtraType00;                                       // 0x0014(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ExtraType01;                                       // 0x0015(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ExtraType02;                                       // 0x0016(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ExtraType03;                                       // 0x0017(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FuncType;                                          // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableStoryFlag) == 0x000008, "Wrong alignment on FEndDataTableStoryFlag");
static_assert(sizeof(FEndDataTableStoryFlag) == 0x000020, "Wrong size on FEndDataTableStoryFlag");
static_assert(offsetof(FEndDataTableStoryFlag, UniqueIndex) == 0x000008, "Member 'FEndDataTableStoryFlag::UniqueIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTableStoryFlag, ChapterID) == 0x00000C, "Member 'FEndDataTableStoryFlag::ChapterID' has a wrong offset!");
static_assert(offsetof(FEndDataTableStoryFlag, ExtraType00) == 0x000014, "Member 'FEndDataTableStoryFlag::ExtraType00' has a wrong offset!");
static_assert(offsetof(FEndDataTableStoryFlag, ExtraType01) == 0x000015, "Member 'FEndDataTableStoryFlag::ExtraType01' has a wrong offset!");
static_assert(offsetof(FEndDataTableStoryFlag, ExtraType02) == 0x000016, "Member 'FEndDataTableStoryFlag::ExtraType02' has a wrong offset!");
static_assert(offsetof(FEndDataTableStoryFlag, ExtraType03) == 0x000017, "Member 'FEndDataTableStoryFlag::ExtraType03' has a wrong offset!");
static_assert(offsetof(FEndDataTableStoryFlag, FuncType) == 0x000018, "Member 'FEndDataTableStoryFlag::FuncType' has a wrong offset!");

// ScriptStruct EndGame.EndRangeSwitchParam
// 0x000C (0x000C - 0x0000)
struct FEndRangeSwitchParam final
{
public:
	float                                         Min;                                               // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Max;                                               // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Equal;                                             // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndRangeSwitchParam) == 0x000004, "Wrong alignment on FEndRangeSwitchParam");
static_assert(sizeof(FEndRangeSwitchParam) == 0x00000C, "Wrong size on FEndRangeSwitchParam");
static_assert(offsetof(FEndRangeSwitchParam, Min) == 0x000000, "Member 'FEndRangeSwitchParam::Min' has a wrong offset!");
static_assert(offsetof(FEndRangeSwitchParam, Max) == 0x000004, "Member 'FEndRangeSwitchParam::Max' has a wrong offset!");
static_assert(offsetof(FEndRangeSwitchParam, Equal) == 0x000008, "Member 'FEndRangeSwitchParam::Equal' has a wrong offset!");

// ScriptStruct EndGame.EndGlyphInfo
// 0x0010 (0x0010 - 0x0000)
struct FEndGlyphInfo final
{
public:
	uint16                                        TextureIndex;                                      // 0x0000(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        TextureX;                                          // 0x0002(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        TextureY;                                          // 0x0004(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        SizeX;                                             // 0x0006(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        SizeY;                                             // 0x0008(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int16                                         HorizontalOffset;                                  // 0x000A(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int16                                         VerticalOffset;                                    // 0x000C(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int16                                         XAdvance;                                          // 0x000E(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndGlyphInfo) == 0x000002, "Wrong alignment on FEndGlyphInfo");
static_assert(sizeof(FEndGlyphInfo) == 0x000010, "Wrong size on FEndGlyphInfo");
static_assert(offsetof(FEndGlyphInfo, TextureIndex) == 0x000000, "Member 'FEndGlyphInfo::TextureIndex' has a wrong offset!");
static_assert(offsetof(FEndGlyphInfo, TextureX) == 0x000002, "Member 'FEndGlyphInfo::TextureX' has a wrong offset!");
static_assert(offsetof(FEndGlyphInfo, TextureY) == 0x000004, "Member 'FEndGlyphInfo::TextureY' has a wrong offset!");
static_assert(offsetof(FEndGlyphInfo, SizeX) == 0x000006, "Member 'FEndGlyphInfo::SizeX' has a wrong offset!");
static_assert(offsetof(FEndGlyphInfo, SizeY) == 0x000008, "Member 'FEndGlyphInfo::SizeY' has a wrong offset!");
static_assert(offsetof(FEndGlyphInfo, HorizontalOffset) == 0x00000A, "Member 'FEndGlyphInfo::HorizontalOffset' has a wrong offset!");
static_assert(offsetof(FEndGlyphInfo, VerticalOffset) == 0x00000C, "Member 'FEndGlyphInfo::VerticalOffset' has a wrong offset!");
static_assert(offsetof(FEndGlyphInfo, XAdvance) == 0x00000E, "Member 'FEndGlyphInfo::XAdvance' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableBattleReportCondition
// 0x0030 (0x0038 - 0x0008)
struct FEndDataTableBattleReportCondition final : public FEndDataTableRowBase
{
public:
	uint8                                         CheckType;                                         // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ConditionType;                                     // 0x0009(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ConditionTableID;                                  // 0x000C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ConditionValue;                                    // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         OperatorSymbol;                                    // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   AddCheckConditionID;                               // 0x001C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ViewString;                                        // 0x0028(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableBattleReportCondition) == 0x000008, "Wrong alignment on FEndDataTableBattleReportCondition");
static_assert(sizeof(FEndDataTableBattleReportCondition) == 0x000038, "Wrong size on FEndDataTableBattleReportCondition");
static_assert(offsetof(FEndDataTableBattleReportCondition, CheckType) == 0x000008, "Member 'FEndDataTableBattleReportCondition::CheckType' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleReportCondition, ConditionType) == 0x000009, "Member 'FEndDataTableBattleReportCondition::ConditionType' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleReportCondition, ConditionTableID) == 0x00000C, "Member 'FEndDataTableBattleReportCondition::ConditionTableID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleReportCondition, ConditionValue) == 0x000014, "Member 'FEndDataTableBattleReportCondition::ConditionValue' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleReportCondition, OperatorSymbol) == 0x000018, "Member 'FEndDataTableBattleReportCondition::OperatorSymbol' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleReportCondition, AddCheckConditionID) == 0x00001C, "Member 'FEndDataTableBattleReportCondition::AddCheckConditionID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleReportCondition, ViewString) == 0x000028, "Member 'FEndDataTableBattleReportCondition::ViewString' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableCutSceneListLevel
// 0x0070 (0x0078 - 0x0008)
struct FEndDataTableCutSceneListLevel final : public FEndDataTableRowBase
{
public:
	int32                                         BattleStart;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         SpawnActorWait;                                    // 0x000C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           IgnoreLevelActor_Array;                            // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         BlendStartType;                                    // 0x0020(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         BlendEndType;                                      // 0x0021(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           StopAIActorName_Array;                             // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           AnimationSequenceActorName_Array;                  // 0x0038(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           AnimationSequenceState_Array;                      // 0x0048(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           LoadSaveRestorePositionActorName_Array;            // 0x0058(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           LoadSaveRestorePositionTargetPoint_Array;          // 0x0068(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableCutSceneListLevel) == 0x000008, "Wrong alignment on FEndDataTableCutSceneListLevel");
static_assert(sizeof(FEndDataTableCutSceneListLevel) == 0x000078, "Wrong size on FEndDataTableCutSceneListLevel");
static_assert(offsetof(FEndDataTableCutSceneListLevel, BattleStart) == 0x000008, "Member 'FEndDataTableCutSceneListLevel::BattleStart' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneListLevel, SpawnActorWait) == 0x00000C, "Member 'FEndDataTableCutSceneListLevel::SpawnActorWait' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneListLevel, IgnoreLevelActor_Array) == 0x000010, "Member 'FEndDataTableCutSceneListLevel::IgnoreLevelActor_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneListLevel, BlendStartType) == 0x000020, "Member 'FEndDataTableCutSceneListLevel::BlendStartType' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneListLevel, BlendEndType) == 0x000021, "Member 'FEndDataTableCutSceneListLevel::BlendEndType' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneListLevel, StopAIActorName_Array) == 0x000028, "Member 'FEndDataTableCutSceneListLevel::StopAIActorName_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneListLevel, AnimationSequenceActorName_Array) == 0x000038, "Member 'FEndDataTableCutSceneListLevel::AnimationSequenceActorName_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneListLevel, AnimationSequenceState_Array) == 0x000048, "Member 'FEndDataTableCutSceneListLevel::AnimationSequenceState_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneListLevel, LoadSaveRestorePositionActorName_Array) == 0x000058, "Member 'FEndDataTableCutSceneListLevel::LoadSaveRestorePositionActorName_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneListLevel, LoadSaveRestorePositionTargetPoint_Array) == 0x000068, "Member 'FEndDataTableCutSceneListLevel::LoadSaveRestorePositionTargetPoint_Array' has a wrong offset!");

// ScriptStruct EndGame.EndDataTablePlannerEventChara
// 0x0010 (0x0018 - 0x0008)
struct FEndDataTablePlannerEventChara final : public FEndDataTableRowBase
{
public:
	class FName                                   ActorName;                                         // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CharaSpecName;                                     // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTablePlannerEventChara) == 0x000008, "Wrong alignment on FEndDataTablePlannerEventChara");
static_assert(sizeof(FEndDataTablePlannerEventChara) == 0x000018, "Wrong size on FEndDataTablePlannerEventChara");
static_assert(offsetof(FEndDataTablePlannerEventChara, ActorName) == 0x000008, "Member 'FEndDataTablePlannerEventChara::ActorName' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlannerEventChara, CharaSpecName) == 0x000010, "Member 'FEndDataTablePlannerEventChara::CharaSpecName' has a wrong offset!");

// ScriptStruct EndGame.EndBattleSummonMinRangeLimitAbility
// 0x000C (0x000C - 0x0000)
struct FEndBattleSummonMinRangeLimitAbility final
{
public:
	class FName                                   AbilityID;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinRange;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndBattleSummonMinRangeLimitAbility) == 0x000004, "Wrong alignment on FEndBattleSummonMinRangeLimitAbility");
static_assert(sizeof(FEndBattleSummonMinRangeLimitAbility) == 0x00000C, "Wrong size on FEndBattleSummonMinRangeLimitAbility");
static_assert(offsetof(FEndBattleSummonMinRangeLimitAbility, AbilityID) == 0x000000, "Member 'FEndBattleSummonMinRangeLimitAbility::AbilityID' has a wrong offset!");
static_assert(offsetof(FEndBattleSummonMinRangeLimitAbility, MinRange) == 0x000008, "Member 'FEndBattleSummonMinRangeLimitAbility::MinRange' has a wrong offset!");

// ScriptStruct EndGame.EndBattleAIMateriaParam
// 0x0014 (0x0014 - 0x0000)
struct FEndBattleAIMateriaParam final
{
public:
	int32                                         LV;                                                // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name;                                              // 0x0004(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Linked;                                            // 0x000C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LinkedSlot;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndBattleAIMateriaParam) == 0x000004, "Wrong alignment on FEndBattleAIMateriaParam");
static_assert(sizeof(FEndBattleAIMateriaParam) == 0x000014, "Wrong size on FEndBattleAIMateriaParam");
static_assert(offsetof(FEndBattleAIMateriaParam, LV) == 0x000000, "Member 'FEndBattleAIMateriaParam::LV' has a wrong offset!");
static_assert(offsetof(FEndBattleAIMateriaParam, Name) == 0x000004, "Member 'FEndBattleAIMateriaParam::Name' has a wrong offset!");
static_assert(offsetof(FEndBattleAIMateriaParam, Linked) == 0x00000C, "Member 'FEndBattleAIMateriaParam::Linked' has a wrong offset!");
static_assert(offsetof(FEndBattleAIMateriaParam, LinkedSlot) == 0x000010, "Member 'FEndBattleAIMateriaParam::LinkedSlot' has a wrong offset!");

// ScriptStruct EndGame.EndRamuhCoreKnockbackParam
// 0x000C (0x000C - 0x0000)
struct FEndRamuhCoreKnockbackParam final
{
public:
	EEndBattleDamageSourceHitReactionType         HitReactionType;                                   // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InitialVelocity;                                   // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NegativeAcceleration;                              // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndRamuhCoreKnockbackParam) == 0x000004, "Wrong alignment on FEndRamuhCoreKnockbackParam");
static_assert(sizeof(FEndRamuhCoreKnockbackParam) == 0x00000C, "Wrong size on FEndRamuhCoreKnockbackParam");
static_assert(offsetof(FEndRamuhCoreKnockbackParam, HitReactionType) == 0x000000, "Member 'FEndRamuhCoreKnockbackParam::HitReactionType' has a wrong offset!");
static_assert(offsetof(FEndRamuhCoreKnockbackParam, InitialVelocity) == 0x000004, "Member 'FEndRamuhCoreKnockbackParam::InitialVelocity' has a wrong offset!");
static_assert(offsetof(FEndRamuhCoreKnockbackParam, NegativeAcceleration) == 0x000008, "Member 'FEndRamuhCoreKnockbackParam::NegativeAcceleration' has a wrong offset!");

// ScriptStruct EndGame.EndBattleAIRoleParam
// 0x0024 (0x0024 - 0x0000)
struct FEndBattleAIRoleParam final
{
public:
	bool                                          bRoleUpdateSetting;                                // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DistanceNear;                                      // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceConfront;                                  // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceFar;                                       // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanPositionAngle;                                 // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PositionAngle;                                     // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Strafe;                                            // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DistanceStrafe;                                    // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ATBSpeed;                                          // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndBattleAIRoleParam) == 0x000004, "Wrong alignment on FEndBattleAIRoleParam");
static_assert(sizeof(FEndBattleAIRoleParam) == 0x000024, "Wrong size on FEndBattleAIRoleParam");
static_assert(offsetof(FEndBattleAIRoleParam, bRoleUpdateSetting) == 0x000000, "Member 'FEndBattleAIRoleParam::bRoleUpdateSetting' has a wrong offset!");
static_assert(offsetof(FEndBattleAIRoleParam, DistanceNear) == 0x000004, "Member 'FEndBattleAIRoleParam::DistanceNear' has a wrong offset!");
static_assert(offsetof(FEndBattleAIRoleParam, DistanceConfront) == 0x000008, "Member 'FEndBattleAIRoleParam::DistanceConfront' has a wrong offset!");
static_assert(offsetof(FEndBattleAIRoleParam, DistanceFar) == 0x00000C, "Member 'FEndBattleAIRoleParam::DistanceFar' has a wrong offset!");
static_assert(offsetof(FEndBattleAIRoleParam, bCanPositionAngle) == 0x000010, "Member 'FEndBattleAIRoleParam::bCanPositionAngle' has a wrong offset!");
static_assert(offsetof(FEndBattleAIRoleParam, PositionAngle) == 0x000014, "Member 'FEndBattleAIRoleParam::PositionAngle' has a wrong offset!");
static_assert(offsetof(FEndBattleAIRoleParam, Strafe) == 0x000018, "Member 'FEndBattleAIRoleParam::Strafe' has a wrong offset!");
static_assert(offsetof(FEndBattleAIRoleParam, DistanceStrafe) == 0x00001C, "Member 'FEndBattleAIRoleParam::DistanceStrafe' has a wrong offset!");
static_assert(offsetof(FEndBattleAIRoleParam, ATBSpeed) == 0x000020, "Member 'FEndBattleAIRoleParam::ATBSpeed' has a wrong offset!");

// ScriptStruct EndGame.EndBattleAIRoleSetting
// 0x01A0 (0x01A0 - 0x0000)
struct FEndBattleAIRoleSetting final
{
public:
	EEndAiBattleRole                              OverrideRole;                                      // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OverrideInMin;                                     // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OverrideInMax;                                     // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OverrideOutMin;                                    // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OverrideOutMax;                                    // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEndBattleAIRoleParam                  Front;                                             // 0x0014(0x0024)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FEndBattleAIRoleParam                  Middle;                                            // 0x0038(0x0024)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FEndBattleAIRoleParam                  Back;                                              // 0x005C(0x0024)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FEndBattleAIRoleParam                  Shield;                                            // 0x0080(0x0024)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FEndBattleAIRoleParam                  Theif;                                             // 0x00A4(0x0024)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FEndBattleAIRoleParam                  PhysicsFrontDD;                                    // 0x00C8(0x0024)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FEndBattleAIRoleParam                  PhysicsBackDD;                                     // 0x00EC(0x0024)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FEndBattleAIRoleParam                  Unique1;                                           // 0x0110(0x0024)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FEndBattleAIRoleParam                  Unique2;                                           // 0x0134(0x0024)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FEndBattleAIRoleParam                  Unique3;                                           // 0x0158(0x0024)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FEndBattleAIRoleParam                  Unique4;                                           // 0x017C(0x0024)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndBattleAIRoleSetting) == 0x000004, "Wrong alignment on FEndBattleAIRoleSetting");
static_assert(sizeof(FEndBattleAIRoleSetting) == 0x0001A0, "Wrong size on FEndBattleAIRoleSetting");
static_assert(offsetof(FEndBattleAIRoleSetting, OverrideRole) == 0x000000, "Member 'FEndBattleAIRoleSetting::OverrideRole' has a wrong offset!");
static_assert(offsetof(FEndBattleAIRoleSetting, OverrideInMin) == 0x000004, "Member 'FEndBattleAIRoleSetting::OverrideInMin' has a wrong offset!");
static_assert(offsetof(FEndBattleAIRoleSetting, OverrideInMax) == 0x000008, "Member 'FEndBattleAIRoleSetting::OverrideInMax' has a wrong offset!");
static_assert(offsetof(FEndBattleAIRoleSetting, OverrideOutMin) == 0x00000C, "Member 'FEndBattleAIRoleSetting::OverrideOutMin' has a wrong offset!");
static_assert(offsetof(FEndBattleAIRoleSetting, OverrideOutMax) == 0x000010, "Member 'FEndBattleAIRoleSetting::OverrideOutMax' has a wrong offset!");
static_assert(offsetof(FEndBattleAIRoleSetting, Front) == 0x000014, "Member 'FEndBattleAIRoleSetting::Front' has a wrong offset!");
static_assert(offsetof(FEndBattleAIRoleSetting, Middle) == 0x000038, "Member 'FEndBattleAIRoleSetting::Middle' has a wrong offset!");
static_assert(offsetof(FEndBattleAIRoleSetting, Back) == 0x00005C, "Member 'FEndBattleAIRoleSetting::Back' has a wrong offset!");
static_assert(offsetof(FEndBattleAIRoleSetting, Shield) == 0x000080, "Member 'FEndBattleAIRoleSetting::Shield' has a wrong offset!");
static_assert(offsetof(FEndBattleAIRoleSetting, Theif) == 0x0000A4, "Member 'FEndBattleAIRoleSetting::Theif' has a wrong offset!");
static_assert(offsetof(FEndBattleAIRoleSetting, PhysicsFrontDD) == 0x0000C8, "Member 'FEndBattleAIRoleSetting::PhysicsFrontDD' has a wrong offset!");
static_assert(offsetof(FEndBattleAIRoleSetting, PhysicsBackDD) == 0x0000EC, "Member 'FEndBattleAIRoleSetting::PhysicsBackDD' has a wrong offset!");
static_assert(offsetof(FEndBattleAIRoleSetting, Unique1) == 0x000110, "Member 'FEndBattleAIRoleSetting::Unique1' has a wrong offset!");
static_assert(offsetof(FEndBattleAIRoleSetting, Unique2) == 0x000134, "Member 'FEndBattleAIRoleSetting::Unique2' has a wrong offset!");
static_assert(offsetof(FEndBattleAIRoleSetting, Unique3) == 0x000158, "Member 'FEndBattleAIRoleSetting::Unique3' has a wrong offset!");
static_assert(offsetof(FEndBattleAIRoleSetting, Unique4) == 0x00017C, "Member 'FEndBattleAIRoleSetting::Unique4' has a wrong offset!");

// ScriptStruct EndGame.EndBattleAIQuantityParam
// 0x0008 (0x0008 - 0x0000)
struct FEndBattleAIQuantityParam final
{
public:
	bool                                          bConstant;                                         // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Quantity;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndBattleAIQuantityParam) == 0x000004, "Wrong alignment on FEndBattleAIQuantityParam");
static_assert(sizeof(FEndBattleAIQuantityParam) == 0x000008, "Wrong size on FEndBattleAIQuantityParam");
static_assert(offsetof(FEndBattleAIQuantityParam, bConstant) == 0x000000, "Member 'FEndBattleAIQuantityParam::bConstant' has a wrong offset!");
static_assert(offsetof(FEndBattleAIQuantityParam, Quantity) == 0x000004, "Member 'FEndBattleAIQuantityParam::Quantity' has a wrong offset!");

// ScriptStruct EndGame.EndBikeAIFunnelMoveParameter
// 0x0028 (0x0028 - 0x0000)
struct FEndBikeAIFunnelMoveParameter final
{
public:
	struct FVector                                BaseOffset;                                        // 0x0000(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ApproachRate;                                      // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LimitZ;                                            // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LimitXY;                                           // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurveInterval;                                     // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveVector*                           CurveAsset;                                        // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndBikeAIFunnelMoveParameter) == 0x000008, "Wrong alignment on FEndBikeAIFunnelMoveParameter");
static_assert(sizeof(FEndBikeAIFunnelMoveParameter) == 0x000028, "Wrong size on FEndBikeAIFunnelMoveParameter");
static_assert(offsetof(FEndBikeAIFunnelMoveParameter, BaseOffset) == 0x000000, "Member 'FEndBikeAIFunnelMoveParameter::BaseOffset' has a wrong offset!");
static_assert(offsetof(FEndBikeAIFunnelMoveParameter, ApproachRate) == 0x00000C, "Member 'FEndBikeAIFunnelMoveParameter::ApproachRate' has a wrong offset!");
static_assert(offsetof(FEndBikeAIFunnelMoveParameter, LimitZ) == 0x000010, "Member 'FEndBikeAIFunnelMoveParameter::LimitZ' has a wrong offset!");
static_assert(offsetof(FEndBikeAIFunnelMoveParameter, LimitXY) == 0x000014, "Member 'FEndBikeAIFunnelMoveParameter::LimitXY' has a wrong offset!");
static_assert(offsetof(FEndBikeAIFunnelMoveParameter, CurveInterval) == 0x000018, "Member 'FEndBikeAIFunnelMoveParameter::CurveInterval' has a wrong offset!");
static_assert(offsetof(FEndBikeAIFunnelMoveParameter, CurveAsset) == 0x000020, "Member 'FEndBikeAIFunnelMoveParameter::CurveAsset' has a wrong offset!");

// ScriptStruct EndGame.NavAreaPolyData
// 0x00C8 (0x00C8 - 0x0000)
struct alignas(0x08) FNavAreaPolyData final
{
public:
	uint8                                         Pad_0[0xC8];                                       // 0x0000(0x00C8)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNavAreaPolyData) == 0x000008, "Wrong alignment on FNavAreaPolyData");
static_assert(sizeof(FNavAreaPolyData) == 0x0000C8, "Wrong size on FNavAreaPolyData");

// ScriptStruct EndGame.SummonWarpPointMoveOnlyBattle
// 0x000C (0x000C - 0x0000)
struct FSummonWarpPointMoveOnlyBattle final
{
public:
	class FName                                   BattleSceneID;                                     // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Phase;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSummonWarpPointMoveOnlyBattle) == 0x000004, "Wrong alignment on FSummonWarpPointMoveOnlyBattle");
static_assert(sizeof(FSummonWarpPointMoveOnlyBattle) == 0x00000C, "Wrong size on FSummonWarpPointMoveOnlyBattle");
static_assert(offsetof(FSummonWarpPointMoveOnlyBattle, BattleSceneID) == 0x000000, "Member 'FSummonWarpPointMoveOnlyBattle::BattleSceneID' has a wrong offset!");
static_assert(offsetof(FSummonWarpPointMoveOnlyBattle, Phase) == 0x000008, "Member 'FSummonWarpPointMoveOnlyBattle::Phase' has a wrong offset!");

// ScriptStruct EndGame.SummonComboAbility
// 0x0018 (0x0018 - 0x0000)
struct FSummonComboAbility final
{
public:
	class FName                                   ComboID;                                           // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           AbilityList;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSummonComboAbility) == 0x000008, "Wrong alignment on FSummonComboAbility");
static_assert(sizeof(FSummonComboAbility) == 0x000018, "Wrong size on FSummonComboAbility");
static_assert(offsetof(FSummonComboAbility, ComboID) == 0x000000, "Member 'FSummonComboAbility::ComboID' has a wrong offset!");
static_assert(offsetof(FSummonComboAbility, AbilityList) == 0x000008, "Member 'FSummonComboAbility::AbilityList' has a wrong offset!");

// ScriptStruct EndGame.EndBattleAIEB0021Counter
// 0x002C (0x002C - 0x0000)
struct FEndBattleAIEB0021Counter final
{
public:
	class FName                                   Action;                                            // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Surpass;                                           // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Trigger;                                           // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RangeMin;                                          // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RangeMax;                                          // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ViewRange;                                         // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SurpassTrigger;                                    // 0x0024(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndBattleAIEB0021Counter) == 0x000004, "Wrong alignment on FEndBattleAIEB0021Counter");
static_assert(sizeof(FEndBattleAIEB0021Counter) == 0x00002C, "Wrong size on FEndBattleAIEB0021Counter");
static_assert(offsetof(FEndBattleAIEB0021Counter, Action) == 0x000000, "Member 'FEndBattleAIEB0021Counter::Action' has a wrong offset!");
static_assert(offsetof(FEndBattleAIEB0021Counter, Surpass) == 0x000008, "Member 'FEndBattleAIEB0021Counter::Surpass' has a wrong offset!");
static_assert(offsetof(FEndBattleAIEB0021Counter, Trigger) == 0x000010, "Member 'FEndBattleAIEB0021Counter::Trigger' has a wrong offset!");
static_assert(offsetof(FEndBattleAIEB0021Counter, RangeMin) == 0x000018, "Member 'FEndBattleAIEB0021Counter::RangeMin' has a wrong offset!");
static_assert(offsetof(FEndBattleAIEB0021Counter, RangeMax) == 0x00001C, "Member 'FEndBattleAIEB0021Counter::RangeMax' has a wrong offset!");
static_assert(offsetof(FEndBattleAIEB0021Counter, ViewRange) == 0x000020, "Member 'FEndBattleAIEB0021Counter::ViewRange' has a wrong offset!");
static_assert(offsetof(FEndBattleAIEB0021Counter, SurpassTrigger) == 0x000024, "Member 'FEndBattleAIEB0021Counter::SurpassTrigger' has a wrong offset!");

// ScriptStruct EndGame.EndBattleAIDangerArea
// 0x0030 (0x0030 - 0x0000)
struct FEndBattleAIDangerArea final
{
public:
	EEndBattleAIDangerAreaType                    DangerAreaType;                                    // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   AttachSocketName;                                  // 0x0004(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CenterLocation;                                    // 0x000C(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Direction;                                         // 0x0018(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Length;                                            // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Width;                                             // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndBattleAIDangerArea) == 0x000004, "Wrong alignment on FEndBattleAIDangerArea");
static_assert(sizeof(FEndBattleAIDangerArea) == 0x000030, "Wrong size on FEndBattleAIDangerArea");
static_assert(offsetof(FEndBattleAIDangerArea, DangerAreaType) == 0x000000, "Member 'FEndBattleAIDangerArea::DangerAreaType' has a wrong offset!");
static_assert(offsetof(FEndBattleAIDangerArea, AttachSocketName) == 0x000004, "Member 'FEndBattleAIDangerArea::AttachSocketName' has a wrong offset!");
static_assert(offsetof(FEndBattleAIDangerArea, CenterLocation) == 0x00000C, "Member 'FEndBattleAIDangerArea::CenterLocation' has a wrong offset!");
static_assert(offsetof(FEndBattleAIDangerArea, Direction) == 0x000018, "Member 'FEndBattleAIDangerArea::Direction' has a wrong offset!");
static_assert(offsetof(FEndBattleAIDangerArea, Radius) == 0x000024, "Member 'FEndBattleAIDangerArea::Radius' has a wrong offset!");
static_assert(offsetof(FEndBattleAIDangerArea, Length) == 0x000028, "Member 'FEndBattleAIDangerArea::Length' has a wrong offset!");
static_assert(offsetof(FEndBattleAIDangerArea, Width) == 0x00002C, "Member 'FEndBattleAIDangerArea::Width' has a wrong offset!");

// ScriptStruct EndGame.EndBattleAIDangerWarningParam
// 0x0030 (0x0030 - 0x0000)
struct FEndBattleAIDangerWarningParam final
{
public:
	class AEndCharacter*                          Instigator;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FEndBattleAIDangerArea>         AreaList;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          DebugDraw;                                         // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0xF];                                       // 0x0021(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBattleAIDangerWarningParam) == 0x000008, "Wrong alignment on FEndBattleAIDangerWarningParam");
static_assert(sizeof(FEndBattleAIDangerWarningParam) == 0x000030, "Wrong size on FEndBattleAIDangerWarningParam");
static_assert(offsetof(FEndBattleAIDangerWarningParam, Instigator) == 0x000000, "Member 'FEndBattleAIDangerWarningParam::Instigator' has a wrong offset!");
static_assert(offsetof(FEndBattleAIDangerWarningParam, Duration) == 0x000008, "Member 'FEndBattleAIDangerWarningParam::Duration' has a wrong offset!");
static_assert(offsetof(FEndBattleAIDangerWarningParam, AreaList) == 0x000010, "Member 'FEndBattleAIDangerWarningParam::AreaList' has a wrong offset!");
static_assert(offsetof(FEndBattleAIDangerWarningParam, DebugDraw) == 0x000020, "Member 'FEndBattleAIDangerWarningParam::DebugDraw' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableEnemyGil
// 0x0010 (0x0018 - 0x0008)
struct FEndDataTableEnemyGil final : public FEndDataTableRowBase
{
public:
	TArray<int32>                                 Value_Array;                                       // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableEnemyGil) == 0x000008, "Wrong alignment on FEndDataTableEnemyGil");
static_assert(sizeof(FEndDataTableEnemyGil) == 0x000018, "Wrong size on FEndDataTableEnemyGil");
static_assert(offsetof(FEndDataTableEnemyGil, Value_Array) == 0x000008, "Member 'FEndDataTableEnemyGil::Value_Array' has a wrong offset!");

// ScriptStruct EndGame.EndBattleAITargetChoosingParam
// 0x0028 (0x0028 - 0x0000)
struct FEndBattleAITargetChoosingParam final
{
public:
	TArray<class AEndCharacter*>                  AssignedTargets;                                   // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<ETargetChoosingTag>                    PriorityTagList;                                   // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	ETargetChoosingSort                           SortMethod;                                        // 0x0020(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBattleAITargetChoosingParam) == 0x000008, "Wrong alignment on FEndBattleAITargetChoosingParam");
static_assert(sizeof(FEndBattleAITargetChoosingParam) == 0x000028, "Wrong size on FEndBattleAITargetChoosingParam");
static_assert(offsetof(FEndBattleAITargetChoosingParam, AssignedTargets) == 0x000000, "Member 'FEndBattleAITargetChoosingParam::AssignedTargets' has a wrong offset!");
static_assert(offsetof(FEndBattleAITargetChoosingParam, PriorityTagList) == 0x000010, "Member 'FEndBattleAITargetChoosingParam::PriorityTagList' has a wrong offset!");
static_assert(offsetof(FEndBattleAITargetChoosingParam, SortMethod) == 0x000020, "Member 'FEndBattleAITargetChoosingParam::SortMethod' has a wrong offset!");

// ScriptStruct EndGame.BattleParamShortRange
// 0x0018 (0x0018 - 0x0000)
struct FBattleParamShortRange final
{
public:
	TArray<float>                                 ComboProbabilities;                                // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         CombatDistance;                                    // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CautionDistance;                                   // 0x0014(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBattleParamShortRange) == 0x000008, "Wrong alignment on FBattleParamShortRange");
static_assert(sizeof(FBattleParamShortRange) == 0x000018, "Wrong size on FBattleParamShortRange");
static_assert(offsetof(FBattleParamShortRange, ComboProbabilities) == 0x000000, "Member 'FBattleParamShortRange::ComboProbabilities' has a wrong offset!");
static_assert(offsetof(FBattleParamShortRange, CombatDistance) == 0x000010, "Member 'FBattleParamShortRange::CombatDistance' has a wrong offset!");
static_assert(offsetof(FBattleParamShortRange, CautionDistance) == 0x000014, "Member 'FBattleParamShortRange::CautionDistance' has a wrong offset!");

// ScriptStruct EndGame.BattleParamLongRange
// 0x0010 (0x0010 - 0x0000)
struct FBattleParamLongRange final
{
public:
	float                                         ContinuousAttackTimeMax;                           // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ContinuousAttackTimeMin;                           // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CombatDistance;                                    // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CautionDistance;                                   // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBattleParamLongRange) == 0x000004, "Wrong alignment on FBattleParamLongRange");
static_assert(sizeof(FBattleParamLongRange) == 0x000010, "Wrong size on FBattleParamLongRange");
static_assert(offsetof(FBattleParamLongRange, ContinuousAttackTimeMax) == 0x000000, "Member 'FBattleParamLongRange::ContinuousAttackTimeMax' has a wrong offset!");
static_assert(offsetof(FBattleParamLongRange, ContinuousAttackTimeMin) == 0x000004, "Member 'FBattleParamLongRange::ContinuousAttackTimeMin' has a wrong offset!");
static_assert(offsetof(FBattleParamLongRange, CombatDistance) == 0x000008, "Member 'FBattleParamLongRange::CombatDistance' has a wrong offset!");
static_assert(offsetof(FBattleParamLongRange, CautionDistance) == 0x00000C, "Member 'FBattleParamLongRange::CautionDistance' has a wrong offset!");

// ScriptStruct EndGame.BattleParam
// 0x0030 (0x0030 - 0x0000)
struct FBattleParam final
{
public:
	struct FBattleParamShortRange                 ParamShortRange;                                   // 0x0000(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FBattleParamLongRange                  ParamLongRange;                                    // 0x0018(0x0010)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         CautionTimeMax;                                    // 0x0028(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CautionTimeMin;                                    // 0x002C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBattleParam) == 0x000008, "Wrong alignment on FBattleParam");
static_assert(sizeof(FBattleParam) == 0x000030, "Wrong size on FBattleParam");
static_assert(offsetof(FBattleParam, ParamShortRange) == 0x000000, "Member 'FBattleParam::ParamShortRange' has a wrong offset!");
static_assert(offsetof(FBattleParam, ParamLongRange) == 0x000018, "Member 'FBattleParam::ParamLongRange' has a wrong offset!");
static_assert(offsetof(FBattleParam, CautionTimeMax) == 0x000028, "Member 'FBattleParam::CautionTimeMax' has a wrong offset!");
static_assert(offsetof(FBattleParam, CautionTimeMin) == 0x00002C, "Member 'FBattleParam::CautionTimeMin' has a wrong offset!");

// ScriptStruct EndGame.EndPhysicalConstraintSetting_LastPosition
// 0x0014 (0x0014 - 0x0000)
struct FEndPhysicalConstraintSetting_LastPosition final
{
public:
	class FName                                   BoneName0;                                         // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BoneCorrectBias0;                                  // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OldPositionRate;                                   // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseAnimPosition;                                  // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndPhysicalConstraintSetting_LastPosition) == 0x000004, "Wrong alignment on FEndPhysicalConstraintSetting_LastPosition");
static_assert(sizeof(FEndPhysicalConstraintSetting_LastPosition) == 0x000014, "Wrong size on FEndPhysicalConstraintSetting_LastPosition");
static_assert(offsetof(FEndPhysicalConstraintSetting_LastPosition, BoneName0) == 0x000000, "Member 'FEndPhysicalConstraintSetting_LastPosition::BoneName0' has a wrong offset!");
static_assert(offsetof(FEndPhysicalConstraintSetting_LastPosition, BoneCorrectBias0) == 0x000008, "Member 'FEndPhysicalConstraintSetting_LastPosition::BoneCorrectBias0' has a wrong offset!");
static_assert(offsetof(FEndPhysicalConstraintSetting_LastPosition, OldPositionRate) == 0x00000C, "Member 'FEndPhysicalConstraintSetting_LastPosition::OldPositionRate' has a wrong offset!");
static_assert(offsetof(FEndPhysicalConstraintSetting_LastPosition, bUseAnimPosition) == 0x000010, "Member 'FEndPhysicalConstraintSetting_LastPosition::bUseAnimPosition' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableConfig
// 0x0020 (0x0028 - 0x0008)
struct FEndDataTableConfig final : public FTableRowBase
{
public:
	class FString                                 Comment;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Status;                                            // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableConfig) == 0x000008, "Wrong alignment on FEndDataTableConfig");
static_assert(sizeof(FEndDataTableConfig) == 0x000028, "Wrong size on FEndDataTableConfig");
static_assert(offsetof(FEndDataTableConfig, Comment) == 0x000008, "Member 'FEndDataTableConfig::Comment' has a wrong offset!");
static_assert(offsetof(FEndDataTableConfig, Status) == 0x000018, "Member 'FEndDataTableConfig::Status' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableBikePhaseParameter
// 0x0028 (0x0030 - 0x0008)
struct FEndDataTableBikePhaseParameter final : public FEndDataTableRowBase
{
public:
	class FName                                   BikeSplineID;                                      // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BikeSplineIndex;                                   // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         EndPhaseType;                                      // 0x0014(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         EndPhaseInt;                                       // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndPhaseFloat;                                     // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EndPhaseString;                                    // 0x0020(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableBikePhaseParameter) == 0x000008, "Wrong alignment on FEndDataTableBikePhaseParameter");
static_assert(sizeof(FEndDataTableBikePhaseParameter) == 0x000030, "Wrong size on FEndDataTableBikePhaseParameter");
static_assert(offsetof(FEndDataTableBikePhaseParameter, BikeSplineID) == 0x000008, "Member 'FEndDataTableBikePhaseParameter::BikeSplineID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikePhaseParameter, BikeSplineIndex) == 0x000010, "Member 'FEndDataTableBikePhaseParameter::BikeSplineIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikePhaseParameter, EndPhaseType) == 0x000014, "Member 'FEndDataTableBikePhaseParameter::EndPhaseType' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikePhaseParameter, EndPhaseInt) == 0x000018, "Member 'FEndDataTableBikePhaseParameter::EndPhaseInt' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikePhaseParameter, EndPhaseFloat) == 0x00001C, "Member 'FEndDataTableBikePhaseParameter::EndPhaseFloat' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikePhaseParameter, EndPhaseString) == 0x000020, "Member 'FEndDataTableBikePhaseParameter::EndPhaseString' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableBattleCameraSequence
// 0x0020 (0x0028 - 0x0008)
struct FEndDataTableBattleCameraSequence final : public FEndDataTableRowBase
{
public:
	uint8                                         PriorityType;                                      // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           ResourceName_Array;                                // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         EndPitchType;                                      // 0x0020(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableBattleCameraSequence) == 0x000008, "Wrong alignment on FEndDataTableBattleCameraSequence");
static_assert(sizeof(FEndDataTableBattleCameraSequence) == 0x000028, "Wrong size on FEndDataTableBattleCameraSequence");
static_assert(offsetof(FEndDataTableBattleCameraSequence, PriorityType) == 0x000008, "Member 'FEndDataTableBattleCameraSequence::PriorityType' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCameraSequence, ResourceName_Array) == 0x000010, "Member 'FEndDataTableBattleCameraSequence::ResourceName_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCameraSequence, EndPitchType) == 0x000020, "Member 'FEndDataTableBattleCameraSequence::EndPitchType' has a wrong offset!");

// ScriptStruct EndGame.EndBattleAIRedXIIIAttackAbility
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FEndBattleAIRedXIIIAttackAbility final
{
public:
	class FName                                   AbilityID;                                         // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x14];                                       // 0x000C(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBattleAIRedXIIIAttackAbility) == 0x000008, "Wrong alignment on FEndBattleAIRedXIIIAttackAbility");
static_assert(sizeof(FEndBattleAIRedXIIIAttackAbility) == 0x000020, "Wrong size on FEndBattleAIRedXIIIAttackAbility");
static_assert(offsetof(FEndBattleAIRedXIIIAttackAbility, AbilityID) == 0x000000, "Member 'FEndBattleAIRedXIIIAttackAbility::AbilityID' has a wrong offset!");
static_assert(offsetof(FEndBattleAIRedXIIIAttackAbility, Weight) == 0x000008, "Member 'FEndBattleAIRedXIIIAttackAbility::Weight' has a wrong offset!");

// ScriptStruct EndGame.BattleAISplineConnect
// 0x0028 (0x0028 - 0x0000)
struct FBattleAISplineConnect final
{
public:
	int32                                         StartPointID;                                      // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   GoalActorName;                                     // 0x0004(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GoalPointID;                                       // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ConnectActor;                                      // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Time;                                              // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USplineComponent*                       SplineMoveComponent;                               // 0x0020(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBattleAISplineConnect) == 0x000008, "Wrong alignment on FBattleAISplineConnect");
static_assert(sizeof(FBattleAISplineConnect) == 0x000028, "Wrong size on FBattleAISplineConnect");
static_assert(offsetof(FBattleAISplineConnect, StartPointID) == 0x000000, "Member 'FBattleAISplineConnect::StartPointID' has a wrong offset!");
static_assert(offsetof(FBattleAISplineConnect, GoalActorName) == 0x000004, "Member 'FBattleAISplineConnect::GoalActorName' has a wrong offset!");
static_assert(offsetof(FBattleAISplineConnect, GoalPointID) == 0x00000C, "Member 'FBattleAISplineConnect::GoalPointID' has a wrong offset!");
static_assert(offsetof(FBattleAISplineConnect, ConnectActor) == 0x000010, "Member 'FBattleAISplineConnect::ConnectActor' has a wrong offset!");
static_assert(offsetof(FBattleAISplineConnect, Time) == 0x000018, "Member 'FBattleAISplineConnect::Time' has a wrong offset!");
static_assert(offsetof(FBattleAISplineConnect, SplineMoveComponent) == 0x000020, "Member 'FBattleAISplineConnect::SplineMoveComponent' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableBattleDamageReaction
// 0x0068 (0x0070 - 0x0008)
struct FEndDataTableBattleDamageReaction final : public FEndDataTableRowBase
{
public:
	float                                         KnockBackDistance;                                 // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KnockBackDistanceMin;                              // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KnockBackDistanceMax;                              // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KnockBackTime;                                     // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KnockBackRagidTime;                                // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KnockBackRagidTimeMin;                             // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KnockBackRagidTimeMax;                             // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LaunchHeight;                                      // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LaunchHeightMin;                                   // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LaunchHeightMax;                                   // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RiseGravityScale;                                  // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FallGravityScale;                                  // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AirKnockBackDistance;                              // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AirKnockBackDistanceMin;                           // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AirKnockBackDistanceMax;                           // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AirLaunchHeight;                                   // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AirLaunchHeightMin;                                // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AirLaunchHeightMax;                                // 0x004C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AirRiseGravityScale;                               // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AirFallGravityScale;                               // 0x0054(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AirStrikeSpeed;                                    // 0x0058(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AirStrikeSpeedMin;                                 // 0x005C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AirStrikeSpeedMax;                                 // 0x0060(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CutKeepAddReactionKnockBackDistance;               // 0x0064(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FieldKnockBackDistance;                            // 0x0068(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableBattleDamageReaction) == 0x000008, "Wrong alignment on FEndDataTableBattleDamageReaction");
static_assert(sizeof(FEndDataTableBattleDamageReaction) == 0x000070, "Wrong size on FEndDataTableBattleDamageReaction");
static_assert(offsetof(FEndDataTableBattleDamageReaction, KnockBackDistance) == 0x000008, "Member 'FEndDataTableBattleDamageReaction::KnockBackDistance' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageReaction, KnockBackDistanceMin) == 0x00000C, "Member 'FEndDataTableBattleDamageReaction::KnockBackDistanceMin' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageReaction, KnockBackDistanceMax) == 0x000010, "Member 'FEndDataTableBattleDamageReaction::KnockBackDistanceMax' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageReaction, KnockBackTime) == 0x000014, "Member 'FEndDataTableBattleDamageReaction::KnockBackTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageReaction, KnockBackRagidTime) == 0x000018, "Member 'FEndDataTableBattleDamageReaction::KnockBackRagidTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageReaction, KnockBackRagidTimeMin) == 0x00001C, "Member 'FEndDataTableBattleDamageReaction::KnockBackRagidTimeMin' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageReaction, KnockBackRagidTimeMax) == 0x000020, "Member 'FEndDataTableBattleDamageReaction::KnockBackRagidTimeMax' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageReaction, LaunchHeight) == 0x000024, "Member 'FEndDataTableBattleDamageReaction::LaunchHeight' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageReaction, LaunchHeightMin) == 0x000028, "Member 'FEndDataTableBattleDamageReaction::LaunchHeightMin' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageReaction, LaunchHeightMax) == 0x00002C, "Member 'FEndDataTableBattleDamageReaction::LaunchHeightMax' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageReaction, RiseGravityScale) == 0x000030, "Member 'FEndDataTableBattleDamageReaction::RiseGravityScale' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageReaction, FallGravityScale) == 0x000034, "Member 'FEndDataTableBattleDamageReaction::FallGravityScale' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageReaction, AirKnockBackDistance) == 0x000038, "Member 'FEndDataTableBattleDamageReaction::AirKnockBackDistance' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageReaction, AirKnockBackDistanceMin) == 0x00003C, "Member 'FEndDataTableBattleDamageReaction::AirKnockBackDistanceMin' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageReaction, AirKnockBackDistanceMax) == 0x000040, "Member 'FEndDataTableBattleDamageReaction::AirKnockBackDistanceMax' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageReaction, AirLaunchHeight) == 0x000044, "Member 'FEndDataTableBattleDamageReaction::AirLaunchHeight' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageReaction, AirLaunchHeightMin) == 0x000048, "Member 'FEndDataTableBattleDamageReaction::AirLaunchHeightMin' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageReaction, AirLaunchHeightMax) == 0x00004C, "Member 'FEndDataTableBattleDamageReaction::AirLaunchHeightMax' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageReaction, AirRiseGravityScale) == 0x000050, "Member 'FEndDataTableBattleDamageReaction::AirRiseGravityScale' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageReaction, AirFallGravityScale) == 0x000054, "Member 'FEndDataTableBattleDamageReaction::AirFallGravityScale' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageReaction, AirStrikeSpeed) == 0x000058, "Member 'FEndDataTableBattleDamageReaction::AirStrikeSpeed' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageReaction, AirStrikeSpeedMin) == 0x00005C, "Member 'FEndDataTableBattleDamageReaction::AirStrikeSpeedMin' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageReaction, AirStrikeSpeedMax) == 0x000060, "Member 'FEndDataTableBattleDamageReaction::AirStrikeSpeedMax' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageReaction, CutKeepAddReactionKnockBackDistance) == 0x000064, "Member 'FEndDataTableBattleDamageReaction::CutKeepAddReactionKnockBackDistance' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageReaction, FieldKnockBackDistance) == 0x000068, "Member 'FEndDataTableBattleDamageReaction::FieldKnockBackDistance' has a wrong offset!");

// ScriptStruct EndGame.EndLookAtSolveBone
// 0x0010 (0x0010 - 0x0000)
struct FEndLookAtSolveBone final
{
public:
	class FName                                   BoneName;                                          // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndLookAtLayer                               Layer;                                             // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Weight;                                            // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndLookAtSolveBone) == 0x000004, "Wrong alignment on FEndLookAtSolveBone");
static_assert(sizeof(FEndLookAtSolveBone) == 0x000010, "Wrong size on FEndLookAtSolveBone");
static_assert(offsetof(FEndLookAtSolveBone, BoneName) == 0x000000, "Member 'FEndLookAtSolveBone::BoneName' has a wrong offset!");
static_assert(offsetof(FEndLookAtSolveBone, Layer) == 0x000008, "Member 'FEndLookAtSolveBone::Layer' has a wrong offset!");
static_assert(offsetof(FEndLookAtSolveBone, Weight) == 0x00000C, "Member 'FEndLookAtSolveBone::Weight' has a wrong offset!");

// ScriptStruct EndGame.RageDush
// 0x0040 (0x0040 - 0x0000)
struct alignas(0x08) FRageDush final
{
public:
	uint8                                         Pad_0[0x24];                                       // 0x0000(0x0024)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ID;                                                // 0x0024(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TurnSpeed;                                         // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HitTargetRadius;                                   // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HitStopRadius;                                     // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HitStopTime;                                       // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRageDush) == 0x000008, "Wrong alignment on FRageDush");
static_assert(sizeof(FRageDush) == 0x000040, "Wrong size on FRageDush");
static_assert(offsetof(FRageDush, ID) == 0x000024, "Member 'FRageDush::ID' has a wrong offset!");
static_assert(offsetof(FRageDush, TurnSpeed) == 0x00002C, "Member 'FRageDush::TurnSpeed' has a wrong offset!");
static_assert(offsetof(FRageDush, HitTargetRadius) == 0x000030, "Member 'FRageDush::HitTargetRadius' has a wrong offset!");
static_assert(offsetof(FRageDush, HitStopRadius) == 0x000034, "Member 'FRageDush::HitStopRadius' has a wrong offset!");
static_assert(offsetof(FRageDush, HitStopTime) == 0x000038, "Member 'FRageDush::HitStopTime' has a wrong offset!");

// ScriptStruct EndGame.EndBattleBreakableAttachData
// 0x0010 (0x0010 - 0x0000)
struct FEndBattleBreakableAttachData final
{
public:
	class FName                                   SocketName;                                        // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActorName;                                         // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndBattleBreakableAttachData) == 0x000004, "Wrong alignment on FEndBattleBreakableAttachData");
static_assert(sizeof(FEndBattleBreakableAttachData) == 0x000010, "Wrong size on FEndBattleBreakableAttachData");
static_assert(offsetof(FEndBattleBreakableAttachData, SocketName) == 0x000000, "Member 'FEndBattleBreakableAttachData::SocketName' has a wrong offset!");
static_assert(offsetof(FEndBattleBreakableAttachData, ActorName) == 0x000008, "Member 'FEndBattleBreakableAttachData::ActorName' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableObjectActor
// 0x0060 (0x0068 - 0x0008)
struct FEndDataTableObjectActor final : public FEndDataTableRowBase
{
public:
	int32                                         UniqueIndex;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Priority;                                          // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ActorName;                                         // 0x0010(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CharaSpecID;                                       // 0x0020(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ResponseAreaID;                                    // 0x0030(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ResponseAreaPlayerID;                              // 0x0038(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TweetResponseAreaID;                               // 0x0040(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TweetResponseAreaPlayerID;                         // 0x0048(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         AttributeList_Array;                               // 0x0050(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         ForceCreateActor;                                  // 0x0060(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         NearFarFadeState;                                  // 0x0061(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Important;                                         // 0x0062(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_63[0x5];                                       // 0x0063(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableObjectActor) == 0x000008, "Wrong alignment on FEndDataTableObjectActor");
static_assert(sizeof(FEndDataTableObjectActor) == 0x000068, "Wrong size on FEndDataTableObjectActor");
static_assert(offsetof(FEndDataTableObjectActor, UniqueIndex) == 0x000008, "Member 'FEndDataTableObjectActor::UniqueIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectActor, Priority) == 0x00000C, "Member 'FEndDataTableObjectActor::Priority' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectActor, ActorName) == 0x000010, "Member 'FEndDataTableObjectActor::ActorName' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectActor, CharaSpecID) == 0x000020, "Member 'FEndDataTableObjectActor::CharaSpecID' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectActor, ResponseAreaID) == 0x000030, "Member 'FEndDataTableObjectActor::ResponseAreaID' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectActor, ResponseAreaPlayerID) == 0x000038, "Member 'FEndDataTableObjectActor::ResponseAreaPlayerID' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectActor, TweetResponseAreaID) == 0x000040, "Member 'FEndDataTableObjectActor::TweetResponseAreaID' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectActor, TweetResponseAreaPlayerID) == 0x000048, "Member 'FEndDataTableObjectActor::TweetResponseAreaPlayerID' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectActor, AttributeList_Array) == 0x000050, "Member 'FEndDataTableObjectActor::AttributeList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectActor, ForceCreateActor) == 0x000060, "Member 'FEndDataTableObjectActor::ForceCreateActor' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectActor, NearFarFadeState) == 0x000061, "Member 'FEndDataTableObjectActor::NearFarFadeState' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectActor, Important) == 0x000062, "Member 'FEndDataTableObjectActor::Important' has a wrong offset!");

// ScriptStruct EndGame.EndBikeAILoccheBreakBridge
// 0x0018 (0x0018 - 0x0000)
struct FEndBikeAILoccheBreakBridge final
{
public:
	class FName                                   TargetName;                                        // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   HitResourceName;                                   // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   HitEffectName;                                     // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndBikeAILoccheBreakBridge) == 0x000004, "Wrong alignment on FEndBikeAILoccheBreakBridge");
static_assert(sizeof(FEndBikeAILoccheBreakBridge) == 0x000018, "Wrong size on FEndBikeAILoccheBreakBridge");
static_assert(offsetof(FEndBikeAILoccheBreakBridge, TargetName) == 0x000000, "Member 'FEndBikeAILoccheBreakBridge::TargetName' has a wrong offset!");
static_assert(offsetof(FEndBikeAILoccheBreakBridge, HitResourceName) == 0x000008, "Member 'FEndBikeAILoccheBreakBridge::HitResourceName' has a wrong offset!");
static_assert(offsetof(FEndBikeAILoccheBreakBridge, HitEffectName) == 0x000010, "Member 'FEndBikeAILoccheBreakBridge::HitEffectName' has a wrong offset!");

// ScriptStruct EndGame.EndBattleDamageSourceCollisionDataCapsule
// 0x0020 (0x0020 - 0x0000)
struct FEndBattleDamageSourceCollisionDataCapsule final
{
public:
	struct FVector                                Center;                                            // 0x0000(0x000C)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x000C(0x000C)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Length;                                            // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndBattleDamageSourceCollisionDataCapsule) == 0x000004, "Wrong alignment on FEndBattleDamageSourceCollisionDataCapsule");
static_assert(sizeof(FEndBattleDamageSourceCollisionDataCapsule) == 0x000020, "Wrong size on FEndBattleDamageSourceCollisionDataCapsule");
static_assert(offsetof(FEndBattleDamageSourceCollisionDataCapsule, Center) == 0x000000, "Member 'FEndBattleDamageSourceCollisionDataCapsule::Center' has a wrong offset!");
static_assert(offsetof(FEndBattleDamageSourceCollisionDataCapsule, Rotation) == 0x00000C, "Member 'FEndBattleDamageSourceCollisionDataCapsule::Rotation' has a wrong offset!");
static_assert(offsetof(FEndBattleDamageSourceCollisionDataCapsule, Radius) == 0x000018, "Member 'FEndBattleDamageSourceCollisionDataCapsule::Radius' has a wrong offset!");
static_assert(offsetof(FEndBattleDamageSourceCollisionDataCapsule, Length) == 0x00001C, "Member 'FEndBattleDamageSourceCollisionDataCapsule::Length' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableCharaPopAsset
// 0x0008 (0x0010 - 0x0008)
struct FEndDataTableCharaPopAsset final : public FEndDataTableRowBase
{
public:
	int32                                         UsedPhysMemory;                                    // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UsedGPUMemory;                                     // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableCharaPopAsset) == 0x000008, "Wrong alignment on FEndDataTableCharaPopAsset");
static_assert(sizeof(FEndDataTableCharaPopAsset) == 0x000010, "Wrong size on FEndDataTableCharaPopAsset");
static_assert(offsetof(FEndDataTableCharaPopAsset, UsedPhysMemory) == 0x000008, "Member 'FEndDataTableCharaPopAsset::UsedPhysMemory' has a wrong offset!");
static_assert(offsetof(FEndDataTableCharaPopAsset, UsedGPUMemory) == 0x00000C, "Member 'FEndDataTableCharaPopAsset::UsedGPUMemory' has a wrong offset!");

// ScriptStruct EndGame.EndBikeAIHelicopterSpecificRoadArea
// 0x0010 (0x0010 - 0x0000)
struct FEndBikeAIHelicopterSpecificRoadArea final
{
public:
	class FName                                   SplineID;                                          // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFloatInterval                         AppliedRange;                                      // 0x0008(0x0008)(Edit, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndBikeAIHelicopterSpecificRoadArea) == 0x000004, "Wrong alignment on FEndBikeAIHelicopterSpecificRoadArea");
static_assert(sizeof(FEndBikeAIHelicopterSpecificRoadArea) == 0x000010, "Wrong size on FEndBikeAIHelicopterSpecificRoadArea");
static_assert(offsetof(FEndBikeAIHelicopterSpecificRoadArea, SplineID) == 0x000000, "Member 'FEndBikeAIHelicopterSpecificRoadArea::SplineID' has a wrong offset!");
static_assert(offsetof(FEndBikeAIHelicopterSpecificRoadArea, AppliedRange) == 0x000008, "Member 'FEndBikeAIHelicopterSpecificRoadArea::AppliedRange' has a wrong offset!");

// ScriptStruct EndGame.EndBattleDamageSourceCollisionDataBox
// 0x0024 (0x0024 - 0x0000)
struct FEndBattleDamageSourceCollisionDataBox final
{
public:
	struct FVector                                Center;                                            // 0x0000(0x000C)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x000C(0x000C)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         X;                                                 // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Z;                                                 // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndBattleDamageSourceCollisionDataBox) == 0x000004, "Wrong alignment on FEndBattleDamageSourceCollisionDataBox");
static_assert(sizeof(FEndBattleDamageSourceCollisionDataBox) == 0x000024, "Wrong size on FEndBattleDamageSourceCollisionDataBox");
static_assert(offsetof(FEndBattleDamageSourceCollisionDataBox, Center) == 0x000000, "Member 'FEndBattleDamageSourceCollisionDataBox::Center' has a wrong offset!");
static_assert(offsetof(FEndBattleDamageSourceCollisionDataBox, Rotation) == 0x00000C, "Member 'FEndBattleDamageSourceCollisionDataBox::Rotation' has a wrong offset!");
static_assert(offsetof(FEndBattleDamageSourceCollisionDataBox, X) == 0x000018, "Member 'FEndBattleDamageSourceCollisionDataBox::X' has a wrong offset!");
static_assert(offsetof(FEndBattleDamageSourceCollisionDataBox, Y) == 0x00001C, "Member 'FEndBattleDamageSourceCollisionDataBox::Y' has a wrong offset!");
static_assert(offsetof(FEndBattleDamageSourceCollisionDataBox, Z) == 0x000020, "Member 'FEndBattleDamageSourceCollisionDataBox::Z' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableEventPriority
// 0x0018 (0x0020 - 0x0008)
struct FEndDataTableEventPriority final : public FEndDataTableRowBase
{
public:
	int32                                         PriorityNum;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ArrayNumber;                                       // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         BehavierList_Array;                                // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableEventPriority) == 0x000008, "Wrong alignment on FEndDataTableEventPriority");
static_assert(sizeof(FEndDataTableEventPriority) == 0x000020, "Wrong size on FEndDataTableEventPriority");
static_assert(offsetof(FEndDataTableEventPriority, PriorityNum) == 0x000008, "Member 'FEndDataTableEventPriority::PriorityNum' has a wrong offset!");
static_assert(offsetof(FEndDataTableEventPriority, ArrayNumber) == 0x00000C, "Member 'FEndDataTableEventPriority::ArrayNumber' has a wrong offset!");
static_assert(offsetof(FEndDataTableEventPriority, BehavierList_Array) == 0x000010, "Member 'FEndDataTableEventPriority::BehavierList_Array' has a wrong offset!");

// ScriptStruct EndGame.EndBattleDamageSourceCollisionDataSphere
// 0x0010 (0x0010 - 0x0000)
struct FEndBattleDamageSourceCollisionDataSphere final
{
public:
	struct FVector                                Center;                                            // 0x0000(0x000C)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndBattleDamageSourceCollisionDataSphere) == 0x000004, "Wrong alignment on FEndBattleDamageSourceCollisionDataSphere");
static_assert(sizeof(FEndBattleDamageSourceCollisionDataSphere) == 0x000010, "Wrong size on FEndBattleDamageSourceCollisionDataSphere");
static_assert(offsetof(FEndBattleDamageSourceCollisionDataSphere, Center) == 0x000000, "Member 'FEndBattleDamageSourceCollisionDataSphere::Center' has a wrong offset!");
static_assert(offsetof(FEndBattleDamageSourceCollisionDataSphere, Radius) == 0x00000C, "Member 'FEndBattleDamageSourceCollisionDataSphere::Radius' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableBattleCharaCategory
// 0x0008 (0x0010 - 0x0008)
struct FEndDataTableBattleCharaCategory final : public FEndDataTableRowBase
{
public:
	uint8                                         Category;                                          // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableBattleCharaCategory) == 0x000008, "Wrong alignment on FEndDataTableBattleCharaCategory");
static_assert(sizeof(FEndDataTableBattleCharaCategory) == 0x000010, "Wrong size on FEndDataTableBattleCharaCategory");
static_assert(offsetof(FEndDataTableBattleCharaCategory, Category) == 0x000008, "Member 'FEndDataTableBattleCharaCategory::Category' has a wrong offset!");

// ScriptStruct EndGame.EndBattleCameraCutChangeData
// 0x0088 (0x0088 - 0x0000)
struct FEndBattleCameraCutChangeData final
{
public:
	EEndBattleCameraChangeTimingType              TimingType;                                        // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndBattleCameraCutEndType                    CutEndType;                                        // 0x0001(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAlphaBlend                            BeginBlend;                                        // 0x0008(0x0038)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FAlphaBlend                            EndBlend;                                          // 0x0040(0x0038)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	EEndBattleCameraBlendBasePosType              BeginBlendBasePosType;                             // 0x0078(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndBattleCameraBlendBasePosType              EndBlendBasePosType;                               // 0x0079(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7A[0x2];                                       // 0x007A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   TimingTypeParamName;                               // 0x007C(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBattleCameraCutChangeData) == 0x000008, "Wrong alignment on FEndBattleCameraCutChangeData");
static_assert(sizeof(FEndBattleCameraCutChangeData) == 0x000088, "Wrong size on FEndBattleCameraCutChangeData");
static_assert(offsetof(FEndBattleCameraCutChangeData, TimingType) == 0x000000, "Member 'FEndBattleCameraCutChangeData::TimingType' has a wrong offset!");
static_assert(offsetof(FEndBattleCameraCutChangeData, CutEndType) == 0x000001, "Member 'FEndBattleCameraCutChangeData::CutEndType' has a wrong offset!");
static_assert(offsetof(FEndBattleCameraCutChangeData, BeginBlend) == 0x000008, "Member 'FEndBattleCameraCutChangeData::BeginBlend' has a wrong offset!");
static_assert(offsetof(FEndBattleCameraCutChangeData, EndBlend) == 0x000040, "Member 'FEndBattleCameraCutChangeData::EndBlend' has a wrong offset!");
static_assert(offsetof(FEndBattleCameraCutChangeData, BeginBlendBasePosType) == 0x000078, "Member 'FEndBattleCameraCutChangeData::BeginBlendBasePosType' has a wrong offset!");
static_assert(offsetof(FEndBattleCameraCutChangeData, EndBlendBasePosType) == 0x000079, "Member 'FEndBattleCameraCutChangeData::EndBlendBasePosType' has a wrong offset!");
static_assert(offsetof(FEndBattleCameraCutChangeData, TimingTypeParamName) == 0x00007C, "Member 'FEndBattleCameraCutChangeData::TimingTypeParamName' has a wrong offset!");

// ScriptStruct EndGame.VfxNonUniformRandom
// 0x000C (0x000C - 0x0000)
struct FVfxNonUniformRandom final
{
public:
	EVfxNonUniformKind                            m_Kind;                                            // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_Param;                                           // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         m_bReverse : 1;                                    // 0x0008(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVfxNonUniformRandom) == 0x000004, "Wrong alignment on FVfxNonUniformRandom");
static_assert(sizeof(FVfxNonUniformRandom) == 0x00000C, "Wrong size on FVfxNonUniformRandom");
static_assert(offsetof(FVfxNonUniformRandom, m_Kind) == 0x000000, "Member 'FVfxNonUniformRandom::m_Kind' has a wrong offset!");
static_assert(offsetof(FVfxNonUniformRandom, m_Param) == 0x000004, "Member 'FVfxNonUniformRandom::m_Param' has a wrong offset!");

// ScriptStruct EndGame.EndFormatArgumentData
// 0x0018 (0x0018 - 0x0000)
struct FEndFormatArgumentData final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index;                                             // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndFormatArgumentData) == 0x000008, "Wrong alignment on FEndFormatArgumentData");
static_assert(sizeof(FEndFormatArgumentData) == 0x000018, "Wrong size on FEndFormatArgumentData");
static_assert(offsetof(FEndFormatArgumentData, Name) == 0x000000, "Member 'FEndFormatArgumentData::Name' has a wrong offset!");
static_assert(offsetof(FEndFormatArgumentData, Count) == 0x000010, "Member 'FEndFormatArgumentData::Count' has a wrong offset!");
static_assert(offsetof(FEndFormatArgumentData, Index) == 0x000014, "Member 'FEndFormatArgumentData::Index' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableBattleAbilityResource
// 0x0010 (0x0018 - 0x0008)
struct FEndDataTableBattleAbilityResource final : public FEndDataTableRowBase
{
public:
	class FName                                   ContentsSoundSE;                                   // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ContentsEffect;                                    // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableBattleAbilityResource) == 0x000008, "Wrong alignment on FEndDataTableBattleAbilityResource");
static_assert(sizeof(FEndDataTableBattleAbilityResource) == 0x000018, "Wrong size on FEndDataTableBattleAbilityResource");
static_assert(offsetof(FEndDataTableBattleAbilityResource, ContentsSoundSE) == 0x000008, "Member 'FEndDataTableBattleAbilityResource::ContentsSoundSE' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAbilityResource, ContentsEffect) == 0x000010, "Member 'FEndDataTableBattleAbilityResource::ContentsEffect' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableEnemyBookAbilites
// 0x0050 (0x0058 - 0x0008)
struct FEndDataTableEnemyBookAbilites final : public FEndDataTableRowBase
{
public:
	class FName                                   Description;                                       // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AbiliteName;                                       // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 Property_Array;                                    // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         EnableSilence;                                     // 0x0028(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         EnemySkill;                                        // 0x0029(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 Attribute_Array;                                   // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<uint8>                                 StateChange_Array;                                 // 0x0040(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   LearningAbilitie;                                  // 0x0050(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableEnemyBookAbilites) == 0x000008, "Wrong alignment on FEndDataTableEnemyBookAbilites");
static_assert(sizeof(FEndDataTableEnemyBookAbilites) == 0x000058, "Wrong size on FEndDataTableEnemyBookAbilites");
static_assert(offsetof(FEndDataTableEnemyBookAbilites, Description) == 0x000008, "Member 'FEndDataTableEnemyBookAbilites::Description' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyBookAbilites, AbiliteName) == 0x000010, "Member 'FEndDataTableEnemyBookAbilites::AbiliteName' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyBookAbilites, Property_Array) == 0x000018, "Member 'FEndDataTableEnemyBookAbilites::Property_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyBookAbilites, EnableSilence) == 0x000028, "Member 'FEndDataTableEnemyBookAbilites::EnableSilence' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyBookAbilites, EnemySkill) == 0x000029, "Member 'FEndDataTableEnemyBookAbilites::EnemySkill' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyBookAbilites, Attribute_Array) == 0x000030, "Member 'FEndDataTableEnemyBookAbilites::Attribute_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyBookAbilites, StateChange_Array) == 0x000040, "Member 'FEndDataTableEnemyBookAbilites::StateChange_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyBookAbilites, LearningAbilitie) == 0x000050, "Member 'FEndDataTableEnemyBookAbilites::LearningAbilitie' has a wrong offset!");

// ScriptStruct EndGame.EndBehaviorAdditiveBlendSpaceExtraAction
// 0x0020 (0x07E0 - 0x07C0)
struct FEndBehaviorAdditiveBlendSpaceExtraAction final : public FEndBehaviorExtraAction
{
public:
	uint8                                         Pad_7C0[0x20];                                     // 0x07C0(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorAdditiveBlendSpaceExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorAdditiveBlendSpaceExtraAction");
static_assert(sizeof(FEndBehaviorAdditiveBlendSpaceExtraAction) == 0x0007E0, "Wrong size on FEndBehaviorAdditiveBlendSpaceExtraAction");

// ScriptStruct EndGame.EndDataTableUniqueActionRCSMove
// 0x0020 (0x0028 - 0x0008)
struct FEndDataTableUniqueActionRCSMove final : public FEndDataTableRowBase
{
public:
	TArray<class FName>                           StateChangeID_Array;                               // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 Rate_Array;                                        // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableUniqueActionRCSMove) == 0x000008, "Wrong alignment on FEndDataTableUniqueActionRCSMove");
static_assert(sizeof(FEndDataTableUniqueActionRCSMove) == 0x000028, "Wrong size on FEndDataTableUniqueActionRCSMove");
static_assert(offsetof(FEndDataTableUniqueActionRCSMove, StateChangeID_Array) == 0x000008, "Member 'FEndDataTableUniqueActionRCSMove::StateChangeID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableUniqueActionRCSMove, Rate_Array) == 0x000018, "Member 'FEndDataTableUniqueActionRCSMove::Rate_Array' has a wrong offset!");

// ScriptStruct EndGame.EndBehaviorAdditiveSequenceExtraAction
// 0x0020 (0x07E0 - 0x07C0)
struct FEndBehaviorAdditiveSequenceExtraAction final : public FEndBehaviorExtraAction
{
public:
	uint8                                         Pad_7C0[0x20];                                     // 0x07C0(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorAdditiveSequenceExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorAdditiveSequenceExtraAction");
static_assert(sizeof(FEndBehaviorAdditiveSequenceExtraAction) == 0x0007E0, "Wrong size on FEndBehaviorAdditiveSequenceExtraAction");

// ScriptStruct EndGame.EndDataTableAppContent
// 0x0068 (0x0070 - 0x0008)
struct FEndDataTableAppContent final : public FEndDataTableRowBase
{
public:
	int32                                         UniqueID;                                          // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          FilterCategory;                                    // 0x000C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ContentNameLabel;                                  // 0x0010(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ContentDetailLabel;                                // 0x0020(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ContentVisualLabel;                                // 0x0030(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReadFlag;                                          // 0x0040(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Category;                                          // 0x0048(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           ItemID_Array;                                      // 0x0050(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<uint8>                                 ItemCount_Array;                                   // 0x0060(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableAppContent) == 0x000008, "Wrong alignment on FEndDataTableAppContent");
static_assert(sizeof(FEndDataTableAppContent) == 0x000070, "Wrong size on FEndDataTableAppContent");
static_assert(offsetof(FEndDataTableAppContent, UniqueID) == 0x000008, "Member 'FEndDataTableAppContent::UniqueID' has a wrong offset!");
static_assert(offsetof(FEndDataTableAppContent, FilterCategory) == 0x00000C, "Member 'FEndDataTableAppContent::FilterCategory' has a wrong offset!");
static_assert(offsetof(FEndDataTableAppContent, ContentNameLabel) == 0x000010, "Member 'FEndDataTableAppContent::ContentNameLabel' has a wrong offset!");
static_assert(offsetof(FEndDataTableAppContent, ContentDetailLabel) == 0x000020, "Member 'FEndDataTableAppContent::ContentDetailLabel' has a wrong offset!");
static_assert(offsetof(FEndDataTableAppContent, ContentVisualLabel) == 0x000030, "Member 'FEndDataTableAppContent::ContentVisualLabel' has a wrong offset!");
static_assert(offsetof(FEndDataTableAppContent, ReadFlag) == 0x000040, "Member 'FEndDataTableAppContent::ReadFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTableAppContent, Category) == 0x000048, "Member 'FEndDataTableAppContent::Category' has a wrong offset!");
static_assert(offsetof(FEndDataTableAppContent, ItemID_Array) == 0x000050, "Member 'FEndDataTableAppContent::ItemID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableAppContent, ItemCount_Array) == 0x000060, "Member 'FEndDataTableAppContent::ItemCount_Array' has a wrong offset!");

// ScriptStruct EndGame.EndBehaviorSimpleFsmExtraAction
// 0x0280 (0x0A40 - 0x07C0)
struct FEndBehaviorSimpleFsmExtraAction : public FEndBehaviorExtraAction
{
public:
	uint8                                         Pad_7C0[0x280];                                    // 0x07C0(0x0280)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorSimpleFsmExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorSimpleFsmExtraAction");
static_assert(sizeof(FEndBehaviorSimpleFsmExtraAction) == 0x000A40, "Wrong size on FEndBehaviorSimpleFsmExtraAction");

// ScriptStruct EndGame.EndBehaviorAppearanceExtraAction
// 0x00E0 (0x0B20 - 0x0A40)
struct FEndBehaviorAppearanceExtraAction final : public FEndBehaviorSimpleFsmExtraAction
{
public:
	uint8                                         Pad_A40[0xE0];                                     // 0x0A40(0x00E0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorAppearanceExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorAppearanceExtraAction");
static_assert(sizeof(FEndBehaviorAppearanceExtraAction) == 0x000B20, "Wrong size on FEndBehaviorAppearanceExtraAction");

// ScriptStruct EndGame.EndDataTableEquipment
// 0x0270 (0x0278 - 0x0008)
struct FEndDataTableEquipment final : public FEndDataTableRowBase
{
public:
	int32                                         UniqueID;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UniqueIndex;                                       // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NameLabel;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DetailLabel;                                       // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         CanStack;                                          // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SortValue;                                         // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxCount;                                          // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 IconName;                                          // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BuyValue;                                          // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         CanSale;                                           // 0x0054(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SaleValue;                                         // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Category;                                          // 0x005C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         CategoryMain;                                      // 0x005D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         CategoryDetail;                                    // 0x005E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5F[0x1];                                       // 0x005F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           CanEquip_Array;                                    // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         AttackAdd;                                         // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AttackScale;                                       // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MagicAttackAdd;                                    // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MagicAttackScale;                                  // 0x007C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DefenseAdd;                                        // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DefenseScale;                                      // 0x0084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MagicDefenseAdd;                                   // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MagicDefenseScale;                                 // 0x008C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StrengthAdd;                                       // 0x0090(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StrengthScale;                                     // 0x0094(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MagicAdd;                                          // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MagicScale;                                        // 0x009C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VitalityAdd;                                       // 0x00A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VitalityScale;                                     // 0x00A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SpilitAdd;                                         // 0x00A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SpilitScale;                                       // 0x00AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LuckAdd;                                           // 0x00B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LuckScale;                                         // 0x00B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HPMaxAdd;                                          // 0x00B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HPMaxScale;                                        // 0x00BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MPMaxAdd;                                          // 0x00C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MPMaxScale;                                        // 0x00C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CriticalHitRateAdd;                                // 0x00C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CriticalHitRateScale;                              // 0x00CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         PropertyResist0;                                   // 0x00D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         PropertyResist1;                                   // 0x00D1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D2[0x6];                                       // 0x00D2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 AttributeResist_Array;                             // 0x00D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<uint8>                                 StatusChangeResist_Array;                          // 0x00E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           EquipmentSkillID_Array;                            // 0x00F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         EquipmentSkillTextLabel_Array;                     // 0x0108(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         BreakDead;                                         // 0x0118(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_119[0x3];                                      // 0x0119(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MateriaGrowScale;                                  // 0x011C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         MateriaSlotDouble;                                 // 0x0120(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         MateriaSlotSingle;                                 // 0x0121(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_122[0x6];                                      // 0x0122(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 MateriaSlotModify_Array;                           // 0x0128(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<uint8>                                 ModelMateriaIndex_Array;                           // 0x0138(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           CharaSpecID_Array;                                 // 0x0148(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   UpgradeID;                                         // 0x0158(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NormalAttackAbilityID;                             // 0x0160(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ChangeDodgeCancelNoramalAttackAbilityID;           // 0x0168(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LongAttackRange;                                   // 0x0178(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         NormalAttackReach;                                 // 0x017C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17D[0x3];                                      // 0x017D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   AerialNormalAttackAbilityID;                       // 0x0180(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ChargeNormalAttackAbilityID;                       // 0x0188(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ChargeNormalAttackAbilityID1;                      // 0x0190(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         GuardBeginSequeceBoneFilter;                       // 0x0198(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_199[0x3];                                      // 0x0199(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   OverrideGuardBeginSequeceName;                     // 0x019C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OverrideGuardLoopSequeceName;                      // 0x01A4(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OverrideGuardEndSequeceName;                       // 0x01AC(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         UniqueActionType;                                  // 0x01B4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B5[0x3];                                      // 0x01B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           UniqueActionAbilityID_Array;                       // 0x01B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 UniqueActionParameter_Array;                       // 0x01C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           UniqueActionStringParameter_Array;                 // 0x01D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   BurstAbilityID;                                    // 0x01E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 LearningConditionType_Array;                       // 0x01F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 LearningConditionValue_Array;                      // 0x0200(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         LearningCondAddPoint;                              // 0x0210(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LearningCounterID;                                 // 0x0214(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21C[0x4];                                      // 0x021C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 OverWriteTextID;                                   // 0x0220(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OverWriteExplanationTextID;                        // 0x0230(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LearningCondUseCount;                              // 0x0240(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LearningFlag;                                      // 0x0244(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24C[0x4];                                      // 0x024C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 LearningConditionText;                             // 0x0250(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TreasureSpecId;                                    // 0x0260(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FieldAttackStateTriggerId;                         // 0x0268(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MovieName;                                         // 0x0270(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableEquipment) == 0x000008, "Wrong alignment on FEndDataTableEquipment");
static_assert(sizeof(FEndDataTableEquipment) == 0x000278, "Wrong size on FEndDataTableEquipment");
static_assert(offsetof(FEndDataTableEquipment, UniqueID) == 0x000008, "Member 'FEndDataTableEquipment::UniqueID' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipment, UniqueIndex) == 0x00000C, "Member 'FEndDataTableEquipment::UniqueIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipment, NameLabel) == 0x000010, "Member 'FEndDataTableEquipment::NameLabel' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipment, DetailLabel) == 0x000020, "Member 'FEndDataTableEquipment::DetailLabel' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipment, CanStack) == 0x000030, "Member 'FEndDataTableEquipment::CanStack' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipment, SortValue) == 0x000034, "Member 'FEndDataTableEquipment::SortValue' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipment, MaxCount) == 0x000038, "Member 'FEndDataTableEquipment::MaxCount' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipment, IconName) == 0x000040, "Member 'FEndDataTableEquipment::IconName' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipment, BuyValue) == 0x000050, "Member 'FEndDataTableEquipment::BuyValue' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipment, CanSale) == 0x000054, "Member 'FEndDataTableEquipment::CanSale' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipment, SaleValue) == 0x000058, "Member 'FEndDataTableEquipment::SaleValue' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipment, Category) == 0x00005C, "Member 'FEndDataTableEquipment::Category' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipment, CategoryMain) == 0x00005D, "Member 'FEndDataTableEquipment::CategoryMain' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipment, CategoryDetail) == 0x00005E, "Member 'FEndDataTableEquipment::CategoryDetail' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipment, CanEquip_Array) == 0x000060, "Member 'FEndDataTableEquipment::CanEquip_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipment, AttackAdd) == 0x000070, "Member 'FEndDataTableEquipment::AttackAdd' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipment, AttackScale) == 0x000074, "Member 'FEndDataTableEquipment::AttackScale' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipment, MagicAttackAdd) == 0x000078, "Member 'FEndDataTableEquipment::MagicAttackAdd' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipment, MagicAttackScale) == 0x00007C, "Member 'FEndDataTableEquipment::MagicAttackScale' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipment, DefenseAdd) == 0x000080, "Member 'FEndDataTableEquipment::DefenseAdd' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipment, DefenseScale) == 0x000084, "Member 'FEndDataTableEquipment::DefenseScale' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipment, MagicDefenseAdd) == 0x000088, "Member 'FEndDataTableEquipment::MagicDefenseAdd' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipment, MagicDefenseScale) == 0x00008C, "Member 'FEndDataTableEquipment::MagicDefenseScale' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipment, StrengthAdd) == 0x000090, "Member 'FEndDataTableEquipment::StrengthAdd' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipment, StrengthScale) == 0x000094, "Member 'FEndDataTableEquipment::StrengthScale' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipment, MagicAdd) == 0x000098, "Member 'FEndDataTableEquipment::MagicAdd' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipment, MagicScale) == 0x00009C, "Member 'FEndDataTableEquipment::MagicScale' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipment, VitalityAdd) == 0x0000A0, "Member 'FEndDataTableEquipment::VitalityAdd' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipment, VitalityScale) == 0x0000A4, "Member 'FEndDataTableEquipment::VitalityScale' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipment, SpilitAdd) == 0x0000A8, "Member 'FEndDataTableEquipment::SpilitAdd' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipment, SpilitScale) == 0x0000AC, "Member 'FEndDataTableEquipment::SpilitScale' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipment, LuckAdd) == 0x0000B0, "Member 'FEndDataTableEquipment::LuckAdd' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipment, LuckScale) == 0x0000B4, "Member 'FEndDataTableEquipment::LuckScale' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipment, HPMaxAdd) == 0x0000B8, "Member 'FEndDataTableEquipment::HPMaxAdd' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipment, HPMaxScale) == 0x0000BC, "Member 'FEndDataTableEquipment::HPMaxScale' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipment, MPMaxAdd) == 0x0000C0, "Member 'FEndDataTableEquipment::MPMaxAdd' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipment, MPMaxScale) == 0x0000C4, "Member 'FEndDataTableEquipment::MPMaxScale' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipment, CriticalHitRateAdd) == 0x0000C8, "Member 'FEndDataTableEquipment::CriticalHitRateAdd' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipment, CriticalHitRateScale) == 0x0000CC, "Member 'FEndDataTableEquipment::CriticalHitRateScale' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipment, PropertyResist0) == 0x0000D0, "Member 'FEndDataTableEquipment::PropertyResist0' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipment, PropertyResist1) == 0x0000D1, "Member 'FEndDataTableEquipment::PropertyResist1' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipment, AttributeResist_Array) == 0x0000D8, "Member 'FEndDataTableEquipment::AttributeResist_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipment, StatusChangeResist_Array) == 0x0000E8, "Member 'FEndDataTableEquipment::StatusChangeResist_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipment, EquipmentSkillID_Array) == 0x0000F8, "Member 'FEndDataTableEquipment::EquipmentSkillID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipment, EquipmentSkillTextLabel_Array) == 0x000108, "Member 'FEndDataTableEquipment::EquipmentSkillTextLabel_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipment, BreakDead) == 0x000118, "Member 'FEndDataTableEquipment::BreakDead' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipment, MateriaGrowScale) == 0x00011C, "Member 'FEndDataTableEquipment::MateriaGrowScale' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipment, MateriaSlotDouble) == 0x000120, "Member 'FEndDataTableEquipment::MateriaSlotDouble' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipment, MateriaSlotSingle) == 0x000121, "Member 'FEndDataTableEquipment::MateriaSlotSingle' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipment, MateriaSlotModify_Array) == 0x000128, "Member 'FEndDataTableEquipment::MateriaSlotModify_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipment, ModelMateriaIndex_Array) == 0x000138, "Member 'FEndDataTableEquipment::ModelMateriaIndex_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipment, CharaSpecID_Array) == 0x000148, "Member 'FEndDataTableEquipment::CharaSpecID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipment, UpgradeID) == 0x000158, "Member 'FEndDataTableEquipment::UpgradeID' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipment, NormalAttackAbilityID) == 0x000160, "Member 'FEndDataTableEquipment::NormalAttackAbilityID' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipment, ChangeDodgeCancelNoramalAttackAbilityID) == 0x000168, "Member 'FEndDataTableEquipment::ChangeDodgeCancelNoramalAttackAbilityID' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipment, LongAttackRange) == 0x000178, "Member 'FEndDataTableEquipment::LongAttackRange' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipment, NormalAttackReach) == 0x00017C, "Member 'FEndDataTableEquipment::NormalAttackReach' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipment, AerialNormalAttackAbilityID) == 0x000180, "Member 'FEndDataTableEquipment::AerialNormalAttackAbilityID' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipment, ChargeNormalAttackAbilityID) == 0x000188, "Member 'FEndDataTableEquipment::ChargeNormalAttackAbilityID' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipment, ChargeNormalAttackAbilityID1) == 0x000190, "Member 'FEndDataTableEquipment::ChargeNormalAttackAbilityID1' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipment, GuardBeginSequeceBoneFilter) == 0x000198, "Member 'FEndDataTableEquipment::GuardBeginSequeceBoneFilter' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipment, OverrideGuardBeginSequeceName) == 0x00019C, "Member 'FEndDataTableEquipment::OverrideGuardBeginSequeceName' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipment, OverrideGuardLoopSequeceName) == 0x0001A4, "Member 'FEndDataTableEquipment::OverrideGuardLoopSequeceName' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipment, OverrideGuardEndSequeceName) == 0x0001AC, "Member 'FEndDataTableEquipment::OverrideGuardEndSequeceName' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipment, UniqueActionType) == 0x0001B4, "Member 'FEndDataTableEquipment::UniqueActionType' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipment, UniqueActionAbilityID_Array) == 0x0001B8, "Member 'FEndDataTableEquipment::UniqueActionAbilityID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipment, UniqueActionParameter_Array) == 0x0001C8, "Member 'FEndDataTableEquipment::UniqueActionParameter_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipment, UniqueActionStringParameter_Array) == 0x0001D8, "Member 'FEndDataTableEquipment::UniqueActionStringParameter_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipment, BurstAbilityID) == 0x0001E8, "Member 'FEndDataTableEquipment::BurstAbilityID' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipment, LearningConditionType_Array) == 0x0001F0, "Member 'FEndDataTableEquipment::LearningConditionType_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipment, LearningConditionValue_Array) == 0x000200, "Member 'FEndDataTableEquipment::LearningConditionValue_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipment, LearningCondAddPoint) == 0x000210, "Member 'FEndDataTableEquipment::LearningCondAddPoint' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipment, LearningCounterID) == 0x000214, "Member 'FEndDataTableEquipment::LearningCounterID' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipment, OverWriteTextID) == 0x000220, "Member 'FEndDataTableEquipment::OverWriteTextID' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipment, OverWriteExplanationTextID) == 0x000230, "Member 'FEndDataTableEquipment::OverWriteExplanationTextID' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipment, LearningCondUseCount) == 0x000240, "Member 'FEndDataTableEquipment::LearningCondUseCount' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipment, LearningFlag) == 0x000244, "Member 'FEndDataTableEquipment::LearningFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipment, LearningConditionText) == 0x000250, "Member 'FEndDataTableEquipment::LearningConditionText' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipment, TreasureSpecId) == 0x000260, "Member 'FEndDataTableEquipment::TreasureSpecId' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipment, FieldAttackStateTriggerId) == 0x000268, "Member 'FEndDataTableEquipment::FieldAttackStateTriggerId' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipment, MovieName) == 0x000270, "Member 'FEndDataTableEquipment::MovieName' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableBikeAngleRange
// 0x0008 (0x0010 - 0x0008)
struct FEndDataTableBikeAngleRange final : public FEndDataTableRowBase
{
public:
	float                                         AngleA;                                            // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngleB;                                            // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableBikeAngleRange) == 0x000008, "Wrong alignment on FEndDataTableBikeAngleRange");
static_assert(sizeof(FEndDataTableBikeAngleRange) == 0x000010, "Wrong size on FEndDataTableBikeAngleRange");
static_assert(offsetof(FEndDataTableBikeAngleRange, AngleA) == 0x000008, "Member 'FEndDataTableBikeAngleRange::AngleA' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeAngleRange, AngleB) == 0x00000C, "Member 'FEndDataTableBikeAngleRange::AngleB' has a wrong offset!");

// ScriptStruct EndGame.EndBehaviorAttackJumpExtraAction
// 0x0240 (0x0A00 - 0x07C0)
struct FEndBehaviorAttackJumpExtraAction final : public FEndBehaviorExtraAction
{
public:
	uint8                                         Pad_7C0[0x240];                                    // 0x07C0(0x0240)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorAttackJumpExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorAttackJumpExtraAction");
static_assert(sizeof(FEndBehaviorAttackJumpExtraAction) == 0x000A00, "Wrong size on FEndBehaviorAttackJumpExtraAction");

// ScriptStruct EndGame.EndBehaviorBalanceMoveExtraAction
// 0x0110 (0x08D0 - 0x07C0)
struct FEndBehaviorBalanceMoveExtraAction final : public FEndBehaviorExtraAction
{
public:
	uint8                                         Pad_7C0[0x110];                                    // 0x07C0(0x0110)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorBalanceMoveExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorBalanceMoveExtraAction");
static_assert(sizeof(FEndBehaviorBalanceMoveExtraAction) == 0x0008D0, "Wrong size on FEndBehaviorBalanceMoveExtraAction");

// ScriptStruct EndGame.EndBehaviorBattleAbilityExtraAction
// 0x0200 (0x09C0 - 0x07C0)
struct FEndBehaviorBattleAbilityExtraAction : public FEndBehaviorExtraAction
{
public:
	uint8                                         Pad_7C0[0x200];                                    // 0x07C0(0x0200)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorBattleAbilityExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorBattleAbilityExtraAction");
static_assert(sizeof(FEndBehaviorBattleAbilityExtraAction) == 0x0009C0, "Wrong size on FEndBehaviorBattleAbilityExtraAction");

// ScriptStruct EndGame.EndDataTableArmMiniGameTriggerInfo
// 0x0038 (0x0040 - 0x0008)
struct FEndDataTableArmMiniGameTriggerInfo final : public FEndDataTableRowBase
{
public:
	class FName                                   TriggerBoxName;                                    // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           ActorName_Array;                                   // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           BeginOverlapTrigger_Array;                         // 0x0020(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           EndOverlapTrigger_Array;                           // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableArmMiniGameTriggerInfo) == 0x000008, "Wrong alignment on FEndDataTableArmMiniGameTriggerInfo");
static_assert(sizeof(FEndDataTableArmMiniGameTriggerInfo) == 0x000040, "Wrong size on FEndDataTableArmMiniGameTriggerInfo");
static_assert(offsetof(FEndDataTableArmMiniGameTriggerInfo, TriggerBoxName) == 0x000008, "Member 'FEndDataTableArmMiniGameTriggerInfo::TriggerBoxName' has a wrong offset!");
static_assert(offsetof(FEndDataTableArmMiniGameTriggerInfo, ActorName_Array) == 0x000010, "Member 'FEndDataTableArmMiniGameTriggerInfo::ActorName_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableArmMiniGameTriggerInfo, BeginOverlapTrigger_Array) == 0x000020, "Member 'FEndDataTableArmMiniGameTriggerInfo::BeginOverlapTrigger_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableArmMiniGameTriggerInfo, EndOverlapTrigger_Array) == 0x000030, "Member 'FEndDataTableArmMiniGameTriggerInfo::EndOverlapTrigger_Array' has a wrong offset!");

// ScriptStruct EndGame.EndBikeAIHelicopterMoveParam_MoveForward
// 0x0008 (0x0008 - 0x0000)
struct FEndBikeAIHelicopterMoveParam_MoveForward final
{
public:
	float                                         RelativeSpeed;                                     // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RelativeSpeedOnRotateYaw;                          // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndBikeAIHelicopterMoveParam_MoveForward) == 0x000004, "Wrong alignment on FEndBikeAIHelicopterMoveParam_MoveForward");
static_assert(sizeof(FEndBikeAIHelicopterMoveParam_MoveForward) == 0x000008, "Wrong size on FEndBikeAIHelicopterMoveParam_MoveForward");
static_assert(offsetof(FEndBikeAIHelicopterMoveParam_MoveForward, RelativeSpeed) == 0x000000, "Member 'FEndBikeAIHelicopterMoveParam_MoveForward::RelativeSpeed' has a wrong offset!");
static_assert(offsetof(FEndBikeAIHelicopterMoveParam_MoveForward, RelativeSpeedOnRotateYaw) == 0x000004, "Member 'FEndBikeAIHelicopterMoveParam_MoveForward::RelativeSpeedOnRotateYaw' has a wrong offset!");

// ScriptStruct EndGame.EndDataTablePushButtonAction
// 0x0050 (0x0058 - 0x0008)
struct FEndDataTablePushButtonAction final : public FEndDataTableRowBase
{
public:
	uint8                                         PlayerPosType;                                     // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PlayerPosLength;                                   // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PushTime;                                          // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           ActorName_Array;                                   // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           Action_Array;                                      // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<uint8>                                 FinishAnimationStop_Array;                         // 0x0038(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           StateTrigger_Array;                                // 0x0048(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTablePushButtonAction) == 0x000008, "Wrong alignment on FEndDataTablePushButtonAction");
static_assert(sizeof(FEndDataTablePushButtonAction) == 0x000058, "Wrong size on FEndDataTablePushButtonAction");
static_assert(offsetof(FEndDataTablePushButtonAction, PlayerPosType) == 0x000008, "Member 'FEndDataTablePushButtonAction::PlayerPosType' has a wrong offset!");
static_assert(offsetof(FEndDataTablePushButtonAction, PlayerPosLength) == 0x00000C, "Member 'FEndDataTablePushButtonAction::PlayerPosLength' has a wrong offset!");
static_assert(offsetof(FEndDataTablePushButtonAction, PushTime) == 0x000010, "Member 'FEndDataTablePushButtonAction::PushTime' has a wrong offset!");
static_assert(offsetof(FEndDataTablePushButtonAction, ActorName_Array) == 0x000018, "Member 'FEndDataTablePushButtonAction::ActorName_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTablePushButtonAction, Action_Array) == 0x000028, "Member 'FEndDataTablePushButtonAction::Action_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTablePushButtonAction, FinishAnimationStop_Array) == 0x000038, "Member 'FEndDataTablePushButtonAction::FinishAnimationStop_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTablePushButtonAction, StateTrigger_Array) == 0x000048, "Member 'FEndDataTablePushButtonAction::StateTrigger_Array' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableBikeBattleCutSceneCharacter
// 0x0040 (0x0048 - 0x0008)
struct FEndDataTableBikeBattleCutSceneCharacter final : public FEndDataTableRowBase
{
public:
	class FName                                   BikeCharaSpecID;                                   // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BikePopupParameterID;                              // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ViecleCharaName;                                   // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ViecleCharaSpecID;                                 // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           RiderCharaNameList_Array;                          // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           RiderCharaSpecIDList_Array;                        // 0x0038(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableBikeBattleCutSceneCharacter) == 0x000008, "Wrong alignment on FEndDataTableBikeBattleCutSceneCharacter");
static_assert(sizeof(FEndDataTableBikeBattleCutSceneCharacter) == 0x000048, "Wrong size on FEndDataTableBikeBattleCutSceneCharacter");
static_assert(offsetof(FEndDataTableBikeBattleCutSceneCharacter, BikeCharaSpecID) == 0x000008, "Member 'FEndDataTableBikeBattleCutSceneCharacter::BikeCharaSpecID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeBattleCutSceneCharacter, BikePopupParameterID) == 0x000010, "Member 'FEndDataTableBikeBattleCutSceneCharacter::BikePopupParameterID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeBattleCutSceneCharacter, ViecleCharaName) == 0x000018, "Member 'FEndDataTableBikeBattleCutSceneCharacter::ViecleCharaName' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeBattleCutSceneCharacter, ViecleCharaSpecID) == 0x000020, "Member 'FEndDataTableBikeBattleCutSceneCharacter::ViecleCharaSpecID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeBattleCutSceneCharacter, RiderCharaNameList_Array) == 0x000028, "Member 'FEndDataTableBikeBattleCutSceneCharacter::RiderCharaNameList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeBattleCutSceneCharacter, RiderCharaSpecIDList_Array) == 0x000038, "Member 'FEndDataTableBikeBattleCutSceneCharacter::RiderCharaSpecIDList_Array' has a wrong offset!");

// ScriptStruct EndGame.EndBehaviorSquatMiniGameAction
// 0x0060 (0x0820 - 0x07C0)
struct FEndBehaviorSquatMiniGameAction : public FEndBehaviorExtraAction
{
public:
	uint8                                         Pad_7C0[0x60];                                     // 0x07C0(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorSquatMiniGameAction) == 0x000010, "Wrong alignment on FEndBehaviorSquatMiniGameAction");
static_assert(sizeof(FEndBehaviorSquatMiniGameAction) == 0x000820, "Wrong size on FEndBehaviorSquatMiniGameAction");

// ScriptStruct EndGame.EndDataTableBattleAICharaSpec
// 0x0068 (0x0070 - 0x0008)
struct FEndDataTableBattleAICharaSpec final : public FEndDataTableRowBase
{
public:
	TArray<bool>                                  flag_Array;                                        // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 Param_Array;                                       // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<bool>                                  btlflag_Array;                                     // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 btlparam_Array;                                    // 0x0038(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 btlvalue_Array;                                    // 0x0048(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         btlstring_Array;                                   // 0x0058(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         TargetSelectType;                                  // 0x0068(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LightAttachATBIntervalTime;                        // 0x006C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableBattleAICharaSpec) == 0x000008, "Wrong alignment on FEndDataTableBattleAICharaSpec");
static_assert(sizeof(FEndDataTableBattleAICharaSpec) == 0x000070, "Wrong size on FEndDataTableBattleAICharaSpec");
static_assert(offsetof(FEndDataTableBattleAICharaSpec, flag_Array) == 0x000008, "Member 'FEndDataTableBattleAICharaSpec::flag_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAICharaSpec, Param_Array) == 0x000018, "Member 'FEndDataTableBattleAICharaSpec::Param_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAICharaSpec, btlflag_Array) == 0x000028, "Member 'FEndDataTableBattleAICharaSpec::btlflag_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAICharaSpec, btlparam_Array) == 0x000038, "Member 'FEndDataTableBattleAICharaSpec::btlparam_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAICharaSpec, btlvalue_Array) == 0x000048, "Member 'FEndDataTableBattleAICharaSpec::btlvalue_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAICharaSpec, btlstring_Array) == 0x000058, "Member 'FEndDataTableBattleAICharaSpec::btlstring_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAICharaSpec, TargetSelectType) == 0x000068, "Member 'FEndDataTableBattleAICharaSpec::TargetSelectType' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAICharaSpec, LightAttachATBIntervalTime) == 0x00006C, "Member 'FEndDataTableBattleAICharaSpec::LightAttachATBIntervalTime' has a wrong offset!");

// ScriptStruct EndGame.EndBehaviorChinUpMiniGameAction
// 0x0000 (0x0820 - 0x0820)
struct FEndBehaviorChinUpMiniGameAction final : public FEndBehaviorSquatMiniGameAction
{
};
static_assert(alignof(FEndBehaviorChinUpMiniGameAction) == 0x000010, "Wrong alignment on FEndBehaviorChinUpMiniGameAction");
static_assert(sizeof(FEndBehaviorChinUpMiniGameAction) == 0x000820, "Wrong size on FEndBehaviorChinUpMiniGameAction");

// ScriptStruct EndGame.EndBehaviorCrackExtraAction
// 0x01A0 (0x0960 - 0x07C0)
struct FEndBehaviorCrackExtraAction final : public FEndBehaviorExtraAction
{
public:
	uint8                                         Pad_7C0[0x1A0];                                    // 0x07C0(0x01A0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorCrackExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorCrackExtraAction");
static_assert(sizeof(FEndBehaviorCrackExtraAction) == 0x000960, "Wrong size on FEndBehaviorCrackExtraAction");

// ScriptStruct EndGame.EndBehaviorCrouchedExtraAction
// 0x0110 (0x08D0 - 0x07C0)
struct FEndBehaviorCrouchedExtraAction final : public FEndBehaviorExtraAction
{
public:
	uint8                                         Pad_7C0[0x110];                                    // 0x07C0(0x0110)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorCrouchedExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorCrouchedExtraAction");
static_assert(sizeof(FEndBehaviorCrouchedExtraAction) == 0x0008D0, "Wrong size on FEndBehaviorCrouchedExtraAction");

// ScriptStruct EndGame.EndDataTableStateTrigger
// 0x0088 (0x0090 - 0x0008)
struct FEndDataTableStateTrigger final : public FEndDataTableRowBase
{
public:
	int32                                         UniqueIndex;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Target;                                            // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 SpecialTypeList_Array;                             // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           ClearHistory_Array;                                // 0x0020(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           ObjectIDList_Array;                                // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           AttributeNameList_Array;                           // 0x0040(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           StateChangeIDList_Array;                           // 0x0050(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         EnableBattleSnap;                                  // 0x0060(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           BattleSnapTargetPoint_Array;                       // 0x0068(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   BackupSaveEndActionID;                             // 0x0078(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           SendObject_Array;                                  // 0x0080(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableStateTrigger) == 0x000008, "Wrong alignment on FEndDataTableStateTrigger");
static_assert(sizeof(FEndDataTableStateTrigger) == 0x000090, "Wrong size on FEndDataTableStateTrigger");
static_assert(offsetof(FEndDataTableStateTrigger, UniqueIndex) == 0x000008, "Member 'FEndDataTableStateTrigger::UniqueIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTableStateTrigger, Target) == 0x00000C, "Member 'FEndDataTableStateTrigger::Target' has a wrong offset!");
static_assert(offsetof(FEndDataTableStateTrigger, SpecialTypeList_Array) == 0x000010, "Member 'FEndDataTableStateTrigger::SpecialTypeList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableStateTrigger, ClearHistory_Array) == 0x000020, "Member 'FEndDataTableStateTrigger::ClearHistory_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableStateTrigger, ObjectIDList_Array) == 0x000030, "Member 'FEndDataTableStateTrigger::ObjectIDList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableStateTrigger, AttributeNameList_Array) == 0x000040, "Member 'FEndDataTableStateTrigger::AttributeNameList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableStateTrigger, StateChangeIDList_Array) == 0x000050, "Member 'FEndDataTableStateTrigger::StateChangeIDList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableStateTrigger, EnableBattleSnap) == 0x000060, "Member 'FEndDataTableStateTrigger::EnableBattleSnap' has a wrong offset!");
static_assert(offsetof(FEndDataTableStateTrigger, BattleSnapTargetPoint_Array) == 0x000068, "Member 'FEndDataTableStateTrigger::BattleSnapTargetPoint_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableStateTrigger, BackupSaveEndActionID) == 0x000078, "Member 'FEndDataTableStateTrigger::BackupSaveEndActionID' has a wrong offset!");
static_assert(offsetof(FEndDataTableStateTrigger, SendObject_Array) == 0x000080, "Member 'FEndDataTableStateTrigger::SendObject_Array' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableSubStory
// 0x0090 (0x0098 - 0x0008)
struct FEndDataTableSubStory final : public FEndDataTableRowBase
{
public:
	int32                                         StepIndex;                                         // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParentID;                                          // 0x000C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ChangeTargetID;                                    // 0x0014(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         CompleteStatus;                                    // 0x001C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ProgressFlag;                                      // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ViewFlag;                                          // 0x0028(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ItemName;                                          // 0x0030(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StoryImageName;                                    // 0x0040(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StoryText;                                         // 0x0050(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           TargetName_Array;                                  // 0x0060(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   RewardID;                                          // 0x0070(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UniqueID;                                          // 0x0078(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GroupID;                                           // 0x007C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Condition;                                         // 0x0080(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SuccessCondition;                                  // 0x0088(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FailedCondition;                                   // 0x0090(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableSubStory) == 0x000008, "Wrong alignment on FEndDataTableSubStory");
static_assert(sizeof(FEndDataTableSubStory) == 0x000098, "Wrong size on FEndDataTableSubStory");
static_assert(offsetof(FEndDataTableSubStory, StepIndex) == 0x000008, "Member 'FEndDataTableSubStory::StepIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTableSubStory, ParentID) == 0x00000C, "Member 'FEndDataTableSubStory::ParentID' has a wrong offset!");
static_assert(offsetof(FEndDataTableSubStory, ChangeTargetID) == 0x000014, "Member 'FEndDataTableSubStory::ChangeTargetID' has a wrong offset!");
static_assert(offsetof(FEndDataTableSubStory, CompleteStatus) == 0x00001C, "Member 'FEndDataTableSubStory::CompleteStatus' has a wrong offset!");
static_assert(offsetof(FEndDataTableSubStory, ProgressFlag) == 0x000020, "Member 'FEndDataTableSubStory::ProgressFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTableSubStory, ViewFlag) == 0x000028, "Member 'FEndDataTableSubStory::ViewFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTableSubStory, ItemName) == 0x000030, "Member 'FEndDataTableSubStory::ItemName' has a wrong offset!");
static_assert(offsetof(FEndDataTableSubStory, StoryImageName) == 0x000040, "Member 'FEndDataTableSubStory::StoryImageName' has a wrong offset!");
static_assert(offsetof(FEndDataTableSubStory, StoryText) == 0x000050, "Member 'FEndDataTableSubStory::StoryText' has a wrong offset!");
static_assert(offsetof(FEndDataTableSubStory, TargetName_Array) == 0x000060, "Member 'FEndDataTableSubStory::TargetName_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableSubStory, RewardID) == 0x000070, "Member 'FEndDataTableSubStory::RewardID' has a wrong offset!");
static_assert(offsetof(FEndDataTableSubStory, UniqueID) == 0x000078, "Member 'FEndDataTableSubStory::UniqueID' has a wrong offset!");
static_assert(offsetof(FEndDataTableSubStory, GroupID) == 0x00007C, "Member 'FEndDataTableSubStory::GroupID' has a wrong offset!");
static_assert(offsetof(FEndDataTableSubStory, Condition) == 0x000080, "Member 'FEndDataTableSubStory::Condition' has a wrong offset!");
static_assert(offsetof(FEndDataTableSubStory, SuccessCondition) == 0x000088, "Member 'FEndDataTableSubStory::SuccessCondition' has a wrong offset!");
static_assert(offsetof(FEndDataTableSubStory, FailedCondition) == 0x000090, "Member 'FEndDataTableSubStory::FailedCondition' has a wrong offset!");

// ScriptStruct EndGame.EndBehaviorDamageExtraAction
// 0x0030 (0x07F0 - 0x07C0)
struct FEndBehaviorDamageExtraAction final : public FEndBehaviorExtraAction
{
public:
	uint8                                         Pad_7C0[0x30];                                     // 0x07C0(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorDamageExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorDamageExtraAction");
static_assert(sizeof(FEndBehaviorDamageExtraAction) == 0x0007F0, "Wrong size on FEndBehaviorDamageExtraAction");

// ScriptStruct EndGame.EndWeaponUpgradeCircle
// 0x0200 (0x0200 - 0x0000)
struct FEndWeaponUpgradeCircle final
{
public:
	struct FRawDistributionFloat                  m_Radius;                                          // 0x0000(0x0040)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                  m_RadiusStep;                                      // 0x0040(0x0040)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRawDistributionVector                 m_RadiusScale;                                     // 0x0080(0x0060)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRawDistributionVector                 m_Angle;                                           // 0x00E0(0x0060)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRawDistributionVector                 m_AngleStep;                                       // 0x0140(0x0060)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRawDistributionVector                 m_AngleSpeed;                                      // 0x01A0(0x0060)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndWeaponUpgradeCircle) == 0x000008, "Wrong alignment on FEndWeaponUpgradeCircle");
static_assert(sizeof(FEndWeaponUpgradeCircle) == 0x000200, "Wrong size on FEndWeaponUpgradeCircle");
static_assert(offsetof(FEndWeaponUpgradeCircle, m_Radius) == 0x000000, "Member 'FEndWeaponUpgradeCircle::m_Radius' has a wrong offset!");
static_assert(offsetof(FEndWeaponUpgradeCircle, m_RadiusStep) == 0x000040, "Member 'FEndWeaponUpgradeCircle::m_RadiusStep' has a wrong offset!");
static_assert(offsetof(FEndWeaponUpgradeCircle, m_RadiusScale) == 0x000080, "Member 'FEndWeaponUpgradeCircle::m_RadiusScale' has a wrong offset!");
static_assert(offsetof(FEndWeaponUpgradeCircle, m_Angle) == 0x0000E0, "Member 'FEndWeaponUpgradeCircle::m_Angle' has a wrong offset!");
static_assert(offsetof(FEndWeaponUpgradeCircle, m_AngleStep) == 0x000140, "Member 'FEndWeaponUpgradeCircle::m_AngleStep' has a wrong offset!");
static_assert(offsetof(FEndWeaponUpgradeCircle, m_AngleSpeed) == 0x0001A0, "Member 'FEndWeaponUpgradeCircle::m_AngleSpeed' has a wrong offset!");

// ScriptStruct EndGame.EndBehaviorDeadAction
// 0x00B0 (0x06F8 - 0x0648)
struct FEndBehaviorDeadAction final : public FEndBehaviorSequencePlayAction
{
public:
	uint8                                         Pad_648[0xB0];                                     // 0x0648(0x00B0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorDeadAction) == 0x000008, "Wrong alignment on FEndBehaviorDeadAction");
static_assert(sizeof(FEndBehaviorDeadAction) == 0x0006F8, "Wrong size on FEndBehaviorDeadAction");

// ScriptStruct EndGame.EndBehaviorDuctMoveExtraAction
// 0x0150 (0x0910 - 0x07C0)
struct FEndBehaviorDuctMoveExtraAction final : public FEndBehaviorExtraAction
{
public:
	uint8                                         Pad_7C0[0x150];                                    // 0x07C0(0x0150)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorDuctMoveExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorDuctMoveExtraAction");
static_assert(sizeof(FEndBehaviorDuctMoveExtraAction) == 0x000910, "Wrong size on FEndBehaviorDuctMoveExtraAction");

// ScriptStruct EndGame.EndDataTableBikeAbility
// 0x00F8 (0x0100 - 0x0008)
struct FEndDataTableBikeAbility final : public FEndDataTableRowBase
{
public:
	class FName                                   DefaultDamageSourceID;                             // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         AbilityType;                                       // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         NormalRange;                                       // 0x0011(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         DistanceType;                                      // 0x0012(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13[0x1];                                       // 0x0013(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   MotionID;                                          // 0x0014(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CameraSequenceID;                                  // 0x001C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReferenceBattleAbilityID;                          // 0x0024(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 NameTextID;                                        // 0x0030(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CoolDownTime;                                      // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ExclusiveGroup;                                    // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TargetToPlayerOdds;                                // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TargetToAllyOdds;                                  // 0x004C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         AttackerPositionCondition;                         // 0x0050(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CenterPositionOffset;                              // 0x0054(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         TargetPositionCondition;                           // 0x0058(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   TargetSearchAngleRange;                            // 0x005C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetSearchDistanceMin;                           // 0x0064(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetSearchDistanceMax;                           // 0x0068(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetSearchDiffSplineMileageMin;                  // 0x006C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetSearchDiffSplineMileageMax;                  // 0x0070(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         SuperArmorSincePrepare;                            // 0x0074(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_75[0x3];                                       // 0x0075(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 PrepareAttack_Array;                               // 0x0078(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 PrepareAttackParameter_Array;                      // 0x0088(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         NotCancelAtOutOfRange;                             // 0x0098(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_99[0x3];                                       // 0x0099(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PrepareAttackTimeout;                              // 0x009C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ForceAttackTime;                                   // 0x00A0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PrepareAttackBeginMotion;                          // 0x00A4(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PrepareAttackLoopMotion;                           // 0x00AC(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PrepareAttackCancelMotion;                         // 0x00B4(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CoolDownLoopMotion;                                // 0x00BC(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CoolDownEndMotion;                                 // 0x00C4(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InterruptAbility;                                  // 0x00CC(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D4[0x4];                                       // 0x00D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           BranchAbility_Array;                               // 0x00D8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   TalkSetAtPrepareAttack;                            // 0x00E8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TalkSetAtAttack;                                   // 0x00F0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BurstDamageBonus;                                  // 0x00F8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FC[0x4];                                       // 0x00FC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableBikeAbility) == 0x000008, "Wrong alignment on FEndDataTableBikeAbility");
static_assert(sizeof(FEndDataTableBikeAbility) == 0x000100, "Wrong size on FEndDataTableBikeAbility");
static_assert(offsetof(FEndDataTableBikeAbility, DefaultDamageSourceID) == 0x000008, "Member 'FEndDataTableBikeAbility::DefaultDamageSourceID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeAbility, AbilityType) == 0x000010, "Member 'FEndDataTableBikeAbility::AbilityType' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeAbility, NormalRange) == 0x000011, "Member 'FEndDataTableBikeAbility::NormalRange' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeAbility, DistanceType) == 0x000012, "Member 'FEndDataTableBikeAbility::DistanceType' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeAbility, MotionID) == 0x000014, "Member 'FEndDataTableBikeAbility::MotionID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeAbility, CameraSequenceID) == 0x00001C, "Member 'FEndDataTableBikeAbility::CameraSequenceID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeAbility, ReferenceBattleAbilityID) == 0x000024, "Member 'FEndDataTableBikeAbility::ReferenceBattleAbilityID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeAbility, NameTextID) == 0x000030, "Member 'FEndDataTableBikeAbility::NameTextID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeAbility, CoolDownTime) == 0x000040, "Member 'FEndDataTableBikeAbility::CoolDownTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeAbility, ExclusiveGroup) == 0x000044, "Member 'FEndDataTableBikeAbility::ExclusiveGroup' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeAbility, TargetToPlayerOdds) == 0x000048, "Member 'FEndDataTableBikeAbility::TargetToPlayerOdds' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeAbility, TargetToAllyOdds) == 0x00004C, "Member 'FEndDataTableBikeAbility::TargetToAllyOdds' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeAbility, AttackerPositionCondition) == 0x000050, "Member 'FEndDataTableBikeAbility::AttackerPositionCondition' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeAbility, CenterPositionOffset) == 0x000054, "Member 'FEndDataTableBikeAbility::CenterPositionOffset' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeAbility, TargetPositionCondition) == 0x000058, "Member 'FEndDataTableBikeAbility::TargetPositionCondition' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeAbility, TargetSearchAngleRange) == 0x00005C, "Member 'FEndDataTableBikeAbility::TargetSearchAngleRange' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeAbility, TargetSearchDistanceMin) == 0x000064, "Member 'FEndDataTableBikeAbility::TargetSearchDistanceMin' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeAbility, TargetSearchDistanceMax) == 0x000068, "Member 'FEndDataTableBikeAbility::TargetSearchDistanceMax' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeAbility, TargetSearchDiffSplineMileageMin) == 0x00006C, "Member 'FEndDataTableBikeAbility::TargetSearchDiffSplineMileageMin' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeAbility, TargetSearchDiffSplineMileageMax) == 0x000070, "Member 'FEndDataTableBikeAbility::TargetSearchDiffSplineMileageMax' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeAbility, SuperArmorSincePrepare) == 0x000074, "Member 'FEndDataTableBikeAbility::SuperArmorSincePrepare' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeAbility, PrepareAttack_Array) == 0x000078, "Member 'FEndDataTableBikeAbility::PrepareAttack_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeAbility, PrepareAttackParameter_Array) == 0x000088, "Member 'FEndDataTableBikeAbility::PrepareAttackParameter_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeAbility, NotCancelAtOutOfRange) == 0x000098, "Member 'FEndDataTableBikeAbility::NotCancelAtOutOfRange' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeAbility, PrepareAttackTimeout) == 0x00009C, "Member 'FEndDataTableBikeAbility::PrepareAttackTimeout' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeAbility, ForceAttackTime) == 0x0000A0, "Member 'FEndDataTableBikeAbility::ForceAttackTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeAbility, PrepareAttackBeginMotion) == 0x0000A4, "Member 'FEndDataTableBikeAbility::PrepareAttackBeginMotion' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeAbility, PrepareAttackLoopMotion) == 0x0000AC, "Member 'FEndDataTableBikeAbility::PrepareAttackLoopMotion' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeAbility, PrepareAttackCancelMotion) == 0x0000B4, "Member 'FEndDataTableBikeAbility::PrepareAttackCancelMotion' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeAbility, CoolDownLoopMotion) == 0x0000BC, "Member 'FEndDataTableBikeAbility::CoolDownLoopMotion' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeAbility, CoolDownEndMotion) == 0x0000C4, "Member 'FEndDataTableBikeAbility::CoolDownEndMotion' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeAbility, InterruptAbility) == 0x0000CC, "Member 'FEndDataTableBikeAbility::InterruptAbility' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeAbility, BranchAbility_Array) == 0x0000D8, "Member 'FEndDataTableBikeAbility::BranchAbility_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeAbility, TalkSetAtPrepareAttack) == 0x0000E8, "Member 'FEndDataTableBikeAbility::TalkSetAtPrepareAttack' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeAbility, TalkSetAtAttack) == 0x0000F0, "Member 'FEndDataTableBikeAbility::TalkSetAtAttack' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeAbility, BurstDamageBonus) == 0x0000F8, "Member 'FEndDataTableBikeAbility::BurstDamageBonus' has a wrong offset!");

// ScriptStruct EndGame.EndBehaviorFaceGuardExtraAction
// 0x0060 (0x0820 - 0x07C0)
struct FEndBehaviorFaceGuardExtraAction final : public FEndBehaviorExtraAction
{
public:
	uint8                                         Pad_7C0[0x60];                                     // 0x07C0(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorFaceGuardExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorFaceGuardExtraAction");
static_assert(sizeof(FEndBehaviorFaceGuardExtraAction) == 0x000820, "Wrong size on FEndBehaviorFaceGuardExtraAction");

// ScriptStruct EndGame.EndDataTableBikePhaseEnemy
// 0x0030 (0x0038 - 0x0008)
struct FEndDataTableBikePhaseEnemy final : public FEndDataTableRowBase
{
public:
	TArray<class FName>                           BikeCharaSpecIDList_Array;                         // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           BikePopupParameterList_Array;                      // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         StringArgument_Array;                              // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableBikePhaseEnemy) == 0x000008, "Wrong alignment on FEndDataTableBikePhaseEnemy");
static_assert(sizeof(FEndDataTableBikePhaseEnemy) == 0x000038, "Wrong size on FEndDataTableBikePhaseEnemy");
static_assert(offsetof(FEndDataTableBikePhaseEnemy, BikeCharaSpecIDList_Array) == 0x000008, "Member 'FEndDataTableBikePhaseEnemy::BikeCharaSpecIDList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikePhaseEnemy, BikePopupParameterList_Array) == 0x000018, "Member 'FEndDataTableBikePhaseEnemy::BikePopupParameterList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikePhaseEnemy, StringArgument_Array) == 0x000028, "Member 'FEndDataTableBikePhaseEnemy::StringArgument_Array' has a wrong offset!");

// ScriptStruct EndGame.EndBehaviorFanExtraAction
// 0x0110 (0x08D0 - 0x07C0)
struct FEndBehaviorFanExtraAction final : public FEndBehaviorExtraAction
{
public:
	uint8                                         Pad_7C0[0x110];                                    // 0x07C0(0x0110)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorFanExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorFanExtraAction");
static_assert(sizeof(FEndBehaviorFanExtraAction) == 0x0008D0, "Wrong size on FEndBehaviorFanExtraAction");

// ScriptStruct EndGame.EndDataTableReward
// 0x0038 (0x0040 - 0x0008)
struct FEndDataTableReward final : public FEndDataTableRowBase
{
public:
	int32                                         UniqueIndex;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           StateCondision_Array;                              // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           ItemID_Array;                                      // 0x0020(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 ItemCount_Array;                                   // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableReward) == 0x000008, "Wrong alignment on FEndDataTableReward");
static_assert(sizeof(FEndDataTableReward) == 0x000040, "Wrong size on FEndDataTableReward");
static_assert(offsetof(FEndDataTableReward, UniqueIndex) == 0x000008, "Member 'FEndDataTableReward::UniqueIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTableReward, StateCondision_Array) == 0x000010, "Member 'FEndDataTableReward::StateCondision_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableReward, ItemID_Array) == 0x000020, "Member 'FEndDataTableReward::ItemID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableReward, ItemCount_Array) == 0x000030, "Member 'FEndDataTableReward::ItemCount_Array' has a wrong offset!");

// ScriptStruct EndGame.EndBehaviorFieldExtraAction
// 0x00B0 (0x0870 - 0x07C0)
struct FEndBehaviorFieldExtraAction final : public FEndBehaviorExtraAction
{
public:
	uint8                                         Pad_7C0[0xB0];                                     // 0x07C0(0x00B0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorFieldExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorFieldExtraAction");
static_assert(sizeof(FEndBehaviorFieldExtraAction) == 0x000870, "Wrong size on FEndBehaviorFieldExtraAction");

// ScriptStruct EndGame.EndInterSetting
// 0x0038 (0x0038 - 0x0000)
struct FEndInterSetting final
{
public:
	TArray<bool>                                  Sense;                                             // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 Presence;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 Intimidation;                                      // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         InterestRadius;                                    // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndInterSetting) == 0x000008, "Wrong alignment on FEndInterSetting");
static_assert(sizeof(FEndInterSetting) == 0x000038, "Wrong size on FEndInterSetting");
static_assert(offsetof(FEndInterSetting, Sense) == 0x000000, "Member 'FEndInterSetting::Sense' has a wrong offset!");
static_assert(offsetof(FEndInterSetting, Presence) == 0x000010, "Member 'FEndInterSetting::Presence' has a wrong offset!");
static_assert(offsetof(FEndInterSetting, Intimidation) == 0x000020, "Member 'FEndInterSetting::Intimidation' has a wrong offset!");
static_assert(offsetof(FEndInterSetting, InterestRadius) == 0x000030, "Member 'FEndInterSetting::InterestRadius' has a wrong offset!");

// ScriptStruct EndGame.EndBehaviorGraviticJumpExtraAction
// 0x0360 (0x0B20 - 0x07C0)
struct FEndBehaviorGraviticJumpExtraAction final : public FEndBehaviorExtraAction
{
public:
	uint8                                         Pad_7C0[0x360];                                    // 0x07C0(0x0360)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorGraviticJumpExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorGraviticJumpExtraAction");
static_assert(sizeof(FEndBehaviorGraviticJumpExtraAction) == 0x000B20, "Wrong size on FEndBehaviorGraviticJumpExtraAction");

// ScriptStruct EndGame.EndBehaviorGuardExtraAction
// 0x0010 (0x0A50 - 0x0A40)
struct FEndBehaviorGuardExtraAction final : public FEndBehaviorSimpleFsmExtraAction
{
public:
	uint8                                         Pad_A40[0x10];                                     // 0x0A40(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorGuardExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorGuardExtraAction");
static_assert(sizeof(FEndBehaviorGuardExtraAction) == 0x000A50, "Wrong size on FEndBehaviorGuardExtraAction");

// ScriptStruct EndGame.EndBehaviorHangMoveExtraAction
// 0x00D0 (0x0890 - 0x07C0)
struct FEndBehaviorHangMoveExtraAction final : public FEndBehaviorExtraAction
{
public:
	uint8                                         Pad_7C0[0xD0];                                     // 0x07C0(0x00D0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorHangMoveExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorHangMoveExtraAction");
static_assert(sizeof(FEndBehaviorHangMoveExtraAction) == 0x000890, "Wrong size on FEndBehaviorHangMoveExtraAction");

// ScriptStruct EndGame.EndBehaviorHeavyDoorExtraAction
// 0x0170 (0x0930 - 0x07C0)
struct FEndBehaviorHeavyDoorExtraAction final : public FEndBehaviorExtraAction
{
public:
	uint8                                         Pad_7C0[0x170];                                    // 0x07C0(0x0170)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorHeavyDoorExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorHeavyDoorExtraAction");
static_assert(sizeof(FEndBehaviorHeavyDoorExtraAction) == 0x000930, "Wrong size on FEndBehaviorHeavyDoorExtraAction");

// ScriptStruct EndGame.EndBehaviorHookShotExtraAction
// 0x01E0 (0x09A0 - 0x07C0)
struct FEndBehaviorHookShotExtraAction final : public FEndBehaviorExtraAction
{
public:
	uint8                                         Pad_7C0[0x1E0];                                    // 0x07C0(0x01E0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorHookShotExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorHookShotExtraAction");
static_assert(sizeof(FEndBehaviorHookShotExtraAction) == 0x0009A0, "Wrong size on FEndBehaviorHookShotExtraAction");

// ScriptStruct EndGame.EndBehaviorJumpAttackFallExtraAction
// 0x0090 (0x0850 - 0x07C0)
struct FEndBehaviorJumpAttackFallExtraAction final : public FEndBehaviorExtraAction
{
public:
	uint8                                         Pad_7C0[0x90];                                     // 0x07C0(0x0090)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorJumpAttackFallExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorJumpAttackFallExtraAction");
static_assert(sizeof(FEndBehaviorJumpAttackFallExtraAction) == 0x000850, "Wrong size on FEndBehaviorJumpAttackFallExtraAction");

// ScriptStruct EndGame.EndBehaviorJumpExtraAction
// 0x0320 (0x0AE0 - 0x07C0)
struct FEndBehaviorJumpExtraAction final : public FEndBehaviorExtraAction
{
public:
	uint8                                         Pad_7C0[0x320];                                    // 0x07C0(0x0320)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorJumpExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorJumpExtraAction");
static_assert(sizeof(FEndBehaviorJumpExtraAction) == 0x000AE0, "Wrong size on FEndBehaviorJumpExtraAction");

// ScriptStruct EndGame.EndDataTableStoryProgress
// 0x0008 (0x0010 - 0x0008)
struct FEndDataTableStoryProgress final : public FEndDataTableRowBase
{
public:
	int32                                         Progress;                                          // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         VoicePattern;                                      // 0x000C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableStoryProgress) == 0x000008, "Wrong alignment on FEndDataTableStoryProgress");
static_assert(sizeof(FEndDataTableStoryProgress) == 0x000010, "Wrong size on FEndDataTableStoryProgress");
static_assert(offsetof(FEndDataTableStoryProgress, Progress) == 0x000008, "Member 'FEndDataTableStoryProgress::Progress' has a wrong offset!");
static_assert(offsetof(FEndDataTableStoryProgress, VoicePattern) == 0x00000C, "Member 'FEndDataTableStoryProgress::VoicePattern' has a wrong offset!");

// ScriptStruct EndGame.EndBehaviorKnockBackExtraAction
// 0x0090 (0x0850 - 0x07C0)
struct FEndBehaviorKnockBackExtraAction final : public FEndBehaviorExtraAction
{
public:
	uint8                                         Pad_7C0[0x90];                                     // 0x07C0(0x0090)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorKnockBackExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorKnockBackExtraAction");
static_assert(sizeof(FEndBehaviorKnockBackExtraAction) == 0x000850, "Wrong size on FEndBehaviorKnockBackExtraAction");

// ScriptStruct EndGame.EndBehaviorLadderExtraAction
// 0x0180 (0x0940 - 0x07C0)
struct FEndBehaviorLadderExtraAction final : public FEndBehaviorExtraAction
{
public:
	uint8                                         Pad_7C0[0x180];                                    // 0x07C0(0x0180)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorLadderExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorLadderExtraAction");
static_assert(sizeof(FEndBehaviorLadderExtraAction) == 0x000940, "Wrong size on FEndBehaviorLadderExtraAction");

// ScriptStruct EndGame.BonamikBoxWindData
// 0x0064 (0x0064 - 0x0000)
struct FBonamikBoxWindData final
{
public:
	EEndBonamikWindType                           Type;                                              // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                BaseForce;                                         // 0x0004(0x000C)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsAdditive;                                       // 0x0010(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                AdditiveDirectionalForce;                          // 0x0014(0x000C)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RandomRange;                                       // 0x0020(0x000C)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RandomTime;                                        // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                AdditiveWaveForce;                                 // 0x0030(0x000C)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WaveAmplitude;                                     // 0x003C(0x000C)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WavePeriod;                                        // 0x0048(0x000C)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WaveFrequency;                                     // 0x0054(0x000C)(Edit, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 PreviewColor;                                      // 0x0060(0x0004)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBonamikBoxWindData) == 0x000004, "Wrong alignment on FBonamikBoxWindData");
static_assert(sizeof(FBonamikBoxWindData) == 0x000064, "Wrong size on FBonamikBoxWindData");
static_assert(offsetof(FBonamikBoxWindData, Type) == 0x000000, "Member 'FBonamikBoxWindData::Type' has a wrong offset!");
static_assert(offsetof(FBonamikBoxWindData, BaseForce) == 0x000004, "Member 'FBonamikBoxWindData::BaseForce' has a wrong offset!");
static_assert(offsetof(FBonamikBoxWindData, bIsAdditive) == 0x000010, "Member 'FBonamikBoxWindData::bIsAdditive' has a wrong offset!");
static_assert(offsetof(FBonamikBoxWindData, AdditiveDirectionalForce) == 0x000014, "Member 'FBonamikBoxWindData::AdditiveDirectionalForce' has a wrong offset!");
static_assert(offsetof(FBonamikBoxWindData, RandomRange) == 0x000020, "Member 'FBonamikBoxWindData::RandomRange' has a wrong offset!");
static_assert(offsetof(FBonamikBoxWindData, RandomTime) == 0x00002C, "Member 'FBonamikBoxWindData::RandomTime' has a wrong offset!");
static_assert(offsetof(FBonamikBoxWindData, AdditiveWaveForce) == 0x000030, "Member 'FBonamikBoxWindData::AdditiveWaveForce' has a wrong offset!");
static_assert(offsetof(FBonamikBoxWindData, WaveAmplitude) == 0x00003C, "Member 'FBonamikBoxWindData::WaveAmplitude' has a wrong offset!");
static_assert(offsetof(FBonamikBoxWindData, WavePeriod) == 0x000048, "Member 'FBonamikBoxWindData::WavePeriod' has a wrong offset!");
static_assert(offsetof(FBonamikBoxWindData, WaveFrequency) == 0x000054, "Member 'FBonamikBoxWindData::WaveFrequency' has a wrong offset!");
static_assert(offsetof(FBonamikBoxWindData, PreviewColor) == 0x000060, "Member 'FBonamikBoxWindData::PreviewColor' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableBattleSceneLevel
// 0x0188 (0x0190 - 0x0008)
struct FEndDataTableBattleSceneLevel final : public FEndDataTableRowBase
{
public:
	TArray<class FName>                           ToAggressiveStateTrigger_Array;                    // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           EntryStateTrigger_Array;                           // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           EscapingStateTrigger_Array;                        // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           WaveStateTrigger_Array;                            // 0x0038(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           ImmediateKillStateTrigger_Array;                   // 0x0048(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           KillStateTrigger_Array;                            // 0x0058(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           StateTriggerList_Array;                            // 0x0068(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   DisableTargetIconObjectLayout;                     // 0x0078(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ForceAggressive;                                   // 0x0080(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PreBattleBGMName;                                  // 0x0088(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BattleBGMSlotID;                                   // 0x0098(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         BattleBGMNameList_Array;                           // 0x00A8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           WaveTargetPointList_Array;                         // 0x00B8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           TalkGroupID_Array;                                 // 0x00C8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           BattleConditionTriggerGroupId_Array;               // 0x00D8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         SituationType;                                     // 0x00E8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E9[0x3];                                       // 0x00E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NoWaitBattleTalk;                                  // 0x00EC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ToConnectEvent;                                    // 0x00F0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F4[0x4];                                       // 0x00F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 FinishBattleType_Array;                            // 0x00F8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   AIParameter;                                       // 0x0108(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   WanderingParamList;                                // 0x0110(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         UnableBattleInTeleport;                            // 0x0118(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         UnableBattleFinishTeleport;                        // 0x0119(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         IgnoreDelayBattleIn;                               // 0x011A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11B[0x1];                                      // 0x011B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   RewardStateConditionID00;                          // 0x011C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RewardStateConditionID01;                          // 0x0124(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RewardID;                                          // 0x012C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LinkBattleScene;                                   // 0x0134(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FirstEncountMonitorLocationWork;                   // 0x013C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SubQuestId;                                        // 0x0144(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         NoDepopInFieldAction;                              // 0x014C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14D[0x3];                                      // 0x014D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 PositionX_Array;                                   // 0x0150(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 PositionY_Array;                                   // 0x0160(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 PositionZ_Array;                                   // 0x0170(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 RotationY_Array;                                   // 0x0180(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableBattleSceneLevel) == 0x000008, "Wrong alignment on FEndDataTableBattleSceneLevel");
static_assert(sizeof(FEndDataTableBattleSceneLevel) == 0x000190, "Wrong size on FEndDataTableBattleSceneLevel");
static_assert(offsetof(FEndDataTableBattleSceneLevel, ToAggressiveStateTrigger_Array) == 0x000008, "Member 'FEndDataTableBattleSceneLevel::ToAggressiveStateTrigger_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSceneLevel, EntryStateTrigger_Array) == 0x000018, "Member 'FEndDataTableBattleSceneLevel::EntryStateTrigger_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSceneLevel, EscapingStateTrigger_Array) == 0x000028, "Member 'FEndDataTableBattleSceneLevel::EscapingStateTrigger_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSceneLevel, WaveStateTrigger_Array) == 0x000038, "Member 'FEndDataTableBattleSceneLevel::WaveStateTrigger_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSceneLevel, ImmediateKillStateTrigger_Array) == 0x000048, "Member 'FEndDataTableBattleSceneLevel::ImmediateKillStateTrigger_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSceneLevel, KillStateTrigger_Array) == 0x000058, "Member 'FEndDataTableBattleSceneLevel::KillStateTrigger_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSceneLevel, StateTriggerList_Array) == 0x000068, "Member 'FEndDataTableBattleSceneLevel::StateTriggerList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSceneLevel, DisableTargetIconObjectLayout) == 0x000078, "Member 'FEndDataTableBattleSceneLevel::DisableTargetIconObjectLayout' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSceneLevel, ForceAggressive) == 0x000080, "Member 'FEndDataTableBattleSceneLevel::ForceAggressive' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSceneLevel, PreBattleBGMName) == 0x000088, "Member 'FEndDataTableBattleSceneLevel::PreBattleBGMName' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSceneLevel, BattleBGMSlotID) == 0x000098, "Member 'FEndDataTableBattleSceneLevel::BattleBGMSlotID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSceneLevel, BattleBGMNameList_Array) == 0x0000A8, "Member 'FEndDataTableBattleSceneLevel::BattleBGMNameList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSceneLevel, WaveTargetPointList_Array) == 0x0000B8, "Member 'FEndDataTableBattleSceneLevel::WaveTargetPointList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSceneLevel, TalkGroupID_Array) == 0x0000C8, "Member 'FEndDataTableBattleSceneLevel::TalkGroupID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSceneLevel, BattleConditionTriggerGroupId_Array) == 0x0000D8, "Member 'FEndDataTableBattleSceneLevel::BattleConditionTriggerGroupId_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSceneLevel, SituationType) == 0x0000E8, "Member 'FEndDataTableBattleSceneLevel::SituationType' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSceneLevel, NoWaitBattleTalk) == 0x0000EC, "Member 'FEndDataTableBattleSceneLevel::NoWaitBattleTalk' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSceneLevel, ToConnectEvent) == 0x0000F0, "Member 'FEndDataTableBattleSceneLevel::ToConnectEvent' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSceneLevel, FinishBattleType_Array) == 0x0000F8, "Member 'FEndDataTableBattleSceneLevel::FinishBattleType_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSceneLevel, AIParameter) == 0x000108, "Member 'FEndDataTableBattleSceneLevel::AIParameter' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSceneLevel, WanderingParamList) == 0x000110, "Member 'FEndDataTableBattleSceneLevel::WanderingParamList' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSceneLevel, UnableBattleInTeleport) == 0x000118, "Member 'FEndDataTableBattleSceneLevel::UnableBattleInTeleport' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSceneLevel, UnableBattleFinishTeleport) == 0x000119, "Member 'FEndDataTableBattleSceneLevel::UnableBattleFinishTeleport' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSceneLevel, IgnoreDelayBattleIn) == 0x00011A, "Member 'FEndDataTableBattleSceneLevel::IgnoreDelayBattleIn' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSceneLevel, RewardStateConditionID00) == 0x00011C, "Member 'FEndDataTableBattleSceneLevel::RewardStateConditionID00' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSceneLevel, RewardStateConditionID01) == 0x000124, "Member 'FEndDataTableBattleSceneLevel::RewardStateConditionID01' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSceneLevel, RewardID) == 0x00012C, "Member 'FEndDataTableBattleSceneLevel::RewardID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSceneLevel, LinkBattleScene) == 0x000134, "Member 'FEndDataTableBattleSceneLevel::LinkBattleScene' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSceneLevel, FirstEncountMonitorLocationWork) == 0x00013C, "Member 'FEndDataTableBattleSceneLevel::FirstEncountMonitorLocationWork' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSceneLevel, SubQuestId) == 0x000144, "Member 'FEndDataTableBattleSceneLevel::SubQuestId' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSceneLevel, NoDepopInFieldAction) == 0x00014C, "Member 'FEndDataTableBattleSceneLevel::NoDepopInFieldAction' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSceneLevel, PositionX_Array) == 0x000150, "Member 'FEndDataTableBattleSceneLevel::PositionX_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSceneLevel, PositionY_Array) == 0x000160, "Member 'FEndDataTableBattleSceneLevel::PositionY_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSceneLevel, PositionZ_Array) == 0x000170, "Member 'FEndDataTableBattleSceneLevel::PositionZ_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSceneLevel, RotationY_Array) == 0x000180, "Member 'FEndDataTableBattleSceneLevel::RotationY_Array' has a wrong offset!");

// ScriptStruct EndGame.EndBehaviorLaunchExtraAction
// 0x03C0 (0x0B80 - 0x07C0)
struct FEndBehaviorLaunchExtraAction final : public FEndBehaviorExtraAction
{
public:
	uint8                                         Pad_7C0[0x3C0];                                    // 0x07C0(0x03C0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorLaunchExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorLaunchExtraAction");
static_assert(sizeof(FEndBehaviorLaunchExtraAction) == 0x000B80, "Wrong size on FEndBehaviorLaunchExtraAction");

// ScriptStruct EndGame.EndBehaviorLiftingRopeExtraAction
// 0x00F0 (0x08B0 - 0x07C0)
struct FEndBehaviorLiftingRopeExtraAction final : public FEndBehaviorExtraAction
{
public:
	uint8                                         Pad_7C0[0xF0];                                     // 0x07C0(0x00F0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorLiftingRopeExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorLiftingRopeExtraAction");
static_assert(sizeof(FEndBehaviorLiftingRopeExtraAction) == 0x0008B0, "Wrong size on FEndBehaviorLiftingRopeExtraAction");

// ScriptStruct EndGame.EndBehaviorLocomotion
// 0x00F0 (0x0738 - 0x0648)
struct FEndBehaviorLocomotion final : public FEndBehaviorSequencePlayAction
{
public:
	uint8                                         Pad_648[0xF0];                                     // 0x0648(0x00F0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorLocomotion) == 0x000008, "Wrong alignment on FEndBehaviorLocomotion");
static_assert(sizeof(FEndBehaviorLocomotion) == 0x000738, "Wrong size on FEndBehaviorLocomotion");

// ScriptStruct EndGame.EndDataTableActorGroup
// 0x0010 (0x0018 - 0x0008)
struct FEndDataTableActorGroup final : public FEndDataTableRowBase
{
public:
	TArray<class FName>                           ActorList_Array;                                   // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableActorGroup) == 0x000008, "Wrong alignment on FEndDataTableActorGroup");
static_assert(sizeof(FEndDataTableActorGroup) == 0x000018, "Wrong size on FEndDataTableActorGroup");
static_assert(offsetof(FEndDataTableActorGroup, ActorList_Array) == 0x000008, "Member 'FEndDataTableActorGroup::ActorList_Array' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableEnemyAP
// 0x0010 (0x0018 - 0x0008)
struct FEndDataTableEnemyAP final : public FEndDataTableRowBase
{
public:
	TArray<int32>                                 Value_Array;                                       // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableEnemyAP) == 0x000008, "Wrong alignment on FEndDataTableEnemyAP");
static_assert(sizeof(FEndDataTableEnemyAP) == 0x000018, "Wrong size on FEndDataTableEnemyAP");
static_assert(offsetof(FEndDataTableEnemyAP, Value_Array) == 0x000008, "Member 'FEndDataTableEnemyAP::Value_Array' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableTargetPointList
// 0x0010 (0x0018 - 0x0008)
struct FEndDataTableTargetPointList final : public FEndDataTableRowBase
{
public:
	TArray<class FName>                           TargetPointList_Array;                             // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableTargetPointList) == 0x000008, "Wrong alignment on FEndDataTableTargetPointList");
static_assert(sizeof(FEndDataTableTargetPointList) == 0x000018, "Wrong size on FEndDataTableTargetPointList");
static_assert(offsetof(FEndDataTableTargetPointList, TargetPointList_Array) == 0x000008, "Member 'FEndDataTableTargetPointList::TargetPointList_Array' has a wrong offset!");

// ScriptStruct EndGame.EndBehaviorMako5MiniGameLeverActionBase
// 0x0000 (0x07C0 - 0x07C0)
struct FEndBehaviorMako5MiniGameLeverActionBase : public FEndBehaviorExtraAction
{
};
static_assert(alignof(FEndBehaviorMako5MiniGameLeverActionBase) == 0x000010, "Wrong alignment on FEndBehaviorMako5MiniGameLeverActionBase");
static_assert(sizeof(FEndBehaviorMako5MiniGameLeverActionBase) == 0x0007C0, "Wrong size on FEndBehaviorMako5MiniGameLeverActionBase");

// ScriptStruct EndGame.EndBehaviorMako5MiniGameOneHandLeverAction
// 0x0060 (0x0820 - 0x07C0)
struct FEndBehaviorMako5MiniGameOneHandLeverAction final : public FEndBehaviorMako5MiniGameLeverActionBase
{
public:
	uint8                                         Pad_7C0[0x60];                                     // 0x07C0(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorMako5MiniGameOneHandLeverAction) == 0x000010, "Wrong alignment on FEndBehaviorMako5MiniGameOneHandLeverAction");
static_assert(sizeof(FEndBehaviorMako5MiniGameOneHandLeverAction) == 0x000820, "Wrong size on FEndBehaviorMako5MiniGameOneHandLeverAction");

// ScriptStruct EndGame.EndDataTableFootBGMSet
// 0x0028 (0x0030 - 0x0008)
struct FEndDataTableFootBGMSet final : public FEndDataTableRowBase
{
public:
	int32                                         UniqueIndex;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Priority;                                          // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         bgmList_Array;                                     // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         sccList_Array;                                     // 0x0020(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableFootBGMSet) == 0x000008, "Wrong alignment on FEndDataTableFootBGMSet");
static_assert(sizeof(FEndDataTableFootBGMSet) == 0x000030, "Wrong size on FEndDataTableFootBGMSet");
static_assert(offsetof(FEndDataTableFootBGMSet, UniqueIndex) == 0x000008, "Member 'FEndDataTableFootBGMSet::UniqueIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTableFootBGMSet, Priority) == 0x00000C, "Member 'FEndDataTableFootBGMSet::Priority' has a wrong offset!");
static_assert(offsetof(FEndDataTableFootBGMSet, bgmList_Array) == 0x000010, "Member 'FEndDataTableFootBGMSet::bgmList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableFootBGMSet, sccList_Array) == 0x000020, "Member 'FEndDataTableFootBGMSet::sccList_Array' has a wrong offset!");

// ScriptStruct EndGame.EndBehaviorMako5MiniGameTwoHandLeverAction
// 0x0060 (0x0820 - 0x07C0)
struct FEndBehaviorMako5MiniGameTwoHandLeverAction final : public FEndBehaviorMako5MiniGameLeverActionBase
{
public:
	uint8                                         Pad_7C0[0x60];                                     // 0x07C0(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorMako5MiniGameTwoHandLeverAction) == 0x000010, "Wrong alignment on FEndBehaviorMako5MiniGameTwoHandLeverAction");
static_assert(sizeof(FEndBehaviorMako5MiniGameTwoHandLeverAction) == 0x000820, "Wrong size on FEndBehaviorMako5MiniGameTwoHandLeverAction");

// ScriptStruct EndGame.EndFeelerWallExSetting
// 0x0040 (0x0040 - 0x0000)
struct FEndFeelerWallExSetting final
{
public:
	TArray<class UStaticMesh*>                    StaticMeshes;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         InstanceCount;                                     // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              RandomRotationRange;                               // 0x0014(0x0008)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              RandomScaleRange;                                  // 0x001C(0x0008)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BeginAnimationFrame;                               // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EndAnimationFrame;                                 // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AnimationDuration;                                 // 0x002C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AnimationFrameRate;                                // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AnimationPlayRate;                                 // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeDuration;                                      // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RandomHeightRange;                                 // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndFeelerWallExSetting) == 0x000008, "Wrong alignment on FEndFeelerWallExSetting");
static_assert(sizeof(FEndFeelerWallExSetting) == 0x000040, "Wrong size on FEndFeelerWallExSetting");
static_assert(offsetof(FEndFeelerWallExSetting, StaticMeshes) == 0x000000, "Member 'FEndFeelerWallExSetting::StaticMeshes' has a wrong offset!");
static_assert(offsetof(FEndFeelerWallExSetting, InstanceCount) == 0x000010, "Member 'FEndFeelerWallExSetting::InstanceCount' has a wrong offset!");
static_assert(offsetof(FEndFeelerWallExSetting, RandomRotationRange) == 0x000014, "Member 'FEndFeelerWallExSetting::RandomRotationRange' has a wrong offset!");
static_assert(offsetof(FEndFeelerWallExSetting, RandomScaleRange) == 0x00001C, "Member 'FEndFeelerWallExSetting::RandomScaleRange' has a wrong offset!");
static_assert(offsetof(FEndFeelerWallExSetting, BeginAnimationFrame) == 0x000024, "Member 'FEndFeelerWallExSetting::BeginAnimationFrame' has a wrong offset!");
static_assert(offsetof(FEndFeelerWallExSetting, EndAnimationFrame) == 0x000028, "Member 'FEndFeelerWallExSetting::EndAnimationFrame' has a wrong offset!");
static_assert(offsetof(FEndFeelerWallExSetting, AnimationDuration) == 0x00002C, "Member 'FEndFeelerWallExSetting::AnimationDuration' has a wrong offset!");
static_assert(offsetof(FEndFeelerWallExSetting, AnimationFrameRate) == 0x000030, "Member 'FEndFeelerWallExSetting::AnimationFrameRate' has a wrong offset!");
static_assert(offsetof(FEndFeelerWallExSetting, AnimationPlayRate) == 0x000034, "Member 'FEndFeelerWallExSetting::AnimationPlayRate' has a wrong offset!");
static_assert(offsetof(FEndFeelerWallExSetting, FadeDuration) == 0x000038, "Member 'FEndFeelerWallExSetting::FadeDuration' has a wrong offset!");
static_assert(offsetof(FEndFeelerWallExSetting, RandomHeightRange) == 0x00003C, "Member 'FEndFeelerWallExSetting::RandomHeightRange' has a wrong offset!");

// ScriptStruct EndGame.EndBehaviorMonkeyBarsExtraAction
// 0x01F0 (0x09B0 - 0x07C0)
struct FEndBehaviorMonkeyBarsExtraAction final : public FEndBehaviorExtraAction
{
public:
	uint8                                         Pad_7C0[0x1F0];                                    // 0x07C0(0x01F0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorMonkeyBarsExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorMonkeyBarsExtraAction");
static_assert(sizeof(FEndBehaviorMonkeyBarsExtraAction) == 0x0009B0, "Wrong size on FEndBehaviorMonkeyBarsExtraAction");

// ScriptStruct EndGame.MonkeyBarPointGathering
// 0x0010 (0x0010 - 0x0000)
struct FMonkeyBarPointGathering final
{
public:
	TArray<struct FMonkeyBarLinkPoint>            LinkPointList;                                     // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMonkeyBarPointGathering) == 0x000008, "Wrong alignment on FMonkeyBarPointGathering");
static_assert(sizeof(FMonkeyBarPointGathering) == 0x000010, "Wrong size on FMonkeyBarPointGathering");
static_assert(offsetof(FMonkeyBarPointGathering, LinkPointList) == 0x000000, "Member 'FMonkeyBarPointGathering::LinkPointList' has a wrong offset!");

// ScriptStruct EndGame.MonkeyBarPoint
// 0x0060 (0x0060 - 0x0000)
struct FMonkeyBarPoint final
{
public:
	uint16                                        Index;                                             // 0x0000(0x0002)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Location;                                          // 0x0004(0x000C)(Edit, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<EMonkeyBarsActorDirState, struct FMonkeyBarPointGathering> NextPoint;                                         // 0x0010(0x0050)(Edit, ZeroConstructor, DisableEditOnTemplate, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMonkeyBarPoint) == 0x000008, "Wrong alignment on FMonkeyBarPoint");
static_assert(sizeof(FMonkeyBarPoint) == 0x000060, "Wrong size on FMonkeyBarPoint");
static_assert(offsetof(FMonkeyBarPoint, Index) == 0x000000, "Member 'FMonkeyBarPoint::Index' has a wrong offset!");
static_assert(offsetof(FMonkeyBarPoint, Location) == 0x000004, "Member 'FMonkeyBarPoint::Location' has a wrong offset!");
static_assert(offsetof(FMonkeyBarPoint, NextPoint) == 0x000010, "Member 'FMonkeyBarPoint::NextPoint' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableBattleSummonAbilityChoice
// 0x0038 (0x0040 - 0x0008)
struct FEndDataTableBattleSummonAbilityChoice final : public FEndDataTableRowBase
{
public:
	uint8                                         OwnerSummon;                                       // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   AbilityID;                                         // 0x000C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Priority;                                          // 0x0014(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinDistance;                                       // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDistance;                                       // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinHeight;                                         // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxHeight;                                         // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         InfluenceCenter;                                   // 0x0028(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InfluenceRadius;                                   // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         InfluenceTargets;                                  // 0x0030(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SelfToGroundDist;                                  // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetToGroundDist;                                // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Probability;                                       // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableBattleSummonAbilityChoice) == 0x000008, "Wrong alignment on FEndDataTableBattleSummonAbilityChoice");
static_assert(sizeof(FEndDataTableBattleSummonAbilityChoice) == 0x000040, "Wrong size on FEndDataTableBattleSummonAbilityChoice");
static_assert(offsetof(FEndDataTableBattleSummonAbilityChoice, OwnerSummon) == 0x000008, "Member 'FEndDataTableBattleSummonAbilityChoice::OwnerSummon' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonAbilityChoice, AbilityID) == 0x00000C, "Member 'FEndDataTableBattleSummonAbilityChoice::AbilityID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonAbilityChoice, Priority) == 0x000014, "Member 'FEndDataTableBattleSummonAbilityChoice::Priority' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonAbilityChoice, MinDistance) == 0x000018, "Member 'FEndDataTableBattleSummonAbilityChoice::MinDistance' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonAbilityChoice, MaxDistance) == 0x00001C, "Member 'FEndDataTableBattleSummonAbilityChoice::MaxDistance' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonAbilityChoice, MinHeight) == 0x000020, "Member 'FEndDataTableBattleSummonAbilityChoice::MinHeight' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonAbilityChoice, MaxHeight) == 0x000024, "Member 'FEndDataTableBattleSummonAbilityChoice::MaxHeight' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonAbilityChoice, InfluenceCenter) == 0x000028, "Member 'FEndDataTableBattleSummonAbilityChoice::InfluenceCenter' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonAbilityChoice, InfluenceRadius) == 0x00002C, "Member 'FEndDataTableBattleSummonAbilityChoice::InfluenceRadius' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonAbilityChoice, InfluenceTargets) == 0x000030, "Member 'FEndDataTableBattleSummonAbilityChoice::InfluenceTargets' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonAbilityChoice, SelfToGroundDist) == 0x000034, "Member 'FEndDataTableBattleSummonAbilityChoice::SelfToGroundDist' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonAbilityChoice, TargetToGroundDist) == 0x000038, "Member 'FEndDataTableBattleSummonAbilityChoice::TargetToGroundDist' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonAbilityChoice, Probability) == 0x00003C, "Member 'FEndDataTableBattleSummonAbilityChoice::Probability' has a wrong offset!");

// ScriptStruct EndGame.EndBehaviorOperateControlPanelExtraAction
// 0x0030 (0x07F0 - 0x07C0)
struct FEndBehaviorOperateControlPanelExtraAction final : public FEndBehaviorExtraAction
{
public:
	uint8                                         Pad_7C0[0x30];                                     // 0x07C0(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorOperateControlPanelExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorOperateControlPanelExtraAction");
static_assert(sizeof(FEndBehaviorOperateControlPanelExtraAction) == 0x0007F0, "Wrong size on FEndBehaviorOperateControlPanelExtraAction");

// ScriptStruct EndGame.EndDataTableBikeTalkCondition
// 0x0020 (0x0028 - 0x0008)
struct FEndDataTableBikeTalkCondition final : public FEndDataTableRowBase
{
public:
	TArray<class FName>                           TriggerSetID_Array;                                // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 Priority_Array;                                    // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableBikeTalkCondition) == 0x000008, "Wrong alignment on FEndDataTableBikeTalkCondition");
static_assert(sizeof(FEndDataTableBikeTalkCondition) == 0x000028, "Wrong size on FEndDataTableBikeTalkCondition");
static_assert(offsetof(FEndDataTableBikeTalkCondition, TriggerSetID_Array) == 0x000008, "Member 'FEndDataTableBikeTalkCondition::TriggerSetID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeTalkCondition, Priority_Array) == 0x000018, "Member 'FEndDataTableBikeTalkCondition::Priority_Array' has a wrong offset!");

// ScriptStruct EndGame.EndBehaviorPickupExtraAction
// 0x0030 (0x07F0 - 0x07C0)
struct FEndBehaviorPickupExtraAction final : public FEndBehaviorExtraAction
{
public:
	uint8                                         Pad_7C0[0x30];                                     // 0x07C0(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorPickupExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorPickupExtraAction");
static_assert(sizeof(FEndBehaviorPickupExtraAction) == 0x0007F0, "Wrong size on FEndBehaviorPickupExtraAction");

// ScriptStruct EndGame.EndDataTableBattleCharaPartsSpec
// 0x0138 (0x0140 - 0x0008)
struct FEndDataTableBattleCharaPartsSpec final : public FEndDataTableRowBase
{
public:
	class FString                                 TextLabel;                                         // 0x0008(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CategoryID;                                        // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           BoneName_Array;                                    // 0x0020(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   HitRangeBaseSocketName;                            // 0x0030(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HitRangeBaseAngle;                                 // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HitRangeAngleRange;                                // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HitRangeHeightRange;                               // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TargetIconSocketName;                              // 0x0044(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CameraLockSocketName;                              // 0x004C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         PriorityLockOn;                                    // 0x0054(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           BreakMeshID_Array;                                 // 0x0058(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   DamageSourceID;                                    // 0x0068(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         DisableBurstMotion;                                // 0x0070(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         DisableDamageCollision;                            // 0x0071(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         DisablePushCollision;                              // 0x0072(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         DisableDisplayBattleLog;                           // 0x0073(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         DisableAerialNormalAttack;                         // 0x0074(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         DummyFlag;                                         // 0x0075(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         DisplayWeak;                                       // 0x0076(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_77[0x1];                                       // 0x0077(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DisplayWeakBaseAngle;                              // 0x0078(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DisplayWeakRangeAngle;                             // 0x007C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         AlwaysEffectResourceCategory;                      // 0x0080(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x3];                                       // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   AlwaysEffectResourceName;                          // 0x0084(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AlwaysEffectCreatePartName;                        // 0x008C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         HPType;                                            // 0x0094(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_95[0x3];                                       // 0x0095(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         HP;                                                // 0x0098(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         PhysicsDefenseType;                                // 0x009C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9D[0x3];                                       // 0x009D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PhysicsDefense;                                    // 0x00A0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         MagicDefenseType;                                  // 0x00A4(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A5[0x3];                                       // 0x00A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MagicDefense;                                      // 0x00A8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         PropertyResistType0;                               // 0x00AC(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         PropertyResist0;                                   // 0x00AD(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         PropertyResistType1;                               // 0x00AE(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         PropertyResist1;                                   // 0x00AF(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 AttributeResistType_Array;                         // 0x00B0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<uint8>                                 AttributeResist_Array;                             // 0x00C0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<uint8>                                 BPDamageCorrectionPropertyType_Array;              // 0x00D0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<uint8>                                 BPDamageCorrectionProperty_Array;                  // 0x00E0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<uint8>                                 BPDamageCorrectionAttributeType_Array;             // 0x00F0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<uint8>                                 BPDamageCorrectionAttribute_Array;                 // 0x0100(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           ReplaceDamageSourceID_Array;                       // 0x0110(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           DisablePlayEffectSocketName_Array;                 // 0x0120(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   AIPCCommandApproachSocketName;                     // 0x0130(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AIPCCommandApproachAngle;                          // 0x0138(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13C[0x4];                                      // 0x013C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableBattleCharaPartsSpec) == 0x000008, "Wrong alignment on FEndDataTableBattleCharaPartsSpec");
static_assert(sizeof(FEndDataTableBattleCharaPartsSpec) == 0x000140, "Wrong size on FEndDataTableBattleCharaPartsSpec");
static_assert(offsetof(FEndDataTableBattleCharaPartsSpec, TextLabel) == 0x000008, "Member 'FEndDataTableBattleCharaPartsSpec::TextLabel' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaPartsSpec, CategoryID) == 0x000018, "Member 'FEndDataTableBattleCharaPartsSpec::CategoryID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaPartsSpec, BoneName_Array) == 0x000020, "Member 'FEndDataTableBattleCharaPartsSpec::BoneName_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaPartsSpec, HitRangeBaseSocketName) == 0x000030, "Member 'FEndDataTableBattleCharaPartsSpec::HitRangeBaseSocketName' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaPartsSpec, HitRangeBaseAngle) == 0x000038, "Member 'FEndDataTableBattleCharaPartsSpec::HitRangeBaseAngle' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaPartsSpec, HitRangeAngleRange) == 0x00003C, "Member 'FEndDataTableBattleCharaPartsSpec::HitRangeAngleRange' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaPartsSpec, HitRangeHeightRange) == 0x000040, "Member 'FEndDataTableBattleCharaPartsSpec::HitRangeHeightRange' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaPartsSpec, TargetIconSocketName) == 0x000044, "Member 'FEndDataTableBattleCharaPartsSpec::TargetIconSocketName' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaPartsSpec, CameraLockSocketName) == 0x00004C, "Member 'FEndDataTableBattleCharaPartsSpec::CameraLockSocketName' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaPartsSpec, PriorityLockOn) == 0x000054, "Member 'FEndDataTableBattleCharaPartsSpec::PriorityLockOn' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaPartsSpec, BreakMeshID_Array) == 0x000058, "Member 'FEndDataTableBattleCharaPartsSpec::BreakMeshID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaPartsSpec, DamageSourceID) == 0x000068, "Member 'FEndDataTableBattleCharaPartsSpec::DamageSourceID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaPartsSpec, DisableBurstMotion) == 0x000070, "Member 'FEndDataTableBattleCharaPartsSpec::DisableBurstMotion' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaPartsSpec, DisableDamageCollision) == 0x000071, "Member 'FEndDataTableBattleCharaPartsSpec::DisableDamageCollision' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaPartsSpec, DisablePushCollision) == 0x000072, "Member 'FEndDataTableBattleCharaPartsSpec::DisablePushCollision' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaPartsSpec, DisableDisplayBattleLog) == 0x000073, "Member 'FEndDataTableBattleCharaPartsSpec::DisableDisplayBattleLog' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaPartsSpec, DisableAerialNormalAttack) == 0x000074, "Member 'FEndDataTableBattleCharaPartsSpec::DisableAerialNormalAttack' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaPartsSpec, DummyFlag) == 0x000075, "Member 'FEndDataTableBattleCharaPartsSpec::DummyFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaPartsSpec, DisplayWeak) == 0x000076, "Member 'FEndDataTableBattleCharaPartsSpec::DisplayWeak' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaPartsSpec, DisplayWeakBaseAngle) == 0x000078, "Member 'FEndDataTableBattleCharaPartsSpec::DisplayWeakBaseAngle' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaPartsSpec, DisplayWeakRangeAngle) == 0x00007C, "Member 'FEndDataTableBattleCharaPartsSpec::DisplayWeakRangeAngle' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaPartsSpec, AlwaysEffectResourceCategory) == 0x000080, "Member 'FEndDataTableBattleCharaPartsSpec::AlwaysEffectResourceCategory' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaPartsSpec, AlwaysEffectResourceName) == 0x000084, "Member 'FEndDataTableBattleCharaPartsSpec::AlwaysEffectResourceName' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaPartsSpec, AlwaysEffectCreatePartName) == 0x00008C, "Member 'FEndDataTableBattleCharaPartsSpec::AlwaysEffectCreatePartName' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaPartsSpec, HPType) == 0x000094, "Member 'FEndDataTableBattleCharaPartsSpec::HPType' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaPartsSpec, HP) == 0x000098, "Member 'FEndDataTableBattleCharaPartsSpec::HP' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaPartsSpec, PhysicsDefenseType) == 0x00009C, "Member 'FEndDataTableBattleCharaPartsSpec::PhysicsDefenseType' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaPartsSpec, PhysicsDefense) == 0x0000A0, "Member 'FEndDataTableBattleCharaPartsSpec::PhysicsDefense' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaPartsSpec, MagicDefenseType) == 0x0000A4, "Member 'FEndDataTableBattleCharaPartsSpec::MagicDefenseType' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaPartsSpec, MagicDefense) == 0x0000A8, "Member 'FEndDataTableBattleCharaPartsSpec::MagicDefense' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaPartsSpec, PropertyResistType0) == 0x0000AC, "Member 'FEndDataTableBattleCharaPartsSpec::PropertyResistType0' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaPartsSpec, PropertyResist0) == 0x0000AD, "Member 'FEndDataTableBattleCharaPartsSpec::PropertyResist0' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaPartsSpec, PropertyResistType1) == 0x0000AE, "Member 'FEndDataTableBattleCharaPartsSpec::PropertyResistType1' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaPartsSpec, PropertyResist1) == 0x0000AF, "Member 'FEndDataTableBattleCharaPartsSpec::PropertyResist1' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaPartsSpec, AttributeResistType_Array) == 0x0000B0, "Member 'FEndDataTableBattleCharaPartsSpec::AttributeResistType_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaPartsSpec, AttributeResist_Array) == 0x0000C0, "Member 'FEndDataTableBattleCharaPartsSpec::AttributeResist_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaPartsSpec, BPDamageCorrectionPropertyType_Array) == 0x0000D0, "Member 'FEndDataTableBattleCharaPartsSpec::BPDamageCorrectionPropertyType_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaPartsSpec, BPDamageCorrectionProperty_Array) == 0x0000E0, "Member 'FEndDataTableBattleCharaPartsSpec::BPDamageCorrectionProperty_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaPartsSpec, BPDamageCorrectionAttributeType_Array) == 0x0000F0, "Member 'FEndDataTableBattleCharaPartsSpec::BPDamageCorrectionAttributeType_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaPartsSpec, BPDamageCorrectionAttribute_Array) == 0x000100, "Member 'FEndDataTableBattleCharaPartsSpec::BPDamageCorrectionAttribute_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaPartsSpec, ReplaceDamageSourceID_Array) == 0x000110, "Member 'FEndDataTableBattleCharaPartsSpec::ReplaceDamageSourceID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaPartsSpec, DisablePlayEffectSocketName_Array) == 0x000120, "Member 'FEndDataTableBattleCharaPartsSpec::DisablePlayEffectSocketName_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaPartsSpec, AIPCCommandApproachSocketName) == 0x000130, "Member 'FEndDataTableBattleCharaPartsSpec::AIPCCommandApproachSocketName' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaPartsSpec, AIPCCommandApproachAngle) == 0x000138, "Member 'FEndDataTableBattleCharaPartsSpec::AIPCCommandApproachAngle' has a wrong offset!");

// ScriptStruct EndGame.EndBehaviorPoleSliderExtraAction
// 0x00F0 (0x08B0 - 0x07C0)
struct FEndBehaviorPoleSliderExtraAction final : public FEndBehaviorExtraAction
{
public:
	uint8                                         Pad_7C0[0xF0];                                     // 0x07C0(0x00F0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorPoleSliderExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorPoleSliderExtraAction");
static_assert(sizeof(FEndBehaviorPoleSliderExtraAction) == 0x0008B0, "Wrong size on FEndBehaviorPoleSliderExtraAction");

// ScriptStruct EndGame.EndBehaviorPushContainerExtraAction
// 0x01B0 (0x0970 - 0x07C0)
struct FEndBehaviorPushContainerExtraAction final : public FEndBehaviorExtraAction
{
public:
	uint8                                         Pad_7C0[0x1B0];                                    // 0x07C0(0x01B0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorPushContainerExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorPushContainerExtraAction");
static_assert(sizeof(FEndBehaviorPushContainerExtraAction) == 0x000970, "Wrong size on FEndBehaviorPushContainerExtraAction");

// ScriptStruct EndGame.EndBehaviorQuickTurnAttackExtraAction
// 0x0030 (0x09F0 - 0x09C0)
struct FEndBehaviorQuickTurnAttackExtraAction final : public FEndBehaviorBattleAbilityExtraAction
{
public:
	uint8                                         Pad_9C0[0x30];                                     // 0x09C0(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorQuickTurnAttackExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorQuickTurnAttackExtraAction");
static_assert(sizeof(FEndBehaviorQuickTurnAttackExtraAction) == 0x0009F0, "Wrong size on FEndBehaviorQuickTurnAttackExtraAction");

// ScriptStruct EndGame.EndBikeAIHelicopterAbilitySetPhase
// 0x0024 (0x0024 - 0x0000)
struct FEndBikeAIHelicopterAbilitySetPhase final
{
public:
	float                                         HitPoint_ToPhase;                                  // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEndBikeAIHelicopterAbilitySet         AbilitySet;                                        // 0x0004(0x0020)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndBikeAIHelicopterAbilitySetPhase) == 0x000004, "Wrong alignment on FEndBikeAIHelicopterAbilitySetPhase");
static_assert(sizeof(FEndBikeAIHelicopterAbilitySetPhase) == 0x000024, "Wrong size on FEndBikeAIHelicopterAbilitySetPhase");
static_assert(offsetof(FEndBikeAIHelicopterAbilitySetPhase, HitPoint_ToPhase) == 0x000000, "Member 'FEndBikeAIHelicopterAbilitySetPhase::HitPoint_ToPhase' has a wrong offset!");
static_assert(offsetof(FEndBikeAIHelicopterAbilitySetPhase, AbilitySet) == 0x000004, "Member 'FEndBikeAIHelicopterAbilitySetPhase::AbilitySet' has a wrong offset!");

// ScriptStruct EndGame.EndBehaviorResidentBlendAction
// 0x0030 (0x0678 - 0x0648)
struct FEndBehaviorResidentBlendAction final : public FEndBehaviorSequencePlayAction
{
public:
	uint8                                         Pad_648[0x30];                                     // 0x0648(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorResidentBlendAction) == 0x000008, "Wrong alignment on FEndBehaviorResidentBlendAction");
static_assert(sizeof(FEndBehaviorResidentBlendAction) == 0x000678, "Wrong size on FEndBehaviorResidentBlendAction");

// ScriptStruct EndGame.EndAnimResidentBlend
// 0x0018 (0x0018 - 0x0000)
struct FEndAnimResidentBlend final
{
public:
	class FName                                   SequenceName;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BlendBoneName;                                     // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayRate;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoActive;                                       // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndAnimResidentBlend) == 0x000004, "Wrong alignment on FEndAnimResidentBlend");
static_assert(sizeof(FEndAnimResidentBlend) == 0x000018, "Wrong size on FEndAnimResidentBlend");
static_assert(offsetof(FEndAnimResidentBlend, SequenceName) == 0x000000, "Member 'FEndAnimResidentBlend::SequenceName' has a wrong offset!");
static_assert(offsetof(FEndAnimResidentBlend, BlendBoneName) == 0x000008, "Member 'FEndAnimResidentBlend::BlendBoneName' has a wrong offset!");
static_assert(offsetof(FEndAnimResidentBlend, PlayRate) == 0x000010, "Member 'FEndAnimResidentBlend::PlayRate' has a wrong offset!");
static_assert(offsetof(FEndAnimResidentBlend, bAutoActive) == 0x000014, "Member 'FEndAnimResidentBlend::bAutoActive' has a wrong offset!");

// ScriptStruct EndGame.EndBehaviorSequentialExtraAction
// 0x0170 (0x0930 - 0x07C0)
struct FEndBehaviorSequentialExtraAction : public FEndBehaviorExtraAction
{
public:
	uint8                                         Pad_7C0[0x170];                                    // 0x07C0(0x0170)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorSequentialExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorSequentialExtraAction");
static_assert(sizeof(FEndBehaviorSequentialExtraAction) == 0x000930, "Wrong size on FEndBehaviorSequentialExtraAction");

// ScriptStruct EndGame.EndBehaviorSimpleJumpExtraAction
// 0x02D0 (0x0A90 - 0x07C0)
struct FEndBehaviorSimpleJumpExtraAction final : public FEndBehaviorExtraAction
{
public:
	uint8                                         Pad_7C0[0x2D0];                                    // 0x07C0(0x02D0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorSimpleJumpExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorSimpleJumpExtraAction");
static_assert(sizeof(FEndBehaviorSimpleJumpExtraAction) == 0x000A90, "Wrong size on FEndBehaviorSimpleJumpExtraAction");

// ScriptStruct EndGame.EndBehaviorSlaveAction
// 0x0008 (0x0650 - 0x0648)
struct FEndBehaviorSlaveAction final : public FEndBehaviorSequencePlayAction
{
public:
	uint8                                         Pad_648[0x8];                                      // 0x0648(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorSlaveAction) == 0x000008, "Wrong alignment on FEndBehaviorSlaveAction");
static_assert(sizeof(FEndBehaviorSlaveAction) == 0x000650, "Wrong size on FEndBehaviorSlaveAction");

// ScriptStruct EndGame.EndDataTableBikeCharaSpec
// 0x00D8 (0x00E0 - 0x0008)
struct FEndDataTableBikeCharaSpec final : public FEndDataTableRowBase
{
public:
	class FName                                   CharaSpecID;                                       // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         CreateVehicleFieldAI;                              // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         DisableVehicleWind;                                // 0x0011(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OverrideRollAngleMultiplier;                       // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           RiderCharaSpecID_Array;                            // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           SocketName_Array;                                  // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<uint8>                                 CreateRiderFieldAI_Array;                          // 0x0038(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<uint8>                                 DisableRiderWind_Array;                            // 0x0048(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         AIControllerIndex;                                 // 0x0058(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         HideWeapon;                                        // 0x0059(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5A[0x2];                                       // 0x005A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinSpeed;                                          // 0x005C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxSpeed;                                          // 0x0060(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           AbilityID_Array;                                   // 0x0068(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         AttackIntervalTime;                                // 0x0078(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HitPointEasy;                                      // 0x007C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HitPoint;                                          // 0x0080(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 PushedReaction_Array;                              // 0x0088(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         PushedReactionOnRagDoll;                           // 0x0098(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_99[0x3];                                       // 0x0099(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   DamageReactionID;                                  // 0x009C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AIAbilitySetID;                                    // 0x00A4(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TargetToAllyAIAbilitySetID;                        // 0x00AC(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AfterFireEffectID;                                 // 0x00B4(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MufflerSmokeEffectID;                              // 0x00BC(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MufflerEffectBoneName;                             // 0x00C4(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         InvincibleState;                                   // 0x00CC(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CD[0x3];                                       // 0x00CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AllyPositionAtLastOneEnemy;                        // 0x00D0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PersonalSpaceRadius;                               // 0x00D4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         AvoidPersonalSpace;                                // 0x00D8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D9[0x7];                                       // 0x00D9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableBikeCharaSpec) == 0x000008, "Wrong alignment on FEndDataTableBikeCharaSpec");
static_assert(sizeof(FEndDataTableBikeCharaSpec) == 0x0000E0, "Wrong size on FEndDataTableBikeCharaSpec");
static_assert(offsetof(FEndDataTableBikeCharaSpec, CharaSpecID) == 0x000008, "Member 'FEndDataTableBikeCharaSpec::CharaSpecID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeCharaSpec, CreateVehicleFieldAI) == 0x000010, "Member 'FEndDataTableBikeCharaSpec::CreateVehicleFieldAI' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeCharaSpec, DisableVehicleWind) == 0x000011, "Member 'FEndDataTableBikeCharaSpec::DisableVehicleWind' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeCharaSpec, OverrideRollAngleMultiplier) == 0x000014, "Member 'FEndDataTableBikeCharaSpec::OverrideRollAngleMultiplier' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeCharaSpec, RiderCharaSpecID_Array) == 0x000018, "Member 'FEndDataTableBikeCharaSpec::RiderCharaSpecID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeCharaSpec, SocketName_Array) == 0x000028, "Member 'FEndDataTableBikeCharaSpec::SocketName_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeCharaSpec, CreateRiderFieldAI_Array) == 0x000038, "Member 'FEndDataTableBikeCharaSpec::CreateRiderFieldAI_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeCharaSpec, DisableRiderWind_Array) == 0x000048, "Member 'FEndDataTableBikeCharaSpec::DisableRiderWind_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeCharaSpec, AIControllerIndex) == 0x000058, "Member 'FEndDataTableBikeCharaSpec::AIControllerIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeCharaSpec, HideWeapon) == 0x000059, "Member 'FEndDataTableBikeCharaSpec::HideWeapon' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeCharaSpec, MinSpeed) == 0x00005C, "Member 'FEndDataTableBikeCharaSpec::MinSpeed' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeCharaSpec, MaxSpeed) == 0x000060, "Member 'FEndDataTableBikeCharaSpec::MaxSpeed' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeCharaSpec, AbilityID_Array) == 0x000068, "Member 'FEndDataTableBikeCharaSpec::AbilityID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeCharaSpec, AttackIntervalTime) == 0x000078, "Member 'FEndDataTableBikeCharaSpec::AttackIntervalTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeCharaSpec, HitPointEasy) == 0x00007C, "Member 'FEndDataTableBikeCharaSpec::HitPointEasy' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeCharaSpec, HitPoint) == 0x000080, "Member 'FEndDataTableBikeCharaSpec::HitPoint' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeCharaSpec, PushedReaction_Array) == 0x000088, "Member 'FEndDataTableBikeCharaSpec::PushedReaction_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeCharaSpec, PushedReactionOnRagDoll) == 0x000098, "Member 'FEndDataTableBikeCharaSpec::PushedReactionOnRagDoll' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeCharaSpec, DamageReactionID) == 0x00009C, "Member 'FEndDataTableBikeCharaSpec::DamageReactionID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeCharaSpec, AIAbilitySetID) == 0x0000A4, "Member 'FEndDataTableBikeCharaSpec::AIAbilitySetID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeCharaSpec, TargetToAllyAIAbilitySetID) == 0x0000AC, "Member 'FEndDataTableBikeCharaSpec::TargetToAllyAIAbilitySetID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeCharaSpec, AfterFireEffectID) == 0x0000B4, "Member 'FEndDataTableBikeCharaSpec::AfterFireEffectID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeCharaSpec, MufflerSmokeEffectID) == 0x0000BC, "Member 'FEndDataTableBikeCharaSpec::MufflerSmokeEffectID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeCharaSpec, MufflerEffectBoneName) == 0x0000C4, "Member 'FEndDataTableBikeCharaSpec::MufflerEffectBoneName' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeCharaSpec, InvincibleState) == 0x0000CC, "Member 'FEndDataTableBikeCharaSpec::InvincibleState' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeCharaSpec, AllyPositionAtLastOneEnemy) == 0x0000D0, "Member 'FEndDataTableBikeCharaSpec::AllyPositionAtLastOneEnemy' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeCharaSpec, PersonalSpaceRadius) == 0x0000D4, "Member 'FEndDataTableBikeCharaSpec::PersonalSpaceRadius' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeCharaSpec, AvoidPersonalSpace) == 0x0000D8, "Member 'FEndDataTableBikeCharaSpec::AvoidPersonalSpace' has a wrong offset!");

// ScriptStruct EndGame.EndBehaviorSlu5bArmMiniGamePawnExtraAction
// 0x00C0 (0x0880 - 0x07C0)
struct FEndBehaviorSlu5bArmMiniGamePawnExtraAction final : public FEndBehaviorExtraAction
{
public:
	uint8                                         Pad_7C0[0xC0];                                     // 0x07C0(0x00C0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorSlu5bArmMiniGamePawnExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorSlu5bArmMiniGamePawnExtraAction");
static_assert(sizeof(FEndBehaviorSlu5bArmMiniGamePawnExtraAction) == 0x000880, "Wrong size on FEndBehaviorSlu5bArmMiniGamePawnExtraAction");

// ScriptStruct EndGame.EndDataTableBattleAbilityReactionInfluence
// 0x0008 (0x0010 - 0x0008)
struct FEndDataTableBattleAbilityReactionInfluence final : public FEndDataTableRowBase
{
public:
	uint8                                         ReactionInfluenceType;                             // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         AttackDirection;                                   // 0x0009(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         OnTakeAbilityInvoke;                               // 0x000A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableBattleAbilityReactionInfluence) == 0x000008, "Wrong alignment on FEndDataTableBattleAbilityReactionInfluence");
static_assert(sizeof(FEndDataTableBattleAbilityReactionInfluence) == 0x000010, "Wrong size on FEndDataTableBattleAbilityReactionInfluence");
static_assert(offsetof(FEndDataTableBattleAbilityReactionInfluence, ReactionInfluenceType) == 0x000008, "Member 'FEndDataTableBattleAbilityReactionInfluence::ReactionInfluenceType' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAbilityReactionInfluence, AttackDirection) == 0x000009, "Member 'FEndDataTableBattleAbilityReactionInfluence::AttackDirection' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAbilityReactionInfluence, OnTakeAbilityInvoke) == 0x00000A, "Member 'FEndDataTableBattleAbilityReactionInfluence::OnTakeAbilityInvoke' has a wrong offset!");

// ScriptStruct EndGame.EndBehaviorSlu7pHoldHandsAction
// 0x0050 (0x0810 - 0x07C0)
struct FEndBehaviorSlu7pHoldHandsAction final : public FEndBehaviorExtraAction
{
public:
	uint8                                         Pad_7C0[0x50];                                     // 0x07C0(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorSlu7pHoldHandsAction) == 0x000010, "Wrong alignment on FEndBehaviorSlu7pHoldHandsAction");
static_assert(sizeof(FEndBehaviorSlu7pHoldHandsAction) == 0x000810, "Wrong size on FEndBehaviorSlu7pHoldHandsAction");

// ScriptStruct EndGame.EndNaviMapLayerPrototypeDataV2
// 0x0048 (0x0048 - 0x0000)
struct FEndNaviMapLayerPrototypeDataV2 final
{
public:
	class FString                                 LocationName;                                      // 0x0000(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PseudoLocationID;                                  // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LongName;                                          // 0x0018(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ShortName;                                         // 0x0028(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         AreaNames;                                         // 0x0038(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndNaviMapLayerPrototypeDataV2) == 0x000008, "Wrong alignment on FEndNaviMapLayerPrototypeDataV2");
static_assert(sizeof(FEndNaviMapLayerPrototypeDataV2) == 0x000048, "Wrong size on FEndNaviMapLayerPrototypeDataV2");
static_assert(offsetof(FEndNaviMapLayerPrototypeDataV2, LocationName) == 0x000000, "Member 'FEndNaviMapLayerPrototypeDataV2::LocationName' has a wrong offset!");
static_assert(offsetof(FEndNaviMapLayerPrototypeDataV2, PseudoLocationID) == 0x000010, "Member 'FEndNaviMapLayerPrototypeDataV2::PseudoLocationID' has a wrong offset!");
static_assert(offsetof(FEndNaviMapLayerPrototypeDataV2, LongName) == 0x000018, "Member 'FEndNaviMapLayerPrototypeDataV2::LongName' has a wrong offset!");
static_assert(offsetof(FEndNaviMapLayerPrototypeDataV2, ShortName) == 0x000028, "Member 'FEndNaviMapLayerPrototypeDataV2::ShortName' has a wrong offset!");
static_assert(offsetof(FEndNaviMapLayerPrototypeDataV2, AreaNames) == 0x000038, "Member 'FEndNaviMapLayerPrototypeDataV2::AreaNames' has a wrong offset!");

// ScriptStruct EndGame.EndBehaviorSlum7DartsExtraAction
// 0x0050 (0x0810 - 0x07C0)
struct FEndBehaviorSlum7DartsExtraAction final : public FEndBehaviorExtraAction
{
public:
	uint8                                         Pad_7C0[0x50];                                     // 0x07C0(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorSlum7DartsExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorSlum7DartsExtraAction");
static_assert(sizeof(FEndBehaviorSlum7DartsExtraAction) == 0x000810, "Wrong size on FEndBehaviorSlum7DartsExtraAction");

// ScriptStruct EndGame.EndBehaviorSplineMoveExtraAction
// 0x00B0 (0x0870 - 0x07C0)
struct FEndBehaviorSplineMoveExtraAction final : public FEndBehaviorExtraAction
{
public:
	uint8                                         Pad_7C0[0xB0];                                     // 0x07C0(0x00B0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorSplineMoveExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorSplineMoveExtraAction");
static_assert(sizeof(FEndBehaviorSplineMoveExtraAction) == 0x000870, "Wrong size on FEndBehaviorSplineMoveExtraAction");

// ScriptStruct EndGame.EndDataTableUniqueActionActorAttack
// 0x0080 (0x0088 - 0x0008)
struct FEndDataTableUniqueActionActorAttack final : public FEndDataTableRowBase
{
public:
	int32                                         Time;                                              // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Next;                                              // 0x000C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StopTraceFailed;                                   // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FailedNext;                                        // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StartFlagObjectName;                               // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StartFlagTriggerName;                              // 0x0028(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ShootNotifyTriggerName;                            // 0x0030(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TempTargetActor;                                   // 0x0038(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LockXAxis;                                         // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LockYAxis;                                         // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SearchRange;                                       // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SearchAngle;                                       // 0x004C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SearchRadian;                                      // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartTime;                                         // 0x0054(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayTime;                                          // 0x0058(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttachActorName;                                   // 0x005C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SocketName;                                        // 0x0064(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TargetActorName;                                   // 0x006C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PropertyName;                                      // 0x0078(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableUniqueActionActorAttack) == 0x000008, "Wrong alignment on FEndDataTableUniqueActionActorAttack");
static_assert(sizeof(FEndDataTableUniqueActionActorAttack) == 0x000088, "Wrong size on FEndDataTableUniqueActionActorAttack");
static_assert(offsetof(FEndDataTableUniqueActionActorAttack, Time) == 0x000008, "Member 'FEndDataTableUniqueActionActorAttack::Time' has a wrong offset!");
static_assert(offsetof(FEndDataTableUniqueActionActorAttack, Next) == 0x00000C, "Member 'FEndDataTableUniqueActionActorAttack::Next' has a wrong offset!");
static_assert(offsetof(FEndDataTableUniqueActionActorAttack, StopTraceFailed) == 0x000014, "Member 'FEndDataTableUniqueActionActorAttack::StopTraceFailed' has a wrong offset!");
static_assert(offsetof(FEndDataTableUniqueActionActorAttack, FailedNext) == 0x000018, "Member 'FEndDataTableUniqueActionActorAttack::FailedNext' has a wrong offset!");
static_assert(offsetof(FEndDataTableUniqueActionActorAttack, StartFlagObjectName) == 0x000020, "Member 'FEndDataTableUniqueActionActorAttack::StartFlagObjectName' has a wrong offset!");
static_assert(offsetof(FEndDataTableUniqueActionActorAttack, StartFlagTriggerName) == 0x000028, "Member 'FEndDataTableUniqueActionActorAttack::StartFlagTriggerName' has a wrong offset!");
static_assert(offsetof(FEndDataTableUniqueActionActorAttack, ShootNotifyTriggerName) == 0x000030, "Member 'FEndDataTableUniqueActionActorAttack::ShootNotifyTriggerName' has a wrong offset!");
static_assert(offsetof(FEndDataTableUniqueActionActorAttack, TempTargetActor) == 0x000038, "Member 'FEndDataTableUniqueActionActorAttack::TempTargetActor' has a wrong offset!");
static_assert(offsetof(FEndDataTableUniqueActionActorAttack, LockXAxis) == 0x000040, "Member 'FEndDataTableUniqueActionActorAttack::LockXAxis' has a wrong offset!");
static_assert(offsetof(FEndDataTableUniqueActionActorAttack, LockYAxis) == 0x000044, "Member 'FEndDataTableUniqueActionActorAttack::LockYAxis' has a wrong offset!");
static_assert(offsetof(FEndDataTableUniqueActionActorAttack, SearchRange) == 0x000048, "Member 'FEndDataTableUniqueActionActorAttack::SearchRange' has a wrong offset!");
static_assert(offsetof(FEndDataTableUniqueActionActorAttack, SearchAngle) == 0x00004C, "Member 'FEndDataTableUniqueActionActorAttack::SearchAngle' has a wrong offset!");
static_assert(offsetof(FEndDataTableUniqueActionActorAttack, SearchRadian) == 0x000050, "Member 'FEndDataTableUniqueActionActorAttack::SearchRadian' has a wrong offset!");
static_assert(offsetof(FEndDataTableUniqueActionActorAttack, StartTime) == 0x000054, "Member 'FEndDataTableUniqueActionActorAttack::StartTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableUniqueActionActorAttack, PlayTime) == 0x000058, "Member 'FEndDataTableUniqueActionActorAttack::PlayTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableUniqueActionActorAttack, AttachActorName) == 0x00005C, "Member 'FEndDataTableUniqueActionActorAttack::AttachActorName' has a wrong offset!");
static_assert(offsetof(FEndDataTableUniqueActionActorAttack, SocketName) == 0x000064, "Member 'FEndDataTableUniqueActionActorAttack::SocketName' has a wrong offset!");
static_assert(offsetof(FEndDataTableUniqueActionActorAttack, TargetActorName) == 0x00006C, "Member 'FEndDataTableUniqueActionActorAttack::TargetActorName' has a wrong offset!");
static_assert(offsetof(FEndDataTableUniqueActionActorAttack, PropertyName) == 0x000078, "Member 'FEndDataTableUniqueActionActorAttack::PropertyName' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableEnemyBookBattleAbility
// 0x0020 (0x0028 - 0x0008)
struct FEndDataTableEnemyBookBattleAbility final : public FEndDataTableRowBase
{
public:
	class FString                                 Name;                                              // 0x0008(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReplaceDamageSourceID;                             // 0x0018(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableEnemyBookBattleAbility) == 0x000008, "Wrong alignment on FEndDataTableEnemyBookBattleAbility");
static_assert(sizeof(FEndDataTableEnemyBookBattleAbility) == 0x000028, "Wrong size on FEndDataTableEnemyBookBattleAbility");
static_assert(offsetof(FEndDataTableEnemyBookBattleAbility, Name) == 0x000008, "Member 'FEndDataTableEnemyBookBattleAbility::Name' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyBookBattleAbility, ReplaceDamageSourceID) == 0x000018, "Member 'FEndDataTableEnemyBookBattleAbility::ReplaceDamageSourceID' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableStoryResident
// 0x0190 (0x0198 - 0x0008)
struct FEndDataTableStoryResident final : public FEndDataTableRowBase
{
public:
	int32                                         UniqueID;                                          // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StoryIndex;                                        // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GroupIndex;                                        // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         StoryType;                                         // 0x0014(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ParentID;                                          // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BranchStoryID;                                     // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         CompleteStatus;                                    // 0x0028(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   StoryProgressFlagID;                               // 0x002C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StoryOpenFlagID;                                   // 0x0034(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   QuestOrderEnable;                                  // 0x003C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FractionCount;                                     // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TitleUnkownFlag;                                   // 0x0048(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ViewIndex;                                         // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ItemName;                                          // 0x0058(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0068(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ImageName;                                         // 0x0078(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         AdditionalGroupViewOption;                         // 0x0088(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           ViewLocationID_Array;                              // 0x0090(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<uint8>                                 IconOperationStatus_Array;                         // 0x00A0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 CircleRadius_Array;                                // 0x00B0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<uint8>                                 ViewTargetDistance_Array;                          // 0x00C0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 ViewTargetDistanceParam_Array;                     // 0x00D0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 IconVisibleStartDistance_Array;                    // 0x00E0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<uint8>                                 IconKind_Array;                                    // 0x00F0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<uint8>                                 IconTargetType_Array;                              // 0x0100(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           TargetObjectID_Array;                              // 0x0110(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           IconInvisibleFlag_Array;                           // 0x0120(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 IconLineLength_Array;                              // 0x0130(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           IconSocketName_Array;                              // 0x0140(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           QuestClearStep_Array;                              // 0x0150(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   InvNaviIcon_ViewFlag;                              // 0x0160(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InvNaviIcon_ViewLocationID;                        // 0x0168(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         InvNaviIcon_ViewFlagIconOperationStatus;           // 0x0170(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_171[0x3];                                      // 0x0171(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InvNaviIcon_IconVisibleStartDistance;              // 0x0174(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         InvNaviIcon_IconKind;                              // 0x0178(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         InvNaviIcon_IconTargetType;                        // 0x0179(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17A[0x2];                                      // 0x017A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   InvNaviIcon_TargetObjectID;                        // 0x017C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InvNaviIcon_IconLineLength;                        // 0x0184(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ChapterID;                                         // 0x0188(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         FractionView;                                      // 0x0190(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ScenarioType;                                      // 0x0191(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_192[0x6];                                      // 0x0192(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableStoryResident) == 0x000008, "Wrong alignment on FEndDataTableStoryResident");
static_assert(sizeof(FEndDataTableStoryResident) == 0x000198, "Wrong size on FEndDataTableStoryResident");
static_assert(offsetof(FEndDataTableStoryResident, UniqueID) == 0x000008, "Member 'FEndDataTableStoryResident::UniqueID' has a wrong offset!");
static_assert(offsetof(FEndDataTableStoryResident, StoryIndex) == 0x00000C, "Member 'FEndDataTableStoryResident::StoryIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTableStoryResident, GroupIndex) == 0x000010, "Member 'FEndDataTableStoryResident::GroupIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTableStoryResident, StoryType) == 0x000014, "Member 'FEndDataTableStoryResident::StoryType' has a wrong offset!");
static_assert(offsetof(FEndDataTableStoryResident, ParentID) == 0x000018, "Member 'FEndDataTableStoryResident::ParentID' has a wrong offset!");
static_assert(offsetof(FEndDataTableStoryResident, BranchStoryID) == 0x000020, "Member 'FEndDataTableStoryResident::BranchStoryID' has a wrong offset!");
static_assert(offsetof(FEndDataTableStoryResident, CompleteStatus) == 0x000028, "Member 'FEndDataTableStoryResident::CompleteStatus' has a wrong offset!");
static_assert(offsetof(FEndDataTableStoryResident, StoryProgressFlagID) == 0x00002C, "Member 'FEndDataTableStoryResident::StoryProgressFlagID' has a wrong offset!");
static_assert(offsetof(FEndDataTableStoryResident, StoryOpenFlagID) == 0x000034, "Member 'FEndDataTableStoryResident::StoryOpenFlagID' has a wrong offset!");
static_assert(offsetof(FEndDataTableStoryResident, QuestOrderEnable) == 0x00003C, "Member 'FEndDataTableStoryResident::QuestOrderEnable' has a wrong offset!");
static_assert(offsetof(FEndDataTableStoryResident, FractionCount) == 0x000044, "Member 'FEndDataTableStoryResident::FractionCount' has a wrong offset!");
static_assert(offsetof(FEndDataTableStoryResident, TitleUnkownFlag) == 0x000048, "Member 'FEndDataTableStoryResident::TitleUnkownFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTableStoryResident, ViewIndex) == 0x000050, "Member 'FEndDataTableStoryResident::ViewIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTableStoryResident, ItemName) == 0x000058, "Member 'FEndDataTableStoryResident::ItemName' has a wrong offset!");
static_assert(offsetof(FEndDataTableStoryResident, Description) == 0x000068, "Member 'FEndDataTableStoryResident::Description' has a wrong offset!");
static_assert(offsetof(FEndDataTableStoryResident, ImageName) == 0x000078, "Member 'FEndDataTableStoryResident::ImageName' has a wrong offset!");
static_assert(offsetof(FEndDataTableStoryResident, AdditionalGroupViewOption) == 0x000088, "Member 'FEndDataTableStoryResident::AdditionalGroupViewOption' has a wrong offset!");
static_assert(offsetof(FEndDataTableStoryResident, ViewLocationID_Array) == 0x000090, "Member 'FEndDataTableStoryResident::ViewLocationID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableStoryResident, IconOperationStatus_Array) == 0x0000A0, "Member 'FEndDataTableStoryResident::IconOperationStatus_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableStoryResident, CircleRadius_Array) == 0x0000B0, "Member 'FEndDataTableStoryResident::CircleRadius_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableStoryResident, ViewTargetDistance_Array) == 0x0000C0, "Member 'FEndDataTableStoryResident::ViewTargetDistance_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableStoryResident, ViewTargetDistanceParam_Array) == 0x0000D0, "Member 'FEndDataTableStoryResident::ViewTargetDistanceParam_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableStoryResident, IconVisibleStartDistance_Array) == 0x0000E0, "Member 'FEndDataTableStoryResident::IconVisibleStartDistance_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableStoryResident, IconKind_Array) == 0x0000F0, "Member 'FEndDataTableStoryResident::IconKind_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableStoryResident, IconTargetType_Array) == 0x000100, "Member 'FEndDataTableStoryResident::IconTargetType_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableStoryResident, TargetObjectID_Array) == 0x000110, "Member 'FEndDataTableStoryResident::TargetObjectID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableStoryResident, IconInvisibleFlag_Array) == 0x000120, "Member 'FEndDataTableStoryResident::IconInvisibleFlag_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableStoryResident, IconLineLength_Array) == 0x000130, "Member 'FEndDataTableStoryResident::IconLineLength_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableStoryResident, IconSocketName_Array) == 0x000140, "Member 'FEndDataTableStoryResident::IconSocketName_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableStoryResident, QuestClearStep_Array) == 0x000150, "Member 'FEndDataTableStoryResident::QuestClearStep_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableStoryResident, InvNaviIcon_ViewFlag) == 0x000160, "Member 'FEndDataTableStoryResident::InvNaviIcon_ViewFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTableStoryResident, InvNaviIcon_ViewLocationID) == 0x000168, "Member 'FEndDataTableStoryResident::InvNaviIcon_ViewLocationID' has a wrong offset!");
static_assert(offsetof(FEndDataTableStoryResident, InvNaviIcon_ViewFlagIconOperationStatus) == 0x000170, "Member 'FEndDataTableStoryResident::InvNaviIcon_ViewFlagIconOperationStatus' has a wrong offset!");
static_assert(offsetof(FEndDataTableStoryResident, InvNaviIcon_IconVisibleStartDistance) == 0x000174, "Member 'FEndDataTableStoryResident::InvNaviIcon_IconVisibleStartDistance' has a wrong offset!");
static_assert(offsetof(FEndDataTableStoryResident, InvNaviIcon_IconKind) == 0x000178, "Member 'FEndDataTableStoryResident::InvNaviIcon_IconKind' has a wrong offset!");
static_assert(offsetof(FEndDataTableStoryResident, InvNaviIcon_IconTargetType) == 0x000179, "Member 'FEndDataTableStoryResident::InvNaviIcon_IconTargetType' has a wrong offset!");
static_assert(offsetof(FEndDataTableStoryResident, InvNaviIcon_TargetObjectID) == 0x00017C, "Member 'FEndDataTableStoryResident::InvNaviIcon_TargetObjectID' has a wrong offset!");
static_assert(offsetof(FEndDataTableStoryResident, InvNaviIcon_IconLineLength) == 0x000184, "Member 'FEndDataTableStoryResident::InvNaviIcon_IconLineLength' has a wrong offset!");
static_assert(offsetof(FEndDataTableStoryResident, ChapterID) == 0x000188, "Member 'FEndDataTableStoryResident::ChapterID' has a wrong offset!");
static_assert(offsetof(FEndDataTableStoryResident, FractionView) == 0x000190, "Member 'FEndDataTableStoryResident::FractionView' has a wrong offset!");
static_assert(offsetof(FEndDataTableStoryResident, ScenarioType) == 0x000191, "Member 'FEndDataTableStoryResident::ScenarioType' has a wrong offset!");

// ScriptStruct EndGame.EndBehaviorSwitchBehaviorExtraAction
// 0x0000 (0x0930 - 0x0930)
struct FEndBehaviorSwitchBehaviorExtraAction final : public FEndBehaviorSequentialExtraAction
{
};
static_assert(alignof(FEndBehaviorSwitchBehaviorExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorSwitchBehaviorExtraAction");
static_assert(sizeof(FEndBehaviorSwitchBehaviorExtraAction) == 0x000930, "Wrong size on FEndBehaviorSwitchBehaviorExtraAction");

// ScriptStruct EndGame.EndBehaviorTarzanRopeExtraAction
// 0x0240 (0x0A00 - 0x07C0)
struct FEndBehaviorTarzanRopeExtraAction final : public FEndBehaviorExtraAction
{
public:
	uint8                                         Pad_7C0[0x240];                                    // 0x07C0(0x0240)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorTarzanRopeExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorTarzanRopeExtraAction");
static_assert(sizeof(FEndBehaviorTarzanRopeExtraAction) == 0x000A00, "Wrong size on FEndBehaviorTarzanRopeExtraAction");

// ScriptStruct EndGame.EndDataTableColosseumPositionData
// 0x00A0 (0x00A8 - 0x0008)
struct FEndDataTableColosseumPositionData final : public FEndDataTableRowBase
{
public:
	TArray<class FName>                           PlayerPosTarget_Array;                             // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 PlayerPosOffset_X_Array;                           // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 PlayerPosOffset_Y_Array;                           // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 PlayerPosOffset_Z_Array;                           // 0x0038(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 PlayerRot_Yaw_Array;                               // 0x0048(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           PopTargetPoint_Array;                              // 0x0058(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 PopOffset_X_Array;                                 // 0x0068(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 PopOffset_Y_Array;                                 // 0x0078(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 PopOffset_Z_Array;                                 // 0x0088(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 PopRot_Yaw_Array;                                  // 0x0098(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableColosseumPositionData) == 0x000008, "Wrong alignment on FEndDataTableColosseumPositionData");
static_assert(sizeof(FEndDataTableColosseumPositionData) == 0x0000A8, "Wrong size on FEndDataTableColosseumPositionData");
static_assert(offsetof(FEndDataTableColosseumPositionData, PlayerPosTarget_Array) == 0x000008, "Member 'FEndDataTableColosseumPositionData::PlayerPosTarget_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableColosseumPositionData, PlayerPosOffset_X_Array) == 0x000018, "Member 'FEndDataTableColosseumPositionData::PlayerPosOffset_X_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableColosseumPositionData, PlayerPosOffset_Y_Array) == 0x000028, "Member 'FEndDataTableColosseumPositionData::PlayerPosOffset_Y_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableColosseumPositionData, PlayerPosOffset_Z_Array) == 0x000038, "Member 'FEndDataTableColosseumPositionData::PlayerPosOffset_Z_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableColosseumPositionData, PlayerRot_Yaw_Array) == 0x000048, "Member 'FEndDataTableColosseumPositionData::PlayerRot_Yaw_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableColosseumPositionData, PopTargetPoint_Array) == 0x000058, "Member 'FEndDataTableColosseumPositionData::PopTargetPoint_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableColosseumPositionData, PopOffset_X_Array) == 0x000068, "Member 'FEndDataTableColosseumPositionData::PopOffset_X_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableColosseumPositionData, PopOffset_Y_Array) == 0x000078, "Member 'FEndDataTableColosseumPositionData::PopOffset_Y_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableColosseumPositionData, PopOffset_Z_Array) == 0x000088, "Member 'FEndDataTableColosseumPositionData::PopOffset_Z_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableColosseumPositionData, PopRot_Yaw_Array) == 0x000098, "Member 'FEndDataTableColosseumPositionData::PopRot_Yaw_Array' has a wrong offset!");

// ScriptStruct EndGame.EndBehaviorTreasureExtraAction
// 0x0030 (0x07F0 - 0x07C0)
struct FEndBehaviorTreasureExtraAction final : public FEndBehaviorExtraAction
{
public:
	uint8                                         Pad_7C0[0x30];                                     // 0x07C0(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorTreasureExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorTreasureExtraAction");
static_assert(sizeof(FEndBehaviorTreasureExtraAction) == 0x0007F0, "Wrong size on FEndBehaviorTreasureExtraAction");

// ScriptStruct EndGame.EndBehaviorUndg6PumpMiniGameAction
// 0x0050 (0x0810 - 0x07C0)
struct FEndBehaviorUndg6PumpMiniGameAction final : public FEndBehaviorExtraAction
{
public:
	uint8                                         Pad_7C0[0x50];                                     // 0x07C0(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorUndg6PumpMiniGameAction) == 0x000010, "Wrong alignment on FEndBehaviorUndg6PumpMiniGameAction");
static_assert(sizeof(FEndBehaviorUndg6PumpMiniGameAction) == 0x000810, "Wrong size on FEndBehaviorUndg6PumpMiniGameAction");

// ScriptStruct EndGame.EndDataTablePlannerEventTalkInfo
// 0x0038 (0x0040 - 0x0008)
struct FEndDataTablePlannerEventTalkInfo final : public FEndDataTableRowBase
{
public:
	TArray<class FName>                           ListnerName_Array;                                 // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         SituationType;                                     // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   HintName;                                          // 0x001C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LastLookAt;                                        // 0x0024(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           IgnoreCullingTarget_Array;                         // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTablePlannerEventTalkInfo) == 0x000008, "Wrong alignment on FEndDataTablePlannerEventTalkInfo");
static_assert(sizeof(FEndDataTablePlannerEventTalkInfo) == 0x000040, "Wrong size on FEndDataTablePlannerEventTalkInfo");
static_assert(offsetof(FEndDataTablePlannerEventTalkInfo, ListnerName_Array) == 0x000008, "Member 'FEndDataTablePlannerEventTalkInfo::ListnerName_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlannerEventTalkInfo, SituationType) == 0x000018, "Member 'FEndDataTablePlannerEventTalkInfo::SituationType' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlannerEventTalkInfo, HintName) == 0x00001C, "Member 'FEndDataTablePlannerEventTalkInfo::HintName' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlannerEventTalkInfo, LastLookAt) == 0x000024, "Member 'FEndDataTablePlannerEventTalkInfo::LastLookAt' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlannerEventTalkInfo, IgnoreCullingTarget_Array) == 0x000030, "Member 'FEndDataTablePlannerEventTalkInfo::IgnoreCullingTarget_Array' has a wrong offset!");

// ScriptStruct EndGame.AccelModifier
// 0x0060 (0x0060 - 0x0000)
struct FAccelModifier final
{
public:
	float                                         MinVelocity;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxVelocity;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEasingFunc                                   AccelEasingFunc;                                   // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEasingFunc                                   DecelEasingFunc;                                   // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ModifyDuration;                                    // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEasingFunc                                   JumpEasingFunc;                                    // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ModifyJumpDuration;                                // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CutSceneMinVelocity;                               // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CutSceneMaxVelocity;                               // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NpcMinVelocity;                                    // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NpcMaxVelocity;                                    // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AccelBlendExp;                                     // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         AccelSteps;                                        // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         DecelBlendExp;                                     // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         DecelSteps;                                        // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ElapsedModifyTime;                                 // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         CurrentModifyAccelVelocity;                        // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         RemainDuration;                                    // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         CachedVelocity;                                    // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         CachedElapsedModifyTime;                           // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         JumpBlendExp;                                      // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         JumpSteps;                                         // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ElapsedModifyJumpTime;                             // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         CachedBeforeJumpVelocity;                          // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         CachedBeforeCutSceneVelocity;                      // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FAccelModifier) == 0x000004, "Wrong alignment on FAccelModifier");
static_assert(sizeof(FAccelModifier) == 0x000060, "Wrong size on FAccelModifier");
static_assert(offsetof(FAccelModifier, MinVelocity) == 0x000000, "Member 'FAccelModifier::MinVelocity' has a wrong offset!");
static_assert(offsetof(FAccelModifier, MaxVelocity) == 0x000004, "Member 'FAccelModifier::MaxVelocity' has a wrong offset!");
static_assert(offsetof(FAccelModifier, AccelEasingFunc) == 0x000008, "Member 'FAccelModifier::AccelEasingFunc' has a wrong offset!");
static_assert(offsetof(FAccelModifier, DecelEasingFunc) == 0x000009, "Member 'FAccelModifier::DecelEasingFunc' has a wrong offset!");
static_assert(offsetof(FAccelModifier, ModifyDuration) == 0x00000C, "Member 'FAccelModifier::ModifyDuration' has a wrong offset!");
static_assert(offsetof(FAccelModifier, JumpEasingFunc) == 0x000010, "Member 'FAccelModifier::JumpEasingFunc' has a wrong offset!");
static_assert(offsetof(FAccelModifier, ModifyJumpDuration) == 0x000014, "Member 'FAccelModifier::ModifyJumpDuration' has a wrong offset!");
static_assert(offsetof(FAccelModifier, CutSceneMinVelocity) == 0x000018, "Member 'FAccelModifier::CutSceneMinVelocity' has a wrong offset!");
static_assert(offsetof(FAccelModifier, CutSceneMaxVelocity) == 0x00001C, "Member 'FAccelModifier::CutSceneMaxVelocity' has a wrong offset!");
static_assert(offsetof(FAccelModifier, NpcMinVelocity) == 0x000020, "Member 'FAccelModifier::NpcMinVelocity' has a wrong offset!");
static_assert(offsetof(FAccelModifier, NpcMaxVelocity) == 0x000024, "Member 'FAccelModifier::NpcMaxVelocity' has a wrong offset!");
static_assert(offsetof(FAccelModifier, AccelBlendExp) == 0x000028, "Member 'FAccelModifier::AccelBlendExp' has a wrong offset!");
static_assert(offsetof(FAccelModifier, AccelSteps) == 0x00002C, "Member 'FAccelModifier::AccelSteps' has a wrong offset!");
static_assert(offsetof(FAccelModifier, DecelBlendExp) == 0x000030, "Member 'FAccelModifier::DecelBlendExp' has a wrong offset!");
static_assert(offsetof(FAccelModifier, DecelSteps) == 0x000034, "Member 'FAccelModifier::DecelSteps' has a wrong offset!");
static_assert(offsetof(FAccelModifier, ElapsedModifyTime) == 0x000038, "Member 'FAccelModifier::ElapsedModifyTime' has a wrong offset!");
static_assert(offsetof(FAccelModifier, CurrentModifyAccelVelocity) == 0x00003C, "Member 'FAccelModifier::CurrentModifyAccelVelocity' has a wrong offset!");
static_assert(offsetof(FAccelModifier, RemainDuration) == 0x000040, "Member 'FAccelModifier::RemainDuration' has a wrong offset!");
static_assert(offsetof(FAccelModifier, CachedVelocity) == 0x000044, "Member 'FAccelModifier::CachedVelocity' has a wrong offset!");
static_assert(offsetof(FAccelModifier, CachedElapsedModifyTime) == 0x000048, "Member 'FAccelModifier::CachedElapsedModifyTime' has a wrong offset!");
static_assert(offsetof(FAccelModifier, JumpBlendExp) == 0x00004C, "Member 'FAccelModifier::JumpBlendExp' has a wrong offset!");
static_assert(offsetof(FAccelModifier, JumpSteps) == 0x000050, "Member 'FAccelModifier::JumpSteps' has a wrong offset!");
static_assert(offsetof(FAccelModifier, ElapsedModifyJumpTime) == 0x000054, "Member 'FAccelModifier::ElapsedModifyJumpTime' has a wrong offset!");
static_assert(offsetof(FAccelModifier, CachedBeforeJumpVelocity) == 0x000058, "Member 'FAccelModifier::CachedBeforeJumpVelocity' has a wrong offset!");
static_assert(offsetof(FAccelModifier, CachedBeforeCutSceneVelocity) == 0x00005C, "Member 'FAccelModifier::CachedBeforeCutSceneVelocity' has a wrong offset!");

// ScriptStruct EndGame.EndBehaviorWireMeshMoveExtraAction
// 0x01B0 (0x0970 - 0x07C0)
struct FEndBehaviorWireMeshMoveExtraAction final : public FEndBehaviorExtraAction
{
public:
	uint8                                         Pad_7C0[0x1B0];                                    // 0x07C0(0x01B0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBehaviorWireMeshMoveExtraAction) == 0x000010, "Wrong alignment on FEndBehaviorWireMeshMoveExtraAction");
static_assert(sizeof(FEndBehaviorWireMeshMoveExtraAction) == 0x000970, "Wrong size on FEndBehaviorWireMeshMoveExtraAction");

// ScriptStruct EndGame.BikeEffectInfo
// 0x0014 (0x0014 - 0x0000)
struct FBikeEffectInfo final
{
public:
	class FName                                   EffectName;                                        // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SocketName;                                        // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x4];                                       // 0x0010(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBikeEffectInfo) == 0x000004, "Wrong alignment on FBikeEffectInfo");
static_assert(sizeof(FBikeEffectInfo) == 0x000014, "Wrong size on FBikeEffectInfo");
static_assert(offsetof(FBikeEffectInfo, EffectName) == 0x000000, "Member 'FBikeEffectInfo::EffectName' has a wrong offset!");
static_assert(offsetof(FBikeEffectInfo, SocketName) == 0x000008, "Member 'FBikeEffectInfo::SocketName' has a wrong offset!");

// ScriptStruct EndGame.BikeRegenerationSetting
// 0x0020 (0x0020 - 0x0000)
struct FBikeRegenerationSetting final
{
public:
	float                                         HitPointRate_BeginRegeneration;                    // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HitPointRate_EndRegeneration;                      // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HitPointRate_RegenerationPerSecond;                // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBikeEffectInfo                        Effect_Regeneration;                               // 0x000C(0x0014)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBikeRegenerationSetting) == 0x000004, "Wrong alignment on FBikeRegenerationSetting");
static_assert(sizeof(FBikeRegenerationSetting) == 0x000020, "Wrong size on FBikeRegenerationSetting");
static_assert(offsetof(FBikeRegenerationSetting, HitPointRate_BeginRegeneration) == 0x000000, "Member 'FBikeRegenerationSetting::HitPointRate_BeginRegeneration' has a wrong offset!");
static_assert(offsetof(FBikeRegenerationSetting, HitPointRate_EndRegeneration) == 0x000004, "Member 'FBikeRegenerationSetting::HitPointRate_EndRegeneration' has a wrong offset!");
static_assert(offsetof(FBikeRegenerationSetting, HitPointRate_RegenerationPerSecond) == 0x000008, "Member 'FBikeRegenerationSetting::HitPointRate_RegenerationPerSecond' has a wrong offset!");
static_assert(offsetof(FBikeRegenerationSetting, Effect_Regeneration) == 0x00000C, "Member 'FBikeRegenerationSetting::Effect_Regeneration' has a wrong offset!");

// ScriptStruct EndGame.BikeAllyAbilityList
// 0x0050 (0x0050 - 0x0000)
struct FBikeAllyAbilityList final
{
public:
	TMap<class FName, int32>                      AbilityList;                                       // 0x0000(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBikeAllyAbilityList) == 0x000008, "Wrong alignment on FBikeAllyAbilityList");
static_assert(sizeof(FBikeAllyAbilityList) == 0x000050, "Wrong size on FBikeAllyAbilityList");
static_assert(offsetof(FBikeAllyAbilityList, AbilityList) == 0x000000, "Member 'FBikeAllyAbilityList::AbilityList' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableEventPriorityDistance
// 0x0018 (0x0020 - 0x0008)
struct FEndDataTableEventPriorityDistance final : public FEndDataTableRowBase
{
public:
	float                                         RepeatDist;                                        // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TimeBeforeRepeat;                                  // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RepeatRandomBias;                                  // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinPriority;                                       // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InnerDist;                                         // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OuterDist;                                         // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableEventPriorityDistance) == 0x000008, "Wrong alignment on FEndDataTableEventPriorityDistance");
static_assert(sizeof(FEndDataTableEventPriorityDistance) == 0x000020, "Wrong size on FEndDataTableEventPriorityDistance");
static_assert(offsetof(FEndDataTableEventPriorityDistance, RepeatDist) == 0x000008, "Member 'FEndDataTableEventPriorityDistance::RepeatDist' has a wrong offset!");
static_assert(offsetof(FEndDataTableEventPriorityDistance, TimeBeforeRepeat) == 0x00000C, "Member 'FEndDataTableEventPriorityDistance::TimeBeforeRepeat' has a wrong offset!");
static_assert(offsetof(FEndDataTableEventPriorityDistance, RepeatRandomBias) == 0x000010, "Member 'FEndDataTableEventPriorityDistance::RepeatRandomBias' has a wrong offset!");
static_assert(offsetof(FEndDataTableEventPriorityDistance, MinPriority) == 0x000014, "Member 'FEndDataTableEventPriorityDistance::MinPriority' has a wrong offset!");
static_assert(offsetof(FEndDataTableEventPriorityDistance, InnerDist) == 0x000018, "Member 'FEndDataTableEventPriorityDistance::InnerDist' has a wrong offset!");
static_assert(offsetof(FEndDataTableEventPriorityDistance, OuterDist) == 0x00001C, "Member 'FEndDataTableEventPriorityDistance::OuterDist' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableTalkOnEndBattleVoiceSet
// 0x0020 (0x0028 - 0x0008)
struct FEndDataTableTalkOnEndBattleVoiceSet final : public FEndDataTableRowBase
{
public:
	TArray<int32>                                 VoiceChara_Array;                                  // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           VoiceId_Array;                                     // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableTalkOnEndBattleVoiceSet) == 0x000008, "Wrong alignment on FEndDataTableTalkOnEndBattleVoiceSet");
static_assert(sizeof(FEndDataTableTalkOnEndBattleVoiceSet) == 0x000028, "Wrong size on FEndDataTableTalkOnEndBattleVoiceSet");
static_assert(offsetof(FEndDataTableTalkOnEndBattleVoiceSet, VoiceChara_Array) == 0x000008, "Member 'FEndDataTableTalkOnEndBattleVoiceSet::VoiceChara_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableTalkOnEndBattleVoiceSet, VoiceId_Array) == 0x000018, "Member 'FEndDataTableTalkOnEndBattleVoiceSet::VoiceId_Array' has a wrong offset!");

// ScriptStruct EndGame.EndBikeEnemySwitchAbilitySetByDamage
// 0x0014 (0x0014 - 0x0000)
struct FEndBikeEnemySwitchAbilitySetByDamage final
{
public:
	int32                                         Damage;                                            // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BeforeAbilitySetId;                                // 0x0004(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AfterAbilitySetId;                                 // 0x000C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndBikeEnemySwitchAbilitySetByDamage) == 0x000004, "Wrong alignment on FEndBikeEnemySwitchAbilitySetByDamage");
static_assert(sizeof(FEndBikeEnemySwitchAbilitySetByDamage) == 0x000014, "Wrong size on FEndBikeEnemySwitchAbilitySetByDamage");
static_assert(offsetof(FEndBikeEnemySwitchAbilitySetByDamage, Damage) == 0x000000, "Member 'FEndBikeEnemySwitchAbilitySetByDamage::Damage' has a wrong offset!");
static_assert(offsetof(FEndBikeEnemySwitchAbilitySetByDamage, BeforeAbilitySetId) == 0x000004, "Member 'FEndBikeEnemySwitchAbilitySetByDamage::BeforeAbilitySetId' has a wrong offset!");
static_assert(offsetof(FEndBikeEnemySwitchAbilitySetByDamage, AfterAbilitySetId) == 0x00000C, "Member 'FEndBikeEnemySwitchAbilitySetByDamage::AfterAbilitySetId' has a wrong offset!");

// ScriptStruct EndGame.BikeTrikeRandomIdleGestureParam
// 0x0020 (0x0020 - 0x0000)
struct FBikeTrikeRandomIdleGestureParam final
{
public:
	EBikeAllyCharacterType                        TargetCharacterType;                               // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           Motions;                                           // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         IntervalTime;                                      // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBikeTrikeRandomIdleGestureParam) == 0x000008, "Wrong alignment on FBikeTrikeRandomIdleGestureParam");
static_assert(sizeof(FBikeTrikeRandomIdleGestureParam) == 0x000020, "Wrong size on FBikeTrikeRandomIdleGestureParam");
static_assert(offsetof(FBikeTrikeRandomIdleGestureParam, TargetCharacterType) == 0x000000, "Member 'FBikeTrikeRandomIdleGestureParam::TargetCharacterType' has a wrong offset!");
static_assert(offsetof(FBikeTrikeRandomIdleGestureParam, Motions) == 0x000008, "Member 'FBikeTrikeRandomIdleGestureParam::Motions' has a wrong offset!");
static_assert(offsetof(FBikeTrikeRandomIdleGestureParam, IntervalTime) == 0x000018, "Member 'FBikeTrikeRandomIdleGestureParam::IntervalTime' has a wrong offset!");

// ScriptStruct EndGame.BikeAIControllerTrikeSpecialAttackParameter
// 0x0020 (0x0020 - 0x0000)
struct FBikeAIControllerTrikeSpecialAttackParameter final
{
public:
	float                                         SpecialAttackCameraTimer;                          // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SpecialAttackCameraOffset;                         // 0x0004(0x000C)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SpecialAttackCameraEyeOffset;                      // 0x0010(0x000C)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpecialAttackCameraFOV;                            // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBikeAIControllerTrikeSpecialAttackParameter) == 0x000004, "Wrong alignment on FBikeAIControllerTrikeSpecialAttackParameter");
static_assert(sizeof(FBikeAIControllerTrikeSpecialAttackParameter) == 0x000020, "Wrong size on FBikeAIControllerTrikeSpecialAttackParameter");
static_assert(offsetof(FBikeAIControllerTrikeSpecialAttackParameter, SpecialAttackCameraTimer) == 0x000000, "Member 'FBikeAIControllerTrikeSpecialAttackParameter::SpecialAttackCameraTimer' has a wrong offset!");
static_assert(offsetof(FBikeAIControllerTrikeSpecialAttackParameter, SpecialAttackCameraOffset) == 0x000004, "Member 'FBikeAIControllerTrikeSpecialAttackParameter::SpecialAttackCameraOffset' has a wrong offset!");
static_assert(offsetof(FBikeAIControllerTrikeSpecialAttackParameter, SpecialAttackCameraEyeOffset) == 0x000010, "Member 'FBikeAIControllerTrikeSpecialAttackParameter::SpecialAttackCameraEyeOffset' has a wrong offset!");
static_assert(offsetof(FBikeAIControllerTrikeSpecialAttackParameter, SpecialAttackCameraFOV) == 0x00001C, "Member 'FBikeAIControllerTrikeSpecialAttackParameter::SpecialAttackCameraFOV' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableCameraSequence
// 0x00A8 (0x00B0 - 0x0008)
struct FEndDataTableCameraSequence final : public FEndDataTableRowBase
{
public:
	int32                                         BlendType;                                         // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TotalTime;                                         // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 ParameterType_Array;                               // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 CameraLocationX_Array;                             // 0x0020(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 CameraLocationY_Array;                             // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 CameraLocationZ_Array;                             // 0x0040(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 LookAtLocationX_Array;                             // 0x0050(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 LookAtLocationY_Array;                             // 0x0060(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 LookAtLocationZ_Array;                             // 0x0070(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 FieldOfView_Array;                                 // 0x0080(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 Roll_Array;                                        // 0x0090(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 Weight_Array;                                      // 0x00A0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableCameraSequence) == 0x000008, "Wrong alignment on FEndDataTableCameraSequence");
static_assert(sizeof(FEndDataTableCameraSequence) == 0x0000B0, "Wrong size on FEndDataTableCameraSequence");
static_assert(offsetof(FEndDataTableCameraSequence, BlendType) == 0x000008, "Member 'FEndDataTableCameraSequence::BlendType' has a wrong offset!");
static_assert(offsetof(FEndDataTableCameraSequence, TotalTime) == 0x00000C, "Member 'FEndDataTableCameraSequence::TotalTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableCameraSequence, ParameterType_Array) == 0x000010, "Member 'FEndDataTableCameraSequence::ParameterType_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableCameraSequence, CameraLocationX_Array) == 0x000020, "Member 'FEndDataTableCameraSequence::CameraLocationX_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableCameraSequence, CameraLocationY_Array) == 0x000030, "Member 'FEndDataTableCameraSequence::CameraLocationY_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableCameraSequence, CameraLocationZ_Array) == 0x000040, "Member 'FEndDataTableCameraSequence::CameraLocationZ_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableCameraSequence, LookAtLocationX_Array) == 0x000050, "Member 'FEndDataTableCameraSequence::LookAtLocationX_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableCameraSequence, LookAtLocationY_Array) == 0x000060, "Member 'FEndDataTableCameraSequence::LookAtLocationY_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableCameraSequence, LookAtLocationZ_Array) == 0x000070, "Member 'FEndDataTableCameraSequence::LookAtLocationZ_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableCameraSequence, FieldOfView_Array) == 0x000080, "Member 'FEndDataTableCameraSequence::FieldOfView_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableCameraSequence, Roll_Array) == 0x000090, "Member 'FEndDataTableCameraSequence::Roll_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableCameraSequence, Weight_Array) == 0x0000A0, "Member 'FEndDataTableCameraSequence::Weight_Array' has a wrong offset!");

// ScriptStruct EndGame.EndMenuColosseumHandicapPrototypeData
// 0x0028 (0x0028 - 0x0000)
struct FEndMenuColosseumHandicapPrototypeData final
{
public:
	class FString                                 Title;                                             // 0x0000(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0010(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndMenuColosseumHandicapCategoryPrototype    Category;                                          // 0x0020(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndMenuColosseumHandicapPrototypeData) == 0x000008, "Wrong alignment on FEndMenuColosseumHandicapPrototypeData");
static_assert(sizeof(FEndMenuColosseumHandicapPrototypeData) == 0x000028, "Wrong size on FEndMenuColosseumHandicapPrototypeData");
static_assert(offsetof(FEndMenuColosseumHandicapPrototypeData, Title) == 0x000000, "Member 'FEndMenuColosseumHandicapPrototypeData::Title' has a wrong offset!");
static_assert(offsetof(FEndMenuColosseumHandicapPrototypeData, Description) == 0x000010, "Member 'FEndMenuColosseumHandicapPrototypeData::Description' has a wrong offset!");
static_assert(offsetof(FEndMenuColosseumHandicapPrototypeData, Category) == 0x000020, "Member 'FEndMenuColosseumHandicapPrototypeData::Category' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableBikeBattle
// 0x00D8 (0x00E0 - 0x0008)
struct FEndDataTableBikeBattle final : public FEndDataTableRowBase
{
public:
	class FName                                   NextBikeBattleID;                                  // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NextBikeBattleDelay;                               // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 StateTriggerId;                                    // 0x0018(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlannerEventID;                                    // 0x0028(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StateTriggerDelay;                                 // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 FinishedStateTriggerId;                            // 0x0040(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FinishedPlannerEventId;                            // 0x0050(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           BikeUniqueIdList_Array;                            // 0x0060(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           BikeCharaSpecIDList_Array;                         // 0x0070(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           BikePopupParameterList_Array;                      // 0x0080(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           BikeCharaStateTriggerIDList_Array;                 // 0x0090(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           BikeCharaPlannerEventIDList_Array;                 // 0x00A0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           BikeTriggerBoxKeyList_Array;                       // 0x00B0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           CutSceneCharacterIDList_Array;                     // 0x00C0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         HelpPopupEndless;                                  // 0x00D0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         IsEscape;                                          // 0x00D1(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         HelpPopupCount;                                    // 0x00D2(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D3[0x1];                                       // 0x00D3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         HelpPopupCondition;                                // 0x00D4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HelpPopupHpRate;                                   // 0x00D8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DC[0x4];                                       // 0x00DC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableBikeBattle) == 0x000008, "Wrong alignment on FEndDataTableBikeBattle");
static_assert(sizeof(FEndDataTableBikeBattle) == 0x0000E0, "Wrong size on FEndDataTableBikeBattle");
static_assert(offsetof(FEndDataTableBikeBattle, NextBikeBattleID) == 0x000008, "Member 'FEndDataTableBikeBattle::NextBikeBattleID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeBattle, NextBikeBattleDelay) == 0x000010, "Member 'FEndDataTableBikeBattle::NextBikeBattleDelay' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeBattle, StateTriggerId) == 0x000018, "Member 'FEndDataTableBikeBattle::StateTriggerId' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeBattle, PlannerEventID) == 0x000028, "Member 'FEndDataTableBikeBattle::PlannerEventID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeBattle, StateTriggerDelay) == 0x000038, "Member 'FEndDataTableBikeBattle::StateTriggerDelay' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeBattle, FinishedStateTriggerId) == 0x000040, "Member 'FEndDataTableBikeBattle::FinishedStateTriggerId' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeBattle, FinishedPlannerEventId) == 0x000050, "Member 'FEndDataTableBikeBattle::FinishedPlannerEventId' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeBattle, BikeUniqueIdList_Array) == 0x000060, "Member 'FEndDataTableBikeBattle::BikeUniqueIdList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeBattle, BikeCharaSpecIDList_Array) == 0x000070, "Member 'FEndDataTableBikeBattle::BikeCharaSpecIDList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeBattle, BikePopupParameterList_Array) == 0x000080, "Member 'FEndDataTableBikeBattle::BikePopupParameterList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeBattle, BikeCharaStateTriggerIDList_Array) == 0x000090, "Member 'FEndDataTableBikeBattle::BikeCharaStateTriggerIDList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeBattle, BikeCharaPlannerEventIDList_Array) == 0x0000A0, "Member 'FEndDataTableBikeBattle::BikeCharaPlannerEventIDList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeBattle, BikeTriggerBoxKeyList_Array) == 0x0000B0, "Member 'FEndDataTableBikeBattle::BikeTriggerBoxKeyList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeBattle, CutSceneCharacterIDList_Array) == 0x0000C0, "Member 'FEndDataTableBikeBattle::CutSceneCharacterIDList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeBattle, HelpPopupEndless) == 0x0000D0, "Member 'FEndDataTableBikeBattle::HelpPopupEndless' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeBattle, IsEscape) == 0x0000D1, "Member 'FEndDataTableBikeBattle::IsEscape' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeBattle, HelpPopupCount) == 0x0000D2, "Member 'FEndDataTableBikeBattle::HelpPopupCount' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeBattle, HelpPopupCondition) == 0x0000D4, "Member 'FEndDataTableBikeBattle::HelpPopupCondition' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeBattle, HelpPopupHpRate) == 0x0000D8, "Member 'FEndDataTableBikeBattle::HelpPopupHpRate' has a wrong offset!");

// ScriptStruct EndGame.BikeTrikeStateTriggerData
// 0x0010 (0x0010 - 0x0000)
struct FBikeTrikeStateTriggerData final
{
public:
	class FName                                   StateTriggerName;                                  // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PlannerEventID;                                    // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBikeTrikeStateTriggerData) == 0x000004, "Wrong alignment on FBikeTrikeStateTriggerData");
static_assert(sizeof(FBikeTrikeStateTriggerData) == 0x000010, "Wrong size on FBikeTrikeStateTriggerData");
static_assert(offsetof(FBikeTrikeStateTriggerData, StateTriggerName) == 0x000000, "Member 'FBikeTrikeStateTriggerData::StateTriggerName' has a wrong offset!");
static_assert(offsetof(FBikeTrikeStateTriggerData, PlannerEventID) == 0x000008, "Member 'FBikeTrikeStateTriggerData::PlannerEventID' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableAutoCameraShotLogic
// 0x0060 (0x0068 - 0x0008)
struct FEndDataTableAutoCameraShotLogic final : public FEndDataTableRowBase
{
public:
	class FString                                 Next;                                              // 0x0008(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 Condition_Array;                                   // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         Param_Array;                                       // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         ShotID_Array;                                      // 0x0038(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         FailNextID_Array;                                  // 0x0048(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         SuccessNextID_Array;                               // 0x0058(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableAutoCameraShotLogic) == 0x000008, "Wrong alignment on FEndDataTableAutoCameraShotLogic");
static_assert(sizeof(FEndDataTableAutoCameraShotLogic) == 0x000068, "Wrong size on FEndDataTableAutoCameraShotLogic");
static_assert(offsetof(FEndDataTableAutoCameraShotLogic, Next) == 0x000008, "Member 'FEndDataTableAutoCameraShotLogic::Next' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraShotLogic, Condition_Array) == 0x000018, "Member 'FEndDataTableAutoCameraShotLogic::Condition_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraShotLogic, Param_Array) == 0x000028, "Member 'FEndDataTableAutoCameraShotLogic::Param_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraShotLogic, ShotID_Array) == 0x000038, "Member 'FEndDataTableAutoCameraShotLogic::ShotID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraShotLogic, FailNextID_Array) == 0x000048, "Member 'FEndDataTableAutoCameraShotLogic::FailNextID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraShotLogic, SuccessNextID_Array) == 0x000058, "Member 'FEndDataTableAutoCameraShotLogic::SuccessNextID_Array' has a wrong offset!");

// ScriptStruct EndGame.EndDataTablePlayerParameter
// 0x0018 (0x0020 - 0x0008)
struct FEndDataTablePlayerParameter final : public FEndDataTableRowBase
{
public:
	int32                                         HPMax;                                             // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MPMax;                                             // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Strength;                                          // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Magic;                                             // 0x0011(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Vitality;                                          // 0x0012(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Spilit;                                            // 0x0013(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Luck;                                              // 0x0014(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Dexterity;                                         // 0x0015(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         SPMax;                                             // 0x0016(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17[0x1];                                       // 0x0017(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Experience;                                        // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         TreeLevel;                                         // 0x001C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTablePlayerParameter) == 0x000008, "Wrong alignment on FEndDataTablePlayerParameter");
static_assert(sizeof(FEndDataTablePlayerParameter) == 0x000020, "Wrong size on FEndDataTablePlayerParameter");
static_assert(offsetof(FEndDataTablePlayerParameter, HPMax) == 0x000008, "Member 'FEndDataTablePlayerParameter::HPMax' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlayerParameter, MPMax) == 0x00000C, "Member 'FEndDataTablePlayerParameter::MPMax' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlayerParameter, Strength) == 0x000010, "Member 'FEndDataTablePlayerParameter::Strength' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlayerParameter, Magic) == 0x000011, "Member 'FEndDataTablePlayerParameter::Magic' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlayerParameter, Vitality) == 0x000012, "Member 'FEndDataTablePlayerParameter::Vitality' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlayerParameter, Spilit) == 0x000013, "Member 'FEndDataTablePlayerParameter::Spilit' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlayerParameter, Luck) == 0x000014, "Member 'FEndDataTablePlayerParameter::Luck' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlayerParameter, Dexterity) == 0x000015, "Member 'FEndDataTablePlayerParameter::Dexterity' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlayerParameter, SPMax) == 0x000016, "Member 'FEndDataTablePlayerParameter::SPMax' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlayerParameter, Experience) == 0x000018, "Member 'FEndDataTablePlayerParameter::Experience' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlayerParameter, TreeLevel) == 0x00001C, "Member 'FEndDataTablePlayerParameter::TreeLevel' has a wrong offset!");

// ScriptStruct EndGame.EndBikeAIHelicopterParameter
// 0x00F4 (0x00F4 - 0x0000)
struct FEndBikeAIHelicopterParameter final
{
public:
	float                                         Move_DefaultYow;                                   // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Move_DefaultPitch;                                 // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Move_BaseHeight;                                   // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Move_WithinRoadSlide;                              // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Move_ArrivalTime;                                  // 0x0010(0x000C)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Move_ErrorRange;                                   // 0x001C(0x000C)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Move_MaxPitchAngle;                                // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Move_MaxPitchSpeed;                                // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Move_PitchDefaultSpeed;                            // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Move_MaxSlideRollAngle;                            // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFloatInterval                         Move_SpeedLimit;                                   // 0x0038(0x0008)(Edit, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Move_WallHeight;                                   // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Move_CenterObstacleHeight;                         // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Move_SplineOffsetForCalcCurvature;                 // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Move_CurvatureMaxDeltaYaw;                         // 0x004C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Move_OffsetOnNotAttack;                            // 0x0050(0x000C)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Move_MaxSlideOnNotAttack;                          // 0x005C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Atk_SelectPlayerAsTargetRate;                      // 0x0060(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Atk_HitPointOfCancelAttack;                        // 0x0064(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LookAt_RecoveryDelayTime;                          // 0x0068(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LookAt_YawSpeed;                                   // 0x006C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LookAt_YawAccel;                                   // 0x0070(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LookAt_YawArrivalTime;                             // 0x0074(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GunFire_SpeedForFirstStep;                         // 0x0078(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GunFire_DistanceForFirstStep;                      // 0x007C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GunFire_MaxTimeOfFitstStep;                        // 0x0080(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GunFire_CorrectionRate;                            // 0x0084(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GunFire_YawLimit;                                  // 0x0088(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GunFire_Interval;                                  // 0x008C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Missile_InitDistance;                              // 0x0090(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Missile_InitKeepTime;                              // 0x0094(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Missile_InterpSpeed;                               // 0x0098(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseJumpAttack;                                    // 0x009C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9D[0x3];                                       // 0x009D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         JumpArea_DistanceLv0;                              // 0x00A0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JumpArea_DistanceLv1;                              // 0x00A4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JumpArea_DistanceLv2;                              // 0x00A8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JumpArea_DistanceLv3;                              // 0x00AC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFloatInterval                         JumpArea_MachineGunRange;                          // 0x00B0(0x0008)(Edit, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JumpArea_StartForwardOffset;                       // 0x00B8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JumpArea_MoveBackwardStartTime;                    // 0x00BC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JumpArea_MoveBackwardDistance;                     // 0x00C0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JumpArea_MoveBackwardTime;                         // 0x00C4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JumpArea_WaitTimeIfReceiveJumpAbility;             // 0x00C8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   JumpArea_TalkTriggerSetID;                         // 0x00CC(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Obstacle_BeginAvoidLength;                         // 0x00D4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StopToExit_SlideInterpSpeed;                       // 0x00D8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StopToExit_HeightSpeed;                            // 0x00DC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StopToExit_RelativeDistance;                       // 0x00E0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StopToExit_RemoveTimer;                            // 0x00E4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TransitionNoAttack_DamageValue;                    // 0x00E8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionNoAttack_TimeValue;                      // 0x00EC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsEventHelicopter;                                 // 0x00F0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F1[0x3];                                       // 0x00F1(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBikeAIHelicopterParameter) == 0x000004, "Wrong alignment on FEndBikeAIHelicopterParameter");
static_assert(sizeof(FEndBikeAIHelicopterParameter) == 0x0000F4, "Wrong size on FEndBikeAIHelicopterParameter");
static_assert(offsetof(FEndBikeAIHelicopterParameter, Move_DefaultYow) == 0x000000, "Member 'FEndBikeAIHelicopterParameter::Move_DefaultYow' has a wrong offset!");
static_assert(offsetof(FEndBikeAIHelicopterParameter, Move_DefaultPitch) == 0x000004, "Member 'FEndBikeAIHelicopterParameter::Move_DefaultPitch' has a wrong offset!");
static_assert(offsetof(FEndBikeAIHelicopterParameter, Move_BaseHeight) == 0x000008, "Member 'FEndBikeAIHelicopterParameter::Move_BaseHeight' has a wrong offset!");
static_assert(offsetof(FEndBikeAIHelicopterParameter, Move_WithinRoadSlide) == 0x00000C, "Member 'FEndBikeAIHelicopterParameter::Move_WithinRoadSlide' has a wrong offset!");
static_assert(offsetof(FEndBikeAIHelicopterParameter, Move_ArrivalTime) == 0x000010, "Member 'FEndBikeAIHelicopterParameter::Move_ArrivalTime' has a wrong offset!");
static_assert(offsetof(FEndBikeAIHelicopterParameter, Move_ErrorRange) == 0x00001C, "Member 'FEndBikeAIHelicopterParameter::Move_ErrorRange' has a wrong offset!");
static_assert(offsetof(FEndBikeAIHelicopterParameter, Move_MaxPitchAngle) == 0x000028, "Member 'FEndBikeAIHelicopterParameter::Move_MaxPitchAngle' has a wrong offset!");
static_assert(offsetof(FEndBikeAIHelicopterParameter, Move_MaxPitchSpeed) == 0x00002C, "Member 'FEndBikeAIHelicopterParameter::Move_MaxPitchSpeed' has a wrong offset!");
static_assert(offsetof(FEndBikeAIHelicopterParameter, Move_PitchDefaultSpeed) == 0x000030, "Member 'FEndBikeAIHelicopterParameter::Move_PitchDefaultSpeed' has a wrong offset!");
static_assert(offsetof(FEndBikeAIHelicopterParameter, Move_MaxSlideRollAngle) == 0x000034, "Member 'FEndBikeAIHelicopterParameter::Move_MaxSlideRollAngle' has a wrong offset!");
static_assert(offsetof(FEndBikeAIHelicopterParameter, Move_SpeedLimit) == 0x000038, "Member 'FEndBikeAIHelicopterParameter::Move_SpeedLimit' has a wrong offset!");
static_assert(offsetof(FEndBikeAIHelicopterParameter, Move_WallHeight) == 0x000040, "Member 'FEndBikeAIHelicopterParameter::Move_WallHeight' has a wrong offset!");
static_assert(offsetof(FEndBikeAIHelicopterParameter, Move_CenterObstacleHeight) == 0x000044, "Member 'FEndBikeAIHelicopterParameter::Move_CenterObstacleHeight' has a wrong offset!");
static_assert(offsetof(FEndBikeAIHelicopterParameter, Move_SplineOffsetForCalcCurvature) == 0x000048, "Member 'FEndBikeAIHelicopterParameter::Move_SplineOffsetForCalcCurvature' has a wrong offset!");
static_assert(offsetof(FEndBikeAIHelicopterParameter, Move_CurvatureMaxDeltaYaw) == 0x00004C, "Member 'FEndBikeAIHelicopterParameter::Move_CurvatureMaxDeltaYaw' has a wrong offset!");
static_assert(offsetof(FEndBikeAIHelicopterParameter, Move_OffsetOnNotAttack) == 0x000050, "Member 'FEndBikeAIHelicopterParameter::Move_OffsetOnNotAttack' has a wrong offset!");
static_assert(offsetof(FEndBikeAIHelicopterParameter, Move_MaxSlideOnNotAttack) == 0x00005C, "Member 'FEndBikeAIHelicopterParameter::Move_MaxSlideOnNotAttack' has a wrong offset!");
static_assert(offsetof(FEndBikeAIHelicopterParameter, Atk_SelectPlayerAsTargetRate) == 0x000060, "Member 'FEndBikeAIHelicopterParameter::Atk_SelectPlayerAsTargetRate' has a wrong offset!");
static_assert(offsetof(FEndBikeAIHelicopterParameter, Atk_HitPointOfCancelAttack) == 0x000064, "Member 'FEndBikeAIHelicopterParameter::Atk_HitPointOfCancelAttack' has a wrong offset!");
static_assert(offsetof(FEndBikeAIHelicopterParameter, LookAt_RecoveryDelayTime) == 0x000068, "Member 'FEndBikeAIHelicopterParameter::LookAt_RecoveryDelayTime' has a wrong offset!");
static_assert(offsetof(FEndBikeAIHelicopterParameter, LookAt_YawSpeed) == 0x00006C, "Member 'FEndBikeAIHelicopterParameter::LookAt_YawSpeed' has a wrong offset!");
static_assert(offsetof(FEndBikeAIHelicopterParameter, LookAt_YawAccel) == 0x000070, "Member 'FEndBikeAIHelicopterParameter::LookAt_YawAccel' has a wrong offset!");
static_assert(offsetof(FEndBikeAIHelicopterParameter, LookAt_YawArrivalTime) == 0x000074, "Member 'FEndBikeAIHelicopterParameter::LookAt_YawArrivalTime' has a wrong offset!");
static_assert(offsetof(FEndBikeAIHelicopterParameter, GunFire_SpeedForFirstStep) == 0x000078, "Member 'FEndBikeAIHelicopterParameter::GunFire_SpeedForFirstStep' has a wrong offset!");
static_assert(offsetof(FEndBikeAIHelicopterParameter, GunFire_DistanceForFirstStep) == 0x00007C, "Member 'FEndBikeAIHelicopterParameter::GunFire_DistanceForFirstStep' has a wrong offset!");
static_assert(offsetof(FEndBikeAIHelicopterParameter, GunFire_MaxTimeOfFitstStep) == 0x000080, "Member 'FEndBikeAIHelicopterParameter::GunFire_MaxTimeOfFitstStep' has a wrong offset!");
static_assert(offsetof(FEndBikeAIHelicopterParameter, GunFire_CorrectionRate) == 0x000084, "Member 'FEndBikeAIHelicopterParameter::GunFire_CorrectionRate' has a wrong offset!");
static_assert(offsetof(FEndBikeAIHelicopterParameter, GunFire_YawLimit) == 0x000088, "Member 'FEndBikeAIHelicopterParameter::GunFire_YawLimit' has a wrong offset!");
static_assert(offsetof(FEndBikeAIHelicopterParameter, GunFire_Interval) == 0x00008C, "Member 'FEndBikeAIHelicopterParameter::GunFire_Interval' has a wrong offset!");
static_assert(offsetof(FEndBikeAIHelicopterParameter, Missile_InitDistance) == 0x000090, "Member 'FEndBikeAIHelicopterParameter::Missile_InitDistance' has a wrong offset!");
static_assert(offsetof(FEndBikeAIHelicopterParameter, Missile_InitKeepTime) == 0x000094, "Member 'FEndBikeAIHelicopterParameter::Missile_InitKeepTime' has a wrong offset!");
static_assert(offsetof(FEndBikeAIHelicopterParameter, Missile_InterpSpeed) == 0x000098, "Member 'FEndBikeAIHelicopterParameter::Missile_InterpSpeed' has a wrong offset!");
static_assert(offsetof(FEndBikeAIHelicopterParameter, bUseJumpAttack) == 0x00009C, "Member 'FEndBikeAIHelicopterParameter::bUseJumpAttack' has a wrong offset!");
static_assert(offsetof(FEndBikeAIHelicopterParameter, JumpArea_DistanceLv0) == 0x0000A0, "Member 'FEndBikeAIHelicopterParameter::JumpArea_DistanceLv0' has a wrong offset!");
static_assert(offsetof(FEndBikeAIHelicopterParameter, JumpArea_DistanceLv1) == 0x0000A4, "Member 'FEndBikeAIHelicopterParameter::JumpArea_DistanceLv1' has a wrong offset!");
static_assert(offsetof(FEndBikeAIHelicopterParameter, JumpArea_DistanceLv2) == 0x0000A8, "Member 'FEndBikeAIHelicopterParameter::JumpArea_DistanceLv2' has a wrong offset!");
static_assert(offsetof(FEndBikeAIHelicopterParameter, JumpArea_DistanceLv3) == 0x0000AC, "Member 'FEndBikeAIHelicopterParameter::JumpArea_DistanceLv3' has a wrong offset!");
static_assert(offsetof(FEndBikeAIHelicopterParameter, JumpArea_MachineGunRange) == 0x0000B0, "Member 'FEndBikeAIHelicopterParameter::JumpArea_MachineGunRange' has a wrong offset!");
static_assert(offsetof(FEndBikeAIHelicopterParameter, JumpArea_StartForwardOffset) == 0x0000B8, "Member 'FEndBikeAIHelicopterParameter::JumpArea_StartForwardOffset' has a wrong offset!");
static_assert(offsetof(FEndBikeAIHelicopterParameter, JumpArea_MoveBackwardStartTime) == 0x0000BC, "Member 'FEndBikeAIHelicopterParameter::JumpArea_MoveBackwardStartTime' has a wrong offset!");
static_assert(offsetof(FEndBikeAIHelicopterParameter, JumpArea_MoveBackwardDistance) == 0x0000C0, "Member 'FEndBikeAIHelicopterParameter::JumpArea_MoveBackwardDistance' has a wrong offset!");
static_assert(offsetof(FEndBikeAIHelicopterParameter, JumpArea_MoveBackwardTime) == 0x0000C4, "Member 'FEndBikeAIHelicopterParameter::JumpArea_MoveBackwardTime' has a wrong offset!");
static_assert(offsetof(FEndBikeAIHelicopterParameter, JumpArea_WaitTimeIfReceiveJumpAbility) == 0x0000C8, "Member 'FEndBikeAIHelicopterParameter::JumpArea_WaitTimeIfReceiveJumpAbility' has a wrong offset!");
static_assert(offsetof(FEndBikeAIHelicopterParameter, JumpArea_TalkTriggerSetID) == 0x0000CC, "Member 'FEndBikeAIHelicopterParameter::JumpArea_TalkTriggerSetID' has a wrong offset!");
static_assert(offsetof(FEndBikeAIHelicopterParameter, Obstacle_BeginAvoidLength) == 0x0000D4, "Member 'FEndBikeAIHelicopterParameter::Obstacle_BeginAvoidLength' has a wrong offset!");
static_assert(offsetof(FEndBikeAIHelicopterParameter, StopToExit_SlideInterpSpeed) == 0x0000D8, "Member 'FEndBikeAIHelicopterParameter::StopToExit_SlideInterpSpeed' has a wrong offset!");
static_assert(offsetof(FEndBikeAIHelicopterParameter, StopToExit_HeightSpeed) == 0x0000DC, "Member 'FEndBikeAIHelicopterParameter::StopToExit_HeightSpeed' has a wrong offset!");
static_assert(offsetof(FEndBikeAIHelicopterParameter, StopToExit_RelativeDistance) == 0x0000E0, "Member 'FEndBikeAIHelicopterParameter::StopToExit_RelativeDistance' has a wrong offset!");
static_assert(offsetof(FEndBikeAIHelicopterParameter, StopToExit_RemoveTimer) == 0x0000E4, "Member 'FEndBikeAIHelicopterParameter::StopToExit_RemoveTimer' has a wrong offset!");
static_assert(offsetof(FEndBikeAIHelicopterParameter, TransitionNoAttack_DamageValue) == 0x0000E8, "Member 'FEndBikeAIHelicopterParameter::TransitionNoAttack_DamageValue' has a wrong offset!");
static_assert(offsetof(FEndBikeAIHelicopterParameter, TransitionNoAttack_TimeValue) == 0x0000EC, "Member 'FEndBikeAIHelicopterParameter::TransitionNoAttack_TimeValue' has a wrong offset!");
static_assert(offsetof(FEndBikeAIHelicopterParameter, IsEventHelicopter) == 0x0000F0, "Member 'FEndBikeAIHelicopterParameter::IsEventHelicopter' has a wrong offset!");

// ScriptStruct EndGame.BikeAIHelicopterSpecialAttackParameter
// 0x0038 (0x0038 - 0x0000)
struct FBikeAIHelicopterSpecialAttackParameter final
{
public:
	bool                                          MoveOnNotAttackBarretTargetForPlayer;              // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                MoveOffsetOnNotAttackBarretEv;                     // 0x0004(0x000C)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SpecialAttackCameraLinear;                         // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SpecialAttackCameraTimer;                          // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SpecialAttackCameraOffset;                         // 0x0018(0x000C)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SpecialAttackCameraEyeOffset;                      // 0x0024(0x000C)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpecialAttackCameraFOV;                            // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpecialAttackDelay;                                // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBikeAIHelicopterSpecialAttackParameter) == 0x000004, "Wrong alignment on FBikeAIHelicopterSpecialAttackParameter");
static_assert(sizeof(FBikeAIHelicopterSpecialAttackParameter) == 0x000038, "Wrong size on FBikeAIHelicopterSpecialAttackParameter");
static_assert(offsetof(FBikeAIHelicopterSpecialAttackParameter, MoveOnNotAttackBarretTargetForPlayer) == 0x000000, "Member 'FBikeAIHelicopterSpecialAttackParameter::MoveOnNotAttackBarretTargetForPlayer' has a wrong offset!");
static_assert(offsetof(FBikeAIHelicopterSpecialAttackParameter, MoveOffsetOnNotAttackBarretEv) == 0x000004, "Member 'FBikeAIHelicopterSpecialAttackParameter::MoveOffsetOnNotAttackBarretEv' has a wrong offset!");
static_assert(offsetof(FBikeAIHelicopterSpecialAttackParameter, SpecialAttackCameraLinear) == 0x000010, "Member 'FBikeAIHelicopterSpecialAttackParameter::SpecialAttackCameraLinear' has a wrong offset!");
static_assert(offsetof(FBikeAIHelicopterSpecialAttackParameter, SpecialAttackCameraTimer) == 0x000014, "Member 'FBikeAIHelicopterSpecialAttackParameter::SpecialAttackCameraTimer' has a wrong offset!");
static_assert(offsetof(FBikeAIHelicopterSpecialAttackParameter, SpecialAttackCameraOffset) == 0x000018, "Member 'FBikeAIHelicopterSpecialAttackParameter::SpecialAttackCameraOffset' has a wrong offset!");
static_assert(offsetof(FBikeAIHelicopterSpecialAttackParameter, SpecialAttackCameraEyeOffset) == 0x000024, "Member 'FBikeAIHelicopterSpecialAttackParameter::SpecialAttackCameraEyeOffset' has a wrong offset!");
static_assert(offsetof(FBikeAIHelicopterSpecialAttackParameter, SpecialAttackCameraFOV) == 0x000030, "Member 'FBikeAIHelicopterSpecialAttackParameter::SpecialAttackCameraFOV' has a wrong offset!");
static_assert(offsetof(FBikeAIHelicopterSpecialAttackParameter, SpecialAttackDelay) == 0x000034, "Member 'FBikeAIHelicopterSpecialAttackParameter::SpecialAttackDelay' has a wrong offset!");

// ScriptStruct EndGame.EndBikeAIHelicopterMoveParam_MoveBackward
// 0x001C (0x001C - 0x0000)
struct FEndBikeAIHelicopterMoveParam_MoveBackward final
{
public:
	float                                         StartHeight;                                       // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartHeightArrivalTime;                            // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveBackwardStartTime;                             // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveBackwardTime;                                  // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveBackwardDistance;                              // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveBackwardHeight;                                // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveBackwardHeightArrivalTime;                     // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndBikeAIHelicopterMoveParam_MoveBackward) == 0x000004, "Wrong alignment on FEndBikeAIHelicopterMoveParam_MoveBackward");
static_assert(sizeof(FEndBikeAIHelicopterMoveParam_MoveBackward) == 0x00001C, "Wrong size on FEndBikeAIHelicopterMoveParam_MoveBackward");
static_assert(offsetof(FEndBikeAIHelicopterMoveParam_MoveBackward, StartHeight) == 0x000000, "Member 'FEndBikeAIHelicopterMoveParam_MoveBackward::StartHeight' has a wrong offset!");
static_assert(offsetof(FEndBikeAIHelicopterMoveParam_MoveBackward, StartHeightArrivalTime) == 0x000004, "Member 'FEndBikeAIHelicopterMoveParam_MoveBackward::StartHeightArrivalTime' has a wrong offset!");
static_assert(offsetof(FEndBikeAIHelicopterMoveParam_MoveBackward, MoveBackwardStartTime) == 0x000008, "Member 'FEndBikeAIHelicopterMoveParam_MoveBackward::MoveBackwardStartTime' has a wrong offset!");
static_assert(offsetof(FEndBikeAIHelicopterMoveParam_MoveBackward, MoveBackwardTime) == 0x00000C, "Member 'FEndBikeAIHelicopterMoveParam_MoveBackward::MoveBackwardTime' has a wrong offset!");
static_assert(offsetof(FEndBikeAIHelicopterMoveParam_MoveBackward, MoveBackwardDistance) == 0x000010, "Member 'FEndBikeAIHelicopterMoveParam_MoveBackward::MoveBackwardDistance' has a wrong offset!");
static_assert(offsetof(FEndBikeAIHelicopterMoveParam_MoveBackward, MoveBackwardHeight) == 0x000014, "Member 'FEndBikeAIHelicopterMoveParam_MoveBackward::MoveBackwardHeight' has a wrong offset!");
static_assert(offsetof(FEndBikeAIHelicopterMoveParam_MoveBackward, MoveBackwardHeightArrivalTime) == 0x000018, "Member 'FEndBikeAIHelicopterMoveParam_MoveBackward::MoveBackwardHeightArrivalTime' has a wrong offset!");

// ScriptStruct EndGame.EndBikeAIHelicopterMoveParam_MoveAround
// 0x0030 (0x0030 - 0x0000)
struct FEndBikeAIHelicopterMoveParam_MoveAround final
{
public:
	float                                         TargetOppositeSlide;                               // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SlideInterpSpeed;                                  // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RelativeForwardMileage;                            // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RelativeBackwardMileage;                           // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RelativeForwardMileageSecond;                      // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ForwardArrivalTime;                                // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SwitchYawSlide;                                    // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Height;                                            // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HeightOnForward;                                   // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HeightArrivalTime;                                 // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MoveBackwardRate;                                  // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MoveBackwardLimitCount;                            // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndBikeAIHelicopterMoveParam_MoveAround) == 0x000004, "Wrong alignment on FEndBikeAIHelicopterMoveParam_MoveAround");
static_assert(sizeof(FEndBikeAIHelicopterMoveParam_MoveAround) == 0x000030, "Wrong size on FEndBikeAIHelicopterMoveParam_MoveAround");
static_assert(offsetof(FEndBikeAIHelicopterMoveParam_MoveAround, TargetOppositeSlide) == 0x000000, "Member 'FEndBikeAIHelicopterMoveParam_MoveAround::TargetOppositeSlide' has a wrong offset!");
static_assert(offsetof(FEndBikeAIHelicopterMoveParam_MoveAround, SlideInterpSpeed) == 0x000004, "Member 'FEndBikeAIHelicopterMoveParam_MoveAround::SlideInterpSpeed' has a wrong offset!");
static_assert(offsetof(FEndBikeAIHelicopterMoveParam_MoveAround, RelativeForwardMileage) == 0x000008, "Member 'FEndBikeAIHelicopterMoveParam_MoveAround::RelativeForwardMileage' has a wrong offset!");
static_assert(offsetof(FEndBikeAIHelicopterMoveParam_MoveAround, RelativeBackwardMileage) == 0x00000C, "Member 'FEndBikeAIHelicopterMoveParam_MoveAround::RelativeBackwardMileage' has a wrong offset!");
static_assert(offsetof(FEndBikeAIHelicopterMoveParam_MoveAround, RelativeForwardMileageSecond) == 0x000010, "Member 'FEndBikeAIHelicopterMoveParam_MoveAround::RelativeForwardMileageSecond' has a wrong offset!");
static_assert(offsetof(FEndBikeAIHelicopterMoveParam_MoveAround, ForwardArrivalTime) == 0x000014, "Member 'FEndBikeAIHelicopterMoveParam_MoveAround::ForwardArrivalTime' has a wrong offset!");
static_assert(offsetof(FEndBikeAIHelicopterMoveParam_MoveAround, SwitchYawSlide) == 0x000018, "Member 'FEndBikeAIHelicopterMoveParam_MoveAround::SwitchYawSlide' has a wrong offset!");
static_assert(offsetof(FEndBikeAIHelicopterMoveParam_MoveAround, Height) == 0x00001C, "Member 'FEndBikeAIHelicopterMoveParam_MoveAround::Height' has a wrong offset!");
static_assert(offsetof(FEndBikeAIHelicopterMoveParam_MoveAround, HeightOnForward) == 0x000020, "Member 'FEndBikeAIHelicopterMoveParam_MoveAround::HeightOnForward' has a wrong offset!");
static_assert(offsetof(FEndBikeAIHelicopterMoveParam_MoveAround, HeightArrivalTime) == 0x000024, "Member 'FEndBikeAIHelicopterMoveParam_MoveAround::HeightArrivalTime' has a wrong offset!");
static_assert(offsetof(FEndBikeAIHelicopterMoveParam_MoveAround, MoveBackwardRate) == 0x000028, "Member 'FEndBikeAIHelicopterMoveParam_MoveAround::MoveBackwardRate' has a wrong offset!");
static_assert(offsetof(FEndBikeAIHelicopterMoveParam_MoveAround, MoveBackwardLimitCount) == 0x00002C, "Member 'FEndBikeAIHelicopterMoveParam_MoveAround::MoveBackwardLimitCount' has a wrong offset!");

// ScriptStruct EndGame.EndBikeAIHelicopterLockOnInfo
// 0x0010 (0x0010 - 0x0000)
struct FEndBikeAIHelicopterLockOnInfo final
{
public:
	class FName                                   DamageSourceID;                                    // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DelayTime;                                         // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Tracking;                                          // 0x000C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBikeAIHelicopterLockOnInfo) == 0x000004, "Wrong alignment on FEndBikeAIHelicopterLockOnInfo");
static_assert(sizeof(FEndBikeAIHelicopterLockOnInfo) == 0x000010, "Wrong size on FEndBikeAIHelicopterLockOnInfo");
static_assert(offsetof(FEndBikeAIHelicopterLockOnInfo, DamageSourceID) == 0x000000, "Member 'FEndBikeAIHelicopterLockOnInfo::DamageSourceID' has a wrong offset!");
static_assert(offsetof(FEndBikeAIHelicopterLockOnInfo, DelayTime) == 0x000008, "Member 'FEndBikeAIHelicopterLockOnInfo::DelayTime' has a wrong offset!");
static_assert(offsetof(FEndBikeAIHelicopterLockOnInfo, Tracking) == 0x00000C, "Member 'FEndBikeAIHelicopterLockOnInfo::Tracking' has a wrong offset!");

// ScriptStruct EndGame.EndBikeAIHelicopterLockOnInfoList
// 0x0010 (0x0010 - 0x0000)
struct FEndBikeAIHelicopterLockOnInfoList final
{
public:
	TArray<struct FEndBikeAIHelicopterLockOnInfo> InfoList;                                          // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndBikeAIHelicopterLockOnInfoList) == 0x000008, "Wrong alignment on FEndBikeAIHelicopterLockOnInfoList");
static_assert(sizeof(FEndBikeAIHelicopterLockOnInfoList) == 0x000010, "Wrong size on FEndBikeAIHelicopterLockOnInfoList");
static_assert(offsetof(FEndBikeAIHelicopterLockOnInfoList, InfoList) == 0x000000, "Member 'FEndBikeAIHelicopterLockOnInfoList::InfoList' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableBattleDamageSource
// 0x0338 (0x0340 - 0x0008)
struct FEndDataTableBattleDamageSource final : public FEndDataTableRowBase
{
public:
	uint8                                         DamageType;                                        // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         TypeParameter;                                     // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Power;                                             // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PowerBurst;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         PowerType;                                         // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RandomBreadth;                                     // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CriticalHitRate;                                   // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BPAttack;                                          // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BPAttackDamageCoefficient;                         // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LinkageAddCoefficient;                             // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         HitBonusType;                                      // 0x002C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         HitBonusParameter;                                 // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BurstHitBonusParameter;                            // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Property;                                          // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ShieldType;                                        // 0x0039(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ReflectType;                                       // 0x003A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3B[0x5];                                       // 0x003B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 Attribute_Array;                                   // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         DisableAttributeMateria;                           // 0x0050(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         HitTarget0;                                        // 0x0051(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         HitTarget1;                                        // 0x0052(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         HitTarget4;                                        // 0x0053(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         HitTarget2;                                        // 0x0054(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         HitTarget3;                                        // 0x0055(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         EnemyHitCategoryTypeBit;                           // 0x0056(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         HitDamageSourceTypeBit;                            // 0x0057(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         DisableHitBackground;                              // 0x0058(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         MoveOnTerrain;                                     // 0x0059(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         MoveOnTerrainOption;                               // 0x005A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5B[0x1];                                       // 0x005B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DestroyBreakableDamage;                            // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         SyncActionHitCountType;                            // 0x0060(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         HitDestroyType;                                    // 0x0061(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         HitDestroyTargetType;                              // 0x0062(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         HitCountTotal;                                     // 0x0063(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         HitCount;                                          // 0x0064(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HitInterval;                                       // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   HitGroupName;                                      // 0x006C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         CollisionType;                                     // 0x0074(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_75[0x3];                                       // 0x0075(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 CollisionParameter_Array;                          // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         CollisionFaceGuardScale;                           // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         CreateBasePos;                                     // 0x008C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8D[0x3];                                       // 0x008D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CreatePartName;                                    // 0x0090(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CreatePartOffsetX;                                 // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CreatePartOffsetY;                                 // 0x009C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CreatePartOffsetZ;                                 // 0x00A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CreatePartOffsetPitch;                             // 0x00A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CreatePartOffsetYaw;                               // 0x00A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CreatePartOffsetRoll;                              // 0x00AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CreateDelayTime;                                   // 0x00B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         TargetBase;                                        // 0x00B4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B5[0x3];                                       // 0x00B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 TargetName;                                        // 0x00B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DisableHitTime;                                    // 0x00C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         RecalcMoveDir;                                     // 0x00CC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CD[0x3];                                       // 0x00CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DisableHitOnlyTime;                                // 0x00D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         LifeTimeNotify;                                    // 0x00D4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D5[0x3];                                       // 0x00D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LifeTime;                                          // 0x00D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DestroyDelayTime;                                  // 0x00DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ProgressDirectionType;                             // 0x00E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ControlType;                                       // 0x00E1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E2[0x6];                                       // 0x00E2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 ControlParameter_Array;                            // 0x00E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         ControlFlag;                                       // 0x00F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FC[0x4];                                       // 0x00FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           ControlName_Array;                                 // 0x0100(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<uint8>                                 ExtControlType_Array;                              // 0x0110(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 ExtControlParameter_Array;                         // 0x0120(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           ExtControlName_Array;                              // 0x0130(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 ExtControlFlag_Array;                              // 0x0140(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         RotationType;                                      // 0x0150(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_151[0x7];                                      // 0x0151(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 ConditionCreateDamageSourceType_Array;             // 0x0158(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           ConditionCreateDamageSourceID_Array;               // 0x0168(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         Flag0;                                             // 0x0178(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         GuardBasePos;                                      // 0x017C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         CutValue;                                          // 0x017D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17E[0x2];                                      // 0x017E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   HitReactionID;                                     // 0x0180(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         HitReactionType;                                   // 0x0188(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_189[0x7];                                      // 0x0189(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 HitReactionParam_Array;                            // 0x0190(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   HitReactionParamID;                                // 0x01A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<float>                                 AerialHitReactionParam_Array;                      // 0x01A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         ChangeAddToNoneHitReaction;                        // 0x01B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         KnockbackDirType;                                  // 0x01B9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BA[0x2];                                      // 0x01BA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   KnockbackDirStringParam0;                          // 0x01BC(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   HitSlowID;                                         // 0x01C4(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         HitSlowExecutionType;                              // 0x01CC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CD[0x3];                                      // 0x01CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CharaSpecID;                                       // 0x01D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         PhysicsType;                                       // 0x01D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D9[0x3];                                      // 0x01D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CreatePhysicsObjectCharaSpecID;                    // 0x01DC(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         CreatePhysicsObjectBasePos;                        // 0x01E4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E5[0x3];                                      // 0x01E5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CreatePhysicsObjectPartName;                       // 0x01E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CreatePhysicsObjectDelay;                          // 0x01F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CreatePhysicsObjectForce;                          // 0x01F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CreatePhysicsObjectForceRandom;                    // 0x01F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         CreateEffectResourceCategory;                      // 0x01FC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1FD[0x3];                                      // 0x01FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CreateEffectResourceName;                          // 0x0200(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         CreateSoundResourceCategory;                       // 0x0208(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_209[0x3];                                      // 0x0209(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CreateSoundResourceName;                           // 0x020C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         PushCollisionEnable;                               // 0x0214(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_215[0x3];                                      // 0x0215(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PushCollisionRadiusReachTime;                      // 0x0218(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21C[0x4];                                      // 0x021C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 HitEffectResourceCategory_Array;                   // 0x0220(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           HitEffectResourceName_Array;                       // 0x0230(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<uint8>                                 HitEffectAttachCharacter_Array;                    // 0x0240(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<uint8>                                 HitEffectAttachHitLocation_Array;                  // 0x0250(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 HitEffectIntervalTime_Array;                       // 0x0260(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         HitSoundResourceCategory;                          // 0x0270(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_271[0x3];                                      // 0x0271(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   HitSoundResourceName;                              // 0x0274(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         GuardEffectResourceCategory;                       // 0x027C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_27D[0x3];                                      // 0x027D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   GuardEffectResourceName;                           // 0x0280(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         GuardSoundResourceCategory;                        // 0x0288(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_289[0x3];                                      // 0x0289(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   GuardSoundResourceName;                            // 0x028C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         BindEffectResourceCategory;                        // 0x0294(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_295[0x3];                                      // 0x0295(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   BindEffectResourceName;                            // 0x0298(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         BindEffectAttachSocket;                            // 0x02A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A1[0x3];                                      // 0x02A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BindEffectDelayTime;                               // 0x02A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BindEffectOffsetPitch;                             // 0x02A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BindEffectOffsetYaw;                               // 0x02AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BindEffectOffsetRoll;                              // 0x02B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         BindSoundResourceCategory;                         // 0x02B4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B5[0x3];                                      // 0x02B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   BindSoundResourceName;                             // 0x02B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 StatusChangeType_Array;                            // 0x02C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<uint8>                                 StatusChangeTime_Array;                            // 0x02D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   SpecialStatusChangeID;                             // 0x02E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         TakeDamageDirectionType;                           // 0x02E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2E9[0x3];                                      // 0x02E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         EnvironmenPhysImpulseRadius;                       // 0x02EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         EnvironmenPhysImpulseScale;                        // 0x02F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2F1[0x3];                                      // 0x02F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   HitCameraShakeDataID;                              // 0x02F4(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         HitCameraShakeExecutionType;                       // 0x02FC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2FD[0x3];                                      // 0x02FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   HitForceFeedbackFileName;                          // 0x0300(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         HitForceFeedbackExecutionType;                     // 0x0308(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_309[0x3];                                      // 0x0309(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   HitForceFeedbackSEFileName;                        // 0x030C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         GuardOwnerReactionType;                            // 0x0314(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_315[0x3];                                      // 0x0315(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 GuardOwnerReactionParam_Array;                     // 0x0318(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   GuardOwnerReactionStringParam0;                    // 0x0328(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         DisableLookAtCheck;                                // 0x0330(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         DisableMoveHitPosition;                            // 0x0331(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_332[0x2];                                      // 0x0332(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DangerRange;                                       // 0x0334(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         VibrationOnlyTheLeader;                            // 0x0338(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_339[0x7];                                      // 0x0339(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableBattleDamageSource) == 0x000008, "Wrong alignment on FEndDataTableBattleDamageSource");
static_assert(sizeof(FEndDataTableBattleDamageSource) == 0x000340, "Wrong size on FEndDataTableBattleDamageSource");
static_assert(offsetof(FEndDataTableBattleDamageSource, DamageType) == 0x000008, "Member 'FEndDataTableBattleDamageSource::DamageType' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, TypeParameter) == 0x000009, "Member 'FEndDataTableBattleDamageSource::TypeParameter' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, Power) == 0x00000C, "Member 'FEndDataTableBattleDamageSource::Power' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, PowerBurst) == 0x000010, "Member 'FEndDataTableBattleDamageSource::PowerBurst' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, PowerType) == 0x000014, "Member 'FEndDataTableBattleDamageSource::PowerType' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, RandomBreadth) == 0x000018, "Member 'FEndDataTableBattleDamageSource::RandomBreadth' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, CriticalHitRate) == 0x00001C, "Member 'FEndDataTableBattleDamageSource::CriticalHitRate' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, BPAttack) == 0x000020, "Member 'FEndDataTableBattleDamageSource::BPAttack' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, BPAttackDamageCoefficient) == 0x000024, "Member 'FEndDataTableBattleDamageSource::BPAttackDamageCoefficient' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, LinkageAddCoefficient) == 0x000028, "Member 'FEndDataTableBattleDamageSource::LinkageAddCoefficient' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, HitBonusType) == 0x00002C, "Member 'FEndDataTableBattleDamageSource::HitBonusType' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, HitBonusParameter) == 0x000030, "Member 'FEndDataTableBattleDamageSource::HitBonusParameter' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, BurstHitBonusParameter) == 0x000034, "Member 'FEndDataTableBattleDamageSource::BurstHitBonusParameter' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, Property) == 0x000038, "Member 'FEndDataTableBattleDamageSource::Property' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, ShieldType) == 0x000039, "Member 'FEndDataTableBattleDamageSource::ShieldType' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, ReflectType) == 0x00003A, "Member 'FEndDataTableBattleDamageSource::ReflectType' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, Attribute_Array) == 0x000040, "Member 'FEndDataTableBattleDamageSource::Attribute_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, DisableAttributeMateria) == 0x000050, "Member 'FEndDataTableBattleDamageSource::DisableAttributeMateria' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, HitTarget0) == 0x000051, "Member 'FEndDataTableBattleDamageSource::HitTarget0' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, HitTarget1) == 0x000052, "Member 'FEndDataTableBattleDamageSource::HitTarget1' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, HitTarget4) == 0x000053, "Member 'FEndDataTableBattleDamageSource::HitTarget4' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, HitTarget2) == 0x000054, "Member 'FEndDataTableBattleDamageSource::HitTarget2' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, HitTarget3) == 0x000055, "Member 'FEndDataTableBattleDamageSource::HitTarget3' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, EnemyHitCategoryTypeBit) == 0x000056, "Member 'FEndDataTableBattleDamageSource::EnemyHitCategoryTypeBit' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, HitDamageSourceTypeBit) == 0x000057, "Member 'FEndDataTableBattleDamageSource::HitDamageSourceTypeBit' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, DisableHitBackground) == 0x000058, "Member 'FEndDataTableBattleDamageSource::DisableHitBackground' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, MoveOnTerrain) == 0x000059, "Member 'FEndDataTableBattleDamageSource::MoveOnTerrain' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, MoveOnTerrainOption) == 0x00005A, "Member 'FEndDataTableBattleDamageSource::MoveOnTerrainOption' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, DestroyBreakableDamage) == 0x00005C, "Member 'FEndDataTableBattleDamageSource::DestroyBreakableDamage' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, SyncActionHitCountType) == 0x000060, "Member 'FEndDataTableBattleDamageSource::SyncActionHitCountType' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, HitDestroyType) == 0x000061, "Member 'FEndDataTableBattleDamageSource::HitDestroyType' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, HitDestroyTargetType) == 0x000062, "Member 'FEndDataTableBattleDamageSource::HitDestroyTargetType' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, HitCountTotal) == 0x000063, "Member 'FEndDataTableBattleDamageSource::HitCountTotal' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, HitCount) == 0x000064, "Member 'FEndDataTableBattleDamageSource::HitCount' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, HitInterval) == 0x000068, "Member 'FEndDataTableBattleDamageSource::HitInterval' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, HitGroupName) == 0x00006C, "Member 'FEndDataTableBattleDamageSource::HitGroupName' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, CollisionType) == 0x000074, "Member 'FEndDataTableBattleDamageSource::CollisionType' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, CollisionParameter_Array) == 0x000078, "Member 'FEndDataTableBattleDamageSource::CollisionParameter_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, CollisionFaceGuardScale) == 0x000088, "Member 'FEndDataTableBattleDamageSource::CollisionFaceGuardScale' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, CreateBasePos) == 0x00008C, "Member 'FEndDataTableBattleDamageSource::CreateBasePos' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, CreatePartName) == 0x000090, "Member 'FEndDataTableBattleDamageSource::CreatePartName' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, CreatePartOffsetX) == 0x000098, "Member 'FEndDataTableBattleDamageSource::CreatePartOffsetX' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, CreatePartOffsetY) == 0x00009C, "Member 'FEndDataTableBattleDamageSource::CreatePartOffsetY' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, CreatePartOffsetZ) == 0x0000A0, "Member 'FEndDataTableBattleDamageSource::CreatePartOffsetZ' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, CreatePartOffsetPitch) == 0x0000A4, "Member 'FEndDataTableBattleDamageSource::CreatePartOffsetPitch' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, CreatePartOffsetYaw) == 0x0000A8, "Member 'FEndDataTableBattleDamageSource::CreatePartOffsetYaw' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, CreatePartOffsetRoll) == 0x0000AC, "Member 'FEndDataTableBattleDamageSource::CreatePartOffsetRoll' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, CreateDelayTime) == 0x0000B0, "Member 'FEndDataTableBattleDamageSource::CreateDelayTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, TargetBase) == 0x0000B4, "Member 'FEndDataTableBattleDamageSource::TargetBase' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, TargetName) == 0x0000B8, "Member 'FEndDataTableBattleDamageSource::TargetName' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, DisableHitTime) == 0x0000C8, "Member 'FEndDataTableBattleDamageSource::DisableHitTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, RecalcMoveDir) == 0x0000CC, "Member 'FEndDataTableBattleDamageSource::RecalcMoveDir' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, DisableHitOnlyTime) == 0x0000D0, "Member 'FEndDataTableBattleDamageSource::DisableHitOnlyTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, LifeTimeNotify) == 0x0000D4, "Member 'FEndDataTableBattleDamageSource::LifeTimeNotify' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, LifeTime) == 0x0000D8, "Member 'FEndDataTableBattleDamageSource::LifeTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, DestroyDelayTime) == 0x0000DC, "Member 'FEndDataTableBattleDamageSource::DestroyDelayTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, ProgressDirectionType) == 0x0000E0, "Member 'FEndDataTableBattleDamageSource::ProgressDirectionType' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, ControlType) == 0x0000E1, "Member 'FEndDataTableBattleDamageSource::ControlType' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, ControlParameter_Array) == 0x0000E8, "Member 'FEndDataTableBattleDamageSource::ControlParameter_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, ControlFlag) == 0x0000F8, "Member 'FEndDataTableBattleDamageSource::ControlFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, ControlName_Array) == 0x000100, "Member 'FEndDataTableBattleDamageSource::ControlName_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, ExtControlType_Array) == 0x000110, "Member 'FEndDataTableBattleDamageSource::ExtControlType_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, ExtControlParameter_Array) == 0x000120, "Member 'FEndDataTableBattleDamageSource::ExtControlParameter_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, ExtControlName_Array) == 0x000130, "Member 'FEndDataTableBattleDamageSource::ExtControlName_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, ExtControlFlag_Array) == 0x000140, "Member 'FEndDataTableBattleDamageSource::ExtControlFlag_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, RotationType) == 0x000150, "Member 'FEndDataTableBattleDamageSource::RotationType' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, ConditionCreateDamageSourceType_Array) == 0x000158, "Member 'FEndDataTableBattleDamageSource::ConditionCreateDamageSourceType_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, ConditionCreateDamageSourceID_Array) == 0x000168, "Member 'FEndDataTableBattleDamageSource::ConditionCreateDamageSourceID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, Flag0) == 0x000178, "Member 'FEndDataTableBattleDamageSource::Flag0' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, GuardBasePos) == 0x00017C, "Member 'FEndDataTableBattleDamageSource::GuardBasePos' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, CutValue) == 0x00017D, "Member 'FEndDataTableBattleDamageSource::CutValue' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, HitReactionID) == 0x000180, "Member 'FEndDataTableBattleDamageSource::HitReactionID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, HitReactionType) == 0x000188, "Member 'FEndDataTableBattleDamageSource::HitReactionType' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, HitReactionParam_Array) == 0x000190, "Member 'FEndDataTableBattleDamageSource::HitReactionParam_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, HitReactionParamID) == 0x0001A0, "Member 'FEndDataTableBattleDamageSource::HitReactionParamID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, AerialHitReactionParam_Array) == 0x0001A8, "Member 'FEndDataTableBattleDamageSource::AerialHitReactionParam_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, ChangeAddToNoneHitReaction) == 0x0001B8, "Member 'FEndDataTableBattleDamageSource::ChangeAddToNoneHitReaction' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, KnockbackDirType) == 0x0001B9, "Member 'FEndDataTableBattleDamageSource::KnockbackDirType' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, KnockbackDirStringParam0) == 0x0001BC, "Member 'FEndDataTableBattleDamageSource::KnockbackDirStringParam0' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, HitSlowID) == 0x0001C4, "Member 'FEndDataTableBattleDamageSource::HitSlowID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, HitSlowExecutionType) == 0x0001CC, "Member 'FEndDataTableBattleDamageSource::HitSlowExecutionType' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, CharaSpecID) == 0x0001D0, "Member 'FEndDataTableBattleDamageSource::CharaSpecID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, PhysicsType) == 0x0001D8, "Member 'FEndDataTableBattleDamageSource::PhysicsType' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, CreatePhysicsObjectCharaSpecID) == 0x0001DC, "Member 'FEndDataTableBattleDamageSource::CreatePhysicsObjectCharaSpecID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, CreatePhysicsObjectBasePos) == 0x0001E4, "Member 'FEndDataTableBattleDamageSource::CreatePhysicsObjectBasePos' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, CreatePhysicsObjectPartName) == 0x0001E8, "Member 'FEndDataTableBattleDamageSource::CreatePhysicsObjectPartName' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, CreatePhysicsObjectDelay) == 0x0001F0, "Member 'FEndDataTableBattleDamageSource::CreatePhysicsObjectDelay' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, CreatePhysicsObjectForce) == 0x0001F4, "Member 'FEndDataTableBattleDamageSource::CreatePhysicsObjectForce' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, CreatePhysicsObjectForceRandom) == 0x0001F8, "Member 'FEndDataTableBattleDamageSource::CreatePhysicsObjectForceRandom' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, CreateEffectResourceCategory) == 0x0001FC, "Member 'FEndDataTableBattleDamageSource::CreateEffectResourceCategory' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, CreateEffectResourceName) == 0x000200, "Member 'FEndDataTableBattleDamageSource::CreateEffectResourceName' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, CreateSoundResourceCategory) == 0x000208, "Member 'FEndDataTableBattleDamageSource::CreateSoundResourceCategory' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, CreateSoundResourceName) == 0x00020C, "Member 'FEndDataTableBattleDamageSource::CreateSoundResourceName' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, PushCollisionEnable) == 0x000214, "Member 'FEndDataTableBattleDamageSource::PushCollisionEnable' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, PushCollisionRadiusReachTime) == 0x000218, "Member 'FEndDataTableBattleDamageSource::PushCollisionRadiusReachTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, HitEffectResourceCategory_Array) == 0x000220, "Member 'FEndDataTableBattleDamageSource::HitEffectResourceCategory_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, HitEffectResourceName_Array) == 0x000230, "Member 'FEndDataTableBattleDamageSource::HitEffectResourceName_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, HitEffectAttachCharacter_Array) == 0x000240, "Member 'FEndDataTableBattleDamageSource::HitEffectAttachCharacter_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, HitEffectAttachHitLocation_Array) == 0x000250, "Member 'FEndDataTableBattleDamageSource::HitEffectAttachHitLocation_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, HitEffectIntervalTime_Array) == 0x000260, "Member 'FEndDataTableBattleDamageSource::HitEffectIntervalTime_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, HitSoundResourceCategory) == 0x000270, "Member 'FEndDataTableBattleDamageSource::HitSoundResourceCategory' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, HitSoundResourceName) == 0x000274, "Member 'FEndDataTableBattleDamageSource::HitSoundResourceName' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, GuardEffectResourceCategory) == 0x00027C, "Member 'FEndDataTableBattleDamageSource::GuardEffectResourceCategory' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, GuardEffectResourceName) == 0x000280, "Member 'FEndDataTableBattleDamageSource::GuardEffectResourceName' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, GuardSoundResourceCategory) == 0x000288, "Member 'FEndDataTableBattleDamageSource::GuardSoundResourceCategory' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, GuardSoundResourceName) == 0x00028C, "Member 'FEndDataTableBattleDamageSource::GuardSoundResourceName' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, BindEffectResourceCategory) == 0x000294, "Member 'FEndDataTableBattleDamageSource::BindEffectResourceCategory' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, BindEffectResourceName) == 0x000298, "Member 'FEndDataTableBattleDamageSource::BindEffectResourceName' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, BindEffectAttachSocket) == 0x0002A0, "Member 'FEndDataTableBattleDamageSource::BindEffectAttachSocket' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, BindEffectDelayTime) == 0x0002A4, "Member 'FEndDataTableBattleDamageSource::BindEffectDelayTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, BindEffectOffsetPitch) == 0x0002A8, "Member 'FEndDataTableBattleDamageSource::BindEffectOffsetPitch' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, BindEffectOffsetYaw) == 0x0002AC, "Member 'FEndDataTableBattleDamageSource::BindEffectOffsetYaw' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, BindEffectOffsetRoll) == 0x0002B0, "Member 'FEndDataTableBattleDamageSource::BindEffectOffsetRoll' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, BindSoundResourceCategory) == 0x0002B4, "Member 'FEndDataTableBattleDamageSource::BindSoundResourceCategory' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, BindSoundResourceName) == 0x0002B8, "Member 'FEndDataTableBattleDamageSource::BindSoundResourceName' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, StatusChangeType_Array) == 0x0002C0, "Member 'FEndDataTableBattleDamageSource::StatusChangeType_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, StatusChangeTime_Array) == 0x0002D0, "Member 'FEndDataTableBattleDamageSource::StatusChangeTime_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, SpecialStatusChangeID) == 0x0002E0, "Member 'FEndDataTableBattleDamageSource::SpecialStatusChangeID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, TakeDamageDirectionType) == 0x0002E8, "Member 'FEndDataTableBattleDamageSource::TakeDamageDirectionType' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, EnvironmenPhysImpulseRadius) == 0x0002EC, "Member 'FEndDataTableBattleDamageSource::EnvironmenPhysImpulseRadius' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, EnvironmenPhysImpulseScale) == 0x0002F0, "Member 'FEndDataTableBattleDamageSource::EnvironmenPhysImpulseScale' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, HitCameraShakeDataID) == 0x0002F4, "Member 'FEndDataTableBattleDamageSource::HitCameraShakeDataID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, HitCameraShakeExecutionType) == 0x0002FC, "Member 'FEndDataTableBattleDamageSource::HitCameraShakeExecutionType' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, HitForceFeedbackFileName) == 0x000300, "Member 'FEndDataTableBattleDamageSource::HitForceFeedbackFileName' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, HitForceFeedbackExecutionType) == 0x000308, "Member 'FEndDataTableBattleDamageSource::HitForceFeedbackExecutionType' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, HitForceFeedbackSEFileName) == 0x00030C, "Member 'FEndDataTableBattleDamageSource::HitForceFeedbackSEFileName' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, GuardOwnerReactionType) == 0x000314, "Member 'FEndDataTableBattleDamageSource::GuardOwnerReactionType' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, GuardOwnerReactionParam_Array) == 0x000318, "Member 'FEndDataTableBattleDamageSource::GuardOwnerReactionParam_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, GuardOwnerReactionStringParam0) == 0x000328, "Member 'FEndDataTableBattleDamageSource::GuardOwnerReactionStringParam0' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, DisableLookAtCheck) == 0x000330, "Member 'FEndDataTableBattleDamageSource::DisableLookAtCheck' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, DisableMoveHitPosition) == 0x000331, "Member 'FEndDataTableBattleDamageSource::DisableMoveHitPosition' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, DangerRange) == 0x000334, "Member 'FEndDataTableBattleDamageSource::DangerRange' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSource, VibrationOnlyTheLeader) == 0x000338, "Member 'FEndDataTableBattleDamageSource::VibrationOnlyTheLeader' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableOverrideWalkType
// 0x0010 (0x0018 - 0x0008)
struct FEndDataTableOverrideWalkType final : public FEndDataTableRowBase
{
public:
	TArray<class FString>                         OverrideWalkType_Array;                            // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableOverrideWalkType) == 0x000008, "Wrong alignment on FEndDataTableOverrideWalkType");
static_assert(sizeof(FEndDataTableOverrideWalkType) == 0x000018, "Wrong size on FEndDataTableOverrideWalkType");
static_assert(offsetof(FEndDataTableOverrideWalkType, OverrideWalkType_Array) == 0x000008, "Member 'FEndDataTableOverrideWalkType::OverrideWalkType_Array' has a wrong offset!");

// ScriptStruct EndGame.BikeLoccheStateTriggerCondition
// 0x0018 (0x0018 - 0x0000)
struct FBikeLoccheStateTriggerCondition final
{
public:
	float                                         Time_Before;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StateTriggerName;                                  // 0x0004(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PlannerEventID;                                    // 0x000C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Time_After;                                        // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBikeLoccheStateTriggerCondition) == 0x000004, "Wrong alignment on FBikeLoccheStateTriggerCondition");
static_assert(sizeof(FBikeLoccheStateTriggerCondition) == 0x000018, "Wrong size on FBikeLoccheStateTriggerCondition");
static_assert(offsetof(FBikeLoccheStateTriggerCondition, Time_Before) == 0x000000, "Member 'FBikeLoccheStateTriggerCondition::Time_Before' has a wrong offset!");
static_assert(offsetof(FBikeLoccheStateTriggerCondition, StateTriggerName) == 0x000004, "Member 'FBikeLoccheStateTriggerCondition::StateTriggerName' has a wrong offset!");
static_assert(offsetof(FBikeLoccheStateTriggerCondition, PlannerEventID) == 0x00000C, "Member 'FBikeLoccheStateTriggerCondition::PlannerEventID' has a wrong offset!");
static_assert(offsetof(FBikeLoccheStateTriggerCondition, Time_After) == 0x000014, "Member 'FBikeLoccheStateTriggerCondition::Time_After' has a wrong offset!");

// ScriptStruct EndGame.BikeCutterStormAbilitySetting
// 0x0040 (0x0040 - 0x0000)
struct FBikeCutterStormAbilitySetting final
{
public:
	float                                         LoopTime;                                          // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFloatInterval>                 AttackTimings;                                     // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   BeginMotion;                                       // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EndMotion;                                         // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AddMotion_Attack;                                  // 0x0028(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveRange;                                         // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          FirstMoveDirectionSign;                            // 0x0034(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MoveSpeed;                                         // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBikeCutterStormAbilitySetting) == 0x000008, "Wrong alignment on FBikeCutterStormAbilitySetting");
static_assert(sizeof(FBikeCutterStormAbilitySetting) == 0x000040, "Wrong size on FBikeCutterStormAbilitySetting");
static_assert(offsetof(FBikeCutterStormAbilitySetting, LoopTime) == 0x000000, "Member 'FBikeCutterStormAbilitySetting::LoopTime' has a wrong offset!");
static_assert(offsetof(FBikeCutterStormAbilitySetting, AttackTimings) == 0x000008, "Member 'FBikeCutterStormAbilitySetting::AttackTimings' has a wrong offset!");
static_assert(offsetof(FBikeCutterStormAbilitySetting, BeginMotion) == 0x000018, "Member 'FBikeCutterStormAbilitySetting::BeginMotion' has a wrong offset!");
static_assert(offsetof(FBikeCutterStormAbilitySetting, EndMotion) == 0x000020, "Member 'FBikeCutterStormAbilitySetting::EndMotion' has a wrong offset!");
static_assert(offsetof(FBikeCutterStormAbilitySetting, AddMotion_Attack) == 0x000028, "Member 'FBikeCutterStormAbilitySetting::AddMotion_Attack' has a wrong offset!");
static_assert(offsetof(FBikeCutterStormAbilitySetting, MoveRange) == 0x000030, "Member 'FBikeCutterStormAbilitySetting::MoveRange' has a wrong offset!");
static_assert(offsetof(FBikeCutterStormAbilitySetting, FirstMoveDirectionSign) == 0x000034, "Member 'FBikeCutterStormAbilitySetting::FirstMoveDirectionSign' has a wrong offset!");
static_assert(offsetof(FBikeCutterStormAbilitySetting, MoveSpeed) == 0x000038, "Member 'FBikeCutterStormAbilitySetting::MoveSpeed' has a wrong offset!");

// ScriptStruct EndGame.BikeBarrierPartsSetting
// 0x0010 (0x0010 - 0x0000)
struct FBikeBarrierPartsSetting final
{
public:
	uint8                                         BarrierCount;                                      // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         KeepTime;                                          // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Interval;                                          // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsNotContinuous;                                   // 0x000C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBikeBarrierPartsSetting) == 0x000004, "Wrong alignment on FBikeBarrierPartsSetting");
static_assert(sizeof(FBikeBarrierPartsSetting) == 0x000010, "Wrong size on FBikeBarrierPartsSetting");
static_assert(offsetof(FBikeBarrierPartsSetting, BarrierCount) == 0x000000, "Member 'FBikeBarrierPartsSetting::BarrierCount' has a wrong offset!");
static_assert(offsetof(FBikeBarrierPartsSetting, KeepTime) == 0x000004, "Member 'FBikeBarrierPartsSetting::KeepTime' has a wrong offset!");
static_assert(offsetof(FBikeBarrierPartsSetting, Interval) == 0x000008, "Member 'FBikeBarrierPartsSetting::Interval' has a wrong offset!");
static_assert(offsetof(FBikeBarrierPartsSetting, IsNotContinuous) == 0x00000C, "Member 'FBikeBarrierPartsSetting::IsNotContinuous' has a wrong offset!");

// ScriptStruct EndGame.BikeCannonAbilitySetting
// 0x002C (0x002C - 0x0000)
struct FBikeCannonAbilitySetting final
{
public:
	float                                         LoopTime;                                          // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WaitTime_First;                                    // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         FireNum;                                           // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         IntervalTime;                                      // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AddMotion_Right;                                   // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AddMotion_Left;                                    // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20[0xC];                                       // 0x0020(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBikeCannonAbilitySetting) == 0x000004, "Wrong alignment on FBikeCannonAbilitySetting");
static_assert(sizeof(FBikeCannonAbilitySetting) == 0x00002C, "Wrong size on FBikeCannonAbilitySetting");
static_assert(offsetof(FBikeCannonAbilitySetting, LoopTime) == 0x000000, "Member 'FBikeCannonAbilitySetting::LoopTime' has a wrong offset!");
static_assert(offsetof(FBikeCannonAbilitySetting, WaitTime_First) == 0x000004, "Member 'FBikeCannonAbilitySetting::WaitTime_First' has a wrong offset!");
static_assert(offsetof(FBikeCannonAbilitySetting, FireNum) == 0x000008, "Member 'FBikeCannonAbilitySetting::FireNum' has a wrong offset!");
static_assert(offsetof(FBikeCannonAbilitySetting, IntervalTime) == 0x00000C, "Member 'FBikeCannonAbilitySetting::IntervalTime' has a wrong offset!");
static_assert(offsetof(FBikeCannonAbilitySetting, AddMotion_Right) == 0x000010, "Member 'FBikeCannonAbilitySetting::AddMotion_Right' has a wrong offset!");
static_assert(offsetof(FBikeCannonAbilitySetting, AddMotion_Left) == 0x000018, "Member 'FBikeCannonAbilitySetting::AddMotion_Left' has a wrong offset!");

// ScriptStruct EndGame.BikeBreakablePartInfo
// 0x00E0 (0x00E0 - 0x0000)
struct FBikeBreakablePartInfo final
{
public:
	TArray<class FName>                           BoneNames;                                         // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   TargetBoneName;                                    // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MenuBoneName;                                      // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MeshID;                                            // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StateLabel_Broken;                                 // 0x0028(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StateLabel_Repaired;                               // 0x0030(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BarrierMeshID;                                     // 0x0038(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StateLabel_BarrierOff;                             // 0x0040(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StateLabel_BarrierOn;                              // 0x0048(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BreakMotionID;                                     // 0x0050(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HitPoint;                                          // 0x0058(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBikeEffectInfo                        Effect_Break;                                      // 0x005C(0x0014)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBikeEffectInfo                        Effect_Broken;                                     // 0x0070(0x0014)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBikeEffectInfo                        Effect_Repair;                                     // 0x0084(0x0014)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBikeEffectInfo                        Effect_Barrier;                                    // 0x0098(0x0014)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_AC[0x34];                                      // 0x00AC(0x0034)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBikeBreakablePartInfo) == 0x000008, "Wrong alignment on FBikeBreakablePartInfo");
static_assert(sizeof(FBikeBreakablePartInfo) == 0x0000E0, "Wrong size on FBikeBreakablePartInfo");
static_assert(offsetof(FBikeBreakablePartInfo, BoneNames) == 0x000000, "Member 'FBikeBreakablePartInfo::BoneNames' has a wrong offset!");
static_assert(offsetof(FBikeBreakablePartInfo, TargetBoneName) == 0x000010, "Member 'FBikeBreakablePartInfo::TargetBoneName' has a wrong offset!");
static_assert(offsetof(FBikeBreakablePartInfo, MenuBoneName) == 0x000018, "Member 'FBikeBreakablePartInfo::MenuBoneName' has a wrong offset!");
static_assert(offsetof(FBikeBreakablePartInfo, MeshID) == 0x000020, "Member 'FBikeBreakablePartInfo::MeshID' has a wrong offset!");
static_assert(offsetof(FBikeBreakablePartInfo, StateLabel_Broken) == 0x000028, "Member 'FBikeBreakablePartInfo::StateLabel_Broken' has a wrong offset!");
static_assert(offsetof(FBikeBreakablePartInfo, StateLabel_Repaired) == 0x000030, "Member 'FBikeBreakablePartInfo::StateLabel_Repaired' has a wrong offset!");
static_assert(offsetof(FBikeBreakablePartInfo, BarrierMeshID) == 0x000038, "Member 'FBikeBreakablePartInfo::BarrierMeshID' has a wrong offset!");
static_assert(offsetof(FBikeBreakablePartInfo, StateLabel_BarrierOff) == 0x000040, "Member 'FBikeBreakablePartInfo::StateLabel_BarrierOff' has a wrong offset!");
static_assert(offsetof(FBikeBreakablePartInfo, StateLabel_BarrierOn) == 0x000048, "Member 'FBikeBreakablePartInfo::StateLabel_BarrierOn' has a wrong offset!");
static_assert(offsetof(FBikeBreakablePartInfo, BreakMotionID) == 0x000050, "Member 'FBikeBreakablePartInfo::BreakMotionID' has a wrong offset!");
static_assert(offsetof(FBikeBreakablePartInfo, HitPoint) == 0x000058, "Member 'FBikeBreakablePartInfo::HitPoint' has a wrong offset!");
static_assert(offsetof(FBikeBreakablePartInfo, Effect_Break) == 0x00005C, "Member 'FBikeBreakablePartInfo::Effect_Break' has a wrong offset!");
static_assert(offsetof(FBikeBreakablePartInfo, Effect_Broken) == 0x000070, "Member 'FBikeBreakablePartInfo::Effect_Broken' has a wrong offset!");
static_assert(offsetof(FBikeBreakablePartInfo, Effect_Repair) == 0x000084, "Member 'FBikeBreakablePartInfo::Effect_Repair' has a wrong offset!");
static_assert(offsetof(FBikeBreakablePartInfo, Effect_Barrier) == 0x000098, "Member 'FBikeBreakablePartInfo::Effect_Barrier' has a wrong offset!");

// ScriptStruct EndGame.EndBikeAISoldier3rdAbilitySet
// 0x0010 (0x0010 - 0x0000)
struct FEndBikeAISoldier3rdAbilitySet final
{
public:
	class FName                                   AbilitySetNear;                                    // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AbilitySetFar;                                     // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndBikeAISoldier3rdAbilitySet) == 0x000004, "Wrong alignment on FEndBikeAISoldier3rdAbilitySet");
static_assert(sizeof(FEndBikeAISoldier3rdAbilitySet) == 0x000010, "Wrong size on FEndBikeAISoldier3rdAbilitySet");
static_assert(offsetof(FEndBikeAISoldier3rdAbilitySet, AbilitySetNear) == 0x000000, "Member 'FEndBikeAISoldier3rdAbilitySet::AbilitySetNear' has a wrong offset!");
static_assert(offsetof(FEndBikeAISoldier3rdAbilitySet, AbilitySetFar) == 0x000008, "Member 'FEndBikeAISoldier3rdAbilitySet::AbilitySetFar' has a wrong offset!");

// ScriptStruct EndGame.EndBikeAISoldier3rdParameter
// 0x0078 (0x0078 - 0x0000)
struct FEndBikeAISoldier3rdParameter final
{
public:
	float                                         General_RunParallelForwardRange;                   // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           MoveToSide_ConditionalAbilityName;                 // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         MoveToSide_BaseSlide;                              // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveToSide_MaxRoadWidth;                           // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveToSide_InvalidJumpDistance;                    // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveToSide_MaxTime;                                // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveToSide_CancelFrontDistance;                    // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MiddleRangeAtk_Interval;                           // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MiddleRangeAtk_SelectRateWhenOnlySelf;             // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MiddleRangeAtk_SelectRateWhenBothSide;             // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MiddleRangeAtk_EnableRepeatNum;                    // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MiddleRangeAtk_DamageAmount;                       // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFloatInterval                         AIMove_SwitchToAllyInterval;                       // 0x0040(0x0008)(Edit, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AIMove_RateOfTargetToAlly;                         // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFloatInterval                         AIMove_SwitchToPlayerInterval;                     // 0x004C(0x0008)(Edit, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AIMove_LimitDistanceForTargetPlayer;               // 0x0054(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IdleMove_MinSlideDistance;                         // 0x0058(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IdleMove_MinSlideSpeed;                            // 0x005C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HitPoint_ToPhase;                                  // 0x0060(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           HelicopterMissileAbilities;                        // 0x0068(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndBikeAISoldier3rdParameter) == 0x000008, "Wrong alignment on FEndBikeAISoldier3rdParameter");
static_assert(sizeof(FEndBikeAISoldier3rdParameter) == 0x000078, "Wrong size on FEndBikeAISoldier3rdParameter");
static_assert(offsetof(FEndBikeAISoldier3rdParameter, General_RunParallelForwardRange) == 0x000000, "Member 'FEndBikeAISoldier3rdParameter::General_RunParallelForwardRange' has a wrong offset!");
static_assert(offsetof(FEndBikeAISoldier3rdParameter, MoveToSide_ConditionalAbilityName) == 0x000008, "Member 'FEndBikeAISoldier3rdParameter::MoveToSide_ConditionalAbilityName' has a wrong offset!");
static_assert(offsetof(FEndBikeAISoldier3rdParameter, MoveToSide_BaseSlide) == 0x000018, "Member 'FEndBikeAISoldier3rdParameter::MoveToSide_BaseSlide' has a wrong offset!");
static_assert(offsetof(FEndBikeAISoldier3rdParameter, MoveToSide_MaxRoadWidth) == 0x00001C, "Member 'FEndBikeAISoldier3rdParameter::MoveToSide_MaxRoadWidth' has a wrong offset!");
static_assert(offsetof(FEndBikeAISoldier3rdParameter, MoveToSide_InvalidJumpDistance) == 0x000020, "Member 'FEndBikeAISoldier3rdParameter::MoveToSide_InvalidJumpDistance' has a wrong offset!");
static_assert(offsetof(FEndBikeAISoldier3rdParameter, MoveToSide_MaxTime) == 0x000024, "Member 'FEndBikeAISoldier3rdParameter::MoveToSide_MaxTime' has a wrong offset!");
static_assert(offsetof(FEndBikeAISoldier3rdParameter, MoveToSide_CancelFrontDistance) == 0x000028, "Member 'FEndBikeAISoldier3rdParameter::MoveToSide_CancelFrontDistance' has a wrong offset!");
static_assert(offsetof(FEndBikeAISoldier3rdParameter, MiddleRangeAtk_Interval) == 0x00002C, "Member 'FEndBikeAISoldier3rdParameter::MiddleRangeAtk_Interval' has a wrong offset!");
static_assert(offsetof(FEndBikeAISoldier3rdParameter, MiddleRangeAtk_SelectRateWhenOnlySelf) == 0x000030, "Member 'FEndBikeAISoldier3rdParameter::MiddleRangeAtk_SelectRateWhenOnlySelf' has a wrong offset!");
static_assert(offsetof(FEndBikeAISoldier3rdParameter, MiddleRangeAtk_SelectRateWhenBothSide) == 0x000034, "Member 'FEndBikeAISoldier3rdParameter::MiddleRangeAtk_SelectRateWhenBothSide' has a wrong offset!");
static_assert(offsetof(FEndBikeAISoldier3rdParameter, MiddleRangeAtk_EnableRepeatNum) == 0x000038, "Member 'FEndBikeAISoldier3rdParameter::MiddleRangeAtk_EnableRepeatNum' has a wrong offset!");
static_assert(offsetof(FEndBikeAISoldier3rdParameter, MiddleRangeAtk_DamageAmount) == 0x00003C, "Member 'FEndBikeAISoldier3rdParameter::MiddleRangeAtk_DamageAmount' has a wrong offset!");
static_assert(offsetof(FEndBikeAISoldier3rdParameter, AIMove_SwitchToAllyInterval) == 0x000040, "Member 'FEndBikeAISoldier3rdParameter::AIMove_SwitchToAllyInterval' has a wrong offset!");
static_assert(offsetof(FEndBikeAISoldier3rdParameter, AIMove_RateOfTargetToAlly) == 0x000048, "Member 'FEndBikeAISoldier3rdParameter::AIMove_RateOfTargetToAlly' has a wrong offset!");
static_assert(offsetof(FEndBikeAISoldier3rdParameter, AIMove_SwitchToPlayerInterval) == 0x00004C, "Member 'FEndBikeAISoldier3rdParameter::AIMove_SwitchToPlayerInterval' has a wrong offset!");
static_assert(offsetof(FEndBikeAISoldier3rdParameter, AIMove_LimitDistanceForTargetPlayer) == 0x000054, "Member 'FEndBikeAISoldier3rdParameter::AIMove_LimitDistanceForTargetPlayer' has a wrong offset!");
static_assert(offsetof(FEndBikeAISoldier3rdParameter, IdleMove_MinSlideDistance) == 0x000058, "Member 'FEndBikeAISoldier3rdParameter::IdleMove_MinSlideDistance' has a wrong offset!");
static_assert(offsetof(FEndBikeAISoldier3rdParameter, IdleMove_MinSlideSpeed) == 0x00005C, "Member 'FEndBikeAISoldier3rdParameter::IdleMove_MinSlideSpeed' has a wrong offset!");
static_assert(offsetof(FEndBikeAISoldier3rdParameter, HitPoint_ToPhase) == 0x000060, "Member 'FEndBikeAISoldier3rdParameter::HitPoint_ToPhase' has a wrong offset!");
static_assert(offsetof(FEndBikeAISoldier3rdParameter, HelicopterMissileAbilities) == 0x000068, "Member 'FEndBikeAISoldier3rdParameter::HelicopterMissileAbilities' has a wrong offset!");

// ScriptStruct EndGame.EndNaviMapVolumePoly
// 0x0030 (0x0030 - 0x0000)
struct FEndNaviMapVolumePoly final
{
public:
	TArray<struct FVector>                        Verts;                                             // 0x0000(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FVector2D>                      UVs;                                               // 0x0010(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	int32                                         SplitIndex;                                        // 0x0020(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TextureName;                                       // 0x0024(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndNaviMapVolumePoly) == 0x000008, "Wrong alignment on FEndNaviMapVolumePoly");
static_assert(sizeof(FEndNaviMapVolumePoly) == 0x000030, "Wrong size on FEndNaviMapVolumePoly");
static_assert(offsetof(FEndNaviMapVolumePoly, Verts) == 0x000000, "Member 'FEndNaviMapVolumePoly::Verts' has a wrong offset!");
static_assert(offsetof(FEndNaviMapVolumePoly, UVs) == 0x000010, "Member 'FEndNaviMapVolumePoly::UVs' has a wrong offset!");
static_assert(offsetof(FEndNaviMapVolumePoly, SplitIndex) == 0x000020, "Member 'FEndNaviMapVolumePoly::SplitIndex' has a wrong offset!");
static_assert(offsetof(FEndNaviMapVolumePoly, TextureName) == 0x000024, "Member 'FEndNaviMapVolumePoly::TextureName' has a wrong offset!");

// ScriptStruct EndGame.EndBikeAITruckGunFireInfo
// 0x0008 (0x0008 - 0x0000)
struct FEndBikeAITruckGunFireInfo final
{
public:
	class FName                                   DamageSourceID;                                    // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndBikeAITruckGunFireInfo) == 0x000004, "Wrong alignment on FEndBikeAITruckGunFireInfo");
static_assert(sizeof(FEndBikeAITruckGunFireInfo) == 0x000008, "Wrong size on FEndBikeAITruckGunFireInfo");
static_assert(offsetof(FEndBikeAITruckGunFireInfo, DamageSourceID) == 0x000000, "Member 'FEndBikeAITruckGunFireInfo::DamageSourceID' has a wrong offset!");

// ScriptStruct EndGame.EndBikeAITruckParameter
// 0x00D8 (0x00D8 - 0x0000)
struct FEndBikeAITruckParameter final
{
public:
	float                                         General_SlideChangeRollToYawBias;                  // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         General_MovableSlideLength;                        // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         General_RestoreRollInterpSpeed;                    // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         General_KeepRelativeDistance;                      // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         General_KeepRelativeDistanceAtLastOneEnemy;        // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         General_RelativeSpeedAtLastOneEnemy;               // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         General_MoveDistanceRangeMaxAtLastOneEnemy;        // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                General_CarBodyHalfSize;                           // 0x001C(0x000C)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Tackle_BeforePullOverSlide;                        // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Tackle_SlideSpeedOnPullOver;                       // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Tackle_SlideSpeedOnAttack;                         // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Tackle_MaxRotateRateAfterHitWall;                  // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Tackle_MaxAttackingTime;                           // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Tackle_ConstantArrivalTime;                        // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Tackle_MaxSpeed;                                   // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Tackle_Acceleration;                               // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               GunFire_TargetLocationRandomRot;                   // 0x0048(0x000C)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         GunFire_SlideMoveRate;                             // 0x0054(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GunFire_MaxSlideSpeedLength;                       // 0x0058(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GunFire_MovableSlideLength;                        // 0x005C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GunFire_SlideMoveRateOnHitWall;                    // 0x0060(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GunFire_DelayStartTime;                            // 0x0064(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GunFire_HatchLoopTime;                             // 0x0068(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GunFire_AfterShootingTime;                         // 0x006C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GunFire_ShootingInterval;                          // 0x0070(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFloatInterval                         GunFire_ValidAngleRange;                           // 0x0074(0x0008)(Edit, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFloatInterval                         GunFire_ValidSlideRange;                           // 0x007C(0x0008)(Edit, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GunFire_BeginShootTime;                            // 0x0084(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GunFire_EnableSlideMoveDistance;                   // 0x0088(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFloatInterval                         GunFire_AimClampRange;                             // 0x008C(0x0008)(Edit, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GunFire_ConstantArrivalTime;                       // 0x0094(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GunFire_MaxSpeed;                                  // 0x0098(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GunFire_Acceleration;                              // 0x009C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GunFire_Count;                                     // 0x00A0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   GunFire_LaserEffectName;                           // 0x00A4(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GunFire_LaserTargetHeightOffset;                   // 0x00AC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GunFire_BeginLaserEffectTime;                      // 0x00B0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   GunFire_LockOnSocketName;                          // 0x00B4(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GunFire_ThresholdDamagePoint;                      // 0x00BC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   GunFire_DamageTalkTriggerSetID;                    // 0x00C0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FEndBikeAITruckGunFireInfo>     GunFire_DamageSourceInfo;                          // 0x00C8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndBikeAITruckParameter) == 0x000008, "Wrong alignment on FEndBikeAITruckParameter");
static_assert(sizeof(FEndBikeAITruckParameter) == 0x0000D8, "Wrong size on FEndBikeAITruckParameter");
static_assert(offsetof(FEndBikeAITruckParameter, General_SlideChangeRollToYawBias) == 0x000000, "Member 'FEndBikeAITruckParameter::General_SlideChangeRollToYawBias' has a wrong offset!");
static_assert(offsetof(FEndBikeAITruckParameter, General_MovableSlideLength) == 0x000004, "Member 'FEndBikeAITruckParameter::General_MovableSlideLength' has a wrong offset!");
static_assert(offsetof(FEndBikeAITruckParameter, General_RestoreRollInterpSpeed) == 0x000008, "Member 'FEndBikeAITruckParameter::General_RestoreRollInterpSpeed' has a wrong offset!");
static_assert(offsetof(FEndBikeAITruckParameter, General_KeepRelativeDistance) == 0x00000C, "Member 'FEndBikeAITruckParameter::General_KeepRelativeDistance' has a wrong offset!");
static_assert(offsetof(FEndBikeAITruckParameter, General_KeepRelativeDistanceAtLastOneEnemy) == 0x000010, "Member 'FEndBikeAITruckParameter::General_KeepRelativeDistanceAtLastOneEnemy' has a wrong offset!");
static_assert(offsetof(FEndBikeAITruckParameter, General_RelativeSpeedAtLastOneEnemy) == 0x000014, "Member 'FEndBikeAITruckParameter::General_RelativeSpeedAtLastOneEnemy' has a wrong offset!");
static_assert(offsetof(FEndBikeAITruckParameter, General_MoveDistanceRangeMaxAtLastOneEnemy) == 0x000018, "Member 'FEndBikeAITruckParameter::General_MoveDistanceRangeMaxAtLastOneEnemy' has a wrong offset!");
static_assert(offsetof(FEndBikeAITruckParameter, General_CarBodyHalfSize) == 0x00001C, "Member 'FEndBikeAITruckParameter::General_CarBodyHalfSize' has a wrong offset!");
static_assert(offsetof(FEndBikeAITruckParameter, Tackle_BeforePullOverSlide) == 0x000028, "Member 'FEndBikeAITruckParameter::Tackle_BeforePullOverSlide' has a wrong offset!");
static_assert(offsetof(FEndBikeAITruckParameter, Tackle_SlideSpeedOnPullOver) == 0x00002C, "Member 'FEndBikeAITruckParameter::Tackle_SlideSpeedOnPullOver' has a wrong offset!");
static_assert(offsetof(FEndBikeAITruckParameter, Tackle_SlideSpeedOnAttack) == 0x000030, "Member 'FEndBikeAITruckParameter::Tackle_SlideSpeedOnAttack' has a wrong offset!");
static_assert(offsetof(FEndBikeAITruckParameter, Tackle_MaxRotateRateAfterHitWall) == 0x000034, "Member 'FEndBikeAITruckParameter::Tackle_MaxRotateRateAfterHitWall' has a wrong offset!");
static_assert(offsetof(FEndBikeAITruckParameter, Tackle_MaxAttackingTime) == 0x000038, "Member 'FEndBikeAITruckParameter::Tackle_MaxAttackingTime' has a wrong offset!");
static_assert(offsetof(FEndBikeAITruckParameter, Tackle_ConstantArrivalTime) == 0x00003C, "Member 'FEndBikeAITruckParameter::Tackle_ConstantArrivalTime' has a wrong offset!");
static_assert(offsetof(FEndBikeAITruckParameter, Tackle_MaxSpeed) == 0x000040, "Member 'FEndBikeAITruckParameter::Tackle_MaxSpeed' has a wrong offset!");
static_assert(offsetof(FEndBikeAITruckParameter, Tackle_Acceleration) == 0x000044, "Member 'FEndBikeAITruckParameter::Tackle_Acceleration' has a wrong offset!");
static_assert(offsetof(FEndBikeAITruckParameter, GunFire_TargetLocationRandomRot) == 0x000048, "Member 'FEndBikeAITruckParameter::GunFire_TargetLocationRandomRot' has a wrong offset!");
static_assert(offsetof(FEndBikeAITruckParameter, GunFire_SlideMoveRate) == 0x000054, "Member 'FEndBikeAITruckParameter::GunFire_SlideMoveRate' has a wrong offset!");
static_assert(offsetof(FEndBikeAITruckParameter, GunFire_MaxSlideSpeedLength) == 0x000058, "Member 'FEndBikeAITruckParameter::GunFire_MaxSlideSpeedLength' has a wrong offset!");
static_assert(offsetof(FEndBikeAITruckParameter, GunFire_MovableSlideLength) == 0x00005C, "Member 'FEndBikeAITruckParameter::GunFire_MovableSlideLength' has a wrong offset!");
static_assert(offsetof(FEndBikeAITruckParameter, GunFire_SlideMoveRateOnHitWall) == 0x000060, "Member 'FEndBikeAITruckParameter::GunFire_SlideMoveRateOnHitWall' has a wrong offset!");
static_assert(offsetof(FEndBikeAITruckParameter, GunFire_DelayStartTime) == 0x000064, "Member 'FEndBikeAITruckParameter::GunFire_DelayStartTime' has a wrong offset!");
static_assert(offsetof(FEndBikeAITruckParameter, GunFire_HatchLoopTime) == 0x000068, "Member 'FEndBikeAITruckParameter::GunFire_HatchLoopTime' has a wrong offset!");
static_assert(offsetof(FEndBikeAITruckParameter, GunFire_AfterShootingTime) == 0x00006C, "Member 'FEndBikeAITruckParameter::GunFire_AfterShootingTime' has a wrong offset!");
static_assert(offsetof(FEndBikeAITruckParameter, GunFire_ShootingInterval) == 0x000070, "Member 'FEndBikeAITruckParameter::GunFire_ShootingInterval' has a wrong offset!");
static_assert(offsetof(FEndBikeAITruckParameter, GunFire_ValidAngleRange) == 0x000074, "Member 'FEndBikeAITruckParameter::GunFire_ValidAngleRange' has a wrong offset!");
static_assert(offsetof(FEndBikeAITruckParameter, GunFire_ValidSlideRange) == 0x00007C, "Member 'FEndBikeAITruckParameter::GunFire_ValidSlideRange' has a wrong offset!");
static_assert(offsetof(FEndBikeAITruckParameter, GunFire_BeginShootTime) == 0x000084, "Member 'FEndBikeAITruckParameter::GunFire_BeginShootTime' has a wrong offset!");
static_assert(offsetof(FEndBikeAITruckParameter, GunFire_EnableSlideMoveDistance) == 0x000088, "Member 'FEndBikeAITruckParameter::GunFire_EnableSlideMoveDistance' has a wrong offset!");
static_assert(offsetof(FEndBikeAITruckParameter, GunFire_AimClampRange) == 0x00008C, "Member 'FEndBikeAITruckParameter::GunFire_AimClampRange' has a wrong offset!");
static_assert(offsetof(FEndBikeAITruckParameter, GunFire_ConstantArrivalTime) == 0x000094, "Member 'FEndBikeAITruckParameter::GunFire_ConstantArrivalTime' has a wrong offset!");
static_assert(offsetof(FEndBikeAITruckParameter, GunFire_MaxSpeed) == 0x000098, "Member 'FEndBikeAITruckParameter::GunFire_MaxSpeed' has a wrong offset!");
static_assert(offsetof(FEndBikeAITruckParameter, GunFire_Acceleration) == 0x00009C, "Member 'FEndBikeAITruckParameter::GunFire_Acceleration' has a wrong offset!");
static_assert(offsetof(FEndBikeAITruckParameter, GunFire_Count) == 0x0000A0, "Member 'FEndBikeAITruckParameter::GunFire_Count' has a wrong offset!");
static_assert(offsetof(FEndBikeAITruckParameter, GunFire_LaserEffectName) == 0x0000A4, "Member 'FEndBikeAITruckParameter::GunFire_LaserEffectName' has a wrong offset!");
static_assert(offsetof(FEndBikeAITruckParameter, GunFire_LaserTargetHeightOffset) == 0x0000AC, "Member 'FEndBikeAITruckParameter::GunFire_LaserTargetHeightOffset' has a wrong offset!");
static_assert(offsetof(FEndBikeAITruckParameter, GunFire_BeginLaserEffectTime) == 0x0000B0, "Member 'FEndBikeAITruckParameter::GunFire_BeginLaserEffectTime' has a wrong offset!");
static_assert(offsetof(FEndBikeAITruckParameter, GunFire_LockOnSocketName) == 0x0000B4, "Member 'FEndBikeAITruckParameter::GunFire_LockOnSocketName' has a wrong offset!");
static_assert(offsetof(FEndBikeAITruckParameter, GunFire_ThresholdDamagePoint) == 0x0000BC, "Member 'FEndBikeAITruckParameter::GunFire_ThresholdDamagePoint' has a wrong offset!");
static_assert(offsetof(FEndBikeAITruckParameter, GunFire_DamageTalkTriggerSetID) == 0x0000C0, "Member 'FEndBikeAITruckParameter::GunFire_DamageTalkTriggerSetID' has a wrong offset!");
static_assert(offsetof(FEndBikeAITruckParameter, GunFire_DamageSourceInfo) == 0x0000C8, "Member 'FEndBikeAITruckParameter::GunFire_DamageSourceInfo' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableBikePlayerCharaSpec
// 0x00D0 (0x00D8 - 0x0008)
struct FEndDataTableBikePlayerCharaSpec final : public FEndDataTableRowBase
{
public:
	class FName                                   VehicleName;                                       // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           RiderName_Array;                                   // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         SpeedDefault;                                      // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CameraAimOffsetDepth;                              // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CameraAimOffsetHeight;                             // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           PlayerFeedbackID_Array;                            // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         DistanceRangeMax;                                  // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceRangeMin;                                  // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RelativeSpeedAtPlayerAccel;                        // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RelativeSpeedAtPlayerBrake;                        // 0x004C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LiveKeepTimeEasy;                                  // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LiveKeepTimeNormal;                                // 0x0054(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LiveKeepTimeHard;                                  // 0x0058(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 NameTextID;                                        // 0x0060(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MachineNameTextID;                                 // 0x0070(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PhysObjCapsuleFrontSocket;                         // 0x0080(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PhysObjCapsuleFrontOffsetDepth;                    // 0x0088(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PhysObjCapsuleFrontOffsetHeight;                   // 0x008C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PhysObjCapsuleRearSocket;                          // 0x0090(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PhysObjCapsuleRadius;                              // 0x0098(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         PhysObjImplusScale;                                // 0x009C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9D[0x3];                                       // 0x009D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PhysObjImplusRadius;                               // 0x00A0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PhysObjForceValue;                                 // 0x00A4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PhysObjForceAmplifierMaxSpeed;                     // 0x00A8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DeadTriggerSetID;                                  // 0x00AC(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BikeRepierEffectName;                              // 0x00B4(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         EnableWeaponHitWall;                               // 0x00BC(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         EnableWeaponHitTerrain;                            // 0x00BD(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BE[0x2];                                       // 0x00BE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   WeaponHitBackgroundEffect;                         // 0x00C0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           PlayerTriggerEffect_Array;                         // 0x00C8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableBikePlayerCharaSpec) == 0x000008, "Wrong alignment on FEndDataTableBikePlayerCharaSpec");
static_assert(sizeof(FEndDataTableBikePlayerCharaSpec) == 0x0000D8, "Wrong size on FEndDataTableBikePlayerCharaSpec");
static_assert(offsetof(FEndDataTableBikePlayerCharaSpec, VehicleName) == 0x000008, "Member 'FEndDataTableBikePlayerCharaSpec::VehicleName' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikePlayerCharaSpec, RiderName_Array) == 0x000010, "Member 'FEndDataTableBikePlayerCharaSpec::RiderName_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikePlayerCharaSpec, SpeedDefault) == 0x000020, "Member 'FEndDataTableBikePlayerCharaSpec::SpeedDefault' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikePlayerCharaSpec, CameraAimOffsetDepth) == 0x000024, "Member 'FEndDataTableBikePlayerCharaSpec::CameraAimOffsetDepth' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikePlayerCharaSpec, CameraAimOffsetHeight) == 0x000028, "Member 'FEndDataTableBikePlayerCharaSpec::CameraAimOffsetHeight' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikePlayerCharaSpec, PlayerFeedbackID_Array) == 0x000030, "Member 'FEndDataTableBikePlayerCharaSpec::PlayerFeedbackID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikePlayerCharaSpec, DistanceRangeMax) == 0x000040, "Member 'FEndDataTableBikePlayerCharaSpec::DistanceRangeMax' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikePlayerCharaSpec, DistanceRangeMin) == 0x000044, "Member 'FEndDataTableBikePlayerCharaSpec::DistanceRangeMin' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikePlayerCharaSpec, RelativeSpeedAtPlayerAccel) == 0x000048, "Member 'FEndDataTableBikePlayerCharaSpec::RelativeSpeedAtPlayerAccel' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikePlayerCharaSpec, RelativeSpeedAtPlayerBrake) == 0x00004C, "Member 'FEndDataTableBikePlayerCharaSpec::RelativeSpeedAtPlayerBrake' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikePlayerCharaSpec, LiveKeepTimeEasy) == 0x000050, "Member 'FEndDataTableBikePlayerCharaSpec::LiveKeepTimeEasy' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikePlayerCharaSpec, LiveKeepTimeNormal) == 0x000054, "Member 'FEndDataTableBikePlayerCharaSpec::LiveKeepTimeNormal' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikePlayerCharaSpec, LiveKeepTimeHard) == 0x000058, "Member 'FEndDataTableBikePlayerCharaSpec::LiveKeepTimeHard' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikePlayerCharaSpec, NameTextID) == 0x000060, "Member 'FEndDataTableBikePlayerCharaSpec::NameTextID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikePlayerCharaSpec, MachineNameTextID) == 0x000070, "Member 'FEndDataTableBikePlayerCharaSpec::MachineNameTextID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikePlayerCharaSpec, PhysObjCapsuleFrontSocket) == 0x000080, "Member 'FEndDataTableBikePlayerCharaSpec::PhysObjCapsuleFrontSocket' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikePlayerCharaSpec, PhysObjCapsuleFrontOffsetDepth) == 0x000088, "Member 'FEndDataTableBikePlayerCharaSpec::PhysObjCapsuleFrontOffsetDepth' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikePlayerCharaSpec, PhysObjCapsuleFrontOffsetHeight) == 0x00008C, "Member 'FEndDataTableBikePlayerCharaSpec::PhysObjCapsuleFrontOffsetHeight' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikePlayerCharaSpec, PhysObjCapsuleRearSocket) == 0x000090, "Member 'FEndDataTableBikePlayerCharaSpec::PhysObjCapsuleRearSocket' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikePlayerCharaSpec, PhysObjCapsuleRadius) == 0x000098, "Member 'FEndDataTableBikePlayerCharaSpec::PhysObjCapsuleRadius' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikePlayerCharaSpec, PhysObjImplusScale) == 0x00009C, "Member 'FEndDataTableBikePlayerCharaSpec::PhysObjImplusScale' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikePlayerCharaSpec, PhysObjImplusRadius) == 0x0000A0, "Member 'FEndDataTableBikePlayerCharaSpec::PhysObjImplusRadius' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikePlayerCharaSpec, PhysObjForceValue) == 0x0000A4, "Member 'FEndDataTableBikePlayerCharaSpec::PhysObjForceValue' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikePlayerCharaSpec, PhysObjForceAmplifierMaxSpeed) == 0x0000A8, "Member 'FEndDataTableBikePlayerCharaSpec::PhysObjForceAmplifierMaxSpeed' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikePlayerCharaSpec, DeadTriggerSetID) == 0x0000AC, "Member 'FEndDataTableBikePlayerCharaSpec::DeadTriggerSetID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikePlayerCharaSpec, BikeRepierEffectName) == 0x0000B4, "Member 'FEndDataTableBikePlayerCharaSpec::BikeRepierEffectName' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikePlayerCharaSpec, EnableWeaponHitWall) == 0x0000BC, "Member 'FEndDataTableBikePlayerCharaSpec::EnableWeaponHitWall' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikePlayerCharaSpec, EnableWeaponHitTerrain) == 0x0000BD, "Member 'FEndDataTableBikePlayerCharaSpec::EnableWeaponHitTerrain' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikePlayerCharaSpec, WeaponHitBackgroundEffect) == 0x0000C0, "Member 'FEndDataTableBikePlayerCharaSpec::WeaponHitBackgroundEffect' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikePlayerCharaSpec, PlayerTriggerEffect_Array) == 0x0000C8, "Member 'FEndDataTableBikePlayerCharaSpec::PlayerTriggerEffect_Array' has a wrong offset!");

// ScriptStruct EndGame.EndBikeAITruckDamageLoopEffectParam
// 0x0030 (0x0030 - 0x0000)
struct alignas(0x08) FEndBikeAITruckDamageLoopEffectParam final
{
public:
	class FName                                   EffectName;                                        // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttachName;                                        // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                EffectOffset;                                      // 0x0010(0x000C)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HitPointRate;                                      // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AddMotionName;                                     // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBikeAITruckDamageLoopEffectParam) == 0x000008, "Wrong alignment on FEndBikeAITruckDamageLoopEffectParam");
static_assert(sizeof(FEndBikeAITruckDamageLoopEffectParam) == 0x000030, "Wrong size on FEndBikeAITruckDamageLoopEffectParam");
static_assert(offsetof(FEndBikeAITruckDamageLoopEffectParam, EffectName) == 0x000000, "Member 'FEndBikeAITruckDamageLoopEffectParam::EffectName' has a wrong offset!");
static_assert(offsetof(FEndBikeAITruckDamageLoopEffectParam, AttachName) == 0x000008, "Member 'FEndBikeAITruckDamageLoopEffectParam::AttachName' has a wrong offset!");
static_assert(offsetof(FEndBikeAITruckDamageLoopEffectParam, EffectOffset) == 0x000010, "Member 'FEndBikeAITruckDamageLoopEffectParam::EffectOffset' has a wrong offset!");
static_assert(offsetof(FEndBikeAITruckDamageLoopEffectParam, HitPointRate) == 0x00001C, "Member 'FEndBikeAITruckDamageLoopEffectParam::HitPointRate' has a wrong offset!");
static_assert(offsetof(FEndBikeAITruckDamageLoopEffectParam, AddMotionName) == 0x000020, "Member 'FEndBikeAITruckDamageLoopEffectParam::AddMotionName' has a wrong offset!");

// ScriptStruct EndGame.AffectedActorGroup
// 0x0030 (0x0030 - 0x0000)
struct FAffectedActorGroup final
{
public:
	class FName                                   StartStateTrigger;                                 // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EndStateTrigger;                                   // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LeftStartStateTrigger;                             // 0x0010(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LeftEndStateTrigger;                               // 0x0018(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RightStartStateTrigger;                            // 0x0020(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RightEndStateTrigger;                              // 0x0028(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAffectedActorGroup) == 0x000004, "Wrong alignment on FAffectedActorGroup");
static_assert(sizeof(FAffectedActorGroup) == 0x000030, "Wrong size on FAffectedActorGroup");
static_assert(offsetof(FAffectedActorGroup, StartStateTrigger) == 0x000000, "Member 'FAffectedActorGroup::StartStateTrigger' has a wrong offset!");
static_assert(offsetof(FAffectedActorGroup, EndStateTrigger) == 0x000008, "Member 'FAffectedActorGroup::EndStateTrigger' has a wrong offset!");
static_assert(offsetof(FAffectedActorGroup, LeftStartStateTrigger) == 0x000010, "Member 'FAffectedActorGroup::LeftStartStateTrigger' has a wrong offset!");
static_assert(offsetof(FAffectedActorGroup, LeftEndStateTrigger) == 0x000018, "Member 'FAffectedActorGroup::LeftEndStateTrigger' has a wrong offset!");
static_assert(offsetof(FAffectedActorGroup, RightStartStateTrigger) == 0x000020, "Member 'FAffectedActorGroup::RightStartStateTrigger' has a wrong offset!");
static_assert(offsetof(FAffectedActorGroup, RightEndStateTrigger) == 0x000028, "Member 'FAffectedActorGroup::RightEndStateTrigger' has a wrong offset!");

// ScriptStruct EndGame.EndBikeSplineJumpAreaData
// 0x0014 (0x0014 - 0x0000)
struct FEndBikeSplineJumpAreaData final
{
public:
	float                                         JumpPointInputKey;                                 // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JumpBoardLength;                                   // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JumpBoardHeight;                                   // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFloatInterval                         JumpBoardWidth;                                    // 0x000C(0x0008)(Edit, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndBikeSplineJumpAreaData) == 0x000004, "Wrong alignment on FEndBikeSplineJumpAreaData");
static_assert(sizeof(FEndBikeSplineJumpAreaData) == 0x000014, "Wrong size on FEndBikeSplineJumpAreaData");
static_assert(offsetof(FEndBikeSplineJumpAreaData, JumpPointInputKey) == 0x000000, "Member 'FEndBikeSplineJumpAreaData::JumpPointInputKey' has a wrong offset!");
static_assert(offsetof(FEndBikeSplineJumpAreaData, JumpBoardLength) == 0x000004, "Member 'FEndBikeSplineJumpAreaData::JumpBoardLength' has a wrong offset!");
static_assert(offsetof(FEndBikeSplineJumpAreaData, JumpBoardHeight) == 0x000008, "Member 'FEndBikeSplineJumpAreaData::JumpBoardHeight' has a wrong offset!");
static_assert(offsetof(FEndBikeSplineJumpAreaData, JumpBoardWidth) == 0x00000C, "Member 'FEndBikeSplineJumpAreaData::JumpBoardWidth' has a wrong offset!");

// ScriptStruct EndGame.EndBikeSplineMetaData
// 0x0010 (0x0010 - 0x0000)
struct FEndBikeSplineMetaData final
{
public:
	struct FFloatInterval                         AppliedRange;                                      // 0x0000(0x0008)(Edit, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MetaDataTableID;                                   // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndBikeSplineMetaData) == 0x000004, "Wrong alignment on FEndBikeSplineMetaData");
static_assert(sizeof(FEndBikeSplineMetaData) == 0x000010, "Wrong size on FEndBikeSplineMetaData");
static_assert(offsetof(FEndBikeSplineMetaData, AppliedRange) == 0x000000, "Member 'FEndBikeSplineMetaData::AppliedRange' has a wrong offset!");
static_assert(offsetof(FEndBikeSplineMetaData, MetaDataTableID) == 0x000008, "Member 'FEndBikeSplineMetaData::MetaDataTableID' has a wrong offset!");

// ScriptStruct EndGame.EndDataTablePointSound
// 0x0028 (0x0030 - 0x0008)
struct FEndDataTablePointSound final : public FEndDataTableRowBase
{
public:
	int32                                         UniqueIndex;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ObjectID;                                          // 0x000C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SoundFile;                                         // 0x0014(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StoryFlagID;                                       // 0x001C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeOut;                                           // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Play2D;                                            // 0x0028(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTablePointSound) == 0x000008, "Wrong alignment on FEndDataTablePointSound");
static_assert(sizeof(FEndDataTablePointSound) == 0x000030, "Wrong size on FEndDataTablePointSound");
static_assert(offsetof(FEndDataTablePointSound, UniqueIndex) == 0x000008, "Member 'FEndDataTablePointSound::UniqueIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTablePointSound, ObjectID) == 0x00000C, "Member 'FEndDataTablePointSound::ObjectID' has a wrong offset!");
static_assert(offsetof(FEndDataTablePointSound, SoundFile) == 0x000014, "Member 'FEndDataTablePointSound::SoundFile' has a wrong offset!");
static_assert(offsetof(FEndDataTablePointSound, StoryFlagID) == 0x00001C, "Member 'FEndDataTablePointSound::StoryFlagID' has a wrong offset!");
static_assert(offsetof(FEndDataTablePointSound, FadeOut) == 0x000024, "Member 'FEndDataTablePointSound::FadeOut' has a wrong offset!");
static_assert(offsetof(FEndDataTablePointSound, Play2D) == 0x000028, "Member 'FEndDataTablePointSound::Play2D' has a wrong offset!");

// ScriptStruct EndGame.BikeSeAsset
// 0x0048 (0x0048 - 0x0000)
struct FBikeSeAsset final
{
public:
	struct FSQEXSEADSoundKey                      Key;                                               // 0x0000(0x0038)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         FadeInTime;                                        // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeOutTime;                                       // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttachPointName;                                   // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBikeSeAsset) == 0x000008, "Wrong alignment on FBikeSeAsset");
static_assert(sizeof(FBikeSeAsset) == 0x000048, "Wrong size on FBikeSeAsset");
static_assert(offsetof(FBikeSeAsset, Key) == 0x000000, "Member 'FBikeSeAsset::Key' has a wrong offset!");
static_assert(offsetof(FBikeSeAsset, FadeInTime) == 0x000038, "Member 'FBikeSeAsset::FadeInTime' has a wrong offset!");
static_assert(offsetof(FBikeSeAsset, FadeOutTime) == 0x00003C, "Member 'FBikeSeAsset::FadeOutTime' has a wrong offset!");
static_assert(offsetof(FBikeSeAsset, AttachPointName) == 0x000040, "Member 'FBikeSeAsset::AttachPointName' has a wrong offset!");

// ScriptStruct EndGame.EndBoneBlendRate
// 0x0010 (0x0010 - 0x0000)
struct FEndBoneBlendRate final
{
public:
	class FName                                   BoneName;                                          // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendRate;                                         // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndBoneBlendRate) == 0x000004, "Wrong alignment on FEndBoneBlendRate");
static_assert(sizeof(FEndBoneBlendRate) == 0x000010, "Wrong size on FEndBoneBlendRate");
static_assert(offsetof(FEndBoneBlendRate, BoneName) == 0x000000, "Member 'FEndBoneBlendRate::BoneName' has a wrong offset!");
static_assert(offsetof(FEndBoneBlendRate, BlendRate) == 0x000008, "Member 'FEndBoneBlendRate::BlendRate' has a wrong offset!");

// ScriptStruct EndGame.EndBoneBlendRateGroup
// 0x0010 (0x0010 - 0x0000)
struct FEndBoneBlendRateGroup final
{
public:
	TArray<struct FEndBoneBlendRate>              BoneBlendRates;                                    // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndBoneBlendRateGroup) == 0x000008, "Wrong alignment on FEndBoneBlendRateGroup");
static_assert(sizeof(FEndBoneBlendRateGroup) == 0x000010, "Wrong size on FEndBoneBlendRateGroup");
static_assert(offsetof(FEndBoneBlendRateGroup, BoneBlendRates) == 0x000000, "Member 'FEndBoneBlendRateGroup::BoneBlendRates' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableCharaActionTable
// 0x00C0 (0x00C8 - 0x0008)
struct FEndDataTableCharaActionTable final : public FEndDataTableRowBase
{
public:
	int32                                         UniqueIndex;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Next00;                                            // 0x0010(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Type;                                              // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 StringArgument00;                                  // 0x0028(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StringArgument01;                                  // 0x0038(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StringArgument02;                                  // 0x0048(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StringArgument03;                                  // 0x0058(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StringArgument04;                                  // 0x0068(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StringArgument05;                                  // 0x0078(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StringArgument06;                                  // 0x0088(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StringArgument07;                                  // 0x0098(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IntegerArgument00;                                 // 0x00A8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IntegerArgument01;                                 // 0x00AC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IntegerArgument02;                                 // 0x00B0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IntegerArgument03;                                 // 0x00B4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IntegerArgument04;                                 // 0x00B8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IntegerArgument05;                                 // 0x00BC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IntegerArgument06;                                 // 0x00C0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IntegerArgument07;                                 // 0x00C4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableCharaActionTable) == 0x000008, "Wrong alignment on FEndDataTableCharaActionTable");
static_assert(sizeof(FEndDataTableCharaActionTable) == 0x0000C8, "Wrong size on FEndDataTableCharaActionTable");
static_assert(offsetof(FEndDataTableCharaActionTable, UniqueIndex) == 0x000008, "Member 'FEndDataTableCharaActionTable::UniqueIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTableCharaActionTable, Next00) == 0x000010, "Member 'FEndDataTableCharaActionTable::Next00' has a wrong offset!");
static_assert(offsetof(FEndDataTableCharaActionTable, Type) == 0x000020, "Member 'FEndDataTableCharaActionTable::Type' has a wrong offset!");
static_assert(offsetof(FEndDataTableCharaActionTable, StringArgument00) == 0x000028, "Member 'FEndDataTableCharaActionTable::StringArgument00' has a wrong offset!");
static_assert(offsetof(FEndDataTableCharaActionTable, StringArgument01) == 0x000038, "Member 'FEndDataTableCharaActionTable::StringArgument01' has a wrong offset!");
static_assert(offsetof(FEndDataTableCharaActionTable, StringArgument02) == 0x000048, "Member 'FEndDataTableCharaActionTable::StringArgument02' has a wrong offset!");
static_assert(offsetof(FEndDataTableCharaActionTable, StringArgument03) == 0x000058, "Member 'FEndDataTableCharaActionTable::StringArgument03' has a wrong offset!");
static_assert(offsetof(FEndDataTableCharaActionTable, StringArgument04) == 0x000068, "Member 'FEndDataTableCharaActionTable::StringArgument04' has a wrong offset!");
static_assert(offsetof(FEndDataTableCharaActionTable, StringArgument05) == 0x000078, "Member 'FEndDataTableCharaActionTable::StringArgument05' has a wrong offset!");
static_assert(offsetof(FEndDataTableCharaActionTable, StringArgument06) == 0x000088, "Member 'FEndDataTableCharaActionTable::StringArgument06' has a wrong offset!");
static_assert(offsetof(FEndDataTableCharaActionTable, StringArgument07) == 0x000098, "Member 'FEndDataTableCharaActionTable::StringArgument07' has a wrong offset!");
static_assert(offsetof(FEndDataTableCharaActionTable, IntegerArgument00) == 0x0000A8, "Member 'FEndDataTableCharaActionTable::IntegerArgument00' has a wrong offset!");
static_assert(offsetof(FEndDataTableCharaActionTable, IntegerArgument01) == 0x0000AC, "Member 'FEndDataTableCharaActionTable::IntegerArgument01' has a wrong offset!");
static_assert(offsetof(FEndDataTableCharaActionTable, IntegerArgument02) == 0x0000B0, "Member 'FEndDataTableCharaActionTable::IntegerArgument02' has a wrong offset!");
static_assert(offsetof(FEndDataTableCharaActionTable, IntegerArgument03) == 0x0000B4, "Member 'FEndDataTableCharaActionTable::IntegerArgument03' has a wrong offset!");
static_assert(offsetof(FEndDataTableCharaActionTable, IntegerArgument04) == 0x0000B8, "Member 'FEndDataTableCharaActionTable::IntegerArgument04' has a wrong offset!");
static_assert(offsetof(FEndDataTableCharaActionTable, IntegerArgument05) == 0x0000BC, "Member 'FEndDataTableCharaActionTable::IntegerArgument05' has a wrong offset!");
static_assert(offsetof(FEndDataTableCharaActionTable, IntegerArgument06) == 0x0000C0, "Member 'FEndDataTableCharaActionTable::IntegerArgument06' has a wrong offset!");
static_assert(offsetof(FEndDataTableCharaActionTable, IntegerArgument07) == 0x0000C4, "Member 'FEndDataTableCharaActionTable::IntegerArgument07' has a wrong offset!");

// ScriptStruct EndGame.EndSoundHandle
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FEndSoundHandle final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndSoundHandle) == 0x000008, "Wrong alignment on FEndSoundHandle");
static_assert(sizeof(FEndSoundHandle) == 0x000010, "Wrong size on FEndSoundHandle");

// ScriptStruct EndGame.EndMenuColorCorrectionSelection
// 0x0018 (0x0018 - 0x0000)
struct FEndMenuColorCorrectionSelection final
{
public:
	int32                                         LUTIndex;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 NameTextID;                                        // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndMenuColorCorrectionSelection) == 0x000008, "Wrong alignment on FEndMenuColorCorrectionSelection");
static_assert(sizeof(FEndMenuColorCorrectionSelection) == 0x000018, "Wrong size on FEndMenuColorCorrectionSelection");
static_assert(offsetof(FEndMenuColorCorrectionSelection, LUTIndex) == 0x000000, "Member 'FEndMenuColorCorrectionSelection::LUTIndex' has a wrong offset!");
static_assert(offsetof(FEndMenuColorCorrectionSelection, NameTextID) == 0x000008, "Member 'FEndMenuColorCorrectionSelection::NameTextID' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableCondorFortBase
// 0x0028 (0x0030 - 0x0008)
struct FEndDataTableCondorFortBase final : public FEndDataTableRowBase
{
public:
	uint8                                         Type;                                              // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         IsEnemy;                                           // 0x0009(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CharacterID;                                       // 0x000C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LayoutNode;                                        // 0x0014(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NameTextID;                                        // 0x001C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Icon;                                              // 0x0024(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableCondorFortBase) == 0x000008, "Wrong alignment on FEndDataTableCondorFortBase");
static_assert(sizeof(FEndDataTableCondorFortBase) == 0x000030, "Wrong size on FEndDataTableCondorFortBase");
static_assert(offsetof(FEndDataTableCondorFortBase, Type) == 0x000008, "Member 'FEndDataTableCondorFortBase::Type' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortBase, IsEnemy) == 0x000009, "Member 'FEndDataTableCondorFortBase::IsEnemy' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortBase, CharacterID) == 0x00000C, "Member 'FEndDataTableCondorFortBase::CharacterID' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortBase, LayoutNode) == 0x000014, "Member 'FEndDataTableCondorFortBase::LayoutNode' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortBase, NameTextID) == 0x00001C, "Member 'FEndDataTableCondorFortBase::NameTextID' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortBase, Icon) == 0x000024, "Member 'FEndDataTableCondorFortBase::Icon' has a wrong offset!");

// ScriptStruct EndGame.EndCharacterResidentEffect
// 0x0030 (0x0030 - 0x0000)
struct FEndCharacterResidentEffect final
{
public:
	class UParticleSystem*                        Template;                                          // 0x0000(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttachSocketName;                                  // 0x0008(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                AttachOffsetLocation;                              // 0x0010(0x000C)(Edit, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               AttachOffsetRotation;                              // 0x001C(0x000C)(Edit, EditConst, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndCharacterResidentEffect) == 0x000008, "Wrong alignment on FEndCharacterResidentEffect");
static_assert(sizeof(FEndCharacterResidentEffect) == 0x000030, "Wrong size on FEndCharacterResidentEffect");
static_assert(offsetof(FEndCharacterResidentEffect, Template) == 0x000000, "Member 'FEndCharacterResidentEffect::Template' has a wrong offset!");
static_assert(offsetof(FEndCharacterResidentEffect, AttachSocketName) == 0x000008, "Member 'FEndCharacterResidentEffect::AttachSocketName' has a wrong offset!");
static_assert(offsetof(FEndCharacterResidentEffect, AttachOffsetLocation) == 0x000010, "Member 'FEndCharacterResidentEffect::AttachOffsetLocation' has a wrong offset!");
static_assert(offsetof(FEndCharacterResidentEffect, AttachOffsetRotation) == 0x00001C, "Member 'FEndCharacterResidentEffect::AttachOffsetRotation' has a wrong offset!");

// ScriptStruct EndGame.EndCharacterAttachEffectArguments
// 0x0078 (0x0078 - 0x0000)
struct FEndCharacterAttachEffectArguments final
{
public:
	class FName                                   AttachComponentName;                               // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttachSocketName;                                  // 0x0008(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndCharacterAttachEffectResourceCategoryType ResourceCategory;                                  // 0x0010(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AEndCharacter*                          ResourceChara;                                     // 0x0018(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ResourceName;                                      // 0x0020(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ResourceLevelName;                                 // 0x0028(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRemoveOnEscape;                                   // 0x0030(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRemoveOnDeath;                                    // 0x0031(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDetachOnRemove;                                   // 0x0032(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_33[0x5];                                       // 0x0033(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class AEndCharacter*                          BeamTargetChara;                                   // 0x0038(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BeamTargetCharaAttachSocketName;                   // 0x0040(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBeamTargetDisableContactTargetChara;              // 0x0048(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   BeamTargetContactEffectName;                       // 0x004C(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBeamTargetContactWall;                            // 0x0054(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBeamTargetContactOwnerChara;                      // 0x0055(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLineEffect;                                       // 0x0056(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_57[0x1];                                       // 0x0057(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LineEffectTangentLength;                           // 0x0058(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CreateSecondMin;                                   // 0x005C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CreateSecondMax;                                   // 0x0060(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LoopOffSecondMin;                                  // 0x0064(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LoopOffSecondMax;                                  // 0x0068(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReCreateSecondMin;                                 // 0x006C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReCreateSecondMax;                                 // 0x0070(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndCharacterAttachEffectArguments) == 0x000008, "Wrong alignment on FEndCharacterAttachEffectArguments");
static_assert(sizeof(FEndCharacterAttachEffectArguments) == 0x000078, "Wrong size on FEndCharacterAttachEffectArguments");
static_assert(offsetof(FEndCharacterAttachEffectArguments, AttachComponentName) == 0x000000, "Member 'FEndCharacterAttachEffectArguments::AttachComponentName' has a wrong offset!");
static_assert(offsetof(FEndCharacterAttachEffectArguments, AttachSocketName) == 0x000008, "Member 'FEndCharacterAttachEffectArguments::AttachSocketName' has a wrong offset!");
static_assert(offsetof(FEndCharacterAttachEffectArguments, ResourceCategory) == 0x000010, "Member 'FEndCharacterAttachEffectArguments::ResourceCategory' has a wrong offset!");
static_assert(offsetof(FEndCharacterAttachEffectArguments, ResourceChara) == 0x000018, "Member 'FEndCharacterAttachEffectArguments::ResourceChara' has a wrong offset!");
static_assert(offsetof(FEndCharacterAttachEffectArguments, ResourceName) == 0x000020, "Member 'FEndCharacterAttachEffectArguments::ResourceName' has a wrong offset!");
static_assert(offsetof(FEndCharacterAttachEffectArguments, ResourceLevelName) == 0x000028, "Member 'FEndCharacterAttachEffectArguments::ResourceLevelName' has a wrong offset!");
static_assert(offsetof(FEndCharacterAttachEffectArguments, bRemoveOnEscape) == 0x000030, "Member 'FEndCharacterAttachEffectArguments::bRemoveOnEscape' has a wrong offset!");
static_assert(offsetof(FEndCharacterAttachEffectArguments, bRemoveOnDeath) == 0x000031, "Member 'FEndCharacterAttachEffectArguments::bRemoveOnDeath' has a wrong offset!");
static_assert(offsetof(FEndCharacterAttachEffectArguments, bDetachOnRemove) == 0x000032, "Member 'FEndCharacterAttachEffectArguments::bDetachOnRemove' has a wrong offset!");
static_assert(offsetof(FEndCharacterAttachEffectArguments, BeamTargetChara) == 0x000038, "Member 'FEndCharacterAttachEffectArguments::BeamTargetChara' has a wrong offset!");
static_assert(offsetof(FEndCharacterAttachEffectArguments, BeamTargetCharaAttachSocketName) == 0x000040, "Member 'FEndCharacterAttachEffectArguments::BeamTargetCharaAttachSocketName' has a wrong offset!");
static_assert(offsetof(FEndCharacterAttachEffectArguments, bBeamTargetDisableContactTargetChara) == 0x000048, "Member 'FEndCharacterAttachEffectArguments::bBeamTargetDisableContactTargetChara' has a wrong offset!");
static_assert(offsetof(FEndCharacterAttachEffectArguments, BeamTargetContactEffectName) == 0x00004C, "Member 'FEndCharacterAttachEffectArguments::BeamTargetContactEffectName' has a wrong offset!");
static_assert(offsetof(FEndCharacterAttachEffectArguments, bBeamTargetContactWall) == 0x000054, "Member 'FEndCharacterAttachEffectArguments::bBeamTargetContactWall' has a wrong offset!");
static_assert(offsetof(FEndCharacterAttachEffectArguments, bBeamTargetContactOwnerChara) == 0x000055, "Member 'FEndCharacterAttachEffectArguments::bBeamTargetContactOwnerChara' has a wrong offset!");
static_assert(offsetof(FEndCharacterAttachEffectArguments, bLineEffect) == 0x000056, "Member 'FEndCharacterAttachEffectArguments::bLineEffect' has a wrong offset!");
static_assert(offsetof(FEndCharacterAttachEffectArguments, LineEffectTangentLength) == 0x000058, "Member 'FEndCharacterAttachEffectArguments::LineEffectTangentLength' has a wrong offset!");
static_assert(offsetof(FEndCharacterAttachEffectArguments, CreateSecondMin) == 0x00005C, "Member 'FEndCharacterAttachEffectArguments::CreateSecondMin' has a wrong offset!");
static_assert(offsetof(FEndCharacterAttachEffectArguments, CreateSecondMax) == 0x000060, "Member 'FEndCharacterAttachEffectArguments::CreateSecondMax' has a wrong offset!");
static_assert(offsetof(FEndCharacterAttachEffectArguments, LoopOffSecondMin) == 0x000064, "Member 'FEndCharacterAttachEffectArguments::LoopOffSecondMin' has a wrong offset!");
static_assert(offsetof(FEndCharacterAttachEffectArguments, LoopOffSecondMax) == 0x000068, "Member 'FEndCharacterAttachEffectArguments::LoopOffSecondMax' has a wrong offset!");
static_assert(offsetof(FEndCharacterAttachEffectArguments, ReCreateSecondMin) == 0x00006C, "Member 'FEndCharacterAttachEffectArguments::ReCreateSecondMin' has a wrong offset!");
static_assert(offsetof(FEndCharacterAttachEffectArguments, ReCreateSecondMax) == 0x000070, "Member 'FEndCharacterAttachEffectArguments::ReCreateSecondMax' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableShopItem
// 0x0040 (0x0048 - 0x0008)
struct FEndDataTableShopItem final : public FEndDataTableRowBase
{
public:
	class FName                                   UseItemID;                                         // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemType;                                          // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ItemID;                                            // 0x0014(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ViewFlag;                                          // 0x001C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 OverridePrice_Array;                               // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           CountersID_Array;                                  // 0x0038(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableShopItem) == 0x000008, "Wrong alignment on FEndDataTableShopItem");
static_assert(sizeof(FEndDataTableShopItem) == 0x000048, "Wrong size on FEndDataTableShopItem");
static_assert(offsetof(FEndDataTableShopItem, UseItemID) == 0x000008, "Member 'FEndDataTableShopItem::UseItemID' has a wrong offset!");
static_assert(offsetof(FEndDataTableShopItem, ItemType) == 0x000010, "Member 'FEndDataTableShopItem::ItemType' has a wrong offset!");
static_assert(offsetof(FEndDataTableShopItem, ItemID) == 0x000014, "Member 'FEndDataTableShopItem::ItemID' has a wrong offset!");
static_assert(offsetof(FEndDataTableShopItem, ViewFlag) == 0x00001C, "Member 'FEndDataTableShopItem::ViewFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTableShopItem, OverridePrice_Array) == 0x000028, "Member 'FEndDataTableShopItem::OverridePrice_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableShopItem, CountersID_Array) == 0x000038, "Member 'FEndDataTableShopItem::CountersID_Array' has a wrong offset!");

// ScriptStruct EndGame.EndCharacterPushCollisionData
// 0x0028 (0x0028 - 0x0000)
struct FEndCharacterPushCollisionData final
{
public:
	class FName                                   SocketName;                                        // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Offset;                                            // 0x0008(0x000C)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CapsuleHalfHeight;                                 // 0x0014(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CapsuleRadius;                                     // 0x0018(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CharaPartsSpecID;                                  // 0x001C(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreDodgeRoll;                                  // 0x0024(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndCharacterPushCollisionData) == 0x000004, "Wrong alignment on FEndCharacterPushCollisionData");
static_assert(sizeof(FEndCharacterPushCollisionData) == 0x000028, "Wrong size on FEndCharacterPushCollisionData");
static_assert(offsetof(FEndCharacterPushCollisionData, SocketName) == 0x000000, "Member 'FEndCharacterPushCollisionData::SocketName' has a wrong offset!");
static_assert(offsetof(FEndCharacterPushCollisionData, Offset) == 0x000008, "Member 'FEndCharacterPushCollisionData::Offset' has a wrong offset!");
static_assert(offsetof(FEndCharacterPushCollisionData, CapsuleHalfHeight) == 0x000014, "Member 'FEndCharacterPushCollisionData::CapsuleHalfHeight' has a wrong offset!");
static_assert(offsetof(FEndCharacterPushCollisionData, CapsuleRadius) == 0x000018, "Member 'FEndCharacterPushCollisionData::CapsuleRadius' has a wrong offset!");
static_assert(offsetof(FEndCharacterPushCollisionData, CharaPartsSpecID) == 0x00001C, "Member 'FEndCharacterPushCollisionData::CharaPartsSpecID' has a wrong offset!");
static_assert(offsetof(FEndCharacterPushCollisionData, bIgnoreDodgeRoll) == 0x000024, "Member 'FEndCharacterPushCollisionData::bIgnoreDodgeRoll' has a wrong offset!");

// ScriptStruct EndGame.EndColorPaletteData
// 0x002C (0x002C - 0x0000)
struct FEndColorPaletteData final
{
public:
	struct FLinearColor                           Color;                                             // 0x0000(0x0010)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           VelocityColor;                                     // 0x0010(0x0010)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Intensity;                                         // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VelocityIntensity;                                 // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AnimateTimeFrequency;                              // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndColorPaletteData) == 0x000004, "Wrong alignment on FEndColorPaletteData");
static_assert(sizeof(FEndColorPaletteData) == 0x00002C, "Wrong size on FEndColorPaletteData");
static_assert(offsetof(FEndColorPaletteData, Color) == 0x000000, "Member 'FEndColorPaletteData::Color' has a wrong offset!");
static_assert(offsetof(FEndColorPaletteData, VelocityColor) == 0x000010, "Member 'FEndColorPaletteData::VelocityColor' has a wrong offset!");
static_assert(offsetof(FEndColorPaletteData, Intensity) == 0x000020, "Member 'FEndColorPaletteData::Intensity' has a wrong offset!");
static_assert(offsetof(FEndColorPaletteData, VelocityIntensity) == 0x000024, "Member 'FEndColorPaletteData::VelocityIntensity' has a wrong offset!");
static_assert(offsetof(FEndColorPaletteData, AnimateTimeFrequency) == 0x000028, "Member 'FEndColorPaletteData::AnimateTimeFrequency' has a wrong offset!");

// ScriptStruct EndGame.EndColorPaletteMaterial
// 0x0088 (0x0088 - 0x0000)
struct FEndColorPaletteMaterial final
{
public:
	struct FEndColorPaletteData                   Default;                                           // 0x0000(0x002C)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, struct FEndColorPaletteData> Override;                                          // 0x0030(0x0050)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bUseVelocity;                                      // 0x0080(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndColorPaletteMaterial) == 0x000008, "Wrong alignment on FEndColorPaletteMaterial");
static_assert(sizeof(FEndColorPaletteMaterial) == 0x000088, "Wrong size on FEndColorPaletteMaterial");
static_assert(offsetof(FEndColorPaletteMaterial, Default) == 0x000000, "Member 'FEndColorPaletteMaterial::Default' has a wrong offset!");
static_assert(offsetof(FEndColorPaletteMaterial, Override) == 0x000030, "Member 'FEndColorPaletteMaterial::Override' has a wrong offset!");
static_assert(offsetof(FEndColorPaletteMaterial, bUseVelocity) == 0x000080, "Member 'FEndColorPaletteMaterial::bUseVelocity' has a wrong offset!");

// ScriptStruct EndGame.EndPlayerStatus
// 0x0038 (0x0038 - 0x0000)
struct FEndPlayerStatus final
{
public:
	int32                                         HPMax;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MPMax;                                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PhysicsAttack;                                     // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MagicAttack;                                       // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PhysicsDefense;                                    // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MagicDefense;                                      // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Strength;                                          // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Magic;                                             // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Vitality;                                          // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Spirit;                                            // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Luck;                                              // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CriticalRate;                                      // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Dexterity;                                         // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndPlayerStatus) == 0x000004, "Wrong alignment on FEndPlayerStatus");
static_assert(sizeof(FEndPlayerStatus) == 0x000038, "Wrong size on FEndPlayerStatus");
static_assert(offsetof(FEndPlayerStatus, HPMax) == 0x000000, "Member 'FEndPlayerStatus::HPMax' has a wrong offset!");
static_assert(offsetof(FEndPlayerStatus, MPMax) == 0x000004, "Member 'FEndPlayerStatus::MPMax' has a wrong offset!");
static_assert(offsetof(FEndPlayerStatus, PhysicsAttack) == 0x000008, "Member 'FEndPlayerStatus::PhysicsAttack' has a wrong offset!");
static_assert(offsetof(FEndPlayerStatus, MagicAttack) == 0x00000C, "Member 'FEndPlayerStatus::MagicAttack' has a wrong offset!");
static_assert(offsetof(FEndPlayerStatus, PhysicsDefense) == 0x000010, "Member 'FEndPlayerStatus::PhysicsDefense' has a wrong offset!");
static_assert(offsetof(FEndPlayerStatus, MagicDefense) == 0x000014, "Member 'FEndPlayerStatus::MagicDefense' has a wrong offset!");
static_assert(offsetof(FEndPlayerStatus, Strength) == 0x000018, "Member 'FEndPlayerStatus::Strength' has a wrong offset!");
static_assert(offsetof(FEndPlayerStatus, Magic) == 0x00001C, "Member 'FEndPlayerStatus::Magic' has a wrong offset!");
static_assert(offsetof(FEndPlayerStatus, Vitality) == 0x000020, "Member 'FEndPlayerStatus::Vitality' has a wrong offset!");
static_assert(offsetof(FEndPlayerStatus, Spirit) == 0x000024, "Member 'FEndPlayerStatus::Spirit' has a wrong offset!");
static_assert(offsetof(FEndPlayerStatus, Luck) == 0x000028, "Member 'FEndPlayerStatus::Luck' has a wrong offset!");
static_assert(offsetof(FEndPlayerStatus, CriticalRate) == 0x00002C, "Member 'FEndPlayerStatus::CriticalRate' has a wrong offset!");
static_assert(offsetof(FEndPlayerStatus, Dexterity) == 0x000030, "Member 'FEndPlayerStatus::Dexterity' has a wrong offset!");
static_assert(offsetof(FEndPlayerStatus, Level) == 0x000034, "Member 'FEndPlayerStatus::Level' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableBattleCharaCameraFlavor
// 0x0008 (0x0010 - 0x0008)
struct FEndDataTableBattleCharaCameraFlavor final : public FEndDataTableRowBase
{
public:
	class FName                                   CameraFlavorID0;                                   // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableBattleCharaCameraFlavor) == 0x000008, "Wrong alignment on FEndDataTableBattleCharaCameraFlavor");
static_assert(sizeof(FEndDataTableBattleCharaCameraFlavor) == 0x000010, "Wrong size on FEndDataTableBattleCharaCameraFlavor");
static_assert(offsetof(FEndDataTableBattleCharaCameraFlavor, CameraFlavorID0) == 0x000008, "Member 'FEndDataTableBattleCharaCameraFlavor::CameraFlavorID0' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableBattleScenePopGroup
// 0x0050 (0x0058 - 0x0008)
struct FEndDataTableBattleScenePopGroup final : public FEndDataTableRowBase
{
public:
	int32                                         Min;                                               // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Max;                                               // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RepopMax;                                          // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IntervalTime;                                      // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IntervalTimeRand;                                  // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           NavNameList_Array;                                 // 0x0020(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           BattleScenePopTableList_Array;                     // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 Uniqueindex_Array;                                 // 0x0040(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         IgnoreFirstRepopInterval;                          // 0x0050(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableBattleScenePopGroup) == 0x000008, "Wrong alignment on FEndDataTableBattleScenePopGroup");
static_assert(sizeof(FEndDataTableBattleScenePopGroup) == 0x000058, "Wrong size on FEndDataTableBattleScenePopGroup");
static_assert(offsetof(FEndDataTableBattleScenePopGroup, Min) == 0x000008, "Member 'FEndDataTableBattleScenePopGroup::Min' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleScenePopGroup, Max) == 0x00000C, "Member 'FEndDataTableBattleScenePopGroup::Max' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleScenePopGroup, RepopMax) == 0x000010, "Member 'FEndDataTableBattleScenePopGroup::RepopMax' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleScenePopGroup, IntervalTime) == 0x000014, "Member 'FEndDataTableBattleScenePopGroup::IntervalTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleScenePopGroup, IntervalTimeRand) == 0x000018, "Member 'FEndDataTableBattleScenePopGroup::IntervalTimeRand' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleScenePopGroup, NavNameList_Array) == 0x000020, "Member 'FEndDataTableBattleScenePopGroup::NavNameList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleScenePopGroup, BattleScenePopTableList_Array) == 0x000030, "Member 'FEndDataTableBattleScenePopGroup::BattleScenePopTableList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleScenePopGroup, Uniqueindex_Array) == 0x000040, "Member 'FEndDataTableBattleScenePopGroup::Uniqueindex_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleScenePopGroup, IgnoreFirstRepopInterval) == 0x000050, "Member 'FEndDataTableBattleScenePopGroup::IgnoreFirstRepopInterval' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableActionGroup
// 0x0010 (0x0018 - 0x0008)
struct FEndDataTableActionGroup final : public FEndDataTableRowBase
{
public:
	TArray<class FName>                           ActionGroupLIst_Array;                             // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableActionGroup) == 0x000008, "Wrong alignment on FEndDataTableActionGroup");
static_assert(sizeof(FEndDataTableActionGroup) == 0x000018, "Wrong size on FEndDataTableActionGroup");
static_assert(offsetof(FEndDataTableActionGroup, ActionGroupLIst_Array) == 0x000008, "Member 'FEndDataTableActionGroup::ActionGroupLIst_Array' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableAutoCameraImaginaryLineLogic
// 0x0040 (0x0048 - 0x0008)
struct FEndDataTableAutoCameraImaginaryLineLogic final : public FEndDataTableRowBase
{
public:
	class FString                                 NextID;                                            // 0x0008(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 Condition_Array;                                   // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         Param_Array;                                       // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         SuccessID_Array;                                   // 0x0038(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableAutoCameraImaginaryLineLogic) == 0x000008, "Wrong alignment on FEndDataTableAutoCameraImaginaryLineLogic");
static_assert(sizeof(FEndDataTableAutoCameraImaginaryLineLogic) == 0x000048, "Wrong size on FEndDataTableAutoCameraImaginaryLineLogic");
static_assert(offsetof(FEndDataTableAutoCameraImaginaryLineLogic, NextID) == 0x000008, "Member 'FEndDataTableAutoCameraImaginaryLineLogic::NextID' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraImaginaryLineLogic, Condition_Array) == 0x000018, "Member 'FEndDataTableAutoCameraImaginaryLineLogic::Condition_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraImaginaryLineLogic, Param_Array) == 0x000028, "Member 'FEndDataTableAutoCameraImaginaryLineLogic::Param_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraImaginaryLineLogic, SuccessID_Array) == 0x000038, "Member 'FEndDataTableAutoCameraImaginaryLineLogic::SuccessID_Array' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableTriggerEffect
// 0x0018 (0x0020 - 0x0008)
struct FEndDataTableTriggerEffect final : public FEndDataTableRowBase
{
public:
	uint8                                         TriggerType;                                       // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         EffectMode;                                        // 0x0009(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 Parameter_Array;                                   // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableTriggerEffect) == 0x000008, "Wrong alignment on FEndDataTableTriggerEffect");
static_assert(sizeof(FEndDataTableTriggerEffect) == 0x000020, "Wrong size on FEndDataTableTriggerEffect");
static_assert(offsetof(FEndDataTableTriggerEffect, TriggerType) == 0x000008, "Member 'FEndDataTableTriggerEffect::TriggerType' has a wrong offset!");
static_assert(offsetof(FEndDataTableTriggerEffect, EffectMode) == 0x000009, "Member 'FEndDataTableTriggerEffect::EffectMode' has a wrong offset!");
static_assert(offsetof(FEndDataTableTriggerEffect, Parameter_Array) == 0x000010, "Member 'FEndDataTableTriggerEffect::Parameter_Array' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableAutoCameraLightGroup
// 0x0020 (0x0028 - 0x0008)
struct FEndDataTableAutoCameraLightGroup final : public FEndDataTableRowBase
{
public:
	TArray<class FName>                           Light_Array;                                       // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         EnvBakedLightIntensity;                            // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CameraFValue;                                      // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExposureBias;                                      // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableAutoCameraLightGroup) == 0x000008, "Wrong alignment on FEndDataTableAutoCameraLightGroup");
static_assert(sizeof(FEndDataTableAutoCameraLightGroup) == 0x000028, "Wrong size on FEndDataTableAutoCameraLightGroup");
static_assert(offsetof(FEndDataTableAutoCameraLightGroup, Light_Array) == 0x000008, "Member 'FEndDataTableAutoCameraLightGroup::Light_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraLightGroup, EnvBakedLightIntensity) == 0x000018, "Member 'FEndDataTableAutoCameraLightGroup::EnvBakedLightIntensity' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraLightGroup, CameraFValue) == 0x00001C, "Member 'FEndDataTableAutoCameraLightGroup::CameraFValue' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraLightGroup, ExposureBias) == 0x000020, "Member 'FEndDataTableAutoCameraLightGroup::ExposureBias' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableSituationTrigger
// 0x0040 (0x0048 - 0x0008)
struct FEndDataTableSituationTrigger final : public FEndDataTableRowBase
{
public:
	uint8                                         Type;                                              // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         StringArgument_Array;                              // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 IntegerArgument_Array;                             // 0x0020(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   PlaySituationAction;                               // 0x0030(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           EffectPointName_Array;                             // 0x0038(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableSituationTrigger) == 0x000008, "Wrong alignment on FEndDataTableSituationTrigger");
static_assert(sizeof(FEndDataTableSituationTrigger) == 0x000048, "Wrong size on FEndDataTableSituationTrigger");
static_assert(offsetof(FEndDataTableSituationTrigger, Type) == 0x000008, "Member 'FEndDataTableSituationTrigger::Type' has a wrong offset!");
static_assert(offsetof(FEndDataTableSituationTrigger, StringArgument_Array) == 0x000010, "Member 'FEndDataTableSituationTrigger::StringArgument_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableSituationTrigger, IntegerArgument_Array) == 0x000020, "Member 'FEndDataTableSituationTrigger::IntegerArgument_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableSituationTrigger, PlaySituationAction) == 0x000030, "Member 'FEndDataTableSituationTrigger::PlaySituationAction' has a wrong offset!");
static_assert(offsetof(FEndDataTableSituationTrigger, EffectPointName_Array) == 0x000038, "Member 'FEndDataTableSituationTrigger::EffectPointName_Array' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableAutoCameraPositionInfo
// 0x0018 (0x0020 - 0x0008)
struct FEndDataTableAutoCameraPositionInfo final : public FEndDataTableRowBase
{
public:
	float                                         Xoffset;                                           // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Yoffset;                                           // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Xrange;                                            // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Yrange;                                            // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Zrange;                                            // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableAutoCameraPositionInfo) == 0x000008, "Wrong alignment on FEndDataTableAutoCameraPositionInfo");
static_assert(sizeof(FEndDataTableAutoCameraPositionInfo) == 0x000020, "Wrong size on FEndDataTableAutoCameraPositionInfo");
static_assert(offsetof(FEndDataTableAutoCameraPositionInfo, Xoffset) == 0x000008, "Member 'FEndDataTableAutoCameraPositionInfo::Xoffset' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraPositionInfo, Yoffset) == 0x00000C, "Member 'FEndDataTableAutoCameraPositionInfo::Yoffset' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraPositionInfo, Xrange) == 0x000010, "Member 'FEndDataTableAutoCameraPositionInfo::Xrange' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraPositionInfo, Yrange) == 0x000014, "Member 'FEndDataTableAutoCameraPositionInfo::Yrange' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraPositionInfo, Zrange) == 0x000018, "Member 'FEndDataTableAutoCameraPositionInfo::Zrange' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableAutoCameraPositionLogic
// 0x0060 (0x0068 - 0x0008)
struct FEndDataTableAutoCameraPositionLogic final : public FEndDataTableRowBase
{
public:
	class FString                                 NextID;                                            // 0x0008(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 Condition_Array;                                   // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         Param_Array;                                       // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         Target_Array;                                      // 0x0038(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         PositionInfo_Array;                                // 0x0048(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         FailedNextID_Array;                                // 0x0058(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableAutoCameraPositionLogic) == 0x000008, "Wrong alignment on FEndDataTableAutoCameraPositionLogic");
static_assert(sizeof(FEndDataTableAutoCameraPositionLogic) == 0x000068, "Wrong size on FEndDataTableAutoCameraPositionLogic");
static_assert(offsetof(FEndDataTableAutoCameraPositionLogic, NextID) == 0x000008, "Member 'FEndDataTableAutoCameraPositionLogic::NextID' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraPositionLogic, Condition_Array) == 0x000018, "Member 'FEndDataTableAutoCameraPositionLogic::Condition_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraPositionLogic, Param_Array) == 0x000028, "Member 'FEndDataTableAutoCameraPositionLogic::Param_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraPositionLogic, Target_Array) == 0x000038, "Member 'FEndDataTableAutoCameraPositionLogic::Target_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraPositionLogic, PositionInfo_Array) == 0x000048, "Member 'FEndDataTableAutoCameraPositionLogic::PositionInfo_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraPositionLogic, FailedNextID_Array) == 0x000058, "Member 'FEndDataTableAutoCameraPositionLogic::FailedNextID_Array' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableAutoCameraShotInfo
// 0x0088 (0x0090 - 0x0008)
struct FEndDataTableAutoCameraShotInfo final : public FEndDataTableRowBase
{
public:
	int32                                         ShotType;                                          // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LocationLock;                                      // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OverwriteListner;                                  // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SocketName;                                        // 0x0018(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AimRelativeRate;                                   // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FocusPointX;                                       // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FocusPointY;                                       // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FocusPointZ;                                       // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotatePitch;                                       // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotateYaw;                                         // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotateRoll;                                        // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CameraDist;                                        // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlockCorrectTolerance;                             // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HandShake;                                         // 0x004C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FOV;                                               // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UseSocketAllRotate;                                // 0x0054(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShotBaseDist;                                      // 0x0058(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngleDistCorrection;                               // 0x005C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngleRotateCorrection;                             // 0x0060(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistCorrection;                                    // 0x0064(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         YawCorrection;                                     // 0x0068(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         XOffsetCorrection;                                 // 0x006C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         YOffsetCorrection;                                 // 0x0070(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ZOffsetCorrection;                                 // 0x0074(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LightGroup;                                        // 0x0078(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BlendTime;                                         // 0x0080(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NextShot;                                          // 0x0084(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableAutoCameraShotInfo) == 0x000008, "Wrong alignment on FEndDataTableAutoCameraShotInfo");
static_assert(sizeof(FEndDataTableAutoCameraShotInfo) == 0x000090, "Wrong size on FEndDataTableAutoCameraShotInfo");
static_assert(offsetof(FEndDataTableAutoCameraShotInfo, ShotType) == 0x000008, "Member 'FEndDataTableAutoCameraShotInfo::ShotType' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraShotInfo, LocationLock) == 0x00000C, "Member 'FEndDataTableAutoCameraShotInfo::LocationLock' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraShotInfo, OverwriteListner) == 0x000010, "Member 'FEndDataTableAutoCameraShotInfo::OverwriteListner' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraShotInfo, SocketName) == 0x000018, "Member 'FEndDataTableAutoCameraShotInfo::SocketName' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraShotInfo, AimRelativeRate) == 0x000028, "Member 'FEndDataTableAutoCameraShotInfo::AimRelativeRate' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraShotInfo, FocusPointX) == 0x00002C, "Member 'FEndDataTableAutoCameraShotInfo::FocusPointX' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraShotInfo, FocusPointY) == 0x000030, "Member 'FEndDataTableAutoCameraShotInfo::FocusPointY' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraShotInfo, FocusPointZ) == 0x000034, "Member 'FEndDataTableAutoCameraShotInfo::FocusPointZ' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraShotInfo, RotatePitch) == 0x000038, "Member 'FEndDataTableAutoCameraShotInfo::RotatePitch' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraShotInfo, RotateYaw) == 0x00003C, "Member 'FEndDataTableAutoCameraShotInfo::RotateYaw' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraShotInfo, RotateRoll) == 0x000040, "Member 'FEndDataTableAutoCameraShotInfo::RotateRoll' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraShotInfo, CameraDist) == 0x000044, "Member 'FEndDataTableAutoCameraShotInfo::CameraDist' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraShotInfo, BlockCorrectTolerance) == 0x000048, "Member 'FEndDataTableAutoCameraShotInfo::BlockCorrectTolerance' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraShotInfo, HandShake) == 0x00004C, "Member 'FEndDataTableAutoCameraShotInfo::HandShake' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraShotInfo, FOV) == 0x000050, "Member 'FEndDataTableAutoCameraShotInfo::FOV' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraShotInfo, UseSocketAllRotate) == 0x000054, "Member 'FEndDataTableAutoCameraShotInfo::UseSocketAllRotate' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraShotInfo, ShotBaseDist) == 0x000058, "Member 'FEndDataTableAutoCameraShotInfo::ShotBaseDist' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraShotInfo, AngleDistCorrection) == 0x00005C, "Member 'FEndDataTableAutoCameraShotInfo::AngleDistCorrection' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraShotInfo, AngleRotateCorrection) == 0x000060, "Member 'FEndDataTableAutoCameraShotInfo::AngleRotateCorrection' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraShotInfo, DistCorrection) == 0x000064, "Member 'FEndDataTableAutoCameraShotInfo::DistCorrection' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraShotInfo, YawCorrection) == 0x000068, "Member 'FEndDataTableAutoCameraShotInfo::YawCorrection' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraShotInfo, XOffsetCorrection) == 0x00006C, "Member 'FEndDataTableAutoCameraShotInfo::XOffsetCorrection' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraShotInfo, YOffsetCorrection) == 0x000070, "Member 'FEndDataTableAutoCameraShotInfo::YOffsetCorrection' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraShotInfo, ZOffsetCorrection) == 0x000074, "Member 'FEndDataTableAutoCameraShotInfo::ZOffsetCorrection' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraShotInfo, LightGroup) == 0x000078, "Member 'FEndDataTableAutoCameraShotInfo::LightGroup' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraShotInfo, BlendTime) == 0x000080, "Member 'FEndDataTableAutoCameraShotInfo::BlendTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableAutoCameraShotInfo, NextShot) == 0x000084, "Member 'FEndDataTableAutoCameraShotInfo::NextShot' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableBattleAIActionAbility
// 0x0080 (0x0088 - 0x0008)
struct FEndDataTableBattleAIActionAbility final : public FEndDataTableRowBase
{
public:
	class FString                                 CharaSpec;                                         // 0x0008(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ActionName;                                        // 0x0018(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InAbilityID;                                       // 0x0028(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         InID;                                              // 0x0030(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InTime;                                            // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InTimeout;                                         // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InATB;                                             // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InRandomATB;                                       // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InMinRange;                                        // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InMaxRange;                                        // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InActionMin;                                       // 0x004C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InActionMax;                                       // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InActionHeightMin;                                 // 0x0054(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InActionHeightMax;                                 // 0x0058(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InViewRange;                                       // 0x005C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ViewReverse;                                       // 0x0060(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InDelayMove;                                       // 0x0064(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InDelayAbility;                                    // 0x0068(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InRandomDelayAbility;                              // 0x006C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InNeedMove;                                        // 0x0070(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InNeedBetterMove;                                  // 0x0071(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InAerialNeedMove;                                  // 0x0072(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InCancelLostTarget;                                // 0x0073(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OverrideLeftAbility;                               // 0x0074(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OverrideRightAbility;                              // 0x007C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Purpose;                                           // 0x0084(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InNeedSee;                                         // 0x0085(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_86[0x2];                                       // 0x0086(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableBattleAIActionAbility) == 0x000008, "Wrong alignment on FEndDataTableBattleAIActionAbility");
static_assert(sizeof(FEndDataTableBattleAIActionAbility) == 0x000088, "Wrong size on FEndDataTableBattleAIActionAbility");
static_assert(offsetof(FEndDataTableBattleAIActionAbility, CharaSpec) == 0x000008, "Member 'FEndDataTableBattleAIActionAbility::CharaSpec' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAIActionAbility, ActionName) == 0x000018, "Member 'FEndDataTableBattleAIActionAbility::ActionName' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAIActionAbility, InAbilityID) == 0x000028, "Member 'FEndDataTableBattleAIActionAbility::InAbilityID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAIActionAbility, InID) == 0x000030, "Member 'FEndDataTableBattleAIActionAbility::InID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAIActionAbility, InTime) == 0x000034, "Member 'FEndDataTableBattleAIActionAbility::InTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAIActionAbility, InTimeout) == 0x000038, "Member 'FEndDataTableBattleAIActionAbility::InTimeout' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAIActionAbility, InATB) == 0x00003C, "Member 'FEndDataTableBattleAIActionAbility::InATB' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAIActionAbility, InRandomATB) == 0x000040, "Member 'FEndDataTableBattleAIActionAbility::InRandomATB' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAIActionAbility, InMinRange) == 0x000044, "Member 'FEndDataTableBattleAIActionAbility::InMinRange' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAIActionAbility, InMaxRange) == 0x000048, "Member 'FEndDataTableBattleAIActionAbility::InMaxRange' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAIActionAbility, InActionMin) == 0x00004C, "Member 'FEndDataTableBattleAIActionAbility::InActionMin' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAIActionAbility, InActionMax) == 0x000050, "Member 'FEndDataTableBattleAIActionAbility::InActionMax' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAIActionAbility, InActionHeightMin) == 0x000054, "Member 'FEndDataTableBattleAIActionAbility::InActionHeightMin' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAIActionAbility, InActionHeightMax) == 0x000058, "Member 'FEndDataTableBattleAIActionAbility::InActionHeightMax' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAIActionAbility, InViewRange) == 0x00005C, "Member 'FEndDataTableBattleAIActionAbility::InViewRange' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAIActionAbility, ViewReverse) == 0x000060, "Member 'FEndDataTableBattleAIActionAbility::ViewReverse' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAIActionAbility, InDelayMove) == 0x000064, "Member 'FEndDataTableBattleAIActionAbility::InDelayMove' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAIActionAbility, InDelayAbility) == 0x000068, "Member 'FEndDataTableBattleAIActionAbility::InDelayAbility' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAIActionAbility, InRandomDelayAbility) == 0x00006C, "Member 'FEndDataTableBattleAIActionAbility::InRandomDelayAbility' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAIActionAbility, InNeedMove) == 0x000070, "Member 'FEndDataTableBattleAIActionAbility::InNeedMove' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAIActionAbility, InNeedBetterMove) == 0x000071, "Member 'FEndDataTableBattleAIActionAbility::InNeedBetterMove' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAIActionAbility, InAerialNeedMove) == 0x000072, "Member 'FEndDataTableBattleAIActionAbility::InAerialNeedMove' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAIActionAbility, InCancelLostTarget) == 0x000073, "Member 'FEndDataTableBattleAIActionAbility::InCancelLostTarget' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAIActionAbility, OverrideLeftAbility) == 0x000074, "Member 'FEndDataTableBattleAIActionAbility::OverrideLeftAbility' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAIActionAbility, OverrideRightAbility) == 0x00007C, "Member 'FEndDataTableBattleAIActionAbility::OverrideRightAbility' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAIActionAbility, Purpose) == 0x000084, "Member 'FEndDataTableBattleAIActionAbility::Purpose' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAIActionAbility, InNeedSee) == 0x000085, "Member 'FEndDataTableBattleAIActionAbility::InNeedSee' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableCutSceneBindActorList
// 0x0030 (0x0038 - 0x0008)
struct FEndDataTableCutSceneBindActorList final : public FEndDataTableRowBase
{
public:
	TArray<class FName>                           BindActorName_Array;                               // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           BindStateTriggerName_Array;                        // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 BindStateTriggerTime_Array;                        // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableCutSceneBindActorList) == 0x000008, "Wrong alignment on FEndDataTableCutSceneBindActorList");
static_assert(sizeof(FEndDataTableCutSceneBindActorList) == 0x000038, "Wrong size on FEndDataTableCutSceneBindActorList");
static_assert(offsetof(FEndDataTableCutSceneBindActorList, BindActorName_Array) == 0x000008, "Member 'FEndDataTableCutSceneBindActorList::BindActorName_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneBindActorList, BindStateTriggerName_Array) == 0x000018, "Member 'FEndDataTableCutSceneBindActorList::BindStateTriggerName_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneBindActorList, BindStateTriggerTime_Array) == 0x000028, "Member 'FEndDataTableCutSceneBindActorList::BindStateTriggerTime_Array' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableBattleAIActionCombo
// 0x00B8 (0x00C0 - 0x0008)
struct FEndDataTableBattleAIActionCombo final : public FEndDataTableRowBase
{
public:
	class FString                                 CharaSpec;                                         // 0x0008(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ActionName;                                        // 0x0018(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InTime;                                            // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InATB;                                             // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InRandomATB;                                       // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 InAction1;                                         // 0x0038(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InAction2;                                         // 0x0048(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InAction3;                                         // 0x0058(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InAction4;                                         // 0x0068(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InAction5;                                         // 0x0078(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InAction6;                                         // 0x0088(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InAction7;                                         // 0x0098(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InAction8;                                         // 0x00A8(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Lock;                                              // 0x00B8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Timeout;                                           // 0x00B9(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BA[0x6];                                       // 0x00BA(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableBattleAIActionCombo) == 0x000008, "Wrong alignment on FEndDataTableBattleAIActionCombo");
static_assert(sizeof(FEndDataTableBattleAIActionCombo) == 0x0000C0, "Wrong size on FEndDataTableBattleAIActionCombo");
static_assert(offsetof(FEndDataTableBattleAIActionCombo, CharaSpec) == 0x000008, "Member 'FEndDataTableBattleAIActionCombo::CharaSpec' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAIActionCombo, ActionName) == 0x000018, "Member 'FEndDataTableBattleAIActionCombo::ActionName' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAIActionCombo, InTime) == 0x000028, "Member 'FEndDataTableBattleAIActionCombo::InTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAIActionCombo, InATB) == 0x00002C, "Member 'FEndDataTableBattleAIActionCombo::InATB' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAIActionCombo, InRandomATB) == 0x000030, "Member 'FEndDataTableBattleAIActionCombo::InRandomATB' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAIActionCombo, InAction1) == 0x000038, "Member 'FEndDataTableBattleAIActionCombo::InAction1' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAIActionCombo, InAction2) == 0x000048, "Member 'FEndDataTableBattleAIActionCombo::InAction2' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAIActionCombo, InAction3) == 0x000058, "Member 'FEndDataTableBattleAIActionCombo::InAction3' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAIActionCombo, InAction4) == 0x000068, "Member 'FEndDataTableBattleAIActionCombo::InAction4' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAIActionCombo, InAction5) == 0x000078, "Member 'FEndDataTableBattleAIActionCombo::InAction5' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAIActionCombo, InAction6) == 0x000088, "Member 'FEndDataTableBattleAIActionCombo::InAction6' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAIActionCombo, InAction7) == 0x000098, "Member 'FEndDataTableBattleAIActionCombo::InAction7' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAIActionCombo, InAction8) == 0x0000A8, "Member 'FEndDataTableBattleAIActionCombo::InAction8' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAIActionCombo, Lock) == 0x0000B8, "Member 'FEndDataTableBattleAIActionCombo::Lock' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAIActionCombo, Timeout) == 0x0000B9, "Member 'FEndDataTableBattleAIActionCombo::Timeout' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableBikeDamageReaction
// 0x0048 (0x0050 - 0x0008)
struct FEndDataTableBikeDamageReaction final : public FEndDataTableRowBase
{
public:
	uint8                                         EnableOnSuperArmor;                                // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 KnockBackSlide_Array;                              // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 KnockBackYawMin_Array;                             // 0x0020(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 KnockBackYawMax_Array;                             // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 KnockBackYawTime_Array;                            // 0x0040(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableBikeDamageReaction) == 0x000008, "Wrong alignment on FEndDataTableBikeDamageReaction");
static_assert(sizeof(FEndDataTableBikeDamageReaction) == 0x000050, "Wrong size on FEndDataTableBikeDamageReaction");
static_assert(offsetof(FEndDataTableBikeDamageReaction, EnableOnSuperArmor) == 0x000008, "Member 'FEndDataTableBikeDamageReaction::EnableOnSuperArmor' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeDamageReaction, KnockBackSlide_Array) == 0x000010, "Member 'FEndDataTableBikeDamageReaction::KnockBackSlide_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeDamageReaction, KnockBackYawMin_Array) == 0x000020, "Member 'FEndDataTableBikeDamageReaction::KnockBackYawMin_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeDamageReaction, KnockBackYawMax_Array) == 0x000030, "Member 'FEndDataTableBikeDamageReaction::KnockBackYawMax_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeDamageReaction, KnockBackYawTime_Array) == 0x000040, "Member 'FEndDataTableBikeDamageReaction::KnockBackYawTime_Array' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableBattleAIActionMotion
// 0x0028 (0x0030 - 0x0008)
struct FEndDataTableBattleAIActionMotion final : public FEndDataTableRowBase
{
public:
	class FString                                 CharaSpec;                                         // 0x0008(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ActionName;                                        // 0x0018(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InTime;                                            // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InOverrideKeep;                                    // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableBattleAIActionMotion) == 0x000008, "Wrong alignment on FEndDataTableBattleAIActionMotion");
static_assert(sizeof(FEndDataTableBattleAIActionMotion) == 0x000030, "Wrong size on FEndDataTableBattleAIActionMotion");
static_assert(offsetof(FEndDataTableBattleAIActionMotion, CharaSpec) == 0x000008, "Member 'FEndDataTableBattleAIActionMotion::CharaSpec' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAIActionMotion, ActionName) == 0x000018, "Member 'FEndDataTableBattleAIActionMotion::ActionName' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAIActionMotion, InTime) == 0x000028, "Member 'FEndDataTableBattleAIActionMotion::InTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleAIActionMotion, InOverrideKeep) == 0x00002C, "Member 'FEndDataTableBattleAIActionMotion::InOverrideKeep' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableBattleSummonConditions
// 0x00A0 (0x00A8 - 0x0008)
struct FEndDataTableBattleSummonConditions final : public FEndDataTableRowBase
{
public:
	int32                                         Number;                                            // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EnableCallSummonBitField;                          // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EnableCallSummon00;                                // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EnableCallSummon01;                                // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EnableCallSummon02;                                // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EnableCallSummon03;                                // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EnableCallSummon04;                                // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EnableCallSummon05;                                // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EnableCallSummon12;                                // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EnableCallSummon13;                                // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EnableCallSummon14;                                // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EnableCallSummon15;                                // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SummonCoefficient;                                 // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CallMaximumNumber;                                 // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SummonCorrection;                                  // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TriggerBitField;                                   // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Trigger01;                                         // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Trigger02;                                         // 0x004C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Trigger03;                                         // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Trigger04;                                         // 0x0054(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Trigger05;                                         // 0x0058(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartCallValueSizeType;                            // 0x005C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PhaseBitField;                                     // 0x0060(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Phase01;                                           // 0x0064(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Phase02;                                           // 0x0068(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Phase03;                                           // 0x006C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Phase04;                                           // 0x0070(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Phase05;                                           // 0x0074(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Phase06;                                           // 0x0078(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Phase07;                                           // 0x007C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Phase08;                                           // 0x0080(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           EnvSetOffID_Array;                                 // 0x0088(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           EnvSetOnID_Array;                                  // 0x0098(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableBattleSummonConditions) == 0x000008, "Wrong alignment on FEndDataTableBattleSummonConditions");
static_assert(sizeof(FEndDataTableBattleSummonConditions) == 0x0000A8, "Wrong size on FEndDataTableBattleSummonConditions");
static_assert(offsetof(FEndDataTableBattleSummonConditions, Number) == 0x000008, "Member 'FEndDataTableBattleSummonConditions::Number' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonConditions, EnableCallSummonBitField) == 0x00000C, "Member 'FEndDataTableBattleSummonConditions::EnableCallSummonBitField' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonConditions, EnableCallSummon00) == 0x000010, "Member 'FEndDataTableBattleSummonConditions::EnableCallSummon00' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonConditions, EnableCallSummon01) == 0x000014, "Member 'FEndDataTableBattleSummonConditions::EnableCallSummon01' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonConditions, EnableCallSummon02) == 0x000018, "Member 'FEndDataTableBattleSummonConditions::EnableCallSummon02' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonConditions, EnableCallSummon03) == 0x00001C, "Member 'FEndDataTableBattleSummonConditions::EnableCallSummon03' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonConditions, EnableCallSummon04) == 0x000020, "Member 'FEndDataTableBattleSummonConditions::EnableCallSummon04' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonConditions, EnableCallSummon05) == 0x000024, "Member 'FEndDataTableBattleSummonConditions::EnableCallSummon05' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonConditions, EnableCallSummon12) == 0x000028, "Member 'FEndDataTableBattleSummonConditions::EnableCallSummon12' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonConditions, EnableCallSummon13) == 0x00002C, "Member 'FEndDataTableBattleSummonConditions::EnableCallSummon13' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonConditions, EnableCallSummon14) == 0x000030, "Member 'FEndDataTableBattleSummonConditions::EnableCallSummon14' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonConditions, EnableCallSummon15) == 0x000034, "Member 'FEndDataTableBattleSummonConditions::EnableCallSummon15' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonConditions, SummonCoefficient) == 0x000038, "Member 'FEndDataTableBattleSummonConditions::SummonCoefficient' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonConditions, CallMaximumNumber) == 0x00003C, "Member 'FEndDataTableBattleSummonConditions::CallMaximumNumber' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonConditions, SummonCorrection) == 0x000040, "Member 'FEndDataTableBattleSummonConditions::SummonCorrection' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonConditions, TriggerBitField) == 0x000044, "Member 'FEndDataTableBattleSummonConditions::TriggerBitField' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonConditions, Trigger01) == 0x000048, "Member 'FEndDataTableBattleSummonConditions::Trigger01' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonConditions, Trigger02) == 0x00004C, "Member 'FEndDataTableBattleSummonConditions::Trigger02' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonConditions, Trigger03) == 0x000050, "Member 'FEndDataTableBattleSummonConditions::Trigger03' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonConditions, Trigger04) == 0x000054, "Member 'FEndDataTableBattleSummonConditions::Trigger04' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonConditions, Trigger05) == 0x000058, "Member 'FEndDataTableBattleSummonConditions::Trigger05' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonConditions, StartCallValueSizeType) == 0x00005C, "Member 'FEndDataTableBattleSummonConditions::StartCallValueSizeType' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonConditions, PhaseBitField) == 0x000060, "Member 'FEndDataTableBattleSummonConditions::PhaseBitField' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonConditions, Phase01) == 0x000064, "Member 'FEndDataTableBattleSummonConditions::Phase01' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonConditions, Phase02) == 0x000068, "Member 'FEndDataTableBattleSummonConditions::Phase02' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonConditions, Phase03) == 0x00006C, "Member 'FEndDataTableBattleSummonConditions::Phase03' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonConditions, Phase04) == 0x000070, "Member 'FEndDataTableBattleSummonConditions::Phase04' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonConditions, Phase05) == 0x000074, "Member 'FEndDataTableBattleSummonConditions::Phase05' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonConditions, Phase06) == 0x000078, "Member 'FEndDataTableBattleSummonConditions::Phase06' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonConditions, Phase07) == 0x00007C, "Member 'FEndDataTableBattleSummonConditions::Phase07' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonConditions, Phase08) == 0x000080, "Member 'FEndDataTableBattleSummonConditions::Phase08' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonConditions, EnvSetOffID_Array) == 0x000088, "Member 'FEndDataTableBattleSummonConditions::EnvSetOffID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonConditions, EnvSetOnID_Array) == 0x000098, "Member 'FEndDataTableBattleSummonConditions::EnvSetOnID_Array' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableBattleAIOverrideAnim
// 0x0010 (0x0018 - 0x0008)
struct FEndDataTableBattleAIOverrideAnim final : public FEndDataTableRowBase
{
public:
	TArray<class FName>                           anim_Array;                                        // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableBattleAIOverrideAnim) == 0x000008, "Wrong alignment on FEndDataTableBattleAIOverrideAnim");
static_assert(sizeof(FEndDataTableBattleAIOverrideAnim) == 0x000018, "Wrong size on FEndDataTableBattleAIOverrideAnim");
static_assert(offsetof(FEndDataTableBattleAIOverrideAnim, anim_Array) == 0x000008, "Member 'FEndDataTableBattleAIOverrideAnim::anim_Array' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableBattleBreakable
// 0x0080 (0x0088 - 0x0008)
struct FEndDataTableBattleBreakable final : public FEndDataTableRowBase
{
public:
	class FName                                   GroupID;                                           // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LevelID;                                           // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           BattleSceneID_Array;                               // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         StartWithHidden;                                   // 0x0028(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ObjectHP;                                          // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 DamageRate_Array;                                  // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         AnimationID_Array;                                 // 0x0040(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         StateTrigger_Array;                                // 0x0050(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           ReplaceObject_Array;                               // 0x0060(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   BlockingVolumeLevelID;                             // 0x0070(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           BlockingVolumeID_Array;                            // 0x0078(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableBattleBreakable) == 0x000008, "Wrong alignment on FEndDataTableBattleBreakable");
static_assert(sizeof(FEndDataTableBattleBreakable) == 0x000088, "Wrong size on FEndDataTableBattleBreakable");
static_assert(offsetof(FEndDataTableBattleBreakable, GroupID) == 0x000008, "Member 'FEndDataTableBattleBreakable::GroupID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleBreakable, LevelID) == 0x000010, "Member 'FEndDataTableBattleBreakable::LevelID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleBreakable, BattleSceneID_Array) == 0x000018, "Member 'FEndDataTableBattleBreakable::BattleSceneID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleBreakable, StartWithHidden) == 0x000028, "Member 'FEndDataTableBattleBreakable::StartWithHidden' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleBreakable, ObjectHP) == 0x00002C, "Member 'FEndDataTableBattleBreakable::ObjectHP' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleBreakable, DamageRate_Array) == 0x000030, "Member 'FEndDataTableBattleBreakable::DamageRate_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleBreakable, AnimationID_Array) == 0x000040, "Member 'FEndDataTableBattleBreakable::AnimationID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleBreakable, StateTrigger_Array) == 0x000050, "Member 'FEndDataTableBattleBreakable::StateTrigger_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleBreakable, ReplaceObject_Array) == 0x000060, "Member 'FEndDataTableBattleBreakable::ReplaceObject_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleBreakable, BlockingVolumeLevelID) == 0x000070, "Member 'FEndDataTableBattleBreakable::BlockingVolumeLevelID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleBreakable, BlockingVolumeID_Array) == 0x000078, "Member 'FEndDataTableBattleBreakable::BlockingVolumeID_Array' has a wrong offset!");

// ScriptStruct EndGame.EndAutoSeComponentAssetTableNonAttribute
// 0x0038 (0x0038 - 0x0000)
struct FEndAutoSeComponentAssetTableNonAttribute final
{
public:
	int32                                         SoundIndexes[0xE];                                 // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndAutoSeComponentAssetTableNonAttribute) == 0x000004, "Wrong alignment on FEndAutoSeComponentAssetTableNonAttribute");
static_assert(sizeof(FEndAutoSeComponentAssetTableNonAttribute) == 0x000038, "Wrong size on FEndAutoSeComponentAssetTableNonAttribute");
static_assert(offsetof(FEndAutoSeComponentAssetTableNonAttribute, SoundIndexes) == 0x000000, "Member 'FEndAutoSeComponentAssetTableNonAttribute::SoundIndexes' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableBattleCharaSpec
// 0x0170 (0x0178 - 0x0008)
struct FEndDataTableBattleCharaSpec final : public FEndDataTableRowBase
{
public:
	class FName                                   CharaSpecID;                                       // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TextLabel;                                         // 0x0010(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MenuListSortKey;                                   // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         DeadDirection;                                     // 0x0024(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         EnemyCategory;                                     // 0x0025(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26[0x2];                                       // 0x0026(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ParameterTableName;                                // 0x0028(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HPDirect;                                          // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HP;                                                // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BP;                                                // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BurstTime;                                         // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BurstCameraSequenceID;                             // 0x0048(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PhysicsAttack;                                     // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MagicAttack;                                       // 0x0054(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PhysicsDefense;                                    // 0x0058(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MagicDefense;                                      // 0x005C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ATB;                                               // 0x0060(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartATB;                                          // 0x0064(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         PropertyResist0;                                   // 0x0068(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         PropertyResist1;                                   // 0x0069(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6A[0x6];                                       // 0x006A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 AttributeResist_Array;                             // 0x0070(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         RateDamageResist;                                  // 0x0080(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         FixDamageResist;                                   // 0x0081(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_82[0x6];                                       // 0x0082(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 BPDamageCorrectionProperty_Array;                  // 0x0088(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<uint8>                                 BPDamageCorrectionAttribute_Array;                 // 0x0098(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<uint8>                                 StatusChangeResist_Array;                          // 0x00A8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         KeepValue;                                         // 0x00B8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B9[0x3];                                       // 0x00B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   PossessionItemID;                                  // 0x00BC(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ResponseAreaID;                                    // 0x00C4(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Hate;                                              // 0x00CC(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CD[0x3];                                       // 0x00CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AbilityTargetCorrectionDirectionAngle;             // 0x00D0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D4[0x4];                                       // 0x00D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           AbilityID_Array;                                   // 0x00D8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           PartsID_Array;                                     // 0x00E8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   ParentCharacterName;                               // 0x00F8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Shield;                                            // 0x0100(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BCAName;                                           // 0x0108(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           WeakCondition_Array;                               // 0x0110(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<uint8>                                 EffectiveValue_Array;                              // 0x0120(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         CharacterKindID;                                   // 0x0130(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_131[0x3];                                      // 0x0131(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   EnemyBookID;                                       // 0x0134(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EnemyBookIDPlus;                                   // 0x013C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReplaceTargetIconName;                             // 0x0144(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReplaceCameraLockSocketName;                       // 0x014C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         AerialNormalAttackJudgeType;                       // 0x0154(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_155[0x3];                                      // 0x0155(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReactionSensingRangeAngle;                         // 0x0158(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReactionSensingRangeRadiusShort;                   // 0x015C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReactionSensingRangeRadiusMiddle;                  // 0x0160(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReactionSensingRangeRadiusLong;                    // 0x0164(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FlagBit0;                                          // 0x0168(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         HateID;                                            // 0x016C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16D[0x3];                                      // 0x016D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OverrideRadius;                                    // 0x0170(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         LogCharacterType;                                  // 0x0174(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_175[0x3];                                      // 0x0175(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableBattleCharaSpec) == 0x000008, "Wrong alignment on FEndDataTableBattleCharaSpec");
static_assert(sizeof(FEndDataTableBattleCharaSpec) == 0x000178, "Wrong size on FEndDataTableBattleCharaSpec");
static_assert(offsetof(FEndDataTableBattleCharaSpec, CharaSpecID) == 0x000008, "Member 'FEndDataTableBattleCharaSpec::CharaSpecID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaSpec, TextLabel) == 0x000010, "Member 'FEndDataTableBattleCharaSpec::TextLabel' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaSpec, MenuListSortKey) == 0x000020, "Member 'FEndDataTableBattleCharaSpec::MenuListSortKey' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaSpec, DeadDirection) == 0x000024, "Member 'FEndDataTableBattleCharaSpec::DeadDirection' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaSpec, EnemyCategory) == 0x000025, "Member 'FEndDataTableBattleCharaSpec::EnemyCategory' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaSpec, ParameterTableName) == 0x000028, "Member 'FEndDataTableBattleCharaSpec::ParameterTableName' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaSpec, HPDirect) == 0x000038, "Member 'FEndDataTableBattleCharaSpec::HPDirect' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaSpec, HP) == 0x00003C, "Member 'FEndDataTableBattleCharaSpec::HP' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaSpec, BP) == 0x000040, "Member 'FEndDataTableBattleCharaSpec::BP' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaSpec, BurstTime) == 0x000044, "Member 'FEndDataTableBattleCharaSpec::BurstTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaSpec, BurstCameraSequenceID) == 0x000048, "Member 'FEndDataTableBattleCharaSpec::BurstCameraSequenceID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaSpec, PhysicsAttack) == 0x000050, "Member 'FEndDataTableBattleCharaSpec::PhysicsAttack' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaSpec, MagicAttack) == 0x000054, "Member 'FEndDataTableBattleCharaSpec::MagicAttack' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaSpec, PhysicsDefense) == 0x000058, "Member 'FEndDataTableBattleCharaSpec::PhysicsDefense' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaSpec, MagicDefense) == 0x00005C, "Member 'FEndDataTableBattleCharaSpec::MagicDefense' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaSpec, ATB) == 0x000060, "Member 'FEndDataTableBattleCharaSpec::ATB' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaSpec, StartATB) == 0x000064, "Member 'FEndDataTableBattleCharaSpec::StartATB' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaSpec, PropertyResist0) == 0x000068, "Member 'FEndDataTableBattleCharaSpec::PropertyResist0' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaSpec, PropertyResist1) == 0x000069, "Member 'FEndDataTableBattleCharaSpec::PropertyResist1' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaSpec, AttributeResist_Array) == 0x000070, "Member 'FEndDataTableBattleCharaSpec::AttributeResist_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaSpec, RateDamageResist) == 0x000080, "Member 'FEndDataTableBattleCharaSpec::RateDamageResist' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaSpec, FixDamageResist) == 0x000081, "Member 'FEndDataTableBattleCharaSpec::FixDamageResist' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaSpec, BPDamageCorrectionProperty_Array) == 0x000088, "Member 'FEndDataTableBattleCharaSpec::BPDamageCorrectionProperty_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaSpec, BPDamageCorrectionAttribute_Array) == 0x000098, "Member 'FEndDataTableBattleCharaSpec::BPDamageCorrectionAttribute_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaSpec, StatusChangeResist_Array) == 0x0000A8, "Member 'FEndDataTableBattleCharaSpec::StatusChangeResist_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaSpec, KeepValue) == 0x0000B8, "Member 'FEndDataTableBattleCharaSpec::KeepValue' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaSpec, PossessionItemID) == 0x0000BC, "Member 'FEndDataTableBattleCharaSpec::PossessionItemID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaSpec, ResponseAreaID) == 0x0000C4, "Member 'FEndDataTableBattleCharaSpec::ResponseAreaID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaSpec, Hate) == 0x0000CC, "Member 'FEndDataTableBattleCharaSpec::Hate' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaSpec, AbilityTargetCorrectionDirectionAngle) == 0x0000D0, "Member 'FEndDataTableBattleCharaSpec::AbilityTargetCorrectionDirectionAngle' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaSpec, AbilityID_Array) == 0x0000D8, "Member 'FEndDataTableBattleCharaSpec::AbilityID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaSpec, PartsID_Array) == 0x0000E8, "Member 'FEndDataTableBattleCharaSpec::PartsID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaSpec, ParentCharacterName) == 0x0000F8, "Member 'FEndDataTableBattleCharaSpec::ParentCharacterName' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaSpec, Shield) == 0x000100, "Member 'FEndDataTableBattleCharaSpec::Shield' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaSpec, BCAName) == 0x000108, "Member 'FEndDataTableBattleCharaSpec::BCAName' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaSpec, WeakCondition_Array) == 0x000110, "Member 'FEndDataTableBattleCharaSpec::WeakCondition_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaSpec, EffectiveValue_Array) == 0x000120, "Member 'FEndDataTableBattleCharaSpec::EffectiveValue_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaSpec, CharacterKindID) == 0x000130, "Member 'FEndDataTableBattleCharaSpec::CharacterKindID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaSpec, EnemyBookID) == 0x000134, "Member 'FEndDataTableBattleCharaSpec::EnemyBookID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaSpec, EnemyBookIDPlus) == 0x00013C, "Member 'FEndDataTableBattleCharaSpec::EnemyBookIDPlus' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaSpec, ReplaceTargetIconName) == 0x000144, "Member 'FEndDataTableBattleCharaSpec::ReplaceTargetIconName' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaSpec, ReplaceCameraLockSocketName) == 0x00014C, "Member 'FEndDataTableBattleCharaSpec::ReplaceCameraLockSocketName' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaSpec, AerialNormalAttackJudgeType) == 0x000154, "Member 'FEndDataTableBattleCharaSpec::AerialNormalAttackJudgeType' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaSpec, ReactionSensingRangeAngle) == 0x000158, "Member 'FEndDataTableBattleCharaSpec::ReactionSensingRangeAngle' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaSpec, ReactionSensingRangeRadiusShort) == 0x00015C, "Member 'FEndDataTableBattleCharaSpec::ReactionSensingRangeRadiusShort' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaSpec, ReactionSensingRangeRadiusMiddle) == 0x000160, "Member 'FEndDataTableBattleCharaSpec::ReactionSensingRangeRadiusMiddle' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaSpec, ReactionSensingRangeRadiusLong) == 0x000164, "Member 'FEndDataTableBattleCharaSpec::ReactionSensingRangeRadiusLong' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaSpec, FlagBit0) == 0x000168, "Member 'FEndDataTableBattleCharaSpec::FlagBit0' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaSpec, HateID) == 0x00016C, "Member 'FEndDataTableBattleCharaSpec::HateID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaSpec, OverrideRadius) == 0x000170, "Member 'FEndDataTableBattleCharaSpec::OverrideRadius' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaSpec, LogCharacterType) == 0x000174, "Member 'FEndDataTableBattleCharaSpec::LogCharacterType' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableBattleCharaWeakCondition
// 0x0070 (0x0078 - 0x0008)
struct FEndDataTableBattleCharaWeakCondition final : public FEndDataTableRowBase
{
public:
	uint8                                         Element;                                           // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DamagePoint;                                       // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DamageReactionStart;                               // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DamageReactionLoop;                                // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DamageReactionEnd;                                 // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AbnormalTime;                                      // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         AirFall;                                           // 0x002C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   AttachVFX;                                         // 0x0030(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Behavior;                                          // 0x0038(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         KeepDecreasingAmount;                              // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ProtectionTime;                                    // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AccDecreaseStartTime;                              // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AccDecreaseAmount;                                 // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         HitReactionType;                                   // 0x004C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 HitReactionParam_Array;                            // 0x0050(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   HitReactionParamID;                                // 0x0060(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<float>                                 AerialHitReactionParam_Array;                      // 0x0068(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableBattleCharaWeakCondition) == 0x000008, "Wrong alignment on FEndDataTableBattleCharaWeakCondition");
static_assert(sizeof(FEndDataTableBattleCharaWeakCondition) == 0x000078, "Wrong size on FEndDataTableBattleCharaWeakCondition");
static_assert(offsetof(FEndDataTableBattleCharaWeakCondition, Element) == 0x000008, "Member 'FEndDataTableBattleCharaWeakCondition::Element' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaWeakCondition, DamagePoint) == 0x00000C, "Member 'FEndDataTableBattleCharaWeakCondition::DamagePoint' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaWeakCondition, DamageReactionStart) == 0x000010, "Member 'FEndDataTableBattleCharaWeakCondition::DamageReactionStart' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaWeakCondition, DamageReactionLoop) == 0x000018, "Member 'FEndDataTableBattleCharaWeakCondition::DamageReactionLoop' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaWeakCondition, DamageReactionEnd) == 0x000020, "Member 'FEndDataTableBattleCharaWeakCondition::DamageReactionEnd' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaWeakCondition, AbnormalTime) == 0x000028, "Member 'FEndDataTableBattleCharaWeakCondition::AbnormalTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaWeakCondition, AirFall) == 0x00002C, "Member 'FEndDataTableBattleCharaWeakCondition::AirFall' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaWeakCondition, AttachVFX) == 0x000030, "Member 'FEndDataTableBattleCharaWeakCondition::AttachVFX' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaWeakCondition, Behavior) == 0x000038, "Member 'FEndDataTableBattleCharaWeakCondition::Behavior' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaWeakCondition, KeepDecreasingAmount) == 0x00003C, "Member 'FEndDataTableBattleCharaWeakCondition::KeepDecreasingAmount' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaWeakCondition, ProtectionTime) == 0x000040, "Member 'FEndDataTableBattleCharaWeakCondition::ProtectionTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaWeakCondition, AccDecreaseStartTime) == 0x000044, "Member 'FEndDataTableBattleCharaWeakCondition::AccDecreaseStartTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaWeakCondition, AccDecreaseAmount) == 0x000048, "Member 'FEndDataTableBattleCharaWeakCondition::AccDecreaseAmount' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaWeakCondition, HitReactionType) == 0x00004C, "Member 'FEndDataTableBattleCharaWeakCondition::HitReactionType' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaWeakCondition, HitReactionParam_Array) == 0x000050, "Member 'FEndDataTableBattleCharaWeakCondition::HitReactionParam_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaWeakCondition, HitReactionParamID) == 0x000060, "Member 'FEndDataTableBattleCharaWeakCondition::HitReactionParamID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleCharaWeakCondition, AerialHitReactionParam_Array) == 0x000068, "Member 'FEndDataTableBattleCharaWeakCondition::AerialHitReactionParam_Array' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableItem
// 0x0140 (0x0148 - 0x0008)
struct FEndDataTableItem final : public FEndDataTableRowBase
{
public:
	int32                                         UniqueID;                                          // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UniqueIndex;                                       // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ItemNameLabel;                                     // 0x0010(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ItemDetailLabel;                                   // 0x0020(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         CanStack;                                          // 0x0030(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SortValue;                                         // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BuyValue;                                          // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SaleValue;                                         // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         CanSale;                                           // 0x0040(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AbilityID;                                         // 0x0048(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ChangeFlag;                                        // 0x0058(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         InvisibleFlag;                                     // 0x0060(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 IconName;                                          // 0x0068(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TextureName;                                       // 0x0078(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxCount;                                          // 0x0088(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 IncreaseLabel;                                     // 0x0090(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DecreaseLabel;                                     // 0x00A0(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RewardTextID;                                      // 0x00B0(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RewardNotGetTextID;                                // 0x00C0(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Category;                                          // 0x00D0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         CategoryDetail;                                    // 0x00D1(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D2[0x2];                                       // 0x00D2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         EffectiveValue;                                    // 0x00D4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           GettableChapterID_Array;                           // 0x00D8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           ChapterID_Array;                                   // 0x00E8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 CategoryStringArgument00;                          // 0x00F8(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CategoryStringArgument01;                          // 0x0108(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CategoryStringArgument02;                          // 0x0118(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CategoryStringArgument03;                          // 0x0128(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TreasureSpecId;                                    // 0x0138(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   JukeBoxID;                                         // 0x0140(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableItem) == 0x000008, "Wrong alignment on FEndDataTableItem");
static_assert(sizeof(FEndDataTableItem) == 0x000148, "Wrong size on FEndDataTableItem");
static_assert(offsetof(FEndDataTableItem, UniqueID) == 0x000008, "Member 'FEndDataTableItem::UniqueID' has a wrong offset!");
static_assert(offsetof(FEndDataTableItem, UniqueIndex) == 0x00000C, "Member 'FEndDataTableItem::UniqueIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTableItem, ItemNameLabel) == 0x000010, "Member 'FEndDataTableItem::ItemNameLabel' has a wrong offset!");
static_assert(offsetof(FEndDataTableItem, ItemDetailLabel) == 0x000020, "Member 'FEndDataTableItem::ItemDetailLabel' has a wrong offset!");
static_assert(offsetof(FEndDataTableItem, CanStack) == 0x000030, "Member 'FEndDataTableItem::CanStack' has a wrong offset!");
static_assert(offsetof(FEndDataTableItem, SortValue) == 0x000034, "Member 'FEndDataTableItem::SortValue' has a wrong offset!");
static_assert(offsetof(FEndDataTableItem, BuyValue) == 0x000038, "Member 'FEndDataTableItem::BuyValue' has a wrong offset!");
static_assert(offsetof(FEndDataTableItem, SaleValue) == 0x00003C, "Member 'FEndDataTableItem::SaleValue' has a wrong offset!");
static_assert(offsetof(FEndDataTableItem, CanSale) == 0x000040, "Member 'FEndDataTableItem::CanSale' has a wrong offset!");
static_assert(offsetof(FEndDataTableItem, AbilityID) == 0x000048, "Member 'FEndDataTableItem::AbilityID' has a wrong offset!");
static_assert(offsetof(FEndDataTableItem, ChangeFlag) == 0x000058, "Member 'FEndDataTableItem::ChangeFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTableItem, InvisibleFlag) == 0x000060, "Member 'FEndDataTableItem::InvisibleFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTableItem, IconName) == 0x000068, "Member 'FEndDataTableItem::IconName' has a wrong offset!");
static_assert(offsetof(FEndDataTableItem, TextureName) == 0x000078, "Member 'FEndDataTableItem::TextureName' has a wrong offset!");
static_assert(offsetof(FEndDataTableItem, MaxCount) == 0x000088, "Member 'FEndDataTableItem::MaxCount' has a wrong offset!");
static_assert(offsetof(FEndDataTableItem, IncreaseLabel) == 0x000090, "Member 'FEndDataTableItem::IncreaseLabel' has a wrong offset!");
static_assert(offsetof(FEndDataTableItem, DecreaseLabel) == 0x0000A0, "Member 'FEndDataTableItem::DecreaseLabel' has a wrong offset!");
static_assert(offsetof(FEndDataTableItem, RewardTextID) == 0x0000B0, "Member 'FEndDataTableItem::RewardTextID' has a wrong offset!");
static_assert(offsetof(FEndDataTableItem, RewardNotGetTextID) == 0x0000C0, "Member 'FEndDataTableItem::RewardNotGetTextID' has a wrong offset!");
static_assert(offsetof(FEndDataTableItem, Category) == 0x0000D0, "Member 'FEndDataTableItem::Category' has a wrong offset!");
static_assert(offsetof(FEndDataTableItem, CategoryDetail) == 0x0000D1, "Member 'FEndDataTableItem::CategoryDetail' has a wrong offset!");
static_assert(offsetof(FEndDataTableItem, EffectiveValue) == 0x0000D4, "Member 'FEndDataTableItem::EffectiveValue' has a wrong offset!");
static_assert(offsetof(FEndDataTableItem, GettableChapterID_Array) == 0x0000D8, "Member 'FEndDataTableItem::GettableChapterID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableItem, ChapterID_Array) == 0x0000E8, "Member 'FEndDataTableItem::ChapterID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableItem, CategoryStringArgument00) == 0x0000F8, "Member 'FEndDataTableItem::CategoryStringArgument00' has a wrong offset!");
static_assert(offsetof(FEndDataTableItem, CategoryStringArgument01) == 0x000108, "Member 'FEndDataTableItem::CategoryStringArgument01' has a wrong offset!");
static_assert(offsetof(FEndDataTableItem, CategoryStringArgument02) == 0x000118, "Member 'FEndDataTableItem::CategoryStringArgument02' has a wrong offset!");
static_assert(offsetof(FEndDataTableItem, CategoryStringArgument03) == 0x000128, "Member 'FEndDataTableItem::CategoryStringArgument03' has a wrong offset!");
static_assert(offsetof(FEndDataTableItem, TreasureSpecId) == 0x000138, "Member 'FEndDataTableItem::TreasureSpecId' has a wrong offset!");
static_assert(offsetof(FEndDataTableItem, JukeBoxID) == 0x000140, "Member 'FEndDataTableItem::JukeBoxID' has a wrong offset!");

// ScriptStruct EndGame.EndLipSyncAnimation
// 0x0024 (0x0024 - 0x0000)
struct FEndLipSyncAnimation final
{
public:
	struct FRotator                               OffsetMin;                                         // 0x0000(0x000C)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               OffsetMax;                                         // 0x000C(0x000C)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendInTime;                                       // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendOutTime;                                      // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndLipSyncAnimation) == 0x000004, "Wrong alignment on FEndLipSyncAnimation");
static_assert(sizeof(FEndLipSyncAnimation) == 0x000024, "Wrong size on FEndLipSyncAnimation");
static_assert(offsetof(FEndLipSyncAnimation, OffsetMin) == 0x000000, "Member 'FEndLipSyncAnimation::OffsetMin' has a wrong offset!");
static_assert(offsetof(FEndLipSyncAnimation, OffsetMax) == 0x00000C, "Member 'FEndLipSyncAnimation::OffsetMax' has a wrong offset!");
static_assert(offsetof(FEndLipSyncAnimation, Weight) == 0x000018, "Member 'FEndLipSyncAnimation::Weight' has a wrong offset!");
static_assert(offsetof(FEndLipSyncAnimation, BlendInTime) == 0x00001C, "Member 'FEndLipSyncAnimation::BlendInTime' has a wrong offset!");
static_assert(offsetof(FEndLipSyncAnimation, BlendOutTime) == 0x000020, "Member 'FEndLipSyncAnimation::BlendOutTime' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableCharaExchangeTable
// 0x0010 (0x0018 - 0x0008)
struct FEndDataTableCharaExchangeTable final : public FEndDataTableRowBase
{
public:
	class FString                                 MotionFolder;                                      // 0x0008(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableCharaExchangeTable) == 0x000008, "Wrong alignment on FEndDataTableCharaExchangeTable");
static_assert(sizeof(FEndDataTableCharaExchangeTable) == 0x000018, "Wrong size on FEndDataTableCharaExchangeTable");
static_assert(offsetof(FEndDataTableCharaExchangeTable, MotionFolder) == 0x000008, "Member 'FEndDataTableCharaExchangeTable::MotionFolder' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableBattleConditionTrigger
// 0x0068 (0x0070 - 0x0008)
struct FEndDataTableBattleConditionTrigger final : public FEndDataTableRowBase
{
public:
	TArray<class FName>                           EasyConditionType_Array;                           // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         EasyConditionArg_Array;                            // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   TalkPlayTriggerId;                                 // 0x0028(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         TalkPlayTriggerStrArg_Array;                       // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         TriggerMaxNum;                                     // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InvalidEscapeBattle;                               // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TalkStateId;                                       // 0x0048(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           StateTriggerId_Array;                              // 0x0050(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   ConditionIgnoreStoryFlag;                          // 0x0060(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BGMName;                                           // 0x0068(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableBattleConditionTrigger) == 0x000008, "Wrong alignment on FEndDataTableBattleConditionTrigger");
static_assert(sizeof(FEndDataTableBattleConditionTrigger) == 0x000070, "Wrong size on FEndDataTableBattleConditionTrigger");
static_assert(offsetof(FEndDataTableBattleConditionTrigger, EasyConditionType_Array) == 0x000008, "Member 'FEndDataTableBattleConditionTrigger::EasyConditionType_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleConditionTrigger, EasyConditionArg_Array) == 0x000018, "Member 'FEndDataTableBattleConditionTrigger::EasyConditionArg_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleConditionTrigger, TalkPlayTriggerId) == 0x000028, "Member 'FEndDataTableBattleConditionTrigger::TalkPlayTriggerId' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleConditionTrigger, TalkPlayTriggerStrArg_Array) == 0x000030, "Member 'FEndDataTableBattleConditionTrigger::TalkPlayTriggerStrArg_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleConditionTrigger, TriggerMaxNum) == 0x000040, "Member 'FEndDataTableBattleConditionTrigger::TriggerMaxNum' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleConditionTrigger, InvalidEscapeBattle) == 0x000044, "Member 'FEndDataTableBattleConditionTrigger::InvalidEscapeBattle' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleConditionTrigger, TalkStateId) == 0x000048, "Member 'FEndDataTableBattleConditionTrigger::TalkStateId' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleConditionTrigger, StateTriggerId_Array) == 0x000050, "Member 'FEndDataTableBattleConditionTrigger::StateTriggerId_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleConditionTrigger, ConditionIgnoreStoryFlag) == 0x000060, "Member 'FEndDataTableBattleConditionTrigger::ConditionIgnoreStoryFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleConditionTrigger, BGMName) == 0x000068, "Member 'FEndDataTableBattleConditionTrigger::BGMName' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableBattleConditionTriggerEasyCondition
// 0x0018 (0x0020 - 0x0008)
struct FEndDataTableBattleConditionTriggerEasyCondition final : public FEndDataTableRowBase
{
public:
	class FName                                   EasyConditionName;                                 // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VariableType;                                      // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsGlobal;                                          // 0x0014(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IgnoreChara;                                       // 0x0015(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IgnoreOperator;                                    // 0x0016(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IgnoreValue;                                       // 0x0017(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IgnoreTarget;                                      // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IgnoreSubtype;                                     // 0x0019(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ResetCount;                                        // 0x001A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B[0x5];                                       // 0x001B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableBattleConditionTriggerEasyCondition) == 0x000008, "Wrong alignment on FEndDataTableBattleConditionTriggerEasyCondition");
static_assert(sizeof(FEndDataTableBattleConditionTriggerEasyCondition) == 0x000020, "Wrong size on FEndDataTableBattleConditionTriggerEasyCondition");
static_assert(offsetof(FEndDataTableBattleConditionTriggerEasyCondition, EasyConditionName) == 0x000008, "Member 'FEndDataTableBattleConditionTriggerEasyCondition::EasyConditionName' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleConditionTriggerEasyCondition, VariableType) == 0x000010, "Member 'FEndDataTableBattleConditionTriggerEasyCondition::VariableType' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleConditionTriggerEasyCondition, IsGlobal) == 0x000014, "Member 'FEndDataTableBattleConditionTriggerEasyCondition::IsGlobal' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleConditionTriggerEasyCondition, IgnoreChara) == 0x000015, "Member 'FEndDataTableBattleConditionTriggerEasyCondition::IgnoreChara' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleConditionTriggerEasyCondition, IgnoreOperator) == 0x000016, "Member 'FEndDataTableBattleConditionTriggerEasyCondition::IgnoreOperator' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleConditionTriggerEasyCondition, IgnoreValue) == 0x000017, "Member 'FEndDataTableBattleConditionTriggerEasyCondition::IgnoreValue' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleConditionTriggerEasyCondition, IgnoreTarget) == 0x000018, "Member 'FEndDataTableBattleConditionTriggerEasyCondition::IgnoreTarget' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleConditionTriggerEasyCondition, IgnoreSubtype) == 0x000019, "Member 'FEndDataTableBattleConditionTriggerEasyCondition::IgnoreSubtype' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleConditionTriggerEasyCondition, ResetCount) == 0x00001A, "Member 'FEndDataTableBattleConditionTriggerEasyCondition::ResetCount' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableBikeTriggerEffectSetting
// 0x0040 (0x0048 - 0x0008)
struct FEndDataTableBikeTriggerEffectSetting final : public FEndDataTableRowBase
{
public:
	TArray<float>                                 SpeedRange_Array;                                  // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           TriggerID_Array;                                   // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 LowerDelayTime_Array;                              // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 UpperDelayTime_Array;                              // 0x0038(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableBikeTriggerEffectSetting) == 0x000008, "Wrong alignment on FEndDataTableBikeTriggerEffectSetting");
static_assert(sizeof(FEndDataTableBikeTriggerEffectSetting) == 0x000048, "Wrong size on FEndDataTableBikeTriggerEffectSetting");
static_assert(offsetof(FEndDataTableBikeTriggerEffectSetting, SpeedRange_Array) == 0x000008, "Member 'FEndDataTableBikeTriggerEffectSetting::SpeedRange_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeTriggerEffectSetting, TriggerID_Array) == 0x000018, "Member 'FEndDataTableBikeTriggerEffectSetting::TriggerID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeTriggerEffectSetting, LowerDelayTime_Array) == 0x000028, "Member 'FEndDataTableBikeTriggerEffectSetting::LowerDelayTime_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeTriggerEffectSetting, UpperDelayTime_Array) == 0x000038, "Member 'FEndDataTableBikeTriggerEffectSetting::UpperDelayTime_Array' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableBattleConditionTriggerGroup
// 0x0010 (0x0018 - 0x0008)
struct FEndDataTableBattleConditionTriggerGroup final : public FEndDataTableRowBase
{
public:
	TArray<class FName>                           BattleConditionTriggerId_Array;                    // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableBattleConditionTriggerGroup) == 0x000008, "Wrong alignment on FEndDataTableBattleConditionTriggerGroup");
static_assert(sizeof(FEndDataTableBattleConditionTriggerGroup) == 0x000018, "Wrong size on FEndDataTableBattleConditionTriggerGroup");
static_assert(offsetof(FEndDataTableBattleConditionTriggerGroup, BattleConditionTriggerId_Array) == 0x000008, "Member 'FEndDataTableBattleConditionTriggerGroup::BattleConditionTriggerId_Array' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableBattleDamageSourceHitReaction
// 0x0030 (0x0038 - 0x0008)
struct FEndDataTableBattleDamageSourceHitReaction final : public FEndDataTableRowBase
{
public:
	uint8                                         HitReactionType;                                   // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 HitReactionParam_Array;                            // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   HitReactionParamID;                                // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<float>                                 AerialHitReactionParam_Array;                      // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableBattleDamageSourceHitReaction) == 0x000008, "Wrong alignment on FEndDataTableBattleDamageSourceHitReaction");
static_assert(sizeof(FEndDataTableBattleDamageSourceHitReaction) == 0x000038, "Wrong size on FEndDataTableBattleDamageSourceHitReaction");
static_assert(offsetof(FEndDataTableBattleDamageSourceHitReaction, HitReactionType) == 0x000008, "Member 'FEndDataTableBattleDamageSourceHitReaction::HitReactionType' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSourceHitReaction, HitReactionParam_Array) == 0x000010, "Member 'FEndDataTableBattleDamageSourceHitReaction::HitReactionParam_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSourceHitReaction, HitReactionParamID) == 0x000020, "Member 'FEndDataTableBattleDamageSourceHitReaction::HitReactionParamID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSourceHitReaction, AerialHitReactionParam_Array) == 0x000028, "Member 'FEndDataTableBattleDamageSourceHitReaction::AerialHitReactionParam_Array' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableBattleDamageSourceLevel
// 0x0020 (0x0028 - 0x0008)
struct FEndDataTableBattleDamageSourceLevel final : public FEndDataTableRowBase
{
public:
	TArray<class FString>                         TakeDamageActorName_Array;                         // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         TakeDamageStateTrigger_Array;                      // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableBattleDamageSourceLevel) == 0x000008, "Wrong alignment on FEndDataTableBattleDamageSourceLevel");
static_assert(sizeof(FEndDataTableBattleDamageSourceLevel) == 0x000028, "Wrong size on FEndDataTableBattleDamageSourceLevel");
static_assert(offsetof(FEndDataTableBattleDamageSourceLevel, TakeDamageActorName_Array) == 0x000008, "Member 'FEndDataTableBattleDamageSourceLevel::TakeDamageActorName_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleDamageSourceLevel, TakeDamageStateTrigger_Array) == 0x000018, "Member 'FEndDataTableBattleDamageSourceLevel::TakeDamageStateTrigger_Array' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableBattleEnemyIconUI
// 0x0008 (0x0010 - 0x0008)
struct FEndDataTableBattleEnemyIconUI final : public FEndDataTableRowBase
{
public:
	float                                         Value;                                             // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableBattleEnemyIconUI) == 0x000008, "Wrong alignment on FEndDataTableBattleEnemyIconUI");
static_assert(sizeof(FEndDataTableBattleEnemyIconUI) == 0x000010, "Wrong size on FEndDataTableBattleEnemyIconUI");
static_assert(offsetof(FEndDataTableBattleEnemyIconUI, Value) == 0x000008, "Member 'FEndDataTableBattleEnemyIconUI::Value' has a wrong offset!");

// ScriptStruct EndGame.EndMenuImage
// 0x00A0 (0x00A0 - 0x0000)
struct FEndMenuImage final
{
public:
	struct FSlateBrush                            Brush;                                             // 0x0000(0x0078)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FWidgetTransform                       RenderTransform;                                   // 0x0078(0x001C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector2D                              RenderTransformPivot;                              // 0x0094(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndMenuImage) == 0x000008, "Wrong alignment on FEndMenuImage");
static_assert(sizeof(FEndMenuImage) == 0x0000A0, "Wrong size on FEndMenuImage");
static_assert(offsetof(FEndMenuImage, Brush) == 0x000000, "Member 'FEndMenuImage::Brush' has a wrong offset!");
static_assert(offsetof(FEndMenuImage, RenderTransform) == 0x000078, "Member 'FEndMenuImage::RenderTransform' has a wrong offset!");
static_assert(offsetof(FEndMenuImage, RenderTransformPivot) == 0x000094, "Member 'FEndMenuImage::RenderTransformPivot' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableBGMList
// 0x0068 (0x0070 - 0x0008)
struct FEndDataTableBGMList final : public FEndDataTableRowBase
{
public:
	int32                                         UniqueIndex;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BGMName;                                           // 0x000C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SectionName00;                                     // 0x0014(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ModeBGM;                                           // 0x001C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SkipSectionName;                                   // 0x0024(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RestartSectionName;                                // 0x002C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         PauseRestart;                                      // 0x0034(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SectionName02;                                     // 0x0038(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SectionName03;                                     // 0x0040(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SectionName04;                                     // 0x0048(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SectionName05;                                     // 0x0050(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SectionName06;                                     // 0x0058(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SectionName07;                                     // 0x0060(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         IsHighPriorityLoad;                                // 0x0068(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ResolveLanguage;                                   // 0x0069(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6A[0x6];                                       // 0x006A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableBGMList) == 0x000008, "Wrong alignment on FEndDataTableBGMList");
static_assert(sizeof(FEndDataTableBGMList) == 0x000070, "Wrong size on FEndDataTableBGMList");
static_assert(offsetof(FEndDataTableBGMList, UniqueIndex) == 0x000008, "Member 'FEndDataTableBGMList::UniqueIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTableBGMList, BGMName) == 0x00000C, "Member 'FEndDataTableBGMList::BGMName' has a wrong offset!");
static_assert(offsetof(FEndDataTableBGMList, SectionName00) == 0x000014, "Member 'FEndDataTableBGMList::SectionName00' has a wrong offset!");
static_assert(offsetof(FEndDataTableBGMList, ModeBGM) == 0x00001C, "Member 'FEndDataTableBGMList::ModeBGM' has a wrong offset!");
static_assert(offsetof(FEndDataTableBGMList, SkipSectionName) == 0x000024, "Member 'FEndDataTableBGMList::SkipSectionName' has a wrong offset!");
static_assert(offsetof(FEndDataTableBGMList, RestartSectionName) == 0x00002C, "Member 'FEndDataTableBGMList::RestartSectionName' has a wrong offset!");
static_assert(offsetof(FEndDataTableBGMList, PauseRestart) == 0x000034, "Member 'FEndDataTableBGMList::PauseRestart' has a wrong offset!");
static_assert(offsetof(FEndDataTableBGMList, SectionName02) == 0x000038, "Member 'FEndDataTableBGMList::SectionName02' has a wrong offset!");
static_assert(offsetof(FEndDataTableBGMList, SectionName03) == 0x000040, "Member 'FEndDataTableBGMList::SectionName03' has a wrong offset!");
static_assert(offsetof(FEndDataTableBGMList, SectionName04) == 0x000048, "Member 'FEndDataTableBGMList::SectionName04' has a wrong offset!");
static_assert(offsetof(FEndDataTableBGMList, SectionName05) == 0x000050, "Member 'FEndDataTableBGMList::SectionName05' has a wrong offset!");
static_assert(offsetof(FEndDataTableBGMList, SectionName06) == 0x000058, "Member 'FEndDataTableBGMList::SectionName06' has a wrong offset!");
static_assert(offsetof(FEndDataTableBGMList, SectionName07) == 0x000060, "Member 'FEndDataTableBGMList::SectionName07' has a wrong offset!");
static_assert(offsetof(FEndDataTableBGMList, IsHighPriorityLoad) == 0x000068, "Member 'FEndDataTableBGMList::IsHighPriorityLoad' has a wrong offset!");
static_assert(offsetof(FEndDataTableBGMList, ResolveLanguage) == 0x000069, "Member 'FEndDataTableBGMList::ResolveLanguage' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableBattleHitSlow
// 0x0008 (0x0010 - 0x0008)
struct FEndDataTableBattleHitSlow final : public FEndDataTableRowBase
{
public:
	float                                         SpeedScale;                                        // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Time;                                              // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableBattleHitSlow) == 0x000008, "Wrong alignment on FEndDataTableBattleHitSlow");
static_assert(sizeof(FEndDataTableBattleHitSlow) == 0x000010, "Wrong size on FEndDataTableBattleHitSlow");
static_assert(offsetof(FEndDataTableBattleHitSlow, SpeedScale) == 0x000008, "Member 'FEndDataTableBattleHitSlow::SpeedScale' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleHitSlow, Time) == 0x00000C, "Member 'FEndDataTableBattleHitSlow::Time' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableBattleItemPossession
// 0x0080 (0x0088 - 0x0008)
struct FEndDataTableBattleItemPossession final : public FEndDataTableRowBase
{
public:
	int32                                         StealFaildCountArrayIndex;                         // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           NormalItemName_Array;                              // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<uint8>                                 NormalItemPercent_Array;                           // 0x0020(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           RareItemName_Array;                                // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<uint8>                                 RareItemPercent_Array;                             // 0x0040(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           StealItemName_Array;                               // 0x0050(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<uint8>                                 StealItemQuantity_Array;                           // 0x0060(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   EnemyExpID;                                        // 0x0070(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EnemyAPID;                                         // 0x0078(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EnemyGilID;                                        // 0x0080(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableBattleItemPossession) == 0x000008, "Wrong alignment on FEndDataTableBattleItemPossession");
static_assert(sizeof(FEndDataTableBattleItemPossession) == 0x000088, "Wrong size on FEndDataTableBattleItemPossession");
static_assert(offsetof(FEndDataTableBattleItemPossession, StealFaildCountArrayIndex) == 0x000008, "Member 'FEndDataTableBattleItemPossession::StealFaildCountArrayIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleItemPossession, NormalItemName_Array) == 0x000010, "Member 'FEndDataTableBattleItemPossession::NormalItemName_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleItemPossession, NormalItemPercent_Array) == 0x000020, "Member 'FEndDataTableBattleItemPossession::NormalItemPercent_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleItemPossession, RareItemName_Array) == 0x000030, "Member 'FEndDataTableBattleItemPossession::RareItemName_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleItemPossession, RareItemPercent_Array) == 0x000040, "Member 'FEndDataTableBattleItemPossession::RareItemPercent_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleItemPossession, StealItemName_Array) == 0x000050, "Member 'FEndDataTableBattleItemPossession::StealItemName_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleItemPossession, StealItemQuantity_Array) == 0x000060, "Member 'FEndDataTableBattleItemPossession::StealItemQuantity_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleItemPossession, EnemyExpID) == 0x000070, "Member 'FEndDataTableBattleItemPossession::EnemyExpID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleItemPossession, EnemyAPID) == 0x000078, "Member 'FEndDataTableBattleItemPossession::EnemyAPID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleItemPossession, EnemyGilID) == 0x000080, "Member 'FEndDataTableBattleItemPossession::EnemyGilID' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableBattlePlayerParameter
// 0x00C0 (0x00C8 - 0x0008)
struct FEndDataTableBattlePlayerParameter final : public FEndDataTableRowBase
{
public:
	TArray<class FName>                           CharacterAbility_Array;                            // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 DisplayName;                                       // 0x0018(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<float>                                 GuardReactionNoneAddATB_Array;                     // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 GuardReactionNoneDamageCoefficient_Array;          // 0x0038(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 GuardReactionMediumAddATB_Array;                   // 0x0048(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 GuardReactionMediumDamageCoefficient_Array;        // 0x0058(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 GuardReactionLargeAddATB_Array;                    // 0x0068(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 GuardReactionLargeDamageCoefficient_Array;         // 0x0078(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 ChangeDodgeAbilityID;                              // 0x0088(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ChangeDodgeAbilityIDFrog;                          // 0x0098(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           LimitAbilityID_Array;                              // 0x00A8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           LimitAbilityUseableFlag_Array;                     // 0x00B8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableBattlePlayerParameter) == 0x000008, "Wrong alignment on FEndDataTableBattlePlayerParameter");
static_assert(sizeof(FEndDataTableBattlePlayerParameter) == 0x0000C8, "Wrong size on FEndDataTableBattlePlayerParameter");
static_assert(offsetof(FEndDataTableBattlePlayerParameter, CharacterAbility_Array) == 0x000008, "Member 'FEndDataTableBattlePlayerParameter::CharacterAbility_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattlePlayerParameter, DisplayName) == 0x000018, "Member 'FEndDataTableBattlePlayerParameter::DisplayName' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattlePlayerParameter, GuardReactionNoneAddATB_Array) == 0x000028, "Member 'FEndDataTableBattlePlayerParameter::GuardReactionNoneAddATB_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattlePlayerParameter, GuardReactionNoneDamageCoefficient_Array) == 0x000038, "Member 'FEndDataTableBattlePlayerParameter::GuardReactionNoneDamageCoefficient_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattlePlayerParameter, GuardReactionMediumAddATB_Array) == 0x000048, "Member 'FEndDataTableBattlePlayerParameter::GuardReactionMediumAddATB_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattlePlayerParameter, GuardReactionMediumDamageCoefficient_Array) == 0x000058, "Member 'FEndDataTableBattlePlayerParameter::GuardReactionMediumDamageCoefficient_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattlePlayerParameter, GuardReactionLargeAddATB_Array) == 0x000068, "Member 'FEndDataTableBattlePlayerParameter::GuardReactionLargeAddATB_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattlePlayerParameter, GuardReactionLargeDamageCoefficient_Array) == 0x000078, "Member 'FEndDataTableBattlePlayerParameter::GuardReactionLargeDamageCoefficient_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattlePlayerParameter, ChangeDodgeAbilityID) == 0x000088, "Member 'FEndDataTableBattlePlayerParameter::ChangeDodgeAbilityID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattlePlayerParameter, ChangeDodgeAbilityIDFrog) == 0x000098, "Member 'FEndDataTableBattlePlayerParameter::ChangeDodgeAbilityIDFrog' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattlePlayerParameter, LimitAbilityID_Array) == 0x0000A8, "Member 'FEndDataTableBattlePlayerParameter::LimitAbilityID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattlePlayerParameter, LimitAbilityUseableFlag_Array) == 0x0000B8, "Member 'FEndDataTableBattlePlayerParameter::LimitAbilityUseableFlag_Array' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableBattleReport
// 0x00D0 (0x00D8 - 0x0008)
struct FEndDataTableBattleReport final : public FEndDataTableRowBase
{
public:
	int32                                         UniqueID;                                          // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SortIndex;                                         // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Title;                                             // 0x0010(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Detail;                                            // 0x0020(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ImageName;                                         // 0x0030(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MateriaID;                                         // 0x0040(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NewFlag;                                           // 0x0048(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ViewFlag;                                          // 0x0050(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CompleteFlag;                                      // 0x0058(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ProgressFlag;                                      // 0x0060(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PreCompFlag;                                       // 0x0068(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           ConditionID_Array;                                 // 0x0070(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   CompCheckFlag;                                     // 0x0080(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OpenMessageFlag;                                   // 0x0088(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ClearMessageFlag;                                  // 0x0090(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           SendOtherFlag_Array;                               // 0x0098(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         AddVRBattleMenuItemState;                          // 0x00A8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A9[0x3];                                       // 0x00A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   VRBattleMenuItemName;                              // 0x00AC(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   VRBattleMenuItemDetail;                            // 0x00B4(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   VRBattleMenuItemImage;                             // 0x00BC(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C4[0x4];                                       // 0x00C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           StateTrigger_Array;                                // 0x00C8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableBattleReport) == 0x000008, "Wrong alignment on FEndDataTableBattleReport");
static_assert(sizeof(FEndDataTableBattleReport) == 0x0000D8, "Wrong size on FEndDataTableBattleReport");
static_assert(offsetof(FEndDataTableBattleReport, UniqueID) == 0x000008, "Member 'FEndDataTableBattleReport::UniqueID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleReport, SortIndex) == 0x00000C, "Member 'FEndDataTableBattleReport::SortIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleReport, Title) == 0x000010, "Member 'FEndDataTableBattleReport::Title' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleReport, Detail) == 0x000020, "Member 'FEndDataTableBattleReport::Detail' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleReport, ImageName) == 0x000030, "Member 'FEndDataTableBattleReport::ImageName' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleReport, MateriaID) == 0x000040, "Member 'FEndDataTableBattleReport::MateriaID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleReport, NewFlag) == 0x000048, "Member 'FEndDataTableBattleReport::NewFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleReport, ViewFlag) == 0x000050, "Member 'FEndDataTableBattleReport::ViewFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleReport, CompleteFlag) == 0x000058, "Member 'FEndDataTableBattleReport::CompleteFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleReport, ProgressFlag) == 0x000060, "Member 'FEndDataTableBattleReport::ProgressFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleReport, PreCompFlag) == 0x000068, "Member 'FEndDataTableBattleReport::PreCompFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleReport, ConditionID_Array) == 0x000070, "Member 'FEndDataTableBattleReport::ConditionID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleReport, CompCheckFlag) == 0x000080, "Member 'FEndDataTableBattleReport::CompCheckFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleReport, OpenMessageFlag) == 0x000088, "Member 'FEndDataTableBattleReport::OpenMessageFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleReport, ClearMessageFlag) == 0x000090, "Member 'FEndDataTableBattleReport::ClearMessageFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleReport, SendOtherFlag_Array) == 0x000098, "Member 'FEndDataTableBattleReport::SendOtherFlag_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleReport, AddVRBattleMenuItemState) == 0x0000A8, "Member 'FEndDataTableBattleReport::AddVRBattleMenuItemState' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleReport, VRBattleMenuItemName) == 0x0000AC, "Member 'FEndDataTableBattleReport::VRBattleMenuItemName' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleReport, VRBattleMenuItemDetail) == 0x0000B4, "Member 'FEndDataTableBattleReport::VRBattleMenuItemDetail' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleReport, VRBattleMenuItemImage) == 0x0000BC, "Member 'FEndDataTableBattleReport::VRBattleMenuItemImage' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleReport, StateTrigger_Array) == 0x0000C8, "Member 'FEndDataTableBattleReport::StateTrigger_Array' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableBattleRole
// 0x0028 (0x0030 - 0x0008)
struct FEndDataTableBattleRole final : public FEndDataTableRowBase
{
public:
	int32                                         Priority;                                          // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 RoleType_Array;                                    // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<uint8>                                 RoleTypeNum_Array;                                 // 0x0020(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableBattleRole) == 0x000008, "Wrong alignment on FEndDataTableBattleRole");
static_assert(sizeof(FEndDataTableBattleRole) == 0x000030, "Wrong size on FEndDataTableBattleRole");
static_assert(offsetof(FEndDataTableBattleRole, Priority) == 0x000008, "Member 'FEndDataTableBattleRole::Priority' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleRole, RoleType_Array) == 0x000010, "Member 'FEndDataTableBattleRole::RoleType_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleRole, RoleTypeNum_Array) == 0x000020, "Member 'FEndDataTableBattleRole::RoleTypeNum_Array' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableBattleScene
// 0x0110 (0x0118 - 0x0008)
struct FEndDataTableBattleScene final : public FEndDataTableRowBase
{
public:
	uint8                                         Type;                                              // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         TypeStringArgumentList_Array;                      // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         Flag;                                              // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 TypeIntegerArgumentList_Array;                     // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   WinFieldTransitionMotionName;                      // 0x0038(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WinFieldTransitionMotionPercent;                   // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         EnemyRank;                                         // 0x0044(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         MetaATB;                                           // 0x0045(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         AggressiveAI;                                      // 0x0046(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         SummonCutScene;                                    // 0x0047(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           BattleCharaSpecID_Array;                           // 0x0048(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<uint8>                                 Level_Array;                                       // 0x0058(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           OverrideItemPossession_Array;                      // 0x0068(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           OverrideResponseAreaID_Array;                      // 0x0078(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 RoleType_Array;                                    // 0x0088(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 EntryType_Array;                                   // 0x0098(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           EntrySpecialStatusChangeID_Array;                  // 0x00A8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 Flag0_Array;                                       // 0x00B8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           BattleCharaRoleID_Array;                           // 0x00C8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           TalkGroupID_Array;                                 // 0x00D8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           BattleConditionTriggerGroupId_Array;               // 0x00E8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           WaveBattleScene_Array;                             // 0x00F8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         BitFlag;                                           // 0x0108(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SummonConditionID;                                 // 0x010C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_114[0x4];                                      // 0x0114(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableBattleScene) == 0x000008, "Wrong alignment on FEndDataTableBattleScene");
static_assert(sizeof(FEndDataTableBattleScene) == 0x000118, "Wrong size on FEndDataTableBattleScene");
static_assert(offsetof(FEndDataTableBattleScene, Type) == 0x000008, "Member 'FEndDataTableBattleScene::Type' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleScene, TypeStringArgumentList_Array) == 0x000010, "Member 'FEndDataTableBattleScene::TypeStringArgumentList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleScene, Flag) == 0x000020, "Member 'FEndDataTableBattleScene::Flag' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleScene, TypeIntegerArgumentList_Array) == 0x000028, "Member 'FEndDataTableBattleScene::TypeIntegerArgumentList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleScene, WinFieldTransitionMotionName) == 0x000038, "Member 'FEndDataTableBattleScene::WinFieldTransitionMotionName' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleScene, WinFieldTransitionMotionPercent) == 0x000040, "Member 'FEndDataTableBattleScene::WinFieldTransitionMotionPercent' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleScene, EnemyRank) == 0x000044, "Member 'FEndDataTableBattleScene::EnemyRank' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleScene, MetaATB) == 0x000045, "Member 'FEndDataTableBattleScene::MetaATB' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleScene, AggressiveAI) == 0x000046, "Member 'FEndDataTableBattleScene::AggressiveAI' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleScene, SummonCutScene) == 0x000047, "Member 'FEndDataTableBattleScene::SummonCutScene' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleScene, BattleCharaSpecID_Array) == 0x000048, "Member 'FEndDataTableBattleScene::BattleCharaSpecID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleScene, Level_Array) == 0x000058, "Member 'FEndDataTableBattleScene::Level_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleScene, OverrideItemPossession_Array) == 0x000068, "Member 'FEndDataTableBattleScene::OverrideItemPossession_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleScene, OverrideResponseAreaID_Array) == 0x000078, "Member 'FEndDataTableBattleScene::OverrideResponseAreaID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleScene, RoleType_Array) == 0x000088, "Member 'FEndDataTableBattleScene::RoleType_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleScene, EntryType_Array) == 0x000098, "Member 'FEndDataTableBattleScene::EntryType_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleScene, EntrySpecialStatusChangeID_Array) == 0x0000A8, "Member 'FEndDataTableBattleScene::EntrySpecialStatusChangeID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleScene, Flag0_Array) == 0x0000B8, "Member 'FEndDataTableBattleScene::Flag0_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleScene, BattleCharaRoleID_Array) == 0x0000C8, "Member 'FEndDataTableBattleScene::BattleCharaRoleID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleScene, TalkGroupID_Array) == 0x0000D8, "Member 'FEndDataTableBattleScene::TalkGroupID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleScene, BattleConditionTriggerGroupId_Array) == 0x0000E8, "Member 'FEndDataTableBattleScene::BattleConditionTriggerGroupId_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleScene, WaveBattleScene_Array) == 0x0000F8, "Member 'FEndDataTableBattleScene::WaveBattleScene_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleScene, BitFlag) == 0x000108, "Member 'FEndDataTableBattleScene::BitFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleScene, SummonConditionID) == 0x00010C, "Member 'FEndDataTableBattleScene::SummonConditionID' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableBattleScenePopTable
// 0x0040 (0x0048 - 0x0008)
struct FEndDataTableBattleScenePopTable final : public FEndDataTableRowBase
{
public:
	TArray<class FName>                           BattleSceneList_Array;                             // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           TargetPointListIdList_Array;                       // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 PopValueList_Array;                                // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 PopLimitCount_Array;                               // 0x0038(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableBattleScenePopTable) == 0x000008, "Wrong alignment on FEndDataTableBattleScenePopTable");
static_assert(sizeof(FEndDataTableBattleScenePopTable) == 0x000048, "Wrong size on FEndDataTableBattleScenePopTable");
static_assert(offsetof(FEndDataTableBattleScenePopTable, BattleSceneList_Array) == 0x000008, "Member 'FEndDataTableBattleScenePopTable::BattleSceneList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleScenePopTable, TargetPointListIdList_Array) == 0x000018, "Member 'FEndDataTableBattleScenePopTable::TargetPointListIdList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleScenePopTable, PopValueList_Array) == 0x000028, "Member 'FEndDataTableBattleScenePopTable::PopValueList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleScenePopTable, PopLimitCount_Array) == 0x000038, "Member 'FEndDataTableBattleScenePopTable::PopLimitCount_Array' has a wrong offset!");

// ScriptStruct EndGame.EndFieldCameraOverrideParam
// 0x0040 (0x0040 - 0x0000)
struct FEndFieldCameraOverrideParam final
{
public:
	bool                                          bOverrideFOV;                                      // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OverrideFOV;                                       // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideDistance;                                 // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OverrideDistance;                                  // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAddAimHeight;                                     // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AddAimHeight;                                      // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideRotate;                                   // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               OverrideRotate;                                    // 0x001C(0x000C)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bOverrideFollowInverseSpeed;                       // 0x0028(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OverrideFollowInverseSpeed;                        // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideLocationInverseSpeed;                     // 0x0030(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OverrideLocationInverseSpeed;                      // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideAimOffsetY;                               // 0x0038(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OverrideAimOffsetY;                                // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndFieldCameraOverrideParam) == 0x000004, "Wrong alignment on FEndFieldCameraOverrideParam");
static_assert(sizeof(FEndFieldCameraOverrideParam) == 0x000040, "Wrong size on FEndFieldCameraOverrideParam");
static_assert(offsetof(FEndFieldCameraOverrideParam, bOverrideFOV) == 0x000000, "Member 'FEndFieldCameraOverrideParam::bOverrideFOV' has a wrong offset!");
static_assert(offsetof(FEndFieldCameraOverrideParam, OverrideFOV) == 0x000004, "Member 'FEndFieldCameraOverrideParam::OverrideFOV' has a wrong offset!");
static_assert(offsetof(FEndFieldCameraOverrideParam, bOverrideDistance) == 0x000008, "Member 'FEndFieldCameraOverrideParam::bOverrideDistance' has a wrong offset!");
static_assert(offsetof(FEndFieldCameraOverrideParam, OverrideDistance) == 0x00000C, "Member 'FEndFieldCameraOverrideParam::OverrideDistance' has a wrong offset!");
static_assert(offsetof(FEndFieldCameraOverrideParam, bAddAimHeight) == 0x000010, "Member 'FEndFieldCameraOverrideParam::bAddAimHeight' has a wrong offset!");
static_assert(offsetof(FEndFieldCameraOverrideParam, AddAimHeight) == 0x000014, "Member 'FEndFieldCameraOverrideParam::AddAimHeight' has a wrong offset!");
static_assert(offsetof(FEndFieldCameraOverrideParam, bOverrideRotate) == 0x000018, "Member 'FEndFieldCameraOverrideParam::bOverrideRotate' has a wrong offset!");
static_assert(offsetof(FEndFieldCameraOverrideParam, OverrideRotate) == 0x00001C, "Member 'FEndFieldCameraOverrideParam::OverrideRotate' has a wrong offset!");
static_assert(offsetof(FEndFieldCameraOverrideParam, bOverrideFollowInverseSpeed) == 0x000028, "Member 'FEndFieldCameraOverrideParam::bOverrideFollowInverseSpeed' has a wrong offset!");
static_assert(offsetof(FEndFieldCameraOverrideParam, OverrideFollowInverseSpeed) == 0x00002C, "Member 'FEndFieldCameraOverrideParam::OverrideFollowInverseSpeed' has a wrong offset!");
static_assert(offsetof(FEndFieldCameraOverrideParam, bOverrideLocationInverseSpeed) == 0x000030, "Member 'FEndFieldCameraOverrideParam::bOverrideLocationInverseSpeed' has a wrong offset!");
static_assert(offsetof(FEndFieldCameraOverrideParam, OverrideLocationInverseSpeed) == 0x000034, "Member 'FEndFieldCameraOverrideParam::OverrideLocationInverseSpeed' has a wrong offset!");
static_assert(offsetof(FEndFieldCameraOverrideParam, bOverrideAimOffsetY) == 0x000038, "Member 'FEndFieldCameraOverrideParam::bOverrideAimOffsetY' has a wrong offset!");
static_assert(offsetof(FEndFieldCameraOverrideParam, OverrideAimOffsetY) == 0x00003C, "Member 'FEndFieldCameraOverrideParam::OverrideAimOffsetY' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableBattleSceneSituation
// 0x0008 (0x0010 - 0x0008)
struct FEndDataTableBattleSceneSituation final : public FEndDataTableRowBase
{
public:
	class FName                                   SituationID;                                       // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableBattleSceneSituation) == 0x000008, "Wrong alignment on FEndDataTableBattleSceneSituation");
static_assert(sizeof(FEndDataTableBattleSceneSituation) == 0x000010, "Wrong size on FEndDataTableBattleSceneSituation");
static_assert(offsetof(FEndDataTableBattleSceneSituation, SituationID) == 0x000008, "Member 'FEndDataTableBattleSceneSituation::SituationID' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableBattleShield
// 0x0070 (0x0078 - 0x0008)
struct FEndDataTableBattleShield final : public FEndDataTableRowBase
{
public:
	TArray<uint8>                                 CommandTypeGuardType_Array;                        // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<uint8>                                 EnableState_Array;                                 // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         AngleRight;                                        // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngleLeft;                                         // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         KeepValue;                                         // 0x0030(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlockPhysicsCoefficient;                           // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlockMagicCoefficient;                             // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlockBPCoefficient;                                // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AbilityID;                                         // 0x0040(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DamageSourceID;                                    // 0x0048(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CrashPhysicsCoefficient;                           // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CrashMagicCoefficient;                             // 0x0054(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CrashBPCoefficient;                                // 0x0058(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CrashAbilityID;                                    // 0x005C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CrashDamageSourceID;                               // 0x0064(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NearFinishDamageSourceID;                          // 0x006C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableBattleShield) == 0x000008, "Wrong alignment on FEndDataTableBattleShield");
static_assert(sizeof(FEndDataTableBattleShield) == 0x000078, "Wrong size on FEndDataTableBattleShield");
static_assert(offsetof(FEndDataTableBattleShield, CommandTypeGuardType_Array) == 0x000008, "Member 'FEndDataTableBattleShield::CommandTypeGuardType_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleShield, EnableState_Array) == 0x000018, "Member 'FEndDataTableBattleShield::EnableState_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleShield, AngleRight) == 0x000028, "Member 'FEndDataTableBattleShield::AngleRight' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleShield, AngleLeft) == 0x00002C, "Member 'FEndDataTableBattleShield::AngleLeft' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleShield, KeepValue) == 0x000030, "Member 'FEndDataTableBattleShield::KeepValue' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleShield, BlockPhysicsCoefficient) == 0x000034, "Member 'FEndDataTableBattleShield::BlockPhysicsCoefficient' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleShield, BlockMagicCoefficient) == 0x000038, "Member 'FEndDataTableBattleShield::BlockMagicCoefficient' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleShield, BlockBPCoefficient) == 0x00003C, "Member 'FEndDataTableBattleShield::BlockBPCoefficient' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleShield, AbilityID) == 0x000040, "Member 'FEndDataTableBattleShield::AbilityID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleShield, DamageSourceID) == 0x000048, "Member 'FEndDataTableBattleShield::DamageSourceID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleShield, CrashPhysicsCoefficient) == 0x000050, "Member 'FEndDataTableBattleShield::CrashPhysicsCoefficient' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleShield, CrashMagicCoefficient) == 0x000054, "Member 'FEndDataTableBattleShield::CrashMagicCoefficient' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleShield, CrashBPCoefficient) == 0x000058, "Member 'FEndDataTableBattleShield::CrashBPCoefficient' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleShield, CrashAbilityID) == 0x00005C, "Member 'FEndDataTableBattleShield::CrashAbilityID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleShield, CrashDamageSourceID) == 0x000064, "Member 'FEndDataTableBattleShield::CrashDamageSourceID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleShield, NearFinishDamageSourceID) == 0x00006C, "Member 'FEndDataTableBattleShield::NearFinishDamageSourceID' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableBattleStatusChange
// 0x0020 (0x0028 - 0x0008)
struct FEndDataTableBattleStatusChange final : public FEndDataTableRowBase
{
public:
	uint8                                         OffsetID;                                          // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         HighID;                                            // 0x0009(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         FlagBit;                                           // 0x000A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 Time_Array;                                        // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         EffectFlagBit;                                     // 0x0020(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableBattleStatusChange) == 0x000008, "Wrong alignment on FEndDataTableBattleStatusChange");
static_assert(sizeof(FEndDataTableBattleStatusChange) == 0x000028, "Wrong size on FEndDataTableBattleStatusChange");
static_assert(offsetof(FEndDataTableBattleStatusChange, OffsetID) == 0x000008, "Member 'FEndDataTableBattleStatusChange::OffsetID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleStatusChange, HighID) == 0x000009, "Member 'FEndDataTableBattleStatusChange::HighID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleStatusChange, FlagBit) == 0x00000A, "Member 'FEndDataTableBattleStatusChange::FlagBit' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleStatusChange, Time_Array) == 0x000010, "Member 'FEndDataTableBattleStatusChange::Time_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleStatusChange, EffectFlagBit) == 0x000020, "Member 'FEndDataTableBattleStatusChange::EffectFlagBit' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableBattleSummonSpec
// 0x0078 (0x0080 - 0x0008)
struct FEndDataTableBattleSummonSpec final : public FEndDataTableRowBase
{
public:
	uint8                                         BuffID;                                            // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   AddCharacter;                                      // 0x000C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CutScene;                                          // 0x0014(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActorName1;                                        // 0x001C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActorName2;                                        // 0x0024(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Collision;                                         // 0x002C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CutSceneAbilityID;                                 // 0x0030(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SpecialStatusID;                                   // 0x0038(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttachSocketName;                                  // 0x0040(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 ATBChargeTime_Array;                               // 0x0048(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         NormalAttackInterval;                              // 0x0058(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NormalAttackIntervalRandom;                        // 0x005C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetSetInterval;                                 // 0x0060(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ActiveTime;                                        // 0x0064(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         SpawnFXType;                                       // 0x0068(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SpawnFXXOffset;                                    // 0x006C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpawnFXZOffset;                                    // 0x0070(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CutSceneAbilityName;                               // 0x0074(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CutSceneAbilityNameDisplayTime;                    // 0x007C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableBattleSummonSpec) == 0x000008, "Wrong alignment on FEndDataTableBattleSummonSpec");
static_assert(sizeof(FEndDataTableBattleSummonSpec) == 0x000080, "Wrong size on FEndDataTableBattleSummonSpec");
static_assert(offsetof(FEndDataTableBattleSummonSpec, BuffID) == 0x000008, "Member 'FEndDataTableBattleSummonSpec::BuffID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonSpec, AddCharacter) == 0x00000C, "Member 'FEndDataTableBattleSummonSpec::AddCharacter' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonSpec, CutScene) == 0x000014, "Member 'FEndDataTableBattleSummonSpec::CutScene' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonSpec, ActorName1) == 0x00001C, "Member 'FEndDataTableBattleSummonSpec::ActorName1' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonSpec, ActorName2) == 0x000024, "Member 'FEndDataTableBattleSummonSpec::ActorName2' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonSpec, Collision) == 0x00002C, "Member 'FEndDataTableBattleSummonSpec::Collision' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonSpec, CutSceneAbilityID) == 0x000030, "Member 'FEndDataTableBattleSummonSpec::CutSceneAbilityID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonSpec, SpecialStatusID) == 0x000038, "Member 'FEndDataTableBattleSummonSpec::SpecialStatusID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonSpec, AttachSocketName) == 0x000040, "Member 'FEndDataTableBattleSummonSpec::AttachSocketName' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonSpec, ATBChargeTime_Array) == 0x000048, "Member 'FEndDataTableBattleSummonSpec::ATBChargeTime_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonSpec, NormalAttackInterval) == 0x000058, "Member 'FEndDataTableBattleSummonSpec::NormalAttackInterval' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonSpec, NormalAttackIntervalRandom) == 0x00005C, "Member 'FEndDataTableBattleSummonSpec::NormalAttackIntervalRandom' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonSpec, TargetSetInterval) == 0x000060, "Member 'FEndDataTableBattleSummonSpec::TargetSetInterval' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonSpec, ActiveTime) == 0x000064, "Member 'FEndDataTableBattleSummonSpec::ActiveTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonSpec, SpawnFXType) == 0x000068, "Member 'FEndDataTableBattleSummonSpec::SpawnFXType' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonSpec, SpawnFXXOffset) == 0x00006C, "Member 'FEndDataTableBattleSummonSpec::SpawnFXXOffset' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonSpec, SpawnFXZOffset) == 0x000070, "Member 'FEndDataTableBattleSummonSpec::SpawnFXZOffset' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonSpec, CutSceneAbilityName) == 0x000074, "Member 'FEndDataTableBattleSummonSpec::CutSceneAbilityName' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSummonSpec, CutSceneAbilityNameDisplayTime) == 0x00007C, "Member 'FEndDataTableBattleSummonSpec::CutSceneAbilityNameDisplayTime' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableBattleSyncAction
// 0x0170 (0x0178 - 0x0008)
struct FEndDataTableBattleSyncAction final : public FEndDataTableRowBase
{
public:
	uint8                                         EnableAirTarget;                                   // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         DisableTargetTalk;                                 // 0x0009(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   RelatedOwnerPartID;                                // 0x000C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         CameraSequenceNotify;                              // 0x0014(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CameraSequenceID;                                  // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         StopCameraDetach;                                  // 0x0020(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         AttachType;                                        // 0x0021(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x2];                                       // 0x0022(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AttachInterpTime;                                  // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AttachRotInterpTime;                               // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         AttachLocationType;                                // 0x002C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         AttachRotationType;                                // 0x002D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2E[0x2];                                       // 0x002E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   AttachSocketName;                                  // 0x0030(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         AttachRootOffsetType;                              // 0x0038(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         NoAttach;                                          // 0x0039(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         AlongSlope;                                        // 0x003A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3B[0x1];                                       // 0x003B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   OwnerDisplayNameSocketName;                        // 0x003C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OwnerPartID;                                       // 0x0044(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OwnerPartDamageToTargetRate;                       // 0x004C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OwnerPartAcceptDamageSourceID;                     // 0x0050(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         TargetMotionType;                                  // 0x0058(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         TargetDisableFromEnemy;                            // 0x0059(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         TargetDoesntGetTrophy;                             // 0x005A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         TargetEnableCommand;                               // 0x005B(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReplaceDamageSourceID;                             // 0x0060(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OwnerBeginAnimID;                                  // 0x0070(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         OwnerBeginAnimBlend;                               // 0x0078(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x3];                                       // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   TargetBeginAnimID;                                 // 0x007C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         TargetBeginAnimBlend;                              // 0x0084(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_85[0x3];                                       // 0x0085(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   TargetBeginDetachDamageSourceID;                   // 0x0088(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         TargetBeginDetachDamageSourceIDEffect;             // 0x0090(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_91[0x3];                                       // 0x0091(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   OwnerLoopAnimID;                                   // 0x0094(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         OwnerLoopAnimBlend;                                // 0x009C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         OwnerHPType;                                       // 0x009D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9E[0x2];                                       // 0x009E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         OwnerHP;                                           // 0x00A0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OwnerDamageSourceID;                               // 0x00A4(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         OwnerEnableWalk;                                   // 0x00AC(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AD[0x3];                                       // 0x00AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   OwnerEnableWalkBoneFilterName;                     // 0x00B0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TargetLoopAnimID;                                  // 0x00B8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         TargetLoopAnimBlend;                               // 0x00C0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C1[0x3];                                       // 0x00C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TargetAbilityHitCount;                             // 0x00C4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TargetMagicHitCount;                               // 0x00C8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TargetLimitHitCount;                               // 0x00CC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TargetLoopDetachDamageSourceID;                    // 0x00D0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         TargetLoopDetachDamageSourceIDEffect;              // 0x00D8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D9[0x3];                                       // 0x00D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LoopTime;                                          // 0x00DC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           OwnerFailureAnimID_Array;                          // 0x00E0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         OwnerFailureAnimBlend;                             // 0x00F0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F1[0x7];                                       // 0x00F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           TargetFailureAnimID_Array;                         // 0x00F8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         TargetFailureAnimBlend;                            // 0x0108(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_109[0x3];                                      // 0x0109(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   TargetFailureAnimDamageSourceID;                   // 0x010C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TargetFailureDetachDamageSourceID;                 // 0x0114(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11C[0x4];                                      // 0x011C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           OwnerSuccessAnimID_Array;                          // 0x0120(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         OwnerSuccessAnimBlend;                             // 0x0130(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_131[0x7];                                      // 0x0131(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           TargetSuccessAnimID_Array;                         // 0x0138(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         TargetSuccessAnimBlend;                            // 0x0148(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_149[0x3];                                      // 0x0149(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   TargetSuccessDetachDamageSourceID;                 // 0x014C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         DisableOwnerDead;                                  // 0x0154(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_155[0x3];                                      // 0x0155(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   TargetReleaseAnimID;                               // 0x0158(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         TargetReleaseAnimBlend;                            // 0x0160(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_161[0x3];                                      // 0x0161(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   OwnerReleaseAnimID;                                // 0x0164(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         OwnerReleaseAnimBlend;                             // 0x016C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         DisableTargetDead;                                 // 0x016D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         TargetDetachPosture;                               // 0x016E(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16F[0x1];                                      // 0x016F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   TargetDetachEnableReactionDamageSourceID;          // 0x0170(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableBattleSyncAction) == 0x000008, "Wrong alignment on FEndDataTableBattleSyncAction");
static_assert(sizeof(FEndDataTableBattleSyncAction) == 0x000178, "Wrong size on FEndDataTableBattleSyncAction");
static_assert(offsetof(FEndDataTableBattleSyncAction, EnableAirTarget) == 0x000008, "Member 'FEndDataTableBattleSyncAction::EnableAirTarget' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSyncAction, DisableTargetTalk) == 0x000009, "Member 'FEndDataTableBattleSyncAction::DisableTargetTalk' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSyncAction, RelatedOwnerPartID) == 0x00000C, "Member 'FEndDataTableBattleSyncAction::RelatedOwnerPartID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSyncAction, CameraSequenceNotify) == 0x000014, "Member 'FEndDataTableBattleSyncAction::CameraSequenceNotify' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSyncAction, CameraSequenceID) == 0x000018, "Member 'FEndDataTableBattleSyncAction::CameraSequenceID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSyncAction, StopCameraDetach) == 0x000020, "Member 'FEndDataTableBattleSyncAction::StopCameraDetach' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSyncAction, AttachType) == 0x000021, "Member 'FEndDataTableBattleSyncAction::AttachType' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSyncAction, AttachInterpTime) == 0x000024, "Member 'FEndDataTableBattleSyncAction::AttachInterpTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSyncAction, AttachRotInterpTime) == 0x000028, "Member 'FEndDataTableBattleSyncAction::AttachRotInterpTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSyncAction, AttachLocationType) == 0x00002C, "Member 'FEndDataTableBattleSyncAction::AttachLocationType' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSyncAction, AttachRotationType) == 0x00002D, "Member 'FEndDataTableBattleSyncAction::AttachRotationType' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSyncAction, AttachSocketName) == 0x000030, "Member 'FEndDataTableBattleSyncAction::AttachSocketName' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSyncAction, AttachRootOffsetType) == 0x000038, "Member 'FEndDataTableBattleSyncAction::AttachRootOffsetType' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSyncAction, NoAttach) == 0x000039, "Member 'FEndDataTableBattleSyncAction::NoAttach' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSyncAction, AlongSlope) == 0x00003A, "Member 'FEndDataTableBattleSyncAction::AlongSlope' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSyncAction, OwnerDisplayNameSocketName) == 0x00003C, "Member 'FEndDataTableBattleSyncAction::OwnerDisplayNameSocketName' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSyncAction, OwnerPartID) == 0x000044, "Member 'FEndDataTableBattleSyncAction::OwnerPartID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSyncAction, OwnerPartDamageToTargetRate) == 0x00004C, "Member 'FEndDataTableBattleSyncAction::OwnerPartDamageToTargetRate' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSyncAction, OwnerPartAcceptDamageSourceID) == 0x000050, "Member 'FEndDataTableBattleSyncAction::OwnerPartAcceptDamageSourceID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSyncAction, TargetMotionType) == 0x000058, "Member 'FEndDataTableBattleSyncAction::TargetMotionType' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSyncAction, TargetDisableFromEnemy) == 0x000059, "Member 'FEndDataTableBattleSyncAction::TargetDisableFromEnemy' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSyncAction, TargetDoesntGetTrophy) == 0x00005A, "Member 'FEndDataTableBattleSyncAction::TargetDoesntGetTrophy' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSyncAction, TargetEnableCommand) == 0x00005B, "Member 'FEndDataTableBattleSyncAction::TargetEnableCommand' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSyncAction, ReplaceDamageSourceID) == 0x000060, "Member 'FEndDataTableBattleSyncAction::ReplaceDamageSourceID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSyncAction, OwnerBeginAnimID) == 0x000070, "Member 'FEndDataTableBattleSyncAction::OwnerBeginAnimID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSyncAction, OwnerBeginAnimBlend) == 0x000078, "Member 'FEndDataTableBattleSyncAction::OwnerBeginAnimBlend' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSyncAction, TargetBeginAnimID) == 0x00007C, "Member 'FEndDataTableBattleSyncAction::TargetBeginAnimID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSyncAction, TargetBeginAnimBlend) == 0x000084, "Member 'FEndDataTableBattleSyncAction::TargetBeginAnimBlend' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSyncAction, TargetBeginDetachDamageSourceID) == 0x000088, "Member 'FEndDataTableBattleSyncAction::TargetBeginDetachDamageSourceID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSyncAction, TargetBeginDetachDamageSourceIDEffect) == 0x000090, "Member 'FEndDataTableBattleSyncAction::TargetBeginDetachDamageSourceIDEffect' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSyncAction, OwnerLoopAnimID) == 0x000094, "Member 'FEndDataTableBattleSyncAction::OwnerLoopAnimID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSyncAction, OwnerLoopAnimBlend) == 0x00009C, "Member 'FEndDataTableBattleSyncAction::OwnerLoopAnimBlend' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSyncAction, OwnerHPType) == 0x00009D, "Member 'FEndDataTableBattleSyncAction::OwnerHPType' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSyncAction, OwnerHP) == 0x0000A0, "Member 'FEndDataTableBattleSyncAction::OwnerHP' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSyncAction, OwnerDamageSourceID) == 0x0000A4, "Member 'FEndDataTableBattleSyncAction::OwnerDamageSourceID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSyncAction, OwnerEnableWalk) == 0x0000AC, "Member 'FEndDataTableBattleSyncAction::OwnerEnableWalk' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSyncAction, OwnerEnableWalkBoneFilterName) == 0x0000B0, "Member 'FEndDataTableBattleSyncAction::OwnerEnableWalkBoneFilterName' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSyncAction, TargetLoopAnimID) == 0x0000B8, "Member 'FEndDataTableBattleSyncAction::TargetLoopAnimID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSyncAction, TargetLoopAnimBlend) == 0x0000C0, "Member 'FEndDataTableBattleSyncAction::TargetLoopAnimBlend' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSyncAction, TargetAbilityHitCount) == 0x0000C4, "Member 'FEndDataTableBattleSyncAction::TargetAbilityHitCount' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSyncAction, TargetMagicHitCount) == 0x0000C8, "Member 'FEndDataTableBattleSyncAction::TargetMagicHitCount' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSyncAction, TargetLimitHitCount) == 0x0000CC, "Member 'FEndDataTableBattleSyncAction::TargetLimitHitCount' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSyncAction, TargetLoopDetachDamageSourceID) == 0x0000D0, "Member 'FEndDataTableBattleSyncAction::TargetLoopDetachDamageSourceID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSyncAction, TargetLoopDetachDamageSourceIDEffect) == 0x0000D8, "Member 'FEndDataTableBattleSyncAction::TargetLoopDetachDamageSourceIDEffect' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSyncAction, LoopTime) == 0x0000DC, "Member 'FEndDataTableBattleSyncAction::LoopTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSyncAction, OwnerFailureAnimID_Array) == 0x0000E0, "Member 'FEndDataTableBattleSyncAction::OwnerFailureAnimID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSyncAction, OwnerFailureAnimBlend) == 0x0000F0, "Member 'FEndDataTableBattleSyncAction::OwnerFailureAnimBlend' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSyncAction, TargetFailureAnimID_Array) == 0x0000F8, "Member 'FEndDataTableBattleSyncAction::TargetFailureAnimID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSyncAction, TargetFailureAnimBlend) == 0x000108, "Member 'FEndDataTableBattleSyncAction::TargetFailureAnimBlend' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSyncAction, TargetFailureAnimDamageSourceID) == 0x00010C, "Member 'FEndDataTableBattleSyncAction::TargetFailureAnimDamageSourceID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSyncAction, TargetFailureDetachDamageSourceID) == 0x000114, "Member 'FEndDataTableBattleSyncAction::TargetFailureDetachDamageSourceID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSyncAction, OwnerSuccessAnimID_Array) == 0x000120, "Member 'FEndDataTableBattleSyncAction::OwnerSuccessAnimID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSyncAction, OwnerSuccessAnimBlend) == 0x000130, "Member 'FEndDataTableBattleSyncAction::OwnerSuccessAnimBlend' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSyncAction, TargetSuccessAnimID_Array) == 0x000138, "Member 'FEndDataTableBattleSyncAction::TargetSuccessAnimID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSyncAction, TargetSuccessAnimBlend) == 0x000148, "Member 'FEndDataTableBattleSyncAction::TargetSuccessAnimBlend' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSyncAction, TargetSuccessDetachDamageSourceID) == 0x00014C, "Member 'FEndDataTableBattleSyncAction::TargetSuccessDetachDamageSourceID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSyncAction, DisableOwnerDead) == 0x000154, "Member 'FEndDataTableBattleSyncAction::DisableOwnerDead' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSyncAction, TargetReleaseAnimID) == 0x000158, "Member 'FEndDataTableBattleSyncAction::TargetReleaseAnimID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSyncAction, TargetReleaseAnimBlend) == 0x000160, "Member 'FEndDataTableBattleSyncAction::TargetReleaseAnimBlend' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSyncAction, OwnerReleaseAnimID) == 0x000164, "Member 'FEndDataTableBattleSyncAction::OwnerReleaseAnimID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSyncAction, OwnerReleaseAnimBlend) == 0x00016C, "Member 'FEndDataTableBattleSyncAction::OwnerReleaseAnimBlend' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSyncAction, DisableTargetDead) == 0x00016D, "Member 'FEndDataTableBattleSyncAction::DisableTargetDead' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSyncAction, TargetDetachPosture) == 0x00016E, "Member 'FEndDataTableBattleSyncAction::TargetDetachPosture' has a wrong offset!");
static_assert(offsetof(FEndDataTableBattleSyncAction, TargetDetachEnableReactionDamageSourceID) == 0x000170, "Member 'FEndDataTableBattleSyncAction::TargetDetachEnableReactionDamageSourceID' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableBikeAIAbilitySet
// 0x0058 (0x0060 - 0x0008)
struct FEndDataTableBikeAIAbilitySet final : public FEndDataTableRowBase
{
public:
	class FName                                   SwitchWhenHard;                                    // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           NormalAbilityID_Array;                             // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 NormalAbilityOdds_Array;                           // 0x0020(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 NormalAbilityPriority_Array;                       // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 SpecialAbilityHPRatio_Array;                       // 0x0040(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           SpecialAbilityID_Array;                            // 0x0050(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableBikeAIAbilitySet) == 0x000008, "Wrong alignment on FEndDataTableBikeAIAbilitySet");
static_assert(sizeof(FEndDataTableBikeAIAbilitySet) == 0x000060, "Wrong size on FEndDataTableBikeAIAbilitySet");
static_assert(offsetof(FEndDataTableBikeAIAbilitySet, SwitchWhenHard) == 0x000008, "Member 'FEndDataTableBikeAIAbilitySet::SwitchWhenHard' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeAIAbilitySet, NormalAbilityID_Array) == 0x000010, "Member 'FEndDataTableBikeAIAbilitySet::NormalAbilityID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeAIAbilitySet, NormalAbilityOdds_Array) == 0x000020, "Member 'FEndDataTableBikeAIAbilitySet::NormalAbilityOdds_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeAIAbilitySet, NormalAbilityPriority_Array) == 0x000030, "Member 'FEndDataTableBikeAIAbilitySet::NormalAbilityPriority_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeAIAbilitySet, SpecialAbilityHPRatio_Array) == 0x000040, "Member 'FEndDataTableBikeAIAbilitySet::SpecialAbilityHPRatio_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeAIAbilitySet, SpecialAbilityID_Array) == 0x000050, "Member 'FEndDataTableBikeAIAbilitySet::SpecialAbilityID_Array' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableBikeCombo
// 0x0010 (0x0018 - 0x0008)
struct FEndDataTableBikeCombo final : public FEndDataTableRowBase
{
public:
	TArray<class FName>                           ComboID_Array;                                     // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableBikeCombo) == 0x000008, "Wrong alignment on FEndDataTableBikeCombo");
static_assert(sizeof(FEndDataTableBikeCombo) == 0x000018, "Wrong size on FEndDataTableBikeCombo");
static_assert(offsetof(FEndDataTableBikeCombo, ComboID_Array) == 0x000008, "Member 'FEndDataTableBikeCombo::ComboID_Array' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableBikeCommonParameter
// 0x0018 (0x0020 - 0x0008)
struct FEndDataTableBikeCommonParameter final : public FEndDataTableRowBase
{
public:
	int32                                         ParamInt;                                          // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ParamFloat;                                        // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ParamString;                                       // 0x0010(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableBikeCommonParameter) == 0x000008, "Wrong alignment on FEndDataTableBikeCommonParameter");
static_assert(sizeof(FEndDataTableBikeCommonParameter) == 0x000020, "Wrong size on FEndDataTableBikeCommonParameter");
static_assert(offsetof(FEndDataTableBikeCommonParameter, ParamInt) == 0x000008, "Member 'FEndDataTableBikeCommonParameter::ParamInt' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeCommonParameter, ParamFloat) == 0x00000C, "Member 'FEndDataTableBikeCommonParameter::ParamFloat' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeCommonParameter, ParamString) == 0x000010, "Member 'FEndDataTableBikeCommonParameter::ParamString' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableBikeDamageSource
// 0x0148 (0x0150 - 0x0008)
struct FEndDataTableBikeDamageSource final : public FEndDataTableRowBase
{
public:
	int32                                         Power;                                             // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RandomBreadth;                                     // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Impact;                                            // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ReactionDirection;                                 // 0x0011(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RelativeSpeedAtReaction;                           // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         UnBlockable;                                       // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         EnableGuardEffect;                                 // 0x0019(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         DamageMotionType;                                  // 0x001A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         EnableFriendlyFire;                                // 0x001B(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         WillBeAvoided;                                     // 0x001C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         DisableHitCharacter;                               // 0x001D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         DisableHitBackground;                              // 0x001E(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         MoveOnTerrain;                                     // 0x001F(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         HitDestroyType;                                    // 0x0020(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         HitCountTotal;                                     // 0x0021(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         HitCount;                                          // 0x0022(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23[0x1];                                       // 0x0023(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HitInterval;                                       // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         HitMultiParts;                                     // 0x0028(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         EnableForceBrake;                                  // 0x0029(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         DisableFinish;                                     // 0x002A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         CollisionType;                                     // 0x002B(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 CollisionParameter_Array;                          // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   CharaSpecID;                                       // 0x0040(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         BikeCreatePositionType;                            // 0x0048(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BikeCreateMileageOffset;                           // 0x004C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BikeCreateSlideOffset;                             // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         CreateBasePos;                                     // 0x0054(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CreatePartName;                                    // 0x0058(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CreatePartOffsetX;                                 // 0x0060(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CreatePartOffsetY;                                 // 0x0064(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CreatePartOffsetZ;                                 // 0x0068(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CreatePartOffsetPitch;                             // 0x006C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CreatePartOffsetYaw;                               // 0x0070(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CreatePartOffsetRoll;                              // 0x0074(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CreateDelayTime;                                   // 0x0078(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         BikeTargetPositionType;                            // 0x007C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7D[0x3];                                       // 0x007D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BikeTargetMileageOffset;                           // 0x0080(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BikeTargetMileageOffsetTime;                       // 0x0084(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BikeTargetSlideOffset;                             // 0x0088(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BikeTargetHeightOffset;                            // 0x008C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         EnableDeviationCalc;                               // 0x0090(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_91[0x3];                                       // 0x0091(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DeviationCalcSlideSpeedRate;                       // 0x0094(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         TargetBase;                                        // 0x0098(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 TargetName;                                        // 0x00A0(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         LifeTimeNotify;                                    // 0x00B0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B1[0x3];                                       // 0x00B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LifeTime;                                          // 0x00B4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ProgressDirectionType;                             // 0x00B8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ControlType;                                       // 0x00B9(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BA[0x6];                                       // 0x00BA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 ControlParameter_Array;                            // 0x00C0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         ControlFlag;                                       // 0x00D0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         RotationType;                                      // 0x00D4(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D5[0x3];                                       // 0x00D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 ConditionCreateDamageSourceType_Array;             // 0x00D8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           ConditionCreateDamageSourceID_Array;               // 0x00E8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         CreateEffectResourceCategory;                      // 0x00F8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F9[0x3];                                       // 0x00F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CreateEffectResourceName;                          // 0x00FC(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         HitEffectResourceCategory;                         // 0x0104(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_105[0x3];                                      // 0x0105(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   HitEffectResourceName;                             // 0x0108(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         BindEffectResourceCategory;                        // 0x0110(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_111[0x3];                                      // 0x0111(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   BindEffectResourceName;                            // 0x0114(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttributeEffectResource;                           // 0x011C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AttributeEffectLoopTime;                           // 0x0124(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         HitSoundResourceCategory;                          // 0x0128(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_129[0x3];                                      // 0x0129(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   HitSoundResourceName;                              // 0x012C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EnvironmenPhysImpulseRadius;                       // 0x0134(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         EnvironmenPhysImpulseScale;                        // 0x0138(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         DisableOwnerVelocity;                              // 0x0139(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13A[0x6];                                      // 0x013A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           PlayerFeedbackID_Array;                            // 0x0140(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableBikeDamageSource) == 0x000008, "Wrong alignment on FEndDataTableBikeDamageSource");
static_assert(sizeof(FEndDataTableBikeDamageSource) == 0x000150, "Wrong size on FEndDataTableBikeDamageSource");
static_assert(offsetof(FEndDataTableBikeDamageSource, Power) == 0x000008, "Member 'FEndDataTableBikeDamageSource::Power' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeDamageSource, RandomBreadth) == 0x00000C, "Member 'FEndDataTableBikeDamageSource::RandomBreadth' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeDamageSource, Impact) == 0x000010, "Member 'FEndDataTableBikeDamageSource::Impact' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeDamageSource, ReactionDirection) == 0x000011, "Member 'FEndDataTableBikeDamageSource::ReactionDirection' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeDamageSource, RelativeSpeedAtReaction) == 0x000014, "Member 'FEndDataTableBikeDamageSource::RelativeSpeedAtReaction' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeDamageSource, UnBlockable) == 0x000018, "Member 'FEndDataTableBikeDamageSource::UnBlockable' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeDamageSource, EnableGuardEffect) == 0x000019, "Member 'FEndDataTableBikeDamageSource::EnableGuardEffect' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeDamageSource, DamageMotionType) == 0x00001A, "Member 'FEndDataTableBikeDamageSource::DamageMotionType' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeDamageSource, EnableFriendlyFire) == 0x00001B, "Member 'FEndDataTableBikeDamageSource::EnableFriendlyFire' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeDamageSource, WillBeAvoided) == 0x00001C, "Member 'FEndDataTableBikeDamageSource::WillBeAvoided' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeDamageSource, DisableHitCharacter) == 0x00001D, "Member 'FEndDataTableBikeDamageSource::DisableHitCharacter' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeDamageSource, DisableHitBackground) == 0x00001E, "Member 'FEndDataTableBikeDamageSource::DisableHitBackground' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeDamageSource, MoveOnTerrain) == 0x00001F, "Member 'FEndDataTableBikeDamageSource::MoveOnTerrain' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeDamageSource, HitDestroyType) == 0x000020, "Member 'FEndDataTableBikeDamageSource::HitDestroyType' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeDamageSource, HitCountTotal) == 0x000021, "Member 'FEndDataTableBikeDamageSource::HitCountTotal' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeDamageSource, HitCount) == 0x000022, "Member 'FEndDataTableBikeDamageSource::HitCount' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeDamageSource, HitInterval) == 0x000024, "Member 'FEndDataTableBikeDamageSource::HitInterval' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeDamageSource, HitMultiParts) == 0x000028, "Member 'FEndDataTableBikeDamageSource::HitMultiParts' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeDamageSource, EnableForceBrake) == 0x000029, "Member 'FEndDataTableBikeDamageSource::EnableForceBrake' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeDamageSource, DisableFinish) == 0x00002A, "Member 'FEndDataTableBikeDamageSource::DisableFinish' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeDamageSource, CollisionType) == 0x00002B, "Member 'FEndDataTableBikeDamageSource::CollisionType' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeDamageSource, CollisionParameter_Array) == 0x000030, "Member 'FEndDataTableBikeDamageSource::CollisionParameter_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeDamageSource, CharaSpecID) == 0x000040, "Member 'FEndDataTableBikeDamageSource::CharaSpecID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeDamageSource, BikeCreatePositionType) == 0x000048, "Member 'FEndDataTableBikeDamageSource::BikeCreatePositionType' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeDamageSource, BikeCreateMileageOffset) == 0x00004C, "Member 'FEndDataTableBikeDamageSource::BikeCreateMileageOffset' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeDamageSource, BikeCreateSlideOffset) == 0x000050, "Member 'FEndDataTableBikeDamageSource::BikeCreateSlideOffset' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeDamageSource, CreateBasePos) == 0x000054, "Member 'FEndDataTableBikeDamageSource::CreateBasePos' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeDamageSource, CreatePartName) == 0x000058, "Member 'FEndDataTableBikeDamageSource::CreatePartName' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeDamageSource, CreatePartOffsetX) == 0x000060, "Member 'FEndDataTableBikeDamageSource::CreatePartOffsetX' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeDamageSource, CreatePartOffsetY) == 0x000064, "Member 'FEndDataTableBikeDamageSource::CreatePartOffsetY' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeDamageSource, CreatePartOffsetZ) == 0x000068, "Member 'FEndDataTableBikeDamageSource::CreatePartOffsetZ' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeDamageSource, CreatePartOffsetPitch) == 0x00006C, "Member 'FEndDataTableBikeDamageSource::CreatePartOffsetPitch' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeDamageSource, CreatePartOffsetYaw) == 0x000070, "Member 'FEndDataTableBikeDamageSource::CreatePartOffsetYaw' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeDamageSource, CreatePartOffsetRoll) == 0x000074, "Member 'FEndDataTableBikeDamageSource::CreatePartOffsetRoll' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeDamageSource, CreateDelayTime) == 0x000078, "Member 'FEndDataTableBikeDamageSource::CreateDelayTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeDamageSource, BikeTargetPositionType) == 0x00007C, "Member 'FEndDataTableBikeDamageSource::BikeTargetPositionType' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeDamageSource, BikeTargetMileageOffset) == 0x000080, "Member 'FEndDataTableBikeDamageSource::BikeTargetMileageOffset' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeDamageSource, BikeTargetMileageOffsetTime) == 0x000084, "Member 'FEndDataTableBikeDamageSource::BikeTargetMileageOffsetTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeDamageSource, BikeTargetSlideOffset) == 0x000088, "Member 'FEndDataTableBikeDamageSource::BikeTargetSlideOffset' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeDamageSource, BikeTargetHeightOffset) == 0x00008C, "Member 'FEndDataTableBikeDamageSource::BikeTargetHeightOffset' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeDamageSource, EnableDeviationCalc) == 0x000090, "Member 'FEndDataTableBikeDamageSource::EnableDeviationCalc' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeDamageSource, DeviationCalcSlideSpeedRate) == 0x000094, "Member 'FEndDataTableBikeDamageSource::DeviationCalcSlideSpeedRate' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeDamageSource, TargetBase) == 0x000098, "Member 'FEndDataTableBikeDamageSource::TargetBase' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeDamageSource, TargetName) == 0x0000A0, "Member 'FEndDataTableBikeDamageSource::TargetName' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeDamageSource, LifeTimeNotify) == 0x0000B0, "Member 'FEndDataTableBikeDamageSource::LifeTimeNotify' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeDamageSource, LifeTime) == 0x0000B4, "Member 'FEndDataTableBikeDamageSource::LifeTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeDamageSource, ProgressDirectionType) == 0x0000B8, "Member 'FEndDataTableBikeDamageSource::ProgressDirectionType' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeDamageSource, ControlType) == 0x0000B9, "Member 'FEndDataTableBikeDamageSource::ControlType' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeDamageSource, ControlParameter_Array) == 0x0000C0, "Member 'FEndDataTableBikeDamageSource::ControlParameter_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeDamageSource, ControlFlag) == 0x0000D0, "Member 'FEndDataTableBikeDamageSource::ControlFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeDamageSource, RotationType) == 0x0000D4, "Member 'FEndDataTableBikeDamageSource::RotationType' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeDamageSource, ConditionCreateDamageSourceType_Array) == 0x0000D8, "Member 'FEndDataTableBikeDamageSource::ConditionCreateDamageSourceType_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeDamageSource, ConditionCreateDamageSourceID_Array) == 0x0000E8, "Member 'FEndDataTableBikeDamageSource::ConditionCreateDamageSourceID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeDamageSource, CreateEffectResourceCategory) == 0x0000F8, "Member 'FEndDataTableBikeDamageSource::CreateEffectResourceCategory' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeDamageSource, CreateEffectResourceName) == 0x0000FC, "Member 'FEndDataTableBikeDamageSource::CreateEffectResourceName' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeDamageSource, HitEffectResourceCategory) == 0x000104, "Member 'FEndDataTableBikeDamageSource::HitEffectResourceCategory' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeDamageSource, HitEffectResourceName) == 0x000108, "Member 'FEndDataTableBikeDamageSource::HitEffectResourceName' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeDamageSource, BindEffectResourceCategory) == 0x000110, "Member 'FEndDataTableBikeDamageSource::BindEffectResourceCategory' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeDamageSource, BindEffectResourceName) == 0x000114, "Member 'FEndDataTableBikeDamageSource::BindEffectResourceName' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeDamageSource, AttributeEffectResource) == 0x00011C, "Member 'FEndDataTableBikeDamageSource::AttributeEffectResource' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeDamageSource, AttributeEffectLoopTime) == 0x000124, "Member 'FEndDataTableBikeDamageSource::AttributeEffectLoopTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeDamageSource, HitSoundResourceCategory) == 0x000128, "Member 'FEndDataTableBikeDamageSource::HitSoundResourceCategory' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeDamageSource, HitSoundResourceName) == 0x00012C, "Member 'FEndDataTableBikeDamageSource::HitSoundResourceName' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeDamageSource, EnvironmenPhysImpulseRadius) == 0x000134, "Member 'FEndDataTableBikeDamageSource::EnvironmenPhysImpulseRadius' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeDamageSource, EnvironmenPhysImpulseScale) == 0x000138, "Member 'FEndDataTableBikeDamageSource::EnvironmenPhysImpulseScale' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeDamageSource, DisableOwnerVelocity) == 0x000139, "Member 'FEndDataTableBikeDamageSource::DisableOwnerVelocity' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeDamageSource, PlayerFeedbackID_Array) == 0x000140, "Member 'FEndDataTableBikeDamageSource::PlayerFeedbackID_Array' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableBikeLocation
// 0x0030 (0x0038 - 0x0008)
struct FEndDataTableBikeLocation final : public FEndDataTableRowBase
{
public:
	class FName                                   PlayerBikeCharaSpec;                               // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AllyBikeCharaSpec;                                 // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartLocationX;                                    // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartLocationY;                                    // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartLocationZ;                                    // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           BikePhaseIDList_Array;                             // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableBikeLocation) == 0x000008, "Wrong alignment on FEndDataTableBikeLocation");
static_assert(sizeof(FEndDataTableBikeLocation) == 0x000038, "Wrong size on FEndDataTableBikeLocation");
static_assert(offsetof(FEndDataTableBikeLocation, PlayerBikeCharaSpec) == 0x000008, "Member 'FEndDataTableBikeLocation::PlayerBikeCharaSpec' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeLocation, AllyBikeCharaSpec) == 0x000010, "Member 'FEndDataTableBikeLocation::AllyBikeCharaSpec' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeLocation, StartLocationX) == 0x000018, "Member 'FEndDataTableBikeLocation::StartLocationX' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeLocation, StartLocationY) == 0x00001C, "Member 'FEndDataTableBikeLocation::StartLocationY' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeLocation, StartLocationZ) == 0x000020, "Member 'FEndDataTableBikeLocation::StartLocationZ' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeLocation, BikePhaseIDList_Array) == 0x000028, "Member 'FEndDataTableBikeLocation::BikePhaseIDList_Array' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableTalkSequence
// 0x0048 (0x0050 - 0x0008)
struct FEndDataTableTalkSequence final : public FEndDataTableRowBase
{
public:
	class FName                                   Talker;                                            // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OverwriteType;                                     // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TalkerOverwriteID;                                 // 0x0014(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TalkSpaceType;                                     // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SubtitleDisplayTime;                               // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NextTalkSequenceID;                                // 0x0024(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IsVoice;                                           // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           FinishedID_Array;                                  // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   TextID;                                            // 0x0040(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   VoiceID;                                           // 0x0048(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableTalkSequence) == 0x000008, "Wrong alignment on FEndDataTableTalkSequence");
static_assert(sizeof(FEndDataTableTalkSequence) == 0x000050, "Wrong size on FEndDataTableTalkSequence");
static_assert(offsetof(FEndDataTableTalkSequence, Talker) == 0x000008, "Member 'FEndDataTableTalkSequence::Talker' has a wrong offset!");
static_assert(offsetof(FEndDataTableTalkSequence, OverwriteType) == 0x000010, "Member 'FEndDataTableTalkSequence::OverwriteType' has a wrong offset!");
static_assert(offsetof(FEndDataTableTalkSequence, TalkerOverwriteID) == 0x000014, "Member 'FEndDataTableTalkSequence::TalkerOverwriteID' has a wrong offset!");
static_assert(offsetof(FEndDataTableTalkSequence, TalkSpaceType) == 0x00001C, "Member 'FEndDataTableTalkSequence::TalkSpaceType' has a wrong offset!");
static_assert(offsetof(FEndDataTableTalkSequence, SubtitleDisplayTime) == 0x000020, "Member 'FEndDataTableTalkSequence::SubtitleDisplayTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableTalkSequence, NextTalkSequenceID) == 0x000024, "Member 'FEndDataTableTalkSequence::NextTalkSequenceID' has a wrong offset!");
static_assert(offsetof(FEndDataTableTalkSequence, IsVoice) == 0x00002C, "Member 'FEndDataTableTalkSequence::IsVoice' has a wrong offset!");
static_assert(offsetof(FEndDataTableTalkSequence, FinishedID_Array) == 0x000030, "Member 'FEndDataTableTalkSequence::FinishedID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableTalkSequence, TextID) == 0x000040, "Member 'FEndDataTableTalkSequence::TextID' has a wrong offset!");
static_assert(offsetof(FEndDataTableTalkSequence, VoiceID) == 0x000048, "Member 'FEndDataTableTalkSequence::VoiceID' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableFieldAttackAdditionalTarget
// 0x0048 (0x0050 - 0x0008)
struct FEndDataTableFieldAttackAdditionalTarget final : public FEndDataTableRowBase
{
public:
	class FName                                   TargetObjectLayoutID;                              // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LockOnStateTriggerID;                              // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   UnlockStateTriggerID;                              // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ThrowStateTriggerID;                               // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CatcheStateTriggerID;                              // 0x0028(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UserControlOff;                                    // 0x0030(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShowUI;                                            // 0x0031(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x2];                                       // 0x0032(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   HitActorName;                                      // 0x0034(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   HitActorStateTrigger;                              // 0x003C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ResponseAreaID;                                    // 0x0044(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         IsAllowFieldAttack;                                // 0x004C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableFieldAttackAdditionalTarget) == 0x000008, "Wrong alignment on FEndDataTableFieldAttackAdditionalTarget");
static_assert(sizeof(FEndDataTableFieldAttackAdditionalTarget) == 0x000050, "Wrong size on FEndDataTableFieldAttackAdditionalTarget");
static_assert(offsetof(FEndDataTableFieldAttackAdditionalTarget, TargetObjectLayoutID) == 0x000008, "Member 'FEndDataTableFieldAttackAdditionalTarget::TargetObjectLayoutID' has a wrong offset!");
static_assert(offsetof(FEndDataTableFieldAttackAdditionalTarget, LockOnStateTriggerID) == 0x000010, "Member 'FEndDataTableFieldAttackAdditionalTarget::LockOnStateTriggerID' has a wrong offset!");
static_assert(offsetof(FEndDataTableFieldAttackAdditionalTarget, UnlockStateTriggerID) == 0x000018, "Member 'FEndDataTableFieldAttackAdditionalTarget::UnlockStateTriggerID' has a wrong offset!");
static_assert(offsetof(FEndDataTableFieldAttackAdditionalTarget, ThrowStateTriggerID) == 0x000020, "Member 'FEndDataTableFieldAttackAdditionalTarget::ThrowStateTriggerID' has a wrong offset!");
static_assert(offsetof(FEndDataTableFieldAttackAdditionalTarget, CatcheStateTriggerID) == 0x000028, "Member 'FEndDataTableFieldAttackAdditionalTarget::CatcheStateTriggerID' has a wrong offset!");
static_assert(offsetof(FEndDataTableFieldAttackAdditionalTarget, UserControlOff) == 0x000030, "Member 'FEndDataTableFieldAttackAdditionalTarget::UserControlOff' has a wrong offset!");
static_assert(offsetof(FEndDataTableFieldAttackAdditionalTarget, ShowUI) == 0x000031, "Member 'FEndDataTableFieldAttackAdditionalTarget::ShowUI' has a wrong offset!");
static_assert(offsetof(FEndDataTableFieldAttackAdditionalTarget, HitActorName) == 0x000034, "Member 'FEndDataTableFieldAttackAdditionalTarget::HitActorName' has a wrong offset!");
static_assert(offsetof(FEndDataTableFieldAttackAdditionalTarget, HitActorStateTrigger) == 0x00003C, "Member 'FEndDataTableFieldAttackAdditionalTarget::HitActorStateTrigger' has a wrong offset!");
static_assert(offsetof(FEndDataTableFieldAttackAdditionalTarget, ResponseAreaID) == 0x000044, "Member 'FEndDataTableFieldAttackAdditionalTarget::ResponseAreaID' has a wrong offset!");
static_assert(offsetof(FEndDataTableFieldAttackAdditionalTarget, IsAllowFieldAttack) == 0x00004C, "Member 'FEndDataTableFieldAttackAdditionalTarget::IsAllowFieldAttack' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableFootAttribute
// 0x0050 (0x0058 - 0x0008)
struct FEndDataTableFootAttribute final : public FEndDataTableRowBase
{
public:
	class FString                                 FootAttribute;                                     // 0x0008(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AdditionalAttribute;                               // 0x0018(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CombinedAttribute;                                 // 0x0028(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FootEffect;                                        // 0x0038(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CombeinedFootEffect;                               // 0x0048(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableFootAttribute) == 0x000008, "Wrong alignment on FEndDataTableFootAttribute");
static_assert(sizeof(FEndDataTableFootAttribute) == 0x000058, "Wrong size on FEndDataTableFootAttribute");
static_assert(offsetof(FEndDataTableFootAttribute, FootAttribute) == 0x000008, "Member 'FEndDataTableFootAttribute::FootAttribute' has a wrong offset!");
static_assert(offsetof(FEndDataTableFootAttribute, AdditionalAttribute) == 0x000018, "Member 'FEndDataTableFootAttribute::AdditionalAttribute' has a wrong offset!");
static_assert(offsetof(FEndDataTableFootAttribute, CombinedAttribute) == 0x000028, "Member 'FEndDataTableFootAttribute::CombinedAttribute' has a wrong offset!");
static_assert(offsetof(FEndDataTableFootAttribute, FootEffect) == 0x000038, "Member 'FEndDataTableFootAttribute::FootEffect' has a wrong offset!");
static_assert(offsetof(FEndDataTableFootAttribute, CombeinedFootEffect) == 0x000048, "Member 'FEndDataTableFootAttribute::CombeinedFootEffect' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableBikePhaseEnemyParameter
// 0x0020 (0x0028 - 0x0008)
struct FEndDataTableBikePhaseEnemyParameter final : public FEndDataTableRowBase
{
public:
	float                                         PopupOffset;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EntryRelativePosition;                             // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OvertookRelativePosition;                          // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FollowingPosition;                                 // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RelativeSpeedAtPlayerAccel;                        // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RelativeSpeedAtPlayerBrake;                        // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         EnableTriggerBox;                                  // 0x0020(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         SlalomLastPosition;                                // 0x0021(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableBikePhaseEnemyParameter) == 0x000008, "Wrong alignment on FEndDataTableBikePhaseEnemyParameter");
static_assert(sizeof(FEndDataTableBikePhaseEnemyParameter) == 0x000028, "Wrong size on FEndDataTableBikePhaseEnemyParameter");
static_assert(offsetof(FEndDataTableBikePhaseEnemyParameter, PopupOffset) == 0x000008, "Member 'FEndDataTableBikePhaseEnemyParameter::PopupOffset' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikePhaseEnemyParameter, EntryRelativePosition) == 0x00000C, "Member 'FEndDataTableBikePhaseEnemyParameter::EntryRelativePosition' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikePhaseEnemyParameter, OvertookRelativePosition) == 0x000010, "Member 'FEndDataTableBikePhaseEnemyParameter::OvertookRelativePosition' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikePhaseEnemyParameter, FollowingPosition) == 0x000014, "Member 'FEndDataTableBikePhaseEnemyParameter::FollowingPosition' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikePhaseEnemyParameter, RelativeSpeedAtPlayerAccel) == 0x000018, "Member 'FEndDataTableBikePhaseEnemyParameter::RelativeSpeedAtPlayerAccel' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikePhaseEnemyParameter, RelativeSpeedAtPlayerBrake) == 0x00001C, "Member 'FEndDataTableBikePhaseEnemyParameter::RelativeSpeedAtPlayerBrake' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikePhaseEnemyParameter, EnableTriggerBox) == 0x000020, "Member 'FEndDataTableBikePhaseEnemyParameter::EnableTriggerBox' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikePhaseEnemyParameter, SlalomLastPosition) == 0x000021, "Member 'FEndDataTableBikePhaseEnemyParameter::SlalomLastPosition' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableBikePlayerFeedback
// 0x0010 (0x0018 - 0x0008)
struct FEndDataTableBikePlayerFeedback final : public FEndDataTableRowBase
{
public:
	class FName                                   HitCameraShakeDataID;                              // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   HitForceFeedbackFileName;                          // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableBikePlayerFeedback) == 0x000008, "Wrong alignment on FEndDataTableBikePlayerFeedback");
static_assert(sizeof(FEndDataTableBikePlayerFeedback) == 0x000018, "Wrong size on FEndDataTableBikePlayerFeedback");
static_assert(offsetof(FEndDataTableBikePlayerFeedback, HitCameraShakeDataID) == 0x000008, "Member 'FEndDataTableBikePlayerFeedback::HitCameraShakeDataID' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikePlayerFeedback, HitForceFeedbackFileName) == 0x000010, "Member 'FEndDataTableBikePlayerFeedback::HitForceFeedbackFileName' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableBikeSequenceJump
// 0x0020 (0x0028 - 0x0008)
struct FEndDataTableBikeSequenceJump final : public FEndDataTableRowBase
{
public:
	TArray<int32>                                 WaveActonParams_Array;                             // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         NowDamageRate;                                     // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Score;                                             // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalHpDamage;                                     // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Difficulty;                                        // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableBikeSequenceJump) == 0x000008, "Wrong alignment on FEndDataTableBikeSequenceJump");
static_assert(sizeof(FEndDataTableBikeSequenceJump) == 0x000028, "Wrong size on FEndDataTableBikeSequenceJump");
static_assert(offsetof(FEndDataTableBikeSequenceJump, WaveActonParams_Array) == 0x000008, "Member 'FEndDataTableBikeSequenceJump::WaveActonParams_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeSequenceJump, NowDamageRate) == 0x000018, "Member 'FEndDataTableBikeSequenceJump::NowDamageRate' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeSequenceJump, Score) == 0x00001C, "Member 'FEndDataTableBikeSequenceJump::Score' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeSequenceJump, TotalHpDamage) == 0x000020, "Member 'FEndDataTableBikeSequenceJump::TotalHpDamage' has a wrong offset!");
static_assert(offsetof(FEndDataTableBikeSequenceJump, Difficulty) == 0x000024, "Member 'FEndDataTableBikeSequenceJump::Difficulty' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableObjectTreasure
// 0x0088 (0x0090 - 0x0008)
struct FEndDataTableObjectTreasure final : public FEndDataTableRowBase
{
public:
	int32                                         UniqueIndex;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Priority;                                          // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StoryFlag;                                         // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TreasureSpecId;                                    // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActorName;                                         // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BaseTargetPointName;                               // 0x0028(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Reward;                                            // 0x0030(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RewardSecond;                                      // 0x0038(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           GetRewardStateTriggerList_Array;                   // 0x0040(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   CanOpenStateConditionID;                           // 0x0050(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OpenFailedStateTrigger;                            // 0x0058(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         AttributeList_Array;                               // 0x0060(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   OpenStateTrigger;                                  // 0x0070(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ResponseAreaID;                                    // 0x0078(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ResponseAreaPlayerID;                              // 0x0080(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         UseNavDistance;                                    // 0x0088(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x3];                                       // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         IgnoreNavDistance;                                 // 0x008C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableObjectTreasure) == 0x000008, "Wrong alignment on FEndDataTableObjectTreasure");
static_assert(sizeof(FEndDataTableObjectTreasure) == 0x000090, "Wrong size on FEndDataTableObjectTreasure");
static_assert(offsetof(FEndDataTableObjectTreasure, UniqueIndex) == 0x000008, "Member 'FEndDataTableObjectTreasure::UniqueIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectTreasure, Priority) == 0x00000C, "Member 'FEndDataTableObjectTreasure::Priority' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectTreasure, StoryFlag) == 0x000010, "Member 'FEndDataTableObjectTreasure::StoryFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectTreasure, TreasureSpecId) == 0x000018, "Member 'FEndDataTableObjectTreasure::TreasureSpecId' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectTreasure, ActorName) == 0x000020, "Member 'FEndDataTableObjectTreasure::ActorName' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectTreasure, BaseTargetPointName) == 0x000028, "Member 'FEndDataTableObjectTreasure::BaseTargetPointName' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectTreasure, Reward) == 0x000030, "Member 'FEndDataTableObjectTreasure::Reward' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectTreasure, RewardSecond) == 0x000038, "Member 'FEndDataTableObjectTreasure::RewardSecond' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectTreasure, GetRewardStateTriggerList_Array) == 0x000040, "Member 'FEndDataTableObjectTreasure::GetRewardStateTriggerList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectTreasure, CanOpenStateConditionID) == 0x000050, "Member 'FEndDataTableObjectTreasure::CanOpenStateConditionID' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectTreasure, OpenFailedStateTrigger) == 0x000058, "Member 'FEndDataTableObjectTreasure::OpenFailedStateTrigger' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectTreasure, AttributeList_Array) == 0x000060, "Member 'FEndDataTableObjectTreasure::AttributeList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectTreasure, OpenStateTrigger) == 0x000070, "Member 'FEndDataTableObjectTreasure::OpenStateTrigger' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectTreasure, ResponseAreaID) == 0x000078, "Member 'FEndDataTableObjectTreasure::ResponseAreaID' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectTreasure, ResponseAreaPlayerID) == 0x000080, "Member 'FEndDataTableObjectTreasure::ResponseAreaPlayerID' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectTreasure, UseNavDistance) == 0x000088, "Member 'FEndDataTableObjectTreasure::UseNavDistance' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectTreasure, IgnoreNavDistance) == 0x00008C, "Member 'FEndDataTableObjectTreasure::IgnoreNavDistance' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableCameraFlavor
// 0x0040 (0x0048 - 0x0008)
struct FEndDataTableCameraFlavor final : public FEndDataTableRowBase
{
public:
	class FName                                   DefaultID;                                         // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BeginBlendTime;                                    // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         BeginBlendType;                                    // 0x0014(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         EndBlendTime;                                      // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         EndBlendType;                                      // 0x001C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Param0;                                            // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Param1;                                            // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Param2;                                            // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Param3;                                            // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Param4;                                            // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Param5;                                            // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Param6;                                            // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Param7;                                            // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Param8;                                            // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ParamFlag;                                         // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableCameraFlavor) == 0x000008, "Wrong alignment on FEndDataTableCameraFlavor");
static_assert(sizeof(FEndDataTableCameraFlavor) == 0x000048, "Wrong size on FEndDataTableCameraFlavor");
static_assert(offsetof(FEndDataTableCameraFlavor, DefaultID) == 0x000008, "Member 'FEndDataTableCameraFlavor::DefaultID' has a wrong offset!");
static_assert(offsetof(FEndDataTableCameraFlavor, BeginBlendTime) == 0x000010, "Member 'FEndDataTableCameraFlavor::BeginBlendTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableCameraFlavor, BeginBlendType) == 0x000014, "Member 'FEndDataTableCameraFlavor::BeginBlendType' has a wrong offset!");
static_assert(offsetof(FEndDataTableCameraFlavor, EndBlendTime) == 0x000018, "Member 'FEndDataTableCameraFlavor::EndBlendTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableCameraFlavor, EndBlendType) == 0x00001C, "Member 'FEndDataTableCameraFlavor::EndBlendType' has a wrong offset!");
static_assert(offsetof(FEndDataTableCameraFlavor, Param0) == 0x000020, "Member 'FEndDataTableCameraFlavor::Param0' has a wrong offset!");
static_assert(offsetof(FEndDataTableCameraFlavor, Param1) == 0x000024, "Member 'FEndDataTableCameraFlavor::Param1' has a wrong offset!");
static_assert(offsetof(FEndDataTableCameraFlavor, Param2) == 0x000028, "Member 'FEndDataTableCameraFlavor::Param2' has a wrong offset!");
static_assert(offsetof(FEndDataTableCameraFlavor, Param3) == 0x00002C, "Member 'FEndDataTableCameraFlavor::Param3' has a wrong offset!");
static_assert(offsetof(FEndDataTableCameraFlavor, Param4) == 0x000030, "Member 'FEndDataTableCameraFlavor::Param4' has a wrong offset!");
static_assert(offsetof(FEndDataTableCameraFlavor, Param5) == 0x000034, "Member 'FEndDataTableCameraFlavor::Param5' has a wrong offset!");
static_assert(offsetof(FEndDataTableCameraFlavor, Param6) == 0x000038, "Member 'FEndDataTableCameraFlavor::Param6' has a wrong offset!");
static_assert(offsetof(FEndDataTableCameraFlavor, Param7) == 0x00003C, "Member 'FEndDataTableCameraFlavor::Param7' has a wrong offset!");
static_assert(offsetof(FEndDataTableCameraFlavor, Param8) == 0x000040, "Member 'FEndDataTableCameraFlavor::Param8' has a wrong offset!");
static_assert(offsetof(FEndDataTableCameraFlavor, ParamFlag) == 0x000044, "Member 'FEndDataTableCameraFlavor::ParamFlag' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableCameraSetting
// 0x0048 (0x0050 - 0x0008)
struct FEndDataTableCameraSetting final : public FEndDataTableRowBase
{
public:
	float                                         BeginBlendTime;                                    // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         BeginBlendType;                                    // 0x000C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         EndBlendTime;                                      // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         EndBlendType;                                      // 0x0014(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FOV;                                               // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Distance;                                          // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Height;                                            // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AimOffsetX;                                        // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AimOffsetY;                                        // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AimOffsetZ;                                        // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpaceOffsetRun;                                    // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpaceOffsetRunSpeed;                               // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpaceOffsetDash;                                   // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpaceOffsetDashSpeed;                              // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ResetPitch;                                        // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveAddDistance;                                   // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveAddDistanceSpeed;                              // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableCameraSetting) == 0x000008, "Wrong alignment on FEndDataTableCameraSetting");
static_assert(sizeof(FEndDataTableCameraSetting) == 0x000050, "Wrong size on FEndDataTableCameraSetting");
static_assert(offsetof(FEndDataTableCameraSetting, BeginBlendTime) == 0x000008, "Member 'FEndDataTableCameraSetting::BeginBlendTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableCameraSetting, BeginBlendType) == 0x00000C, "Member 'FEndDataTableCameraSetting::BeginBlendType' has a wrong offset!");
static_assert(offsetof(FEndDataTableCameraSetting, EndBlendTime) == 0x000010, "Member 'FEndDataTableCameraSetting::EndBlendTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableCameraSetting, EndBlendType) == 0x000014, "Member 'FEndDataTableCameraSetting::EndBlendType' has a wrong offset!");
static_assert(offsetof(FEndDataTableCameraSetting, FOV) == 0x000018, "Member 'FEndDataTableCameraSetting::FOV' has a wrong offset!");
static_assert(offsetof(FEndDataTableCameraSetting, Distance) == 0x00001C, "Member 'FEndDataTableCameraSetting::Distance' has a wrong offset!");
static_assert(offsetof(FEndDataTableCameraSetting, Height) == 0x000020, "Member 'FEndDataTableCameraSetting::Height' has a wrong offset!");
static_assert(offsetof(FEndDataTableCameraSetting, AimOffsetX) == 0x000024, "Member 'FEndDataTableCameraSetting::AimOffsetX' has a wrong offset!");
static_assert(offsetof(FEndDataTableCameraSetting, AimOffsetY) == 0x000028, "Member 'FEndDataTableCameraSetting::AimOffsetY' has a wrong offset!");
static_assert(offsetof(FEndDataTableCameraSetting, AimOffsetZ) == 0x00002C, "Member 'FEndDataTableCameraSetting::AimOffsetZ' has a wrong offset!");
static_assert(offsetof(FEndDataTableCameraSetting, SpaceOffsetRun) == 0x000030, "Member 'FEndDataTableCameraSetting::SpaceOffsetRun' has a wrong offset!");
static_assert(offsetof(FEndDataTableCameraSetting, SpaceOffsetRunSpeed) == 0x000034, "Member 'FEndDataTableCameraSetting::SpaceOffsetRunSpeed' has a wrong offset!");
static_assert(offsetof(FEndDataTableCameraSetting, SpaceOffsetDash) == 0x000038, "Member 'FEndDataTableCameraSetting::SpaceOffsetDash' has a wrong offset!");
static_assert(offsetof(FEndDataTableCameraSetting, SpaceOffsetDashSpeed) == 0x00003C, "Member 'FEndDataTableCameraSetting::SpaceOffsetDashSpeed' has a wrong offset!");
static_assert(offsetof(FEndDataTableCameraSetting, ResetPitch) == 0x000040, "Member 'FEndDataTableCameraSetting::ResetPitch' has a wrong offset!");
static_assert(offsetof(FEndDataTableCameraSetting, MoveAddDistance) == 0x000044, "Member 'FEndDataTableCameraSetting::MoveAddDistance' has a wrong offset!");
static_assert(offsetof(FEndDataTableCameraSetting, MoveAddDistanceSpeed) == 0x000048, "Member 'FEndDataTableCameraSetting::MoveAddDistanceSpeed' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableCameraShake
// 0x0050 (0x0058 - 0x0008)
struct FEndDataTableCameraShake final : public FEndDataTableRowBase
{
public:
	float                                         LocationRangeX;                                    // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LocationRangeY;                                    // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LocationRangeZ;                                    // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LocationAmplitudeX;                                // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LocationAmplitudeY;                                // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LocationAmplitudeZ;                                // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotationRangeX;                                    // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotationRangeY;                                    // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotationRangeZ;                                    // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotationAmplitudeX;                                // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotationAmplitudeY;                                // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotationAmplitudeZ;                                // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendInTime;                                       // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendOutTime;                                      // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InnerRadius;                                       // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OuterRadius;                                       // 0x004C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Falloff;                                           // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableCameraShake) == 0x000008, "Wrong alignment on FEndDataTableCameraShake");
static_assert(sizeof(FEndDataTableCameraShake) == 0x000058, "Wrong size on FEndDataTableCameraShake");
static_assert(offsetof(FEndDataTableCameraShake, LocationRangeX) == 0x000008, "Member 'FEndDataTableCameraShake::LocationRangeX' has a wrong offset!");
static_assert(offsetof(FEndDataTableCameraShake, LocationRangeY) == 0x00000C, "Member 'FEndDataTableCameraShake::LocationRangeY' has a wrong offset!");
static_assert(offsetof(FEndDataTableCameraShake, LocationRangeZ) == 0x000010, "Member 'FEndDataTableCameraShake::LocationRangeZ' has a wrong offset!");
static_assert(offsetof(FEndDataTableCameraShake, LocationAmplitudeX) == 0x000014, "Member 'FEndDataTableCameraShake::LocationAmplitudeX' has a wrong offset!");
static_assert(offsetof(FEndDataTableCameraShake, LocationAmplitudeY) == 0x000018, "Member 'FEndDataTableCameraShake::LocationAmplitudeY' has a wrong offset!");
static_assert(offsetof(FEndDataTableCameraShake, LocationAmplitudeZ) == 0x00001C, "Member 'FEndDataTableCameraShake::LocationAmplitudeZ' has a wrong offset!");
static_assert(offsetof(FEndDataTableCameraShake, RotationRangeX) == 0x000020, "Member 'FEndDataTableCameraShake::RotationRangeX' has a wrong offset!");
static_assert(offsetof(FEndDataTableCameraShake, RotationRangeY) == 0x000024, "Member 'FEndDataTableCameraShake::RotationRangeY' has a wrong offset!");
static_assert(offsetof(FEndDataTableCameraShake, RotationRangeZ) == 0x000028, "Member 'FEndDataTableCameraShake::RotationRangeZ' has a wrong offset!");
static_assert(offsetof(FEndDataTableCameraShake, RotationAmplitudeX) == 0x00002C, "Member 'FEndDataTableCameraShake::RotationAmplitudeX' has a wrong offset!");
static_assert(offsetof(FEndDataTableCameraShake, RotationAmplitudeY) == 0x000030, "Member 'FEndDataTableCameraShake::RotationAmplitudeY' has a wrong offset!");
static_assert(offsetof(FEndDataTableCameraShake, RotationAmplitudeZ) == 0x000034, "Member 'FEndDataTableCameraShake::RotationAmplitudeZ' has a wrong offset!");
static_assert(offsetof(FEndDataTableCameraShake, Scale) == 0x000038, "Member 'FEndDataTableCameraShake::Scale' has a wrong offset!");
static_assert(offsetof(FEndDataTableCameraShake, Duration) == 0x00003C, "Member 'FEndDataTableCameraShake::Duration' has a wrong offset!");
static_assert(offsetof(FEndDataTableCameraShake, BlendInTime) == 0x000040, "Member 'FEndDataTableCameraShake::BlendInTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableCameraShake, BlendOutTime) == 0x000044, "Member 'FEndDataTableCameraShake::BlendOutTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableCameraShake, InnerRadius) == 0x000048, "Member 'FEndDataTableCameraShake::InnerRadius' has a wrong offset!");
static_assert(offsetof(FEndDataTableCameraShake, OuterRadius) == 0x00004C, "Member 'FEndDataTableCameraShake::OuterRadius' has a wrong offset!");
static_assert(offsetof(FEndDataTableCameraShake, Falloff) == 0x000050, "Member 'FEndDataTableCameraShake::Falloff' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableChadlieVRBattle
// 0x0078 (0x0080 - 0x0008)
struct FEndDataTableChadlieVRBattle final : public FEndDataTableRowBase
{
public:
	int32                                         GameMode;                                          // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Condition;                                         // 0x000C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MateriaID;                                         // 0x0014(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CheckClearFlag;                                    // 0x001C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ViewFlag;                                          // 0x0024(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TitleNumber;                                       // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BGName;                                            // 0x0030(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Title;                                             // 0x0040(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Detail;                                            // 0x0050(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ImageName;                                         // 0x0060(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           StateTrigger_Array;                                // 0x0070(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableChadlieVRBattle) == 0x000008, "Wrong alignment on FEndDataTableChadlieVRBattle");
static_assert(sizeof(FEndDataTableChadlieVRBattle) == 0x000080, "Wrong size on FEndDataTableChadlieVRBattle");
static_assert(offsetof(FEndDataTableChadlieVRBattle, GameMode) == 0x000008, "Member 'FEndDataTableChadlieVRBattle::GameMode' has a wrong offset!");
static_assert(offsetof(FEndDataTableChadlieVRBattle, Condition) == 0x00000C, "Member 'FEndDataTableChadlieVRBattle::Condition' has a wrong offset!");
static_assert(offsetof(FEndDataTableChadlieVRBattle, MateriaID) == 0x000014, "Member 'FEndDataTableChadlieVRBattle::MateriaID' has a wrong offset!");
static_assert(offsetof(FEndDataTableChadlieVRBattle, CheckClearFlag) == 0x00001C, "Member 'FEndDataTableChadlieVRBattle::CheckClearFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTableChadlieVRBattle, ViewFlag) == 0x000024, "Member 'FEndDataTableChadlieVRBattle::ViewFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTableChadlieVRBattle, TitleNumber) == 0x00002C, "Member 'FEndDataTableChadlieVRBattle::TitleNumber' has a wrong offset!");
static_assert(offsetof(FEndDataTableChadlieVRBattle, BGName) == 0x000030, "Member 'FEndDataTableChadlieVRBattle::BGName' has a wrong offset!");
static_assert(offsetof(FEndDataTableChadlieVRBattle, Title) == 0x000040, "Member 'FEndDataTableChadlieVRBattle::Title' has a wrong offset!");
static_assert(offsetof(FEndDataTableChadlieVRBattle, Detail) == 0x000050, "Member 'FEndDataTableChadlieVRBattle::Detail' has a wrong offset!");
static_assert(offsetof(FEndDataTableChadlieVRBattle, ImageName) == 0x000060, "Member 'FEndDataTableChadlieVRBattle::ImageName' has a wrong offset!");
static_assert(offsetof(FEndDataTableChadlieVRBattle, StateTrigger_Array) == 0x000070, "Member 'FEndDataTableChadlieVRBattle::StateTrigger_Array' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableCharaPopPack
// 0x0010 (0x0018 - 0x0008)
struct FEndDataTableCharaPopPack final : public FEndDataTableRowBase
{
public:
	TArray<class FName>                           AssetName_Array;                                   // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableCharaPopPack) == 0x000008, "Wrong alignment on FEndDataTableCharaPopPack");
static_assert(sizeof(FEndDataTableCharaPopPack) == 0x000018, "Wrong size on FEndDataTableCharaPopPack");
static_assert(offsetof(FEndDataTableCharaPopPack, AssetName_Array) == 0x000008, "Member 'FEndDataTableCharaPopPack::AssetName_Array' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableChocoboFastTravelPoint
// 0x00D0 (0x00D8 - 0x0008)
struct FEndDataTableChocoboFastTravelPoint final : public FEndDataTableRowBase
{
public:
	int32                                         UniqueIndex;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PointName;                                         // 0x0010(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ChocoboActorName;                                  // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ChocoboRiderActorName;                             // 0x0028(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ChocoboCartActorName;                              // 0x0030(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RideTargetPointChocobo;                            // 0x0038(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ChocoboRiderPoint;                                 // 0x0040(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RideTargetPoint01;                                 // 0x0048(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RideTargetPoint02;                                 // 0x0050(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RideTargetPoint03;                                 // 0x0058(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ArrivalTargetPoint01;                              // 0x0060(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ArrivalTargetPoint02;                              // 0x0068(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ArrivalTargetPoint03;                              // 0x0070(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Price;                                             // 0x0078(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OnSelectedTrigger;                                 // 0x007C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OnPVStartTrigger;                                  // 0x0084(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OnArrivalTrigger;                                  // 0x008C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActivateStoryFlag;                                 // 0x0094(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DeactivateStoryFlag;                               // 0x009C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FreeAccessStoryFlag;                               // 0x00A4(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ShowArrivalNameStateTrigger;                       // 0x00AC(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B4[0x4];                                       // 0x00B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MenuPicturePreview;                                // 0x00B8(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MenuLocationPointName;                             // 0x00C8(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableChocoboFastTravelPoint) == 0x000008, "Wrong alignment on FEndDataTableChocoboFastTravelPoint");
static_assert(sizeof(FEndDataTableChocoboFastTravelPoint) == 0x0000D8, "Wrong size on FEndDataTableChocoboFastTravelPoint");
static_assert(offsetof(FEndDataTableChocoboFastTravelPoint, UniqueIndex) == 0x000008, "Member 'FEndDataTableChocoboFastTravelPoint::UniqueIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboFastTravelPoint, PointName) == 0x000010, "Member 'FEndDataTableChocoboFastTravelPoint::PointName' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboFastTravelPoint, ChocoboActorName) == 0x000020, "Member 'FEndDataTableChocoboFastTravelPoint::ChocoboActorName' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboFastTravelPoint, ChocoboRiderActorName) == 0x000028, "Member 'FEndDataTableChocoboFastTravelPoint::ChocoboRiderActorName' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboFastTravelPoint, ChocoboCartActorName) == 0x000030, "Member 'FEndDataTableChocoboFastTravelPoint::ChocoboCartActorName' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboFastTravelPoint, RideTargetPointChocobo) == 0x000038, "Member 'FEndDataTableChocoboFastTravelPoint::RideTargetPointChocobo' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboFastTravelPoint, ChocoboRiderPoint) == 0x000040, "Member 'FEndDataTableChocoboFastTravelPoint::ChocoboRiderPoint' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboFastTravelPoint, RideTargetPoint01) == 0x000048, "Member 'FEndDataTableChocoboFastTravelPoint::RideTargetPoint01' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboFastTravelPoint, RideTargetPoint02) == 0x000050, "Member 'FEndDataTableChocoboFastTravelPoint::RideTargetPoint02' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboFastTravelPoint, RideTargetPoint03) == 0x000058, "Member 'FEndDataTableChocoboFastTravelPoint::RideTargetPoint03' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboFastTravelPoint, ArrivalTargetPoint01) == 0x000060, "Member 'FEndDataTableChocoboFastTravelPoint::ArrivalTargetPoint01' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboFastTravelPoint, ArrivalTargetPoint02) == 0x000068, "Member 'FEndDataTableChocoboFastTravelPoint::ArrivalTargetPoint02' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboFastTravelPoint, ArrivalTargetPoint03) == 0x000070, "Member 'FEndDataTableChocoboFastTravelPoint::ArrivalTargetPoint03' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboFastTravelPoint, Price) == 0x000078, "Member 'FEndDataTableChocoboFastTravelPoint::Price' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboFastTravelPoint, OnSelectedTrigger) == 0x00007C, "Member 'FEndDataTableChocoboFastTravelPoint::OnSelectedTrigger' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboFastTravelPoint, OnPVStartTrigger) == 0x000084, "Member 'FEndDataTableChocoboFastTravelPoint::OnPVStartTrigger' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboFastTravelPoint, OnArrivalTrigger) == 0x00008C, "Member 'FEndDataTableChocoboFastTravelPoint::OnArrivalTrigger' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboFastTravelPoint, ActivateStoryFlag) == 0x000094, "Member 'FEndDataTableChocoboFastTravelPoint::ActivateStoryFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboFastTravelPoint, DeactivateStoryFlag) == 0x00009C, "Member 'FEndDataTableChocoboFastTravelPoint::DeactivateStoryFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboFastTravelPoint, FreeAccessStoryFlag) == 0x0000A4, "Member 'FEndDataTableChocoboFastTravelPoint::FreeAccessStoryFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboFastTravelPoint, ShowArrivalNameStateTrigger) == 0x0000AC, "Member 'FEndDataTableChocoboFastTravelPoint::ShowArrivalNameStateTrigger' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboFastTravelPoint, MenuPicturePreview) == 0x0000B8, "Member 'FEndDataTableChocoboFastTravelPoint::MenuPicturePreview' has a wrong offset!");
static_assert(offsetof(FEndDataTableChocoboFastTravelPoint, MenuLocationPointName) == 0x0000C8, "Member 'FEndDataTableChocoboFastTravelPoint::MenuLocationPointName' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableLearningSkill
// 0x0008 (0x0010 - 0x0008)
struct FEndDataTableLearningSkill final : public FEndDataTableRowBase
{
public:
	float                                         Probability;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableLearningSkill) == 0x000008, "Wrong alignment on FEndDataTableLearningSkill");
static_assert(sizeof(FEndDataTableLearningSkill) == 0x000010, "Wrong size on FEndDataTableLearningSkill");
static_assert(offsetof(FEndDataTableLearningSkill, Probability) == 0x000008, "Member 'FEndDataTableLearningSkill::Probability' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableColosseum
// 0x0118 (0x0120 - 0x0008)
struct FEndDataTableColosseum final : public FEndDataTableRowBase
{
public:
	int32                                         TimerSaveArrayIndex;                               // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         DataKind;                                          // 0x000C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   BattleSceneObjectID;                               // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BattleSceneNaviID;                                 // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ItemName;                                          // 0x0020(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FlavorTextID;                                      // 0x0030(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Difficulty;                                        // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PartyMax;                                          // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           EntryMember_Array;                                 // 0x0048(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         UseGil;                                            // 0x0058(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RewardID;                                          // 0x005C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParentCourseID;                                    // 0x0064(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 ViewDifficulty_Array;                              // 0x0070(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         IsVRMission;                                       // 0x0080(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         CourseExtra;                                       // 0x0081(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_82[0x6];                                       // 0x0082(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           OpenFlagID_Array;                                  // 0x0088(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   ClearFlagID;                                       // 0x0098(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BattleMax;                                         // 0x00A0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           BattleSceneID_Array;                               // 0x00A8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           BattleScenePosDataID_Array;                        // 0x00B8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           CourseStartStateTrigger_Array;                     // 0x00C8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           CourseClearStateTrigger_Array;                     // 0x00D8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 CameraPitch_Array;                                 // 0x00E8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           BattleBgm_Array;                                   // 0x00F8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 BattleBgmBlendType_Array;                          // 0x0108(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         EnableRewardLog;                                   // 0x0118(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11C[0x4];                                      // 0x011C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableColosseum) == 0x000008, "Wrong alignment on FEndDataTableColosseum");
static_assert(sizeof(FEndDataTableColosseum) == 0x000120, "Wrong size on FEndDataTableColosseum");
static_assert(offsetof(FEndDataTableColosseum, TimerSaveArrayIndex) == 0x000008, "Member 'FEndDataTableColosseum::TimerSaveArrayIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTableColosseum, DataKind) == 0x00000C, "Member 'FEndDataTableColosseum::DataKind' has a wrong offset!");
static_assert(offsetof(FEndDataTableColosseum, BattleSceneObjectID) == 0x000010, "Member 'FEndDataTableColosseum::BattleSceneObjectID' has a wrong offset!");
static_assert(offsetof(FEndDataTableColosseum, BattleSceneNaviID) == 0x000018, "Member 'FEndDataTableColosseum::BattleSceneNaviID' has a wrong offset!");
static_assert(offsetof(FEndDataTableColosseum, ItemName) == 0x000020, "Member 'FEndDataTableColosseum::ItemName' has a wrong offset!");
static_assert(offsetof(FEndDataTableColosseum, FlavorTextID) == 0x000030, "Member 'FEndDataTableColosseum::FlavorTextID' has a wrong offset!");
static_assert(offsetof(FEndDataTableColosseum, Difficulty) == 0x000040, "Member 'FEndDataTableColosseum::Difficulty' has a wrong offset!");
static_assert(offsetof(FEndDataTableColosseum, PartyMax) == 0x000044, "Member 'FEndDataTableColosseum::PartyMax' has a wrong offset!");
static_assert(offsetof(FEndDataTableColosseum, EntryMember_Array) == 0x000048, "Member 'FEndDataTableColosseum::EntryMember_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableColosseum, UseGil) == 0x000058, "Member 'FEndDataTableColosseum::UseGil' has a wrong offset!");
static_assert(offsetof(FEndDataTableColosseum, RewardID) == 0x00005C, "Member 'FEndDataTableColosseum::RewardID' has a wrong offset!");
static_assert(offsetof(FEndDataTableColosseum, ParentCourseID) == 0x000064, "Member 'FEndDataTableColosseum::ParentCourseID' has a wrong offset!");
static_assert(offsetof(FEndDataTableColosseum, ViewDifficulty_Array) == 0x000070, "Member 'FEndDataTableColosseum::ViewDifficulty_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableColosseum, IsVRMission) == 0x000080, "Member 'FEndDataTableColosseum::IsVRMission' has a wrong offset!");
static_assert(offsetof(FEndDataTableColosseum, CourseExtra) == 0x000081, "Member 'FEndDataTableColosseum::CourseExtra' has a wrong offset!");
static_assert(offsetof(FEndDataTableColosseum, OpenFlagID_Array) == 0x000088, "Member 'FEndDataTableColosseum::OpenFlagID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableColosseum, ClearFlagID) == 0x000098, "Member 'FEndDataTableColosseum::ClearFlagID' has a wrong offset!");
static_assert(offsetof(FEndDataTableColosseum, BattleMax) == 0x0000A0, "Member 'FEndDataTableColosseum::BattleMax' has a wrong offset!");
static_assert(offsetof(FEndDataTableColosseum, BattleSceneID_Array) == 0x0000A8, "Member 'FEndDataTableColosseum::BattleSceneID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableColosseum, BattleScenePosDataID_Array) == 0x0000B8, "Member 'FEndDataTableColosseum::BattleScenePosDataID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableColosseum, CourseStartStateTrigger_Array) == 0x0000C8, "Member 'FEndDataTableColosseum::CourseStartStateTrigger_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableColosseum, CourseClearStateTrigger_Array) == 0x0000D8, "Member 'FEndDataTableColosseum::CourseClearStateTrigger_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableColosseum, CameraPitch_Array) == 0x0000E8, "Member 'FEndDataTableColosseum::CameraPitch_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableColosseum, BattleBgm_Array) == 0x0000F8, "Member 'FEndDataTableColosseum::BattleBgm_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableColosseum, BattleBgmBlendType_Array) == 0x000108, "Member 'FEndDataTableColosseum::BattleBgmBlendType_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableColosseum, EnableRewardLog) == 0x000118, "Member 'FEndDataTableColosseum::EnableRewardLog' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableCondorFortBoard
// 0x0050 (0x0058 - 0x0008)
struct FEndDataTableCondorFortBoard final : public FEndDataTableRowBase
{
public:
	uint8                                         UniqueID;                                          // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   NameTextID;                                        // 0x000C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   HelpTextID;                                        // 0x0014(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Reality;                                           // 0x001C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxATB;                                            // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InitialATB;                                        // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ATBStep;                                           // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ATBSpeed;                                          // 0x002C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         UnitNum;                                           // 0x002D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         MateriaSlotDouble;                                 // 0x002E(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         MateriaSlotSingle;                                 // 0x002F(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           MateriaID_Array;                                   // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   HomeBaseID;                                        // 0x0040(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           RelayBaseID_Array;                                 // 0x0048(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableCondorFortBoard) == 0x000008, "Wrong alignment on FEndDataTableCondorFortBoard");
static_assert(sizeof(FEndDataTableCondorFortBoard) == 0x000058, "Wrong size on FEndDataTableCondorFortBoard");
static_assert(offsetof(FEndDataTableCondorFortBoard, UniqueID) == 0x000008, "Member 'FEndDataTableCondorFortBoard::UniqueID' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortBoard, NameTextID) == 0x00000C, "Member 'FEndDataTableCondorFortBoard::NameTextID' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortBoard, HelpTextID) == 0x000014, "Member 'FEndDataTableCondorFortBoard::HelpTextID' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortBoard, Reality) == 0x00001C, "Member 'FEndDataTableCondorFortBoard::Reality' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortBoard, MaxATB) == 0x000020, "Member 'FEndDataTableCondorFortBoard::MaxATB' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortBoard, InitialATB) == 0x000024, "Member 'FEndDataTableCondorFortBoard::InitialATB' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortBoard, ATBStep) == 0x000028, "Member 'FEndDataTableCondorFortBoard::ATBStep' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortBoard, ATBSpeed) == 0x00002C, "Member 'FEndDataTableCondorFortBoard::ATBSpeed' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortBoard, UnitNum) == 0x00002D, "Member 'FEndDataTableCondorFortBoard::UnitNum' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortBoard, MateriaSlotDouble) == 0x00002E, "Member 'FEndDataTableCondorFortBoard::MateriaSlotDouble' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortBoard, MateriaSlotSingle) == 0x00002F, "Member 'FEndDataTableCondorFortBoard::MateriaSlotSingle' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortBoard, MateriaID_Array) == 0x000030, "Member 'FEndDataTableCondorFortBoard::MateriaID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortBoard, HomeBaseID) == 0x000040, "Member 'FEndDataTableCondorFortBoard::HomeBaseID' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortBoard, RelayBaseID_Array) == 0x000048, "Member 'FEndDataTableCondorFortBoard::RelayBaseID_Array' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableCondorFortCharacter
// 0x00B0 (0x00B8 - 0x0008)
struct FEndDataTableCondorFortCharacter final : public FEndDataTableRowBase
{
public:
	class FName                                   CharaSpecID;                                       // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Role;                                              // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MoveSpeed;                                         // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         MoveType;                                          // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SpawnTime;                                         // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Attack;                                            // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveInterval;                                      // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveDistance;                                      // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SearchRange;                                       // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AttackRange;                                       // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AttackInterval;                                    // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         TargetBase;                                        // 0x003C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         TargetGround;                                      // 0x003D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         TargetAir;                                         // 0x003E(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         TargetWater;                                       // 0x003F(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CharacterParameterID;                              // 0x0040(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         EnemyCategory;                                     // 0x0048(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 PropertyResist_Array;                              // 0x0050(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<uint8>                                 AttributeResist_Array;                             // 0x0060(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<uint8>                                 StatusChangeResist_Array;                          // 0x0070(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         KeepValue;                                         // 0x0080(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         DisableLaunch;                                     // 0x0081(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         DisableKnockback;                                  // 0x0082(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_83[0x1];                                       // 0x0083(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SubCharacterID;                                    // 0x0084(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OffsetX;                                           // 0x008C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OffsetY;                                           // 0x0090(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OffsetZ;                                           // 0x0094(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         DisableTargetLine;                                 // 0x0098(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_99[0x3];                                       // 0x0099(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   TargetLineAttachSocket;                            // 0x009C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AimTargetSocket;                                   // 0x00A4(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StatusChangeEffectAttachSocket;                    // 0x00AC(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B4[0x4];                                       // 0x00B4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableCondorFortCharacter) == 0x000008, "Wrong alignment on FEndDataTableCondorFortCharacter");
static_assert(sizeof(FEndDataTableCondorFortCharacter) == 0x0000B8, "Wrong size on FEndDataTableCondorFortCharacter");
static_assert(offsetof(FEndDataTableCondorFortCharacter, CharaSpecID) == 0x000008, "Member 'FEndDataTableCondorFortCharacter::CharaSpecID' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortCharacter, Role) == 0x000010, "Member 'FEndDataTableCondorFortCharacter::Role' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortCharacter, MoveSpeed) == 0x000014, "Member 'FEndDataTableCondorFortCharacter::MoveSpeed' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortCharacter, MoveType) == 0x000018, "Member 'FEndDataTableCondorFortCharacter::MoveType' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortCharacter, SpawnTime) == 0x00001C, "Member 'FEndDataTableCondorFortCharacter::SpawnTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortCharacter, Attack) == 0x000020, "Member 'FEndDataTableCondorFortCharacter::Attack' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortCharacter, MoveInterval) == 0x000028, "Member 'FEndDataTableCondorFortCharacter::MoveInterval' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortCharacter, MoveDistance) == 0x00002C, "Member 'FEndDataTableCondorFortCharacter::MoveDistance' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortCharacter, SearchRange) == 0x000030, "Member 'FEndDataTableCondorFortCharacter::SearchRange' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortCharacter, AttackRange) == 0x000034, "Member 'FEndDataTableCondorFortCharacter::AttackRange' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortCharacter, AttackInterval) == 0x000038, "Member 'FEndDataTableCondorFortCharacter::AttackInterval' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortCharacter, TargetBase) == 0x00003C, "Member 'FEndDataTableCondorFortCharacter::TargetBase' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortCharacter, TargetGround) == 0x00003D, "Member 'FEndDataTableCondorFortCharacter::TargetGround' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortCharacter, TargetAir) == 0x00003E, "Member 'FEndDataTableCondorFortCharacter::TargetAir' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortCharacter, TargetWater) == 0x00003F, "Member 'FEndDataTableCondorFortCharacter::TargetWater' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortCharacter, CharacterParameterID) == 0x000040, "Member 'FEndDataTableCondorFortCharacter::CharacterParameterID' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortCharacter, EnemyCategory) == 0x000048, "Member 'FEndDataTableCondorFortCharacter::EnemyCategory' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortCharacter, PropertyResist_Array) == 0x000050, "Member 'FEndDataTableCondorFortCharacter::PropertyResist_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortCharacter, AttributeResist_Array) == 0x000060, "Member 'FEndDataTableCondorFortCharacter::AttributeResist_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortCharacter, StatusChangeResist_Array) == 0x000070, "Member 'FEndDataTableCondorFortCharacter::StatusChangeResist_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortCharacter, KeepValue) == 0x000080, "Member 'FEndDataTableCondorFortCharacter::KeepValue' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortCharacter, DisableLaunch) == 0x000081, "Member 'FEndDataTableCondorFortCharacter::DisableLaunch' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortCharacter, DisableKnockback) == 0x000082, "Member 'FEndDataTableCondorFortCharacter::DisableKnockback' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortCharacter, SubCharacterID) == 0x000084, "Member 'FEndDataTableCondorFortCharacter::SubCharacterID' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortCharacter, OffsetX) == 0x00008C, "Member 'FEndDataTableCondorFortCharacter::OffsetX' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortCharacter, OffsetY) == 0x000090, "Member 'FEndDataTableCondorFortCharacter::OffsetY' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortCharacter, OffsetZ) == 0x000094, "Member 'FEndDataTableCondorFortCharacter::OffsetZ' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortCharacter, DisableTargetLine) == 0x000098, "Member 'FEndDataTableCondorFortCharacter::DisableTargetLine' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortCharacter, TargetLineAttachSocket) == 0x00009C, "Member 'FEndDataTableCondorFortCharacter::TargetLineAttachSocket' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortCharacter, AimTargetSocket) == 0x0000A4, "Member 'FEndDataTableCondorFortCharacter::AimTargetSocket' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortCharacter, StatusChangeEffectAttachSocket) == 0x0000AC, "Member 'FEndDataTableCondorFortCharacter::StatusChangeEffectAttachSocket' has a wrong offset!");

// ScriptStruct EndGame.EndLipSyncAudioAttackAnimation
// 0x0018 (0x0018 - 0x0000)
struct FEndLipSyncAudioAttackAnimation final
{
public:
	class FName                                   BoneName;                                          // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FEndLipSyncAnimation>           Animations;                                        // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndLipSyncAudioAttackAnimation) == 0x000008, "Wrong alignment on FEndLipSyncAudioAttackAnimation");
static_assert(sizeof(FEndLipSyncAudioAttackAnimation) == 0x000018, "Wrong size on FEndLipSyncAudioAttackAnimation");
static_assert(offsetof(FEndLipSyncAudioAttackAnimation, BoneName) == 0x000000, "Member 'FEndLipSyncAudioAttackAnimation::BoneName' has a wrong offset!");
static_assert(offsetof(FEndLipSyncAudioAttackAnimation, Animations) == 0x000008, "Member 'FEndLipSyncAudioAttackAnimation::Animations' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableCondorFortCharacterParameter
// 0x0008 (0x0010 - 0x0008)
struct FEndDataTableCondorFortCharacterParameter final : public FEndDataTableRowBase
{
public:
	int32                                         Health;                                            // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Attack;                                            // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableCondorFortCharacterParameter) == 0x000008, "Wrong alignment on FEndDataTableCondorFortCharacterParameter");
static_assert(sizeof(FEndDataTableCondorFortCharacterParameter) == 0x000010, "Wrong size on FEndDataTableCondorFortCharacterParameter");
static_assert(offsetof(FEndDataTableCondorFortCharacterParameter, Health) == 0x000008, "Member 'FEndDataTableCondorFortCharacterParameter::Health' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortCharacterParameter, Attack) == 0x00000C, "Member 'FEndDataTableCondorFortCharacterParameter::Attack' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableCondorFortCommonParameter
// 0x0010 (0x0018 - 0x0008)
struct FEndDataTableCondorFortCommonParameter final : public FEndDataTableRowBase
{
public:
	class FName                                   ParamString;                                       // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ParamFloat;                                        // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableCondorFortCommonParameter) == 0x000008, "Wrong alignment on FEndDataTableCondorFortCommonParameter");
static_assert(sizeof(FEndDataTableCondorFortCommonParameter) == 0x000018, "Wrong size on FEndDataTableCondorFortCommonParameter");
static_assert(offsetof(FEndDataTableCondorFortCommonParameter, ParamString) == 0x000008, "Member 'FEndDataTableCondorFortCommonParameter::ParamString' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortCommonParameter, ParamFloat) == 0x000010, "Member 'FEndDataTableCondorFortCommonParameter::ParamFloat' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableCondorFortMateria
// 0x0038 (0x0040 - 0x0008)
struct FEndDataTableCondorFortMateria final : public FEndDataTableRowBase
{
public:
	class FName                                   NameTextID;                                        // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   HelpTextID;                                        // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Icon;                                              // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Cost;                                              // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AbilityID;                                         // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DamageSourceID;                                    // 0x0028(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Category;                                          // 0x0030(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Type;                                              // 0x0031(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x2];                                       // 0x0032(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RecastTime;                                        // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Kind;                                              // 0x0038(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Attr;                                              // 0x0039(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Size;                                              // 0x003A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3B[0x5];                                       // 0x003B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableCondorFortMateria) == 0x000008, "Wrong alignment on FEndDataTableCondorFortMateria");
static_assert(sizeof(FEndDataTableCondorFortMateria) == 0x000040, "Wrong size on FEndDataTableCondorFortMateria");
static_assert(offsetof(FEndDataTableCondorFortMateria, NameTextID) == 0x000008, "Member 'FEndDataTableCondorFortMateria::NameTextID' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortMateria, HelpTextID) == 0x000010, "Member 'FEndDataTableCondorFortMateria::HelpTextID' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortMateria, Icon) == 0x000018, "Member 'FEndDataTableCondorFortMateria::Icon' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortMateria, Cost) == 0x00001C, "Member 'FEndDataTableCondorFortMateria::Cost' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortMateria, AbilityID) == 0x000020, "Member 'FEndDataTableCondorFortMateria::AbilityID' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortMateria, DamageSourceID) == 0x000028, "Member 'FEndDataTableCondorFortMateria::DamageSourceID' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortMateria, Category) == 0x000030, "Member 'FEndDataTableCondorFortMateria::Category' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortMateria, Type) == 0x000031, "Member 'FEndDataTableCondorFortMateria::Type' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortMateria, RecastTime) == 0x000034, "Member 'FEndDataTableCondorFortMateria::RecastTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortMateria, Kind) == 0x000038, "Member 'FEndDataTableCondorFortMateria::Kind' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortMateria, Attr) == 0x000039, "Member 'FEndDataTableCondorFortMateria::Attr' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortMateria, Size) == 0x00003A, "Member 'FEndDataTableCondorFortMateria::Size' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableCondorFortOpponentPersonality
// 0x0080 (0x0088 - 0x0008)
struct FEndDataTableCondorFortOpponentPersonality final : public FEndDataTableRowBase
{
public:
	uint8                                         UnitRatio;                                         // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         MateriaRatio;                                      // 0x0009(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ATB;                                               // 0x000A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Priority;                                          // 0x000B(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         PriorityOwn;                                       // 0x000C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Placement;                                         // 0x000D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         PrimaryRole;                                       // 0x000E(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         SecondaryRorle;                                    // 0x000F(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   UseMateria;                                        // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   UseUnit;                                           // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         MateriaAccuracy;                                   // 0x0020(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 switchTiming_Array;                                // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<uint8>                                 switchTerm_Array;                                  // 0x0038(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<uint8>                                 switchValue_Array;                                 // 0x0048(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           switchMateria_Array;                               // 0x0058(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           switchUnit_Array;                                  // 0x0068(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           switchName_Array;                                  // 0x0078(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableCondorFortOpponentPersonality) == 0x000008, "Wrong alignment on FEndDataTableCondorFortOpponentPersonality");
static_assert(sizeof(FEndDataTableCondorFortOpponentPersonality) == 0x000088, "Wrong size on FEndDataTableCondorFortOpponentPersonality");
static_assert(offsetof(FEndDataTableCondorFortOpponentPersonality, UnitRatio) == 0x000008, "Member 'FEndDataTableCondorFortOpponentPersonality::UnitRatio' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortOpponentPersonality, MateriaRatio) == 0x000009, "Member 'FEndDataTableCondorFortOpponentPersonality::MateriaRatio' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortOpponentPersonality, ATB) == 0x00000A, "Member 'FEndDataTableCondorFortOpponentPersonality::ATB' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortOpponentPersonality, Priority) == 0x00000B, "Member 'FEndDataTableCondorFortOpponentPersonality::Priority' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortOpponentPersonality, PriorityOwn) == 0x00000C, "Member 'FEndDataTableCondorFortOpponentPersonality::PriorityOwn' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortOpponentPersonality, Placement) == 0x00000D, "Member 'FEndDataTableCondorFortOpponentPersonality::Placement' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortOpponentPersonality, PrimaryRole) == 0x00000E, "Member 'FEndDataTableCondorFortOpponentPersonality::PrimaryRole' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortOpponentPersonality, SecondaryRorle) == 0x00000F, "Member 'FEndDataTableCondorFortOpponentPersonality::SecondaryRorle' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortOpponentPersonality, UseMateria) == 0x000010, "Member 'FEndDataTableCondorFortOpponentPersonality::UseMateria' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortOpponentPersonality, UseUnit) == 0x000018, "Member 'FEndDataTableCondorFortOpponentPersonality::UseUnit' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortOpponentPersonality, MateriaAccuracy) == 0x000020, "Member 'FEndDataTableCondorFortOpponentPersonality::MateriaAccuracy' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortOpponentPersonality, switchTiming_Array) == 0x000028, "Member 'FEndDataTableCondorFortOpponentPersonality::switchTiming_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortOpponentPersonality, switchTerm_Array) == 0x000038, "Member 'FEndDataTableCondorFortOpponentPersonality::switchTerm_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortOpponentPersonality, switchValue_Array) == 0x000048, "Member 'FEndDataTableCondorFortOpponentPersonality::switchValue_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortOpponentPersonality, switchMateria_Array) == 0x000058, "Member 'FEndDataTableCondorFortOpponentPersonality::switchMateria_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortOpponentPersonality, switchUnit_Array) == 0x000068, "Member 'FEndDataTableCondorFortOpponentPersonality::switchUnit_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortOpponentPersonality, switchName_Array) == 0x000078, "Member 'FEndDataTableCondorFortOpponentPersonality::switchName_Array' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableCondorFortUnitFormation
// 0x0020 (0x0028 - 0x0008)
struct FEndDataTableCondorFortUnitFormation final : public FEndDataTableRowBase
{
public:
	TArray<float>                                 OffsetForward_Array;                               // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 OffsetRight_Array;                                 // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableCondorFortUnitFormation) == 0x000008, "Wrong alignment on FEndDataTableCondorFortUnitFormation");
static_assert(sizeof(FEndDataTableCondorFortUnitFormation) == 0x000028, "Wrong size on FEndDataTableCondorFortUnitFormation");
static_assert(offsetof(FEndDataTableCondorFortUnitFormation, OffsetForward_Array) == 0x000008, "Member 'FEndDataTableCondorFortUnitFormation::OffsetForward_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableCondorFortUnitFormation, OffsetRight_Array) == 0x000018, "Member 'FEndDataTableCondorFortUnitFormation::OffsetRight_Array' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableCutSceneList
// 0x01F8 (0x0200 - 0x0008)
struct FEndDataTableCutSceneList final : public FEndDataTableRowBase
{
public:
	class FString                                 DebugEnvironmentSetName;                           // 0x0008(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DebugLocationName;                                 // 0x0018(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LastCutOnFirstSequence;                            // 0x0028(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OverrideEnableDrawDistance;                        // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OverrideInCameraTickDistance;                      // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         StartCameraBlend;                                  // 0x0040(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StartCameraBlendStartRate;                         // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartCameraBlendEndRate;                           // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartCameraBlendType;                              // 0x004C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartAimBlendStartRate;                            // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartAimBlendEndRate;                              // 0x0054(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartAimBlendType;                                 // 0x0058(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartFOVBlendStartRate;                            // 0x005C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartFOVBlendEndRate;                              // 0x0060(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartFovBlendType;                                 // 0x0064(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartCameraBlendTime;                              // 0x0068(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         EndCameraBlend;                                    // 0x006C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6D[0x3];                                       // 0x006D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         EndCameraBlendStartRate;                           // 0x0070(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndCameraBlendEndRate;                             // 0x0074(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EndCameraBlendType;                                // 0x0078(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndAimBlendStartRate;                              // 0x007C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndAimBlendEndRate;                                // 0x0080(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EndAimBlendType;                                   // 0x0084(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndFOVBlendStartRate;                              // 0x0088(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndFOVBlendEndRate;                                // 0x008C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EndFovBlendType;                                   // 0x0090(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         NextCutSceneNameList_Array;                        // 0x0098(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         LevelTimingReadyCutScene;                          // 0x00A8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A9[0x3];                                       // 0x00A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         EmgCameraPositionX;                                // 0x00AC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EmgCameraPositionY;                                // 0x00B0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EmgCameraPositionZ;                                // 0x00B4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EmgCameraAimPositionX;                             // 0x00B8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EmgCameraAimPositionY;                             // 0x00BC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EmgCameraAimPositionZ;                             // 0x00C0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InMotionBlendFrame;                                // 0x00C4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PopCharaLimitOnTick;                               // 0x00C8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MovieMaterialName;                                 // 0x00CC(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MoviePastedActor;                                  // 0x00D4(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   WhereMovieActorOn;                                 // 0x00DC(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E4[0x4];                                       // 0x00E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           DebugExtraSubLevelList_Array;                      // 0x00E8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 DebugFaCharaSpecName1;                             // 0x00F8(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DebugFaAttachActorName1;                           // 0x0108(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DebugFaAttachSocketName1;                          // 0x0118(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DebugFaCharaSpecName2;                             // 0x0128(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DebugFaAttachActorName2;                           // 0x0138(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DebugFaAttachSocketName2;                          // 0x0148(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DebugFaCharaSpecName3;                             // 0x0158(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DebugFaAttachActorName3;                           // 0x0168(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DebugFaAttachSocketName3;                          // 0x0178(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DebugFaCharaSpecName4;                             // 0x0188(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DebugFaAttachActorName4;                           // 0x0198(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DebugFaAttachSocketName4;                          // 0x01A8(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DebugFaCharaSpecName5;                             // 0x01B8(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DebugFaAttachActorName5;                           // 0x01C8(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DebugFaAttachSocketName5;                          // 0x01D8(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ExtraFlags;                                        // 0x01E8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   UseMovieMaterialName_Base;                         // 0x01EC(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   UseMovieMaterialName_US;                           // 0x01F4(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1FC[0x4];                                      // 0x01FC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableCutSceneList) == 0x000008, "Wrong alignment on FEndDataTableCutSceneList");
static_assert(sizeof(FEndDataTableCutSceneList) == 0x000200, "Wrong size on FEndDataTableCutSceneList");
static_assert(offsetof(FEndDataTableCutSceneList, DebugEnvironmentSetName) == 0x000008, "Member 'FEndDataTableCutSceneList::DebugEnvironmentSetName' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneList, DebugLocationName) == 0x000018, "Member 'FEndDataTableCutSceneList::DebugLocationName' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneList, LastCutOnFirstSequence) == 0x000028, "Member 'FEndDataTableCutSceneList::LastCutOnFirstSequence' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneList, OverrideEnableDrawDistance) == 0x000038, "Member 'FEndDataTableCutSceneList::OverrideEnableDrawDistance' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneList, OverrideInCameraTickDistance) == 0x00003C, "Member 'FEndDataTableCutSceneList::OverrideInCameraTickDistance' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneList, StartCameraBlend) == 0x000040, "Member 'FEndDataTableCutSceneList::StartCameraBlend' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneList, StartCameraBlendStartRate) == 0x000044, "Member 'FEndDataTableCutSceneList::StartCameraBlendStartRate' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneList, StartCameraBlendEndRate) == 0x000048, "Member 'FEndDataTableCutSceneList::StartCameraBlendEndRate' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneList, StartCameraBlendType) == 0x00004C, "Member 'FEndDataTableCutSceneList::StartCameraBlendType' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneList, StartAimBlendStartRate) == 0x000050, "Member 'FEndDataTableCutSceneList::StartAimBlendStartRate' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneList, StartAimBlendEndRate) == 0x000054, "Member 'FEndDataTableCutSceneList::StartAimBlendEndRate' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneList, StartAimBlendType) == 0x000058, "Member 'FEndDataTableCutSceneList::StartAimBlendType' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneList, StartFOVBlendStartRate) == 0x00005C, "Member 'FEndDataTableCutSceneList::StartFOVBlendStartRate' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneList, StartFOVBlendEndRate) == 0x000060, "Member 'FEndDataTableCutSceneList::StartFOVBlendEndRate' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneList, StartFovBlendType) == 0x000064, "Member 'FEndDataTableCutSceneList::StartFovBlendType' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneList, StartCameraBlendTime) == 0x000068, "Member 'FEndDataTableCutSceneList::StartCameraBlendTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneList, EndCameraBlend) == 0x00006C, "Member 'FEndDataTableCutSceneList::EndCameraBlend' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneList, EndCameraBlendStartRate) == 0x000070, "Member 'FEndDataTableCutSceneList::EndCameraBlendStartRate' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneList, EndCameraBlendEndRate) == 0x000074, "Member 'FEndDataTableCutSceneList::EndCameraBlendEndRate' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneList, EndCameraBlendType) == 0x000078, "Member 'FEndDataTableCutSceneList::EndCameraBlendType' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneList, EndAimBlendStartRate) == 0x00007C, "Member 'FEndDataTableCutSceneList::EndAimBlendStartRate' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneList, EndAimBlendEndRate) == 0x000080, "Member 'FEndDataTableCutSceneList::EndAimBlendEndRate' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneList, EndAimBlendType) == 0x000084, "Member 'FEndDataTableCutSceneList::EndAimBlendType' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneList, EndFOVBlendStartRate) == 0x000088, "Member 'FEndDataTableCutSceneList::EndFOVBlendStartRate' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneList, EndFOVBlendEndRate) == 0x00008C, "Member 'FEndDataTableCutSceneList::EndFOVBlendEndRate' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneList, EndFovBlendType) == 0x000090, "Member 'FEndDataTableCutSceneList::EndFovBlendType' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneList, NextCutSceneNameList_Array) == 0x000098, "Member 'FEndDataTableCutSceneList::NextCutSceneNameList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneList, LevelTimingReadyCutScene) == 0x0000A8, "Member 'FEndDataTableCutSceneList::LevelTimingReadyCutScene' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneList, EmgCameraPositionX) == 0x0000AC, "Member 'FEndDataTableCutSceneList::EmgCameraPositionX' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneList, EmgCameraPositionY) == 0x0000B0, "Member 'FEndDataTableCutSceneList::EmgCameraPositionY' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneList, EmgCameraPositionZ) == 0x0000B4, "Member 'FEndDataTableCutSceneList::EmgCameraPositionZ' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneList, EmgCameraAimPositionX) == 0x0000B8, "Member 'FEndDataTableCutSceneList::EmgCameraAimPositionX' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneList, EmgCameraAimPositionY) == 0x0000BC, "Member 'FEndDataTableCutSceneList::EmgCameraAimPositionY' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneList, EmgCameraAimPositionZ) == 0x0000C0, "Member 'FEndDataTableCutSceneList::EmgCameraAimPositionZ' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneList, InMotionBlendFrame) == 0x0000C4, "Member 'FEndDataTableCutSceneList::InMotionBlendFrame' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneList, PopCharaLimitOnTick) == 0x0000C8, "Member 'FEndDataTableCutSceneList::PopCharaLimitOnTick' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneList, MovieMaterialName) == 0x0000CC, "Member 'FEndDataTableCutSceneList::MovieMaterialName' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneList, MoviePastedActor) == 0x0000D4, "Member 'FEndDataTableCutSceneList::MoviePastedActor' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneList, WhereMovieActorOn) == 0x0000DC, "Member 'FEndDataTableCutSceneList::WhereMovieActorOn' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneList, DebugExtraSubLevelList_Array) == 0x0000E8, "Member 'FEndDataTableCutSceneList::DebugExtraSubLevelList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneList, DebugFaCharaSpecName1) == 0x0000F8, "Member 'FEndDataTableCutSceneList::DebugFaCharaSpecName1' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneList, DebugFaAttachActorName1) == 0x000108, "Member 'FEndDataTableCutSceneList::DebugFaAttachActorName1' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneList, DebugFaAttachSocketName1) == 0x000118, "Member 'FEndDataTableCutSceneList::DebugFaAttachSocketName1' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneList, DebugFaCharaSpecName2) == 0x000128, "Member 'FEndDataTableCutSceneList::DebugFaCharaSpecName2' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneList, DebugFaAttachActorName2) == 0x000138, "Member 'FEndDataTableCutSceneList::DebugFaAttachActorName2' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneList, DebugFaAttachSocketName2) == 0x000148, "Member 'FEndDataTableCutSceneList::DebugFaAttachSocketName2' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneList, DebugFaCharaSpecName3) == 0x000158, "Member 'FEndDataTableCutSceneList::DebugFaCharaSpecName3' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneList, DebugFaAttachActorName3) == 0x000168, "Member 'FEndDataTableCutSceneList::DebugFaAttachActorName3' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneList, DebugFaAttachSocketName3) == 0x000178, "Member 'FEndDataTableCutSceneList::DebugFaAttachSocketName3' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneList, DebugFaCharaSpecName4) == 0x000188, "Member 'FEndDataTableCutSceneList::DebugFaCharaSpecName4' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneList, DebugFaAttachActorName4) == 0x000198, "Member 'FEndDataTableCutSceneList::DebugFaAttachActorName4' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneList, DebugFaAttachSocketName4) == 0x0001A8, "Member 'FEndDataTableCutSceneList::DebugFaAttachSocketName4' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneList, DebugFaCharaSpecName5) == 0x0001B8, "Member 'FEndDataTableCutSceneList::DebugFaCharaSpecName5' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneList, DebugFaAttachActorName5) == 0x0001C8, "Member 'FEndDataTableCutSceneList::DebugFaAttachActorName5' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneList, DebugFaAttachSocketName5) == 0x0001D8, "Member 'FEndDataTableCutSceneList::DebugFaAttachSocketName5' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneList, ExtraFlags) == 0x0001E8, "Member 'FEndDataTableCutSceneList::ExtraFlags' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneList, UseMovieMaterialName_Base) == 0x0001EC, "Member 'FEndDataTableCutSceneList::UseMovieMaterialName_Base' has a wrong offset!");
static_assert(offsetof(FEndDataTableCutSceneList, UseMovieMaterialName_US) == 0x0001F4, "Member 'FEndDataTableCutSceneList::UseMovieMaterialName_US' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableDebugColorCollection
// 0x0020 (0x0028 - 0x0008)
struct FEndDataTableDebugColorCollection final : public FEndDataTableRowBase
{
public:
	class FString                                 _Comment_;                                         // 0x0008(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ColorCollectionLevel;                              // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ColorCollectionActor;                              // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableDebugColorCollection) == 0x000008, "Wrong alignment on FEndDataTableDebugColorCollection");
static_assert(sizeof(FEndDataTableDebugColorCollection) == 0x000028, "Wrong size on FEndDataTableDebugColorCollection");
static_assert(offsetof(FEndDataTableDebugColorCollection, _Comment_) == 0x000008, "Member 'FEndDataTableDebugColorCollection::_Comment_' has a wrong offset!");
static_assert(offsetof(FEndDataTableDebugColorCollection, ColorCollectionLevel) == 0x000018, "Member 'FEndDataTableDebugColorCollection::ColorCollectionLevel' has a wrong offset!");
static_assert(offsetof(FEndDataTableDebugColorCollection, ColorCollectionActor) == 0x000020, "Member 'FEndDataTableDebugColorCollection::ColorCollectionActor' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableEffect2SoundTable
// 0x0048 (0x0050 - 0x0008)
struct FEndDataTableEffect2SoundTable final : public FEndDataTableRowBase
{
public:
	int32                                         ResourceType;                                      // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SoundAssetName;                                    // 0x000C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BeginSoundName;                                    // 0x0014(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FinishSoundName;                                   // 0x001C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EventSoundName;                                    // 0x0024(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttenuationAssetName;                              // 0x002C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         ResourceLevelName_Array;                           // 0x0038(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         FadeOutTime;                                       // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableEffect2SoundTable) == 0x000008, "Wrong alignment on FEndDataTableEffect2SoundTable");
static_assert(sizeof(FEndDataTableEffect2SoundTable) == 0x000050, "Wrong size on FEndDataTableEffect2SoundTable");
static_assert(offsetof(FEndDataTableEffect2SoundTable, ResourceType) == 0x000008, "Member 'FEndDataTableEffect2SoundTable::ResourceType' has a wrong offset!");
static_assert(offsetof(FEndDataTableEffect2SoundTable, SoundAssetName) == 0x00000C, "Member 'FEndDataTableEffect2SoundTable::SoundAssetName' has a wrong offset!");
static_assert(offsetof(FEndDataTableEffect2SoundTable, BeginSoundName) == 0x000014, "Member 'FEndDataTableEffect2SoundTable::BeginSoundName' has a wrong offset!");
static_assert(offsetof(FEndDataTableEffect2SoundTable, FinishSoundName) == 0x00001C, "Member 'FEndDataTableEffect2SoundTable::FinishSoundName' has a wrong offset!");
static_assert(offsetof(FEndDataTableEffect2SoundTable, EventSoundName) == 0x000024, "Member 'FEndDataTableEffect2SoundTable::EventSoundName' has a wrong offset!");
static_assert(offsetof(FEndDataTableEffect2SoundTable, AttenuationAssetName) == 0x00002C, "Member 'FEndDataTableEffect2SoundTable::AttenuationAssetName' has a wrong offset!");
static_assert(offsetof(FEndDataTableEffect2SoundTable, ResourceLevelName_Array) == 0x000038, "Member 'FEndDataTableEffect2SoundTable::ResourceLevelName_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableEffect2SoundTable, FadeOutTime) == 0x000048, "Member 'FEndDataTableEffect2SoundTable::FadeOutTime' has a wrong offset!");

// ScriptStruct EndGame.EndPhysicalConstraintSetting_AnimPositionVelocity
// 0x0028 (0x0028 - 0x0000)
struct FEndPhysicalConstraintSetting_AnimPositionVelocity final
{
public:
	class FName                                   BoneName0;                                         // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName1;                                         // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BoneInvMassBias0;                                  // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BoneInvMassBias1;                                  // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              DistanceRange;                                     // 0x0018(0x0008)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              VelocityRange;                                     // 0x0020(0x0008)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndPhysicalConstraintSetting_AnimPositionVelocity) == 0x000004, "Wrong alignment on FEndPhysicalConstraintSetting_AnimPositionVelocity");
static_assert(sizeof(FEndPhysicalConstraintSetting_AnimPositionVelocity) == 0x000028, "Wrong size on FEndPhysicalConstraintSetting_AnimPositionVelocity");
static_assert(offsetof(FEndPhysicalConstraintSetting_AnimPositionVelocity, BoneName0) == 0x000000, "Member 'FEndPhysicalConstraintSetting_AnimPositionVelocity::BoneName0' has a wrong offset!");
static_assert(offsetof(FEndPhysicalConstraintSetting_AnimPositionVelocity, BoneName1) == 0x000008, "Member 'FEndPhysicalConstraintSetting_AnimPositionVelocity::BoneName1' has a wrong offset!");
static_assert(offsetof(FEndPhysicalConstraintSetting_AnimPositionVelocity, BoneInvMassBias0) == 0x000010, "Member 'FEndPhysicalConstraintSetting_AnimPositionVelocity::BoneInvMassBias0' has a wrong offset!");
static_assert(offsetof(FEndPhysicalConstraintSetting_AnimPositionVelocity, BoneInvMassBias1) == 0x000014, "Member 'FEndPhysicalConstraintSetting_AnimPositionVelocity::BoneInvMassBias1' has a wrong offset!");
static_assert(offsetof(FEndPhysicalConstraintSetting_AnimPositionVelocity, DistanceRange) == 0x000018, "Member 'FEndPhysicalConstraintSetting_AnimPositionVelocity::DistanceRange' has a wrong offset!");
static_assert(offsetof(FEndPhysicalConstraintSetting_AnimPositionVelocity, VelocityRange) == 0x000020, "Member 'FEndPhysicalConstraintSetting_AnimPositionVelocity::VelocityRange' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableEffectCharaProperty
// 0x0028 (0x0030 - 0x0008)
struct FEndDataTableEffectCharaProperty final : public FEndDataTableRowBase
{
public:
	uint8                                         EffectResourceCategory;                            // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 EffectResourceName;                                // 0x0010(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         SoundResourceCategory;                             // 0x0020(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SoundResourceName;                                 // 0x0024(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableEffectCharaProperty) == 0x000008, "Wrong alignment on FEndDataTableEffectCharaProperty");
static_assert(sizeof(FEndDataTableEffectCharaProperty) == 0x000030, "Wrong size on FEndDataTableEffectCharaProperty");
static_assert(offsetof(FEndDataTableEffectCharaProperty, EffectResourceCategory) == 0x000008, "Member 'FEndDataTableEffectCharaProperty::EffectResourceCategory' has a wrong offset!");
static_assert(offsetof(FEndDataTableEffectCharaProperty, EffectResourceName) == 0x000010, "Member 'FEndDataTableEffectCharaProperty::EffectResourceName' has a wrong offset!");
static_assert(offsetof(FEndDataTableEffectCharaProperty, SoundResourceCategory) == 0x000020, "Member 'FEndDataTableEffectCharaProperty::SoundResourceCategory' has a wrong offset!");
static_assert(offsetof(FEndDataTableEffectCharaProperty, SoundResourceName) == 0x000024, "Member 'FEndDataTableEffectCharaProperty::SoundResourceName' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableEnemyBook
// 0x0090 (0x0098 - 0x0008)
struct FEndDataTableEnemyBook final : public FEndDataTableRowBase
{
public:
	int32                                         UniqueID;                                          // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ConditionType;                                     // 0x000C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ParentID;                                          // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ViewState;                                         // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   TipsTextID;                                        // 0x001C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FlavorTextID;                                      // 0x0024(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EnemyBookBattleCharaSpecID;                        // 0x002C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           EnemyBookBattleAbilityID_Array;                    // 0x0038(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           EnemyPopLocation_Array;                            // 0x0048(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         EnemyPopLocationTextOrverride_Array;               // 0x0058(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Subspecies;                                        // 0x0068(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         EnemyBookCameraZOffset;                            // 0x006C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EnemyBookCameraXDefault;                           // 0x0070(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EnemyBookCameraDefaultDistance;                    // 0x0074(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EnemyBookCameraEyePointZOffset;                    // 0x0078(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EnemyBookPedestalSize;                             // 0x007C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EnemyBookXOffset;                                  // 0x0084(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EnemyBookYOffset;                                  // 0x0088(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EnemyBookZOffset;                                  // 0x008C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SerialNumber;                                      // 0x0090(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableEnemyBook) == 0x000008, "Wrong alignment on FEndDataTableEnemyBook");
static_assert(sizeof(FEndDataTableEnemyBook) == 0x000098, "Wrong size on FEndDataTableEnemyBook");
static_assert(offsetof(FEndDataTableEnemyBook, UniqueID) == 0x000008, "Member 'FEndDataTableEnemyBook::UniqueID' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyBook, ConditionType) == 0x00000C, "Member 'FEndDataTableEnemyBook::ConditionType' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyBook, ParentID) == 0x000010, "Member 'FEndDataTableEnemyBook::ParentID' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyBook, ViewState) == 0x000018, "Member 'FEndDataTableEnemyBook::ViewState' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyBook, TipsTextID) == 0x00001C, "Member 'FEndDataTableEnemyBook::TipsTextID' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyBook, FlavorTextID) == 0x000024, "Member 'FEndDataTableEnemyBook::FlavorTextID' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyBook, EnemyBookBattleCharaSpecID) == 0x00002C, "Member 'FEndDataTableEnemyBook::EnemyBookBattleCharaSpecID' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyBook, EnemyBookBattleAbilityID_Array) == 0x000038, "Member 'FEndDataTableEnemyBook::EnemyBookBattleAbilityID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyBook, EnemyPopLocation_Array) == 0x000048, "Member 'FEndDataTableEnemyBook::EnemyPopLocation_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyBook, EnemyPopLocationTextOrverride_Array) == 0x000058, "Member 'FEndDataTableEnemyBook::EnemyPopLocationTextOrverride_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyBook, Subspecies) == 0x000068, "Member 'FEndDataTableEnemyBook::Subspecies' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyBook, EnemyBookCameraZOffset) == 0x00006C, "Member 'FEndDataTableEnemyBook::EnemyBookCameraZOffset' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyBook, EnemyBookCameraXDefault) == 0x000070, "Member 'FEndDataTableEnemyBook::EnemyBookCameraXDefault' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyBook, EnemyBookCameraDefaultDistance) == 0x000074, "Member 'FEndDataTableEnemyBook::EnemyBookCameraDefaultDistance' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyBook, EnemyBookCameraEyePointZOffset) == 0x000078, "Member 'FEndDataTableEnemyBook::EnemyBookCameraEyePointZOffset' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyBook, EnemyBookPedestalSize) == 0x00007C, "Member 'FEndDataTableEnemyBook::EnemyBookPedestalSize' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyBook, EnemyBookXOffset) == 0x000084, "Member 'FEndDataTableEnemyBook::EnemyBookXOffset' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyBook, EnemyBookYOffset) == 0x000088, "Member 'FEndDataTableEnemyBook::EnemyBookYOffset' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyBook, EnemyBookZOffset) == 0x00008C, "Member 'FEndDataTableEnemyBook::EnemyBookZOffset' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyBook, SerialNumber) == 0x000090, "Member 'FEndDataTableEnemyBook::SerialNumber' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableEnemyBookBattleDamageSource
// 0x0018 (0x0020 - 0x0008)
struct FEndDataTableEnemyBookBattleDamageSource final : public FEndDataTableRowBase
{
public:
	uint8                                         Property;                                          // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Attribute0;                                        // 0x0009(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Attribute1;                                        // 0x000A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Attribute2;                                        // 0x000B(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Attribute3;                                        // 0x000C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Attribute4;                                        // 0x000D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Attribute5;                                        // 0x000E(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Attribute6;                                        // 0x000F(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 StatusChangeType_Array;                            // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableEnemyBookBattleDamageSource) == 0x000008, "Wrong alignment on FEndDataTableEnemyBookBattleDamageSource");
static_assert(sizeof(FEndDataTableEnemyBookBattleDamageSource) == 0x000020, "Wrong size on FEndDataTableEnemyBookBattleDamageSource");
static_assert(offsetof(FEndDataTableEnemyBookBattleDamageSource, Property) == 0x000008, "Member 'FEndDataTableEnemyBookBattleDamageSource::Property' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyBookBattleDamageSource, Attribute0) == 0x000009, "Member 'FEndDataTableEnemyBookBattleDamageSource::Attribute0' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyBookBattleDamageSource, Attribute1) == 0x00000A, "Member 'FEndDataTableEnemyBookBattleDamageSource::Attribute1' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyBookBattleDamageSource, Attribute2) == 0x00000B, "Member 'FEndDataTableEnemyBookBattleDamageSource::Attribute2' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyBookBattleDamageSource, Attribute3) == 0x00000C, "Member 'FEndDataTableEnemyBookBattleDamageSource::Attribute3' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyBookBattleDamageSource, Attribute4) == 0x00000D, "Member 'FEndDataTableEnemyBookBattleDamageSource::Attribute4' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyBookBattleDamageSource, Attribute5) == 0x00000E, "Member 'FEndDataTableEnemyBookBattleDamageSource::Attribute5' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyBookBattleDamageSource, Attribute6) == 0x00000F, "Member 'FEndDataTableEnemyBookBattleDamageSource::Attribute6' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyBookBattleDamageSource, StatusChangeType_Array) == 0x000010, "Member 'FEndDataTableEnemyBookBattleDamageSource::StatusChangeType_Array' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableEnemyEXP
// 0x0010 (0x0018 - 0x0008)
struct FEndDataTableEnemyEXP final : public FEndDataTableRowBase
{
public:
	TArray<int32>                                 Value_Array;                                       // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableEnemyEXP) == 0x000008, "Wrong alignment on FEndDataTableEnemyEXP");
static_assert(sizeof(FEndDataTableEnemyEXP) == 0x000018, "Wrong size on FEndDataTableEnemyEXP");
static_assert(offsetof(FEndDataTableEnemyEXP, Value_Array) == 0x000008, "Member 'FEndDataTableEnemyEXP::Value_Array' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableObject
// 0x0030 (0x0038 - 0x0008)
struct FEndDataTableObject final : public FEndDataTableRowBase
{
public:
	int32                                         UniqueIndex;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Priority;                                          // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AttachID;                                          // 0x0010(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AttachLayer;                                       // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 StartStateChange;                                  // 0x0028(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableObject) == 0x000008, "Wrong alignment on FEndDataTableObject");
static_assert(sizeof(FEndDataTableObject) == 0x000038, "Wrong size on FEndDataTableObject");
static_assert(offsetof(FEndDataTableObject, UniqueIndex) == 0x000008, "Member 'FEndDataTableObject::UniqueIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTableObject, Priority) == 0x00000C, "Member 'FEndDataTableObject::Priority' has a wrong offset!");
static_assert(offsetof(FEndDataTableObject, AttachID) == 0x000010, "Member 'FEndDataTableObject::AttachID' has a wrong offset!");
static_assert(offsetof(FEndDataTableObject, AttachLayer) == 0x000020, "Member 'FEndDataTableObject::AttachLayer' has a wrong offset!");
static_assert(offsetof(FEndDataTableObject, StartStateChange) == 0x000028, "Member 'FEndDataTableObject::StartStateChange' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableEnemyParameter
// 0x0018 (0x0020 - 0x0008)
struct FEndDataTableEnemyParameter final : public FEndDataTableRowBase
{
public:
	int32                                         HPMax;                                             // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BPMax;                                             // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Strength;                                          // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Magic;                                             // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Vitality;                                          // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Spilit;                                            // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableEnemyParameter) == 0x000008, "Wrong alignment on FEndDataTableEnemyParameter");
static_assert(sizeof(FEndDataTableEnemyParameter) == 0x000020, "Wrong size on FEndDataTableEnemyParameter");
static_assert(offsetof(FEndDataTableEnemyParameter, HPMax) == 0x000008, "Member 'FEndDataTableEnemyParameter::HPMax' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyParameter, BPMax) == 0x00000C, "Member 'FEndDataTableEnemyParameter::BPMax' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyParameter, Strength) == 0x000010, "Member 'FEndDataTableEnemyParameter::Strength' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyParameter, Magic) == 0x000014, "Member 'FEndDataTableEnemyParameter::Magic' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyParameter, Vitality) == 0x000018, "Member 'FEndDataTableEnemyParameter::Vitality' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnemyParameter, Spilit) == 0x00001C, "Member 'FEndDataTableEnemyParameter::Spilit' has a wrong offset!");

// ScriptStruct EndGame.EndPhysicalConstraintEvaluator
// 0x01C8 (0x01C8 - 0x0000)
struct FEndPhysicalConstraintEvaluator
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UEndPhysicalConstraintSetting*          ConstraintSetting;                                 // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UEndPhysicalConstraintSetting*          DefaultConstraintSetting;                          // 0x0010(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabledSimulation;                                // 0x0018(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bActive;                                           // 0x0019(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendRate;                                         // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendSpeed;                                        // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDebugDraw;                                        // 0x0024(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AEndCharacter*                          OwnerCharacter;                                    // 0x0028(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASkeletalMeshActor*                     OwnerMeshActor;                                    // 0x0030(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMeshComponent*                 OwnerMesh;                                         // 0x0038(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWorld*                                 OwnerWorld;                                        // 0x0040(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OverrideUniqueSetting;                             // 0x0048(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x178];                                     // 0x0050(0x0178)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndPhysicalConstraintEvaluator) == 0x000008, "Wrong alignment on FEndPhysicalConstraintEvaluator");
static_assert(sizeof(FEndPhysicalConstraintEvaluator) == 0x0001C8, "Wrong size on FEndPhysicalConstraintEvaluator");
static_assert(offsetof(FEndPhysicalConstraintEvaluator, ConstraintSetting) == 0x000008, "Member 'FEndPhysicalConstraintEvaluator::ConstraintSetting' has a wrong offset!");
static_assert(offsetof(FEndPhysicalConstraintEvaluator, DefaultConstraintSetting) == 0x000010, "Member 'FEndPhysicalConstraintEvaluator::DefaultConstraintSetting' has a wrong offset!");
static_assert(offsetof(FEndPhysicalConstraintEvaluator, bEnabledSimulation) == 0x000018, "Member 'FEndPhysicalConstraintEvaluator::bEnabledSimulation' has a wrong offset!");
static_assert(offsetof(FEndPhysicalConstraintEvaluator, bActive) == 0x000019, "Member 'FEndPhysicalConstraintEvaluator::bActive' has a wrong offset!");
static_assert(offsetof(FEndPhysicalConstraintEvaluator, BlendRate) == 0x00001C, "Member 'FEndPhysicalConstraintEvaluator::BlendRate' has a wrong offset!");
static_assert(offsetof(FEndPhysicalConstraintEvaluator, BlendSpeed) == 0x000020, "Member 'FEndPhysicalConstraintEvaluator::BlendSpeed' has a wrong offset!");
static_assert(offsetof(FEndPhysicalConstraintEvaluator, bDebugDraw) == 0x000024, "Member 'FEndPhysicalConstraintEvaluator::bDebugDraw' has a wrong offset!");
static_assert(offsetof(FEndPhysicalConstraintEvaluator, OwnerCharacter) == 0x000028, "Member 'FEndPhysicalConstraintEvaluator::OwnerCharacter' has a wrong offset!");
static_assert(offsetof(FEndPhysicalConstraintEvaluator, OwnerMeshActor) == 0x000030, "Member 'FEndPhysicalConstraintEvaluator::OwnerMeshActor' has a wrong offset!");
static_assert(offsetof(FEndPhysicalConstraintEvaluator, OwnerMesh) == 0x000038, "Member 'FEndPhysicalConstraintEvaluator::OwnerMesh' has a wrong offset!");
static_assert(offsetof(FEndPhysicalConstraintEvaluator, OwnerWorld) == 0x000040, "Member 'FEndPhysicalConstraintEvaluator::OwnerWorld' has a wrong offset!");
static_assert(offsetof(FEndPhysicalConstraintEvaluator, OverrideUniqueSetting) == 0x000048, "Member 'FEndPhysicalConstraintEvaluator::OverrideUniqueSetting' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableEnvironmentSet
// 0x0028 (0x0030 - 0x0008)
struct FEndDataTableEnvironmentSet final : public FEndDataTableRowBase
{
public:
	class FName                                   AdditionalEnvironmentSetId;                        // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 UnvisibleList_Array;                               // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           LevelList_Array;                                   // 0x0020(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableEnvironmentSet) == 0x000008, "Wrong alignment on FEndDataTableEnvironmentSet");
static_assert(sizeof(FEndDataTableEnvironmentSet) == 0x000030, "Wrong size on FEndDataTableEnvironmentSet");
static_assert(offsetof(FEndDataTableEnvironmentSet, AdditionalEnvironmentSetId) == 0x000008, "Member 'FEndDataTableEnvironmentSet::AdditionalEnvironmentSetId' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnvironmentSet, UnvisibleList_Array) == 0x000010, "Member 'FEndDataTableEnvironmentSet::UnvisibleList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnvironmentSet, LevelList_Array) == 0x000020, "Member 'FEndDataTableEnvironmentSet::LevelList_Array' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableEnvironmentSetWrapper
// 0x0028 (0x0030 - 0x0008)
struct FEndDataTableEnvironmentSetWrapper final : public FEndDataTableRowBase
{
public:
	class FName                                   EnvironmentSetId;                                  // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 Hidden_Array;                                      // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           ActorName_Array;                                   // 0x0020(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableEnvironmentSetWrapper) == 0x000008, "Wrong alignment on FEndDataTableEnvironmentSetWrapper");
static_assert(sizeof(FEndDataTableEnvironmentSetWrapper) == 0x000030, "Wrong size on FEndDataTableEnvironmentSetWrapper");
static_assert(offsetof(FEndDataTableEnvironmentSetWrapper, EnvironmentSetId) == 0x000008, "Member 'FEndDataTableEnvironmentSetWrapper::EnvironmentSetId' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnvironmentSetWrapper, Hidden_Array) == 0x000010, "Member 'FEndDataTableEnvironmentSetWrapper::Hidden_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnvironmentSetWrapper, ActorName_Array) == 0x000020, "Member 'FEndDataTableEnvironmentSetWrapper::ActorName_Array' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableEnvironmentSpec
// 0x0038 (0x0040 - 0x0008)
struct FEndDataTableEnvironmentSpec final : public FEndDataTableRowBase
{
public:
	class FString                                 ContentsEffect;                                    // 0x0008(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ContentsSE;                                        // 0x0018(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ForceAnimate;                                      // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         AnimSetPath_Array;                                 // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableEnvironmentSpec) == 0x000008, "Wrong alignment on FEndDataTableEnvironmentSpec");
static_assert(sizeof(FEndDataTableEnvironmentSpec) == 0x000040, "Wrong size on FEndDataTableEnvironmentSpec");
static_assert(offsetof(FEndDataTableEnvironmentSpec, ContentsEffect) == 0x000008, "Member 'FEndDataTableEnvironmentSpec::ContentsEffect' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnvironmentSpec, ContentsSE) == 0x000018, "Member 'FEndDataTableEnvironmentSpec::ContentsSE' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnvironmentSpec, ForceAnimate) == 0x000028, "Member 'FEndDataTableEnvironmentSpec::ForceAnimate' has a wrong offset!");
static_assert(offsetof(FEndDataTableEnvironmentSpec, AnimSetPath_Array) == 0x000030, "Member 'FEndDataTableEnvironmentSpec::AnimSetPath_Array' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableEquipmentSet
// 0x0038 (0x0040 - 0x0008)
struct FEndDataTableEquipmentSet final : public FEndDataTableRowBase
{
public:
	int32                                         UniqueID;                                          // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PairArmorName;                                     // 0x000C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PairAccessoryName;                                 // 0x0014(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MatchPairPath;                                     // 0x0020(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MatchPairAccessoryPath;                            // 0x0030(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableEquipmentSet) == 0x000008, "Wrong alignment on FEndDataTableEquipmentSet");
static_assert(sizeof(FEndDataTableEquipmentSet) == 0x000040, "Wrong size on FEndDataTableEquipmentSet");
static_assert(offsetof(FEndDataTableEquipmentSet, UniqueID) == 0x000008, "Member 'FEndDataTableEquipmentSet::UniqueID' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipmentSet, PairArmorName) == 0x00000C, "Member 'FEndDataTableEquipmentSet::PairArmorName' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipmentSet, PairAccessoryName) == 0x000014, "Member 'FEndDataTableEquipmentSet::PairAccessoryName' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipmentSet, MatchPairPath) == 0x000020, "Member 'FEndDataTableEquipmentSet::MatchPairPath' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipmentSet, MatchPairAccessoryPath) == 0x000030, "Member 'FEndDataTableEquipmentSet::MatchPairAccessoryPath' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableEquipmentSkill
// 0x0018 (0x0020 - 0x0008)
struct FEndDataTableEquipmentSkill final : public FEndDataTableRowBase
{
public:
	uint8                                         ConditionType0;                                    // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ConditionValue0;                                   // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EffectType0;                                       // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EffectValue0;                                      // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EffectName0;                                       // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableEquipmentSkill) == 0x000008, "Wrong alignment on FEndDataTableEquipmentSkill");
static_assert(sizeof(FEndDataTableEquipmentSkill) == 0x000020, "Wrong size on FEndDataTableEquipmentSkill");
static_assert(offsetof(FEndDataTableEquipmentSkill, ConditionType0) == 0x000008, "Member 'FEndDataTableEquipmentSkill::ConditionType0' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipmentSkill, ConditionValue0) == 0x00000C, "Member 'FEndDataTableEquipmentSkill::ConditionValue0' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipmentSkill, EffectType0) == 0x000010, "Member 'FEndDataTableEquipmentSkill::EffectType0' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipmentSkill, EffectValue0) == 0x000014, "Member 'FEndDataTableEquipmentSkill::EffectValue0' has a wrong offset!");
static_assert(offsetof(FEndDataTableEquipmentSkill, EffectName0) == 0x000018, "Member 'FEndDataTableEquipmentSkill::EffectName0' has a wrong offset!");

// ScriptStruct EndGame.WireMovePointData
// 0x0040 (0x0040 - 0x0000)
struct FWireMovePointData final
{
public:
	uint32                                        Index;                                             // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                pos;                                               // 0x0004(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint32>                                neighborPointIndexes;                              // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	EEndWireMeshMoveStartType                     StartType;                                         // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsGoalPoint;                                       // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBottom;                                           // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23[0x1];                                       // 0x0023(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                BottomPos;                                         // 0x0024(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_30[0x10];                                      // 0x0030(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWireMovePointData) == 0x000008, "Wrong alignment on FWireMovePointData");
static_assert(sizeof(FWireMovePointData) == 0x000040, "Wrong size on FWireMovePointData");
static_assert(offsetof(FWireMovePointData, Index) == 0x000000, "Member 'FWireMovePointData::Index' has a wrong offset!");
static_assert(offsetof(FWireMovePointData, pos) == 0x000004, "Member 'FWireMovePointData::pos' has a wrong offset!");
static_assert(offsetof(FWireMovePointData, neighborPointIndexes) == 0x000010, "Member 'FWireMovePointData::neighborPointIndexes' has a wrong offset!");
static_assert(offsetof(FWireMovePointData, StartType) == 0x000020, "Member 'FWireMovePointData::StartType' has a wrong offset!");
static_assert(offsetof(FWireMovePointData, IsGoalPoint) == 0x000021, "Member 'FWireMovePointData::IsGoalPoint' has a wrong offset!");
static_assert(offsetof(FWireMovePointData, bBottom) == 0x000022, "Member 'FWireMovePointData::bBottom' has a wrong offset!");
static_assert(offsetof(FWireMovePointData, BottomPos) == 0x000024, "Member 'FWireMovePointData::BottomPos' has a wrong offset!");

// ScriptStruct EndGame.WireMovePointInfo
// 0x0048 (0x0048 - 0x0000)
struct FWireMovePointInfo final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FWireMovePointData                     Data;                                              // 0x0008(0x0040)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FWireMovePointInfo) == 0x000008, "Wrong alignment on FWireMovePointInfo");
static_assert(sizeof(FWireMovePointInfo) == 0x000048, "Wrong size on FWireMovePointInfo");
static_assert(offsetof(FWireMovePointInfo, Data) == 0x000008, "Member 'FWireMovePointInfo::Data' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableEventPriorityChange
// 0x0018 (0x0020 - 0x0008)
struct FEndDataTableEventPriorityChange final : public FEndDataTableRowBase
{
public:
	int32                                         CinemaStatusFromCinema;                            // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ActFromCinema;                                     // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LogFromCinema;                                     // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VoiceFromCinema;                                   // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VolumeFromCinema;                                  // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableEventPriorityChange) == 0x000008, "Wrong alignment on FEndDataTableEventPriorityChange");
static_assert(sizeof(FEndDataTableEventPriorityChange) == 0x000020, "Wrong size on FEndDataTableEventPriorityChange");
static_assert(offsetof(FEndDataTableEventPriorityChange, CinemaStatusFromCinema) == 0x000008, "Member 'FEndDataTableEventPriorityChange::CinemaStatusFromCinema' has a wrong offset!");
static_assert(offsetof(FEndDataTableEventPriorityChange, ActFromCinema) == 0x00000C, "Member 'FEndDataTableEventPriorityChange::ActFromCinema' has a wrong offset!");
static_assert(offsetof(FEndDataTableEventPriorityChange, LogFromCinema) == 0x000010, "Member 'FEndDataTableEventPriorityChange::LogFromCinema' has a wrong offset!");
static_assert(offsetof(FEndDataTableEventPriorityChange, VoiceFromCinema) == 0x000014, "Member 'FEndDataTableEventPriorityChange::VoiceFromCinema' has a wrong offset!");
static_assert(offsetof(FEndDataTableEventPriorityChange, VolumeFromCinema) == 0x000018, "Member 'FEndDataTableEventPriorityChange::VolumeFromCinema' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableEventPriorityOverride
// 0x0020 (0x0028 - 0x0008)
struct FEndDataTableEventPriorityOverride final : public FEndDataTableRowBase
{
public:
	TArray<int32>                                 Index_Array;                                       // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         OverrideProperty_Array;                            // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableEventPriorityOverride) == 0x000008, "Wrong alignment on FEndDataTableEventPriorityOverride");
static_assert(sizeof(FEndDataTableEventPriorityOverride) == 0x000028, "Wrong size on FEndDataTableEventPriorityOverride");
static_assert(offsetof(FEndDataTableEventPriorityOverride, Index_Array) == 0x000008, "Member 'FEndDataTableEventPriorityOverride::Index_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableEventPriorityOverride, OverrideProperty_Array) == 0x000018, "Member 'FEndDataTableEventPriorityOverride::OverrideProperty_Array' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableExclusion
// 0x0040 (0x0048 - 0x0008)
struct FEndDataTableExclusion final : public FEndDataTableRowBase
{
public:
	TArray<uint8>                                 ExclusionTableList_Array;                          // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 Priority;                                          // 0x0018(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BattlePriority;                                    // 0x0028(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 OnOffTable_Array;                                  // 0x0038(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableExclusion) == 0x000008, "Wrong alignment on FEndDataTableExclusion");
static_assert(sizeof(FEndDataTableExclusion) == 0x000048, "Wrong size on FEndDataTableExclusion");
static_assert(offsetof(FEndDataTableExclusion, ExclusionTableList_Array) == 0x000008, "Member 'FEndDataTableExclusion::ExclusionTableList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableExclusion, Priority) == 0x000018, "Member 'FEndDataTableExclusion::Priority' has a wrong offset!");
static_assert(offsetof(FEndDataTableExclusion, BattlePriority) == 0x000028, "Member 'FEndDataTableExclusion::BattlePriority' has a wrong offset!");
static_assert(offsetof(FEndDataTableExclusion, OnOffTable_Array) == 0x000038, "Member 'FEndDataTableExclusion::OnOffTable_Array' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableWeaponUpgrade
// 0x0068 (0x0070 - 0x0008)
struct FEndDataTableWeaponUpgrade final : public FEndDataTableRowBase
{
public:
	int32                                         ArrayIndex;                                        // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   WeaponID;                                          // 0x000C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         OpenTreeLevel;                                     // 0x0014(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         NodeType;                                          // 0x0015(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         RootIndex;                                         // 0x0016(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17[0x1];                                       // 0x0017(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ParentNodeID;                                      // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CheckNodeID;                                       // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UseSP;                                             // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EquipmentSkillID;                                  // 0x002C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OverrideParameter;                                 // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EquipmentEffectHelpTextLabel;                      // 0x0038(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   IconName;                                          // 0x0040(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NodeName;                                          // 0x0048(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NodeDetail;                                        // 0x0058(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         PlanetEffectType;                                  // 0x0068(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         OpenPlanetEffectType;                              // 0x0069(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         PriorityAuto1;                                     // 0x006A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         PriorityAuto2;                                     // 0x006B(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         PriorityAuto3;                                     // 0x006C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6D[0x3];                                       // 0x006D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableWeaponUpgrade) == 0x000008, "Wrong alignment on FEndDataTableWeaponUpgrade");
static_assert(sizeof(FEndDataTableWeaponUpgrade) == 0x000070, "Wrong size on FEndDataTableWeaponUpgrade");
static_assert(offsetof(FEndDataTableWeaponUpgrade, ArrayIndex) == 0x000008, "Member 'FEndDataTableWeaponUpgrade::ArrayIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTableWeaponUpgrade, WeaponID) == 0x00000C, "Member 'FEndDataTableWeaponUpgrade::WeaponID' has a wrong offset!");
static_assert(offsetof(FEndDataTableWeaponUpgrade, OpenTreeLevel) == 0x000014, "Member 'FEndDataTableWeaponUpgrade::OpenTreeLevel' has a wrong offset!");
static_assert(offsetof(FEndDataTableWeaponUpgrade, NodeType) == 0x000015, "Member 'FEndDataTableWeaponUpgrade::NodeType' has a wrong offset!");
static_assert(offsetof(FEndDataTableWeaponUpgrade, RootIndex) == 0x000016, "Member 'FEndDataTableWeaponUpgrade::RootIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTableWeaponUpgrade, ParentNodeID) == 0x000018, "Member 'FEndDataTableWeaponUpgrade::ParentNodeID' has a wrong offset!");
static_assert(offsetof(FEndDataTableWeaponUpgrade, CheckNodeID) == 0x000020, "Member 'FEndDataTableWeaponUpgrade::CheckNodeID' has a wrong offset!");
static_assert(offsetof(FEndDataTableWeaponUpgrade, UseSP) == 0x000028, "Member 'FEndDataTableWeaponUpgrade::UseSP' has a wrong offset!");
static_assert(offsetof(FEndDataTableWeaponUpgrade, EquipmentSkillID) == 0x00002C, "Member 'FEndDataTableWeaponUpgrade::EquipmentSkillID' has a wrong offset!");
static_assert(offsetof(FEndDataTableWeaponUpgrade, OverrideParameter) == 0x000034, "Member 'FEndDataTableWeaponUpgrade::OverrideParameter' has a wrong offset!");
static_assert(offsetof(FEndDataTableWeaponUpgrade, EquipmentEffectHelpTextLabel) == 0x000038, "Member 'FEndDataTableWeaponUpgrade::EquipmentEffectHelpTextLabel' has a wrong offset!");
static_assert(offsetof(FEndDataTableWeaponUpgrade, IconName) == 0x000040, "Member 'FEndDataTableWeaponUpgrade::IconName' has a wrong offset!");
static_assert(offsetof(FEndDataTableWeaponUpgrade, NodeName) == 0x000048, "Member 'FEndDataTableWeaponUpgrade::NodeName' has a wrong offset!");
static_assert(offsetof(FEndDataTableWeaponUpgrade, NodeDetail) == 0x000058, "Member 'FEndDataTableWeaponUpgrade::NodeDetail' has a wrong offset!");
static_assert(offsetof(FEndDataTableWeaponUpgrade, PlanetEffectType) == 0x000068, "Member 'FEndDataTableWeaponUpgrade::PlanetEffectType' has a wrong offset!");
static_assert(offsetof(FEndDataTableWeaponUpgrade, OpenPlanetEffectType) == 0x000069, "Member 'FEndDataTableWeaponUpgrade::OpenPlanetEffectType' has a wrong offset!");
static_assert(offsetof(FEndDataTableWeaponUpgrade, PriorityAuto1) == 0x00006A, "Member 'FEndDataTableWeaponUpgrade::PriorityAuto1' has a wrong offset!");
static_assert(offsetof(FEndDataTableWeaponUpgrade, PriorityAuto2) == 0x00006B, "Member 'FEndDataTableWeaponUpgrade::PriorityAuto2' has a wrong offset!");
static_assert(offsetof(FEndDataTableWeaponUpgrade, PriorityAuto3) == 0x00006C, "Member 'FEndDataTableWeaponUpgrade::PriorityAuto3' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableFieldAttackResponseArea
// 0x0040 (0x0048 - 0x0008)
struct FEndDataTableFieldAttackResponseArea final : public FEndDataTableRowBase
{
public:
	float                                         SuggestionRadius;                                  // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReactionRadius;                                    // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         RetryUp;                                           // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OffsetInRetryUp;                                   // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         RetryDown;                                         // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OffsetInRetryDown;                                 // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         RetryLeft;                                         // 0x0020(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OffsetInRetryLeft;                                 // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         RetryRight;                                        // 0x0028(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OffsetInRetryRight;                                // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         IgnoreLaytrace;                                    // 0x0030(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           IgnoreLayTraceActorName_Array;                     // 0x0038(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableFieldAttackResponseArea) == 0x000008, "Wrong alignment on FEndDataTableFieldAttackResponseArea");
static_assert(sizeof(FEndDataTableFieldAttackResponseArea) == 0x000048, "Wrong size on FEndDataTableFieldAttackResponseArea");
static_assert(offsetof(FEndDataTableFieldAttackResponseArea, SuggestionRadius) == 0x000008, "Member 'FEndDataTableFieldAttackResponseArea::SuggestionRadius' has a wrong offset!");
static_assert(offsetof(FEndDataTableFieldAttackResponseArea, ReactionRadius) == 0x00000C, "Member 'FEndDataTableFieldAttackResponseArea::ReactionRadius' has a wrong offset!");
static_assert(offsetof(FEndDataTableFieldAttackResponseArea, RetryUp) == 0x000010, "Member 'FEndDataTableFieldAttackResponseArea::RetryUp' has a wrong offset!");
static_assert(offsetof(FEndDataTableFieldAttackResponseArea, OffsetInRetryUp) == 0x000014, "Member 'FEndDataTableFieldAttackResponseArea::OffsetInRetryUp' has a wrong offset!");
static_assert(offsetof(FEndDataTableFieldAttackResponseArea, RetryDown) == 0x000018, "Member 'FEndDataTableFieldAttackResponseArea::RetryDown' has a wrong offset!");
static_assert(offsetof(FEndDataTableFieldAttackResponseArea, OffsetInRetryDown) == 0x00001C, "Member 'FEndDataTableFieldAttackResponseArea::OffsetInRetryDown' has a wrong offset!");
static_assert(offsetof(FEndDataTableFieldAttackResponseArea, RetryLeft) == 0x000020, "Member 'FEndDataTableFieldAttackResponseArea::RetryLeft' has a wrong offset!");
static_assert(offsetof(FEndDataTableFieldAttackResponseArea, OffsetInRetryLeft) == 0x000024, "Member 'FEndDataTableFieldAttackResponseArea::OffsetInRetryLeft' has a wrong offset!");
static_assert(offsetof(FEndDataTableFieldAttackResponseArea, RetryRight) == 0x000028, "Member 'FEndDataTableFieldAttackResponseArea::RetryRight' has a wrong offset!");
static_assert(offsetof(FEndDataTableFieldAttackResponseArea, OffsetInRetryRight) == 0x00002C, "Member 'FEndDataTableFieldAttackResponseArea::OffsetInRetryRight' has a wrong offset!");
static_assert(offsetof(FEndDataTableFieldAttackResponseArea, IgnoreLaytrace) == 0x000030, "Member 'FEndDataTableFieldAttackResponseArea::IgnoreLaytrace' has a wrong offset!");
static_assert(offsetof(FEndDataTableFieldAttackResponseArea, IgnoreLayTraceActorName_Array) == 0x000038, "Member 'FEndDataTableFieldAttackResponseArea::IgnoreLayTraceActorName_Array' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableFieldTips
// 0x0030 (0x0038 - 0x0008)
struct FEndDataTableFieldTips final : public FEndDataTableRowBase
{
public:
	class FName                                   WidgetTexturePath;                                 // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   WidgetTextId;                                      // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TipsMoviePath;                                     // 0x0018(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TipsTitle;                                         // 0x0028(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableFieldTips) == 0x000008, "Wrong alignment on FEndDataTableFieldTips");
static_assert(sizeof(FEndDataTableFieldTips) == 0x000038, "Wrong size on FEndDataTableFieldTips");
static_assert(offsetof(FEndDataTableFieldTips, WidgetTexturePath) == 0x000008, "Member 'FEndDataTableFieldTips::WidgetTexturePath' has a wrong offset!");
static_assert(offsetof(FEndDataTableFieldTips, WidgetTextId) == 0x000010, "Member 'FEndDataTableFieldTips::WidgetTextId' has a wrong offset!");
static_assert(offsetof(FEndDataTableFieldTips, TipsMoviePath) == 0x000018, "Member 'FEndDataTableFieldTips::TipsMoviePath' has a wrong offset!");
static_assert(offsetof(FEndDataTableFieldTips, TipsTitle) == 0x000028, "Member 'FEndDataTableFieldTips::TipsTitle' has a wrong offset!");

// ScriptStruct EndGame.EndSwitchableSkeletalMeshPair
// 0x0018 (0x0018 - 0x0000)
struct FEndSwitchableSkeletalMeshPair final
{
public:
	class FName                                   Label;                                             // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMesh*                          Mesh;                                              // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialOverrideCollection*            MaterialOverrideCollection;                        // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndSwitchableSkeletalMeshPair) == 0x000008, "Wrong alignment on FEndSwitchableSkeletalMeshPair");
static_assert(sizeof(FEndSwitchableSkeletalMeshPair) == 0x000018, "Wrong size on FEndSwitchableSkeletalMeshPair");
static_assert(offsetof(FEndSwitchableSkeletalMeshPair, Label) == 0x000000, "Member 'FEndSwitchableSkeletalMeshPair::Label' has a wrong offset!");
static_assert(offsetof(FEndSwitchableSkeletalMeshPair, Mesh) == 0x000008, "Member 'FEndSwitchableSkeletalMeshPair::Mesh' has a wrong offset!");
static_assert(offsetof(FEndSwitchableSkeletalMeshPair, MaterialOverrideCollection) == 0x000010, "Member 'FEndSwitchableSkeletalMeshPair::MaterialOverrideCollection' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableFormation
// 0x0068 (0x0070 - 0x0008)
struct FEndDataTableFormation final : public FEndDataTableRowBase
{
public:
	int32                                         MakeMin;                                           // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MakeMax;                                           // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MakeRadius;                                        // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReleaseCount;                                      // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Shuffle;                                           // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Supplement;                                        // 0x0019(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LeaderDistance;                                    // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LeaderXMove;                                       // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RelativeRotate;                                    // 0x0024(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LookAtTarget;                                      // 0x0025(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26[0x2];                                       // 0x0026(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Interval;                                          // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Pos1X;                                             // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Pos1Y;                                             // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Pos2X;                                             // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Pos2Y;                                             // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Pos3X;                                             // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Pos3Y;                                             // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Pos4X;                                             // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Pos4Y;                                             // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Pos5X;                                             // 0x004C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Pos5Y;                                             // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Pos6X;                                             // 0x0054(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Pos6Y;                                             // 0x0058(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Pos7X;                                             // 0x005C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Pos7Y;                                             // 0x0060(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Pos8X;                                             // 0x0064(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Pos8Y;                                             // 0x0068(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableFormation) == 0x000008, "Wrong alignment on FEndDataTableFormation");
static_assert(sizeof(FEndDataTableFormation) == 0x000070, "Wrong size on FEndDataTableFormation");
static_assert(offsetof(FEndDataTableFormation, MakeMin) == 0x000008, "Member 'FEndDataTableFormation::MakeMin' has a wrong offset!");
static_assert(offsetof(FEndDataTableFormation, MakeMax) == 0x00000C, "Member 'FEndDataTableFormation::MakeMax' has a wrong offset!");
static_assert(offsetof(FEndDataTableFormation, MakeRadius) == 0x000010, "Member 'FEndDataTableFormation::MakeRadius' has a wrong offset!");
static_assert(offsetof(FEndDataTableFormation, ReleaseCount) == 0x000014, "Member 'FEndDataTableFormation::ReleaseCount' has a wrong offset!");
static_assert(offsetof(FEndDataTableFormation, Shuffle) == 0x000018, "Member 'FEndDataTableFormation::Shuffle' has a wrong offset!");
static_assert(offsetof(FEndDataTableFormation, Supplement) == 0x000019, "Member 'FEndDataTableFormation::Supplement' has a wrong offset!");
static_assert(offsetof(FEndDataTableFormation, LeaderDistance) == 0x00001C, "Member 'FEndDataTableFormation::LeaderDistance' has a wrong offset!");
static_assert(offsetof(FEndDataTableFormation, LeaderXMove) == 0x000020, "Member 'FEndDataTableFormation::LeaderXMove' has a wrong offset!");
static_assert(offsetof(FEndDataTableFormation, RelativeRotate) == 0x000024, "Member 'FEndDataTableFormation::RelativeRotate' has a wrong offset!");
static_assert(offsetof(FEndDataTableFormation, LookAtTarget) == 0x000025, "Member 'FEndDataTableFormation::LookAtTarget' has a wrong offset!");
static_assert(offsetof(FEndDataTableFormation, Interval) == 0x000028, "Member 'FEndDataTableFormation::Interval' has a wrong offset!");
static_assert(offsetof(FEndDataTableFormation, Pos1X) == 0x00002C, "Member 'FEndDataTableFormation::Pos1X' has a wrong offset!");
static_assert(offsetof(FEndDataTableFormation, Pos1Y) == 0x000030, "Member 'FEndDataTableFormation::Pos1Y' has a wrong offset!");
static_assert(offsetof(FEndDataTableFormation, Pos2X) == 0x000034, "Member 'FEndDataTableFormation::Pos2X' has a wrong offset!");
static_assert(offsetof(FEndDataTableFormation, Pos2Y) == 0x000038, "Member 'FEndDataTableFormation::Pos2Y' has a wrong offset!");
static_assert(offsetof(FEndDataTableFormation, Pos3X) == 0x00003C, "Member 'FEndDataTableFormation::Pos3X' has a wrong offset!");
static_assert(offsetof(FEndDataTableFormation, Pos3Y) == 0x000040, "Member 'FEndDataTableFormation::Pos3Y' has a wrong offset!");
static_assert(offsetof(FEndDataTableFormation, Pos4X) == 0x000044, "Member 'FEndDataTableFormation::Pos4X' has a wrong offset!");
static_assert(offsetof(FEndDataTableFormation, Pos4Y) == 0x000048, "Member 'FEndDataTableFormation::Pos4Y' has a wrong offset!");
static_assert(offsetof(FEndDataTableFormation, Pos5X) == 0x00004C, "Member 'FEndDataTableFormation::Pos5X' has a wrong offset!");
static_assert(offsetof(FEndDataTableFormation, Pos5Y) == 0x000050, "Member 'FEndDataTableFormation::Pos5Y' has a wrong offset!");
static_assert(offsetof(FEndDataTableFormation, Pos6X) == 0x000054, "Member 'FEndDataTableFormation::Pos6X' has a wrong offset!");
static_assert(offsetof(FEndDataTableFormation, Pos6Y) == 0x000058, "Member 'FEndDataTableFormation::Pos6Y' has a wrong offset!");
static_assert(offsetof(FEndDataTableFormation, Pos7X) == 0x00005C, "Member 'FEndDataTableFormation::Pos7X' has a wrong offset!");
static_assert(offsetof(FEndDataTableFormation, Pos7Y) == 0x000060, "Member 'FEndDataTableFormation::Pos7Y' has a wrong offset!");
static_assert(offsetof(FEndDataTableFormation, Pos8X) == 0x000064, "Member 'FEndDataTableFormation::Pos8X' has a wrong offset!");
static_assert(offsetof(FEndDataTableFormation, Pos8Y) == 0x000068, "Member 'FEndDataTableFormation::Pos8Y' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableInDoorVolume
// 0x0008 (0x0010 - 0x0008)
struct FEndDataTableInDoorVolume final : public FEndDataTableRowBase
{
public:
	float                                         DashRootMotionTranslationScale;                    // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableInDoorVolume) == 0x000008, "Wrong alignment on FEndDataTableInDoorVolume");
static_assert(sizeof(FEndDataTableInDoorVolume) == 0x000010, "Wrong size on FEndDataTableInDoorVolume");
static_assert(offsetof(FEndDataTableInDoorVolume, DashRootMotionTranslationScale) == 0x000008, "Member 'FEndDataTableInDoorVolume::DashRootMotionTranslationScale' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableInitialParameter
// 0x0028 (0x0030 - 0x0008)
struct FEndDataTableInitialParameter final : public FEndDataTableRowBase
{
public:
	int32                                         GroupType;                                         // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Type;                                              // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerID;                                          // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TargetDataTableID;                                 // 0x0014(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IntArg;                                            // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EquipTargetType;                                   // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EquipSlotIndex;                                    // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SetAP;                                             // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UseMode;                                           // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableInitialParameter) == 0x000008, "Wrong alignment on FEndDataTableInitialParameter");
static_assert(sizeof(FEndDataTableInitialParameter) == 0x000030, "Wrong size on FEndDataTableInitialParameter");
static_assert(offsetof(FEndDataTableInitialParameter, GroupType) == 0x000008, "Member 'FEndDataTableInitialParameter::GroupType' has a wrong offset!");
static_assert(offsetof(FEndDataTableInitialParameter, Type) == 0x00000C, "Member 'FEndDataTableInitialParameter::Type' has a wrong offset!");
static_assert(offsetof(FEndDataTableInitialParameter, PlayerID) == 0x000010, "Member 'FEndDataTableInitialParameter::PlayerID' has a wrong offset!");
static_assert(offsetof(FEndDataTableInitialParameter, TargetDataTableID) == 0x000014, "Member 'FEndDataTableInitialParameter::TargetDataTableID' has a wrong offset!");
static_assert(offsetof(FEndDataTableInitialParameter, IntArg) == 0x00001C, "Member 'FEndDataTableInitialParameter::IntArg' has a wrong offset!");
static_assert(offsetof(FEndDataTableInitialParameter, EquipTargetType) == 0x000020, "Member 'FEndDataTableInitialParameter::EquipTargetType' has a wrong offset!");
static_assert(offsetof(FEndDataTableInitialParameter, EquipSlotIndex) == 0x000024, "Member 'FEndDataTableInitialParameter::EquipSlotIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTableInitialParameter, SetAP) == 0x000028, "Member 'FEndDataTableInitialParameter::SetAP' has a wrong offset!");
static_assert(offsetof(FEndDataTableInitialParameter, UseMode) == 0x00002C, "Member 'FEndDataTableInitialParameter::UseMode' has a wrong offset!");

// ScriptStruct EndGame.EndFootEffectorSolveFoot
// 0x0018 (0x0018 - 0x0000)
struct FEndFootEffectorSolveFoot final
{
public:
	class FName                                   FootBoneName;                                      // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ToeBoneName;                                       // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FootProcessNumBonesInLimb;                         // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAxis                                         FootBoneForwardAxis;                               // 0x0014(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableKneeTwistCorrection;                        // 0x0015(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApplyAdjustRotation;                              // 0x0016(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17[0x1];                                       // 0x0017(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndFootEffectorSolveFoot) == 0x000004, "Wrong alignment on FEndFootEffectorSolveFoot");
static_assert(sizeof(FEndFootEffectorSolveFoot) == 0x000018, "Wrong size on FEndFootEffectorSolveFoot");
static_assert(offsetof(FEndFootEffectorSolveFoot, FootBoneName) == 0x000000, "Member 'FEndFootEffectorSolveFoot::FootBoneName' has a wrong offset!");
static_assert(offsetof(FEndFootEffectorSolveFoot, ToeBoneName) == 0x000008, "Member 'FEndFootEffectorSolveFoot::ToeBoneName' has a wrong offset!");
static_assert(offsetof(FEndFootEffectorSolveFoot, FootProcessNumBonesInLimb) == 0x000010, "Member 'FEndFootEffectorSolveFoot::FootProcessNumBonesInLimb' has a wrong offset!");
static_assert(offsetof(FEndFootEffectorSolveFoot, FootBoneForwardAxis) == 0x000014, "Member 'FEndFootEffectorSolveFoot::FootBoneForwardAxis' has a wrong offset!");
static_assert(offsetof(FEndFootEffectorSolveFoot, bEnableKneeTwistCorrection) == 0x000015, "Member 'FEndFootEffectorSolveFoot::bEnableKneeTwistCorrection' has a wrong offset!");
static_assert(offsetof(FEndFootEffectorSolveFoot, bApplyAdjustRotation) == 0x000016, "Member 'FEndFootEffectorSolveFoot::bApplyAdjustRotation' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableInventoryList
// 0x0010 (0x0018 - 0x0008)
struct FEndDataTableInventoryList final : public FEndDataTableRowBase
{
public:
	uint8                                         Type;                                              // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   TableID;                                           // 0x000C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         IsUnViewed;                                        // 0x0014(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         IsStack;                                           // 0x0015(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableInventoryList) == 0x000008, "Wrong alignment on FEndDataTableInventoryList");
static_assert(sizeof(FEndDataTableInventoryList) == 0x000018, "Wrong size on FEndDataTableInventoryList");
static_assert(offsetof(FEndDataTableInventoryList, Type) == 0x000008, "Member 'FEndDataTableInventoryList::Type' has a wrong offset!");
static_assert(offsetof(FEndDataTableInventoryList, TableID) == 0x00000C, "Member 'FEndDataTableInventoryList::TableID' has a wrong offset!");
static_assert(offsetof(FEndDataTableInventoryList, IsUnViewed) == 0x000014, "Member 'FEndDataTableInventoryList::IsUnViewed' has a wrong offset!");
static_assert(offsetof(FEndDataTableInventoryList, IsStack) == 0x000015, "Member 'FEndDataTableInventoryList::IsStack' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableItemDrop
// 0x0090 (0x0098 - 0x0008)
struct FEndDataTableItemDrop final : public FEndDataTableRowBase
{
public:
	TArray<class FName>                           Item_Array;                                        // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 ItemPercent_Array;                                 // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<uint16>                                ItemNum_Array;                                     // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 ItemDropTextId;                                    // 0x0038(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ItemDropNotGetTextId;                              // 0x0048(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           MakoStoneDamageSource_Array;                       // 0x0058(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 MakoStonePercent_Array;                            // 0x0068(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<uint8>                                 MakoStoneNum_Array;                                // 0x0078(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 MakoStoneDropTextId;                               // 0x0088(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableItemDrop) == 0x000008, "Wrong alignment on FEndDataTableItemDrop");
static_assert(sizeof(FEndDataTableItemDrop) == 0x000098, "Wrong size on FEndDataTableItemDrop");
static_assert(offsetof(FEndDataTableItemDrop, Item_Array) == 0x000008, "Member 'FEndDataTableItemDrop::Item_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableItemDrop, ItemPercent_Array) == 0x000018, "Member 'FEndDataTableItemDrop::ItemPercent_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableItemDrop, ItemNum_Array) == 0x000028, "Member 'FEndDataTableItemDrop::ItemNum_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableItemDrop, ItemDropTextId) == 0x000038, "Member 'FEndDataTableItemDrop::ItemDropTextId' has a wrong offset!");
static_assert(offsetof(FEndDataTableItemDrop, ItemDropNotGetTextId) == 0x000048, "Member 'FEndDataTableItemDrop::ItemDropNotGetTextId' has a wrong offset!");
static_assert(offsetof(FEndDataTableItemDrop, MakoStoneDamageSource_Array) == 0x000058, "Member 'FEndDataTableItemDrop::MakoStoneDamageSource_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableItemDrop, MakoStonePercent_Array) == 0x000068, "Member 'FEndDataTableItemDrop::MakoStonePercent_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableItemDrop, MakoStoneNum_Array) == 0x000078, "Member 'FEndDataTableItemDrop::MakoStoneNum_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableItemDrop, MakoStoneDropTextId) == 0x000088, "Member 'FEndDataTableItemDrop::MakoStoneDropTextId' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableObjectBattleScene
// 0x0040 (0x0048 - 0x0008)
struct FEndDataTableObjectBattleScene final : public FEndDataTableRowBase
{
public:
	int32                                         UniqueIndex;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Priority;                                          // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StartStateChange;                                  // 0x0010(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BaseTargetPointName;                               // 0x0020(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EscapeLength;                                      // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         AttributeList_Array;                               // 0x0038(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableObjectBattleScene) == 0x000008, "Wrong alignment on FEndDataTableObjectBattleScene");
static_assert(sizeof(FEndDataTableObjectBattleScene) == 0x000048, "Wrong size on FEndDataTableObjectBattleScene");
static_assert(offsetof(FEndDataTableObjectBattleScene, UniqueIndex) == 0x000008, "Member 'FEndDataTableObjectBattleScene::UniqueIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectBattleScene, Priority) == 0x00000C, "Member 'FEndDataTableObjectBattleScene::Priority' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectBattleScene, StartStateChange) == 0x000010, "Member 'FEndDataTableObjectBattleScene::StartStateChange' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectBattleScene, BaseTargetPointName) == 0x000020, "Member 'FEndDataTableObjectBattleScene::BaseTargetPointName' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectBattleScene, EscapeLength) == 0x000030, "Member 'FEndDataTableObjectBattleScene::EscapeLength' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectBattleScene, AttributeList_Array) == 0x000038, "Member 'FEndDataTableObjectBattleScene::AttributeList_Array' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableJukeBox
// 0x0070 (0x0078 - 0x0008)
struct FEndDataTableJukeBox final : public FEndDataTableRowBase
{
public:
	int32                                         UniqueID;                                          // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ForceView;                                         // 0x000C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Category;                                          // 0x000D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SortValue;                                         // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ItemNameLabel;                                     // 0x0018(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ItemDetailLabel;                                   // 0x0028(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BgmId;                                             // 0x0038(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StateTriggerOnPlay;                                // 0x0040(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SubQuestIconStoryFlag;                             // 0x0050(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 IconName;                                          // 0x0058(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TextureName;                                       // 0x0068(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableJukeBox) == 0x000008, "Wrong alignment on FEndDataTableJukeBox");
static_assert(sizeof(FEndDataTableJukeBox) == 0x000078, "Wrong size on FEndDataTableJukeBox");
static_assert(offsetof(FEndDataTableJukeBox, UniqueID) == 0x000008, "Member 'FEndDataTableJukeBox::UniqueID' has a wrong offset!");
static_assert(offsetof(FEndDataTableJukeBox, ForceView) == 0x00000C, "Member 'FEndDataTableJukeBox::ForceView' has a wrong offset!");
static_assert(offsetof(FEndDataTableJukeBox, Category) == 0x00000D, "Member 'FEndDataTableJukeBox::Category' has a wrong offset!");
static_assert(offsetof(FEndDataTableJukeBox, SortValue) == 0x000010, "Member 'FEndDataTableJukeBox::SortValue' has a wrong offset!");
static_assert(offsetof(FEndDataTableJukeBox, ItemNameLabel) == 0x000018, "Member 'FEndDataTableJukeBox::ItemNameLabel' has a wrong offset!");
static_assert(offsetof(FEndDataTableJukeBox, ItemDetailLabel) == 0x000028, "Member 'FEndDataTableJukeBox::ItemDetailLabel' has a wrong offset!");
static_assert(offsetof(FEndDataTableJukeBox, BgmId) == 0x000038, "Member 'FEndDataTableJukeBox::BgmId' has a wrong offset!");
static_assert(offsetof(FEndDataTableJukeBox, StateTriggerOnPlay) == 0x000040, "Member 'FEndDataTableJukeBox::StateTriggerOnPlay' has a wrong offset!");
static_assert(offsetof(FEndDataTableJukeBox, SubQuestIconStoryFlag) == 0x000050, "Member 'FEndDataTableJukeBox::SubQuestIconStoryFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTableJukeBox, IconName) == 0x000058, "Member 'FEndDataTableJukeBox::IconName' has a wrong offset!");
static_assert(offsetof(FEndDataTableJukeBox, TextureName) == 0x000068, "Member 'FEndDataTableJukeBox::TextureName' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableTextGroup
// 0x0020 (0x0028 - 0x0008)
struct FEndDataTableTextGroup final : public FEndDataTableRowBase
{
public:
	TArray<int32>                                 TextType_Effect_Array;                             // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         Text_Array;                                        // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableTextGroup) == 0x000008, "Wrong alignment on FEndDataTableTextGroup");
static_assert(sizeof(FEndDataTableTextGroup) == 0x000028, "Wrong size on FEndDataTableTextGroup");
static_assert(offsetof(FEndDataTableTextGroup, TextType_Effect_Array) == 0x000008, "Member 'FEndDataTableTextGroup::TextType_Effect_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableTextGroup, Text_Array) == 0x000018, "Member 'FEndDataTableTextGroup::Text_Array' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableLimitBreak
// 0x0030 (0x0038 - 0x0008)
struct FEndDataTableLimitBreak final : public FEndDataTableRowBase
{
public:
	TArray<class FName>                           AbilityID_Array;                                   // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 AbilityLearnParameter_Array;                       // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 LevelUpKillEnemyNum_Array;                         // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableLimitBreak) == 0x000008, "Wrong alignment on FEndDataTableLimitBreak");
static_assert(sizeof(FEndDataTableLimitBreak) == 0x000038, "Wrong size on FEndDataTableLimitBreak");
static_assert(offsetof(FEndDataTableLimitBreak, AbilityID_Array) == 0x000008, "Member 'FEndDataTableLimitBreak::AbilityID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableLimitBreak, AbilityLearnParameter_Array) == 0x000018, "Member 'FEndDataTableLimitBreak::AbilityLearnParameter_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableLimitBreak, LevelUpKillEnemyNum_Array) == 0x000028, "Member 'FEndDataTableLimitBreak::LevelUpKillEnemyNum_Array' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableTrophy
// 0x0028 (0x0030 - 0x0008)
struct FEndDataTableTrophy final : public FEndDataTableRowBase
{
public:
	int32                                         PlatformID;                                        // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Type;                                              // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TriggerType;                                       // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 StringParam;                                       // 0x0018(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IntParam;                                          // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Point;                                             // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableTrophy) == 0x000008, "Wrong alignment on FEndDataTableTrophy");
static_assert(sizeof(FEndDataTableTrophy) == 0x000030, "Wrong size on FEndDataTableTrophy");
static_assert(offsetof(FEndDataTableTrophy, PlatformID) == 0x000008, "Member 'FEndDataTableTrophy::PlatformID' has a wrong offset!");
static_assert(offsetof(FEndDataTableTrophy, Type) == 0x00000C, "Member 'FEndDataTableTrophy::Type' has a wrong offset!");
static_assert(offsetof(FEndDataTableTrophy, TriggerType) == 0x000010, "Member 'FEndDataTableTrophy::TriggerType' has a wrong offset!");
static_assert(offsetof(FEndDataTableTrophy, StringParam) == 0x000018, "Member 'FEndDataTableTrophy::StringParam' has a wrong offset!");
static_assert(offsetof(FEndDataTableTrophy, IntParam) == 0x000028, "Member 'FEndDataTableTrophy::IntParam' has a wrong offset!");
static_assert(offsetof(FEndDataTableTrophy, Point) == 0x00002C, "Member 'FEndDataTableTrophy::Point' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableLocation
// 0x0068 (0x0070 - 0x0008)
struct FEndDataTableLocation final : public FEndDataTableRowBase
{
public:
	TArray<class FName>                           EntryObjectList_Array;                             // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           LocationList_Array;                                // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           SlotChapterID_Array;                               // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 PositionIndexLocationResident_Array;               // 0x0038(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           SlotSpecificEntryObject_Array;                     // 0x0048(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           IgnoreObject_Array;                                // 0x0058(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   NextLocation;                                      // 0x0068(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableLocation) == 0x000008, "Wrong alignment on FEndDataTableLocation");
static_assert(sizeof(FEndDataTableLocation) == 0x000070, "Wrong size on FEndDataTableLocation");
static_assert(offsetof(FEndDataTableLocation, EntryObjectList_Array) == 0x000008, "Member 'FEndDataTableLocation::EntryObjectList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableLocation, LocationList_Array) == 0x000018, "Member 'FEndDataTableLocation::LocationList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableLocation, SlotChapterID_Array) == 0x000028, "Member 'FEndDataTableLocation::SlotChapterID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableLocation, PositionIndexLocationResident_Array) == 0x000038, "Member 'FEndDataTableLocation::PositionIndexLocationResident_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableLocation, SlotSpecificEntryObject_Array) == 0x000048, "Member 'FEndDataTableLocation::SlotSpecificEntryObject_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableLocation, IgnoreObject_Array) == 0x000058, "Member 'FEndDataTableLocation::IgnoreObject_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableLocation, NextLocation) == 0x000068, "Member 'FEndDataTableLocation::NextLocation' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableLocationProgrammer
// 0x0010 (0x0018 - 0x0008)
struct FEndDataTableLocationProgrammer final : public FEndDataTableRowBase
{
public:
	TArray<class FName>                           EntryObjectList_Array;                             // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableLocationProgrammer) == 0x000008, "Wrong alignment on FEndDataTableLocationProgrammer");
static_assert(sizeof(FEndDataTableLocationProgrammer) == 0x000018, "Wrong size on FEndDataTableLocationProgrammer");
static_assert(offsetof(FEndDataTableLocationProgrammer, EntryObjectList_Array) == 0x000008, "Member 'FEndDataTableLocationProgrammer::EntryObjectList_Array' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableLocationResidentEnvironment
// 0x0010 (0x0018 - 0x0008)
struct FEndDataTableLocationResidentEnvironment final : public FEndDataTableRowBase
{
public:
	float                                         PlayerLocX;                                        // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayerLocY;                                        // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayerLocZ;                                        // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayerYaw;                                         // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableLocationResidentEnvironment) == 0x000008, "Wrong alignment on FEndDataTableLocationResidentEnvironment");
static_assert(sizeof(FEndDataTableLocationResidentEnvironment) == 0x000018, "Wrong size on FEndDataTableLocationResidentEnvironment");
static_assert(offsetof(FEndDataTableLocationResidentEnvironment, PlayerLocX) == 0x000008, "Member 'FEndDataTableLocationResidentEnvironment::PlayerLocX' has a wrong offset!");
static_assert(offsetof(FEndDataTableLocationResidentEnvironment, PlayerLocY) == 0x00000C, "Member 'FEndDataTableLocationResidentEnvironment::PlayerLocY' has a wrong offset!");
static_assert(offsetof(FEndDataTableLocationResidentEnvironment, PlayerLocZ) == 0x000010, "Member 'FEndDataTableLocationResidentEnvironment::PlayerLocZ' has a wrong offset!");
static_assert(offsetof(FEndDataTableLocationResidentEnvironment, PlayerYaw) == 0x000014, "Member 'FEndDataTableLocationResidentEnvironment::PlayerYaw' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableLocationWork
// 0x0008 (0x0010 - 0x0008)
struct FEndDataTableLocationWork final : public FEndDataTableRowBase
{
public:
	int32                                         LocationNumber;                                    // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableLocationWork) == 0x000008, "Wrong alignment on FEndDataTableLocationWork");
static_assert(sizeof(FEndDataTableLocationWork) == 0x000010, "Wrong size on FEndDataTableLocationWork");
static_assert(offsetof(FEndDataTableLocationWork, LocationNumber) == 0x000008, "Member 'FEndDataTableLocationWork::LocationNumber' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableManual
// 0x0060 (0x0068 - 0x0008)
struct FEndDataTableManual final : public FEndDataTableRowBase
{
public:
	uint8                                         Category;                                          // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ViewFlag;                                          // 0x000C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReadFlag;                                          // 0x0014(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SortIndex;                                         // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParentID;                                          // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TitleName;                                         // 0x0028(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 ManualItemStyle_Array;                             // 0x0038(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         ManualItemDescription_Array;                       // 0x0048(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         ManualItemImageName_Array;                         // 0x0058(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableManual) == 0x000008, "Wrong alignment on FEndDataTableManual");
static_assert(sizeof(FEndDataTableManual) == 0x000068, "Wrong size on FEndDataTableManual");
static_assert(offsetof(FEndDataTableManual, Category) == 0x000008, "Member 'FEndDataTableManual::Category' has a wrong offset!");
static_assert(offsetof(FEndDataTableManual, ViewFlag) == 0x00000C, "Member 'FEndDataTableManual::ViewFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTableManual, ReadFlag) == 0x000014, "Member 'FEndDataTableManual::ReadFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTableManual, SortIndex) == 0x00001C, "Member 'FEndDataTableManual::SortIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTableManual, ParentID) == 0x000020, "Member 'FEndDataTableManual::ParentID' has a wrong offset!");
static_assert(offsetof(FEndDataTableManual, TitleName) == 0x000028, "Member 'FEndDataTableManual::TitleName' has a wrong offset!");
static_assert(offsetof(FEndDataTableManual, ManualItemStyle_Array) == 0x000038, "Member 'FEndDataTableManual::ManualItemStyle_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableManual, ManualItemDescription_Array) == 0x000048, "Member 'FEndDataTableManual::ManualItemDescription_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableManual, ManualItemImageName_Array) == 0x000058, "Member 'FEndDataTableManual::ManualItemImageName_Array' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableMapIconInfo
// 0x0060 (0x0068 - 0x0008)
struct FEndDataTableMapIconInfo final : public FEndDataTableRowBase
{
public:
	class FName                                   ViewFlagID;                                        // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LocationID;                                        // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         IconType;                                          // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ViewNavimap;                                       // 0x0019(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ViewCompass;                                       // 0x001A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B[0x5];                                       // 0x001B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 InText;                                            // 0x0020(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ObjectType;                                        // 0x0030(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ObjectID;                                          // 0x0034(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SocketName;                                        // 0x003C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OffsetX;                                           // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OffsetY;                                           // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OffsetZ;                                           // 0x004C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HeightFromOffset;                                  // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ViewDistance;                                      // 0x0054(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NaviMapLayerIndex;                                 // 0x0058(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ChapterID;                                         // 0x005C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableMapIconInfo) == 0x000008, "Wrong alignment on FEndDataTableMapIconInfo");
static_assert(sizeof(FEndDataTableMapIconInfo) == 0x000068, "Wrong size on FEndDataTableMapIconInfo");
static_assert(offsetof(FEndDataTableMapIconInfo, ViewFlagID) == 0x000008, "Member 'FEndDataTableMapIconInfo::ViewFlagID' has a wrong offset!");
static_assert(offsetof(FEndDataTableMapIconInfo, LocationID) == 0x000010, "Member 'FEndDataTableMapIconInfo::LocationID' has a wrong offset!");
static_assert(offsetof(FEndDataTableMapIconInfo, IconType) == 0x000018, "Member 'FEndDataTableMapIconInfo::IconType' has a wrong offset!");
static_assert(offsetof(FEndDataTableMapIconInfo, ViewNavimap) == 0x000019, "Member 'FEndDataTableMapIconInfo::ViewNavimap' has a wrong offset!");
static_assert(offsetof(FEndDataTableMapIconInfo, ViewCompass) == 0x00001A, "Member 'FEndDataTableMapIconInfo::ViewCompass' has a wrong offset!");
static_assert(offsetof(FEndDataTableMapIconInfo, InText) == 0x000020, "Member 'FEndDataTableMapIconInfo::InText' has a wrong offset!");
static_assert(offsetof(FEndDataTableMapIconInfo, ObjectType) == 0x000030, "Member 'FEndDataTableMapIconInfo::ObjectType' has a wrong offset!");
static_assert(offsetof(FEndDataTableMapIconInfo, ObjectID) == 0x000034, "Member 'FEndDataTableMapIconInfo::ObjectID' has a wrong offset!");
static_assert(offsetof(FEndDataTableMapIconInfo, SocketName) == 0x00003C, "Member 'FEndDataTableMapIconInfo::SocketName' has a wrong offset!");
static_assert(offsetof(FEndDataTableMapIconInfo, OffsetX) == 0x000044, "Member 'FEndDataTableMapIconInfo::OffsetX' has a wrong offset!");
static_assert(offsetof(FEndDataTableMapIconInfo, OffsetY) == 0x000048, "Member 'FEndDataTableMapIconInfo::OffsetY' has a wrong offset!");
static_assert(offsetof(FEndDataTableMapIconInfo, OffsetZ) == 0x00004C, "Member 'FEndDataTableMapIconInfo::OffsetZ' has a wrong offset!");
static_assert(offsetof(FEndDataTableMapIconInfo, HeightFromOffset) == 0x000050, "Member 'FEndDataTableMapIconInfo::HeightFromOffset' has a wrong offset!");
static_assert(offsetof(FEndDataTableMapIconInfo, ViewDistance) == 0x000054, "Member 'FEndDataTableMapIconInfo::ViewDistance' has a wrong offset!");
static_assert(offsetof(FEndDataTableMapIconInfo, NaviMapLayerIndex) == 0x000058, "Member 'FEndDataTableMapIconInfo::NaviMapLayerIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTableMapIconInfo, ChapterID) == 0x00005C, "Member 'FEndDataTableMapIconInfo::ChapterID' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableMateria
// 0x0148 (0x0150 - 0x0008)
struct FEndDataTableMateria final : public FEndDataTableRowBase
{
public:
	int32                                         UniqueID;                                          // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UniqueIndex;                                       // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ItemCategory;                                      // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Category;                                          // 0x0011(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 NameLabel;                                         // 0x0018(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DetailLabel;                                       // 0x0028(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SortValue;                                         // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 IconName;                                          // 0x0040(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BuyValue;                                          // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         CanSale;                                           // 0x0054(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 SaleValueLv_Array;                                 // 0x0058(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   CharaSpecID;                                       // 0x0068(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         LinkSrcFlag;                                       // 0x0070(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x3];                                       // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AddAttributeFlag;                                  // 0x0074(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AddStatusChangeFlag;                               // 0x0078(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         LinkDestFlag;                                      // 0x007C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7D[0x3];                                       // 0x007D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AttackAdd;                                         // 0x0080(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AttackScale;                                       // 0x0084(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MagicAttackAdd;                                    // 0x0088(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MagicAttackScale;                                  // 0x008C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DefenseAdd;                                        // 0x0090(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DefenseScale;                                      // 0x0094(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MagicDefenseAdd;                                   // 0x0098(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MagicDefenseScale;                                 // 0x009C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StrengthAdd;                                       // 0x00A0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StrengthScale;                                     // 0x00A4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MagicAdd;                                          // 0x00A8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MagicScale;                                        // 0x00AC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VitalityAdd;                                       // 0x00B0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VitalityScale;                                     // 0x00B4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SpilitAdd;                                         // 0x00B8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SpilitScale;                                       // 0x00BC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LuckAdd;                                           // 0x00C0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LuckScale;                                         // 0x00C4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HPMaxAdd;                                          // 0x00C8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HPMaxScale;                                        // 0x00CC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MPMaxAdd;                                          // 0x00D0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MPMaxScale;                                        // 0x00D4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CriticalHitRateAdd;                                // 0x00D8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CriticalHitRateScale;                              // 0x00DC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         LvMax;                                             // 0x00E0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         EffectEnableType;                                  // 0x00E1(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E2[0x6];                                       // 0x00E2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 EffectType_Array;                                  // 0x00E8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 EffectValue_Array;                                 // 0x00F8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           EffectString_Array;                                // 0x0108(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         EffectDescription_Array;                           // 0x0118(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 ExpNextLv_Array;                                   // 0x0128(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   TreasureSpecId;                                    // 0x0138(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MovieName;                                         // 0x0140(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BattleCharaSpecID;                                 // 0x0148(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableMateria) == 0x000008, "Wrong alignment on FEndDataTableMateria");
static_assert(sizeof(FEndDataTableMateria) == 0x000150, "Wrong size on FEndDataTableMateria");
static_assert(offsetof(FEndDataTableMateria, UniqueID) == 0x000008, "Member 'FEndDataTableMateria::UniqueID' has a wrong offset!");
static_assert(offsetof(FEndDataTableMateria, UniqueIndex) == 0x00000C, "Member 'FEndDataTableMateria::UniqueIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTableMateria, ItemCategory) == 0x000010, "Member 'FEndDataTableMateria::ItemCategory' has a wrong offset!");
static_assert(offsetof(FEndDataTableMateria, Category) == 0x000011, "Member 'FEndDataTableMateria::Category' has a wrong offset!");
static_assert(offsetof(FEndDataTableMateria, NameLabel) == 0x000018, "Member 'FEndDataTableMateria::NameLabel' has a wrong offset!");
static_assert(offsetof(FEndDataTableMateria, DetailLabel) == 0x000028, "Member 'FEndDataTableMateria::DetailLabel' has a wrong offset!");
static_assert(offsetof(FEndDataTableMateria, SortValue) == 0x000038, "Member 'FEndDataTableMateria::SortValue' has a wrong offset!");
static_assert(offsetof(FEndDataTableMateria, IconName) == 0x000040, "Member 'FEndDataTableMateria::IconName' has a wrong offset!");
static_assert(offsetof(FEndDataTableMateria, BuyValue) == 0x000050, "Member 'FEndDataTableMateria::BuyValue' has a wrong offset!");
static_assert(offsetof(FEndDataTableMateria, CanSale) == 0x000054, "Member 'FEndDataTableMateria::CanSale' has a wrong offset!");
static_assert(offsetof(FEndDataTableMateria, SaleValueLv_Array) == 0x000058, "Member 'FEndDataTableMateria::SaleValueLv_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableMateria, CharaSpecID) == 0x000068, "Member 'FEndDataTableMateria::CharaSpecID' has a wrong offset!");
static_assert(offsetof(FEndDataTableMateria, LinkSrcFlag) == 0x000070, "Member 'FEndDataTableMateria::LinkSrcFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTableMateria, AddAttributeFlag) == 0x000074, "Member 'FEndDataTableMateria::AddAttributeFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTableMateria, AddStatusChangeFlag) == 0x000078, "Member 'FEndDataTableMateria::AddStatusChangeFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTableMateria, LinkDestFlag) == 0x00007C, "Member 'FEndDataTableMateria::LinkDestFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTableMateria, AttackAdd) == 0x000080, "Member 'FEndDataTableMateria::AttackAdd' has a wrong offset!");
static_assert(offsetof(FEndDataTableMateria, AttackScale) == 0x000084, "Member 'FEndDataTableMateria::AttackScale' has a wrong offset!");
static_assert(offsetof(FEndDataTableMateria, MagicAttackAdd) == 0x000088, "Member 'FEndDataTableMateria::MagicAttackAdd' has a wrong offset!");
static_assert(offsetof(FEndDataTableMateria, MagicAttackScale) == 0x00008C, "Member 'FEndDataTableMateria::MagicAttackScale' has a wrong offset!");
static_assert(offsetof(FEndDataTableMateria, DefenseAdd) == 0x000090, "Member 'FEndDataTableMateria::DefenseAdd' has a wrong offset!");
static_assert(offsetof(FEndDataTableMateria, DefenseScale) == 0x000094, "Member 'FEndDataTableMateria::DefenseScale' has a wrong offset!");
static_assert(offsetof(FEndDataTableMateria, MagicDefenseAdd) == 0x000098, "Member 'FEndDataTableMateria::MagicDefenseAdd' has a wrong offset!");
static_assert(offsetof(FEndDataTableMateria, MagicDefenseScale) == 0x00009C, "Member 'FEndDataTableMateria::MagicDefenseScale' has a wrong offset!");
static_assert(offsetof(FEndDataTableMateria, StrengthAdd) == 0x0000A0, "Member 'FEndDataTableMateria::StrengthAdd' has a wrong offset!");
static_assert(offsetof(FEndDataTableMateria, StrengthScale) == 0x0000A4, "Member 'FEndDataTableMateria::StrengthScale' has a wrong offset!");
static_assert(offsetof(FEndDataTableMateria, MagicAdd) == 0x0000A8, "Member 'FEndDataTableMateria::MagicAdd' has a wrong offset!");
static_assert(offsetof(FEndDataTableMateria, MagicScale) == 0x0000AC, "Member 'FEndDataTableMateria::MagicScale' has a wrong offset!");
static_assert(offsetof(FEndDataTableMateria, VitalityAdd) == 0x0000B0, "Member 'FEndDataTableMateria::VitalityAdd' has a wrong offset!");
static_assert(offsetof(FEndDataTableMateria, VitalityScale) == 0x0000B4, "Member 'FEndDataTableMateria::VitalityScale' has a wrong offset!");
static_assert(offsetof(FEndDataTableMateria, SpilitAdd) == 0x0000B8, "Member 'FEndDataTableMateria::SpilitAdd' has a wrong offset!");
static_assert(offsetof(FEndDataTableMateria, SpilitScale) == 0x0000BC, "Member 'FEndDataTableMateria::SpilitScale' has a wrong offset!");
static_assert(offsetof(FEndDataTableMateria, LuckAdd) == 0x0000C0, "Member 'FEndDataTableMateria::LuckAdd' has a wrong offset!");
static_assert(offsetof(FEndDataTableMateria, LuckScale) == 0x0000C4, "Member 'FEndDataTableMateria::LuckScale' has a wrong offset!");
static_assert(offsetof(FEndDataTableMateria, HPMaxAdd) == 0x0000C8, "Member 'FEndDataTableMateria::HPMaxAdd' has a wrong offset!");
static_assert(offsetof(FEndDataTableMateria, HPMaxScale) == 0x0000CC, "Member 'FEndDataTableMateria::HPMaxScale' has a wrong offset!");
static_assert(offsetof(FEndDataTableMateria, MPMaxAdd) == 0x0000D0, "Member 'FEndDataTableMateria::MPMaxAdd' has a wrong offset!");
static_assert(offsetof(FEndDataTableMateria, MPMaxScale) == 0x0000D4, "Member 'FEndDataTableMateria::MPMaxScale' has a wrong offset!");
static_assert(offsetof(FEndDataTableMateria, CriticalHitRateAdd) == 0x0000D8, "Member 'FEndDataTableMateria::CriticalHitRateAdd' has a wrong offset!");
static_assert(offsetof(FEndDataTableMateria, CriticalHitRateScale) == 0x0000DC, "Member 'FEndDataTableMateria::CriticalHitRateScale' has a wrong offset!");
static_assert(offsetof(FEndDataTableMateria, LvMax) == 0x0000E0, "Member 'FEndDataTableMateria::LvMax' has a wrong offset!");
static_assert(offsetof(FEndDataTableMateria, EffectEnableType) == 0x0000E1, "Member 'FEndDataTableMateria::EffectEnableType' has a wrong offset!");
static_assert(offsetof(FEndDataTableMateria, EffectType_Array) == 0x0000E8, "Member 'FEndDataTableMateria::EffectType_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableMateria, EffectValue_Array) == 0x0000F8, "Member 'FEndDataTableMateria::EffectValue_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableMateria, EffectString_Array) == 0x000108, "Member 'FEndDataTableMateria::EffectString_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableMateria, EffectDescription_Array) == 0x000118, "Member 'FEndDataTableMateria::EffectDescription_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableMateria, ExpNextLv_Array) == 0x000128, "Member 'FEndDataTableMateria::ExpNextLv_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableMateria, TreasureSpecId) == 0x000138, "Member 'FEndDataTableMateria::TreasureSpecId' has a wrong offset!");
static_assert(offsetof(FEndDataTableMateria, MovieName) == 0x000140, "Member 'FEndDataTableMateria::MovieName' has a wrong offset!");
static_assert(offsetof(FEndDataTableMateria, BattleCharaSpecID) == 0x000148, "Member 'FEndDataTableMateria::BattleCharaSpecID' has a wrong offset!");

// ScriptStruct EndGame.EndDataTablePartyEntry
// 0x0050 (0x0058 - 0x0008)
struct FEndDataTablePartyEntry final : public FEndDataTableRowBase
{
public:
	int32                                         UniqueID;                                          // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RswBackupBattleLeaderID;                           // 0x000C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RswSaveBackupBattleLeaderType;                     // 0x0014(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RswRefBackupBattleLeaderType;                      // 0x001C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RswResetBackupBattleLeaderID;                      // 0x0024(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ChangeBattleLeader_Cloud;                          // 0x002C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ResetControlCharacter;                             // 0x002D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2E[0x2];                                       // 0x002E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           PlayerTable_Array;                                 // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<uint8>                                 PartyStatus_Array;                                 // 0x0040(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         NoCameraInterpolationChangeLeader;                 // 0x0050(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTablePartyEntry) == 0x000008, "Wrong alignment on FEndDataTablePartyEntry");
static_assert(sizeof(FEndDataTablePartyEntry) == 0x000058, "Wrong size on FEndDataTablePartyEntry");
static_assert(offsetof(FEndDataTablePartyEntry, UniqueID) == 0x000008, "Member 'FEndDataTablePartyEntry::UniqueID' has a wrong offset!");
static_assert(offsetof(FEndDataTablePartyEntry, RswBackupBattleLeaderID) == 0x00000C, "Member 'FEndDataTablePartyEntry::RswBackupBattleLeaderID' has a wrong offset!");
static_assert(offsetof(FEndDataTablePartyEntry, RswSaveBackupBattleLeaderType) == 0x000014, "Member 'FEndDataTablePartyEntry::RswSaveBackupBattleLeaderType' has a wrong offset!");
static_assert(offsetof(FEndDataTablePartyEntry, RswRefBackupBattleLeaderType) == 0x00001C, "Member 'FEndDataTablePartyEntry::RswRefBackupBattleLeaderType' has a wrong offset!");
static_assert(offsetof(FEndDataTablePartyEntry, RswResetBackupBattleLeaderID) == 0x000024, "Member 'FEndDataTablePartyEntry::RswResetBackupBattleLeaderID' has a wrong offset!");
static_assert(offsetof(FEndDataTablePartyEntry, ChangeBattleLeader_Cloud) == 0x00002C, "Member 'FEndDataTablePartyEntry::ChangeBattleLeader_Cloud' has a wrong offset!");
static_assert(offsetof(FEndDataTablePartyEntry, ResetControlCharacter) == 0x00002D, "Member 'FEndDataTablePartyEntry::ResetControlCharacter' has a wrong offset!");
static_assert(offsetof(FEndDataTablePartyEntry, PlayerTable_Array) == 0x000030, "Member 'FEndDataTablePartyEntry::PlayerTable_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTablePartyEntry, PartyStatus_Array) == 0x000040, "Member 'FEndDataTablePartyEntry::PartyStatus_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTablePartyEntry, NoCameraInterpolationChangeLeader) == 0x000050, "Member 'FEndDataTablePartyEntry::NoCameraInterpolationChangeLeader' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableMidgarMapLocationPoint
// 0x00A0 (0x00A8 - 0x0008)
struct FEndDataTableMidgarMapLocationPoint final : public FEndDataTableRowBase
{
public:
	int32                                         UniqueIndex;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PointName;                                         // 0x0010(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Location;                                          // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SocketName;                                        // 0x0028(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ShowLabelCondition;                                // 0x0030(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HideUntilShowLabel;                                // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   HideLabelCondition;                                // 0x003C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ChangeAltCondition;                                // 0x0044(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           LocationWire_Array;                                // 0x0050(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           LocationSurface_Array;                             // 0x0060(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           LocationWireAlt_Array;                             // 0x0070(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           LocationAltSurface_Array;                          // 0x0080(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         IsShortUILabel;                                    // 0x0090(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           ExtraLocation_Array;                               // 0x0098(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableMidgarMapLocationPoint) == 0x000008, "Wrong alignment on FEndDataTableMidgarMapLocationPoint");
static_assert(sizeof(FEndDataTableMidgarMapLocationPoint) == 0x0000A8, "Wrong size on FEndDataTableMidgarMapLocationPoint");
static_assert(offsetof(FEndDataTableMidgarMapLocationPoint, UniqueIndex) == 0x000008, "Member 'FEndDataTableMidgarMapLocationPoint::UniqueIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTableMidgarMapLocationPoint, PointName) == 0x000010, "Member 'FEndDataTableMidgarMapLocationPoint::PointName' has a wrong offset!");
static_assert(offsetof(FEndDataTableMidgarMapLocationPoint, Location) == 0x000020, "Member 'FEndDataTableMidgarMapLocationPoint::Location' has a wrong offset!");
static_assert(offsetof(FEndDataTableMidgarMapLocationPoint, SocketName) == 0x000028, "Member 'FEndDataTableMidgarMapLocationPoint::SocketName' has a wrong offset!");
static_assert(offsetof(FEndDataTableMidgarMapLocationPoint, ShowLabelCondition) == 0x000030, "Member 'FEndDataTableMidgarMapLocationPoint::ShowLabelCondition' has a wrong offset!");
static_assert(offsetof(FEndDataTableMidgarMapLocationPoint, HideUntilShowLabel) == 0x000038, "Member 'FEndDataTableMidgarMapLocationPoint::HideUntilShowLabel' has a wrong offset!");
static_assert(offsetof(FEndDataTableMidgarMapLocationPoint, HideLabelCondition) == 0x00003C, "Member 'FEndDataTableMidgarMapLocationPoint::HideLabelCondition' has a wrong offset!");
static_assert(offsetof(FEndDataTableMidgarMapLocationPoint, ChangeAltCondition) == 0x000044, "Member 'FEndDataTableMidgarMapLocationPoint::ChangeAltCondition' has a wrong offset!");
static_assert(offsetof(FEndDataTableMidgarMapLocationPoint, LocationWire_Array) == 0x000050, "Member 'FEndDataTableMidgarMapLocationPoint::LocationWire_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableMidgarMapLocationPoint, LocationSurface_Array) == 0x000060, "Member 'FEndDataTableMidgarMapLocationPoint::LocationSurface_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableMidgarMapLocationPoint, LocationWireAlt_Array) == 0x000070, "Member 'FEndDataTableMidgarMapLocationPoint::LocationWireAlt_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableMidgarMapLocationPoint, LocationAltSurface_Array) == 0x000080, "Member 'FEndDataTableMidgarMapLocationPoint::LocationAltSurface_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableMidgarMapLocationPoint, IsShortUILabel) == 0x000090, "Member 'FEndDataTableMidgarMapLocationPoint::IsShortUILabel' has a wrong offset!");
static_assert(offsetof(FEndDataTableMidgarMapLocationPoint, ExtraLocation_Array) == 0x000098, "Member 'FEndDataTableMidgarMapLocationPoint::ExtraLocation_Array' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableMiniGameAssetPacker
// 0x0050 (0x0058 - 0x0008)
struct FEndDataTableMiniGameAssetPacker final : public FEndDataTableRowBase
{
public:
	TArray<class FName>                           MotionList_Array;                                  // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           SEList_Array;                                      // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           UIList_Array;                                      // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           EffectList_Array;                                  // 0x0038(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           bgmList_Array;                                     // 0x0048(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableMiniGameAssetPacker) == 0x000008, "Wrong alignment on FEndDataTableMiniGameAssetPacker");
static_assert(sizeof(FEndDataTableMiniGameAssetPacker) == 0x000058, "Wrong size on FEndDataTableMiniGameAssetPacker");
static_assert(offsetof(FEndDataTableMiniGameAssetPacker, MotionList_Array) == 0x000008, "Member 'FEndDataTableMiniGameAssetPacker::MotionList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableMiniGameAssetPacker, SEList_Array) == 0x000018, "Member 'FEndDataTableMiniGameAssetPacker::SEList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableMiniGameAssetPacker, UIList_Array) == 0x000028, "Member 'FEndDataTableMiniGameAssetPacker::UIList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableMiniGameAssetPacker, EffectList_Array) == 0x000038, "Member 'FEndDataTableMiniGameAssetPacker::EffectList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableMiniGameAssetPacker, bgmList_Array) == 0x000048, "Member 'FEndDataTableMiniGameAssetPacker::bgmList_Array' has a wrong offset!");

// ScriptStruct EndGame.EndMenuColosseumRewardPrototypeData
// 0x0010 (0x0010 - 0x0000)
struct FEndMenuColosseumRewardPrototypeData final
{
public:
	int32                                         TargetScore;                                       // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ItemID;                                            // 0x0004(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemCount;                                         // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndMenuColosseumRewardPrototypeData) == 0x000004, "Wrong alignment on FEndMenuColosseumRewardPrototypeData");
static_assert(sizeof(FEndMenuColosseumRewardPrototypeData) == 0x000010, "Wrong size on FEndMenuColosseumRewardPrototypeData");
static_assert(offsetof(FEndMenuColosseumRewardPrototypeData, TargetScore) == 0x000000, "Member 'FEndMenuColosseumRewardPrototypeData::TargetScore' has a wrong offset!");
static_assert(offsetof(FEndMenuColosseumRewardPrototypeData, ItemID) == 0x000004, "Member 'FEndMenuColosseumRewardPrototypeData::ItemID' has a wrong offset!");
static_assert(offsetof(FEndMenuColosseumRewardPrototypeData, ItemCount) == 0x00000C, "Member 'FEndMenuColosseumRewardPrototypeData::ItemCount' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableStateAttribute
// 0x0008 (0x0010 - 0x0008)
struct FEndDataTableStateAttribute final : public FEndDataTableRowBase
{
public:
	int32                                         AttributeIndex;                                    // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableStateAttribute) == 0x000008, "Wrong alignment on FEndDataTableStateAttribute");
static_assert(sizeof(FEndDataTableStateAttribute) == 0x000010, "Wrong size on FEndDataTableStateAttribute");
static_assert(offsetof(FEndDataTableStateAttribute, AttributeIndex) == 0x000008, "Member 'FEndDataTableStateAttribute::AttributeIndex' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableMiniGameScoreboard
// 0x0010 (0x0018 - 0x0008)
struct FEndDataTableMiniGameScoreboard final : public FEndDataTableRowBase
{
public:
	int32                                         Type;                                              // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ScoreHolderName;                                   // 0x000C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Score;                                             // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableMiniGameScoreboard) == 0x000008, "Wrong alignment on FEndDataTableMiniGameScoreboard");
static_assert(sizeof(FEndDataTableMiniGameScoreboard) == 0x000018, "Wrong size on FEndDataTableMiniGameScoreboard");
static_assert(offsetof(FEndDataTableMiniGameScoreboard, Type) == 0x000008, "Member 'FEndDataTableMiniGameScoreboard::Type' has a wrong offset!");
static_assert(offsetof(FEndDataTableMiniGameScoreboard, ScoreHolderName) == 0x00000C, "Member 'FEndDataTableMiniGameScoreboard::ScoreHolderName' has a wrong offset!");
static_assert(offsetof(FEndDataTableMiniGameScoreboard, Score) == 0x000014, "Member 'FEndDataTableMiniGameScoreboard::Score' has a wrong offset!");

// ScriptStruct EndGame.EndStreamingTextureData
// 0x0020 (0x0020 - 0x0000)
struct FEndStreamingTextureData final
{
public:
	class FString                                 TexturePath;                                       // 0x0000(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MipMap;                                            // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxMipMap;                                         // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Time;                                              // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndStreamingTextureData) == 0x000008, "Wrong alignment on FEndStreamingTextureData");
static_assert(sizeof(FEndStreamingTextureData) == 0x000020, "Wrong size on FEndStreamingTextureData");
static_assert(offsetof(FEndStreamingTextureData, TexturePath) == 0x000000, "Member 'FEndStreamingTextureData::TexturePath' has a wrong offset!");
static_assert(offsetof(FEndStreamingTextureData, MipMap) == 0x000010, "Member 'FEndStreamingTextureData::MipMap' has a wrong offset!");
static_assert(offsetof(FEndStreamingTextureData, MaxMipMap) == 0x000014, "Member 'FEndStreamingTextureData::MaxMipMap' has a wrong offset!");
static_assert(offsetof(FEndStreamingTextureData, Time) == 0x000018, "Member 'FEndStreamingTextureData::Time' has a wrong offset!");

// ScriptStruct EndGame.EndTextureStream
// 0x0028 (0x0028 - 0x0000)
struct FEndTextureStream final
{
public:
	class FName                                   ViewTarget;                                        // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FEndStreamingTextureData>       TextureData;                                       // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UTexture2D*>                     Textures;                                          // 0x0018(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndTextureStream) == 0x000008, "Wrong alignment on FEndTextureStream");
static_assert(sizeof(FEndTextureStream) == 0x000028, "Wrong size on FEndTextureStream");
static_assert(offsetof(FEndTextureStream, ViewTarget) == 0x000000, "Member 'FEndTextureStream::ViewTarget' has a wrong offset!");
static_assert(offsetof(FEndTextureStream, TextureData) == 0x000008, "Member 'FEndTextureStream::TextureData' has a wrong offset!");
static_assert(offsetof(FEndTextureStream, Textures) == 0x000018, "Member 'FEndTextureStream::Textures' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableNaviBGMInfo
// 0x0020 (0x0028 - 0x0008)
struct FEndDataTableNaviBGMInfo final : public FEndDataTableRowBase
{
public:
	TArray<class FString>                         FootBGMSetIDList_Array;                            // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 SlotNumberList_Array;                              // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableNaviBGMInfo) == 0x000008, "Wrong alignment on FEndDataTableNaviBGMInfo");
static_assert(sizeof(FEndDataTableNaviBGMInfo) == 0x000028, "Wrong size on FEndDataTableNaviBGMInfo");
static_assert(offsetof(FEndDataTableNaviBGMInfo, FootBGMSetIDList_Array) == 0x000008, "Member 'FEndDataTableNaviBGMInfo::FootBGMSetIDList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableNaviBGMInfo, SlotNumberList_Array) == 0x000018, "Member 'FEndDataTableNaviBGMInfo::SlotNumberList_Array' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableObjectEnemy
// 0x0060 (0x0068 - 0x0008)
struct FEndDataTableObjectEnemy final : public FEndDataTableRowBase
{
public:
	int32                                         UniqueIndex;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Priority;                                          // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ActorName;                                         // 0x0010(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BattleSceneID;                                     // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BattleCharaSpecID;                                 // 0x0028(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ResponseAreaID;                                    // 0x0030(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ResponseAreaPlayerID;                              // 0x0038(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TweetResponseAreaID;                               // 0x0040(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TweetResponseAreaPlayerID;                         // 0x0048(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         AttributeList_Array;                               // 0x0050(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         ForceCreateActor;                                  // 0x0060(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         NearFarFadeState;                                  // 0x0061(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_62[0x6];                                       // 0x0062(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableObjectEnemy) == 0x000008, "Wrong alignment on FEndDataTableObjectEnemy");
static_assert(sizeof(FEndDataTableObjectEnemy) == 0x000068, "Wrong size on FEndDataTableObjectEnemy");
static_assert(offsetof(FEndDataTableObjectEnemy, UniqueIndex) == 0x000008, "Member 'FEndDataTableObjectEnemy::UniqueIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectEnemy, Priority) == 0x00000C, "Member 'FEndDataTableObjectEnemy::Priority' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectEnemy, ActorName) == 0x000010, "Member 'FEndDataTableObjectEnemy::ActorName' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectEnemy, BattleSceneID) == 0x000020, "Member 'FEndDataTableObjectEnemy::BattleSceneID' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectEnemy, BattleCharaSpecID) == 0x000028, "Member 'FEndDataTableObjectEnemy::BattleCharaSpecID' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectEnemy, ResponseAreaID) == 0x000030, "Member 'FEndDataTableObjectEnemy::ResponseAreaID' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectEnemy, ResponseAreaPlayerID) == 0x000038, "Member 'FEndDataTableObjectEnemy::ResponseAreaPlayerID' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectEnemy, TweetResponseAreaID) == 0x000040, "Member 'FEndDataTableObjectEnemy::TweetResponseAreaID' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectEnemy, TweetResponseAreaPlayerID) == 0x000048, "Member 'FEndDataTableObjectEnemy::TweetResponseAreaPlayerID' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectEnemy, AttributeList_Array) == 0x000050, "Member 'FEndDataTableObjectEnemy::AttributeList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectEnemy, ForceCreateActor) == 0x000060, "Member 'FEndDataTableObjectEnemy::ForceCreateActor' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectEnemy, NearFarFadeState) == 0x000061, "Member 'FEndDataTableObjectEnemy::NearFarFadeState' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableObjectEnvironmentSet
// 0x0030 (0x0038 - 0x0008)
struct FEndDataTableObjectEnvironmentSet final : public FEndDataTableRowBase
{
public:
	int32                                         Priority;                                          // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PlacementName;                                     // 0x000C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 StartStateChange;                                  // 0x0018(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlannerLevelSetStartStateChange;                   // 0x0028(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableObjectEnvironmentSet) == 0x000008, "Wrong alignment on FEndDataTableObjectEnvironmentSet");
static_assert(sizeof(FEndDataTableObjectEnvironmentSet) == 0x000038, "Wrong size on FEndDataTableObjectEnvironmentSet");
static_assert(offsetof(FEndDataTableObjectEnvironmentSet, Priority) == 0x000008, "Member 'FEndDataTableObjectEnvironmentSet::Priority' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectEnvironmentSet, PlacementName) == 0x00000C, "Member 'FEndDataTableObjectEnvironmentSet::PlacementName' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectEnvironmentSet, StartStateChange) == 0x000018, "Member 'FEndDataTableObjectEnvironmentSet::StartStateChange' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectEnvironmentSet, PlannerLevelSetStartStateChange) == 0x000028, "Member 'FEndDataTableObjectEnvironmentSet::PlannerLevelSetStartStateChange' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableObjectLayout
// 0x0078 (0x0080 - 0x0008)
struct FEndDataTableObjectLayout final : public FEndDataTableRowBase
{
public:
	int32                                         UniqueIndex;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Priority;                                          // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NodeName;                                          // 0x0010(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LevelName;                                         // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OverlapActorGroup;                                 // 0x0028(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ResponseAreaID;                                    // 0x0030(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ResponseAreaPlayerID;                              // 0x0038(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TweetResponseAreaID;                               // 0x0040(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TweetResponseAreaPlayerID;                         // 0x0048(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SituationTriggerID;                                // 0x0050(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BGActorName;                                       // 0x0058(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BGActorSocketName;                                 // 0x0060(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PushButtonActionID;                                // 0x0068(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         AttributeList_Array;                               // 0x0070(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableObjectLayout) == 0x000008, "Wrong alignment on FEndDataTableObjectLayout");
static_assert(sizeof(FEndDataTableObjectLayout) == 0x000080, "Wrong size on FEndDataTableObjectLayout");
static_assert(offsetof(FEndDataTableObjectLayout, UniqueIndex) == 0x000008, "Member 'FEndDataTableObjectLayout::UniqueIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectLayout, Priority) == 0x00000C, "Member 'FEndDataTableObjectLayout::Priority' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectLayout, NodeName) == 0x000010, "Member 'FEndDataTableObjectLayout::NodeName' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectLayout, LevelName) == 0x000020, "Member 'FEndDataTableObjectLayout::LevelName' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectLayout, OverlapActorGroup) == 0x000028, "Member 'FEndDataTableObjectLayout::OverlapActorGroup' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectLayout, ResponseAreaID) == 0x000030, "Member 'FEndDataTableObjectLayout::ResponseAreaID' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectLayout, ResponseAreaPlayerID) == 0x000038, "Member 'FEndDataTableObjectLayout::ResponseAreaPlayerID' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectLayout, TweetResponseAreaID) == 0x000040, "Member 'FEndDataTableObjectLayout::TweetResponseAreaID' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectLayout, TweetResponseAreaPlayerID) == 0x000048, "Member 'FEndDataTableObjectLayout::TweetResponseAreaPlayerID' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectLayout, SituationTriggerID) == 0x000050, "Member 'FEndDataTableObjectLayout::SituationTriggerID' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectLayout, BGActorName) == 0x000058, "Member 'FEndDataTableObjectLayout::BGActorName' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectLayout, BGActorSocketName) == 0x000060, "Member 'FEndDataTableObjectLayout::BGActorSocketName' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectLayout, PushButtonActionID) == 0x000068, "Member 'FEndDataTableObjectLayout::PushButtonActionID' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectLayout, AttributeList_Array) == 0x000070, "Member 'FEndDataTableObjectLayout::AttributeList_Array' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableObjectPlannerLevelSet
// 0x0018 (0x0020 - 0x0008)
struct FEndDataTableObjectPlannerLevelSet final : public FEndDataTableRowBase
{
public:
	int32                                         UniqueIndex;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Priority;                                          // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         AttributeList_Array;                               // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableObjectPlannerLevelSet) == 0x000008, "Wrong alignment on FEndDataTableObjectPlannerLevelSet");
static_assert(sizeof(FEndDataTableObjectPlannerLevelSet) == 0x000020, "Wrong size on FEndDataTableObjectPlannerLevelSet");
static_assert(offsetof(FEndDataTableObjectPlannerLevelSet, UniqueIndex) == 0x000008, "Member 'FEndDataTableObjectPlannerLevelSet::UniqueIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectPlannerLevelSet, Priority) == 0x00000C, "Member 'FEndDataTableObjectPlannerLevelSet::Priority' has a wrong offset!");
static_assert(offsetof(FEndDataTableObjectPlannerLevelSet, AttributeList_Array) == 0x000010, "Member 'FEndDataTableObjectPlannerLevelSet::AttributeList_Array' has a wrong offset!");

// ScriptStruct EndGame.EndDataTablePlacement
// 0x0008 (0x0010 - 0x0008)
struct FEndDataTablePlacement final : public FEndDataTableRowBase
{
public:
	int32                                         UniqueIndex;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTablePlacement) == 0x000008, "Wrong alignment on FEndDataTablePlacement");
static_assert(sizeof(FEndDataTablePlacement) == 0x000010, "Wrong size on FEndDataTablePlacement");
static_assert(offsetof(FEndDataTablePlacement, UniqueIndex) == 0x000008, "Member 'FEndDataTablePlacement::UniqueIndex' has a wrong offset!");

// ScriptStruct EndGame.EndDataTablePlannerEvent
// 0x0140 (0x0148 - 0x0008)
struct FEndDataTablePlannerEvent final : public FEndDataTableRowBase
{
public:
	float                                         Time;                                              // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinSubtitleTime;                                   // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeAfterVoice;                                    // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 TextID;                                            // 0x0018(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutputType;                                        // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CanSkip;                                           // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VoiceType;                                         // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CameraType;                                        // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         CameraArgument_Array;                              // 0x0038(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         OverwriteLight;                                    // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Talker;                                            // 0x0050(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TalkerEmotionType;                                 // 0x0060(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TalkerCmd;                                         // 0x0064(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TalkerTargetPoint;                                 // 0x0068(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TalkerHide;                                        // 0x0078(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         ListenerList_Array;                                // 0x0080(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 ListenerEmotionTypeList_Array;                     // 0x0090(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 ListenerCmdList_Array;                             // 0x00A0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         ListenerTargetPointList_Array;                     // 0x00B0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 ListenerHideList_Array;                            // 0x00C0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 CommandTypeList_Array;                             // 0x00D0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 WaitTimeList_Array;                                // 0x00E0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         CommandArgumentList_Array;                         // 0x00F0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 CommandArgumentInteger_Array;                      // 0x0100(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         DisallowTalkIDOverwrite;                           // 0x0110(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_114[0x4];                                      // 0x0114(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 TalkerOverwriteID;                                 // 0x0118(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SoundID;                                           // 0x0128(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NextPE;                                            // 0x0138(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTablePlannerEvent) == 0x000008, "Wrong alignment on FEndDataTablePlannerEvent");
static_assert(sizeof(FEndDataTablePlannerEvent) == 0x000148, "Wrong size on FEndDataTablePlannerEvent");
static_assert(offsetof(FEndDataTablePlannerEvent, Time) == 0x000008, "Member 'FEndDataTablePlannerEvent::Time' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlannerEvent, MinSubtitleTime) == 0x00000C, "Member 'FEndDataTablePlannerEvent::MinSubtitleTime' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlannerEvent, TimeAfterVoice) == 0x000010, "Member 'FEndDataTablePlannerEvent::TimeAfterVoice' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlannerEvent, TextID) == 0x000018, "Member 'FEndDataTablePlannerEvent::TextID' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlannerEvent, OutputType) == 0x000028, "Member 'FEndDataTablePlannerEvent::OutputType' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlannerEvent, CanSkip) == 0x00002C, "Member 'FEndDataTablePlannerEvent::CanSkip' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlannerEvent, VoiceType) == 0x000030, "Member 'FEndDataTablePlannerEvent::VoiceType' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlannerEvent, CameraType) == 0x000034, "Member 'FEndDataTablePlannerEvent::CameraType' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlannerEvent, CameraArgument_Array) == 0x000038, "Member 'FEndDataTablePlannerEvent::CameraArgument_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlannerEvent, OverwriteLight) == 0x000048, "Member 'FEndDataTablePlannerEvent::OverwriteLight' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlannerEvent, Talker) == 0x000050, "Member 'FEndDataTablePlannerEvent::Talker' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlannerEvent, TalkerEmotionType) == 0x000060, "Member 'FEndDataTablePlannerEvent::TalkerEmotionType' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlannerEvent, TalkerCmd) == 0x000064, "Member 'FEndDataTablePlannerEvent::TalkerCmd' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlannerEvent, TalkerTargetPoint) == 0x000068, "Member 'FEndDataTablePlannerEvent::TalkerTargetPoint' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlannerEvent, TalkerHide) == 0x000078, "Member 'FEndDataTablePlannerEvent::TalkerHide' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlannerEvent, ListenerList_Array) == 0x000080, "Member 'FEndDataTablePlannerEvent::ListenerList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlannerEvent, ListenerEmotionTypeList_Array) == 0x000090, "Member 'FEndDataTablePlannerEvent::ListenerEmotionTypeList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlannerEvent, ListenerCmdList_Array) == 0x0000A0, "Member 'FEndDataTablePlannerEvent::ListenerCmdList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlannerEvent, ListenerTargetPointList_Array) == 0x0000B0, "Member 'FEndDataTablePlannerEvent::ListenerTargetPointList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlannerEvent, ListenerHideList_Array) == 0x0000C0, "Member 'FEndDataTablePlannerEvent::ListenerHideList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlannerEvent, CommandTypeList_Array) == 0x0000D0, "Member 'FEndDataTablePlannerEvent::CommandTypeList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlannerEvent, WaitTimeList_Array) == 0x0000E0, "Member 'FEndDataTablePlannerEvent::WaitTimeList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlannerEvent, CommandArgumentList_Array) == 0x0000F0, "Member 'FEndDataTablePlannerEvent::CommandArgumentList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlannerEvent, CommandArgumentInteger_Array) == 0x000100, "Member 'FEndDataTablePlannerEvent::CommandArgumentInteger_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlannerEvent, DisallowTalkIDOverwrite) == 0x000110, "Member 'FEndDataTablePlannerEvent::DisallowTalkIDOverwrite' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlannerEvent, TalkerOverwriteID) == 0x000118, "Member 'FEndDataTablePlannerEvent::TalkerOverwriteID' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlannerEvent, SoundID) == 0x000128, "Member 'FEndDataTablePlannerEvent::SoundID' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlannerEvent, NextPE) == 0x000138, "Member 'FEndDataTablePlannerEvent::NextPE' has a wrong offset!");

// ScriptStruct EndGame.EndDataTablePlannerEventMemberExclusion
// 0x0020 (0x0028 - 0x0008)
struct FEndDataTablePlannerEventMemberExclusion final : public FEndDataTableRowBase
{
public:
	TArray<class FName>                           Condition_Array;                                   // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           Member_Array;                                      // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTablePlannerEventMemberExclusion) == 0x000008, "Wrong alignment on FEndDataTablePlannerEventMemberExclusion");
static_assert(sizeof(FEndDataTablePlannerEventMemberExclusion) == 0x000028, "Wrong size on FEndDataTablePlannerEventMemberExclusion");
static_assert(offsetof(FEndDataTablePlannerEventMemberExclusion, Condition_Array) == 0x000008, "Member 'FEndDataTablePlannerEventMemberExclusion::Condition_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlannerEventMemberExclusion, Member_Array) == 0x000018, "Member 'FEndDataTablePlannerEventMemberExclusion::Member_Array' has a wrong offset!");

// ScriptStruct EndGame.EndDataTablePlannerEventRequirePacks
// 0x0010 (0x0018 - 0x0008)
struct FEndDataTablePlannerEventRequirePacks final : public FEndDataTableRowBase
{
public:
	TArray<class FName>                           PackName_Array;                                    // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTablePlannerEventRequirePacks) == 0x000008, "Wrong alignment on FEndDataTablePlannerEventRequirePacks");
static_assert(sizeof(FEndDataTablePlannerEventRequirePacks) == 0x000018, "Wrong size on FEndDataTablePlannerEventRequirePacks");
static_assert(offsetof(FEndDataTablePlannerEventRequirePacks, PackName_Array) == 0x000008, "Member 'FEndDataTablePlannerEventRequirePacks::PackName_Array' has a wrong offset!");

// ScriptStruct EndGame.EndDataTablePlannerLevelSet
// 0x0018 (0x0020 - 0x0008)
struct FEndDataTablePlannerLevelSet final : public FEndDataTableRowBase
{
public:
	uint8                                         NextLocationBackgroundLoad;                        // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           LevelList_Array;                                   // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTablePlannerLevelSet) == 0x000008, "Wrong alignment on FEndDataTablePlannerLevelSet");
static_assert(sizeof(FEndDataTablePlannerLevelSet) == 0x000020, "Wrong size on FEndDataTablePlannerLevelSet");
static_assert(offsetof(FEndDataTablePlannerLevelSet, NextLocationBackgroundLoad) == 0x000008, "Member 'FEndDataTablePlannerLevelSet::NextLocationBackgroundLoad' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlannerLevelSet, LevelList_Array) == 0x000010, "Member 'FEndDataTablePlannerLevelSet::LevelList_Array' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableTalkInsertSetting
// 0x0018 (0x0020 - 0x0008)
struct FEndDataTableTalkInsertSetting final : public FEndDataTableRowBase
{
public:
	int32                                         VoiceType;                                         // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InsertType;                                        // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           TargetLabel_Array;                                 // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableTalkInsertSetting) == 0x000008, "Wrong alignment on FEndDataTableTalkInsertSetting");
static_assert(sizeof(FEndDataTableTalkInsertSetting) == 0x000020, "Wrong size on FEndDataTableTalkInsertSetting");
static_assert(offsetof(FEndDataTableTalkInsertSetting, VoiceType) == 0x000008, "Member 'FEndDataTableTalkInsertSetting::VoiceType' has a wrong offset!");
static_assert(offsetof(FEndDataTableTalkInsertSetting, InsertType) == 0x00000C, "Member 'FEndDataTableTalkInsertSetting::InsertType' has a wrong offset!");
static_assert(offsetof(FEndDataTableTalkInsertSetting, TargetLabel_Array) == 0x000010, "Member 'FEndDataTableTalkInsertSetting::TargetLabel_Array' has a wrong offset!");

// ScriptStruct EndGame.EndDataTablePlayerEstimateParameter
// 0x0010 (0x0018 - 0x0008)
struct FEndDataTablePlayerEstimateParameter final : public FEndDataTableRowBase
{
public:
	int32                                         PhysicsAttack;                                     // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MagicAttack;                                       // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PhysicsDefense;                                    // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MagicDefense;                                      // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTablePlayerEstimateParameter) == 0x000008, "Wrong alignment on FEndDataTablePlayerEstimateParameter");
static_assert(sizeof(FEndDataTablePlayerEstimateParameter) == 0x000018, "Wrong size on FEndDataTablePlayerEstimateParameter");
static_assert(offsetof(FEndDataTablePlayerEstimateParameter, PhysicsAttack) == 0x000008, "Member 'FEndDataTablePlayerEstimateParameter::PhysicsAttack' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlayerEstimateParameter, MagicAttack) == 0x00000C, "Member 'FEndDataTablePlayerEstimateParameter::MagicAttack' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlayerEstimateParameter, PhysicsDefense) == 0x000010, "Member 'FEndDataTablePlayerEstimateParameter::PhysicsDefense' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlayerEstimateParameter, MagicDefense) == 0x000014, "Member 'FEndDataTablePlayerEstimateParameter::MagicDefense' has a wrong offset!");

// ScriptStruct EndGame.EndJointEulerRotationLimit
// 0x0018 (0x0018 - 0x0000)
struct FEndJointEulerRotationLimit final
{
public:
	struct FVector                                Min;                                               // 0x0000(0x000C)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Max;                                               // 0x000C(0x000C)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndJointEulerRotationLimit) == 0x000004, "Wrong alignment on FEndJointEulerRotationLimit");
static_assert(sizeof(FEndJointEulerRotationLimit) == 0x000018, "Wrong size on FEndJointEulerRotationLimit");
static_assert(offsetof(FEndJointEulerRotationLimit, Min) == 0x000000, "Member 'FEndJointEulerRotationLimit::Min' has a wrong offset!");
static_assert(offsetof(FEndJointEulerRotationLimit, Max) == 0x00000C, "Member 'FEndJointEulerRotationLimit::Max' has a wrong offset!");

// ScriptStruct EndGame.EndDataTablePlayerTable
// 0x00B0 (0x00B8 - 0x0008)
struct FEndDataTablePlayerTable final : public FEndDataTableRowBase
{
public:
	uint8                                         PlayerType;                                        // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 TextID;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActorName;                                         // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayerParameterStringFormat;                       // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 WeaponUpgradeTreeLevelFormat;                      // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RegularMemberJoinFlag;                             // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EquipListAddFlag;                                  // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ShowWeaponAggressive;                              // 0x0058(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         IgnoreBattleReward;                                // 0x0059(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5A[0x2];                                       // 0x005A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   TargetSuppLocID;                                   // 0x005C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ToadCharaSpec;                                     // 0x0064(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ToadActorName;                                     // 0x006C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           EventStoryFlag_Array;                              // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           EventCharaSpec_Array;                              // 0x0088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           SeeChangeCloth_Array;                              // 0x0098(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           PlayerCharaSpec_Array;                             // 0x00A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTablePlayerTable) == 0x000008, "Wrong alignment on FEndDataTablePlayerTable");
static_assert(sizeof(FEndDataTablePlayerTable) == 0x0000B8, "Wrong size on FEndDataTablePlayerTable");
static_assert(offsetof(FEndDataTablePlayerTable, PlayerType) == 0x000008, "Member 'FEndDataTablePlayerTable::PlayerType' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlayerTable, TextID) == 0x000010, "Member 'FEndDataTablePlayerTable::TextID' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlayerTable, ActorName) == 0x000020, "Member 'FEndDataTablePlayerTable::ActorName' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlayerTable, PlayerParameterStringFormat) == 0x000028, "Member 'FEndDataTablePlayerTable::PlayerParameterStringFormat' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlayerTable, WeaponUpgradeTreeLevelFormat) == 0x000038, "Member 'FEndDataTablePlayerTable::WeaponUpgradeTreeLevelFormat' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlayerTable, RegularMemberJoinFlag) == 0x000048, "Member 'FEndDataTablePlayerTable::RegularMemberJoinFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlayerTable, EquipListAddFlag) == 0x000050, "Member 'FEndDataTablePlayerTable::EquipListAddFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlayerTable, ShowWeaponAggressive) == 0x000058, "Member 'FEndDataTablePlayerTable::ShowWeaponAggressive' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlayerTable, IgnoreBattleReward) == 0x000059, "Member 'FEndDataTablePlayerTable::IgnoreBattleReward' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlayerTable, TargetSuppLocID) == 0x00005C, "Member 'FEndDataTablePlayerTable::TargetSuppLocID' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlayerTable, ToadCharaSpec) == 0x000064, "Member 'FEndDataTablePlayerTable::ToadCharaSpec' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlayerTable, ToadActorName) == 0x00006C, "Member 'FEndDataTablePlayerTable::ToadActorName' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlayerTable, EventStoryFlag_Array) == 0x000078, "Member 'FEndDataTablePlayerTable::EventStoryFlag_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlayerTable, EventCharaSpec_Array) == 0x000088, "Member 'FEndDataTablePlayerTable::EventCharaSpec_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlayerTable, SeeChangeCloth_Array) == 0x000098, "Member 'FEndDataTablePlayerTable::SeeChangeCloth_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTablePlayerTable, PlayerCharaSpec_Array) == 0x0000A8, "Member 'FEndDataTablePlayerTable::PlayerCharaSpec_Array' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableResidentParameter
// 0x0020 (0x0028 - 0x0008)
struct FEndDataTableResidentParameter final : public FEndDataTableRowBase
{
public:
	int32                                         ParamInt;                                          // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ParamFloat;                                        // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ParamString;                                       // 0x0010(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParamName;                                         // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableResidentParameter) == 0x000008, "Wrong alignment on FEndDataTableResidentParameter");
static_assert(sizeof(FEndDataTableResidentParameter) == 0x000028, "Wrong size on FEndDataTableResidentParameter");
static_assert(offsetof(FEndDataTableResidentParameter, ParamInt) == 0x000008, "Member 'FEndDataTableResidentParameter::ParamInt' has a wrong offset!");
static_assert(offsetof(FEndDataTableResidentParameter, ParamFloat) == 0x00000C, "Member 'FEndDataTableResidentParameter::ParamFloat' has a wrong offset!");
static_assert(offsetof(FEndDataTableResidentParameter, ParamString) == 0x000010, "Member 'FEndDataTableResidentParameter::ParamString' has a wrong offset!");
static_assert(offsetof(FEndDataTableResidentParameter, ParamName) == 0x000020, "Member 'FEndDataTableResidentParameter::ParamName' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableResidentWork
// 0x0010 (0x0018 - 0x0008)
struct FEndDataTableResidentWork final : public FEndDataTableRowBase
{
public:
	int32                                         UniqueIndex;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ChapterID;                                         // 0x000C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableResidentWork) == 0x000008, "Wrong alignment on FEndDataTableResidentWork");
static_assert(sizeof(FEndDataTableResidentWork) == 0x000018, "Wrong size on FEndDataTableResidentWork");
static_assert(offsetof(FEndDataTableResidentWork, UniqueIndex) == 0x000008, "Member 'FEndDataTableResidentWork::UniqueIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTableResidentWork, ChapterID) == 0x00000C, "Member 'FEndDataTableResidentWork::ChapterID' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableResponseArea
// 0x0038 (0x0040 - 0x0008)
struct FEndDataTableResponseArea final : public FEndDataTableRowBase
{
public:
	float                                         ReactionRangeSquare;                               // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SugessionRange;                                    // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SugessionRangeSquare;                              // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReactionAngle;                                     // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SugessionAngle;                                    // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         NeedRaycast;                                       // 0x001C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         NeedScreenSpace;                                   // 0x001D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         NeedNaviCheck;                                     // 0x001E(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F[0x1];                                       // 0x001F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReactionScreenRatioX;                              // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReactionScreenRatioY;                              // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SugessionScreenRatioX;                             // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SugessionScreenRatioY;                             // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ExtendedResponseAreaID;                            // 0x0030(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         NeedZAngleCheck;                                   // 0x0038(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ReactionInEllipse;                                 // 0x0039(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableResponseArea) == 0x000008, "Wrong alignment on FEndDataTableResponseArea");
static_assert(sizeof(FEndDataTableResponseArea) == 0x000040, "Wrong size on FEndDataTableResponseArea");
static_assert(offsetof(FEndDataTableResponseArea, ReactionRangeSquare) == 0x000008, "Member 'FEndDataTableResponseArea::ReactionRangeSquare' has a wrong offset!");
static_assert(offsetof(FEndDataTableResponseArea, SugessionRange) == 0x00000C, "Member 'FEndDataTableResponseArea::SugessionRange' has a wrong offset!");
static_assert(offsetof(FEndDataTableResponseArea, SugessionRangeSquare) == 0x000010, "Member 'FEndDataTableResponseArea::SugessionRangeSquare' has a wrong offset!");
static_assert(offsetof(FEndDataTableResponseArea, ReactionAngle) == 0x000014, "Member 'FEndDataTableResponseArea::ReactionAngle' has a wrong offset!");
static_assert(offsetof(FEndDataTableResponseArea, SugessionAngle) == 0x000018, "Member 'FEndDataTableResponseArea::SugessionAngle' has a wrong offset!");
static_assert(offsetof(FEndDataTableResponseArea, NeedRaycast) == 0x00001C, "Member 'FEndDataTableResponseArea::NeedRaycast' has a wrong offset!");
static_assert(offsetof(FEndDataTableResponseArea, NeedScreenSpace) == 0x00001D, "Member 'FEndDataTableResponseArea::NeedScreenSpace' has a wrong offset!");
static_assert(offsetof(FEndDataTableResponseArea, NeedNaviCheck) == 0x00001E, "Member 'FEndDataTableResponseArea::NeedNaviCheck' has a wrong offset!");
static_assert(offsetof(FEndDataTableResponseArea, ReactionScreenRatioX) == 0x000020, "Member 'FEndDataTableResponseArea::ReactionScreenRatioX' has a wrong offset!");
static_assert(offsetof(FEndDataTableResponseArea, ReactionScreenRatioY) == 0x000024, "Member 'FEndDataTableResponseArea::ReactionScreenRatioY' has a wrong offset!");
static_assert(offsetof(FEndDataTableResponseArea, SugessionScreenRatioX) == 0x000028, "Member 'FEndDataTableResponseArea::SugessionScreenRatioX' has a wrong offset!");
static_assert(offsetof(FEndDataTableResponseArea, SugessionScreenRatioY) == 0x00002C, "Member 'FEndDataTableResponseArea::SugessionScreenRatioY' has a wrong offset!");
static_assert(offsetof(FEndDataTableResponseArea, ExtendedResponseAreaID) == 0x000030, "Member 'FEndDataTableResponseArea::ExtendedResponseAreaID' has a wrong offset!");
static_assert(offsetof(FEndDataTableResponseArea, NeedZAngleCheck) == 0x000038, "Member 'FEndDataTableResponseArea::NeedZAngleCheck' has a wrong offset!");
static_assert(offsetof(FEndDataTableResponseArea, ReactionInEllipse) == 0x000039, "Member 'FEndDataTableResponseArea::ReactionInEllipse' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableResponseAreaInOut
// 0x0010 (0x0018 - 0x0008)
struct FEndDataTableResponseAreaInOut final : public FEndDataTableRowBase
{
public:
	class FName                                   Out2In;                                            // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   In2Out;                                            // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableResponseAreaInOut) == 0x000008, "Wrong alignment on FEndDataTableResponseAreaInOut");
static_assert(sizeof(FEndDataTableResponseAreaInOut) == 0x000018, "Wrong size on FEndDataTableResponseAreaInOut");
static_assert(offsetof(FEndDataTableResponseAreaInOut, Out2In) == 0x000008, "Member 'FEndDataTableResponseAreaInOut::Out2In' has a wrong offset!");
static_assert(offsetof(FEndDataTableResponseAreaInOut, In2Out) == 0x000010, "Member 'FEndDataTableResponseAreaInOut::In2Out' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableRewardRandom
// 0x0030 (0x0038 - 0x0008)
struct FEndDataTableRewardRandom final : public FEndDataTableRowBase
{
public:
	class FName                                   AbsoluteGetFlagID;                                 // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AbsoluteRewardID;                                  // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 RewardGetPercent_Array;                            // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           RewardID_Array;                                    // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableRewardRandom) == 0x000008, "Wrong alignment on FEndDataTableRewardRandom");
static_assert(sizeof(FEndDataTableRewardRandom) == 0x000038, "Wrong size on FEndDataTableRewardRandom");
static_assert(offsetof(FEndDataTableRewardRandom, AbsoluteGetFlagID) == 0x000008, "Member 'FEndDataTableRewardRandom::AbsoluteGetFlagID' has a wrong offset!");
static_assert(offsetof(FEndDataTableRewardRandom, AbsoluteRewardID) == 0x000010, "Member 'FEndDataTableRewardRandom::AbsoluteRewardID' has a wrong offset!");
static_assert(offsetof(FEndDataTableRewardRandom, RewardGetPercent_Array) == 0x000018, "Member 'FEndDataTableRewardRandom::RewardGetPercent_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableRewardRandom, RewardID_Array) == 0x000028, "Member 'FEndDataTableRewardRandom::RewardID_Array' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableShakeCharaProperty
// 0x0010 (0x0018 - 0x0008)
struct FEndDataTableShakeCharaProperty final : public FEndDataTableRowBase
{
public:
	class FName                                   CameraShakeDataID;                                 // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ForceFeedbackFileName;                             // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableShakeCharaProperty) == 0x000008, "Wrong alignment on FEndDataTableShakeCharaProperty");
static_assert(sizeof(FEndDataTableShakeCharaProperty) == 0x000018, "Wrong size on FEndDataTableShakeCharaProperty");
static_assert(offsetof(FEndDataTableShakeCharaProperty, CameraShakeDataID) == 0x000008, "Member 'FEndDataTableShakeCharaProperty::CameraShakeDataID' has a wrong offset!");
static_assert(offsetof(FEndDataTableShakeCharaProperty, ForceFeedbackFileName) == 0x000010, "Member 'FEndDataTableShakeCharaProperty::ForceFeedbackFileName' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableShopList
// 0x0040 (0x0048 - 0x0008)
struct FEndDataTableShopList final : public FEndDataTableRowBase
{
public:
	uint8                                         HiddenSellFlag;                                    // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         HiddenCategorySelectFlag;                          // 0x0009(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ShopName;                                          // 0x0010(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   UseItemID;                                         // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           ItemID_Array;                                      // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           StateTrigger_Array;                                // 0x0038(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableShopList) == 0x000008, "Wrong alignment on FEndDataTableShopList");
static_assert(sizeof(FEndDataTableShopList) == 0x000048, "Wrong size on FEndDataTableShopList");
static_assert(offsetof(FEndDataTableShopList, HiddenSellFlag) == 0x000008, "Member 'FEndDataTableShopList::HiddenSellFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTableShopList, HiddenCategorySelectFlag) == 0x000009, "Member 'FEndDataTableShopList::HiddenCategorySelectFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTableShopList, ShopName) == 0x000010, "Member 'FEndDataTableShopList::ShopName' has a wrong offset!");
static_assert(offsetof(FEndDataTableShopList, UseItemID) == 0x000020, "Member 'FEndDataTableShopList::UseItemID' has a wrong offset!");
static_assert(offsetof(FEndDataTableShopList, ItemID_Array) == 0x000028, "Member 'FEndDataTableShopList::ItemID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableShopList, StateTrigger_Array) == 0x000038, "Member 'FEndDataTableShopList::StateTrigger_Array' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableStateCondition
// 0x0090 (0x0098 - 0x0008)
struct FEndDataTableStateCondition final : public FEndDataTableRowBase
{
public:
	TArray<class FString>                         StartBracket_Array;                                // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<uint8>                                 TargetType_Array;                                  // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           TargetStringArgument_Array;                        // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         ComparisonOperator_Array;                          // 0x0038(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<uint8>                                 RightType_Array;                                   // 0x0048(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         ComparisonStringValue_Array;                       // 0x0058(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 ComparisonValue_Array;                             // 0x0068(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         EndBracket_Array;                                  // 0x0078(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         LogicalOperator_Array;                             // 0x0088(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableStateCondition) == 0x000008, "Wrong alignment on FEndDataTableStateCondition");
static_assert(sizeof(FEndDataTableStateCondition) == 0x000098, "Wrong size on FEndDataTableStateCondition");
static_assert(offsetof(FEndDataTableStateCondition, StartBracket_Array) == 0x000008, "Member 'FEndDataTableStateCondition::StartBracket_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableStateCondition, TargetType_Array) == 0x000018, "Member 'FEndDataTableStateCondition::TargetType_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableStateCondition, TargetStringArgument_Array) == 0x000028, "Member 'FEndDataTableStateCondition::TargetStringArgument_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableStateCondition, ComparisonOperator_Array) == 0x000038, "Member 'FEndDataTableStateCondition::ComparisonOperator_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableStateCondition, RightType_Array) == 0x000048, "Member 'FEndDataTableStateCondition::RightType_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableStateCondition, ComparisonStringValue_Array) == 0x000058, "Member 'FEndDataTableStateCondition::ComparisonStringValue_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableStateCondition, ComparisonValue_Array) == 0x000068, "Member 'FEndDataTableStateCondition::ComparisonValue_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableStateCondition, EndBracket_Array) == 0x000078, "Member 'FEndDataTableStateCondition::EndBracket_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableStateCondition, LogicalOperator_Array) == 0x000088, "Member 'FEndDataTableStateCondition::LogicalOperator_Array' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableStory
// 0x0190 (0x0198 - 0x0008)
struct FEndDataTableStory final : public FEndDataTableRowBase
{
public:
	int32                                         UniqueID;                                          // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StoryIndex;                                        // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GroupIndex;                                        // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         StoryType;                                         // 0x0014(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ParentID;                                          // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BranchStoryID;                                     // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         CompleteStatus;                                    // 0x0028(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   StoryProgressFlagID;                               // 0x002C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StoryOpenFlagID;                                   // 0x0034(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   QuestOrderEnable;                                  // 0x003C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FractionCount;                                     // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TitleUnkownFlag;                                   // 0x0048(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ViewIndex;                                         // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ItemName;                                          // 0x0058(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0068(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ImageName;                                         // 0x0078(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         AdditionalGroupViewOption;                         // 0x0088(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           ViewLocationID_Array;                              // 0x0090(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<uint8>                                 IconOperationStatus_Array;                         // 0x00A0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 CircleRadius_Array;                                // 0x00B0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<uint8>                                 ViewTargetDistance_Array;                          // 0x00C0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 ViewTargetDistanceParam_Array;                     // 0x00D0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 IconVisibleStartDistance_Array;                    // 0x00E0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<uint8>                                 IconKind_Array;                                    // 0x00F0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<uint8>                                 IconTargetType_Array;                              // 0x0100(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           TargetObjectID_Array;                              // 0x0110(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           IconInvisibleFlag_Array;                           // 0x0120(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 IconLineLength_Array;                              // 0x0130(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           IconSocketName_Array;                              // 0x0140(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           QuestClearStep_Array;                              // 0x0150(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   InvNaviIcon_ViewFlag;                              // 0x0160(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InvNaviIcon_ViewLocationID;                        // 0x0168(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         InvNaviIcon_ViewFlagIconOperationStatus;           // 0x0170(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_171[0x3];                                      // 0x0171(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InvNaviIcon_IconVisibleStartDistance;              // 0x0174(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         InvNaviIcon_IconKind;                              // 0x0178(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         InvNaviIcon_IconTargetType;                        // 0x0179(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17A[0x2];                                      // 0x017A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   InvNaviIcon_TargetObjectID;                        // 0x017C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InvNaviIcon_IconLineLength;                        // 0x0184(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ChapterID;                                         // 0x0188(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         FractionView;                                      // 0x0190(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ScenarioType;                                      // 0x0191(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_192[0x6];                                      // 0x0192(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableStory) == 0x000008, "Wrong alignment on FEndDataTableStory");
static_assert(sizeof(FEndDataTableStory) == 0x000198, "Wrong size on FEndDataTableStory");
static_assert(offsetof(FEndDataTableStory, UniqueID) == 0x000008, "Member 'FEndDataTableStory::UniqueID' has a wrong offset!");
static_assert(offsetof(FEndDataTableStory, StoryIndex) == 0x00000C, "Member 'FEndDataTableStory::StoryIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTableStory, GroupIndex) == 0x000010, "Member 'FEndDataTableStory::GroupIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTableStory, StoryType) == 0x000014, "Member 'FEndDataTableStory::StoryType' has a wrong offset!");
static_assert(offsetof(FEndDataTableStory, ParentID) == 0x000018, "Member 'FEndDataTableStory::ParentID' has a wrong offset!");
static_assert(offsetof(FEndDataTableStory, BranchStoryID) == 0x000020, "Member 'FEndDataTableStory::BranchStoryID' has a wrong offset!");
static_assert(offsetof(FEndDataTableStory, CompleteStatus) == 0x000028, "Member 'FEndDataTableStory::CompleteStatus' has a wrong offset!");
static_assert(offsetof(FEndDataTableStory, StoryProgressFlagID) == 0x00002C, "Member 'FEndDataTableStory::StoryProgressFlagID' has a wrong offset!");
static_assert(offsetof(FEndDataTableStory, StoryOpenFlagID) == 0x000034, "Member 'FEndDataTableStory::StoryOpenFlagID' has a wrong offset!");
static_assert(offsetof(FEndDataTableStory, QuestOrderEnable) == 0x00003C, "Member 'FEndDataTableStory::QuestOrderEnable' has a wrong offset!");
static_assert(offsetof(FEndDataTableStory, FractionCount) == 0x000044, "Member 'FEndDataTableStory::FractionCount' has a wrong offset!");
static_assert(offsetof(FEndDataTableStory, TitleUnkownFlag) == 0x000048, "Member 'FEndDataTableStory::TitleUnkownFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTableStory, ViewIndex) == 0x000050, "Member 'FEndDataTableStory::ViewIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTableStory, ItemName) == 0x000058, "Member 'FEndDataTableStory::ItemName' has a wrong offset!");
static_assert(offsetof(FEndDataTableStory, Description) == 0x000068, "Member 'FEndDataTableStory::Description' has a wrong offset!");
static_assert(offsetof(FEndDataTableStory, ImageName) == 0x000078, "Member 'FEndDataTableStory::ImageName' has a wrong offset!");
static_assert(offsetof(FEndDataTableStory, AdditionalGroupViewOption) == 0x000088, "Member 'FEndDataTableStory::AdditionalGroupViewOption' has a wrong offset!");
static_assert(offsetof(FEndDataTableStory, ViewLocationID_Array) == 0x000090, "Member 'FEndDataTableStory::ViewLocationID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableStory, IconOperationStatus_Array) == 0x0000A0, "Member 'FEndDataTableStory::IconOperationStatus_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableStory, CircleRadius_Array) == 0x0000B0, "Member 'FEndDataTableStory::CircleRadius_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableStory, ViewTargetDistance_Array) == 0x0000C0, "Member 'FEndDataTableStory::ViewTargetDistance_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableStory, ViewTargetDistanceParam_Array) == 0x0000D0, "Member 'FEndDataTableStory::ViewTargetDistanceParam_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableStory, IconVisibleStartDistance_Array) == 0x0000E0, "Member 'FEndDataTableStory::IconVisibleStartDistance_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableStory, IconKind_Array) == 0x0000F0, "Member 'FEndDataTableStory::IconKind_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableStory, IconTargetType_Array) == 0x000100, "Member 'FEndDataTableStory::IconTargetType_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableStory, TargetObjectID_Array) == 0x000110, "Member 'FEndDataTableStory::TargetObjectID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableStory, IconInvisibleFlag_Array) == 0x000120, "Member 'FEndDataTableStory::IconInvisibleFlag_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableStory, IconLineLength_Array) == 0x000130, "Member 'FEndDataTableStory::IconLineLength_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableStory, IconSocketName_Array) == 0x000140, "Member 'FEndDataTableStory::IconSocketName_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableStory, QuestClearStep_Array) == 0x000150, "Member 'FEndDataTableStory::QuestClearStep_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableStory, InvNaviIcon_ViewFlag) == 0x000160, "Member 'FEndDataTableStory::InvNaviIcon_ViewFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTableStory, InvNaviIcon_ViewLocationID) == 0x000168, "Member 'FEndDataTableStory::InvNaviIcon_ViewLocationID' has a wrong offset!");
static_assert(offsetof(FEndDataTableStory, InvNaviIcon_ViewFlagIconOperationStatus) == 0x000170, "Member 'FEndDataTableStory::InvNaviIcon_ViewFlagIconOperationStatus' has a wrong offset!");
static_assert(offsetof(FEndDataTableStory, InvNaviIcon_IconVisibleStartDistance) == 0x000174, "Member 'FEndDataTableStory::InvNaviIcon_IconVisibleStartDistance' has a wrong offset!");
static_assert(offsetof(FEndDataTableStory, InvNaviIcon_IconKind) == 0x000178, "Member 'FEndDataTableStory::InvNaviIcon_IconKind' has a wrong offset!");
static_assert(offsetof(FEndDataTableStory, InvNaviIcon_IconTargetType) == 0x000179, "Member 'FEndDataTableStory::InvNaviIcon_IconTargetType' has a wrong offset!");
static_assert(offsetof(FEndDataTableStory, InvNaviIcon_TargetObjectID) == 0x00017C, "Member 'FEndDataTableStory::InvNaviIcon_TargetObjectID' has a wrong offset!");
static_assert(offsetof(FEndDataTableStory, InvNaviIcon_IconLineLength) == 0x000184, "Member 'FEndDataTableStory::InvNaviIcon_IconLineLength' has a wrong offset!");
static_assert(offsetof(FEndDataTableStory, ChapterID) == 0x000188, "Member 'FEndDataTableStory::ChapterID' has a wrong offset!");
static_assert(offsetof(FEndDataTableStory, FractionView) == 0x000190, "Member 'FEndDataTableStory::FractionView' has a wrong offset!");
static_assert(offsetof(FEndDataTableStory, ScenarioType) == 0x000191, "Member 'FEndDataTableStory::ScenarioType' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableStoryJump
// 0x0020 (0x0028 - 0x0008)
struct FEndDataTableStoryJump final : public FEndDataTableRowBase
{
public:
	class FName                                   StoryResidentTableID;                              // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LocationID;                                        // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ChapterID;                                         // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SaveIndex;                                         // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableStoryJump) == 0x000008, "Wrong alignment on FEndDataTableStoryJump");
static_assert(sizeof(FEndDataTableStoryJump) == 0x000028, "Wrong size on FEndDataTableStoryJump");
static_assert(offsetof(FEndDataTableStoryJump, StoryResidentTableID) == 0x000008, "Member 'FEndDataTableStoryJump::StoryResidentTableID' has a wrong offset!");
static_assert(offsetof(FEndDataTableStoryJump, LocationID) == 0x000010, "Member 'FEndDataTableStoryJump::LocationID' has a wrong offset!");
static_assert(offsetof(FEndDataTableStoryJump, ChapterID) == 0x000018, "Member 'FEndDataTableStoryJump::ChapterID' has a wrong offset!");
static_assert(offsetof(FEndDataTableStoryJump, SaveIndex) == 0x000020, "Member 'FEndDataTableStoryJump::SaveIndex' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableUniqueActionProperty
// 0x0080 (0x0088 - 0x0008)
struct FEndDataTableUniqueActionProperty final : public FEndDataTableRowBase
{
public:
	class FString                                 DamageSequenceID;                                  // 0x0008(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 HardModeDamageSequenceID;                          // 0x0018(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VfxName;                                           // 0x0028(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VfxPropertyName00;                                 // 0x0038(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VfxPropertyName01;                                 // 0x0048(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VfxPropertyName02;                                 // 0x0058(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VfxPropertyName03;                                 // 0x0068(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VfxPropertyName04;                                 // 0x0078(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableUniqueActionProperty) == 0x000008, "Wrong alignment on FEndDataTableUniqueActionProperty");
static_assert(sizeof(FEndDataTableUniqueActionProperty) == 0x000088, "Wrong size on FEndDataTableUniqueActionProperty");
static_assert(offsetof(FEndDataTableUniqueActionProperty, DamageSequenceID) == 0x000008, "Member 'FEndDataTableUniqueActionProperty::DamageSequenceID' has a wrong offset!");
static_assert(offsetof(FEndDataTableUniqueActionProperty, HardModeDamageSequenceID) == 0x000018, "Member 'FEndDataTableUniqueActionProperty::HardModeDamageSequenceID' has a wrong offset!");
static_assert(offsetof(FEndDataTableUniqueActionProperty, VfxName) == 0x000028, "Member 'FEndDataTableUniqueActionProperty::VfxName' has a wrong offset!");
static_assert(offsetof(FEndDataTableUniqueActionProperty, VfxPropertyName00) == 0x000038, "Member 'FEndDataTableUniqueActionProperty::VfxPropertyName00' has a wrong offset!");
static_assert(offsetof(FEndDataTableUniqueActionProperty, VfxPropertyName01) == 0x000048, "Member 'FEndDataTableUniqueActionProperty::VfxPropertyName01' has a wrong offset!");
static_assert(offsetof(FEndDataTableUniqueActionProperty, VfxPropertyName02) == 0x000058, "Member 'FEndDataTableUniqueActionProperty::VfxPropertyName02' has a wrong offset!");
static_assert(offsetof(FEndDataTableUniqueActionProperty, VfxPropertyName03) == 0x000068, "Member 'FEndDataTableUniqueActionProperty::VfxPropertyName03' has a wrong offset!");
static_assert(offsetof(FEndDataTableUniqueActionProperty, VfxPropertyName04) == 0x000078, "Member 'FEndDataTableUniqueActionProperty::VfxPropertyName04' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableSubStoryCondition
// 0x0038 (0x0040 - 0x0008)
struct FEndDataTableSubStoryCondition final : public FEndDataTableRowBase
{
public:
	class FName                                   TargetCharacterName;                               // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 Type_Array;                                        // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           RefTableID_Array;                                  // 0x0020(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 Value_Array;                                       // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableSubStoryCondition) == 0x000008, "Wrong alignment on FEndDataTableSubStoryCondition");
static_assert(sizeof(FEndDataTableSubStoryCondition) == 0x000040, "Wrong size on FEndDataTableSubStoryCondition");
static_assert(offsetof(FEndDataTableSubStoryCondition, TargetCharacterName) == 0x000008, "Member 'FEndDataTableSubStoryCondition::TargetCharacterName' has a wrong offset!");
static_assert(offsetof(FEndDataTableSubStoryCondition, Type_Array) == 0x000010, "Member 'FEndDataTableSubStoryCondition::Type_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableSubStoryCondition, RefTableID_Array) == 0x000020, "Member 'FEndDataTableSubStoryCondition::RefTableID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableSubStoryCondition, Value_Array) == 0x000030, "Member 'FEndDataTableSubStoryCondition::Value_Array' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableTalkCanPlayCharacterStatus
// 0x0018 (0x0020 - 0x0008)
struct FEndDataTableTalkCanPlayCharacterStatus final : public FEndDataTableRowBase
{
public:
	int32                                         StatusChangeType;                                  // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IsPlayVoice;                                       // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IsPlayTalk;                                        // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IsInterruption;                                    // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StatusName;                                        // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableTalkCanPlayCharacterStatus) == 0x000008, "Wrong alignment on FEndDataTableTalkCanPlayCharacterStatus");
static_assert(sizeof(FEndDataTableTalkCanPlayCharacterStatus) == 0x000020, "Wrong size on FEndDataTableTalkCanPlayCharacterStatus");
static_assert(offsetof(FEndDataTableTalkCanPlayCharacterStatus, StatusChangeType) == 0x000008, "Member 'FEndDataTableTalkCanPlayCharacterStatus::StatusChangeType' has a wrong offset!");
static_assert(offsetof(FEndDataTableTalkCanPlayCharacterStatus, IsPlayVoice) == 0x00000C, "Member 'FEndDataTableTalkCanPlayCharacterStatus::IsPlayVoice' has a wrong offset!");
static_assert(offsetof(FEndDataTableTalkCanPlayCharacterStatus, IsPlayTalk) == 0x000010, "Member 'FEndDataTableTalkCanPlayCharacterStatus::IsPlayTalk' has a wrong offset!");
static_assert(offsetof(FEndDataTableTalkCanPlayCharacterStatus, IsInterruption) == 0x000014, "Member 'FEndDataTableTalkCanPlayCharacterStatus::IsInterruption' has a wrong offset!");
static_assert(offsetof(FEndDataTableTalkCanPlayCharacterStatus, StatusName) == 0x000018, "Member 'FEndDataTableTalkCanPlayCharacterStatus::StatusName' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableTalkChange
// 0x0018 (0x0020 - 0x0008)
struct FEndDataTableTalkChange final : public FEndDataTableRowBase
{
public:
	class FString                                 aa;                                                // 0x0008(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BB;                                                // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableTalkChange) == 0x000008, "Wrong alignment on FEndDataTableTalkChange");
static_assert(sizeof(FEndDataTableTalkChange) == 0x000020, "Wrong size on FEndDataTableTalkChange");
static_assert(offsetof(FEndDataTableTalkChange, aa) == 0x000008, "Member 'FEndDataTableTalkChange::aa' has a wrong offset!");
static_assert(offsetof(FEndDataTableTalkChange, BB) == 0x000018, "Member 'FEndDataTableTalkChange::BB' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableTalkGroup
// 0x0010 (0x0018 - 0x0008)
struct FEndDataTableTalkGroup final : public FEndDataTableRowBase
{
public:
	TArray<class FName>                           TalkStateID_Array;                                 // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableTalkGroup) == 0x000008, "Wrong alignment on FEndDataTableTalkGroup");
static_assert(sizeof(FEndDataTableTalkGroup) == 0x000018, "Wrong size on FEndDataTableTalkGroup");
static_assert(offsetof(FEndDataTableTalkGroup, TalkStateID_Array) == 0x000008, "Member 'FEndDataTableTalkGroup::TalkStateID_Array' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableTalkPlayTrigger
// 0x0008 (0x0010 - 0x0008)
struct FEndDataTableTalkPlayTrigger final : public FEndDataTableRowBase
{
public:
	int32                                         TriggerTarget;                                     // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableTalkPlayTrigger) == 0x000008, "Wrong alignment on FEndDataTableTalkPlayTrigger");
static_assert(sizeof(FEndDataTableTalkPlayTrigger) == 0x000010, "Wrong size on FEndDataTableTalkPlayTrigger");
static_assert(offsetof(FEndDataTableTalkPlayTrigger, TriggerTarget) == 0x000008, "Member 'FEndDataTableTalkPlayTrigger::TriggerTarget' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableTalkSpeaker
// 0x0020 (0x0028 - 0x0008)
struct FEndDataTableTalkSpeaker final : public FEndDataTableRowBase
{
public:
	int32                                         Priority;                                          // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 EnablePhaseList_Array;                             // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   StartTalkChange;                                   // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableTalkSpeaker) == 0x000008, "Wrong alignment on FEndDataTableTalkSpeaker");
static_assert(sizeof(FEndDataTableTalkSpeaker) == 0x000028, "Wrong size on FEndDataTableTalkSpeaker");
static_assert(offsetof(FEndDataTableTalkSpeaker, Priority) == 0x000008, "Member 'FEndDataTableTalkSpeaker::Priority' has a wrong offset!");
static_assert(offsetof(FEndDataTableTalkSpeaker, EnablePhaseList_Array) == 0x000010, "Member 'FEndDataTableTalkSpeaker::EnablePhaseList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableTalkSpeaker, StartTalkChange) == 0x000020, "Member 'FEndDataTableTalkSpeaker::StartTalkChange' has a wrong offset!");

// ScriptStruct EndGame.EndAutoSeComponentAssetTablePerAttribute
// 0x0018 (0x0018 - 0x0000)
struct FEndAutoSeComponentAssetTablePerAttribute final
{
public:
	int32                                         SoundIndexes[0x6];                                 // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndAutoSeComponentAssetTablePerAttribute) == 0x000004, "Wrong alignment on FEndAutoSeComponentAssetTablePerAttribute");
static_assert(sizeof(FEndAutoSeComponentAssetTablePerAttribute) == 0x000018, "Wrong size on FEndAutoSeComponentAssetTablePerAttribute");
static_assert(offsetof(FEndAutoSeComponentAssetTablePerAttribute, SoundIndexes) == 0x000000, "Member 'FEndAutoSeComponentAssetTablePerAttribute::SoundIndexes' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableUniqueActionSearchLight
// 0x00B8 (0x00C0 - 0x0008)
struct FEndDataTableUniqueActionSearchLight final : public FEndDataTableRowBase
{
public:
	float                                         MoveStartAngle;                                    // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveStartAngleByRadian;                            // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OuterConeAngle;                                    // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OuterConeAngleByRadian;                            // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AttenuationRadius;                                 // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VerticalLimitAngle;                                // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HorizontalLimitAngle;                              // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveThreshold;                                     // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MoveCurve;                                         // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AttachActor;                                       // 0x0030(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AttachSocket;                                      // 0x0040(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AttachSpotlightActor;                              // 0x0050(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         StateObject_Array;                                 // 0x0060(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         StateChange_Array;                                 // 0x0070(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         ShowTarget_Array;                                  // 0x0080(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         StartAngle;                                        // 0x0090(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartAngleByRadian;                                // 0x0094(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PitchOverrideObject;                               // 0x0098(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           PitchOverwriteState_Array;                         // 0x00A0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 PitchOverwriteAngle_Array;                         // 0x00B0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableUniqueActionSearchLight) == 0x000008, "Wrong alignment on FEndDataTableUniqueActionSearchLight");
static_assert(sizeof(FEndDataTableUniqueActionSearchLight) == 0x0000C0, "Wrong size on FEndDataTableUniqueActionSearchLight");
static_assert(offsetof(FEndDataTableUniqueActionSearchLight, MoveStartAngle) == 0x000008, "Member 'FEndDataTableUniqueActionSearchLight::MoveStartAngle' has a wrong offset!");
static_assert(offsetof(FEndDataTableUniqueActionSearchLight, MoveStartAngleByRadian) == 0x00000C, "Member 'FEndDataTableUniqueActionSearchLight::MoveStartAngleByRadian' has a wrong offset!");
static_assert(offsetof(FEndDataTableUniqueActionSearchLight, OuterConeAngle) == 0x000010, "Member 'FEndDataTableUniqueActionSearchLight::OuterConeAngle' has a wrong offset!");
static_assert(offsetof(FEndDataTableUniqueActionSearchLight, OuterConeAngleByRadian) == 0x000014, "Member 'FEndDataTableUniqueActionSearchLight::OuterConeAngleByRadian' has a wrong offset!");
static_assert(offsetof(FEndDataTableUniqueActionSearchLight, AttenuationRadius) == 0x000018, "Member 'FEndDataTableUniqueActionSearchLight::AttenuationRadius' has a wrong offset!");
static_assert(offsetof(FEndDataTableUniqueActionSearchLight, VerticalLimitAngle) == 0x00001C, "Member 'FEndDataTableUniqueActionSearchLight::VerticalLimitAngle' has a wrong offset!");
static_assert(offsetof(FEndDataTableUniqueActionSearchLight, HorizontalLimitAngle) == 0x000020, "Member 'FEndDataTableUniqueActionSearchLight::HorizontalLimitAngle' has a wrong offset!");
static_assert(offsetof(FEndDataTableUniqueActionSearchLight, MoveThreshold) == 0x000024, "Member 'FEndDataTableUniqueActionSearchLight::MoveThreshold' has a wrong offset!");
static_assert(offsetof(FEndDataTableUniqueActionSearchLight, MoveCurve) == 0x000028, "Member 'FEndDataTableUniqueActionSearchLight::MoveCurve' has a wrong offset!");
static_assert(offsetof(FEndDataTableUniqueActionSearchLight, AttachActor) == 0x000030, "Member 'FEndDataTableUniqueActionSearchLight::AttachActor' has a wrong offset!");
static_assert(offsetof(FEndDataTableUniqueActionSearchLight, AttachSocket) == 0x000040, "Member 'FEndDataTableUniqueActionSearchLight::AttachSocket' has a wrong offset!");
static_assert(offsetof(FEndDataTableUniqueActionSearchLight, AttachSpotlightActor) == 0x000050, "Member 'FEndDataTableUniqueActionSearchLight::AttachSpotlightActor' has a wrong offset!");
static_assert(offsetof(FEndDataTableUniqueActionSearchLight, StateObject_Array) == 0x000060, "Member 'FEndDataTableUniqueActionSearchLight::StateObject_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableUniqueActionSearchLight, StateChange_Array) == 0x000070, "Member 'FEndDataTableUniqueActionSearchLight::StateChange_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableUniqueActionSearchLight, ShowTarget_Array) == 0x000080, "Member 'FEndDataTableUniqueActionSearchLight::ShowTarget_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableUniqueActionSearchLight, StartAngle) == 0x000090, "Member 'FEndDataTableUniqueActionSearchLight::StartAngle' has a wrong offset!");
static_assert(offsetof(FEndDataTableUniqueActionSearchLight, StartAngleByRadian) == 0x000094, "Member 'FEndDataTableUniqueActionSearchLight::StartAngleByRadian' has a wrong offset!");
static_assert(offsetof(FEndDataTableUniqueActionSearchLight, PitchOverrideObject) == 0x000098, "Member 'FEndDataTableUniqueActionSearchLight::PitchOverrideObject' has a wrong offset!");
static_assert(offsetof(FEndDataTableUniqueActionSearchLight, PitchOverwriteState_Array) == 0x0000A0, "Member 'FEndDataTableUniqueActionSearchLight::PitchOverwriteState_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableUniqueActionSearchLight, PitchOverwriteAngle_Array) == 0x0000B0, "Member 'FEndDataTableUniqueActionSearchLight::PitchOverwriteAngle_Array' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableTalkState
// 0x0038 (0x0040 - 0x0008)
struct FEndDataTableTalkState final : public FEndDataTableRowBase
{
public:
	int32                                         TalkType;                                          // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Priority;                                          // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NotPlayOnBoss;                                     // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParentID;                                          // 0x0014(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PhaseNumber;                                       // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DelayTime;                                         // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         SkipMouthlessTalker;                               // 0x0024(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TalkPlayType00;                                    // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           SequenceID_Array;                                  // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableTalkState) == 0x000008, "Wrong alignment on FEndDataTableTalkState");
static_assert(sizeof(FEndDataTableTalkState) == 0x000040, "Wrong size on FEndDataTableTalkState");
static_assert(offsetof(FEndDataTableTalkState, TalkType) == 0x000008, "Member 'FEndDataTableTalkState::TalkType' has a wrong offset!");
static_assert(offsetof(FEndDataTableTalkState, Priority) == 0x00000C, "Member 'FEndDataTableTalkState::Priority' has a wrong offset!");
static_assert(offsetof(FEndDataTableTalkState, NotPlayOnBoss) == 0x000010, "Member 'FEndDataTableTalkState::NotPlayOnBoss' has a wrong offset!");
static_assert(offsetof(FEndDataTableTalkState, ParentID) == 0x000014, "Member 'FEndDataTableTalkState::ParentID' has a wrong offset!");
static_assert(offsetof(FEndDataTableTalkState, PhaseNumber) == 0x00001C, "Member 'FEndDataTableTalkState::PhaseNumber' has a wrong offset!");
static_assert(offsetof(FEndDataTableTalkState, DelayTime) == 0x000020, "Member 'FEndDataTableTalkState::DelayTime' has a wrong offset!");
static_assert(offsetof(FEndDataTableTalkState, SkipMouthlessTalker) == 0x000024, "Member 'FEndDataTableTalkState::SkipMouthlessTalker' has a wrong offset!");
static_assert(offsetof(FEndDataTableTalkState, TalkPlayType00) == 0x000028, "Member 'FEndDataTableTalkState::TalkPlayType00' has a wrong offset!");
static_assert(offsetof(FEndDataTableTalkState, SequenceID_Array) == 0x000030, "Member 'FEndDataTableTalkState::SequenceID_Array' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableTalkStateTrigger
// 0x0008 (0x0010 - 0x0008)
struct FEndDataTableTalkStateTrigger final : public FEndDataTableRowBase
{
public:
	int32                                         TriggerTarget;                                     // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableTalkStateTrigger) == 0x000008, "Wrong alignment on FEndDataTableTalkStateTrigger");
static_assert(sizeof(FEndDataTableTalkStateTrigger) == 0x000010, "Wrong size on FEndDataTableTalkStateTrigger");
static_assert(offsetof(FEndDataTableTalkStateTrigger, TriggerTarget) == 0x000008, "Member 'FEndDataTableTalkStateTrigger::TriggerTarget' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableTestPlayModeSettingData
// 0x00C8 (0x00D0 - 0x0008)
struct FEndDataTableTestPlayModeSettingData final : public FEndDataTableRowBase
{
public:
	class FName                                   Name;                                              // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TitleLocationID;                                   // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DebugPartyListID;                                  // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<float>                                 PartyMemberPos_X_Array;                            // 0x0020(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 PartyMemberPos_Y_Array;                            // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 PartyMemberPos_Z_Array;                            // 0x0040(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 PartyMemberRot_X_Array;                            // 0x0050(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 PartyMemberRot_Y_Array;                            // 0x0060(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 PartyMemberRot_Z_Array;                            // 0x0070(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           StoryFlag_Array;                                   // 0x0080(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           LocationID_Array;                                  // 0x0090(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           ActionID_Array;                                    // 0x00A0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           ExchangeSrouceBattleCharaSpec_Array;               // 0x00B0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           ExchangeDestinationBattleCharaSpec_Array;          // 0x00C0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableTestPlayModeSettingData) == 0x000008, "Wrong alignment on FEndDataTableTestPlayModeSettingData");
static_assert(sizeof(FEndDataTableTestPlayModeSettingData) == 0x0000D0, "Wrong size on FEndDataTableTestPlayModeSettingData");
static_assert(offsetof(FEndDataTableTestPlayModeSettingData, Name) == 0x000008, "Member 'FEndDataTableTestPlayModeSettingData::Name' has a wrong offset!");
static_assert(offsetof(FEndDataTableTestPlayModeSettingData, TitleLocationID) == 0x000010, "Member 'FEndDataTableTestPlayModeSettingData::TitleLocationID' has a wrong offset!");
static_assert(offsetof(FEndDataTableTestPlayModeSettingData, DebugPartyListID) == 0x000018, "Member 'FEndDataTableTestPlayModeSettingData::DebugPartyListID' has a wrong offset!");
static_assert(offsetof(FEndDataTableTestPlayModeSettingData, PartyMemberPos_X_Array) == 0x000020, "Member 'FEndDataTableTestPlayModeSettingData::PartyMemberPos_X_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableTestPlayModeSettingData, PartyMemberPos_Y_Array) == 0x000030, "Member 'FEndDataTableTestPlayModeSettingData::PartyMemberPos_Y_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableTestPlayModeSettingData, PartyMemberPos_Z_Array) == 0x000040, "Member 'FEndDataTableTestPlayModeSettingData::PartyMemberPos_Z_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableTestPlayModeSettingData, PartyMemberRot_X_Array) == 0x000050, "Member 'FEndDataTableTestPlayModeSettingData::PartyMemberRot_X_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableTestPlayModeSettingData, PartyMemberRot_Y_Array) == 0x000060, "Member 'FEndDataTableTestPlayModeSettingData::PartyMemberRot_Y_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableTestPlayModeSettingData, PartyMemberRot_Z_Array) == 0x000070, "Member 'FEndDataTableTestPlayModeSettingData::PartyMemberRot_Z_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableTestPlayModeSettingData, StoryFlag_Array) == 0x000080, "Member 'FEndDataTableTestPlayModeSettingData::StoryFlag_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableTestPlayModeSettingData, LocationID_Array) == 0x000090, "Member 'FEndDataTableTestPlayModeSettingData::LocationID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableTestPlayModeSettingData, ActionID_Array) == 0x0000A0, "Member 'FEndDataTableTestPlayModeSettingData::ActionID_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableTestPlayModeSettingData, ExchangeSrouceBattleCharaSpec_Array) == 0x0000B0, "Member 'FEndDataTableTestPlayModeSettingData::ExchangeSrouceBattleCharaSpec_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableTestPlayModeSettingData, ExchangeDestinationBattleCharaSpec_Array) == 0x0000C0, "Member 'FEndDataTableTestPlayModeSettingData::ExchangeDestinationBattleCharaSpec_Array' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableTutorial
// 0x0040 (0x0048 - 0x0008)
struct FEndDataTableTutorial final : public FEndDataTableRowBase
{
public:
	class FName                                   WidgetName;                                        // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   WidgetTextId;                                      // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   GuidLineId;                                        // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParentID;                                          // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SortIndex;                                         // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReadFlag;                                          // 0x002C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ItemName;                                          // 0x0038(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableTutorial) == 0x000008, "Wrong alignment on FEndDataTableTutorial");
static_assert(sizeof(FEndDataTableTutorial) == 0x000048, "Wrong size on FEndDataTableTutorial");
static_assert(offsetof(FEndDataTableTutorial, WidgetName) == 0x000008, "Member 'FEndDataTableTutorial::WidgetName' has a wrong offset!");
static_assert(offsetof(FEndDataTableTutorial, WidgetTextId) == 0x000010, "Member 'FEndDataTableTutorial::WidgetTextId' has a wrong offset!");
static_assert(offsetof(FEndDataTableTutorial, GuidLineId) == 0x000018, "Member 'FEndDataTableTutorial::GuidLineId' has a wrong offset!");
static_assert(offsetof(FEndDataTableTutorial, ParentID) == 0x000020, "Member 'FEndDataTableTutorial::ParentID' has a wrong offset!");
static_assert(offsetof(FEndDataTableTutorial, SortIndex) == 0x000028, "Member 'FEndDataTableTutorial::SortIndex' has a wrong offset!");
static_assert(offsetof(FEndDataTableTutorial, ReadFlag) == 0x00002C, "Member 'FEndDataTableTutorial::ReadFlag' has a wrong offset!");
static_assert(offsetof(FEndDataTableTutorial, ItemName) == 0x000038, "Member 'FEndDataTableTutorial::ItemName' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableUniqueAction
// 0x0068 (0x0070 - 0x0008)
struct FEndDataTableUniqueAction final : public FEndDataTableRowBase
{
public:
	int32                                         RepeatCount;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Time;                                              // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Next;                                              // 0x0010(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CollisionBoxName;                                  // 0x0020(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 StartTime_Array;                                   // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 PlayTime_Array;                                    // 0x0040(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         NodeNameList_Array;                                // 0x0050(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         PropertyNameList_Array;                            // 0x0060(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndDataTableUniqueAction) == 0x000008, "Wrong alignment on FEndDataTableUniqueAction");
static_assert(sizeof(FEndDataTableUniqueAction) == 0x000070, "Wrong size on FEndDataTableUniqueAction");
static_assert(offsetof(FEndDataTableUniqueAction, RepeatCount) == 0x000008, "Member 'FEndDataTableUniqueAction::RepeatCount' has a wrong offset!");
static_assert(offsetof(FEndDataTableUniqueAction, Time) == 0x00000C, "Member 'FEndDataTableUniqueAction::Time' has a wrong offset!");
static_assert(offsetof(FEndDataTableUniqueAction, Next) == 0x000010, "Member 'FEndDataTableUniqueAction::Next' has a wrong offset!");
static_assert(offsetof(FEndDataTableUniqueAction, CollisionBoxName) == 0x000020, "Member 'FEndDataTableUniqueAction::CollisionBoxName' has a wrong offset!");
static_assert(offsetof(FEndDataTableUniqueAction, StartTime_Array) == 0x000030, "Member 'FEndDataTableUniqueAction::StartTime_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableUniqueAction, PlayTime_Array) == 0x000040, "Member 'FEndDataTableUniqueAction::PlayTime_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableUniqueAction, NodeNameList_Array) == 0x000050, "Member 'FEndDataTableUniqueAction::NodeNameList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableUniqueAction, PropertyNameList_Array) == 0x000060, "Member 'FEndDataTableUniqueAction::PropertyNameList_Array' has a wrong offset!");

// ScriptStruct EndGame.EndDataTableWanderingParamList
// 0x0048 (0x0050 - 0x0008)
struct FEndDataTableWanderingParamList final : public FEndDataTableRowBase
{
public:
	float                                         IdleWaitMin;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IdleWaitMax;                                       // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MoveType;                                          // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         IsStateOperation;                                  // 0x0014(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         WaitRate;                                          // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MoveRate;                                          // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           IdleVariationList_Array;                           // 0x0020(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 WeightList_Array;                                  // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         RangeRadius;                                       // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StayTimeMIn;                                       // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StayTimeRand;                                      // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDataTableWanderingParamList) == 0x000008, "Wrong alignment on FEndDataTableWanderingParamList");
static_assert(sizeof(FEndDataTableWanderingParamList) == 0x000050, "Wrong size on FEndDataTableWanderingParamList");
static_assert(offsetof(FEndDataTableWanderingParamList, IdleWaitMin) == 0x000008, "Member 'FEndDataTableWanderingParamList::IdleWaitMin' has a wrong offset!");
static_assert(offsetof(FEndDataTableWanderingParamList, IdleWaitMax) == 0x00000C, "Member 'FEndDataTableWanderingParamList::IdleWaitMax' has a wrong offset!");
static_assert(offsetof(FEndDataTableWanderingParamList, MoveType) == 0x000010, "Member 'FEndDataTableWanderingParamList::MoveType' has a wrong offset!");
static_assert(offsetof(FEndDataTableWanderingParamList, IsStateOperation) == 0x000014, "Member 'FEndDataTableWanderingParamList::IsStateOperation' has a wrong offset!");
static_assert(offsetof(FEndDataTableWanderingParamList, WaitRate) == 0x000018, "Member 'FEndDataTableWanderingParamList::WaitRate' has a wrong offset!");
static_assert(offsetof(FEndDataTableWanderingParamList, MoveRate) == 0x00001C, "Member 'FEndDataTableWanderingParamList::MoveRate' has a wrong offset!");
static_assert(offsetof(FEndDataTableWanderingParamList, IdleVariationList_Array) == 0x000020, "Member 'FEndDataTableWanderingParamList::IdleVariationList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableWanderingParamList, WeightList_Array) == 0x000030, "Member 'FEndDataTableWanderingParamList::WeightList_Array' has a wrong offset!");
static_assert(offsetof(FEndDataTableWanderingParamList, RangeRadius) == 0x000040, "Member 'FEndDataTableWanderingParamList::RangeRadius' has a wrong offset!");
static_assert(offsetof(FEndDataTableWanderingParamList, StayTimeMIn) == 0x000044, "Member 'FEndDataTableWanderingParamList::StayTimeMIn' has a wrong offset!");
static_assert(offsetof(FEndDataTableWanderingParamList, StayTimeRand) == 0x000048, "Member 'FEndDataTableWanderingParamList::StayTimeRand' has a wrong offset!");

// ScriptStruct EndGame.EqsResult
// 0x0050 (0x0050 - 0x0000)
struct FEqsResult final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Score;                                             // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Distance;                                          // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UniqueID;                                          // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                DifLocation;                                       // 0x0020(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                DifDistance;                                       // 0x002C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Normalized;                                        // 0x0038(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Normalized2D;                                      // 0x0044(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEqsResult) == 0x000008, "Wrong alignment on FEqsResult");
static_assert(sizeof(FEqsResult) == 0x000050, "Wrong size on FEqsResult");
static_assert(offsetof(FEqsResult, Actor) == 0x000000, "Member 'FEqsResult::Actor' has a wrong offset!");
static_assert(offsetof(FEqsResult, Location) == 0x000008, "Member 'FEqsResult::Location' has a wrong offset!");
static_assert(offsetof(FEqsResult, Score) == 0x000014, "Member 'FEqsResult::Score' has a wrong offset!");
static_assert(offsetof(FEqsResult, Distance) == 0x000018, "Member 'FEqsResult::Distance' has a wrong offset!");
static_assert(offsetof(FEqsResult, UniqueID) == 0x00001C, "Member 'FEqsResult::UniqueID' has a wrong offset!");
static_assert(offsetof(FEqsResult, DifLocation) == 0x000020, "Member 'FEqsResult::DifLocation' has a wrong offset!");
static_assert(offsetof(FEqsResult, DifDistance) == 0x00002C, "Member 'FEqsResult::DifDistance' has a wrong offset!");
static_assert(offsetof(FEqsResult, Normalized) == 0x000038, "Member 'FEqsResult::Normalized' has a wrong offset!");
static_assert(offsetof(FEqsResult, Normalized2D) == 0x000044, "Member 'FEqsResult::Normalized2D' has a wrong offset!");

// ScriptStruct EndGame.EndFeelerBarrierInstanceContext
// 0x00A0 (0x00A0 - 0x0000)
struct FEndFeelerBarrierInstanceContext final
{
public:
	int32                                         InstanceIndex;                                     // 0x0000(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEndFeelerBarrierTimeRateAndSize       Horizontal;                                        // 0x0004(0x000C)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	float                                         VerticalHeightOffset;                              // 0x0010(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEndFeelerBarrierTimeRateAndSize       PrimaryVertical;                                   // 0x0014(0x000C)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	struct FEndFeelerBarrierTimeRateAndSize       SecondaryVertical;                                 // 0x0020(0x000C)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	struct FEndFeelerBarrierTimeRateAndSize       PrimaryRoll;                                       // 0x002C(0x000C)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	struct FEndFeelerBarrierTimeRateAndSize       SecondaryRoll;                                     // 0x0038(0x000C)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	float                                         TargetExtrusionDistance;                           // 0x0044(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentExtrusionDistance;                          // 0x0048(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExtrusionWaitTimer;                                // 0x004C(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeactiveUpSpeed;                                   // 0x0050(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0xC];                                       // 0x0054(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CurrentTransform;                                  // 0x0060(0x0030)(Edit, EditConst, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                CurrentVelocity;                                   // 0x0090(0x000C)(Edit, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndFeelerBarrierInstanceContext) == 0x000010, "Wrong alignment on FEndFeelerBarrierInstanceContext");
static_assert(sizeof(FEndFeelerBarrierInstanceContext) == 0x0000A0, "Wrong size on FEndFeelerBarrierInstanceContext");
static_assert(offsetof(FEndFeelerBarrierInstanceContext, InstanceIndex) == 0x000000, "Member 'FEndFeelerBarrierInstanceContext::InstanceIndex' has a wrong offset!");
static_assert(offsetof(FEndFeelerBarrierInstanceContext, Horizontal) == 0x000004, "Member 'FEndFeelerBarrierInstanceContext::Horizontal' has a wrong offset!");
static_assert(offsetof(FEndFeelerBarrierInstanceContext, VerticalHeightOffset) == 0x000010, "Member 'FEndFeelerBarrierInstanceContext::VerticalHeightOffset' has a wrong offset!");
static_assert(offsetof(FEndFeelerBarrierInstanceContext, PrimaryVertical) == 0x000014, "Member 'FEndFeelerBarrierInstanceContext::PrimaryVertical' has a wrong offset!");
static_assert(offsetof(FEndFeelerBarrierInstanceContext, SecondaryVertical) == 0x000020, "Member 'FEndFeelerBarrierInstanceContext::SecondaryVertical' has a wrong offset!");
static_assert(offsetof(FEndFeelerBarrierInstanceContext, PrimaryRoll) == 0x00002C, "Member 'FEndFeelerBarrierInstanceContext::PrimaryRoll' has a wrong offset!");
static_assert(offsetof(FEndFeelerBarrierInstanceContext, SecondaryRoll) == 0x000038, "Member 'FEndFeelerBarrierInstanceContext::SecondaryRoll' has a wrong offset!");
static_assert(offsetof(FEndFeelerBarrierInstanceContext, TargetExtrusionDistance) == 0x000044, "Member 'FEndFeelerBarrierInstanceContext::TargetExtrusionDistance' has a wrong offset!");
static_assert(offsetof(FEndFeelerBarrierInstanceContext, CurrentExtrusionDistance) == 0x000048, "Member 'FEndFeelerBarrierInstanceContext::CurrentExtrusionDistance' has a wrong offset!");
static_assert(offsetof(FEndFeelerBarrierInstanceContext, ExtrusionWaitTimer) == 0x00004C, "Member 'FEndFeelerBarrierInstanceContext::ExtrusionWaitTimer' has a wrong offset!");
static_assert(offsetof(FEndFeelerBarrierInstanceContext, DeactiveUpSpeed) == 0x000050, "Member 'FEndFeelerBarrierInstanceContext::DeactiveUpSpeed' has a wrong offset!");
static_assert(offsetof(FEndFeelerBarrierInstanceContext, CurrentTransform) == 0x000060, "Member 'FEndFeelerBarrierInstanceContext::CurrentTransform' has a wrong offset!");
static_assert(offsetof(FEndFeelerBarrierInstanceContext, CurrentVelocity) == 0x000090, "Member 'FEndFeelerBarrierInstanceContext::CurrentVelocity' has a wrong offset!");

// ScriptStruct EndGame.EndFeelerBarrierBaseAndRandomBias
// 0x000C (0x000C - 0x0000)
struct FEndFeelerBarrierBaseAndRandomBias final
{
public:
	float                                         Base;                                              // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              RandomBiasRange;                                   // 0x0004(0x0008)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndFeelerBarrierBaseAndRandomBias) == 0x000004, "Wrong alignment on FEndFeelerBarrierBaseAndRandomBias");
static_assert(sizeof(FEndFeelerBarrierBaseAndRandomBias) == 0x00000C, "Wrong size on FEndFeelerBarrierBaseAndRandomBias");
static_assert(offsetof(FEndFeelerBarrierBaseAndRandomBias, Base) == 0x000000, "Member 'FEndFeelerBarrierBaseAndRandomBias::Base' has a wrong offset!");
static_assert(offsetof(FEndFeelerBarrierBaseAndRandomBias, RandomBiasRange) == 0x000004, "Member 'FEndFeelerBarrierBaseAndRandomBias::RandomBiasRange' has a wrong offset!");

// ScriptStruct EndGame.EndDuctMoveSelectMenu
// 0x002C (0x002C - 0x0000)
struct FEndDuctMoveSelectMenu final
{
public:
	class FName                                   TitleText;                                         // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ChoicesText1;                                      // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndMoveOrder                                 ChoicesMoveOrder1;                                 // 0x0010(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ChoicesText2;                                      // 0x0014(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndMoveOrder                                 ChoicesMoveOrder2;                                 // 0x001C(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ProgressMngFlag;                                   // 0x0020(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndMoveOrder                                 CorrectRouteMoveOrder;                             // 0x0028(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndDuctMoveSelectMenu) == 0x000004, "Wrong alignment on FEndDuctMoveSelectMenu");
static_assert(sizeof(FEndDuctMoveSelectMenu) == 0x00002C, "Wrong size on FEndDuctMoveSelectMenu");
static_assert(offsetof(FEndDuctMoveSelectMenu, TitleText) == 0x000000, "Member 'FEndDuctMoveSelectMenu::TitleText' has a wrong offset!");
static_assert(offsetof(FEndDuctMoveSelectMenu, ChoicesText1) == 0x000008, "Member 'FEndDuctMoveSelectMenu::ChoicesText1' has a wrong offset!");
static_assert(offsetof(FEndDuctMoveSelectMenu, ChoicesMoveOrder1) == 0x000010, "Member 'FEndDuctMoveSelectMenu::ChoicesMoveOrder1' has a wrong offset!");
static_assert(offsetof(FEndDuctMoveSelectMenu, ChoicesText2) == 0x000014, "Member 'FEndDuctMoveSelectMenu::ChoicesText2' has a wrong offset!");
static_assert(offsetof(FEndDuctMoveSelectMenu, ChoicesMoveOrder2) == 0x00001C, "Member 'FEndDuctMoveSelectMenu::ChoicesMoveOrder2' has a wrong offset!");
static_assert(offsetof(FEndDuctMoveSelectMenu, ProgressMngFlag) == 0x000020, "Member 'FEndDuctMoveSelectMenu::ProgressMngFlag' has a wrong offset!");
static_assert(offsetof(FEndDuctMoveSelectMenu, CorrectRouteMoveOrder) == 0x000028, "Member 'FEndDuctMoveSelectMenu::CorrectRouteMoveOrder' has a wrong offset!");

// ScriptStruct EndGame.EndTarzanJumpInfo
// 0x0018 (0x0018 - 0x0000)
struct FEndTarzanJumpInfo final
{
public:
	class FName                                   TargetActorName;                                   // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndTarzanJumpType                            JumpType;                                          // 0x0008(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RopePushNum;                                       // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StartTriggerName;                                  // 0x0010(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndTarzanJumpInfo) == 0x000004, "Wrong alignment on FEndTarzanJumpInfo");
static_assert(sizeof(FEndTarzanJumpInfo) == 0x000018, "Wrong size on FEndTarzanJumpInfo");
static_assert(offsetof(FEndTarzanJumpInfo, TargetActorName) == 0x000000, "Member 'FEndTarzanJumpInfo::TargetActorName' has a wrong offset!");
static_assert(offsetof(FEndTarzanJumpInfo, JumpType) == 0x000008, "Member 'FEndTarzanJumpInfo::JumpType' has a wrong offset!");
static_assert(offsetof(FEndTarzanJumpInfo, RopePushNum) == 0x00000C, "Member 'FEndTarzanJumpInfo::RopePushNum' has a wrong offset!");
static_assert(offsetof(FEndTarzanJumpInfo, StartTriggerName) == 0x000010, "Member 'FEndTarzanJumpInfo::StartTriggerName' has a wrong offset!");

// ScriptStruct EndGame.WireMeshOBB
// 0x0054 (0x0054 - 0x0000)
struct FWireMeshOBB final
{
public:
	uint8                                         Pad_0[0x3C];                                       // 0x0000(0x003C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                BoundsMax;                                         // 0x003C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                BoundsMin;                                         // 0x0048(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWireMeshOBB) == 0x000004, "Wrong alignment on FWireMeshOBB");
static_assert(sizeof(FWireMeshOBB) == 0x000054, "Wrong size on FWireMeshOBB");
static_assert(offsetof(FWireMeshOBB, BoundsMax) == 0x00003C, "Member 'FWireMeshOBB::BoundsMax' has a wrong offset!");
static_assert(offsetof(FWireMeshOBB, BoundsMin) == 0x000048, "Member 'FWireMeshOBB::BoundsMin' has a wrong offset!");

// ScriptStruct EndGame.GameStateChange
// 0x0002 (0x0002 - 0x0000)
struct FGameStateChange final
{
public:
	EGameState                                    State;                                             // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ChangeIn;                                          // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGameStateChange) == 0x000001, "Wrong alignment on FGameStateChange");
static_assert(sizeof(FGameStateChange) == 0x000002, "Wrong size on FGameStateChange");
static_assert(offsetof(FGameStateChange, State) == 0x000000, "Member 'FGameStateChange::State' has a wrong offset!");
static_assert(offsetof(FGameStateChange, ChangeIn) == 0x000001, "Member 'FGameStateChange::ChangeIn' has a wrong offset!");

// ScriptStruct EndGame.InterestPointRequestContext
// 0x0014 (0x0014 - 0x0000)
struct FInterestPointRequestContext final
{
public:
	EEndInterestPointReactionActorType            Type;                                              // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Radius;                                            // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndInterestPointTemplate                     TemplateId;                                        // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   OverrideId;                                        // 0x000C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FInterestPointRequestContext) == 0x000004, "Wrong alignment on FInterestPointRequestContext");
static_assert(sizeof(FInterestPointRequestContext) == 0x000014, "Wrong size on FInterestPointRequestContext");
static_assert(offsetof(FInterestPointRequestContext, Type) == 0x000000, "Member 'FInterestPointRequestContext::Type' has a wrong offset!");
static_assert(offsetof(FInterestPointRequestContext, Radius) == 0x000004, "Member 'FInterestPointRequestContext::Radius' has a wrong offset!");
static_assert(offsetof(FInterestPointRequestContext, TemplateId) == 0x000008, "Member 'FInterestPointRequestContext::TemplateId' has a wrong offset!");
static_assert(offsetof(FInterestPointRequestContext, OverrideId) == 0x00000C, "Member 'FInterestPointRequestContext::OverrideId' has a wrong offset!");

// ScriptStruct EndGame.EndAIInterestActionInfo
// 0x00B8 (0x00B8 - 0x0000)
struct FEndAIInterestActionInfo final
{
public:
	class FName                                   CommandID;                                         // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndAIInterestActionCommand                   Command;                                           // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   PollingID;                                         // 0x000C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IntegerArgument00;                                 // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IntegerArgument01;                                 // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IntegerArgument02;                                 // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IntegerArgument03;                                 // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IntegerArgument04;                                 // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IntegerArgument05;                                 // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IntegerArgument06;                                 // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IntegerArgument07;                                 // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 StringArgument00;                                  // 0x0038(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StringArgument01;                                  // 0x0048(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StringArgument02;                                  // 0x0058(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StringArgument03;                                  // 0x0068(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StringArgument04;                                  // 0x0078(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StringArgument05;                                  // 0x0088(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StringArgument06;                                  // 0x0098(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StringArgument07;                                  // 0x00A8(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndAIInterestActionInfo) == 0x000008, "Wrong alignment on FEndAIInterestActionInfo");
static_assert(sizeof(FEndAIInterestActionInfo) == 0x0000B8, "Wrong size on FEndAIInterestActionInfo");
static_assert(offsetof(FEndAIInterestActionInfo, CommandID) == 0x000000, "Member 'FEndAIInterestActionInfo::CommandID' has a wrong offset!");
static_assert(offsetof(FEndAIInterestActionInfo, Command) == 0x000008, "Member 'FEndAIInterestActionInfo::Command' has a wrong offset!");
static_assert(offsetof(FEndAIInterestActionInfo, PollingID) == 0x00000C, "Member 'FEndAIInterestActionInfo::PollingID' has a wrong offset!");
static_assert(offsetof(FEndAIInterestActionInfo, IntegerArgument00) == 0x000014, "Member 'FEndAIInterestActionInfo::IntegerArgument00' has a wrong offset!");
static_assert(offsetof(FEndAIInterestActionInfo, IntegerArgument01) == 0x000018, "Member 'FEndAIInterestActionInfo::IntegerArgument01' has a wrong offset!");
static_assert(offsetof(FEndAIInterestActionInfo, IntegerArgument02) == 0x00001C, "Member 'FEndAIInterestActionInfo::IntegerArgument02' has a wrong offset!");
static_assert(offsetof(FEndAIInterestActionInfo, IntegerArgument03) == 0x000020, "Member 'FEndAIInterestActionInfo::IntegerArgument03' has a wrong offset!");
static_assert(offsetof(FEndAIInterestActionInfo, IntegerArgument04) == 0x000024, "Member 'FEndAIInterestActionInfo::IntegerArgument04' has a wrong offset!");
static_assert(offsetof(FEndAIInterestActionInfo, IntegerArgument05) == 0x000028, "Member 'FEndAIInterestActionInfo::IntegerArgument05' has a wrong offset!");
static_assert(offsetof(FEndAIInterestActionInfo, IntegerArgument06) == 0x00002C, "Member 'FEndAIInterestActionInfo::IntegerArgument06' has a wrong offset!");
static_assert(offsetof(FEndAIInterestActionInfo, IntegerArgument07) == 0x000030, "Member 'FEndAIInterestActionInfo::IntegerArgument07' has a wrong offset!");
static_assert(offsetof(FEndAIInterestActionInfo, StringArgument00) == 0x000038, "Member 'FEndAIInterestActionInfo::StringArgument00' has a wrong offset!");
static_assert(offsetof(FEndAIInterestActionInfo, StringArgument01) == 0x000048, "Member 'FEndAIInterestActionInfo::StringArgument01' has a wrong offset!");
static_assert(offsetof(FEndAIInterestActionInfo, StringArgument02) == 0x000058, "Member 'FEndAIInterestActionInfo::StringArgument02' has a wrong offset!");
static_assert(offsetof(FEndAIInterestActionInfo, StringArgument03) == 0x000068, "Member 'FEndAIInterestActionInfo::StringArgument03' has a wrong offset!");
static_assert(offsetof(FEndAIInterestActionInfo, StringArgument04) == 0x000078, "Member 'FEndAIInterestActionInfo::StringArgument04' has a wrong offset!");
static_assert(offsetof(FEndAIInterestActionInfo, StringArgument05) == 0x000088, "Member 'FEndAIInterestActionInfo::StringArgument05' has a wrong offset!");
static_assert(offsetof(FEndAIInterestActionInfo, StringArgument06) == 0x000098, "Member 'FEndAIInterestActionInfo::StringArgument06' has a wrong offset!");
static_assert(offsetof(FEndAIInterestActionInfo, StringArgument07) == 0x0000A8, "Member 'FEndAIInterestActionInfo::StringArgument07' has a wrong offset!");

// ScriptStruct EndGame.EndJointHingeRotationLimit
// 0x000C (0x000C - 0x0000)
struct FEndJointHingeRotationLimit final
{
public:
	EEndJointLimitAxis                            Axis;                                              // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Min;                                               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Max;                                               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndJointHingeRotationLimit) == 0x000004, "Wrong alignment on FEndJointHingeRotationLimit");
static_assert(sizeof(FEndJointHingeRotationLimit) == 0x00000C, "Wrong size on FEndJointHingeRotationLimit");
static_assert(offsetof(FEndJointHingeRotationLimit, Axis) == 0x000000, "Member 'FEndJointHingeRotationLimit::Axis' has a wrong offset!");
static_assert(offsetof(FEndJointHingeRotationLimit, Min) == 0x000004, "Member 'FEndJointHingeRotationLimit::Min' has a wrong offset!");
static_assert(offsetof(FEndJointHingeRotationLimit, Max) == 0x000008, "Member 'FEndJointHingeRotationLimit::Max' has a wrong offset!");

// ScriptStruct EndGame.EndLipSyncAudioAttackBrowAnimation
// 0x0014 (0x0014 - 0x0000)
struct FEndLipSyncAudioAttackBrowAnimation final
{
public:
	struct FVector2D                              Offset;                                            // 0x0000(0x0008)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendInTime;                                       // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendOutTime;                                      // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndLipSyncAudioAttackBrowAnimation) == 0x000004, "Wrong alignment on FEndLipSyncAudioAttackBrowAnimation");
static_assert(sizeof(FEndLipSyncAudioAttackBrowAnimation) == 0x000014, "Wrong size on FEndLipSyncAudioAttackBrowAnimation");
static_assert(offsetof(FEndLipSyncAudioAttackBrowAnimation, Offset) == 0x000000, "Member 'FEndLipSyncAudioAttackBrowAnimation::Offset' has a wrong offset!");
static_assert(offsetof(FEndLipSyncAudioAttackBrowAnimation, Weight) == 0x000008, "Member 'FEndLipSyncAudioAttackBrowAnimation::Weight' has a wrong offset!");
static_assert(offsetof(FEndLipSyncAudioAttackBrowAnimation, BlendInTime) == 0x00000C, "Member 'FEndLipSyncAudioAttackBrowAnimation::BlendInTime' has a wrong offset!");
static_assert(offsetof(FEndLipSyncAudioAttackBrowAnimation, BlendOutTime) == 0x000010, "Member 'FEndLipSyncAudioAttackBrowAnimation::BlendOutTime' has a wrong offset!");

// ScriptStruct EndGame.EndMenuColosseumBattlePrototypeData
// 0x0018 (0x0018 - 0x0000)
struct FEndMenuColosseumBattlePrototypeData
{
public:
	class FString                                 Title;                                             // 0x0000(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EntryFee;                                          // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HighScore;                                         // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndMenuColosseumBattlePrototypeData) == 0x000008, "Wrong alignment on FEndMenuColosseumBattlePrototypeData");
static_assert(sizeof(FEndMenuColosseumBattlePrototypeData) == 0x000018, "Wrong size on FEndMenuColosseumBattlePrototypeData");
static_assert(offsetof(FEndMenuColosseumBattlePrototypeData, Title) == 0x000000, "Member 'FEndMenuColosseumBattlePrototypeData::Title' has a wrong offset!");
static_assert(offsetof(FEndMenuColosseumBattlePrototypeData, EntryFee) == 0x000010, "Member 'FEndMenuColosseumBattlePrototypeData::EntryFee' has a wrong offset!");
static_assert(offsetof(FEndMenuColosseumBattlePrototypeData, HighScore) == 0x000014, "Member 'FEndMenuColosseumBattlePrototypeData::HighScore' has a wrong offset!");

// ScriptStruct EndGame.EndMenuColosseumSpecialBattlePrototypeData
// 0x0058 (0x0070 - 0x0018)
struct FEndMenuColosseumSpecialBattlePrototypeData final : public FEndMenuColosseumBattlePrototypeData
{
public:
	struct FEndMenuColosseumBattleScenePrototypeData BattleScene;                                       // 0x0018(0x0048)(Edit, NativeAccessSpecifierPublic)
	struct FEndMenuColosseumRewardPrototypeData   Reward;                                            // 0x0060(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndMenuColosseumSpecialBattlePrototypeData) == 0x000008, "Wrong alignment on FEndMenuColosseumSpecialBattlePrototypeData");
static_assert(sizeof(FEndMenuColosseumSpecialBattlePrototypeData) == 0x000070, "Wrong size on FEndMenuColosseumSpecialBattlePrototypeData");
static_assert(offsetof(FEndMenuColosseumSpecialBattlePrototypeData, BattleScene) == 0x000018, "Member 'FEndMenuColosseumSpecialBattlePrototypeData::BattleScene' has a wrong offset!");
static_assert(offsetof(FEndMenuColosseumSpecialBattlePrototypeData, Reward) == 0x000060, "Member 'FEndMenuColosseumSpecialBattlePrototypeData::Reward' has a wrong offset!");

// ScriptStruct EndGame.EndMenuColosseumCourseBattlePrototypeData
// 0x0020 (0x0038 - 0x0018)
struct FEndMenuColosseumCourseBattlePrototypeData final : public FEndMenuColosseumBattlePrototypeData
{
public:
	TArray<struct FEndMenuColosseumBattleScenePrototypeData> BattleSceneList;                                   // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FEndMenuColosseumRewardPrototypeData> RewardList;                                        // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndMenuColosseumCourseBattlePrototypeData) == 0x000008, "Wrong alignment on FEndMenuColosseumCourseBattlePrototypeData");
static_assert(sizeof(FEndMenuColosseumCourseBattlePrototypeData) == 0x000038, "Wrong size on FEndMenuColosseumCourseBattlePrototypeData");
static_assert(offsetof(FEndMenuColosseumCourseBattlePrototypeData, BattleSceneList) == 0x000018, "Member 'FEndMenuColosseumCourseBattlePrototypeData::BattleSceneList' has a wrong offset!");
static_assert(offsetof(FEndMenuColosseumCourseBattlePrototypeData, RewardList) == 0x000028, "Member 'FEndMenuColosseumCourseBattlePrototypeData::RewardList' has a wrong offset!");

// ScriptStruct EndGame.EndMenuColosseumSupplyPrototypeData
// 0x000C (0x000C - 0x0000)
struct FEndMenuColosseumSupplyPrototypeData final
{
public:
	class FName                                   ItemID;                                            // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CosumedCoins;                                      // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndMenuColosseumSupplyPrototypeData) == 0x000004, "Wrong alignment on FEndMenuColosseumSupplyPrototypeData");
static_assert(sizeof(FEndMenuColosseumSupplyPrototypeData) == 0x00000C, "Wrong size on FEndMenuColosseumSupplyPrototypeData");
static_assert(offsetof(FEndMenuColosseumSupplyPrototypeData, ItemID) == 0x000000, "Member 'FEndMenuColosseumSupplyPrototypeData::ItemID' has a wrong offset!");
static_assert(offsetof(FEndMenuColosseumSupplyPrototypeData, CosumedCoins) == 0x000008, "Member 'FEndMenuColosseumSupplyPrototypeData::CosumedCoins' has a wrong offset!");

// ScriptStruct EndGame.EndMenuColosseumPowerUpPrototypeData
// 0x0020 (0x0020 - 0x0000)
struct FEndMenuColosseumPowerUpPrototypeData final
{
public:
	class FString                                 Title;                                             // 0x0000(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0010(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndMenuColosseumPowerUpPrototypeData) == 0x000008, "Wrong alignment on FEndMenuColosseumPowerUpPrototypeData");
static_assert(sizeof(FEndMenuColosseumPowerUpPrototypeData) == 0x000020, "Wrong size on FEndMenuColosseumPowerUpPrototypeData");
static_assert(offsetof(FEndMenuColosseumPowerUpPrototypeData, Title) == 0x000000, "Member 'FEndMenuColosseumPowerUpPrototypeData::Title' has a wrong offset!");
static_assert(offsetof(FEndMenuColosseumPowerUpPrototypeData, Description) == 0x000010, "Member 'FEndMenuColosseumPowerUpPrototypeData::Description' has a wrong offset!");

// ScriptStruct EndGame.EndMenuColorMapping
// 0x0018 (0x0018 - 0x0000)
struct FEndMenuColorMapping final
{
public:
	class FName                                   MappingName;                                       // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x0008(0x0010)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndMenuColorMapping) == 0x000004, "Wrong alignment on FEndMenuColorMapping");
static_assert(sizeof(FEndMenuColorMapping) == 0x000018, "Wrong size on FEndMenuColorMapping");
static_assert(offsetof(FEndMenuColorMapping, MappingName) == 0x000000, "Member 'FEndMenuColorMapping::MappingName' has a wrong offset!");
static_assert(offsetof(FEndMenuColorMapping, Color) == 0x000008, "Member 'FEndMenuColorMapping::Color' has a wrong offset!");

// ScriptStruct EndGame.EndStatusMenuHPColors
// 0x0020 (0x0020 - 0x0000)
struct FEndStatusMenuHPColors final
{
public:
	struct FLinearColor                           ChildColor;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ParentColor;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndStatusMenuHPColors) == 0x000004, "Wrong alignment on FEndStatusMenuHPColors");
static_assert(sizeof(FEndStatusMenuHPColors) == 0x000020, "Wrong size on FEndStatusMenuHPColors");
static_assert(offsetof(FEndStatusMenuHPColors, ChildColor) == 0x000000, "Member 'FEndStatusMenuHPColors::ChildColor' has a wrong offset!");
static_assert(offsetof(FEndStatusMenuHPColors, ParentColor) == 0x000010, "Member 'FEndStatusMenuHPColors::ParentColor' has a wrong offset!");

// ScriptStruct EndGame.EndNaviMapLocationPrototypeDataV2
// 0x0020 (0x0020 - 0x0000)
struct FEndNaviMapLocationPrototypeDataV2 final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FEndNaviMapLayerPrototypeDataV2> Layers;                                            // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndNaviMapLocationPrototypeDataV2) == 0x000008, "Wrong alignment on FEndNaviMapLocationPrototypeDataV2");
static_assert(sizeof(FEndNaviMapLocationPrototypeDataV2) == 0x000020, "Wrong size on FEndNaviMapLocationPrototypeDataV2");
static_assert(offsetof(FEndNaviMapLocationPrototypeDataV2, Name) == 0x000000, "Member 'FEndNaviMapLocationPrototypeDataV2::Name' has a wrong offset!");
static_assert(offsetof(FEndNaviMapLocationPrototypeDataV2, Layers) == 0x000010, "Member 'FEndNaviMapLocationPrototypeDataV2::Layers' has a wrong offset!");

// ScriptStruct EndGame.EndNavModifierInfo
// 0x00A0 (0x00A0 - 0x0000)
struct FEndNavModifierInfo final
{
public:
	class FName                                   ActorName;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndModifierType                              Type;                                              // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SameArea;                                          // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 IntegerList;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 FloatList;                                         // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         StringList;                                        // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        VectorList1;                                       // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        VectorList2;                                       // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        VectorList3;                                       // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        VectorList4;                                       // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        VectorList5;                                       // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        VectorList6;                                       // 0x0090(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndNavModifierInfo) == 0x000008, "Wrong alignment on FEndNavModifierInfo");
static_assert(sizeof(FEndNavModifierInfo) == 0x0000A0, "Wrong size on FEndNavModifierInfo");
static_assert(offsetof(FEndNavModifierInfo, ActorName) == 0x000000, "Member 'FEndNavModifierInfo::ActorName' has a wrong offset!");
static_assert(offsetof(FEndNavModifierInfo, Type) == 0x000008, "Member 'FEndNavModifierInfo::Type' has a wrong offset!");
static_assert(offsetof(FEndNavModifierInfo, SameArea) == 0x000009, "Member 'FEndNavModifierInfo::SameArea' has a wrong offset!");
static_assert(offsetof(FEndNavModifierInfo, IntegerList) == 0x000010, "Member 'FEndNavModifierInfo::IntegerList' has a wrong offset!");
static_assert(offsetof(FEndNavModifierInfo, FloatList) == 0x000020, "Member 'FEndNavModifierInfo::FloatList' has a wrong offset!");
static_assert(offsetof(FEndNavModifierInfo, StringList) == 0x000030, "Member 'FEndNavModifierInfo::StringList' has a wrong offset!");
static_assert(offsetof(FEndNavModifierInfo, VectorList1) == 0x000040, "Member 'FEndNavModifierInfo::VectorList1' has a wrong offset!");
static_assert(offsetof(FEndNavModifierInfo, VectorList2) == 0x000050, "Member 'FEndNavModifierInfo::VectorList2' has a wrong offset!");
static_assert(offsetof(FEndNavModifierInfo, VectorList3) == 0x000060, "Member 'FEndNavModifierInfo::VectorList3' has a wrong offset!");
static_assert(offsetof(FEndNavModifierInfo, VectorList4) == 0x000070, "Member 'FEndNavModifierInfo::VectorList4' has a wrong offset!");
static_assert(offsetof(FEndNavModifierInfo, VectorList5) == 0x000080, "Member 'FEndNavModifierInfo::VectorList5' has a wrong offset!");
static_assert(offsetof(FEndNavModifierInfo, VectorList6) == 0x000090, "Member 'FEndNavModifierInfo::VectorList6' has a wrong offset!");

// ScriptStruct EndGame.WallManageParam
// 0x0008 (0x0008 - 0x0000)
struct FWallManageParam final
{
public:
	int32                                         WallID;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GroupID;                                           // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWallManageParam) == 0x000004, "Wrong alignment on FWallManageParam");
static_assert(sizeof(FWallManageParam) == 0x000008, "Wrong size on FWallManageParam");
static_assert(offsetof(FWallManageParam, WallID) == 0x000000, "Member 'FWallManageParam::WallID' has a wrong offset!");
static_assert(offsetof(FWallManageParam, GroupID) == 0x000004, "Member 'FWallManageParam::GroupID' has a wrong offset!");

// ScriptStruct EndGame.CoverUiInfo
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x08) FCoverUiInfo final
{
public:
	uint8                                         Pad_0[0x28];                                       // 0x0000(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCoverUiInfo) == 0x000008, "Wrong alignment on FCoverUiInfo");
static_assert(sizeof(FCoverUiInfo) == 0x000028, "Wrong size on FCoverUiInfo");

// ScriptStruct EndGame.OptionInfos
// 0x0020 (0x0020 - 0x0000)
struct FOptionInfos final
{
public:
	class FString                                 HelpText;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FOptionInfo>                    Infos;                                             // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOptionInfos) == 0x000008, "Wrong alignment on FOptionInfos");
static_assert(sizeof(FOptionInfos) == 0x000020, "Wrong size on FOptionInfos");
static_assert(offsetof(FOptionInfos, HelpText) == 0x000000, "Member 'FOptionInfos::HelpText' has a wrong offset!");
static_assert(offsetof(FOptionInfos, Infos) == 0x000010, "Member 'FOptionInfos::Infos' has a wrong offset!");

// ScriptStruct EndGame.EndPhysicalConstraintSetting_RandomImpulse
// 0x0028 (0x0028 - 0x0000)
struct FEndPhysicalConstraintSetting_RandomImpulse final
{
public:
	class FName                                   BoneName0;                                         // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ImpulseMin;                                        // 0x0008(0x000C)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ImpulseMax;                                        // 0x0014(0x000C)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Cycle;                                             // 0x0020(0x0008)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndPhysicalConstraintSetting_RandomImpulse) == 0x000004, "Wrong alignment on FEndPhysicalConstraintSetting_RandomImpulse");
static_assert(sizeof(FEndPhysicalConstraintSetting_RandomImpulse) == 0x000028, "Wrong size on FEndPhysicalConstraintSetting_RandomImpulse");
static_assert(offsetof(FEndPhysicalConstraintSetting_RandomImpulse, BoneName0) == 0x000000, "Member 'FEndPhysicalConstraintSetting_RandomImpulse::BoneName0' has a wrong offset!");
static_assert(offsetof(FEndPhysicalConstraintSetting_RandomImpulse, ImpulseMin) == 0x000008, "Member 'FEndPhysicalConstraintSetting_RandomImpulse::ImpulseMin' has a wrong offset!");
static_assert(offsetof(FEndPhysicalConstraintSetting_RandomImpulse, ImpulseMax) == 0x000014, "Member 'FEndPhysicalConstraintSetting_RandomImpulse::ImpulseMax' has a wrong offset!");
static_assert(offsetof(FEndPhysicalConstraintSetting_RandomImpulse, Cycle) == 0x000020, "Member 'FEndPhysicalConstraintSetting_RandomImpulse::Cycle' has a wrong offset!");

// ScriptStruct EndGame.EndPhysicalConstraintSetting_ContactCharacter
// 0x0014 (0x0014 - 0x0000)
struct FEndPhysicalConstraintSetting_ContactCharacter final
{
public:
	class FName                                   BoneName0;                                         // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneContactBoneName;                               // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BoneContactRadius0;                                // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndPhysicalConstraintSetting_ContactCharacter) == 0x000004, "Wrong alignment on FEndPhysicalConstraintSetting_ContactCharacter");
static_assert(sizeof(FEndPhysicalConstraintSetting_ContactCharacter) == 0x000014, "Wrong size on FEndPhysicalConstraintSetting_ContactCharacter");
static_assert(offsetof(FEndPhysicalConstraintSetting_ContactCharacter, BoneName0) == 0x000000, "Member 'FEndPhysicalConstraintSetting_ContactCharacter::BoneName0' has a wrong offset!");
static_assert(offsetof(FEndPhysicalConstraintSetting_ContactCharacter, BoneContactBoneName) == 0x000008, "Member 'FEndPhysicalConstraintSetting_ContactCharacter::BoneContactBoneName' has a wrong offset!");
static_assert(offsetof(FEndPhysicalConstraintSetting_ContactCharacter, BoneContactRadius0) == 0x000010, "Member 'FEndPhysicalConstraintSetting_ContactCharacter::BoneContactRadius0' has a wrong offset!");

// ScriptStruct EndGame.EndPhysicalConstraintSetting_AnimPosition
// 0x001C (0x001C - 0x0000)
struct FEndPhysicalConstraintSetting_AnimPosition final
{
public:
	class FName                                   BoneName0;                                         // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName1;                                         // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BoneInvMassBias0;                                  // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BoneInvMassBias1;                                  // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Stiffness;                                         // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndPhysicalConstraintSetting_AnimPosition) == 0x000004, "Wrong alignment on FEndPhysicalConstraintSetting_AnimPosition");
static_assert(sizeof(FEndPhysicalConstraintSetting_AnimPosition) == 0x00001C, "Wrong size on FEndPhysicalConstraintSetting_AnimPosition");
static_assert(offsetof(FEndPhysicalConstraintSetting_AnimPosition, BoneName0) == 0x000000, "Member 'FEndPhysicalConstraintSetting_AnimPosition::BoneName0' has a wrong offset!");
static_assert(offsetof(FEndPhysicalConstraintSetting_AnimPosition, BoneName1) == 0x000008, "Member 'FEndPhysicalConstraintSetting_AnimPosition::BoneName1' has a wrong offset!");
static_assert(offsetof(FEndPhysicalConstraintSetting_AnimPosition, BoneInvMassBias0) == 0x000010, "Member 'FEndPhysicalConstraintSetting_AnimPosition::BoneInvMassBias0' has a wrong offset!");
static_assert(offsetof(FEndPhysicalConstraintSetting_AnimPosition, BoneInvMassBias1) == 0x000014, "Member 'FEndPhysicalConstraintSetting_AnimPosition::BoneInvMassBias1' has a wrong offset!");
static_assert(offsetof(FEndPhysicalConstraintSetting_AnimPosition, Stiffness) == 0x000018, "Member 'FEndPhysicalConstraintSetting_AnimPosition::Stiffness' has a wrong offset!");

// ScriptStruct EndGame.EndPhysicalConstraintBoneSetting
// 0x0038 (0x0038 - 0x0000)
struct FEndPhysicalConstraintBoneSetting final
{
public:
	class FName                                   BoneName;                                          // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           InfluenceRotationBoneNames;                        // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         Mass;                                              // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GravityScale;                                      // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendRate;                                         // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VelocityRate;                                      // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VelocityBlendRate;                                 // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTranslationOnly;                                  // 0x002C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DebugDrawRadius;                                   // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndPhysicalConstraintBoneSetting) == 0x000008, "Wrong alignment on FEndPhysicalConstraintBoneSetting");
static_assert(sizeof(FEndPhysicalConstraintBoneSetting) == 0x000038, "Wrong size on FEndPhysicalConstraintBoneSetting");
static_assert(offsetof(FEndPhysicalConstraintBoneSetting, BoneName) == 0x000000, "Member 'FEndPhysicalConstraintBoneSetting::BoneName' has a wrong offset!");
static_assert(offsetof(FEndPhysicalConstraintBoneSetting, InfluenceRotationBoneNames) == 0x000008, "Member 'FEndPhysicalConstraintBoneSetting::InfluenceRotationBoneNames' has a wrong offset!");
static_assert(offsetof(FEndPhysicalConstraintBoneSetting, Mass) == 0x000018, "Member 'FEndPhysicalConstraintBoneSetting::Mass' has a wrong offset!");
static_assert(offsetof(FEndPhysicalConstraintBoneSetting, GravityScale) == 0x00001C, "Member 'FEndPhysicalConstraintBoneSetting::GravityScale' has a wrong offset!");
static_assert(offsetof(FEndPhysicalConstraintBoneSetting, BlendRate) == 0x000020, "Member 'FEndPhysicalConstraintBoneSetting::BlendRate' has a wrong offset!");
static_assert(offsetof(FEndPhysicalConstraintBoneSetting, VelocityRate) == 0x000024, "Member 'FEndPhysicalConstraintBoneSetting::VelocityRate' has a wrong offset!");
static_assert(offsetof(FEndPhysicalConstraintBoneSetting, VelocityBlendRate) == 0x000028, "Member 'FEndPhysicalConstraintBoneSetting::VelocityBlendRate' has a wrong offset!");
static_assert(offsetof(FEndPhysicalConstraintBoneSetting, bTranslationOnly) == 0x00002C, "Member 'FEndPhysicalConstraintBoneSetting::bTranslationOnly' has a wrong offset!");
static_assert(offsetof(FEndPhysicalConstraintBoneSetting, DebugDrawRadius) == 0x000030, "Member 'FEndPhysicalConstraintBoneSetting::DebugDrawRadius' has a wrong offset!");

// ScriptStruct EndGame.EndPhysicalConstraintWireEvaluator
// 0x0020 (0x01E8 - 0x01C8)
struct FEndPhysicalConstraintWireEvaluator final : public FEndPhysicalConstraintEvaluator
{
public:
	float                                         ReleaseWireSpeed;                                  // 0x01C8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReleaseVelocityStiffness;                          // 0x01CC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D0[0x18];                                     // 0x01D0(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndPhysicalConstraintWireEvaluator) == 0x000008, "Wrong alignment on FEndPhysicalConstraintWireEvaluator");
static_assert(sizeof(FEndPhysicalConstraintWireEvaluator) == 0x0001E8, "Wrong size on FEndPhysicalConstraintWireEvaluator");
static_assert(offsetof(FEndPhysicalConstraintWireEvaluator, ReleaseWireSpeed) == 0x0001C8, "Member 'FEndPhysicalConstraintWireEvaluator::ReleaseWireSpeed' has a wrong offset!");
static_assert(offsetof(FEndPhysicalConstraintWireEvaluator, ReleaseVelocityStiffness) == 0x0001CC, "Member 'FEndPhysicalConstraintWireEvaluator::ReleaseVelocityStiffness' has a wrong offset!");

// ScriptStruct EndGame.EndCameraShakeParam
// 0x0068 (0x0068 - 0x0000)
struct alignas(0x08) FEndCameraShakeParam final
{
public:
	float                                         ShakeScale;                                        // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendInTime;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendOutTime;                                      // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LocationRange;                                     // 0x0010(0x000C)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RotationRange;                                     // 0x001C(0x000C)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28[0xC];                                       // 0x0028(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LocationAmplitude;                                 // 0x0034(0x000C)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RotationAmplitude;                                 // 0x0040(0x000C)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InnerRadius;                                       // 0x004C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OuterRadius;                                       // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Falloff;                                           // 0x0054(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_58[0x10];                                      // 0x0058(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndCameraShakeParam) == 0x000008, "Wrong alignment on FEndCameraShakeParam");
static_assert(sizeof(FEndCameraShakeParam) == 0x000068, "Wrong size on FEndCameraShakeParam");
static_assert(offsetof(FEndCameraShakeParam, ShakeScale) == 0x000000, "Member 'FEndCameraShakeParam::ShakeScale' has a wrong offset!");
static_assert(offsetof(FEndCameraShakeParam, Duration) == 0x000004, "Member 'FEndCameraShakeParam::Duration' has a wrong offset!");
static_assert(offsetof(FEndCameraShakeParam, BlendInTime) == 0x000008, "Member 'FEndCameraShakeParam::BlendInTime' has a wrong offset!");
static_assert(offsetof(FEndCameraShakeParam, BlendOutTime) == 0x00000C, "Member 'FEndCameraShakeParam::BlendOutTime' has a wrong offset!");
static_assert(offsetof(FEndCameraShakeParam, LocationRange) == 0x000010, "Member 'FEndCameraShakeParam::LocationRange' has a wrong offset!");
static_assert(offsetof(FEndCameraShakeParam, RotationRange) == 0x00001C, "Member 'FEndCameraShakeParam::RotationRange' has a wrong offset!");
static_assert(offsetof(FEndCameraShakeParam, LocationAmplitude) == 0x000034, "Member 'FEndCameraShakeParam::LocationAmplitude' has a wrong offset!");
static_assert(offsetof(FEndCameraShakeParam, RotationAmplitude) == 0x000040, "Member 'FEndCameraShakeParam::RotationAmplitude' has a wrong offset!");
static_assert(offsetof(FEndCameraShakeParam, InnerRadius) == 0x00004C, "Member 'FEndCameraShakeParam::InnerRadius' has a wrong offset!");
static_assert(offsetof(FEndCameraShakeParam, OuterRadius) == 0x000050, "Member 'FEndCameraShakeParam::OuterRadius' has a wrong offset!");
static_assert(offsetof(FEndCameraShakeParam, Falloff) == 0x000054, "Member 'FEndCameraShakeParam::Falloff' has a wrong offset!");

// ScriptStruct EndGame.EndPopupMessageColors
// 0x0040 (0x0040 - 0x0000)
struct FEndPopupMessageColors final
{
public:
	struct FLinearColor                           TopColor;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           BottomColor;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           OutlineColor;                                      // 0x0020(0x0010)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ShadowColor;                                       // 0x0030(0x0010)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndPopupMessageColors) == 0x000004, "Wrong alignment on FEndPopupMessageColors");
static_assert(sizeof(FEndPopupMessageColors) == 0x000040, "Wrong size on FEndPopupMessageColors");
static_assert(offsetof(FEndPopupMessageColors, TopColor) == 0x000000, "Member 'FEndPopupMessageColors::TopColor' has a wrong offset!");
static_assert(offsetof(FEndPopupMessageColors, BottomColor) == 0x000010, "Member 'FEndPopupMessageColors::BottomColor' has a wrong offset!");
static_assert(offsetof(FEndPopupMessageColors, OutlineColor) == 0x000020, "Member 'FEndPopupMessageColors::OutlineColor' has a wrong offset!");
static_assert(offsetof(FEndPopupMessageColors, ShadowColor) == 0x000030, "Member 'FEndPopupMessageColors::ShadowColor' has a wrong offset!");

// ScriptStruct EndGame.EndRagdollSEData
// 0x0058 (0x0058 - 0x0000)
struct FEndRagdollSEData final
{
public:
	struct FSQEXSEADSoundKey                      HitSEKey;                                          // 0x0000(0x0038)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         HitImpulseThreshold;                               // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HitDistanceThreshold;                              // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HitImpulseSizeMax;                                 // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundAttenuation*                      HitAttenuationSetting;                             // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundConcurrency*                      HitConcurrencySetting;                             // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndRagdollSEData) == 0x000008, "Wrong alignment on FEndRagdollSEData");
static_assert(sizeof(FEndRagdollSEData) == 0x000058, "Wrong size on FEndRagdollSEData");
static_assert(offsetof(FEndRagdollSEData, HitSEKey) == 0x000000, "Member 'FEndRagdollSEData::HitSEKey' has a wrong offset!");
static_assert(offsetof(FEndRagdollSEData, HitImpulseThreshold) == 0x000038, "Member 'FEndRagdollSEData::HitImpulseThreshold' has a wrong offset!");
static_assert(offsetof(FEndRagdollSEData, HitDistanceThreshold) == 0x00003C, "Member 'FEndRagdollSEData::HitDistanceThreshold' has a wrong offset!");
static_assert(offsetof(FEndRagdollSEData, HitImpulseSizeMax) == 0x000040, "Member 'FEndRagdollSEData::HitImpulseSizeMax' has a wrong offset!");
static_assert(offsetof(FEndRagdollSEData, HitAttenuationSetting) == 0x000048, "Member 'FEndRagdollSEData::HitAttenuationSetting' has a wrong offset!");
static_assert(offsetof(FEndRagdollSEData, HitConcurrencySetting) == 0x000050, "Member 'FEndRagdollSEData::HitConcurrencySetting' has a wrong offset!");

// ScriptStruct EndGame.EndShopMenuPriceColors
// 0x0030 (0x0030 - 0x0000)
struct FEndShopMenuPriceColors final
{
public:
	struct FLinearColor                           Default;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           High;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Low;                                               // 0x0020(0x0010)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndShopMenuPriceColors) == 0x000004, "Wrong alignment on FEndShopMenuPriceColors");
static_assert(sizeof(FEndShopMenuPriceColors) == 0x000030, "Wrong size on FEndShopMenuPriceColors");
static_assert(offsetof(FEndShopMenuPriceColors, Default) == 0x000000, "Member 'FEndShopMenuPriceColors::Default' has a wrong offset!");
static_assert(offsetof(FEndShopMenuPriceColors, High) == 0x000010, "Member 'FEndShopMenuPriceColors::High' has a wrong offset!");
static_assert(offsetof(FEndShopMenuPriceColors, Low) == 0x000020, "Member 'FEndShopMenuPriceColors::Low' has a wrong offset!");

// ScriptStruct EndGame.FA0122_AnimInstanceProxy
// 0x0060 (0x0520 - 0x04C0)
struct FFA0122_AnimInstanceProxy final : public FAnimInstanceProxy
{
public:
	uint8                                         Pad_4C0[0x60];                                     // 0x04C0(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFA0122_AnimInstanceProxy) == 0x000010, "Wrong alignment on FFA0122_AnimInstanceProxy");
static_assert(sizeof(FFA0122_AnimInstanceProxy) == 0x000520, "Wrong size on FFA0122_AnimInstanceProxy");

// ScriptStruct EndGame.FA0122_ArmHeightAndRate
// 0x0008 (0x0008 - 0x0000)
struct FFA0122_ArmHeightAndRate final
{
public:
	float                                         Rate;                                              // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Height;                                            // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFA0122_ArmHeightAndRate) == 0x000004, "Wrong alignment on FFA0122_ArmHeightAndRate");
static_assert(sizeof(FFA0122_ArmHeightAndRate) == 0x000008, "Wrong size on FFA0122_ArmHeightAndRate");
static_assert(offsetof(FFA0122_ArmHeightAndRate, Rate) == 0x000000, "Member 'FFA0122_ArmHeightAndRate::Rate' has a wrong offset!");
static_assert(offsetof(FFA0122_ArmHeightAndRate, Height) == 0x000004, "Member 'FFA0122_ArmHeightAndRate::Height' has a wrong offset!");

// ScriptStruct EndGame.FA0222_AnimInstanceProxy
// 0x0060 (0x0520 - 0x04C0)
struct FFA0222_AnimInstanceProxy final : public FAnimInstanceProxy
{
public:
	uint8                                         Pad_4C0[0x60];                                     // 0x04C0(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFA0222_AnimInstanceProxy) == 0x000010, "Wrong alignment on FFA0222_AnimInstanceProxy");
static_assert(sizeof(FFA0222_AnimInstanceProxy) == 0x000520, "Wrong size on FFA0222_AnimInstanceProxy");

// ScriptStruct EndGame.VfxLensFlareObjectData
// 0x0058 (0x0058 - 0x0000)
struct FVfxLensFlareObjectData final
{
public:
	int32                                         ResourceParameter;                                 // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         iDrawCount;                                        // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         fContinuationStartPosRatio;                        // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         fContinuationEndPosRatio;                          // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         fContinuationRandPosRatio;                         // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         fFitAngleRatio;                                    // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         fContinuationRotationZ;                            // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         fScaleCenter;                                      // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         fScaleOuter;                                       // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         fScaleRand;                                        // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ColorCenter;                                       // 0x0028(0x0010)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ColorOuter;                                        // 0x0038(0x0010)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ColorRand;                                         // 0x0048(0x0010)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVfxLensFlareObjectData) == 0x000004, "Wrong alignment on FVfxLensFlareObjectData");
static_assert(sizeof(FVfxLensFlareObjectData) == 0x000058, "Wrong size on FVfxLensFlareObjectData");
static_assert(offsetof(FVfxLensFlareObjectData, ResourceParameter) == 0x000000, "Member 'FVfxLensFlareObjectData::ResourceParameter' has a wrong offset!");
static_assert(offsetof(FVfxLensFlareObjectData, iDrawCount) == 0x000004, "Member 'FVfxLensFlareObjectData::iDrawCount' has a wrong offset!");
static_assert(offsetof(FVfxLensFlareObjectData, fContinuationStartPosRatio) == 0x000008, "Member 'FVfxLensFlareObjectData::fContinuationStartPosRatio' has a wrong offset!");
static_assert(offsetof(FVfxLensFlareObjectData, fContinuationEndPosRatio) == 0x00000C, "Member 'FVfxLensFlareObjectData::fContinuationEndPosRatio' has a wrong offset!");
static_assert(offsetof(FVfxLensFlareObjectData, fContinuationRandPosRatio) == 0x000010, "Member 'FVfxLensFlareObjectData::fContinuationRandPosRatio' has a wrong offset!");
static_assert(offsetof(FVfxLensFlareObjectData, fFitAngleRatio) == 0x000014, "Member 'FVfxLensFlareObjectData::fFitAngleRatio' has a wrong offset!");
static_assert(offsetof(FVfxLensFlareObjectData, fContinuationRotationZ) == 0x000018, "Member 'FVfxLensFlareObjectData::fContinuationRotationZ' has a wrong offset!");
static_assert(offsetof(FVfxLensFlareObjectData, fScaleCenter) == 0x00001C, "Member 'FVfxLensFlareObjectData::fScaleCenter' has a wrong offset!");
static_assert(offsetof(FVfxLensFlareObjectData, fScaleOuter) == 0x000020, "Member 'FVfxLensFlareObjectData::fScaleOuter' has a wrong offset!");
static_assert(offsetof(FVfxLensFlareObjectData, fScaleRand) == 0x000024, "Member 'FVfxLensFlareObjectData::fScaleRand' has a wrong offset!");
static_assert(offsetof(FVfxLensFlareObjectData, ColorCenter) == 0x000028, "Member 'FVfxLensFlareObjectData::ColorCenter' has a wrong offset!");
static_assert(offsetof(FVfxLensFlareObjectData, ColorOuter) == 0x000038, "Member 'FVfxLensFlareObjectData::ColorOuter' has a wrong offset!");
static_assert(offsetof(FVfxLensFlareObjectData, ColorRand) == 0x000048, "Member 'FVfxLensFlareObjectData::ColorRand' has a wrong offset!");

}

