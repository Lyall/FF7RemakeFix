#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: HSFLipSyncRuntime

#include "Basic.hpp"

#include "Engine_structs.hpp"


namespace SDK
{

// Enum HSFLipSyncRuntime.EHSFLipMapShapeAttributeType
// NumValues: 0x000A
enum class EHSFLipMapShapeAttributeType : uint8
{
	TranslateX                               = 0,
	TranslateY                               = 1,
	TranslateZ                               = 2,
	RotateX                                  = 3,
	RotateY                                  = 4,
	RotateZ                                  = 5,
	ScaleX                                   = 6,
	ScaleY                                   = 7,
	ScaleZ                                   = 8,
	Max                                      = 9,
};

// Enum HSFLipSyncRuntime.EHSFLipSyncKeyframeMethod
// NumValues: 0x0003
enum class EHSFLipSyncKeyframeMethod : uint8
{
	Classic                                  = 0,
	Simple                                   = 1,
	EHSFLipSyncKeyframeMethod_MAX            = 2,
};

// ScriptStruct HSFLipSyncRuntime.HSFLipSyncInput
// 0x0020 (0x0020 - 0x0000)
struct FHSFLipSyncInput final
{
public:
	class UHSFLipSyncDataPack*                    Pack;                                              // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   KeyName;                                           // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MappingName;                                       // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EvaluateTime;                                      // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHSFLipSyncInput) == 0x000008, "Wrong alignment on FHSFLipSyncInput");
static_assert(sizeof(FHSFLipSyncInput) == 0x000020, "Wrong size on FHSFLipSyncInput");
static_assert(offsetof(FHSFLipSyncInput, Pack) == 0x000000, "Member 'FHSFLipSyncInput::Pack' has a wrong offset!");
static_assert(offsetof(FHSFLipSyncInput, KeyName) == 0x000008, "Member 'FHSFLipSyncInput::KeyName' has a wrong offset!");
static_assert(offsetof(FHSFLipSyncInput, MappingName) == 0x000010, "Member 'FHSFLipSyncInput::MappingName' has a wrong offset!");
static_assert(offsetof(FHSFLipSyncInput, EvaluateTime) == 0x000018, "Member 'FHSFLipSyncInput::EvaluateTime' has a wrong offset!");

// ScriptStruct HSFLipSyncRuntime.HSFLipMapShapeAttribute
// 0x0050 (0x0050 - 0x0000)
struct FHSFLipMapShapeAttribute final
{
public:
	TMap<EHSFLipMapShapeAttributeType, float>     Data;                                              // 0x0000(0x0050)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHSFLipMapShapeAttribute) == 0x000008, "Wrong alignment on FHSFLipMapShapeAttribute");
static_assert(sizeof(FHSFLipMapShapeAttribute) == 0x000050, "Wrong size on FHSFLipMapShapeAttribute");
static_assert(offsetof(FHSFLipMapShapeAttribute, Data) == 0x000000, "Member 'FHSFLipMapShapeAttribute::Data' has a wrong offset!");

// ScriptStruct HSFLipSyncRuntime.HSFLipMapShape
// 0x0078 (0x0078 - 0x0000)
struct FHSFLipMapShape final
{
public:
	TMap<class FName, struct FHSFLipMapShapeAttribute> Attributes;                                        // 0x0000(0x0050)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         AudioMin;                                          // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AudioMax;                                          // 0x0054(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AudioPower;                                        // 0x0058(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBlend;                                            // 0x005C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendIn;                                           // 0x0060(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendOut;                                          // 0x0064(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRandomize;                                        // 0x0068(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRandomizePerChannel;                              // 0x0069(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6A[0x2];                                       // 0x006A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RandomMin;                                         // 0x006C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RandomMax;                                         // 0x0070(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceShape;                                       // 0x0074(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_75[0x3];                                       // 0x0075(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHSFLipMapShape) == 0x000008, "Wrong alignment on FHSFLipMapShape");
static_assert(sizeof(FHSFLipMapShape) == 0x000078, "Wrong size on FHSFLipMapShape");
static_assert(offsetof(FHSFLipMapShape, Attributes) == 0x000000, "Member 'FHSFLipMapShape::Attributes' has a wrong offset!");
static_assert(offsetof(FHSFLipMapShape, AudioMin) == 0x000050, "Member 'FHSFLipMapShape::AudioMin' has a wrong offset!");
static_assert(offsetof(FHSFLipMapShape, AudioMax) == 0x000054, "Member 'FHSFLipMapShape::AudioMax' has a wrong offset!");
static_assert(offsetof(FHSFLipMapShape, AudioPower) == 0x000058, "Member 'FHSFLipMapShape::AudioPower' has a wrong offset!");
static_assert(offsetof(FHSFLipMapShape, bBlend) == 0x00005C, "Member 'FHSFLipMapShape::bBlend' has a wrong offset!");
static_assert(offsetof(FHSFLipMapShape, BlendIn) == 0x000060, "Member 'FHSFLipMapShape::BlendIn' has a wrong offset!");
static_assert(offsetof(FHSFLipMapShape, BlendOut) == 0x000064, "Member 'FHSFLipMapShape::BlendOut' has a wrong offset!");
static_assert(offsetof(FHSFLipMapShape, bRandomize) == 0x000068, "Member 'FHSFLipMapShape::bRandomize' has a wrong offset!");
static_assert(offsetof(FHSFLipMapShape, bRandomizePerChannel) == 0x000069, "Member 'FHSFLipMapShape::bRandomizePerChannel' has a wrong offset!");
static_assert(offsetof(FHSFLipMapShape, RandomMin) == 0x00006C, "Member 'FHSFLipMapShape::RandomMin' has a wrong offset!");
static_assert(offsetof(FHSFLipMapShape, RandomMax) == 0x000070, "Member 'FHSFLipMapShape::RandomMax' has a wrong offset!");
static_assert(offsetof(FHSFLipMapShape, bForceShape) == 0x000074, "Member 'FHSFLipMapShape::bForceShape' has a wrong offset!");

// ScriptStruct HSFLipSyncRuntime.AnimNode_HSFLipSync
// 0x0380 (0x03B0 - 0x0030)
struct alignas(0x10) FAnimNode_HSFLipSync : public FAnimNode_Base
{
public:
	TMap<class FName, class UHSFLipMap*>          LipMaps;                                           // 0x0030(0x0050)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FHSFLipSyncInput                       Input;                                             // 0x0080(0x0020)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FHSFLipMapShape                        DummyShape;                                        // 0x00A0(0x0078)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                         Pad_118[0x298];                                    // 0x0118(0x0298)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_HSFLipSync) == 0x000010, "Wrong alignment on FAnimNode_HSFLipSync");
static_assert(sizeof(FAnimNode_HSFLipSync) == 0x0003B0, "Wrong size on FAnimNode_HSFLipSync");
static_assert(offsetof(FAnimNode_HSFLipSync, LipMaps) == 0x000030, "Member 'FAnimNode_HSFLipSync::LipMaps' has a wrong offset!");
static_assert(offsetof(FAnimNode_HSFLipSync, Input) == 0x000080, "Member 'FAnimNode_HSFLipSync::Input' has a wrong offset!");
static_assert(offsetof(FAnimNode_HSFLipSync, DummyShape) == 0x0000A0, "Member 'FAnimNode_HSFLipSync::DummyShape' has a wrong offset!");

// ScriptStruct HSFLipSyncRuntime.HSFLipSyncDataInfo
// 0x0028 (0x0028 - 0x0000)
struct FHSFLipSyncDataInfo final
{
public:
	class FName                                   version;                                           // 0x0000(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           KeyOrder;                                          // 0x0008(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	float                                         AudioLength;                                       // 0x0018(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AvgAudioPower;                                     // 0x001C(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxAudioPower;                                     // 0x0020(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHSFLipSyncDataInfo) == 0x000008, "Wrong alignment on FHSFLipSyncDataInfo");
static_assert(sizeof(FHSFLipSyncDataInfo) == 0x000028, "Wrong size on FHSFLipSyncDataInfo");
static_assert(offsetof(FHSFLipSyncDataInfo, version) == 0x000000, "Member 'FHSFLipSyncDataInfo::version' has a wrong offset!");
static_assert(offsetof(FHSFLipSyncDataInfo, KeyOrder) == 0x000008, "Member 'FHSFLipSyncDataInfo::KeyOrder' has a wrong offset!");
static_assert(offsetof(FHSFLipSyncDataInfo, AudioLength) == 0x000018, "Member 'FHSFLipSyncDataInfo::AudioLength' has a wrong offset!");
static_assert(offsetof(FHSFLipSyncDataInfo, AvgAudioPower) == 0x00001C, "Member 'FHSFLipSyncDataInfo::AvgAudioPower' has a wrong offset!");
static_assert(offsetof(FHSFLipSyncDataInfo, MaxAudioPower) == 0x000020, "Member 'FHSFLipSyncDataInfo::MaxAudioPower' has a wrong offset!");

// ScriptStruct HSFLipSyncRuntime.HSFLipSyncDataEmotion
// 0x001C (0x001C - 0x0000)
struct FHSFLipSyncDataEmotion final
{
public:
	float                                         StartTime;                                         // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndTime;                                           // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Calm;                                              // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Anger;                                             // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Joy;                                               // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Sorrow;                                            // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ExcitementLevel;                                   // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHSFLipSyncDataEmotion) == 0x000004, "Wrong alignment on FHSFLipSyncDataEmotion");
static_assert(sizeof(FHSFLipSyncDataEmotion) == 0x00001C, "Wrong size on FHSFLipSyncDataEmotion");
static_assert(offsetof(FHSFLipSyncDataEmotion, StartTime) == 0x000000, "Member 'FHSFLipSyncDataEmotion::StartTime' has a wrong offset!");
static_assert(offsetof(FHSFLipSyncDataEmotion, EndTime) == 0x000004, "Member 'FHSFLipSyncDataEmotion::EndTime' has a wrong offset!");
static_assert(offsetof(FHSFLipSyncDataEmotion, Calm) == 0x000008, "Member 'FHSFLipSyncDataEmotion::Calm' has a wrong offset!");
static_assert(offsetof(FHSFLipSyncDataEmotion, Anger) == 0x00000C, "Member 'FHSFLipSyncDataEmotion::Anger' has a wrong offset!");
static_assert(offsetof(FHSFLipSyncDataEmotion, Joy) == 0x000010, "Member 'FHSFLipSyncDataEmotion::Joy' has a wrong offset!");
static_assert(offsetof(FHSFLipSyncDataEmotion, Sorrow) == 0x000014, "Member 'FHSFLipSyncDataEmotion::Sorrow' has a wrong offset!");
static_assert(offsetof(FHSFLipSyncDataEmotion, ExcitementLevel) == 0x000018, "Member 'FHSFLipSyncDataEmotion::ExcitementLevel' has a wrong offset!");

// ScriptStruct HSFLipSyncRuntime.HSFLipSyncDataKeyFrame
// 0x0068 (0x0068 - 0x0000)
struct FHSFLipSyncDataKeyFrame final
{
public:
	float                                         StartTime;                                         // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndTime;                                           // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Center;                                            // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Power;                                             // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Phoneme;                                           // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, float>                      Shapes;                                            // 0x0018(0x0050)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHSFLipSyncDataKeyFrame) == 0x000008, "Wrong alignment on FHSFLipSyncDataKeyFrame");
static_assert(sizeof(FHSFLipSyncDataKeyFrame) == 0x000068, "Wrong size on FHSFLipSyncDataKeyFrame");
static_assert(offsetof(FHSFLipSyncDataKeyFrame, StartTime) == 0x000000, "Member 'FHSFLipSyncDataKeyFrame::StartTime' has a wrong offset!");
static_assert(offsetof(FHSFLipSyncDataKeyFrame, EndTime) == 0x000004, "Member 'FHSFLipSyncDataKeyFrame::EndTime' has a wrong offset!");
static_assert(offsetof(FHSFLipSyncDataKeyFrame, Center) == 0x000008, "Member 'FHSFLipSyncDataKeyFrame::Center' has a wrong offset!");
static_assert(offsetof(FHSFLipSyncDataKeyFrame, Power) == 0x00000C, "Member 'FHSFLipSyncDataKeyFrame::Power' has a wrong offset!");
static_assert(offsetof(FHSFLipSyncDataKeyFrame, Phoneme) == 0x000010, "Member 'FHSFLipSyncDataKeyFrame::Phoneme' has a wrong offset!");
static_assert(offsetof(FHSFLipSyncDataKeyFrame, Shapes) == 0x000018, "Member 'FHSFLipSyncDataKeyFrame::Shapes' has a wrong offset!");

// ScriptStruct HSFLipSyncRuntime.HSFLipSyncDataLsdmlPoseWeights
// 0x0010 (0x0010 - 0x0000)
struct FHSFLipSyncDataLsdmlPoseWeights final
{
public:
	TArray<float>                                 Weights;                                           // 0x0000(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHSFLipSyncDataLsdmlPoseWeights) == 0x000008, "Wrong alignment on FHSFLipSyncDataLsdmlPoseWeights");
static_assert(sizeof(FHSFLipSyncDataLsdmlPoseWeights) == 0x000010, "Wrong size on FHSFLipSyncDataLsdmlPoseWeights");
static_assert(offsetof(FHSFLipSyncDataLsdmlPoseWeights, Weights) == 0x000000, "Member 'FHSFLipSyncDataLsdmlPoseWeights::Weights' has a wrong offset!");

// ScriptStruct HSFLipSyncRuntime.HSFLipSyncData
// 0x0090 (0x0090 - 0x0000)
struct FHSFLipSyncData final
{
public:
	struct FHSFLipSyncDataInfo                    Info;                                              // 0x0000(0x0028)(Edit, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FHSFLipSyncDataKeyFrame>        KeyFrames;                                         // 0x0028(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FHSFLipSyncDataKeyFrame>        OverrideKeyFrames;                                 // 0x0038(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bUseLsdml;                                         // 0x0048(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FHSFLipSyncDataLsdmlPoseWeights> LsdmlPoseWeights;                                  // 0x0050(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<class FName>                           LsdmlPoseNames;                                    // 0x0060(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FHSFLipSyncDataEmotion>         Emotions;                                          // 0x0070(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FHSFLipSyncDataEmotion>         OverrideEmotions;                                  // 0x0080(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHSFLipSyncData) == 0x000008, "Wrong alignment on FHSFLipSyncData");
static_assert(sizeof(FHSFLipSyncData) == 0x000090, "Wrong size on FHSFLipSyncData");
static_assert(offsetof(FHSFLipSyncData, Info) == 0x000000, "Member 'FHSFLipSyncData::Info' has a wrong offset!");
static_assert(offsetof(FHSFLipSyncData, KeyFrames) == 0x000028, "Member 'FHSFLipSyncData::KeyFrames' has a wrong offset!");
static_assert(offsetof(FHSFLipSyncData, OverrideKeyFrames) == 0x000038, "Member 'FHSFLipSyncData::OverrideKeyFrames' has a wrong offset!");
static_assert(offsetof(FHSFLipSyncData, bUseLsdml) == 0x000048, "Member 'FHSFLipSyncData::bUseLsdml' has a wrong offset!");
static_assert(offsetof(FHSFLipSyncData, LsdmlPoseWeights) == 0x000050, "Member 'FHSFLipSyncData::LsdmlPoseWeights' has a wrong offset!");
static_assert(offsetof(FHSFLipSyncData, LsdmlPoseNames) == 0x000060, "Member 'FHSFLipSyncData::LsdmlPoseNames' has a wrong offset!");
static_assert(offsetof(FHSFLipSyncData, Emotions) == 0x000070, "Member 'FHSFLipSyncData::Emotions' has a wrong offset!");
static_assert(offsetof(FHSFLipSyncData, OverrideEmotions) == 0x000080, "Member 'FHSFLipSyncData::OverrideEmotions' has a wrong offset!");

// ScriptStruct HSFLipSyncRuntime.LipmapCore
// 0x0080 (0x0080 - 0x0000)
struct alignas(0x08) FLipmapCore final
{
public:
	uint8                                         Pad_0[0x80];                                       // 0x0000(0x0080)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLipmapCore) == 0x000008, "Wrong alignment on FLipmapCore");
static_assert(sizeof(FLipmapCore) == 0x000080, "Wrong size on FLipmapCore");

// ScriptStruct HSFLipSyncRuntime.LsdmlAnimPlayerCore
// 0x0038 (0x0038 - 0x0000)
struct alignas(0x08) FLsdmlAnimPlayerCore final
{
public:
	uint8                                         Pad_0[0x38];                                       // 0x0000(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLsdmlAnimPlayerCore) == 0x000008, "Wrong alignment on FLsdmlAnimPlayerCore");
static_assert(sizeof(FLsdmlAnimPlayerCore) == 0x000038, "Wrong size on FLsdmlAnimPlayerCore");

// ScriptStruct HSFLipSyncRuntime.LsdmlCore
// 0x0030 (0x0030 - 0x0000)
struct alignas(0x08) FLsdmlCore final
{
public:
	uint8                                         Pad_0[0x30];                                       // 0x0000(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLsdmlCore) == 0x000008, "Wrong alignment on FLsdmlCore");
static_assert(sizeof(FLsdmlCore) == 0x000030, "Wrong size on FLsdmlCore");

// ScriptStruct HSFLipSyncRuntime.TransformWithEuler
// 0x0040 (0x0040 - 0x0000)
struct alignas(0x10) FTransformWithEuler final
{
public:
	uint8                                         Pad_0[0x40];                                       // 0x0000(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTransformWithEuler) == 0x000010, "Wrong alignment on FTransformWithEuler");
static_assert(sizeof(FTransformWithEuler) == 0x000040, "Wrong size on FTransformWithEuler");

}

