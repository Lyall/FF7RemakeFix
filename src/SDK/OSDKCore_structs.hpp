#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: OSDKCore

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum OSDKCore.EOSDKCommunity
// NumValues: 0x0012
enum class EOSDKCommunity : uint8
{
	steam                                    = 0,
	live                                     = 1,
	psn                                      = 2,
	membership                               = 3,
	oculus                                   = 4,
	facebook                                 = 5,
	web                                      = 6,
	feral                                    = 7,
	os                                       = 8,
	unittest                                 = 9,
	gamecenter                               = 10,
	google                                   = 11,
	microsoft                                = 12,
	corporate                                = 13,
	amazon                                   = 14,
	noauth                                   = 15,
	unknown                                  = 16,
	EOSDKCommunity_MAX                       = 17,
};

// Enum OSDKCore.EOSDKFutureFinishResult
// NumValues: 0x0004
enum class EOSDKFutureFinishResult : uint8
{
	Ready                                    = 0,
	Cancelled                                = 1,
	Failed                                   = 2,
	EOSDKFutureFinishResult_MAX              = 3,
};

// Enum OSDKCore.EOSDKFutureStatus
// NumValues: 0x0006
enum class EOSDKFutureStatus : uint8
{
	Invalid                                  = 0,
	Pending                                  = 1,
	Ready                                    = 2,
	Cancelled                                = 3,
	Failed                                   = 4,
	EOSDKFutureStatus_MAX                    = 5,
};

// Enum OSDKCore.EOSDKHTTPClientLoggingFlags
// NumValues: 0x000D
enum class EOSDKHTTPClientLoggingFlags : uint8
{
	LOG_DISABLED                             = 0,
	LOG_REQUEST                              = 1,
	LOG_REQUEST_SOME_HEADERS                 = 2,
	LOG_REQUEST_ALL_HEADERS                  = 3,
	LOG_REQUEST_BODY                         = 4,
	LOG_REQUEST_ANY                          = 5,
	LOG_RESPONSE                             = 6,
	LOG_RESPONSE_SOME_HEADERS                = 7,
	LOG_RESPONSE_ALL_HEADERS                 = 8,
	LOG_RESPONSE_BODY                        = 9,
	LOG_RESPONSE_ANY                         = 10,
	LOG_DEFAULT                              = 11,
	LOG_MAX                                  = 12,
};

// Enum OSDKCore.EOSDKLogLevel
// NumValues: 0x0007
enum class EOSDKLogLevel : uint8
{
	LEVEL_OFF                                = 0,
	LEVEL_FATAL                              = 1,
	LEVEL_ERROR                              = 2,
	LEVEL_WARN                               = 3,
	LEVEL_INFO                               = 4,
	LEVEL_DEBUG                              = 5,
	LEVEL_MAX                                = 6,
};

// ScriptStruct OSDKCore.OSDKAuthenticationInfo
// 0x0040 (0x0040 - 0x0000)
struct FOSDKAuthenticationInfo final
{
public:
	class FString                                 ProjectName;                                       // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LoginUrl;                                          // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SignupURL;                                         // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TokenExpiration;                                   // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOSDKAuthenticationInfo) == 0x000008, "Wrong alignment on FOSDKAuthenticationInfo");
static_assert(sizeof(FOSDKAuthenticationInfo) == 0x000040, "Wrong size on FOSDKAuthenticationInfo");
static_assert(offsetof(FOSDKAuthenticationInfo, ProjectName) == 0x000000, "Member 'FOSDKAuthenticationInfo::ProjectName' has a wrong offset!");
static_assert(offsetof(FOSDKAuthenticationInfo, LoginUrl) == 0x000010, "Member 'FOSDKAuthenticationInfo::LoginUrl' has a wrong offset!");
static_assert(offsetof(FOSDKAuthenticationInfo, SignupURL) == 0x000020, "Member 'FOSDKAuthenticationInfo::SignupURL' has a wrong offset!");
static_assert(offsetof(FOSDKAuthenticationInfo, TokenExpiration) == 0x000030, "Member 'FOSDKAuthenticationInfo::TokenExpiration' has a wrong offset!");

// ScriptStruct OSDKCore.OSDKClientConfig
// 0x0060 (0x0060 - 0x0000)
struct FOSDKClientConfig final
{
public:
	class FString                                 ProjectName;                                       // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LoginUrl;                                          // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SignupURL;                                         // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Revision;                                          // 0x0030(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ConfigSandbox;                                     // 0x0040(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserSandbox;                                       // 0x0050(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOSDKClientConfig) == 0x000008, "Wrong alignment on FOSDKClientConfig");
static_assert(sizeof(FOSDKClientConfig) == 0x000060, "Wrong size on FOSDKClientConfig");
static_assert(offsetof(FOSDKClientConfig, ProjectName) == 0x000000, "Member 'FOSDKClientConfig::ProjectName' has a wrong offset!");
static_assert(offsetof(FOSDKClientConfig, LoginUrl) == 0x000010, "Member 'FOSDKClientConfig::LoginUrl' has a wrong offset!");
static_assert(offsetof(FOSDKClientConfig, SignupURL) == 0x000020, "Member 'FOSDKClientConfig::SignupURL' has a wrong offset!");
static_assert(offsetof(FOSDKClientConfig, Revision) == 0x000030, "Member 'FOSDKClientConfig::Revision' has a wrong offset!");
static_assert(offsetof(FOSDKClientConfig, ConfigSandbox) == 0x000040, "Member 'FOSDKClientConfig::ConfigSandbox' has a wrong offset!");
static_assert(offsetof(FOSDKClientConfig, UserSandbox) == 0x000050, "Member 'FOSDKClientConfig::UserSandbox' has a wrong offset!");

// ScriptStruct OSDKCore.OSDKHTTPClient
// 0x0001 (0x0001 - 0x0000)
struct FOSDKHTTPClient final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FOSDKHTTPClient) == 0x000001, "Wrong alignment on FOSDKHTTPClient");
static_assert(sizeof(FOSDKHTTPClient) == 0x000001, "Wrong size on FOSDKHTTPClient");

// ScriptStruct OSDKCore.OSDKNetworkInfo
// 0x0030 (0x0030 - 0x0000)
struct FOSDKNetworkInfo final
{
public:
	class FString                                 DiscoveryURL;                                      // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BaseURL;                                           // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PublicIP;                                          // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOSDKNetworkInfo) == 0x000008, "Wrong alignment on FOSDKNetworkInfo");
static_assert(sizeof(FOSDKNetworkInfo) == 0x000030, "Wrong size on FOSDKNetworkInfo");
static_assert(offsetof(FOSDKNetworkInfo, DiscoveryURL) == 0x000000, "Member 'FOSDKNetworkInfo::DiscoveryURL' has a wrong offset!");
static_assert(offsetof(FOSDKNetworkInfo, BaseURL) == 0x000010, "Member 'FOSDKNetworkInfo::BaseURL' has a wrong offset!");
static_assert(offsetof(FOSDKNetworkInfo, PublicIP) == 0x000020, "Member 'FOSDKNetworkInfo::PublicIP' has a wrong offset!");

// ScriptStruct OSDKCore.OSDKSandboxInfo
// 0x0020 (0x0020 - 0x0000)
struct FOSDKSandboxInfo final
{
public:
	class FString                                 User;                                              // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Config;                                            // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOSDKSandboxInfo) == 0x000008, "Wrong alignment on FOSDKSandboxInfo");
static_assert(sizeof(FOSDKSandboxInfo) == 0x000020, "Wrong size on FOSDKSandboxInfo");
static_assert(offsetof(FOSDKSandboxInfo, User) == 0x000000, "Member 'FOSDKSandboxInfo::User' has a wrong offset!");
static_assert(offsetof(FOSDKSandboxInfo, Config) == 0x000010, "Member 'FOSDKSandboxInfo::Config' has a wrong offset!");

// ScriptStruct OSDKCore.OSDKGeolocationInfo
// 0x0048 (0x0048 - 0x0000)
struct FOSDKGeolocationInfo final
{
public:
	class FString                                 Country;                                           // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 City;                                              // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Region;                                            // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Latitude;                                          // 0x0030(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Longitude;                                         // 0x0034(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Timezone;                                          // 0x0038(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOSDKGeolocationInfo) == 0x000008, "Wrong alignment on FOSDKGeolocationInfo");
static_assert(sizeof(FOSDKGeolocationInfo) == 0x000048, "Wrong size on FOSDKGeolocationInfo");
static_assert(offsetof(FOSDKGeolocationInfo, Country) == 0x000000, "Member 'FOSDKGeolocationInfo::Country' has a wrong offset!");
static_assert(offsetof(FOSDKGeolocationInfo, City) == 0x000010, "Member 'FOSDKGeolocationInfo::City' has a wrong offset!");
static_assert(offsetof(FOSDKGeolocationInfo, Region) == 0x000020, "Member 'FOSDKGeolocationInfo::Region' has a wrong offset!");
static_assert(offsetof(FOSDKGeolocationInfo, Latitude) == 0x000030, "Member 'FOSDKGeolocationInfo::Latitude' has a wrong offset!");
static_assert(offsetof(FOSDKGeolocationInfo, Longitude) == 0x000034, "Member 'FOSDKGeolocationInfo::Longitude' has a wrong offset!");
static_assert(offsetof(FOSDKGeolocationInfo, Timezone) == 0x000038, "Member 'FOSDKGeolocationInfo::Timezone' has a wrong offset!");

// ScriptStruct OSDKCore.OSDKClientInfo
// 0x00D8 (0x00D8 - 0x0000)
struct FOSDKClientInfo final
{
public:
	struct FOSDKNetworkInfo                       Network;                                           // 0x0000(0x0030)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FOSDKSandboxInfo                       Sandbox;                                           // 0x0030(0x0020)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FOSDKGeolocationInfo                   Geolocation;                                       // 0x0050(0x0048)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FOSDKAuthenticationInfo                Authentication;                                    // 0x0098(0x0040)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOSDKClientInfo) == 0x000008, "Wrong alignment on FOSDKClientInfo");
static_assert(sizeof(FOSDKClientInfo) == 0x0000D8, "Wrong size on FOSDKClientInfo");
static_assert(offsetof(FOSDKClientInfo, Network) == 0x000000, "Member 'FOSDKClientInfo::Network' has a wrong offset!");
static_assert(offsetof(FOSDKClientInfo, Sandbox) == 0x000030, "Member 'FOSDKClientInfo::Sandbox' has a wrong offset!");
static_assert(offsetof(FOSDKClientInfo, Geolocation) == 0x000050, "Member 'FOSDKClientInfo::Geolocation' has a wrong offset!");
static_assert(offsetof(FOSDKClientInfo, Authentication) == 0x000098, "Member 'FOSDKClientInfo::Authentication' has a wrong offset!");

// ScriptStruct OSDKCore.OSDKGameInfo
// 0x0040 (0x0040 - 0x0000)
struct FOSDKGameInfo final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 version;                                           // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BuildId;                                           // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OsdkVersion;                                       // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOSDKGameInfo) == 0x000008, "Wrong alignment on FOSDKGameInfo");
static_assert(sizeof(FOSDKGameInfo) == 0x000040, "Wrong size on FOSDKGameInfo");
static_assert(offsetof(FOSDKGameInfo, Name) == 0x000000, "Member 'FOSDKGameInfo::Name' has a wrong offset!");
static_assert(offsetof(FOSDKGameInfo, version) == 0x000010, "Member 'FOSDKGameInfo::version' has a wrong offset!");
static_assert(offsetof(FOSDKGameInfo, BuildId) == 0x000020, "Member 'FOSDKGameInfo::BuildId' has a wrong offset!");
static_assert(offsetof(FOSDKGameInfo, OsdkVersion) == 0x000030, "Member 'FOSDKGameInfo::OsdkVersion' has a wrong offset!");

// ScriptStruct OSDKCore.OSDKInfo
// 0x0060 (0x0060 - 0x0000)
struct FOSDKInfo final
{
public:
	class FString                                 SessionId;                                         // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 HardwareName;                                      // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FOSDKGameInfo                          Game;                                              // 0x0020(0x0040)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOSDKInfo) == 0x000008, "Wrong alignment on FOSDKInfo");
static_assert(sizeof(FOSDKInfo) == 0x000060, "Wrong size on FOSDKInfo");
static_assert(offsetof(FOSDKInfo, SessionId) == 0x000000, "Member 'FOSDKInfo::SessionId' has a wrong offset!");
static_assert(offsetof(FOSDKInfo, HardwareName) == 0x000010, "Member 'FOSDKInfo::HardwareName' has a wrong offset!");
static_assert(offsetof(FOSDKInfo, Game) == 0x000020, "Member 'FOSDKInfo::Game' has a wrong offset!");

// ScriptStruct OSDKCore.OSDKProfileId
// 0x0028 (0x0028 - 0x0000)
struct FOSDKProfileId final
{
public:
	EOSDKCommunity                                Community;                                         // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 UserId;                                            // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0018(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOSDKProfileId) == 0x000008, "Wrong alignment on FOSDKProfileId");
static_assert(sizeof(FOSDKProfileId) == 0x000028, "Wrong size on FOSDKProfileId");
static_assert(offsetof(FOSDKProfileId, Community) == 0x000000, "Member 'FOSDKProfileId::Community' has a wrong offset!");
static_assert(offsetof(FOSDKProfileId, UserId) == 0x000008, "Member 'FOSDKProfileId::UserId' has a wrong offset!");
static_assert(offsetof(FOSDKProfileId, Name) == 0x000018, "Member 'FOSDKProfileId::Name' has a wrong offset!");

// ScriptStruct OSDKCore.OSDKServerInfo
// 0x0048 (0x0048 - 0x0000)
struct FOSDKServerInfo final
{
public:
	float                                         PingTime;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeDifference;                                    // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 HostName;                                          // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ClusterEnvironment;                                // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ServerVersion;                                     // 0x0028(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 APIVersion;                                        // 0x0038(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOSDKServerInfo) == 0x000008, "Wrong alignment on FOSDKServerInfo");
static_assert(sizeof(FOSDKServerInfo) == 0x000048, "Wrong size on FOSDKServerInfo");
static_assert(offsetof(FOSDKServerInfo, PingTime) == 0x000000, "Member 'FOSDKServerInfo::PingTime' has a wrong offset!");
static_assert(offsetof(FOSDKServerInfo, TimeDifference) == 0x000004, "Member 'FOSDKServerInfo::TimeDifference' has a wrong offset!");
static_assert(offsetof(FOSDKServerInfo, HostName) == 0x000008, "Member 'FOSDKServerInfo::HostName' has a wrong offset!");
static_assert(offsetof(FOSDKServerInfo, ClusterEnvironment) == 0x000018, "Member 'FOSDKServerInfo::ClusterEnvironment' has a wrong offset!");
static_assert(offsetof(FOSDKServerInfo, ServerVersion) == 0x000028, "Member 'FOSDKServerInfo::ServerVersion' has a wrong offset!");
static_assert(offsetof(FOSDKServerInfo, APIVersion) == 0x000038, "Member 'FOSDKServerInfo::APIVersion' has a wrong offset!");

// ScriptStruct OSDKCore.OSDKHTTPStatistics
// 0x0058 (0x0058 - 0x0000)
struct FOSDKHTTPStatistics final
{
public:
	int32                                         CurrentCountOfQueuedRequests;                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxCountOfQueuedRequests;                          // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentCountOfActiveRequests;                      // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxCountOfActiveRequests;                          // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CountOfCompletedRequests;                          // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CountOfResponseSuccesses;                          // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CountOfResponseFailures;                           // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CountOfResponseCanceled;                           // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SumOfSerializationMilliseconds;                    // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxOfSerializationMilliseconds;                    // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SumOfDeserializationMilliseconds;                  // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxOfDeserializationMilliseconds;                  // 0x002C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SumOfQueuedMilliseconds;                           // 0x0030(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxOfQueuedMilliseconds;                           // 0x0034(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SumOfTransferMilliseconds;                         // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxOfTransferMilliseconds;                         // 0x003C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SumOfRequestMilliseconds;                          // 0x0040(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxOfRequestMilliseconds;                          // 0x0044(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SumOfSentBytes;                                    // 0x0048(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxOfSentBytes;                                    // 0x004C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SumOfReceivedBytes;                                // 0x0050(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxOfReceivedBytes;                                // 0x0054(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOSDKHTTPStatistics) == 0x000004, "Wrong alignment on FOSDKHTTPStatistics");
static_assert(sizeof(FOSDKHTTPStatistics) == 0x000058, "Wrong size on FOSDKHTTPStatistics");
static_assert(offsetof(FOSDKHTTPStatistics, CurrentCountOfQueuedRequests) == 0x000000, "Member 'FOSDKHTTPStatistics::CurrentCountOfQueuedRequests' has a wrong offset!");
static_assert(offsetof(FOSDKHTTPStatistics, MaxCountOfQueuedRequests) == 0x000004, "Member 'FOSDKHTTPStatistics::MaxCountOfQueuedRequests' has a wrong offset!");
static_assert(offsetof(FOSDKHTTPStatistics, CurrentCountOfActiveRequests) == 0x000008, "Member 'FOSDKHTTPStatistics::CurrentCountOfActiveRequests' has a wrong offset!");
static_assert(offsetof(FOSDKHTTPStatistics, MaxCountOfActiveRequests) == 0x00000C, "Member 'FOSDKHTTPStatistics::MaxCountOfActiveRequests' has a wrong offset!");
static_assert(offsetof(FOSDKHTTPStatistics, CountOfCompletedRequests) == 0x000010, "Member 'FOSDKHTTPStatistics::CountOfCompletedRequests' has a wrong offset!");
static_assert(offsetof(FOSDKHTTPStatistics, CountOfResponseSuccesses) == 0x000014, "Member 'FOSDKHTTPStatistics::CountOfResponseSuccesses' has a wrong offset!");
static_assert(offsetof(FOSDKHTTPStatistics, CountOfResponseFailures) == 0x000018, "Member 'FOSDKHTTPStatistics::CountOfResponseFailures' has a wrong offset!");
static_assert(offsetof(FOSDKHTTPStatistics, CountOfResponseCanceled) == 0x00001C, "Member 'FOSDKHTTPStatistics::CountOfResponseCanceled' has a wrong offset!");
static_assert(offsetof(FOSDKHTTPStatistics, SumOfSerializationMilliseconds) == 0x000020, "Member 'FOSDKHTTPStatistics::SumOfSerializationMilliseconds' has a wrong offset!");
static_assert(offsetof(FOSDKHTTPStatistics, MaxOfSerializationMilliseconds) == 0x000024, "Member 'FOSDKHTTPStatistics::MaxOfSerializationMilliseconds' has a wrong offset!");
static_assert(offsetof(FOSDKHTTPStatistics, SumOfDeserializationMilliseconds) == 0x000028, "Member 'FOSDKHTTPStatistics::SumOfDeserializationMilliseconds' has a wrong offset!");
static_assert(offsetof(FOSDKHTTPStatistics, MaxOfDeserializationMilliseconds) == 0x00002C, "Member 'FOSDKHTTPStatistics::MaxOfDeserializationMilliseconds' has a wrong offset!");
static_assert(offsetof(FOSDKHTTPStatistics, SumOfQueuedMilliseconds) == 0x000030, "Member 'FOSDKHTTPStatistics::SumOfQueuedMilliseconds' has a wrong offset!");
static_assert(offsetof(FOSDKHTTPStatistics, MaxOfQueuedMilliseconds) == 0x000034, "Member 'FOSDKHTTPStatistics::MaxOfQueuedMilliseconds' has a wrong offset!");
static_assert(offsetof(FOSDKHTTPStatistics, SumOfTransferMilliseconds) == 0x000038, "Member 'FOSDKHTTPStatistics::SumOfTransferMilliseconds' has a wrong offset!");
static_assert(offsetof(FOSDKHTTPStatistics, MaxOfTransferMilliseconds) == 0x00003C, "Member 'FOSDKHTTPStatistics::MaxOfTransferMilliseconds' has a wrong offset!");
static_assert(offsetof(FOSDKHTTPStatistics, SumOfRequestMilliseconds) == 0x000040, "Member 'FOSDKHTTPStatistics::SumOfRequestMilliseconds' has a wrong offset!");
static_assert(offsetof(FOSDKHTTPStatistics, MaxOfRequestMilliseconds) == 0x000044, "Member 'FOSDKHTTPStatistics::MaxOfRequestMilliseconds' has a wrong offset!");
static_assert(offsetof(FOSDKHTTPStatistics, SumOfSentBytes) == 0x000048, "Member 'FOSDKHTTPStatistics::SumOfSentBytes' has a wrong offset!");
static_assert(offsetof(FOSDKHTTPStatistics, MaxOfSentBytes) == 0x00004C, "Member 'FOSDKHTTPStatistics::MaxOfSentBytes' has a wrong offset!");
static_assert(offsetof(FOSDKHTTPStatistics, SumOfReceivedBytes) == 0x000050, "Member 'FOSDKHTTPStatistics::SumOfReceivedBytes' has a wrong offset!");
static_assert(offsetof(FOSDKHTTPStatistics, MaxOfReceivedBytes) == 0x000054, "Member 'FOSDKHTTPStatistics::MaxOfReceivedBytes' has a wrong offset!");

// ScriptStruct OSDKCore.OSDKMetricsStatistics
// 0x0020 (0x0020 - 0x0000)
struct FOSDKMetricsStatistics final
{
public:
	int32                                         CurrentCountOfQueuedMetrics;                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxCountOfQueuedMetrics;                           // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CountOfQueuedMetrics;                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CountOfSentMetrics;                                // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CountOfDroppedMetrics;                             // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CountOfMetricFlushes;                              // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              LastMetricFlushTime;                               // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOSDKMetricsStatistics) == 0x000008, "Wrong alignment on FOSDKMetricsStatistics");
static_assert(sizeof(FOSDKMetricsStatistics) == 0x000020, "Wrong size on FOSDKMetricsStatistics");
static_assert(offsetof(FOSDKMetricsStatistics, CurrentCountOfQueuedMetrics) == 0x000000, "Member 'FOSDKMetricsStatistics::CurrentCountOfQueuedMetrics' has a wrong offset!");
static_assert(offsetof(FOSDKMetricsStatistics, MaxCountOfQueuedMetrics) == 0x000004, "Member 'FOSDKMetricsStatistics::MaxCountOfQueuedMetrics' has a wrong offset!");
static_assert(offsetof(FOSDKMetricsStatistics, CountOfQueuedMetrics) == 0x000008, "Member 'FOSDKMetricsStatistics::CountOfQueuedMetrics' has a wrong offset!");
static_assert(offsetof(FOSDKMetricsStatistics, CountOfSentMetrics) == 0x00000C, "Member 'FOSDKMetricsStatistics::CountOfSentMetrics' has a wrong offset!");
static_assert(offsetof(FOSDKMetricsStatistics, CountOfDroppedMetrics) == 0x000010, "Member 'FOSDKMetricsStatistics::CountOfDroppedMetrics' has a wrong offset!");
static_assert(offsetof(FOSDKMetricsStatistics, CountOfMetricFlushes) == 0x000014, "Member 'FOSDKMetricsStatistics::CountOfMetricFlushes' has a wrong offset!");
static_assert(offsetof(FOSDKMetricsStatistics, LastMetricFlushTime) == 0x000018, "Member 'FOSDKMetricsStatistics::LastMetricFlushTime' has a wrong offset!");

// ScriptStruct OSDKCore.OSDKStatistics
// 0x0080 (0x0080 - 0x0000)
struct FOSDKStatistics final
{
public:
	struct FOSDKHTTPStatistics                    HTTPStatistics;                                    // 0x0000(0x0058)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FOSDKMetricsStatistics                 MetricsStatistics;                                 // 0x0058(0x0020)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FDateTime                              AccumulatedSince;                                  // 0x0078(0x0008)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOSDKStatistics) == 0x000008, "Wrong alignment on FOSDKStatistics");
static_assert(sizeof(FOSDKStatistics) == 0x000080, "Wrong size on FOSDKStatistics");
static_assert(offsetof(FOSDKStatistics, HTTPStatistics) == 0x000000, "Member 'FOSDKStatistics::HTTPStatistics' has a wrong offset!");
static_assert(offsetof(FOSDKStatistics, MetricsStatistics) == 0x000058, "Member 'FOSDKStatistics::MetricsStatistics' has a wrong offset!");
static_assert(offsetof(FOSDKStatistics, AccumulatedSince) == 0x000078, "Member 'FOSDKStatistics::AccumulatedSince' has a wrong offset!");

// ScriptStruct OSDKCore.OSDKUserId
// 0x0020 (0x0020 - 0x0000)
struct FOSDKUserId final
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Provider;                                          // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOSDKUserId) == 0x000008, "Wrong alignment on FOSDKUserId");
static_assert(sizeof(FOSDKUserId) == 0x000020, "Wrong size on FOSDKUserId");
static_assert(offsetof(FOSDKUserId, ID) == 0x000000, "Member 'FOSDKUserId::ID' has a wrong offset!");
static_assert(offsetof(FOSDKUserId, Provider) == 0x000010, "Member 'FOSDKUserId::Provider' has a wrong offset!");

// ScriptStruct OSDKCore.OSDKUserInfo
// 0x0050 (0x0050 - 0x0000)
struct FOSDKUserInfo final
{
public:
	struct FOSDKUserId                            UserId;                                            // 0x0000(0x0020)(BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 Gamertag;                                          // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Language;                                          // 0x0030(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Country;                                           // 0x0040(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOSDKUserInfo) == 0x000008, "Wrong alignment on FOSDKUserInfo");
static_assert(sizeof(FOSDKUserInfo) == 0x000050, "Wrong size on FOSDKUserInfo");
static_assert(offsetof(FOSDKUserInfo, UserId) == 0x000000, "Member 'FOSDKUserInfo::UserId' has a wrong offset!");
static_assert(offsetof(FOSDKUserInfo, Gamertag) == 0x000020, "Member 'FOSDKUserInfo::Gamertag' has a wrong offset!");
static_assert(offsetof(FOSDKUserInfo, Language) == 0x000030, "Member 'FOSDKUserInfo::Language' has a wrong offset!");
static_assert(offsetof(FOSDKUserInfo, Country) == 0x000040, "Member 'FOSDKUserInfo::Country' has a wrong offset!");

}

