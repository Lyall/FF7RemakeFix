#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: btsc_sbil0_30_boss010

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "EndGame_structs.hpp"
#include "EndGame_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass btsc_sbil0_30_boss010.btsc_sbil0_30_boss010_C
// 0x0048 (0x03F0 - 0x03A8)
class Abtsc_sbil0_30_boss010_C final : public AEndBattleSceneBlueprint
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x03A8(0x0008)(Transient, DuplicateTransient)
	class UEndAITimerComponent*                   ResistHit_Interval;                                // 0x03B0(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UEndAITimerComponent*                   Timer_PerSecond;                                   // 0x03B8(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x03C0(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          ATTK_MainCannonRelease;                            // 0x03C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          ATTK_HitToBit;                                     // 0x03C9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3CA[0x2];                                      // 0x03CA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RollerBreakCount;                                  // 0x03CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Phase1_DoTalk_Chance;                              // 0x03D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Phase4_PCAttackHit;                                // 0x03D1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Phase4_TakeSWC2nd;                                 // 0x03D2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Phase4_EndSWC;                                     // 0x03D3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int32                                         DriveCount;                                        // 0x03D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         HLaserCount;                                       // 0x03D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         BarrierBit_Burst;                                  // 0x03DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         FlickCount_Phase1;                                 // 0x03E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ResistElement_FirstAttack;                         // 0x03E4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3E5[0x3];                                      // 0x03E5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MainCannon_Count;                                  // 0x03E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void OnCharaSpecialStatusChange(const class FName& ownerCharaName, const class FName& SpecialStatusChangeID, EEndBattleSpecialStatusChangeType Type, const class FName& StateId, const TArray<float>& Params_0, const TArray<class FName>& ParamIDs, const TArray<class AActor*>& ParamActors);
	void OnMotionMessage(class FName CharaName, class FName motionName);
	void OnMetaMessage(const class FString& InMessage);
	void OnTakeDamage(int32 Damage, const class FName& CauserCharaName, const class FName& DamagedCharaName, const class FName& AbilityID, bool bBind, bool bGuard, bool bDodge, const class FName& hitBoneName, bool bAttributeHit, const class FName& DamageSourceID, EEndBattleAttributeType DmgSrcAttributeType, float justHitRotYaw, const struct FVector& hitPosition, bool bHeal);
	void OnIncrementBattleCountPerID(class FName CauserCharaName, class FName TargetCharaName, EEndBattleCountLogType Type, class FName ID, int32 Count);
	void OnCharaPartsDamage(class FName CauserCharaName, class FName DamagedCharaName, class FName partsID, class FName CategoryID, int32 RemainHP, float RemainHPPer);
	void ChangePhase(int32 mphase);
	void OnCharaPartsBreak(class FName CauserCharaName, class FName BrokenCharaName, class FName partsID, class FName CategoryID, int32 CategoryBreakCount);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void ExecuteUbergraph_btsc_sbil0_30_boss010(int32 EntryPoint);
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"btsc_sbil0_30_boss010_C">();
	}
	static class Abtsc_sbil0_30_boss010_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<Abtsc_sbil0_30_boss010_C>();
	}
};
static_assert(alignof(Abtsc_sbil0_30_boss010_C) == 0x000008, "Wrong alignment on Abtsc_sbil0_30_boss010_C");
static_assert(sizeof(Abtsc_sbil0_30_boss010_C) == 0x0003F0, "Wrong size on Abtsc_sbil0_30_boss010_C");
static_assert(offsetof(Abtsc_sbil0_30_boss010_C, UberGraphFrame) == 0x0003A8, "Member 'Abtsc_sbil0_30_boss010_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(Abtsc_sbil0_30_boss010_C, ResistHit_Interval) == 0x0003B0, "Member 'Abtsc_sbil0_30_boss010_C::ResistHit_Interval' has a wrong offset!");
static_assert(offsetof(Abtsc_sbil0_30_boss010_C, Timer_PerSecond) == 0x0003B8, "Member 'Abtsc_sbil0_30_boss010_C::Timer_PerSecond' has a wrong offset!");
static_assert(offsetof(Abtsc_sbil0_30_boss010_C, DefaultSceneRoot) == 0x0003C0, "Member 'Abtsc_sbil0_30_boss010_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(Abtsc_sbil0_30_boss010_C, ATTK_MainCannonRelease) == 0x0003C8, "Member 'Abtsc_sbil0_30_boss010_C::ATTK_MainCannonRelease' has a wrong offset!");
static_assert(offsetof(Abtsc_sbil0_30_boss010_C, ATTK_HitToBit) == 0x0003C9, "Member 'Abtsc_sbil0_30_boss010_C::ATTK_HitToBit' has a wrong offset!");
static_assert(offsetof(Abtsc_sbil0_30_boss010_C, RollerBreakCount) == 0x0003CC, "Member 'Abtsc_sbil0_30_boss010_C::RollerBreakCount' has a wrong offset!");
static_assert(offsetof(Abtsc_sbil0_30_boss010_C, Phase1_DoTalk_Chance) == 0x0003D0, "Member 'Abtsc_sbil0_30_boss010_C::Phase1_DoTalk_Chance' has a wrong offset!");
static_assert(offsetof(Abtsc_sbil0_30_boss010_C, Phase4_PCAttackHit) == 0x0003D1, "Member 'Abtsc_sbil0_30_boss010_C::Phase4_PCAttackHit' has a wrong offset!");
static_assert(offsetof(Abtsc_sbil0_30_boss010_C, Phase4_TakeSWC2nd) == 0x0003D2, "Member 'Abtsc_sbil0_30_boss010_C::Phase4_TakeSWC2nd' has a wrong offset!");
static_assert(offsetof(Abtsc_sbil0_30_boss010_C, Phase4_EndSWC) == 0x0003D3, "Member 'Abtsc_sbil0_30_boss010_C::Phase4_EndSWC' has a wrong offset!");
static_assert(offsetof(Abtsc_sbil0_30_boss010_C, DriveCount) == 0x0003D4, "Member 'Abtsc_sbil0_30_boss010_C::DriveCount' has a wrong offset!");
static_assert(offsetof(Abtsc_sbil0_30_boss010_C, HLaserCount) == 0x0003D8, "Member 'Abtsc_sbil0_30_boss010_C::HLaserCount' has a wrong offset!");
static_assert(offsetof(Abtsc_sbil0_30_boss010_C, BarrierBit_Burst) == 0x0003DC, "Member 'Abtsc_sbil0_30_boss010_C::BarrierBit_Burst' has a wrong offset!");
static_assert(offsetof(Abtsc_sbil0_30_boss010_C, FlickCount_Phase1) == 0x0003E0, "Member 'Abtsc_sbil0_30_boss010_C::FlickCount_Phase1' has a wrong offset!");
static_assert(offsetof(Abtsc_sbil0_30_boss010_C, ResistElement_FirstAttack) == 0x0003E4, "Member 'Abtsc_sbil0_30_boss010_C::ResistElement_FirstAttack' has a wrong offset!");
static_assert(offsetof(Abtsc_sbil0_30_boss010_C, MainCannon_Count) == 0x0003E8, "Member 'Abtsc_sbil0_30_boss010_C::MainCannon_Count' has a wrong offset!");

}

