#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Com_Base_02

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "EndGame_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass Com_Base_02.Com_Base_02_C
// 0x00A0 (0x0400 - 0x0360)
class UCom_Base_02_C final : public UEndUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0360(0x0008)(Transient, DuplicateTransient)
	class UEndImage*                              EndImage_2;                                        // 0x0368(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndImage*                              Img_Com_Base;                                      // 0x0370(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndImage*                              Light00;                                           // 0x0378(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndImage*                              Light01;                                           // 0x0380(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndImage*                              Light02;                                           // 0x0388(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndImage*                              Light03;                                           // 0x0390(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndImage*                              Light04;                                           // 0x0398(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndImage*                              Light05;                                           // 0x03A0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndImage*                              Light06;                                           // 0x03A8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndImage*                              Light07;                                           // 0x03B0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndImage*                              Light08;                                           // 0x03B8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndImage*                              Light09;                                           // 0x03C0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndImage*                              Light10;                                           // 0x03C8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndImage*                              Light11;                                           // 0x03D0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndImage*                              Light12;                                           // 0x03D8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndImage*                              Light13;                                           // 0x03E0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndImage*                              ListLight;                                         // 0x03E8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndImage*                              Shadow;                                            // 0x03F0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndImage*                              Waku;                                              // 0x03F8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)

public:
	void Construct();
	void ExecuteUbergraph_Com_Base_02(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Com_Base_02_C">();
	}
	static class UCom_Base_02_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCom_Base_02_C>();
	}
};
static_assert(alignof(UCom_Base_02_C) == 0x000008, "Wrong alignment on UCom_Base_02_C");
static_assert(sizeof(UCom_Base_02_C) == 0x000400, "Wrong size on UCom_Base_02_C");
static_assert(offsetof(UCom_Base_02_C, UberGraphFrame) == 0x000360, "Member 'UCom_Base_02_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UCom_Base_02_C, EndImage_2) == 0x000368, "Member 'UCom_Base_02_C::EndImage_2' has a wrong offset!");
static_assert(offsetof(UCom_Base_02_C, Img_Com_Base) == 0x000370, "Member 'UCom_Base_02_C::Img_Com_Base' has a wrong offset!");
static_assert(offsetof(UCom_Base_02_C, Light00) == 0x000378, "Member 'UCom_Base_02_C::Light00' has a wrong offset!");
static_assert(offsetof(UCom_Base_02_C, Light01) == 0x000380, "Member 'UCom_Base_02_C::Light01' has a wrong offset!");
static_assert(offsetof(UCom_Base_02_C, Light02) == 0x000388, "Member 'UCom_Base_02_C::Light02' has a wrong offset!");
static_assert(offsetof(UCom_Base_02_C, Light03) == 0x000390, "Member 'UCom_Base_02_C::Light03' has a wrong offset!");
static_assert(offsetof(UCom_Base_02_C, Light04) == 0x000398, "Member 'UCom_Base_02_C::Light04' has a wrong offset!");
static_assert(offsetof(UCom_Base_02_C, Light05) == 0x0003A0, "Member 'UCom_Base_02_C::Light05' has a wrong offset!");
static_assert(offsetof(UCom_Base_02_C, Light06) == 0x0003A8, "Member 'UCom_Base_02_C::Light06' has a wrong offset!");
static_assert(offsetof(UCom_Base_02_C, Light07) == 0x0003B0, "Member 'UCom_Base_02_C::Light07' has a wrong offset!");
static_assert(offsetof(UCom_Base_02_C, Light08) == 0x0003B8, "Member 'UCom_Base_02_C::Light08' has a wrong offset!");
static_assert(offsetof(UCom_Base_02_C, Light09) == 0x0003C0, "Member 'UCom_Base_02_C::Light09' has a wrong offset!");
static_assert(offsetof(UCom_Base_02_C, Light10) == 0x0003C8, "Member 'UCom_Base_02_C::Light10' has a wrong offset!");
static_assert(offsetof(UCom_Base_02_C, Light11) == 0x0003D0, "Member 'UCom_Base_02_C::Light11' has a wrong offset!");
static_assert(offsetof(UCom_Base_02_C, Light12) == 0x0003D8, "Member 'UCom_Base_02_C::Light12' has a wrong offset!");
static_assert(offsetof(UCom_Base_02_C, Light13) == 0x0003E0, "Member 'UCom_Base_02_C::Light13' has a wrong offset!");
static_assert(offsetof(UCom_Base_02_C, ListLight) == 0x0003E8, "Member 'UCom_Base_02_C::ListLight' has a wrong offset!");
static_assert(offsetof(UCom_Base_02_C, Shadow) == 0x0003F0, "Member 'UCom_Base_02_C::Shadow' has a wrong offset!");
static_assert(offsetof(UCom_Base_02_C, Waku) == 0x0003F8, "Member 'UCom_Base_02_C::Waku' has a wrong offset!");

}

