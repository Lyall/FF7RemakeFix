#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Map_ListCell

#include "Basic.hpp"

#include "EndGame_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass Map_ListCell.Map_ListCell_C
// 0x0060 (0x03E0 - 0x0380)
class UMap_ListCell_C final : public UEndAreaMapObjectiveLabel
{
public:
	class UWidgetAnimation*                       Target_Side;                                       // 0x0380(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWidgetAnimation*                       Target_Quest;                                      // 0x0388(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWidgetAnimation*                       Target_Main;                                       // 0x0390(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWidgetAnimation*                       Quest_Child;                                       // 0x0398(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWidgetAnimation*                       Side;                                              // 0x03A0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWidgetAnimation*                       Quest;                                             // 0x03A8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWidgetAnimation*                       Main_Child;                                        // 0x03B0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWidgetAnimation*                       Main;                                              // 0x03B8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndCanvasPanel*                        AllBox;                                            // 0x03C0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndImageSet*                           ListIcon;                                          // 0x03C8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndImage*                              PriorityIcon;                                      // 0x03D0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEndImage*                              TargetBase;                                        // 0x03D8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Map_ListCell_C">();
	}
	static class UMap_ListCell_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMap_ListCell_C>();
	}
};
static_assert(alignof(UMap_ListCell_C) == 0x000008, "Wrong alignment on UMap_ListCell_C");
static_assert(sizeof(UMap_ListCell_C) == 0x0003E0, "Wrong size on UMap_ListCell_C");
static_assert(offsetof(UMap_ListCell_C, Target_Side) == 0x000380, "Member 'UMap_ListCell_C::Target_Side' has a wrong offset!");
static_assert(offsetof(UMap_ListCell_C, Target_Quest) == 0x000388, "Member 'UMap_ListCell_C::Target_Quest' has a wrong offset!");
static_assert(offsetof(UMap_ListCell_C, Target_Main) == 0x000390, "Member 'UMap_ListCell_C::Target_Main' has a wrong offset!");
static_assert(offsetof(UMap_ListCell_C, Quest_Child) == 0x000398, "Member 'UMap_ListCell_C::Quest_Child' has a wrong offset!");
static_assert(offsetof(UMap_ListCell_C, Side) == 0x0003A0, "Member 'UMap_ListCell_C::Side' has a wrong offset!");
static_assert(offsetof(UMap_ListCell_C, Quest) == 0x0003A8, "Member 'UMap_ListCell_C::Quest' has a wrong offset!");
static_assert(offsetof(UMap_ListCell_C, Main_Child) == 0x0003B0, "Member 'UMap_ListCell_C::Main_Child' has a wrong offset!");
static_assert(offsetof(UMap_ListCell_C, Main) == 0x0003B8, "Member 'UMap_ListCell_C::Main' has a wrong offset!");
static_assert(offsetof(UMap_ListCell_C, AllBox) == 0x0003C0, "Member 'UMap_ListCell_C::AllBox' has a wrong offset!");
static_assert(offsetof(UMap_ListCell_C, ListIcon) == 0x0003C8, "Member 'UMap_ListCell_C::ListIcon' has a wrong offset!");
static_assert(offsetof(UMap_ListCell_C, PriorityIcon) == 0x0003D0, "Member 'UMap_ListCell_C::PriorityIcon' has a wrong offset!");
static_assert(offsetof(UMap_ListCell_C, TargetBase) == 0x0003D8, "Member 'UMap_ListCell_C::TargetBase' has a wrong offset!");

}

