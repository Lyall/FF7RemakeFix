#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: EB0005_01_Rude_Pillar_AI

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "EndGame_structs.hpp"
#include "EndGame_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass EB0005_01_Rude_Pillar_AI.EB0005_01_Rude_Pillar_AI_C
// 0x02D8 (0x25C8 - 0x22F0)
class AEB0005_01_Rude_Pillar_AI_C final : public AEndBattleAIEB0005Controller
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x22F0(0x0008)(Transient, DuplicateTransient)
	class UEndAITimerComponent*                   EndAITimerSet;                                     // 0x22F8(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UEndAITimerComponent*                   GuardTimer;                                        // 0x2300(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UEndAITimerComponent*                   air;                                               // 0x2308(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UEndAITimerComponent*                   air_Interval;                                      // 0x2310(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          Hit;                                               // 0x2318(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2319[0x3];                                     // 0x2319(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         GuardCount;                                        // 0x231C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         GuardRequestCount;                                 // 0x2320(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         AbilityCheck;                                      // 0x2324(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MagicAttackCount;                                  // 0x2328(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_232C[0x4];                                     // 0x232C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AEndCharacter*                          Target;                                            // 0x2330(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DamageCount;                                       // 0x2338(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          GoHelp;                                            // 0x233C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          ThunderLandRun;                                    // 0x233D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_233E[0x2];                                     // 0x233E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                JumpPos;                                           // 0x2340(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          FarAttackTimer;                                    // 0x234C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          ThunderLandRude;                                   // 0x234D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          BackStepforJumpKick;                               // 0x234E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          BackStepforTornado;                                // 0x234F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TArray<class FName>                           PCIgnoreAction;                                    // 0x2350(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<class FName>                           CloudIgnoreAction;                                 // 0x2360(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<class FName>                           BarretIgnoreAction;                                // 0x2370(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<class FName>                           TifaIgnoreAction;                                  // 0x2380(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TMap<class FName, float>                      AbilityDelayCloud;                                 // 0x2390(0x0050)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TMap<class FName, float>                      AbilityDelayBarret;                                // 0x23E0(0x0050)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TMap<class FName, float>                      AbilityDelayTifa;                                  // 0x2430(0x0050)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TMap<class FName, float>                      AbilityRangeCloud;                                 // 0x2480(0x0050)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TMap<class FName, float>                      AbilityRangeBarret;                                // 0x24D0(0x0050)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TMap<class FName, float>                      NormalAbilityRangeTifa;                            // 0x2520(0x0050)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TMap<class FName, float>                      AbilityRangeTifa;                                  // 0x2570(0x0050)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	class AEndCharacter*                          Reno;                                              // 0x25C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void OnMetaMessageAboutCharacter(class AEndCharacter* InChara, const class FString& InMessage);
	void m____();
	void OnChangePhase(int32 InNew, int32 InOld);
	void m_____n__();
	void OnSyncActionChange(const class FName& syncActionID, const class FName& ChangeID, const class FName& DetachDamageSourceID);
	void OnBurstEnd(bool instant);
	void OnBurstBegin();
	void OnSuspendAbility(class FName InName, EEndAiAbilitySuspendFactor InFactor, EEndAiAbilitySuspendTiming InTiming);
	void m___3___L_Mf_();
	void OnFinishTimer(class FName InName);
	void OnMotionMessage(class FName InMotionName, class FName InName, int32 InIntValue, float InFloatValue);
	void OnGiveDamage(int32 Damage, class AEndCharacter* InTarget, class FName InName, bool InBind, bool InGuard, bool InJustGuard, bool KeepOver, bool InDodge, bool InCounter, class FName InBoneName, bool InAttributeWeak, class FName InDamageSourceID, bool InSteal, bool heal);
	void OnUpdate(EEndAiBattleRole InRole, int32 InStep, float DeltaTime);
	void OnEntryBattleScene();
	void OnTakeDamage(int32 Damage, class AEndCharacter* InChara, class FName InName, EEndBattleAbilityCommandType InCommandType, bool InBind, bool InGuard, bool InDodge, class FName InBoneName, bool InAttributeWeak, class FName InDmgSrcID, EEndBattleAttributeType InDmgSrcAttribute, float justHitRotYaw, const struct FVector& hitPosition, bool InHeal, bool InCounter, const struct FEndDataTableBattleDamageSource& dataTableBattleDamageSource, bool useAbilityUCPC);
	void ReceiveBeginPlay();
	void Case1_9623875645D7A165F5ACEF83F633A6A2();
	void Case2_9623875645D7A165F5ACEF83F633A6A2();
	void Case3_9623875645D7A165F5ACEF83F633A6A2();
	void Other_9623875645D7A165F5ACEF83F633A6A2();
	void Case1_1BC43C3A49F80AA91C9FFCB759D09AFF();
	void Case2_1BC43C3A49F80AA91C9FFCB759D09AFF();
	void Case3_1BC43C3A49F80AA91C9FFCB759D09AFF();
	void Other_1BC43C3A49F80AA91C9FFCB759D09AFF();
	void Case1_15D98F38403597D81604F5B5EDECD3A6();
	void Case2_15D98F38403597D81604F5B5EDECD3A6();
	void Case3_15D98F38403597D81604F5B5EDECD3A6();
	void Other_15D98F38403597D81604F5B5EDECD3A6();
	void InpActEvt_Seven_K2Node_InputKeyEvent_0(const struct FKey& Key);
	void InpActEvt_Six_K2Node_InputKeyEvent_1(const struct FKey& Key);
	void InpActEvt_Five_K2Node_InputKeyEvent_2(const struct FKey& Key);
	void InpActEvt_Four_K2Node_InputKeyEvent_3(const struct FKey& Key);
	void InpActEvt_Three_K2Node_InputKeyEvent_4(const struct FKey& Key);
	void InpActEvt_Zero_K2Node_InputKeyEvent_5(const struct FKey& Key);
	void InpActEvt_Nine_K2Node_InputKeyEvent_6(const struct FKey& Key);
	void InpActEvt_Two_K2Node_InputKeyEvent_7(const struct FKey& Key);
	void InpActEvt_One_K2Node_InputKeyEvent_8(const struct FKey& Key);
	void UserConstructionScript();
	void ExecuteUbergraph_EB0005_01_Rude_Pillar_AI(int32 EntryPoint);
	void OnBeginCutScene(const class FName& CutsceneID);
	void OnPrepareAbility(class FName InName);
	void OnAddStatusChange(EEndBattleStatusChangeType Type);
	void OnRemoveStatusChange(EEndBattleStatusChangeType Type);
	void OnInterceptAbility(class FName InName);
	void m______();
	void OnCompleteAbility(class FName InName);
	void OnDead(bool AtBurst);
	void m_____0();
	void OnTakeAbilityInvoke(class AEndCharacter* causerChara, const class FName& abilityName, EEndBattleAbilityCommandType AbilityCommandType, const TArray<class FName>& AnimationNameList);

	bool OnGetTargetFieldPosition(struct FVector* outPosition, class FName InBattleAbilityID, class FName InDamageSourceID, class FName InAnimationName) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"EB0005_01_Rude_Pillar_AI_C">();
	}
	static class AEB0005_01_Rude_Pillar_AI_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AEB0005_01_Rude_Pillar_AI_C>();
	}
};
static_assert(alignof(AEB0005_01_Rude_Pillar_AI_C) == 0x000008, "Wrong alignment on AEB0005_01_Rude_Pillar_AI_C");
static_assert(sizeof(AEB0005_01_Rude_Pillar_AI_C) == 0x0025C8, "Wrong size on AEB0005_01_Rude_Pillar_AI_C");
static_assert(offsetof(AEB0005_01_Rude_Pillar_AI_C, UberGraphFrame) == 0x0022F0, "Member 'AEB0005_01_Rude_Pillar_AI_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AEB0005_01_Rude_Pillar_AI_C, EndAITimerSet) == 0x0022F8, "Member 'AEB0005_01_Rude_Pillar_AI_C::EndAITimerSet' has a wrong offset!");
static_assert(offsetof(AEB0005_01_Rude_Pillar_AI_C, GuardTimer) == 0x002300, "Member 'AEB0005_01_Rude_Pillar_AI_C::GuardTimer' has a wrong offset!");
static_assert(offsetof(AEB0005_01_Rude_Pillar_AI_C, air) == 0x002308, "Member 'AEB0005_01_Rude_Pillar_AI_C::air' has a wrong offset!");
static_assert(offsetof(AEB0005_01_Rude_Pillar_AI_C, air_Interval) == 0x002310, "Member 'AEB0005_01_Rude_Pillar_AI_C::air_Interval' has a wrong offset!");
static_assert(offsetof(AEB0005_01_Rude_Pillar_AI_C, Hit) == 0x002318, "Member 'AEB0005_01_Rude_Pillar_AI_C::Hit' has a wrong offset!");
static_assert(offsetof(AEB0005_01_Rude_Pillar_AI_C, GuardCount) == 0x00231C, "Member 'AEB0005_01_Rude_Pillar_AI_C::GuardCount' has a wrong offset!");
static_assert(offsetof(AEB0005_01_Rude_Pillar_AI_C, GuardRequestCount) == 0x002320, "Member 'AEB0005_01_Rude_Pillar_AI_C::GuardRequestCount' has a wrong offset!");
static_assert(offsetof(AEB0005_01_Rude_Pillar_AI_C, AbilityCheck) == 0x002324, "Member 'AEB0005_01_Rude_Pillar_AI_C::AbilityCheck' has a wrong offset!");
static_assert(offsetof(AEB0005_01_Rude_Pillar_AI_C, MagicAttackCount) == 0x002328, "Member 'AEB0005_01_Rude_Pillar_AI_C::MagicAttackCount' has a wrong offset!");
static_assert(offsetof(AEB0005_01_Rude_Pillar_AI_C, Target) == 0x002330, "Member 'AEB0005_01_Rude_Pillar_AI_C::Target' has a wrong offset!");
static_assert(offsetof(AEB0005_01_Rude_Pillar_AI_C, DamageCount) == 0x002338, "Member 'AEB0005_01_Rude_Pillar_AI_C::DamageCount' has a wrong offset!");
static_assert(offsetof(AEB0005_01_Rude_Pillar_AI_C, GoHelp) == 0x00233C, "Member 'AEB0005_01_Rude_Pillar_AI_C::GoHelp' has a wrong offset!");
static_assert(offsetof(AEB0005_01_Rude_Pillar_AI_C, ThunderLandRun) == 0x00233D, "Member 'AEB0005_01_Rude_Pillar_AI_C::ThunderLandRun' has a wrong offset!");
static_assert(offsetof(AEB0005_01_Rude_Pillar_AI_C, JumpPos) == 0x002340, "Member 'AEB0005_01_Rude_Pillar_AI_C::JumpPos' has a wrong offset!");
static_assert(offsetof(AEB0005_01_Rude_Pillar_AI_C, FarAttackTimer) == 0x00234C, "Member 'AEB0005_01_Rude_Pillar_AI_C::FarAttackTimer' has a wrong offset!");
static_assert(offsetof(AEB0005_01_Rude_Pillar_AI_C, ThunderLandRude) == 0x00234D, "Member 'AEB0005_01_Rude_Pillar_AI_C::ThunderLandRude' has a wrong offset!");
static_assert(offsetof(AEB0005_01_Rude_Pillar_AI_C, BackStepforJumpKick) == 0x00234E, "Member 'AEB0005_01_Rude_Pillar_AI_C::BackStepforJumpKick' has a wrong offset!");
static_assert(offsetof(AEB0005_01_Rude_Pillar_AI_C, BackStepforTornado) == 0x00234F, "Member 'AEB0005_01_Rude_Pillar_AI_C::BackStepforTornado' has a wrong offset!");
static_assert(offsetof(AEB0005_01_Rude_Pillar_AI_C, PCIgnoreAction) == 0x002350, "Member 'AEB0005_01_Rude_Pillar_AI_C::PCIgnoreAction' has a wrong offset!");
static_assert(offsetof(AEB0005_01_Rude_Pillar_AI_C, CloudIgnoreAction) == 0x002360, "Member 'AEB0005_01_Rude_Pillar_AI_C::CloudIgnoreAction' has a wrong offset!");
static_assert(offsetof(AEB0005_01_Rude_Pillar_AI_C, BarretIgnoreAction) == 0x002370, "Member 'AEB0005_01_Rude_Pillar_AI_C::BarretIgnoreAction' has a wrong offset!");
static_assert(offsetof(AEB0005_01_Rude_Pillar_AI_C, TifaIgnoreAction) == 0x002380, "Member 'AEB0005_01_Rude_Pillar_AI_C::TifaIgnoreAction' has a wrong offset!");
static_assert(offsetof(AEB0005_01_Rude_Pillar_AI_C, AbilityDelayCloud) == 0x002390, "Member 'AEB0005_01_Rude_Pillar_AI_C::AbilityDelayCloud' has a wrong offset!");
static_assert(offsetof(AEB0005_01_Rude_Pillar_AI_C, AbilityDelayBarret) == 0x0023E0, "Member 'AEB0005_01_Rude_Pillar_AI_C::AbilityDelayBarret' has a wrong offset!");
static_assert(offsetof(AEB0005_01_Rude_Pillar_AI_C, AbilityDelayTifa) == 0x002430, "Member 'AEB0005_01_Rude_Pillar_AI_C::AbilityDelayTifa' has a wrong offset!");
static_assert(offsetof(AEB0005_01_Rude_Pillar_AI_C, AbilityRangeCloud) == 0x002480, "Member 'AEB0005_01_Rude_Pillar_AI_C::AbilityRangeCloud' has a wrong offset!");
static_assert(offsetof(AEB0005_01_Rude_Pillar_AI_C, AbilityRangeBarret) == 0x0024D0, "Member 'AEB0005_01_Rude_Pillar_AI_C::AbilityRangeBarret' has a wrong offset!");
static_assert(offsetof(AEB0005_01_Rude_Pillar_AI_C, NormalAbilityRangeTifa) == 0x002520, "Member 'AEB0005_01_Rude_Pillar_AI_C::NormalAbilityRangeTifa' has a wrong offset!");
static_assert(offsetof(AEB0005_01_Rude_Pillar_AI_C, AbilityRangeTifa) == 0x002570, "Member 'AEB0005_01_Rude_Pillar_AI_C::AbilityRangeTifa' has a wrong offset!");
static_assert(offsetof(AEB0005_01_Rude_Pillar_AI_C, Reno) == 0x0025C0, "Member 'AEB0005_01_Rude_Pillar_AI_C::Reno' has a wrong offset!");

}

