#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SQEXSEAD

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_classes.hpp"
#include "SQEXSEAD_structs.hpp"


namespace SDK
{

// Class SQEXSEAD.SQEXSEADSurfaceNameTable
// 0x01F8 (0x0228 - 0x0030)
class USQEXSEADSurfaceNameTable final : public UDataAsset
{
public:
	class FName                                   Names[0x3F];                                       // 0x0030(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEXSEADSurfaceNameTable">();
	}
	static class USQEXSEADSurfaceNameTable* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEXSEADSurfaceNameTable>();
	}
};
static_assert(alignof(USQEXSEADSurfaceNameTable) == 0x000008, "Wrong alignment on USQEXSEADSurfaceNameTable");
static_assert(sizeof(USQEXSEADSurfaceNameTable) == 0x000228, "Wrong size on USQEXSEADSurfaceNameTable");
static_assert(offsetof(USQEXSEADSurfaceNameTable, Names) == 0x000030, "Member 'USQEXSEADSurfaceNameTable::Names' has a wrong offset!");

// Class SQEXSEAD.SQEXSEADWhizSeComponent
// 0x0048 (0x02F8 - 0x02B0)
#pragma pack(push, 0x1)
class alignas(0x08) USQEXSEADWhizSeComponent : public USceneComponent
{
public:
	class USoundBase*                             WhizSoundAsset;                                    // 0x02B0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   WhizSoundName;                                     // 0x02B8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ApproachJudgmentDistance;                          // 0x02C0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ApproachJudgmentVelocity;                          // 0x02C4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bFollow : 1;                                       // 0x02C8(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_2C9[0x3];                                      // 0x02C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   AttachPointName;                                   // 0x02CC(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bOnlyOnce : 1;                                     // 0x02D4(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUseRelativeVelocity : 1;                          // 0x02D4(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_2D5[0x3];                                      // 0x02D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class USQEXSEADAudioComponent*                MyAudioComponent;                                  // 0x02D8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2E0[0x8];                                      // 0x02E0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UMeshComponent*                         MyMeshComponent;                                   // 0x02E8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2F0[0x8];                                      // 0x02F0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEXSEADWhizSeComponent">();
	}
	static class USQEXSEADWhizSeComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEXSEADWhizSeComponent>();
	}
};
#pragma pack(pop)
static_assert(alignof(USQEXSEADWhizSeComponent) == 0x000008, "Wrong alignment on USQEXSEADWhizSeComponent");
static_assert(sizeof(USQEXSEADWhizSeComponent) == 0x0002F8, "Wrong size on USQEXSEADWhizSeComponent");
static_assert(offsetof(USQEXSEADWhizSeComponent, WhizSoundAsset) == 0x0002B0, "Member 'USQEXSEADWhizSeComponent::WhizSoundAsset' has a wrong offset!");
static_assert(offsetof(USQEXSEADWhizSeComponent, WhizSoundName) == 0x0002B8, "Member 'USQEXSEADWhizSeComponent::WhizSoundName' has a wrong offset!");
static_assert(offsetof(USQEXSEADWhizSeComponent, ApproachJudgmentDistance) == 0x0002C0, "Member 'USQEXSEADWhizSeComponent::ApproachJudgmentDistance' has a wrong offset!");
static_assert(offsetof(USQEXSEADWhizSeComponent, ApproachJudgmentVelocity) == 0x0002C4, "Member 'USQEXSEADWhizSeComponent::ApproachJudgmentVelocity' has a wrong offset!");
static_assert(offsetof(USQEXSEADWhizSeComponent, AttachPointName) == 0x0002CC, "Member 'USQEXSEADWhizSeComponent::AttachPointName' has a wrong offset!");
static_assert(offsetof(USQEXSEADWhizSeComponent, MyAudioComponent) == 0x0002D8, "Member 'USQEXSEADWhizSeComponent::MyAudioComponent' has a wrong offset!");
static_assert(offsetof(USQEXSEADWhizSeComponent, MyMeshComponent) == 0x0002E8, "Member 'USQEXSEADWhizSeComponent::MyMeshComponent' has a wrong offset!");

// Class SQEXSEAD.SQEXSEADSurfaceAssetReferenceTable
// 0x0010 (0x0040 - 0x0030)
class USQEXSEADSurfaceAssetReferenceTable final : public UDataAsset
{
public:
	struct FSQEXSEADSurfaceAssetReferenceTableData TableData;                                         // 0x0030(0x0010)(Edit, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEXSEADSurfaceAssetReferenceTable">();
	}
	static class USQEXSEADSurfaceAssetReferenceTable* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEXSEADSurfaceAssetReferenceTable>();
	}
};
static_assert(alignof(USQEXSEADSurfaceAssetReferenceTable) == 0x000008, "Wrong alignment on USQEXSEADSurfaceAssetReferenceTable");
static_assert(sizeof(USQEXSEADSurfaceAssetReferenceTable) == 0x000040, "Wrong size on USQEXSEADSurfaceAssetReferenceTable");
static_assert(offsetof(USQEXSEADSurfaceAssetReferenceTable, TableData) == 0x000030, "Member 'USQEXSEADSurfaceAssetReferenceTable::TableData' has a wrong offset!");

// Class SQEXSEAD.SQEXSEADAutoSeComponentCallback
// 0x0000 (0x0028 - 0x0028)
class USQEXSEADAutoSeComponentCallback : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEXSEADAutoSeComponentCallback">();
	}
	static class USQEXSEADAutoSeComponentCallback* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEXSEADAutoSeComponentCallback>();
	}
};
static_assert(alignof(USQEXSEADAutoSeComponentCallback) == 0x000008, "Wrong alignment on USQEXSEADAutoSeComponentCallback");
static_assert(sizeof(USQEXSEADAutoSeComponentCallback) == 0x000028, "Wrong size on USQEXSEADAutoSeComponentCallback");

// Class SQEXSEAD.SQEXSEAD_BGM
// 0x0050 (0x0078 - 0x0028)
class USQEXSEAD_BGM final : public UObject
{
public:
	class USQEXSEADSound*                         Sound_;                                            // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_30[0x48];                                      // 0x0030(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEXSEAD_BGM">();
	}
	static class USQEXSEAD_BGM* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEXSEAD_BGM>();
	}
};
static_assert(alignof(USQEXSEAD_BGM) == 0x000008, "Wrong alignment on USQEXSEAD_BGM");
static_assert(sizeof(USQEXSEAD_BGM) == 0x000078, "Wrong size on USQEXSEAD_BGM");
static_assert(offsetof(USQEXSEAD_BGM, Sound_) == 0x000028, "Member 'USQEXSEAD_BGM::Sound_' has a wrong offset!");

// Class SQEXSEAD.SQEXSEADBGMManager
// 0x0110 (0x0138 - 0x0028)
class USQEXSEADBGMManager final : public UObject
{
public:
	TArray<class USQEXSEADBGMSlot*>               Slots_;                                            // 0x0028(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class USQEXSEADBGMSlotController*>     Controllers_;                                      // 0x0038(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_48[0xE0];                                      // 0x0048(0x00E0)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSQEXSEAD_BGMSlotSetting>       SlotSettings_;                                     // 0x0128(0x0010)(ZeroConstructor, Config, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEXSEADBGMManager">();
	}
	static class USQEXSEADBGMManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEXSEADBGMManager>();
	}
};
static_assert(alignof(USQEXSEADBGMManager) == 0x000008, "Wrong alignment on USQEXSEADBGMManager");
static_assert(sizeof(USQEXSEADBGMManager) == 0x000138, "Wrong size on USQEXSEADBGMManager");
static_assert(offsetof(USQEXSEADBGMManager, Slots_) == 0x000028, "Member 'USQEXSEADBGMManager::Slots_' has a wrong offset!");
static_assert(offsetof(USQEXSEADBGMManager, Controllers_) == 0x000038, "Member 'USQEXSEADBGMManager::Controllers_' has a wrong offset!");
static_assert(offsetof(USQEXSEADBGMManager, SlotSettings_) == 0x000128, "Member 'USQEXSEADBGMManager::SlotSettings_' has a wrong offset!");

// Class SQEXSEAD.SQEXSEADBGMSlot
// 0x0068 (0x0090 - 0x0028)
class USQEXSEADBGMSlot final : public UObject
{
public:
	ESQEXSEAD_BGMState                            State;                                             // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x37];                                      // 0x0029(0x0037)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSQEXSEAD_BGMOptions                   DefaultOptions_;                                   // 0x0060(0x001C)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USQEXSEAD_BGM*                          BGM_;                                              // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USQEXSEAD_BGM*                          PrevBGM_;                                          // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEXSEADBGMSlot">();
	}
	static class USQEXSEADBGMSlot* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEXSEADBGMSlot>();
	}
};
static_assert(alignof(USQEXSEADBGMSlot) == 0x000008, "Wrong alignment on USQEXSEADBGMSlot");
static_assert(sizeof(USQEXSEADBGMSlot) == 0x000090, "Wrong size on USQEXSEADBGMSlot");
static_assert(offsetof(USQEXSEADBGMSlot, State) == 0x000028, "Member 'USQEXSEADBGMSlot::State' has a wrong offset!");
static_assert(offsetof(USQEXSEADBGMSlot, DefaultOptions_) == 0x000060, "Member 'USQEXSEADBGMSlot::DefaultOptions_' has a wrong offset!");
static_assert(offsetof(USQEXSEADBGMSlot, BGM_) == 0x000080, "Member 'USQEXSEADBGMSlot::BGM_' has a wrong offset!");
static_assert(offsetof(USQEXSEADBGMSlot, PrevBGM_) == 0x000088, "Member 'USQEXSEADBGMSlot::PrevBGM_' has a wrong offset!");

// Class SQEXSEAD.SQEXSEADBGMSlotController
// 0x0008 (0x0030 - 0x0028)
class USQEXSEADBGMSlotController final : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	struct FSQEXSEAD_Timing GetJustTiming();
	int32 GetModeIndex();
	float GetMusicalTime();
	struct FSQEXSEAD_Timing GetNearTiming();
	int32 GetNextSectionIndex();
	float GetPlayTime();
	int32 GetSectionIndex();
	float GetTempo();
	bool IsPlaying();
	void Play();
	void Reset();
	void Set(class USoundBase* Sound);
	void SetMode(int32 Index_0);
	void SetModeByName(class FName Name_0);
	void SetOptions(const struct FSQEXSEAD_BGMOptions& NewOptions);
	void SetPath(const class FString& Path);
	void SetPlayFadeInTime(float FadeTime);
	void SetPriority(int32 Priority);
	void SetRestartSameBGM(bool bRestart);
	void SetResumeFadeInTime(float FadeTime);
	void SetSection(int32 Index_0);
	void SetSectionByName(class FName Name_0);
	void SetSeekTime(float SeekTime);
	void SetSilent();
	void SetStopFadeOutTime(float FadeTime);
	void SetStoreBehaviour(ESQEXSEAD_BGMStoreBehaviour StoreBehaviour);
	void SetSuspendFadeOutTime(float FadeTime);
	void SetVolume(float Volume, float FadeTime);
	void Stop();
	void Unreference();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEXSEADBGMSlotController">();
	}
	static class USQEXSEADBGMSlotController* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEXSEADBGMSlotController>();
	}
};
static_assert(alignof(USQEXSEADBGMSlotController) == 0x000008, "Wrong alignment on USQEXSEADBGMSlotController");
static_assert(sizeof(USQEXSEADBGMSlotController) == 0x000030, "Wrong size on USQEXSEADBGMSlotController");

// Class SQEXSEAD.SQEXSEADAudioComponent
// 0x0020 (0x0730 - 0x0710)
class USQEXSEADAudioComponent : public UAudioComponent
{
public:
	uint8                                         Pad_710[0x20];                                     // 0x0710(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEXSEADAudioComponent">();
	}
	static class USQEXSEADAudioComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEXSEADAudioComponent>();
	}
};
static_assert(alignof(USQEXSEADAudioComponent) == 0x000008, "Wrong alignment on USQEXSEADAudioComponent");
static_assert(sizeof(USQEXSEADAudioComponent) == 0x000730, "Wrong size on USQEXSEADAudioComponent");

// Class SQEXSEAD.SQEXSEADLayoutAudioComponent
// 0x0000 (0x0730 - 0x0730)
class USQEXSEADLayoutAudioComponent final : public USQEXSEADAudioComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEXSEADLayoutAudioComponent">();
	}
	static class USQEXSEADLayoutAudioComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEXSEADLayoutAudioComponent>();
	}
};
static_assert(alignof(USQEXSEADLayoutAudioComponent) == 0x000008, "Wrong alignment on USQEXSEADLayoutAudioComponent");
static_assert(sizeof(USQEXSEADLayoutAudioComponent) == 0x000730, "Wrong size on USQEXSEADLayoutAudioComponent");

// Class SQEXSEAD.SQEXSEADLayoutComponent
// 0x0090 (0x0780 - 0x06F0)
class USQEXSEADLayoutComponent final : public UPrimitiveComponent
{
public:
	class USoundBase*                             Sound;                                             // 0x06F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SoundName;                                         // 0x06F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSQEXSEADLayoutInfo                    LayoutInfo;                                        // 0x0700(0x0050)(Edit, NativeAccessSpecifierPublic)
	uint8                                         bIgnoreObstruction : 1;                            // 0x0750(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverrideInteriorFactor : 1;                       // 0x0750(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_751[0x3];                                      // 0x0751(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InteriorFactor;                                    // 0x0754(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumeMultiplier;                                  // 0x0758(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchMultiplier;                                   // 0x075C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_760[0x20];                                     // 0x0760(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEXSEADLayoutComponent">();
	}
	static class USQEXSEADLayoutComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEXSEADLayoutComponent>();
	}
};
static_assert(alignof(USQEXSEADLayoutComponent) == 0x000010, "Wrong alignment on USQEXSEADLayoutComponent");
static_assert(sizeof(USQEXSEADLayoutComponent) == 0x000780, "Wrong size on USQEXSEADLayoutComponent");
static_assert(offsetof(USQEXSEADLayoutComponent, Sound) == 0x0006F0, "Member 'USQEXSEADLayoutComponent::Sound' has a wrong offset!");
static_assert(offsetof(USQEXSEADLayoutComponent, SoundName) == 0x0006F8, "Member 'USQEXSEADLayoutComponent::SoundName' has a wrong offset!");
static_assert(offsetof(USQEXSEADLayoutComponent, LayoutInfo) == 0x000700, "Member 'USQEXSEADLayoutComponent::LayoutInfo' has a wrong offset!");
static_assert(offsetof(USQEXSEADLayoutComponent, InteriorFactor) == 0x000754, "Member 'USQEXSEADLayoutComponent::InteriorFactor' has a wrong offset!");
static_assert(offsetof(USQEXSEADLayoutComponent, VolumeMultiplier) == 0x000758, "Member 'USQEXSEADLayoutComponent::VolumeMultiplier' has a wrong offset!");
static_assert(offsetof(USQEXSEADLayoutComponent, PitchMultiplier) == 0x00075C, "Member 'USQEXSEADLayoutComponent::PitchMultiplier' has a wrong offset!");

// Class SQEXSEAD.SQEXSEADLayoutSound
// 0x0010 (0x0388 - 0x0378)
class ASQEXSEADLayoutSound final : public AActor
{
public:
	class USQEXSEADLayoutComponent*               LayoutComponent;                                   // 0x0378(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bSyncActorHidden : 1;                              // 0x0380(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_381[0x7];                                      // 0x0381(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEXSEADLayoutSound">();
	}
	static class ASQEXSEADLayoutSound* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQEXSEADLayoutSound>();
	}
};
static_assert(alignof(ASQEXSEADLayoutSound) == 0x000008, "Wrong alignment on ASQEXSEADLayoutSound");
static_assert(sizeof(ASQEXSEADLayoutSound) == 0x000388, "Wrong size on ASQEXSEADLayoutSound");
static_assert(offsetof(ASQEXSEADLayoutSound, LayoutComponent) == 0x000378, "Member 'ASQEXSEADLayoutSound::LayoutComponent' has a wrong offset!");

// Class SQEXSEAD.SQEXSEADSound
// 0x01C0 (0x0400 - 0x0240)
class USQEXSEADSound : public USoundWave
{
public:
	bool                                          bForcedIgnore;                                     // 0x0240(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseKohrogiAttenuation;                            // 0x0241(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_242[0x6];                                      // 0x0242(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class USQEXSEADSoundBank*                     ReferenceBank;                                     // 0x0248(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SoundIndex;                                        // 0x0250(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideStopFadeTime;                             // 0x0254(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_255[0x3];                                      // 0x0255(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StopFadeTime;                                      // 0x0258(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsUISound;                                        // 0x025C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25D[0x3];                                      // 0x025D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PauseFadeTime;                                     // 0x0260(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreAudioVolumeAttenuation;                     // 0x0264(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableSEADTracingOcclusion;                       // 0x0265(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionChannel                             SEADOcclusionTraceChannel;                         // 0x0266(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_267[0x1];                                      // 0x0267(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, struct FSQEXSEADSoundIndexInfo> SoundNameIndexTable;                               // 0x0268(0x0050)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	class USQEXSEADSoundAliasNameSetting*         SoundNameAliasSetting;                             // 0x02B8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStreamingAsset_PlatformPS4;                       // 0x02C0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C1[0x13F];                                    // 0x02C1(0x013F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEXSEADSound">();
	}
	static class USQEXSEADSound* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEXSEADSound>();
	}
};
static_assert(alignof(USQEXSEADSound) == 0x000008, "Wrong alignment on USQEXSEADSound");
static_assert(sizeof(USQEXSEADSound) == 0x000400, "Wrong size on USQEXSEADSound");
static_assert(offsetof(USQEXSEADSound, bForcedIgnore) == 0x000240, "Member 'USQEXSEADSound::bForcedIgnore' has a wrong offset!");
static_assert(offsetof(USQEXSEADSound, bUseKohrogiAttenuation) == 0x000241, "Member 'USQEXSEADSound::bUseKohrogiAttenuation' has a wrong offset!");
static_assert(offsetof(USQEXSEADSound, ReferenceBank) == 0x000248, "Member 'USQEXSEADSound::ReferenceBank' has a wrong offset!");
static_assert(offsetof(USQEXSEADSound, SoundIndex) == 0x000250, "Member 'USQEXSEADSound::SoundIndex' has a wrong offset!");
static_assert(offsetof(USQEXSEADSound, bOverrideStopFadeTime) == 0x000254, "Member 'USQEXSEADSound::bOverrideStopFadeTime' has a wrong offset!");
static_assert(offsetof(USQEXSEADSound, StopFadeTime) == 0x000258, "Member 'USQEXSEADSound::StopFadeTime' has a wrong offset!");
static_assert(offsetof(USQEXSEADSound, bIsUISound) == 0x00025C, "Member 'USQEXSEADSound::bIsUISound' has a wrong offset!");
static_assert(offsetof(USQEXSEADSound, PauseFadeTime) == 0x000260, "Member 'USQEXSEADSound::PauseFadeTime' has a wrong offset!");
static_assert(offsetof(USQEXSEADSound, bIgnoreAudioVolumeAttenuation) == 0x000264, "Member 'USQEXSEADSound::bIgnoreAudioVolumeAttenuation' has a wrong offset!");
static_assert(offsetof(USQEXSEADSound, bEnableSEADTracingOcclusion) == 0x000265, "Member 'USQEXSEADSound::bEnableSEADTracingOcclusion' has a wrong offset!");
static_assert(offsetof(USQEXSEADSound, SEADOcclusionTraceChannel) == 0x000266, "Member 'USQEXSEADSound::SEADOcclusionTraceChannel' has a wrong offset!");
static_assert(offsetof(USQEXSEADSound, SoundNameIndexTable) == 0x000268, "Member 'USQEXSEADSound::SoundNameIndexTable' has a wrong offset!");
static_assert(offsetof(USQEXSEADSound, SoundNameAliasSetting) == 0x0002B8, "Member 'USQEXSEADSound::SoundNameAliasSetting' has a wrong offset!");
static_assert(offsetof(USQEXSEADSound, bStreamingAsset_PlatformPS4) == 0x0002C0, "Member 'USQEXSEADSound::bStreamingAsset_PlatformPS4' has a wrong offset!");

// Class SQEXSEAD.SQEXSEADMusic
// 0x00A0 (0x04A0 - 0x0400)
class USQEXSEADMusic final : public USQEXSEADSound
{
public:
	TMap<class FName, int32>                      SectionNameIndexTable;                             // 0x0400(0x0050)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TMap<class FName, int32>                      ModeNameIndexTable;                                // 0x0450(0x0050)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEXSEADMusic">();
	}
	static class USQEXSEADMusic* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEXSEADMusic>();
	}
};
static_assert(alignof(USQEXSEADMusic) == 0x000008, "Wrong alignment on USQEXSEADMusic");
static_assert(sizeof(USQEXSEADMusic) == 0x0004A0, "Wrong size on USQEXSEADMusic");
static_assert(offsetof(USQEXSEADMusic, SectionNameIndexTable) == 0x000400, "Member 'USQEXSEADMusic::SectionNameIndexTable' has a wrong offset!");
static_assert(offsetof(USQEXSEADMusic, ModeNameIndexTable) == 0x000450, "Member 'USQEXSEADMusic::ModeNameIndexTable' has a wrong offset!");

// Class SQEXSEAD.SQEXSEADPluginDebugHUD
// 0x0000 (0x0460 - 0x0460)
class ASQEXSEADPluginDebugHUD final : public AHUD
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEXSEADPluginDebugHUD">();
	}
	static class ASQEXSEADPluginDebugHUD* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQEXSEADPluginDebugHUD>();
	}
};
static_assert(alignof(ASQEXSEADPluginDebugHUD) == 0x000008, "Wrong alignment on ASQEXSEADPluginDebugHUD");
static_assert(sizeof(ASQEXSEADPluginDebugHUD) == 0x000460, "Wrong size on ASQEXSEADPluginDebugHUD");

// Class SQEXSEAD.SQEXSEADSoundAliasNameSetting
// 0x00A0 (0x00D0 - 0x0030)
class USQEXSEADSoundAliasNameSetting final : public UDataAsset
{
public:
	TMap<class FName, class FName>                TranslateSettings;                                 // 0x0030(0x0050)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<class FName, struct FSQEXSEADRandomSoundSetting> RandomSettings;                                    // 0x0080(0x0050)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEXSEADSoundAliasNameSetting">();
	}
	static class USQEXSEADSoundAliasNameSetting* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEXSEADSoundAliasNameSetting>();
	}
};
static_assert(alignof(USQEXSEADSoundAliasNameSetting) == 0x000008, "Wrong alignment on USQEXSEADSoundAliasNameSetting");
static_assert(sizeof(USQEXSEADSoundAliasNameSetting) == 0x0000D0, "Wrong size on USQEXSEADSoundAliasNameSetting");
static_assert(offsetof(USQEXSEADSoundAliasNameSetting, TranslateSettings) == 0x000030, "Member 'USQEXSEADSoundAliasNameSetting::TranslateSettings' has a wrong offset!");
static_assert(offsetof(USQEXSEADSoundAliasNameSetting, RandomSettings) == 0x000080, "Member 'USQEXSEADSoundAliasNameSetting::RandomSettings' has a wrong offset!");

// Class SQEXSEAD.SQEXSEADSoundBank
// 0x0140 (0x0168 - 0x0028)
class USQEXSEADSoundBank final : public UObject
{
public:
	class UAssetImportData*                       AssetImportData;                                   // 0x0028(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_30[0x138];                                     // 0x0030(0x0138)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEXSEADSoundBank">();
	}
	static class USQEXSEADSoundBank* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEXSEADSoundBank>();
	}
};
static_assert(alignof(USQEXSEADSoundBank) == 0x000008, "Wrong alignment on USQEXSEADSoundBank");
static_assert(sizeof(USQEXSEADSoundBank) == 0x000168, "Wrong size on USQEXSEADSoundBank");
static_assert(offsetof(USQEXSEADSoundBank, AssetImportData) == 0x000028, "Member 'USQEXSEADSoundBank::AssetImportData' has a wrong offset!");

// Class SQEXSEAD.SQEXSEADStatics
// 0x0000 (0x0028 - 0x0028)
class USQEXSEADStatics final : public UObject
{
public:
	static void AutoSeCtrl_SetEnable(bool Enable);
	static void CallEvent(class FName EventName);
	static void CategoryCtrl_DebugMute(class FName CategoryName, bool bToBeMuted, float FadeTime);
	static float CategoryCtrl_GetVolume(class FName CategoryName, ESQEXSEADCategoryVolumeLayers targerlayer);
	static void CategoryCtrl_Resume(class FName CategoryName, float FadeInTime);
	static void CategoryCtrl_SetPitch(class FName CategoryName, float Pitch, float FadeTime);
	static void CategoryCtrl_SetVolume(class FName CategoryName, float Volume, float FadeTime, ESQEXSEADCategoryVolumeLayers targerlayer);
	static void CategoryCtrl_Stop(class FName CategoryName, float FadeOutTime);
	static void CategoryCtrl_Suspend(class FName CategoryName, float FadeOutTime);
	static void CategoryCtrl_ToggleDebugMute(class FName CategoryName, float FadeTime);
	static class USQEXSEADBGMSlotController* CreateBGMSlot(class FName Name_0, const struct FSQEXSEAD_BGMOptions& Options);
	static void ExecAudioVolumeEvent(class FName AudioVolumeEventName);
	static class USQEXSEADBGMSlotController* GetBGMSlotController(class FName Name_0);
	static bool GetPadVibrationEnable();
	static float GetRenderSpeedRate();
	static float GetSoundDuration(class USoundBase* Sound, class FName SoundName);
	static bool IsExistSoundInBank(class USoundBase* Sound, class FName SoundName);
	static bool IsPlayingBGM(class USoundBase* Sound);
	static void PlaySound2D(const class UObject* WorldContextObject, class USoundBase* Sound, int32 SoundIndex, float SwitchValue, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundConcurrency* ConcurrencySettings, float VibrationVolumeMultiplier);
	static class FName PlaySound2DByName(const class UObject* WorldContextObject, class USoundBase* Sound, class FName SoundName, float SwitchValue, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundConcurrency* ConcurrencySettings, float VibrationVolumeMultiplier);
	static void PlaySound3D(const class UObject* WorldContextObject, class USoundBase* Sound, const struct FVector& Location, int32 SoundIndex, float SwitchValue, int32 ZeroOneSlot, float ZeroOneValue, int32 ExternalID, const struct FRotator& Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings, class USoundConcurrency* ConcurrencySettings, bool bVirtualizePlay, bool bUISound, float VibrationVolumeMultiplier);
	static class FName PlaySound3DByName(const class UObject* WorldContextObject, class USoundBase* Sound, class FName SoundName, const struct FVector& Location, float SwitchValue, int32 ZeroOneSlot, float ZeroOneValue, int32 ExternalID, const struct FRotator& Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings, class USoundConcurrency* ConcurrencySettings, bool bVirtualizePlay, bool bUISound, float VibrationVolumeMultiplier);
	static void ResetAllCategoryTemporarySettings(float resetFadeTime);
	static void ResetEffectPreset(float resetFadeTime);
	static void ResumeBGM();
	static void ResumeBGM_OptionalFade(float FadeTime);
	static void SetEffectPreset(class FName presetName, float FadeTime);
	static void SetEnableBGMAutoResume(bool bIsEnabled);
	static void SetExternalParameter(class FName ParamName, float Value);
	static void SetPadVibrationEnable(bool bEnable);
	static bool SetRenderSpeedRate(float Rate);
	static class USQEXSEADAudioComponent* SpawnSound2D(const class UObject* WorldContextObject, class USoundBase* Sound, int32 SoundIndex, float SwitchValue, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundConcurrency* ConcurrencySettings, bool bPersistAcrossLevelTransition, bool bAutoDestroy, bool bRecycle, float VibrationVolumeMultiplier);
	static class USQEXSEADAudioComponent* SpawnSound2DByName(const class UObject* WorldContextObject, class USoundBase* Sound, class FName SoundName, float SwitchValue, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundConcurrency* ConcurrencySettings, bool bPersistAcrossLevelTransition, bool bAutoDestroy, bool bRecycle, float VibrationVolumeMultiplier);
	static class USQEXSEADAudioComponent* SpawnSoundAtLocation(const class UObject* WorldContextObject, class USoundBase* Sound, const struct FVector& Location, int32 SoundIndex, float SwitchValue, int32 ZeroOneSlot, float ZeroOneValue, int32 ExternalID, const struct FRotator& Rotation, bool bVirtualizePlay, bool bUISound, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings, class USoundConcurrency* ConcurrencySettings, bool bAutoDestroy, bool bRecycle, float VibrationVolumeMultiplier);
	static class USQEXSEADAudioComponent* SpawnSoundAtLocationByName(const class UObject* WorldContextObject, class USoundBase* Sound, const struct FVector& Location, class FName SoundName, float SwitchValue, int32 ZeroOneSlot, float ZeroOneValue, int32 ExternalID, const struct FRotator& Rotation, bool bVirtualizePlay, bool bUISound, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings, class USoundConcurrency* ConcurrencySettings, bool bAutoDestroy, bool bRecycle, float VibrationVolumeMultiplier);
	static class USQEXSEADAudioComponent* SpawnSoundAttached(class USoundBase* Sound, class USceneComponent* AttachToComponent, int32 SoundIndex, float SwitchValue, int32 ZeroOneSlot, float ZeroOneValue, int32 ExternalID, class FName AttachPointName, const struct FVector& Location, const struct FRotator& Rotation, EAttachLocation LocationType, bool bStopWhenAttachedToDestroyed, bool bVirtualizePlay, bool bUISound, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings, class USoundConcurrency* ConcurrencySettings, bool bAutoDestroy, bool bRecycle, float VibrationVolumeMultiplier);
	static class USQEXSEADAudioComponent* SpawnSoundAttachedByName(class USoundBase* Sound, class USceneComponent* AttachToComponent, class FName SoundName, float SwitchValue, int32 ZeroOneSlot, float ZeroOneValue, int32 ExternalID, class FName AttachPointName, const struct FVector& Location, const struct FRotator& Rotation, EAttachLocation LocationType, bool bStopWhenAttachedToDestroyed, bool bVirtualizePlay, bool bUISound, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings, class USoundConcurrency* ConcurrencySettings, bool bAutoDestroy, bool bRecycle, float VibrationVolumeMultiplier);
	static void StopAllBGM();
	static void StopAllBGM_OptionalFade(float FadeTime);
	static void StopAllCategorySounds(float FadeTime);
	static void SuspendBGM();
	static void SuspendBGM_OptionalFade(float FadeTime);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEXSEADStatics">();
	}
	static class USQEXSEADStatics* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEXSEADStatics>();
	}
};
static_assert(alignof(USQEXSEADStatics) == 0x000008, "Wrong alignment on USQEXSEADStatics");
static_assert(sizeof(USQEXSEADStatics) == 0x000028, "Wrong size on USQEXSEADStatics");

// Class SQEXSEAD.SQEXSEADAnimNotify_PlayAutoSe
// 0x0028 (0x0060 - 0x0038)
class USQEXSEADAnimNotify_PlayAutoSe final : public UAnimNotify
{
public:
	struct FSQEXSEADAnimNotifyPlayAutoSeParams    PlaySettings;                                      // 0x0038(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEXSEADAnimNotify_PlayAutoSe">();
	}
	static class USQEXSEADAnimNotify_PlayAutoSe* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEXSEADAnimNotify_PlayAutoSe>();
	}
};
static_assert(alignof(USQEXSEADAnimNotify_PlayAutoSe) == 0x000008, "Wrong alignment on USQEXSEADAnimNotify_PlayAutoSe");
static_assert(sizeof(USQEXSEADAnimNotify_PlayAutoSe) == 0x000060, "Wrong size on USQEXSEADAnimNotify_PlayAutoSe");
static_assert(offsetof(USQEXSEADAnimNotify_PlayAutoSe, PlaySettings) == 0x000038, "Member 'USQEXSEADAnimNotify_PlayAutoSe::PlaySettings' has a wrong offset!");

// Class SQEXSEAD.SQEXSEADAnimNotifyState_PlayAutoSe
// 0x0080 (0x00B0 - 0x0030)
class USQEXSEADAnimNotifyState_PlayAutoSe final : public UAnimNotifyState
{
public:
	struct FSQEXSEADAnimNotifyPlayAutoSeParams    PlaySettings;                                      // 0x0030(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	float                                         FadeOutDuration;                                   // 0x0058(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x54];                                      // 0x005C(0x0054)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEXSEADAnimNotifyState_PlayAutoSe">();
	}
	static class USQEXSEADAnimNotifyState_PlayAutoSe* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEXSEADAnimNotifyState_PlayAutoSe>();
	}
};
static_assert(alignof(USQEXSEADAnimNotifyState_PlayAutoSe) == 0x000008, "Wrong alignment on USQEXSEADAnimNotifyState_PlayAutoSe");
static_assert(sizeof(USQEXSEADAnimNotifyState_PlayAutoSe) == 0x0000B0, "Wrong size on USQEXSEADAnimNotifyState_PlayAutoSe");
static_assert(offsetof(USQEXSEADAnimNotifyState_PlayAutoSe, PlaySettings) == 0x000030, "Member 'USQEXSEADAnimNotifyState_PlayAutoSe::PlaySettings' has a wrong offset!");
static_assert(offsetof(USQEXSEADAnimNotifyState_PlayAutoSe, FadeOutDuration) == 0x000058, "Member 'USQEXSEADAnimNotifyState_PlayAutoSe::FadeOutDuration' has a wrong offset!");

// Class SQEXSEAD.SQEXSEADAnimNotifyState_ChangeAutoSeEnable
// 0x0058 (0x0088 - 0x0030)
class USQEXSEADAnimNotifyState_ChangeAutoSeEnable final : public UAnimNotifyState
{
public:
	uint8                                         bEnableAutoSeEnableParameters : 1;                 // 0x0030(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEnableSetting : 1;                                // 0x0030(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	ESQEXSEADChangeAutoSeEnableNotifyEndBehavior  NotifyEndBehavior;                                 // 0x0031(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bEnableContinuousDisabling : 1;                    // 0x0032(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEnableMotionDetectFilters : 1;                    // 0x0032(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bMotionDetectFilterAsGlobal : 1;                   // 0x0032(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	struct FSQEXSEADAutoSeMotionSoundFilter       MSFilter;                                          // 0x0033(0x0003)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_36[0x52];                                      // 0x0036(0x0052)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEXSEADAnimNotifyState_ChangeAutoSeEnable">();
	}
	static class USQEXSEADAnimNotifyState_ChangeAutoSeEnable* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEXSEADAnimNotifyState_ChangeAutoSeEnable>();
	}
};
static_assert(alignof(USQEXSEADAnimNotifyState_ChangeAutoSeEnable) == 0x000008, "Wrong alignment on USQEXSEADAnimNotifyState_ChangeAutoSeEnable");
static_assert(sizeof(USQEXSEADAnimNotifyState_ChangeAutoSeEnable) == 0x000088, "Wrong size on USQEXSEADAnimNotifyState_ChangeAutoSeEnable");
static_assert(offsetof(USQEXSEADAnimNotifyState_ChangeAutoSeEnable, NotifyEndBehavior) == 0x000031, "Member 'USQEXSEADAnimNotifyState_ChangeAutoSeEnable::NotifyEndBehavior' has a wrong offset!");
static_assert(offsetof(USQEXSEADAnimNotifyState_ChangeAutoSeEnable, MSFilter) == 0x000033, "Member 'USQEXSEADAnimNotifyState_ChangeAutoSeEnable::MSFilter' has a wrong offset!");

// Class SQEXSEAD.SQEXSEADAudioVolume
// 0x01C8 (0x0578 - 0x03B0)
class ASQEXSEADAudioVolume final : public AVolume
{
public:
	class USQEXSEADVolumeComponent*               VolumeComponent;                                   // 0x03B0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bEnabled : 1;                                      // 0x03B8(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, Net, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_3B9[0x3];                                      // 0x03B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         EffectPresetNumber;                                // 0x03BC(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EffectFadeTime;                                    // 0x03C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C4[0x4];                                      // 0x03C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             Sound;                                             // 0x03C8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SoundName;                                         // 0x03D0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SoundVolume;                                       // 0x03D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SoundFadeInTime;                                   // 0x03DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SoundFadeInCurveNumber;                            // 0x03E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SoundFadeOutTime;                                  // 0x03E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SoundFadeOutCurveNumber;                           // 0x03E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bOccludeExteriorAudioVolumeSounds : 1;             // 0x03EC(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_3ED[0x3];                                      // 0x03ED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AudioVolumeSoundOcclusionVolume;                   // 0x03F0(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AudioVolumeSoundOcclusionLPF;                      // 0x03F4(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AudioVolumeSoundOcclusionFadeInTime;               // 0x03F8(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AudioVolumeSoundOcclusionFadeOutTime;              // 0x03FC(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AudioVolumeSoundOcclusionLPFFadeInTime;            // 0x0400(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AudioVolumeSoundOcclusionLPFFadeOutTime;           // 0x0404(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bEnableUnoccludedObstruction : 1;                  // 0x0408(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_409[0x3];                                      // 0x0409(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ObstructionVolume;                                 // 0x040C(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ObstructionLPF;                                    // 0x0410(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InternalObstructionVolume;                         // 0x0414(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InternalObstructionLPF;                            // 0x0418(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ObstructionFadeTime;                               // 0x041C(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Priority;                                          // 0x0420(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bUseObstructionParamsSeparatePriority : 1;         // 0x0424(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_425[0x3];                                      // 0x0425(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ObstructionParamsSeparatePriority;                 // 0x0428(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GroupingID;                                        // 0x042C(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class ASQEXSEADAudioVolume*>           GroupedAudioVolumes;                               // 0x0430(0x0010)(Edit, ZeroConstructor, Transient, EditConst, NativeAccessSpecifierPublic)
	class USoundAttenuation*                      OverridingAttenuationSettings;                     // 0x0440(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, struct FSQEXSEADAudioVolumeEvent> AudioVolumeEvents;                                 // 0x0448(0x0050)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         bUseEncompass : 1;                                 // 0x0498(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bSyncActorHidden : 1;                              // 0x0498(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_499[0xDF];                                     // 0x0499(0x00DF)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEXSEADAudioVolume">();
	}
	static class ASQEXSEADAudioVolume* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQEXSEADAudioVolume>();
	}
};
static_assert(alignof(ASQEXSEADAudioVolume) == 0x000008, "Wrong alignment on ASQEXSEADAudioVolume");
static_assert(sizeof(ASQEXSEADAudioVolume) == 0x000578, "Wrong size on ASQEXSEADAudioVolume");
static_assert(offsetof(ASQEXSEADAudioVolume, VolumeComponent) == 0x0003B0, "Member 'ASQEXSEADAudioVolume::VolumeComponent' has a wrong offset!");
static_assert(offsetof(ASQEXSEADAudioVolume, EffectPresetNumber) == 0x0003BC, "Member 'ASQEXSEADAudioVolume::EffectPresetNumber' has a wrong offset!");
static_assert(offsetof(ASQEXSEADAudioVolume, EffectFadeTime) == 0x0003C0, "Member 'ASQEXSEADAudioVolume::EffectFadeTime' has a wrong offset!");
static_assert(offsetof(ASQEXSEADAudioVolume, Sound) == 0x0003C8, "Member 'ASQEXSEADAudioVolume::Sound' has a wrong offset!");
static_assert(offsetof(ASQEXSEADAudioVolume, SoundName) == 0x0003D0, "Member 'ASQEXSEADAudioVolume::SoundName' has a wrong offset!");
static_assert(offsetof(ASQEXSEADAudioVolume, SoundVolume) == 0x0003D8, "Member 'ASQEXSEADAudioVolume::SoundVolume' has a wrong offset!");
static_assert(offsetof(ASQEXSEADAudioVolume, SoundFadeInTime) == 0x0003DC, "Member 'ASQEXSEADAudioVolume::SoundFadeInTime' has a wrong offset!");
static_assert(offsetof(ASQEXSEADAudioVolume, SoundFadeInCurveNumber) == 0x0003E0, "Member 'ASQEXSEADAudioVolume::SoundFadeInCurveNumber' has a wrong offset!");
static_assert(offsetof(ASQEXSEADAudioVolume, SoundFadeOutTime) == 0x0003E4, "Member 'ASQEXSEADAudioVolume::SoundFadeOutTime' has a wrong offset!");
static_assert(offsetof(ASQEXSEADAudioVolume, SoundFadeOutCurveNumber) == 0x0003E8, "Member 'ASQEXSEADAudioVolume::SoundFadeOutCurveNumber' has a wrong offset!");
static_assert(offsetof(ASQEXSEADAudioVolume, AudioVolumeSoundOcclusionVolume) == 0x0003F0, "Member 'ASQEXSEADAudioVolume::AudioVolumeSoundOcclusionVolume' has a wrong offset!");
static_assert(offsetof(ASQEXSEADAudioVolume, AudioVolumeSoundOcclusionLPF) == 0x0003F4, "Member 'ASQEXSEADAudioVolume::AudioVolumeSoundOcclusionLPF' has a wrong offset!");
static_assert(offsetof(ASQEXSEADAudioVolume, AudioVolumeSoundOcclusionFadeInTime) == 0x0003F8, "Member 'ASQEXSEADAudioVolume::AudioVolumeSoundOcclusionFadeInTime' has a wrong offset!");
static_assert(offsetof(ASQEXSEADAudioVolume, AudioVolumeSoundOcclusionFadeOutTime) == 0x0003FC, "Member 'ASQEXSEADAudioVolume::AudioVolumeSoundOcclusionFadeOutTime' has a wrong offset!");
static_assert(offsetof(ASQEXSEADAudioVolume, AudioVolumeSoundOcclusionLPFFadeInTime) == 0x000400, "Member 'ASQEXSEADAudioVolume::AudioVolumeSoundOcclusionLPFFadeInTime' has a wrong offset!");
static_assert(offsetof(ASQEXSEADAudioVolume, AudioVolumeSoundOcclusionLPFFadeOutTime) == 0x000404, "Member 'ASQEXSEADAudioVolume::AudioVolumeSoundOcclusionLPFFadeOutTime' has a wrong offset!");
static_assert(offsetof(ASQEXSEADAudioVolume, ObstructionVolume) == 0x00040C, "Member 'ASQEXSEADAudioVolume::ObstructionVolume' has a wrong offset!");
static_assert(offsetof(ASQEXSEADAudioVolume, ObstructionLPF) == 0x000410, "Member 'ASQEXSEADAudioVolume::ObstructionLPF' has a wrong offset!");
static_assert(offsetof(ASQEXSEADAudioVolume, InternalObstructionVolume) == 0x000414, "Member 'ASQEXSEADAudioVolume::InternalObstructionVolume' has a wrong offset!");
static_assert(offsetof(ASQEXSEADAudioVolume, InternalObstructionLPF) == 0x000418, "Member 'ASQEXSEADAudioVolume::InternalObstructionLPF' has a wrong offset!");
static_assert(offsetof(ASQEXSEADAudioVolume, ObstructionFadeTime) == 0x00041C, "Member 'ASQEXSEADAudioVolume::ObstructionFadeTime' has a wrong offset!");
static_assert(offsetof(ASQEXSEADAudioVolume, Priority) == 0x000420, "Member 'ASQEXSEADAudioVolume::Priority' has a wrong offset!");
static_assert(offsetof(ASQEXSEADAudioVolume, ObstructionParamsSeparatePriority) == 0x000428, "Member 'ASQEXSEADAudioVolume::ObstructionParamsSeparatePriority' has a wrong offset!");
static_assert(offsetof(ASQEXSEADAudioVolume, GroupingID) == 0x00042C, "Member 'ASQEXSEADAudioVolume::GroupingID' has a wrong offset!");
static_assert(offsetof(ASQEXSEADAudioVolume, GroupedAudioVolumes) == 0x000430, "Member 'ASQEXSEADAudioVolume::GroupedAudioVolumes' has a wrong offset!");
static_assert(offsetof(ASQEXSEADAudioVolume, OverridingAttenuationSettings) == 0x000440, "Member 'ASQEXSEADAudioVolume::OverridingAttenuationSettings' has a wrong offset!");
static_assert(offsetof(ASQEXSEADAudioVolume, AudioVolumeEvents) == 0x000448, "Member 'ASQEXSEADAudioVolume::AudioVolumeEvents' has a wrong offset!");

// Class SQEXSEAD.SQEXSEADAutoSeComponentAssetTable
// 0x24D0 (0x2500 - 0x0030)
class USQEXSEADAutoSeComponentAssetTable final : public UDataAsset
{
public:
	struct FSQEXSEADAutoSeComponentAssetTablePerSurface PerSurfaceInfos[0x3F];                             // 0x0030(0x0090)(Edit, NativeAccessSpecifierPublic)
	struct FSQEXSEADAutoSeComponentAssetTableNonSurface NonSurfaceInfos;                                   // 0x23A0(0x0150)(Edit, NativeAccessSpecifierPublic)
	struct FSQEXSEADSurfaceAssetReferenceTableData AuxSurfaceAssetTable;                              // 0x24F0(0x0010)(Edit, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEXSEADAutoSeComponentAssetTable">();
	}
	static class USQEXSEADAutoSeComponentAssetTable* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEXSEADAutoSeComponentAssetTable>();
	}
};
static_assert(alignof(USQEXSEADAutoSeComponentAssetTable) == 0x000008, "Wrong alignment on USQEXSEADAutoSeComponentAssetTable");
static_assert(sizeof(USQEXSEADAutoSeComponentAssetTable) == 0x002500, "Wrong size on USQEXSEADAutoSeComponentAssetTable");
static_assert(offsetof(USQEXSEADAutoSeComponentAssetTable, PerSurfaceInfos) == 0x000030, "Member 'USQEXSEADAutoSeComponentAssetTable::PerSurfaceInfos' has a wrong offset!");
static_assert(offsetof(USQEXSEADAutoSeComponentAssetTable, NonSurfaceInfos) == 0x0023A0, "Member 'USQEXSEADAutoSeComponentAssetTable::NonSurfaceInfos' has a wrong offset!");
static_assert(offsetof(USQEXSEADAutoSeComponentAssetTable, AuxSurfaceAssetTable) == 0x0024F0, "Member 'USQEXSEADAutoSeComponentAssetTable::AuxSurfaceAssetTable' has a wrong offset!");

// Class SQEXSEAD.SQEXSEADAutoSeComponentSetting
// 0x0068 (0x0098 - 0x0030)
class USQEXSEADAutoSeComponentSetting final : public UDataAsset
{
public:
	struct FSQEXSEADAutoSeComponentInitParams     InitParams;                                        // 0x0030(0x0068)(Edit, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEXSEADAutoSeComponentSetting">();
	}
	static class USQEXSEADAutoSeComponentSetting* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEXSEADAutoSeComponentSetting>();
	}
};
static_assert(alignof(USQEXSEADAutoSeComponentSetting) == 0x000008, "Wrong alignment on USQEXSEADAutoSeComponentSetting");
static_assert(sizeof(USQEXSEADAutoSeComponentSetting) == 0x000098, "Wrong size on USQEXSEADAutoSeComponentSetting");
static_assert(offsetof(USQEXSEADAutoSeComponentSetting, InitParams) == 0x000030, "Member 'USQEXSEADAutoSeComponentSetting::InitParams' has a wrong offset!");

// Class SQEXSEAD.SQEXSEADAutoSeDetectionSetting
// 0x0320 (0x0350 - 0x0030)
class USQEXSEADAutoSeDetectionSetting final : public UDataAsset
{
public:
	struct FSQEXSEADAutoSeDetectorSettings        Settings;                                          // 0x0030(0x0188)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FSQEXSEADAutoSeDetectorSettings        SettingsForMOMode;                                 // 0x01B8(0x0188)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bUseAnalyzerSettingForMotionOnlyMode;              // 0x0340(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDistanceClippingEnable;                           // 0x0341(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_342[0x2];                                      // 0x0342(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ClippingDistance;                                  // 0x0344(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFollowMeshVisibility;                             // 0x0348(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceDetectListenerTeleportRuntime;               // 0x0349(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34A[0x6];                                      // 0x034A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEXSEADAutoSeDetectionSetting">();
	}
	static class USQEXSEADAutoSeDetectionSetting* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEXSEADAutoSeDetectionSetting>();
	}
};
static_assert(alignof(USQEXSEADAutoSeDetectionSetting) == 0x000008, "Wrong alignment on USQEXSEADAutoSeDetectionSetting");
static_assert(sizeof(USQEXSEADAutoSeDetectionSetting) == 0x000350, "Wrong size on USQEXSEADAutoSeDetectionSetting");
static_assert(offsetof(USQEXSEADAutoSeDetectionSetting, Settings) == 0x000030, "Member 'USQEXSEADAutoSeDetectionSetting::Settings' has a wrong offset!");
static_assert(offsetof(USQEXSEADAutoSeDetectionSetting, SettingsForMOMode) == 0x0001B8, "Member 'USQEXSEADAutoSeDetectionSetting::SettingsForMOMode' has a wrong offset!");
static_assert(offsetof(USQEXSEADAutoSeDetectionSetting, bUseAnalyzerSettingForMotionOnlyMode) == 0x000340, "Member 'USQEXSEADAutoSeDetectionSetting::bUseAnalyzerSettingForMotionOnlyMode' has a wrong offset!");
static_assert(offsetof(USQEXSEADAutoSeDetectionSetting, bDistanceClippingEnable) == 0x000341, "Member 'USQEXSEADAutoSeDetectionSetting::bDistanceClippingEnable' has a wrong offset!");
static_assert(offsetof(USQEXSEADAutoSeDetectionSetting, ClippingDistance) == 0x000344, "Member 'USQEXSEADAutoSeDetectionSetting::ClippingDistance' has a wrong offset!");
static_assert(offsetof(USQEXSEADAutoSeDetectionSetting, bFollowMeshVisibility) == 0x000348, "Member 'USQEXSEADAutoSeDetectionSetting::bFollowMeshVisibility' has a wrong offset!");
static_assert(offsetof(USQEXSEADAutoSeDetectionSetting, bForceDetectListenerTeleportRuntime) == 0x000349, "Member 'USQEXSEADAutoSeDetectionSetting::bForceDetectListenerTeleportRuntime' has a wrong offset!");

// Class SQEXSEAD.SQEXSEADAutoSeComponentCallbackDefault
// 0x0060 (0x0088 - 0x0028)
class USQEXSEADAutoSeComponentCallbackDefault final : public USQEXSEADAutoSeComponentCallback
{
public:
	uint8                                         Pad_28[0x60];                                      // 0x0028(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEXSEADAutoSeComponentCallbackDefault">();
	}
	static class USQEXSEADAutoSeComponentCallbackDefault* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEXSEADAutoSeComponentCallbackDefault>();
	}
};
static_assert(alignof(USQEXSEADAutoSeComponentCallbackDefault) == 0x000008, "Wrong alignment on USQEXSEADAutoSeComponentCallbackDefault");
static_assert(sizeof(USQEXSEADAutoSeComponentCallbackDefault) == 0x000088, "Wrong size on USQEXSEADAutoSeComponentCallbackDefault");

// Class SQEXSEAD.SQEXSEADAutoSeComponent
// 0x00C8 (0x01C0 - 0x00F8)
class USQEXSEADAutoSeComponent final : public UActorComponent
{
public:
	class USQEXSEADAutoSeComponentCallback*       AutoSeCallback;                                    // 0x00F8(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQEXSEADAutoSeComponentSetting*        SettingData;                                       // 0x0100(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQEXSEADAutoSeComponentAssetTable*     AssetTable;                                        // 0x0108(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQEXSEADAutoSeDetectionSetting*        DetectionSetting;                                  // 0x0110(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_118[0x8];                                      // 0x0118(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMeshComponent*                 CachedMeshReference;                               // 0x0120(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UPawnMovementComponent*                 CachedMovementComponent;                           // 0x0128(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_130[0x90];                                     // 0x0130(0x0090)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEXSEADAutoSeComponent">();
	}
	static class USQEXSEADAutoSeComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEXSEADAutoSeComponent>();
	}
};
static_assert(alignof(USQEXSEADAutoSeComponent) == 0x000008, "Wrong alignment on USQEXSEADAutoSeComponent");
static_assert(sizeof(USQEXSEADAutoSeComponent) == 0x0001C0, "Wrong size on USQEXSEADAutoSeComponent");
static_assert(offsetof(USQEXSEADAutoSeComponent, AutoSeCallback) == 0x0000F8, "Member 'USQEXSEADAutoSeComponent::AutoSeCallback' has a wrong offset!");
static_assert(offsetof(USQEXSEADAutoSeComponent, SettingData) == 0x000100, "Member 'USQEXSEADAutoSeComponent::SettingData' has a wrong offset!");
static_assert(offsetof(USQEXSEADAutoSeComponent, AssetTable) == 0x000108, "Member 'USQEXSEADAutoSeComponent::AssetTable' has a wrong offset!");
static_assert(offsetof(USQEXSEADAutoSeComponent, DetectionSetting) == 0x000110, "Member 'USQEXSEADAutoSeComponent::DetectionSetting' has a wrong offset!");
static_assert(offsetof(USQEXSEADAutoSeComponent, CachedMeshReference) == 0x000120, "Member 'USQEXSEADAutoSeComponent::CachedMeshReference' has a wrong offset!");
static_assert(offsetof(USQEXSEADAutoSeComponent, CachedMovementComponent) == 0x000128, "Member 'USQEXSEADAutoSeComponent::CachedMovementComponent' has a wrong offset!");

// Class SQEXSEAD.SQEXSEADVolumeComponent
// 0x0010 (0x02C0 - 0x02B0)
class USQEXSEADVolumeComponent final : public USceneComponent
{
public:
	struct FSQEXSEADVolumeInfo                    VolumeInfo;                                        // 0x02B0(0x0001)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B1[0xF];                                      // 0x02B1(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEXSEADVolumeComponent">();
	}
	static class USQEXSEADVolumeComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEXSEADVolumeComponent>();
	}
};
static_assert(alignof(USQEXSEADVolumeComponent) == 0x000008, "Wrong alignment on USQEXSEADVolumeComponent");
static_assert(sizeof(USQEXSEADVolumeComponent) == 0x0002C0, "Wrong size on USQEXSEADVolumeComponent");
static_assert(offsetof(USQEXSEADVolumeComponent, VolumeInfo) == 0x0002B0, "Member 'USQEXSEADVolumeComponent::VolumeInfo' has a wrong offset!");

// Class SQEXSEAD.SQEXSEADWhizSound
// 0x0018 (0x0390 - 0x0378)
class ASQEXSEADWhizSound final : public AActor
{
public:
	class USoundBase*                             Sound;                                             // 0x0378(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SoundName;                                         // 0x0380(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQEXSEADWhizSeComponent*               WhizComponent;                                     // 0x0388(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEXSEADWhizSound">();
	}
	static class ASQEXSEADWhizSound* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQEXSEADWhizSound>();
	}
};
static_assert(alignof(ASQEXSEADWhizSound) == 0x000008, "Wrong alignment on ASQEXSEADWhizSound");
static_assert(sizeof(ASQEXSEADWhizSound) == 0x000390, "Wrong size on ASQEXSEADWhizSound");
static_assert(offsetof(ASQEXSEADWhizSound, Sound) == 0x000378, "Member 'ASQEXSEADWhizSound::Sound' has a wrong offset!");
static_assert(offsetof(ASQEXSEADWhizSound, SoundName) == 0x000380, "Member 'ASQEXSEADWhizSound::SoundName' has a wrong offset!");
static_assert(offsetof(ASQEXSEADWhizSound, WhizComponent) == 0x000388, "Member 'ASQEXSEADWhizSound::WhizComponent' has a wrong offset!");

// Class SQEXSEAD.SQEXSEADZeroOneSeComponent
// 0x0048 (0x0140 - 0x00F8)
class USQEXSEADZeroOneSeComponent final : public UActorComponent
{
public:
	class USoundBase*                             SoundAsset;                                        // 0x00F8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SoundIndex;                                        // 0x0100(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeInTime;                                        // 0x0104(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeOutTime;                                       // 0x0108(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQEXSEADAudioStartTimings                    AudioStartTiming;                                  // 0x010C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10D[0x3];                                      // 0x010D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   AttachPointName;                                   // 0x0110(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bEnable_Slot0 : 1;                                 // 0x0118(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_119[0x3];                                      // 0x0119(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	ESQEXSEADZeroOneProperties                    PropertyType_Slot0;                                // 0x011C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11D[0x3];                                      // 0x011D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bEnable_Slot1 : 1;                                 // 0x0120(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_121[0x3];                                      // 0x0121(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	ESQEXSEADZeroOneProperties                    PropertyType_Slot1;                                // 0x0124(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_125[0x3];                                      // 0x0125(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class USQEXSEADAudioComponent*                MyAudioComponent;                                  // 0x0128(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_130[0x10];                                     // 0x0130(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Play();
	void SetZeroOneValue(int32 Slot, float Value, float FadeTime);
	void Stop();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEXSEADZeroOneSeComponent">();
	}
	static class USQEXSEADZeroOneSeComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEXSEADZeroOneSeComponent>();
	}
};
static_assert(alignof(USQEXSEADZeroOneSeComponent) == 0x000008, "Wrong alignment on USQEXSEADZeroOneSeComponent");
static_assert(sizeof(USQEXSEADZeroOneSeComponent) == 0x000140, "Wrong size on USQEXSEADZeroOneSeComponent");
static_assert(offsetof(USQEXSEADZeroOneSeComponent, SoundAsset) == 0x0000F8, "Member 'USQEXSEADZeroOneSeComponent::SoundAsset' has a wrong offset!");
static_assert(offsetof(USQEXSEADZeroOneSeComponent, SoundIndex) == 0x000100, "Member 'USQEXSEADZeroOneSeComponent::SoundIndex' has a wrong offset!");
static_assert(offsetof(USQEXSEADZeroOneSeComponent, FadeInTime) == 0x000104, "Member 'USQEXSEADZeroOneSeComponent::FadeInTime' has a wrong offset!");
static_assert(offsetof(USQEXSEADZeroOneSeComponent, FadeOutTime) == 0x000108, "Member 'USQEXSEADZeroOneSeComponent::FadeOutTime' has a wrong offset!");
static_assert(offsetof(USQEXSEADZeroOneSeComponent, AudioStartTiming) == 0x00010C, "Member 'USQEXSEADZeroOneSeComponent::AudioStartTiming' has a wrong offset!");
static_assert(offsetof(USQEXSEADZeroOneSeComponent, AttachPointName) == 0x000110, "Member 'USQEXSEADZeroOneSeComponent::AttachPointName' has a wrong offset!");
static_assert(offsetof(USQEXSEADZeroOneSeComponent, PropertyType_Slot0) == 0x00011C, "Member 'USQEXSEADZeroOneSeComponent::PropertyType_Slot0' has a wrong offset!");
static_assert(offsetof(USQEXSEADZeroOneSeComponent, PropertyType_Slot1) == 0x000124, "Member 'USQEXSEADZeroOneSeComponent::PropertyType_Slot1' has a wrong offset!");
static_assert(offsetof(USQEXSEADZeroOneSeComponent, MyAudioComponent) == 0x000128, "Member 'USQEXSEADZeroOneSeComponent::MyAudioComponent' has a wrong offset!");

}

