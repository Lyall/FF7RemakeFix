#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: NP0000_00_Biggs_Standard_AI

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "EndGame_structs.hpp"
#include "EndGame_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass NP0000_00_Biggs_Standard_AI.NP0000_00_Biggs_Standard_AI_C
// 0x0080 (0x3930 - 0x38B0)
class ANP0000_00_Biggs_Standard_AI_C final : public AEndBattleAITown7BiggsController
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x38B0(0x0008)(Transient, DuplicateTransient)
	class AEndCharacter*                          TempChara;                                         // 0x38B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TempVector;                                        // 0x38C0(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_38CC[0x4];                                     // 0x38CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           CoverMoveName;                                     // 0x38D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<class FName>                           CoverTargetName;                                   // 0x38E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<class FName>                           NormalMoveName;                                    // 0x38F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<class FName>                           NormalTargetName;                                  // 0x3900(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<class FName>                           MissileMoveName;                                   // 0x3910(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<class FName>                           MissileTargetName;                                 // 0x3920(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)

public:
	void ExecuteUbergraph_NP0000_00_Biggs_Standard_AI(int32 EntryPoint);
	void OnCutSceneMessage(const class FName& Message);
	void OnPrepareProc();
	void OnATBLightAttackEvent();
	void OnATBHardAttackEvent();
	void GetAimingCheck();
	void DeclareVariable();
	void TargetCorrectionCalc(class FName TargetName);
	void OnMotionMessage(class FName InMotionName, class FName InName, int32 InIntValue, float InFloatValue);
	void OnMotionStateMessageEnd(class FName InMotionName, class FName InName, int32 InIntValue, float InFloatValue);
	void ResetDefaultSetting();
	void OnUpdate_btsc020();
	void OnUpdate_btsc010();
	void TargetCharaSelect();
	void OnInterceptAbility(class FName InName);
	void OnTakeDamage(int32 Damage, class AEndCharacter* InChara, class FName InName, EEndBattleAbilityCommandType InCommandType, bool InBind, bool InGuard, bool InDodge, class FName InBoneName, bool InAttributeWeak, class FName InDmgSrcID, EEndBattleAttributeType InDmgSrcAttribute, float justHitRotYaw, const struct FVector& hitPosition, bool InHeal, bool InCounter, const struct FEndDataTableBattleDamageSource& dataTableBattleDamageSource, bool useAbilityUCPC);
	void OnCheckBindAction(class FName ActionName, int32 CheckID, int32 ComboIndex);
	void OnUpdate(EEndAiBattleRole InRole, int32 InStep, float DeltaTime);
	void ReceiveBeginPlay();
	void UserConstructionScript();

	bool OnGetTargetFieldPosition(struct FVector* outPosition, class FName InBattleAbilityID, class FName InDamageSourceID, class FName InAnimationName) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"NP0000_00_Biggs_Standard_AI_C">();
	}
	static class ANP0000_00_Biggs_Standard_AI_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ANP0000_00_Biggs_Standard_AI_C>();
	}
};
static_assert(alignof(ANP0000_00_Biggs_Standard_AI_C) == 0x000008, "Wrong alignment on ANP0000_00_Biggs_Standard_AI_C");
static_assert(sizeof(ANP0000_00_Biggs_Standard_AI_C) == 0x003930, "Wrong size on ANP0000_00_Biggs_Standard_AI_C");
static_assert(offsetof(ANP0000_00_Biggs_Standard_AI_C, UberGraphFrame) == 0x0038B0, "Member 'ANP0000_00_Biggs_Standard_AI_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ANP0000_00_Biggs_Standard_AI_C, TempChara) == 0x0038B8, "Member 'ANP0000_00_Biggs_Standard_AI_C::TempChara' has a wrong offset!");
static_assert(offsetof(ANP0000_00_Biggs_Standard_AI_C, TempVector) == 0x0038C0, "Member 'ANP0000_00_Biggs_Standard_AI_C::TempVector' has a wrong offset!");
static_assert(offsetof(ANP0000_00_Biggs_Standard_AI_C, CoverMoveName) == 0x0038D0, "Member 'ANP0000_00_Biggs_Standard_AI_C::CoverMoveName' has a wrong offset!");
static_assert(offsetof(ANP0000_00_Biggs_Standard_AI_C, CoverTargetName) == 0x0038E0, "Member 'ANP0000_00_Biggs_Standard_AI_C::CoverTargetName' has a wrong offset!");
static_assert(offsetof(ANP0000_00_Biggs_Standard_AI_C, NormalMoveName) == 0x0038F0, "Member 'ANP0000_00_Biggs_Standard_AI_C::NormalMoveName' has a wrong offset!");
static_assert(offsetof(ANP0000_00_Biggs_Standard_AI_C, NormalTargetName) == 0x003900, "Member 'ANP0000_00_Biggs_Standard_AI_C::NormalTargetName' has a wrong offset!");
static_assert(offsetof(ANP0000_00_Biggs_Standard_AI_C, MissileMoveName) == 0x003910, "Member 'ANP0000_00_Biggs_Standard_AI_C::MissileMoveName' has a wrong offset!");
static_assert(offsetof(ANP0000_00_Biggs_Standard_AI_C, MissileTargetName) == 0x003920, "Member 'ANP0000_00_Biggs_Standard_AI_C::MissileTargetName' has a wrong offset!");

}

