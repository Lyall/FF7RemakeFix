#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: KineDriverRt

#include "Basic.hpp"

#include "KineDriverRt_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_classes.hpp"


namespace SDK
{

// Class KineDriverRt.SQEX_KineDriver_AssetUserData
// 0x0010 (0x0038 - 0x0028)
class USQEX_KineDriver_AssetUserData final : public UAssetUserData
{
public:
	TArray<struct FSQEX_KineDriver_AssetUserDataElement> KineDriver_AssetUserDataElement;                   // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEX_KineDriver_AssetUserData">();
	}
	static class USQEX_KineDriver_AssetUserData* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEX_KineDriver_AssetUserData>();
	}
};
static_assert(alignof(USQEX_KineDriver_AssetUserData) == 0x000008, "Wrong alignment on USQEX_KineDriver_AssetUserData");
static_assert(sizeof(USQEX_KineDriver_AssetUserData) == 0x000038, "Wrong size on USQEX_KineDriver_AssetUserData");
static_assert(offsetof(USQEX_KineDriver_AssetUserData, KineDriver_AssetUserDataElement) == 0x000028, "Member 'USQEX_KineDriver_AssetUserData::KineDriver_AssetUserDataElement' has a wrong offset!");

// Class KineDriverRt.SQEX_KineDriver_Component
// 0x00A0 (0x0350 - 0x02B0)
class USQEX_KineDriver_Component final : public USceneComponent
{
public:
	int32                                         KineDriverIndex;                                   // 0x02B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B4[0x4];                                      // 0x02B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USQEX_KineDriverData*>           KineDriverData;                                    // 0x02B8(0x0010)(BlueprintVisible, ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	bool                                          EnableScaleOpChildSSC;                             // 0x02C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETickingGroup                                 TickGroup;                                         // 0x02C9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2CA[0x2];                                      // 0x02CA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ComponentTag;                                      // 0x02CC(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Enabled;                                           // 0x02D4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableLOD;                                         // 0x02D5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D6[0x2];                                      // 0x02D6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinScreenSize;                                     // 0x02D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableFrustumCulling;                              // 0x02DC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableCheckDrawn;                                  // 0x02DD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2DE[0x2];                                      // 0x02DE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMeshComponent*                 SkeletalMeshComponent;                             // 0x02E0(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2E8[0x68];                                     // 0x02E8(0x0068)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CopyFromSkeletalMeshAssetUserData();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEX_KineDriver_Component">();
	}
	static class USQEX_KineDriver_Component* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEX_KineDriver_Component>();
	}
};
static_assert(alignof(USQEX_KineDriver_Component) == 0x000008, "Wrong alignment on USQEX_KineDriver_Component");
static_assert(sizeof(USQEX_KineDriver_Component) == 0x000350, "Wrong size on USQEX_KineDriver_Component");
static_assert(offsetof(USQEX_KineDriver_Component, KineDriverIndex) == 0x0002B0, "Member 'USQEX_KineDriver_Component::KineDriverIndex' has a wrong offset!");
static_assert(offsetof(USQEX_KineDriver_Component, KineDriverData) == 0x0002B8, "Member 'USQEX_KineDriver_Component::KineDriverData' has a wrong offset!");
static_assert(offsetof(USQEX_KineDriver_Component, EnableScaleOpChildSSC) == 0x0002C8, "Member 'USQEX_KineDriver_Component::EnableScaleOpChildSSC' has a wrong offset!");
static_assert(offsetof(USQEX_KineDriver_Component, TickGroup) == 0x0002C9, "Member 'USQEX_KineDriver_Component::TickGroup' has a wrong offset!");
static_assert(offsetof(USQEX_KineDriver_Component, ComponentTag) == 0x0002CC, "Member 'USQEX_KineDriver_Component::ComponentTag' has a wrong offset!");
static_assert(offsetof(USQEX_KineDriver_Component, Enabled) == 0x0002D4, "Member 'USQEX_KineDriver_Component::Enabled' has a wrong offset!");
static_assert(offsetof(USQEX_KineDriver_Component, EnableLOD) == 0x0002D5, "Member 'USQEX_KineDriver_Component::EnableLOD' has a wrong offset!");
static_assert(offsetof(USQEX_KineDriver_Component, MinScreenSize) == 0x0002D8, "Member 'USQEX_KineDriver_Component::MinScreenSize' has a wrong offset!");
static_assert(offsetof(USQEX_KineDriver_Component, EnableFrustumCulling) == 0x0002DC, "Member 'USQEX_KineDriver_Component::EnableFrustumCulling' has a wrong offset!");
static_assert(offsetof(USQEX_KineDriver_Component, EnableCheckDrawn) == 0x0002DD, "Member 'USQEX_KineDriver_Component::EnableCheckDrawn' has a wrong offset!");
static_assert(offsetof(USQEX_KineDriver_Component, SkeletalMeshComponent) == 0x0002E0, "Member 'USQEX_KineDriver_Component::SkeletalMeshComponent' has a wrong offset!");

// Class KineDriverRt.SQEX_KineDriver_GlobalConfig
// 0x0008 (0x0040 - 0x0038)
class USQEX_KineDriver_GlobalConfig final : public UDeveloperSettings
{
public:
	bool                                          bMultiThreadUpdate;                                // 0x0038(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableUpdateOverlaps;                             // 0x0039(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRuntimeBoneNameLookup;                            // 0x003A(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowNoBoneWarning;                                // 0x003B(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEX_KineDriver_GlobalConfig">();
	}
	static class USQEX_KineDriver_GlobalConfig* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEX_KineDriver_GlobalConfig>();
	}
};
static_assert(alignof(USQEX_KineDriver_GlobalConfig) == 0x000008, "Wrong alignment on USQEX_KineDriver_GlobalConfig");
static_assert(sizeof(USQEX_KineDriver_GlobalConfig) == 0x000040, "Wrong size on USQEX_KineDriver_GlobalConfig");
static_assert(offsetof(USQEX_KineDriver_GlobalConfig, bMultiThreadUpdate) == 0x000038, "Member 'USQEX_KineDriver_GlobalConfig::bMultiThreadUpdate' has a wrong offset!");
static_assert(offsetof(USQEX_KineDriver_GlobalConfig, bEnableUpdateOverlaps) == 0x000039, "Member 'USQEX_KineDriver_GlobalConfig::bEnableUpdateOverlaps' has a wrong offset!");
static_assert(offsetof(USQEX_KineDriver_GlobalConfig, bRuntimeBoneNameLookup) == 0x00003A, "Member 'USQEX_KineDriver_GlobalConfig::bRuntimeBoneNameLookup' has a wrong offset!");
static_assert(offsetof(USQEX_KineDriver_GlobalConfig, bShowNoBoneWarning) == 0x00003B, "Member 'USQEX_KineDriver_GlobalConfig::bShowNoBoneWarning' has a wrong offset!");

// Class KineDriverRt.SQEX_KineDriverData
// 0x01B0 (0x01D8 - 0x0028)
class USQEX_KineDriverData final : public UObject
{
public:
	class USkeleton*                              Skeleton;                                          // 0x0028(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPostKineDriver;                                   // 0x0030(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         WorkNum;                                           // 0x0034(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_38[0x10];                                      // 0x0038(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           PreComputeObjectBoneNameArray;                     // 0x0048(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_58[0x10];                                      // 0x0058(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           ComputedObjectBoneNameArray;                       // 0x0068(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FSQEX_KineDriverOperatorHead>   Operators;                                         // 0x0078(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FSQEX_KineDriverComputeSpaceBases> ComputeSpaceBasesBody;                             // 0x0088(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FSQEX_KineDriverSource>         SourceBody;                                        // 0x0098(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FSQEX_KineDriverSourceTranslate> SourceTranslateBody;                               // 0x00A8(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FSQEX_KineDriverSourceRotate>   SourceRotateBody;                                  // 0x00B8(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FSQEX_KineDriverSourceOther>    SourceOtherBody;                                   // 0x00C8(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FSQEX_KineDriverTargetTranslate> TargetTranslateBody;                               // 0x00D8(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FSQEX_KineDriverTargetScale>    TargetScaleBody;                                   // 0x00E8(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FSQEX_KineDriverTargetRotate>   TargetRotateBody;                                  // 0x00F8(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FSQEX_KineDriverTargetBendRoll> TargetBendRollBody;                                // 0x0108(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FSQEX_KineDriverTargetBendSTRoll> TargetBendSTRollBody;                              // 0x0118(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FSQEX_KineDriverTargetPoscns>   TargetPoscnsBody;                                  // 0x0128(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FSQEX_KineDriverTargetOricns>   TargetOricnsBody;                                  // 0x0138(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FSQEX_KineDriverTargetDircns>   TargetDircnsBody;                                  // 0x0148(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FSQEX_KineDriverTargetOther>    TargetOtherBody;                                   // 0x0158(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FSQEX_KineDriverConnectEquals>  ConnectEqualsBody;                                 // 0x0168(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FSQEX_KineDriverConnectLinkWith> ConnectLinkWithBody;                               // 0x0178(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FSQEX_KineDriverConnectEZParamLink> ConnectEZParamLinkBody;                            // 0x0188(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FSQEX_KineDriverConnectEZParamLinkLinear> ConnectEZParamLinkLinearBody;                      // 0x0198(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A8[0x30];                                     // 0x01A8(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEX_KineDriverData">();
	}
	static class USQEX_KineDriverData* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEX_KineDriverData>();
	}
};
static_assert(alignof(USQEX_KineDriverData) == 0x000008, "Wrong alignment on USQEX_KineDriverData");
static_assert(sizeof(USQEX_KineDriverData) == 0x0001D8, "Wrong size on USQEX_KineDriverData");
static_assert(offsetof(USQEX_KineDriverData, Skeleton) == 0x000028, "Member 'USQEX_KineDriverData::Skeleton' has a wrong offset!");
static_assert(offsetof(USQEX_KineDriverData, bPostKineDriver) == 0x000030, "Member 'USQEX_KineDriverData::bPostKineDriver' has a wrong offset!");
static_assert(offsetof(USQEX_KineDriverData, WorkNum) == 0x000034, "Member 'USQEX_KineDriverData::WorkNum' has a wrong offset!");
static_assert(offsetof(USQEX_KineDriverData, PreComputeObjectBoneNameArray) == 0x000048, "Member 'USQEX_KineDriverData::PreComputeObjectBoneNameArray' has a wrong offset!");
static_assert(offsetof(USQEX_KineDriverData, ComputedObjectBoneNameArray) == 0x000068, "Member 'USQEX_KineDriverData::ComputedObjectBoneNameArray' has a wrong offset!");
static_assert(offsetof(USQEX_KineDriverData, Operators) == 0x000078, "Member 'USQEX_KineDriverData::Operators' has a wrong offset!");
static_assert(offsetof(USQEX_KineDriverData, ComputeSpaceBasesBody) == 0x000088, "Member 'USQEX_KineDriverData::ComputeSpaceBasesBody' has a wrong offset!");
static_assert(offsetof(USQEX_KineDriverData, SourceBody) == 0x000098, "Member 'USQEX_KineDriverData::SourceBody' has a wrong offset!");
static_assert(offsetof(USQEX_KineDriverData, SourceTranslateBody) == 0x0000A8, "Member 'USQEX_KineDriverData::SourceTranslateBody' has a wrong offset!");
static_assert(offsetof(USQEX_KineDriverData, SourceRotateBody) == 0x0000B8, "Member 'USQEX_KineDriverData::SourceRotateBody' has a wrong offset!");
static_assert(offsetof(USQEX_KineDriverData, SourceOtherBody) == 0x0000C8, "Member 'USQEX_KineDriverData::SourceOtherBody' has a wrong offset!");
static_assert(offsetof(USQEX_KineDriverData, TargetTranslateBody) == 0x0000D8, "Member 'USQEX_KineDriverData::TargetTranslateBody' has a wrong offset!");
static_assert(offsetof(USQEX_KineDriverData, TargetScaleBody) == 0x0000E8, "Member 'USQEX_KineDriverData::TargetScaleBody' has a wrong offset!");
static_assert(offsetof(USQEX_KineDriverData, TargetRotateBody) == 0x0000F8, "Member 'USQEX_KineDriverData::TargetRotateBody' has a wrong offset!");
static_assert(offsetof(USQEX_KineDriverData, TargetBendRollBody) == 0x000108, "Member 'USQEX_KineDriverData::TargetBendRollBody' has a wrong offset!");
static_assert(offsetof(USQEX_KineDriverData, TargetBendSTRollBody) == 0x000118, "Member 'USQEX_KineDriverData::TargetBendSTRollBody' has a wrong offset!");
static_assert(offsetof(USQEX_KineDriverData, TargetPoscnsBody) == 0x000128, "Member 'USQEX_KineDriverData::TargetPoscnsBody' has a wrong offset!");
static_assert(offsetof(USQEX_KineDriverData, TargetOricnsBody) == 0x000138, "Member 'USQEX_KineDriverData::TargetOricnsBody' has a wrong offset!");
static_assert(offsetof(USQEX_KineDriverData, TargetDircnsBody) == 0x000148, "Member 'USQEX_KineDriverData::TargetDircnsBody' has a wrong offset!");
static_assert(offsetof(USQEX_KineDriverData, TargetOtherBody) == 0x000158, "Member 'USQEX_KineDriverData::TargetOtherBody' has a wrong offset!");
static_assert(offsetof(USQEX_KineDriverData, ConnectEqualsBody) == 0x000168, "Member 'USQEX_KineDriverData::ConnectEqualsBody' has a wrong offset!");
static_assert(offsetof(USQEX_KineDriverData, ConnectLinkWithBody) == 0x000178, "Member 'USQEX_KineDriverData::ConnectLinkWithBody' has a wrong offset!");
static_assert(offsetof(USQEX_KineDriverData, ConnectEZParamLinkBody) == 0x000188, "Member 'USQEX_KineDriverData::ConnectEZParamLinkBody' has a wrong offset!");
static_assert(offsetof(USQEX_KineDriverData, ConnectEZParamLinkLinearBody) == 0x000198, "Member 'USQEX_KineDriverData::ConnectEZParamLinkLinearBody' has a wrong offset!");

}

