#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: EB0017_00_DarkNation_Standard_AI

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "EndGame_structs.hpp"
#include "EndGame_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass EB0017_00_DarkNation_Standard_AI.EB0017_00_DarkNation_Standard_AI_C
// 0x0108 (0x24B8 - 0x23B0)
class AEB0017_00_DarkNation_Standard_AI_C final : public AEndBattleAIEB0016Controller
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x23B0(0x0008)(Transient, DuplicateTransient)
	class UEndAITimerComponent*                   Timer_PhaseChange_Safety;                          // 0x23B8(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UEndAITimerComponent*                   Timer_LinkInterval;                                // 0x23C0(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UEndAITimerComponent*                   Timer_AttackInterval;                              // 0x23C8(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          Chase_Running;                                     // 0x23D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          AttackHit__LinkOff;                                // 0x23D1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          BlowHit;                                           // 0x23D2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          DebugMode;                                         // 0x23D3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          RufusBullet_Empty;                                 // 0x23D4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          AbilityTimeOut;                                    // 0x23D5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          FirstLink;                                         // 0x23D6(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_23D7[0x1];                                     // 0x23D7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ChaseName;                                         // 0x23D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CombiActionName;                                   // 0x23E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Distance_CombiAttack;                              // 0x23E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Distance_LinkEnable;                               // 0x23EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Distance_ThunderExec;                              // 0x23F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FarDistance_Rufus;                                 // 0x23F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LinkInterval;                                      // 0x23F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BPDamageConfficient;                               // 0x23FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Bite_Prob;                                         // 0x2400(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Grapple_Prob;                                      // 0x2404(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         WhipF_Prob;                                        // 0x2408(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         WhipU_Prob;                                        // 0x240C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Blow_Prob;                                         // 0x2410(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Thunder_Prob;                                      // 0x2414(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   RegisterMoveName;                                  // 0x2418(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   RegisterMoveTarget;                                // 0x2420(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Rufus_RaceName;                                    // 0x2428(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<EEndLocomotionState>                   LocomotionState;                                   // 0x2430(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	class FName                                   damageHitReactionID;                               // 0x2440(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallHelpDamage;                                    // 0x2448(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TotalDamage;                                       // 0x244C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FName>                           CallHelpMotion;                                    // 0x2450(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<class FName>                           StrongAction;                                      // 0x2460(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<class FName>                           BlowAbility_Rufus;                                 // 0x2470(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	struct FVector                                JumpToRufus_Location;                              // 0x2480(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               DarkNation_Rotaion;                                // 0x248C(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TArray<class FName>                           DamageID_NoReaction;                               // 0x2498(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<class FName>                           AbilityID_Cloud_Normal;                            // 0x24A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)

public:
	void ExecuteUbergraph_EB0017_00_DarkNation_Standard_AI(int32 EntryPoint);
	void OnDead(bool AtBurst);
	void Bite_L();
	void OnUpdate(EEndAiBattleRole InRole, int32 InStep, float DeltaTime);
	void OnEndCutScene(const class FName& CutsceneID);
	void WhipF_L();
	void OnMotionStateMessageEnd(class FName InMotionName, class FName InName, int32 InIntValue, float InFloatValue);
	void OnGiveDamage(int32 Damage, class AEndCharacter* InTarget, class FName InName, bool InBind, bool InGuard, bool InJustGuard, bool KeepOver, bool InDodge, bool InCounter, class FName InBoneName, bool InAttributeWeak, class FName InDamageSourceID, bool InSteal, bool heal);
	void Thunder_Combi_L();
	void OnAddStatusChange(EEndBattleStatusChangeType Type);
	void OnMetaMessage(const class FString& InMessage);
	void m___();
	void AttackReady_L();
	void OnTakeDamage(int32 Damage, class AEndCharacter* InChara, class FName InName, EEndBattleAbilityCommandType InCommandType, bool InBind, bool InGuard, bool InDodge, class FName InBoneName, bool InAttributeWeak, class FName InDmgSrcID, EEndBattleAttributeType InDmgSrcAttribute, float justHitRotYaw, const struct FVector& hitPosition, bool InHeal, bool InCounter, const struct FEndDataTableBattleDamageSource& dataTableBattleDamageSource, bool useAbilityUCPC);
	void OnMotionStateMessageUpdate(class FName InMotionName, class FName InName, int32 InIntValue, float InFloatValue, float InProgress, bool LatestContactWall, bool LatestContact);
	void OnMotionStateMessageBegin(class FName InMotionName, class FName InName, int32 InIntValue, float InFloatValue, float InTotalDuration);
	void CombiB_L();
	void CombiD_L();
	void Bite_Simple_L();
	void CombiA_L();
	void ReceiveBeginPlay();
	void Cure_L();
	void ReceiveTick(float DeltaSeconds);
	void LinkOn_L();
	void OnCompleteRegisterMove(class FName InName);
	void OnTakeDamageOnce(class AEndCharacter* InCauserChara, class FName InAbilityID, bool InAttributeWeak, EEndBattleAbilityCommandType AbilityCommandType);
	void OnEntryBattleScene();
	void WhipU_L();
	void OnBurstBegin();
	void OnSuspendAbility(class FName InName, EEndAiAbilitySuspendFactor InFactor, EEndAiAbilitySuspendTiming InTiming);
	void Grapple_L();
	void Phase1_2_Battle();
	void OnCheckBindAction(class FName ActionName, int32 CheckID, int32 ComboIndex);
	void OnFirstUpdate(EEndAiBattleRole InRole, int32 InStep);
	void Thunder_L();
	void OnChase();
	void Phase1_Action_NotLink();
	void OnInterceptAbility(class FName InName);
	void CombiC_L();
	void OnMotionMessage(class FName InMotionName, class FName InName, int32 InIntValue, float InFloatValue);
	void LinkOff_L();
	void Emotion_L();
	void Blow_L();
	void OnCompleteAbility(class FName InName);
	void Phase1_Action_Link();
	void InpActEvt_Slash_K2Node_InputKeyEvent_0(const struct FKey& Key);
	void InpActEvt_Y_K2Node_InputKeyEvent_1(const struct FKey& Key);
	void InpActEvt_T_K2Node_InputKeyEvent_2(const struct FKey& Key);
	void InpActEvt_U_K2Node_InputKeyEvent_3(const struct FKey& Key);
	void InpActEvt_V_K2Node_InputKeyEvent_4(const struct FKey& Key);
	void InpActEvt_W_K2Node_InputKeyEvent_5(const struct FKey& Key);
	void Case1_5FE6CE8A4151FFA584B8888753A8C4A1();
	void Case2_5FE6CE8A4151FFA584B8888753A8C4A1();
	void Other_5FE6CE8A4151FFA584B8888753A8C4A1();
	void InpActEvt_X_K2Node_InputKeyEvent_6(const struct FKey& Key);
	void InpActEvt_X_K2Node_InputKeyEvent_7(const struct FKey& Key);
	void InpActEvt_D_K2Node_InputKeyEvent_8(const struct FKey& Key);
	void InpActEvt_C_K2Node_InputKeyEvent_9(const struct FKey& Key);
	void InpActEvt_B_K2Node_InputKeyEvent_10(const struct FKey& Key);
	void InpActEvt_A_K2Node_InputKeyEvent_11(const struct FKey& Key);
	void InpActEvt_End_K2Node_InputKeyEvent_12(const struct FKey& Key);
	void InpActEvt_Delete_K2Node_InputKeyEvent_13(const struct FKey& Key);
	void Case1_B96C78D1483A5C55189EF8AC0DEC38B4();
	void Case2_B96C78D1483A5C55189EF8AC0DEC38B4();
	void Other_B96C78D1483A5C55189EF8AC0DEC38B4();
	void InpActEvt_Z_K2Node_InputKeyEvent_14(const struct FKey& Key);
	void UserConstructionScript();
	void OverrideDamageHitReactionID(class FName AbilityID, struct FEndDataTableBattleAbility& dataTableBattleAbility, class FName DamageSourceID, bool abilityFirstHit, class FName* damageHitReactionID_0);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"EB0017_00_DarkNation_Standard_AI_C">();
	}
	static class AEB0017_00_DarkNation_Standard_AI_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AEB0017_00_DarkNation_Standard_AI_C>();
	}
};
static_assert(alignof(AEB0017_00_DarkNation_Standard_AI_C) == 0x000008, "Wrong alignment on AEB0017_00_DarkNation_Standard_AI_C");
static_assert(sizeof(AEB0017_00_DarkNation_Standard_AI_C) == 0x0024B8, "Wrong size on AEB0017_00_DarkNation_Standard_AI_C");
static_assert(offsetof(AEB0017_00_DarkNation_Standard_AI_C, UberGraphFrame) == 0x0023B0, "Member 'AEB0017_00_DarkNation_Standard_AI_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AEB0017_00_DarkNation_Standard_AI_C, Timer_PhaseChange_Safety) == 0x0023B8, "Member 'AEB0017_00_DarkNation_Standard_AI_C::Timer_PhaseChange_Safety' has a wrong offset!");
static_assert(offsetof(AEB0017_00_DarkNation_Standard_AI_C, Timer_LinkInterval) == 0x0023C0, "Member 'AEB0017_00_DarkNation_Standard_AI_C::Timer_LinkInterval' has a wrong offset!");
static_assert(offsetof(AEB0017_00_DarkNation_Standard_AI_C, Timer_AttackInterval) == 0x0023C8, "Member 'AEB0017_00_DarkNation_Standard_AI_C::Timer_AttackInterval' has a wrong offset!");
static_assert(offsetof(AEB0017_00_DarkNation_Standard_AI_C, Chase_Running) == 0x0023D0, "Member 'AEB0017_00_DarkNation_Standard_AI_C::Chase_Running' has a wrong offset!");
static_assert(offsetof(AEB0017_00_DarkNation_Standard_AI_C, AttackHit__LinkOff) == 0x0023D1, "Member 'AEB0017_00_DarkNation_Standard_AI_C::AttackHit__LinkOff' has a wrong offset!");
static_assert(offsetof(AEB0017_00_DarkNation_Standard_AI_C, BlowHit) == 0x0023D2, "Member 'AEB0017_00_DarkNation_Standard_AI_C::BlowHit' has a wrong offset!");
static_assert(offsetof(AEB0017_00_DarkNation_Standard_AI_C, DebugMode) == 0x0023D3, "Member 'AEB0017_00_DarkNation_Standard_AI_C::DebugMode' has a wrong offset!");
static_assert(offsetof(AEB0017_00_DarkNation_Standard_AI_C, RufusBullet_Empty) == 0x0023D4, "Member 'AEB0017_00_DarkNation_Standard_AI_C::RufusBullet_Empty' has a wrong offset!");
static_assert(offsetof(AEB0017_00_DarkNation_Standard_AI_C, AbilityTimeOut) == 0x0023D5, "Member 'AEB0017_00_DarkNation_Standard_AI_C::AbilityTimeOut' has a wrong offset!");
static_assert(offsetof(AEB0017_00_DarkNation_Standard_AI_C, FirstLink) == 0x0023D6, "Member 'AEB0017_00_DarkNation_Standard_AI_C::FirstLink' has a wrong offset!");
static_assert(offsetof(AEB0017_00_DarkNation_Standard_AI_C, ChaseName) == 0x0023D8, "Member 'AEB0017_00_DarkNation_Standard_AI_C::ChaseName' has a wrong offset!");
static_assert(offsetof(AEB0017_00_DarkNation_Standard_AI_C, CombiActionName) == 0x0023E0, "Member 'AEB0017_00_DarkNation_Standard_AI_C::CombiActionName' has a wrong offset!");
static_assert(offsetof(AEB0017_00_DarkNation_Standard_AI_C, Distance_CombiAttack) == 0x0023E8, "Member 'AEB0017_00_DarkNation_Standard_AI_C::Distance_CombiAttack' has a wrong offset!");
static_assert(offsetof(AEB0017_00_DarkNation_Standard_AI_C, Distance_LinkEnable) == 0x0023EC, "Member 'AEB0017_00_DarkNation_Standard_AI_C::Distance_LinkEnable' has a wrong offset!");
static_assert(offsetof(AEB0017_00_DarkNation_Standard_AI_C, Distance_ThunderExec) == 0x0023F0, "Member 'AEB0017_00_DarkNation_Standard_AI_C::Distance_ThunderExec' has a wrong offset!");
static_assert(offsetof(AEB0017_00_DarkNation_Standard_AI_C, FarDistance_Rufus) == 0x0023F4, "Member 'AEB0017_00_DarkNation_Standard_AI_C::FarDistance_Rufus' has a wrong offset!");
static_assert(offsetof(AEB0017_00_DarkNation_Standard_AI_C, LinkInterval) == 0x0023F8, "Member 'AEB0017_00_DarkNation_Standard_AI_C::LinkInterval' has a wrong offset!");
static_assert(offsetof(AEB0017_00_DarkNation_Standard_AI_C, BPDamageConfficient) == 0x0023FC, "Member 'AEB0017_00_DarkNation_Standard_AI_C::BPDamageConfficient' has a wrong offset!");
static_assert(offsetof(AEB0017_00_DarkNation_Standard_AI_C, Bite_Prob) == 0x002400, "Member 'AEB0017_00_DarkNation_Standard_AI_C::Bite_Prob' has a wrong offset!");
static_assert(offsetof(AEB0017_00_DarkNation_Standard_AI_C, Grapple_Prob) == 0x002404, "Member 'AEB0017_00_DarkNation_Standard_AI_C::Grapple_Prob' has a wrong offset!");
static_assert(offsetof(AEB0017_00_DarkNation_Standard_AI_C, WhipF_Prob) == 0x002408, "Member 'AEB0017_00_DarkNation_Standard_AI_C::WhipF_Prob' has a wrong offset!");
static_assert(offsetof(AEB0017_00_DarkNation_Standard_AI_C, WhipU_Prob) == 0x00240C, "Member 'AEB0017_00_DarkNation_Standard_AI_C::WhipU_Prob' has a wrong offset!");
static_assert(offsetof(AEB0017_00_DarkNation_Standard_AI_C, Blow_Prob) == 0x002410, "Member 'AEB0017_00_DarkNation_Standard_AI_C::Blow_Prob' has a wrong offset!");
static_assert(offsetof(AEB0017_00_DarkNation_Standard_AI_C, Thunder_Prob) == 0x002414, "Member 'AEB0017_00_DarkNation_Standard_AI_C::Thunder_Prob' has a wrong offset!");
static_assert(offsetof(AEB0017_00_DarkNation_Standard_AI_C, RegisterMoveName) == 0x002418, "Member 'AEB0017_00_DarkNation_Standard_AI_C::RegisterMoveName' has a wrong offset!");
static_assert(offsetof(AEB0017_00_DarkNation_Standard_AI_C, RegisterMoveTarget) == 0x002420, "Member 'AEB0017_00_DarkNation_Standard_AI_C::RegisterMoveTarget' has a wrong offset!");
static_assert(offsetof(AEB0017_00_DarkNation_Standard_AI_C, Rufus_RaceName) == 0x002428, "Member 'AEB0017_00_DarkNation_Standard_AI_C::Rufus_RaceName' has a wrong offset!");
static_assert(offsetof(AEB0017_00_DarkNation_Standard_AI_C, LocomotionState) == 0x002430, "Member 'AEB0017_00_DarkNation_Standard_AI_C::LocomotionState' has a wrong offset!");
static_assert(offsetof(AEB0017_00_DarkNation_Standard_AI_C, damageHitReactionID) == 0x002440, "Member 'AEB0017_00_DarkNation_Standard_AI_C::damageHitReactionID' has a wrong offset!");
static_assert(offsetof(AEB0017_00_DarkNation_Standard_AI_C, CallHelpDamage) == 0x002448, "Member 'AEB0017_00_DarkNation_Standard_AI_C::CallHelpDamage' has a wrong offset!");
static_assert(offsetof(AEB0017_00_DarkNation_Standard_AI_C, TotalDamage) == 0x00244C, "Member 'AEB0017_00_DarkNation_Standard_AI_C::TotalDamage' has a wrong offset!");
static_assert(offsetof(AEB0017_00_DarkNation_Standard_AI_C, CallHelpMotion) == 0x002450, "Member 'AEB0017_00_DarkNation_Standard_AI_C::CallHelpMotion' has a wrong offset!");
static_assert(offsetof(AEB0017_00_DarkNation_Standard_AI_C, StrongAction) == 0x002460, "Member 'AEB0017_00_DarkNation_Standard_AI_C::StrongAction' has a wrong offset!");
static_assert(offsetof(AEB0017_00_DarkNation_Standard_AI_C, BlowAbility_Rufus) == 0x002470, "Member 'AEB0017_00_DarkNation_Standard_AI_C::BlowAbility_Rufus' has a wrong offset!");
static_assert(offsetof(AEB0017_00_DarkNation_Standard_AI_C, JumpToRufus_Location) == 0x002480, "Member 'AEB0017_00_DarkNation_Standard_AI_C::JumpToRufus_Location' has a wrong offset!");
static_assert(offsetof(AEB0017_00_DarkNation_Standard_AI_C, DarkNation_Rotaion) == 0x00248C, "Member 'AEB0017_00_DarkNation_Standard_AI_C::DarkNation_Rotaion' has a wrong offset!");
static_assert(offsetof(AEB0017_00_DarkNation_Standard_AI_C, DamageID_NoReaction) == 0x002498, "Member 'AEB0017_00_DarkNation_Standard_AI_C::DamageID_NoReaction' has a wrong offset!");
static_assert(offsetof(AEB0017_00_DarkNation_Standard_AI_C, AbilityID_Cloud_Normal) == 0x0024A8, "Member 'AEB0017_00_DarkNation_Standard_AI_C::AbilityID_Cloud_Normal' has a wrong offset!");

}

