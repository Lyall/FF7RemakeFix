#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MovieSceneCapture

#include "Basic.hpp"

#include "Engine_structs.hpp"


namespace SDK
{

// Enum MovieSceneCapture.EHDRCaptureGamut
// NumValues: 0x0006
enum class EHDRCaptureGamut : uint8
{
	HCGM_Rec709                              = 0,
	HCGM_P3DCI                               = 1,
	HCGM_Rec2020                             = 2,
	HCGM_ACES                                = 3,
	HCGM_ACEScg                              = 4,
	HCGM_MAX                                 = 5,
};

// Enum MovieSceneCapture.EMovieSceneCaptureAudioChannelTypes
// NumValues: 0x0004
enum class EMovieSceneCaptureAudioChannelTypes : uint8
{
	stereo                                   = 0,
	surround5_1                              = 1,
	surround7_1                              = 2,
	EMovieSceneCaptureAudioChannelTypes_MAX  = 3,
};

// Enum MovieSceneCapture.FMovieSceneCapturePostMixingAudioCodec
// NumValues: 0x0006
enum class EFMovieSceneCapturePostMixingAudioCodec : uint8
{
	none                                     = 0,
	pcm16                                    = 1,
	pcm24                                    = 2,
	mp3                                      = 3,
	vorbis                                   = 4,
	FMovieSceneCapturePostMixingAudioCodec_MAX = 5,
};

// Enum MovieSceneCapture.FMovieSceneCapturePostMixingVideoCodec
// NumValues: 0x0007
enum class EFMovieSceneCapturePostMixingVideoCodec : uint8
{
	none                                     = 0,
	mjpeg                                    = 1,
	libx264                                  = 2,
	h264                                     = 3,
	prores                                   = 4,
	prores_proxy                             = 5,
	FMovieSceneCapturePostMixingVideoCodec_MAX = 6,
};

// Enum MovieSceneCapture.FMovieSceneCapturePostMixingOutputFormat
// NumValues: 0x0004
enum class EFMovieSceneCapturePostMixingOutputFormat : uint8
{
	AVI                                      = 0,
	MP4                                      = 1,
	MOV                                      = 2,
	FMovieSceneCapturePostMixingOutputFormat_MAX = 3,
};

// ScriptStruct MovieSceneCapture.CaptureResolution
// 0x0008 (0x0008 - 0x0000)
struct FCaptureResolution final
{
public:
	uint32                                        ResX;                                              // 0x0000(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        ResY;                                              // 0x0004(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCaptureResolution) == 0x000004, "Wrong alignment on FCaptureResolution");
static_assert(sizeof(FCaptureResolution) == 0x000008, "Wrong size on FCaptureResolution");
static_assert(offsetof(FCaptureResolution, ResX) == 0x000000, "Member 'FCaptureResolution::ResX' has a wrong offset!");
static_assert(offsetof(FCaptureResolution, ResY) == 0x000004, "Member 'FCaptureResolution::ResY' has a wrong offset!");

// ScriptStruct MovieSceneCapture.CompositionGraphCapturePasses
// 0x0010 (0x0010 - 0x0000)
struct FCompositionGraphCapturePasses final
{
public:
	TArray<class FString>                         Value;                                             // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCompositionGraphCapturePasses) == 0x000008, "Wrong alignment on FCompositionGraphCapturePasses");
static_assert(sizeof(FCompositionGraphCapturePasses) == 0x000010, "Wrong size on FCompositionGraphCapturePasses");
static_assert(offsetof(FCompositionGraphCapturePasses, Value) == 0x000000, "Member 'FCompositionGraphCapturePasses::Value' has a wrong offset!");

// ScriptStruct MovieSceneCapture.CaptureProtocolID
// 0x0008 (0x0008 - 0x0000)
struct FCaptureProtocolID final
{
public:
	class FName                                   Identifier;                                        // 0x0000(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCaptureProtocolID) == 0x000004, "Wrong alignment on FCaptureProtocolID");
static_assert(sizeof(FCaptureProtocolID) == 0x000008, "Wrong size on FCaptureProtocolID");
static_assert(offsetof(FCaptureProtocolID, Identifier) == 0x000000, "Member 'FCaptureProtocolID::Identifier' has a wrong offset!");

// ScriptStruct MovieSceneCapture.MovieSceneCaptureEncoding
// 0x0010 (0x0010 - 0x0000)
struct FMovieSceneCaptureEncoding final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteSourcesAfterEncoding;                        // 0x0001(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFMovieSceneCapturePostMixingOutputFormat     Format;                                            // 0x0002(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFMovieSceneCapturePostMixingVideoCodec       VideoCodec;                                        // 0x0003(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        VideoBitrate;                                      // 0x0004(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFMovieSceneCapturePostMixingAudioCodec       AudioCodec;                                        // 0x0008(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        AudioRate;                                         // 0x000C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMovieSceneCaptureEncoding) == 0x000004, "Wrong alignment on FMovieSceneCaptureEncoding");
static_assert(sizeof(FMovieSceneCaptureEncoding) == 0x000010, "Wrong size on FMovieSceneCaptureEncoding");
static_assert(offsetof(FMovieSceneCaptureEncoding, Enabled) == 0x000000, "Member 'FMovieSceneCaptureEncoding::Enabled' has a wrong offset!");
static_assert(offsetof(FMovieSceneCaptureEncoding, DeleteSourcesAfterEncoding) == 0x000001, "Member 'FMovieSceneCaptureEncoding::DeleteSourcesAfterEncoding' has a wrong offset!");
static_assert(offsetof(FMovieSceneCaptureEncoding, Format) == 0x000002, "Member 'FMovieSceneCaptureEncoding::Format' has a wrong offset!");
static_assert(offsetof(FMovieSceneCaptureEncoding, VideoCodec) == 0x000003, "Member 'FMovieSceneCaptureEncoding::VideoCodec' has a wrong offset!");
static_assert(offsetof(FMovieSceneCaptureEncoding, VideoBitrate) == 0x000004, "Member 'FMovieSceneCaptureEncoding::VideoBitrate' has a wrong offset!");
static_assert(offsetof(FMovieSceneCaptureEncoding, AudioCodec) == 0x000008, "Member 'FMovieSceneCaptureEncoding::AudioCodec' has a wrong offset!");
static_assert(offsetof(FMovieSceneCaptureEncoding, AudioRate) == 0x00000C, "Member 'FMovieSceneCaptureEncoding::AudioRate' has a wrong offset!");

// ScriptStruct MovieSceneCapture.MovieSceneCaptureSettings
// 0x0070 (0x0070 - 0x0000)
struct FMovieSceneCaptureSettings final
{
public:
	struct FDirectoryPath                         OutputDirectory;                                   // 0x0000(0x0010)(Edit, Config, NativeAccessSpecifierPublic)
	TSubclassOf<class AGameModeBase>              GameModeOverride;                                  // 0x0010(0x0008)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OutputFormat;                                      // 0x0018(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverwriteExisting;                                // 0x0028(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseRelativeFrameNumbers;                          // 0x0029(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x2];                                       // 0x002A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         HandleFrames;                                      // 0x002C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ZeroPadFrameNumbers;                               // 0x0030(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FrameRate;                                         // 0x0034(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FrameDelay;                                        // 0x0038(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDevelopmentMode;                                  // 0x003C(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCaptureAudio;                                     // 0x003D(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMovieSceneCaptureAudioChannelTypes           CaptureAudioChennelType;                           // 0x003E(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCaptureVoice;                                     // 0x003F(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCaptureBGM;                                       // 0x0040(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CaptureStartTime;                                  // 0x0044(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CaptureEndTime;                                    // 0x0048(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMovieSceneCaptureEncoding             Encoding;                                          // 0x004C(0x0010)(Edit, Config, NoDestructor, NativeAccessSpecifierPublic)
	struct FCaptureResolution                     Resolution;                                        // 0x005C(0x0008)(Edit, Config, NoDestructor, NativeAccessSpecifierPublic)
	float                                         ScreenPercentage;                                  // 0x0064(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabledGrain;                                     // 0x0068(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableTextureStreaming;                           // 0x0069(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCinematicEngineScalability;                       // 0x006A(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCinematicMode;                                    // 0x006B(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowMovement;                                    // 0x006C(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowTurning;                                     // 0x006D(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowPlayer;                                       // 0x006E(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowHUD;                                          // 0x006F(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMovieSceneCaptureSettings) == 0x000008, "Wrong alignment on FMovieSceneCaptureSettings");
static_assert(sizeof(FMovieSceneCaptureSettings) == 0x000070, "Wrong size on FMovieSceneCaptureSettings");
static_assert(offsetof(FMovieSceneCaptureSettings, OutputDirectory) == 0x000000, "Member 'FMovieSceneCaptureSettings::OutputDirectory' has a wrong offset!");
static_assert(offsetof(FMovieSceneCaptureSettings, GameModeOverride) == 0x000010, "Member 'FMovieSceneCaptureSettings::GameModeOverride' has a wrong offset!");
static_assert(offsetof(FMovieSceneCaptureSettings, OutputFormat) == 0x000018, "Member 'FMovieSceneCaptureSettings::OutputFormat' has a wrong offset!");
static_assert(offsetof(FMovieSceneCaptureSettings, bOverwriteExisting) == 0x000028, "Member 'FMovieSceneCaptureSettings::bOverwriteExisting' has a wrong offset!");
static_assert(offsetof(FMovieSceneCaptureSettings, bUseRelativeFrameNumbers) == 0x000029, "Member 'FMovieSceneCaptureSettings::bUseRelativeFrameNumbers' has a wrong offset!");
static_assert(offsetof(FMovieSceneCaptureSettings, HandleFrames) == 0x00002C, "Member 'FMovieSceneCaptureSettings::HandleFrames' has a wrong offset!");
static_assert(offsetof(FMovieSceneCaptureSettings, ZeroPadFrameNumbers) == 0x000030, "Member 'FMovieSceneCaptureSettings::ZeroPadFrameNumbers' has a wrong offset!");
static_assert(offsetof(FMovieSceneCaptureSettings, FrameRate) == 0x000034, "Member 'FMovieSceneCaptureSettings::FrameRate' has a wrong offset!");
static_assert(offsetof(FMovieSceneCaptureSettings, FrameDelay) == 0x000038, "Member 'FMovieSceneCaptureSettings::FrameDelay' has a wrong offset!");
static_assert(offsetof(FMovieSceneCaptureSettings, bDevelopmentMode) == 0x00003C, "Member 'FMovieSceneCaptureSettings::bDevelopmentMode' has a wrong offset!");
static_assert(offsetof(FMovieSceneCaptureSettings, bCaptureAudio) == 0x00003D, "Member 'FMovieSceneCaptureSettings::bCaptureAudio' has a wrong offset!");
static_assert(offsetof(FMovieSceneCaptureSettings, CaptureAudioChennelType) == 0x00003E, "Member 'FMovieSceneCaptureSettings::CaptureAudioChennelType' has a wrong offset!");
static_assert(offsetof(FMovieSceneCaptureSettings, bCaptureVoice) == 0x00003F, "Member 'FMovieSceneCaptureSettings::bCaptureVoice' has a wrong offset!");
static_assert(offsetof(FMovieSceneCaptureSettings, bCaptureBGM) == 0x000040, "Member 'FMovieSceneCaptureSettings::bCaptureBGM' has a wrong offset!");
static_assert(offsetof(FMovieSceneCaptureSettings, CaptureStartTime) == 0x000044, "Member 'FMovieSceneCaptureSettings::CaptureStartTime' has a wrong offset!");
static_assert(offsetof(FMovieSceneCaptureSettings, CaptureEndTime) == 0x000048, "Member 'FMovieSceneCaptureSettings::CaptureEndTime' has a wrong offset!");
static_assert(offsetof(FMovieSceneCaptureSettings, Encoding) == 0x00004C, "Member 'FMovieSceneCaptureSettings::Encoding' has a wrong offset!");
static_assert(offsetof(FMovieSceneCaptureSettings, Resolution) == 0x00005C, "Member 'FMovieSceneCaptureSettings::Resolution' has a wrong offset!");
static_assert(offsetof(FMovieSceneCaptureSettings, ScreenPercentage) == 0x000064, "Member 'FMovieSceneCaptureSettings::ScreenPercentage' has a wrong offset!");
static_assert(offsetof(FMovieSceneCaptureSettings, bEnabledGrain) == 0x000068, "Member 'FMovieSceneCaptureSettings::bEnabledGrain' has a wrong offset!");
static_assert(offsetof(FMovieSceneCaptureSettings, bEnableTextureStreaming) == 0x000069, "Member 'FMovieSceneCaptureSettings::bEnableTextureStreaming' has a wrong offset!");
static_assert(offsetof(FMovieSceneCaptureSettings, bCinematicEngineScalability) == 0x00006A, "Member 'FMovieSceneCaptureSettings::bCinematicEngineScalability' has a wrong offset!");
static_assert(offsetof(FMovieSceneCaptureSettings, bCinematicMode) == 0x00006B, "Member 'FMovieSceneCaptureSettings::bCinematicMode' has a wrong offset!");
static_assert(offsetof(FMovieSceneCaptureSettings, bAllowMovement) == 0x00006C, "Member 'FMovieSceneCaptureSettings::bAllowMovement' has a wrong offset!");
static_assert(offsetof(FMovieSceneCaptureSettings, bAllowTurning) == 0x00006D, "Member 'FMovieSceneCaptureSettings::bAllowTurning' has a wrong offset!");
static_assert(offsetof(FMovieSceneCaptureSettings, bShowPlayer) == 0x00006E, "Member 'FMovieSceneCaptureSettings::bShowPlayer' has a wrong offset!");
static_assert(offsetof(FMovieSceneCaptureSettings, bShowHUD) == 0x00006F, "Member 'FMovieSceneCaptureSettings::bShowHUD' has a wrong offset!");

}

