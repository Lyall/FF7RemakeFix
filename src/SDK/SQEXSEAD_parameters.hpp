#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SQEXSEAD

#include "Basic.hpp"

#include "SQEXSEAD_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function SQEXSEAD.SQEXSEADBGMSlotController.GetJustTiming
// 0x000C (0x000C - 0x0000)
struct SQEXSEADBGMSlotController_GetJustTiming final
{
public:
	struct FSQEXSEAD_Timing                       ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEXSEADBGMSlotController_GetJustTiming) == 0x000004, "Wrong alignment on SQEXSEADBGMSlotController_GetJustTiming");
static_assert(sizeof(SQEXSEADBGMSlotController_GetJustTiming) == 0x00000C, "Wrong size on SQEXSEADBGMSlotController_GetJustTiming");
static_assert(offsetof(SQEXSEADBGMSlotController_GetJustTiming, ReturnValue) == 0x000000, "Member 'SQEXSEADBGMSlotController_GetJustTiming::ReturnValue' has a wrong offset!");

// Function SQEXSEAD.SQEXSEADBGMSlotController.GetModeIndex
// 0x0004 (0x0004 - 0x0000)
struct SQEXSEADBGMSlotController_GetModeIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEXSEADBGMSlotController_GetModeIndex) == 0x000004, "Wrong alignment on SQEXSEADBGMSlotController_GetModeIndex");
static_assert(sizeof(SQEXSEADBGMSlotController_GetModeIndex) == 0x000004, "Wrong size on SQEXSEADBGMSlotController_GetModeIndex");
static_assert(offsetof(SQEXSEADBGMSlotController_GetModeIndex, ReturnValue) == 0x000000, "Member 'SQEXSEADBGMSlotController_GetModeIndex::ReturnValue' has a wrong offset!");

// Function SQEXSEAD.SQEXSEADBGMSlotController.GetMusicalTime
// 0x0004 (0x0004 - 0x0000)
struct SQEXSEADBGMSlotController_GetMusicalTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEXSEADBGMSlotController_GetMusicalTime) == 0x000004, "Wrong alignment on SQEXSEADBGMSlotController_GetMusicalTime");
static_assert(sizeof(SQEXSEADBGMSlotController_GetMusicalTime) == 0x000004, "Wrong size on SQEXSEADBGMSlotController_GetMusicalTime");
static_assert(offsetof(SQEXSEADBGMSlotController_GetMusicalTime, ReturnValue) == 0x000000, "Member 'SQEXSEADBGMSlotController_GetMusicalTime::ReturnValue' has a wrong offset!");

// Function SQEXSEAD.SQEXSEADBGMSlotController.GetNearTiming
// 0x000C (0x000C - 0x0000)
struct SQEXSEADBGMSlotController_GetNearTiming final
{
public:
	struct FSQEXSEAD_Timing                       ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEXSEADBGMSlotController_GetNearTiming) == 0x000004, "Wrong alignment on SQEXSEADBGMSlotController_GetNearTiming");
static_assert(sizeof(SQEXSEADBGMSlotController_GetNearTiming) == 0x00000C, "Wrong size on SQEXSEADBGMSlotController_GetNearTiming");
static_assert(offsetof(SQEXSEADBGMSlotController_GetNearTiming, ReturnValue) == 0x000000, "Member 'SQEXSEADBGMSlotController_GetNearTiming::ReturnValue' has a wrong offset!");

// Function SQEXSEAD.SQEXSEADBGMSlotController.GetNextSectionIndex
// 0x0004 (0x0004 - 0x0000)
struct SQEXSEADBGMSlotController_GetNextSectionIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEXSEADBGMSlotController_GetNextSectionIndex) == 0x000004, "Wrong alignment on SQEXSEADBGMSlotController_GetNextSectionIndex");
static_assert(sizeof(SQEXSEADBGMSlotController_GetNextSectionIndex) == 0x000004, "Wrong size on SQEXSEADBGMSlotController_GetNextSectionIndex");
static_assert(offsetof(SQEXSEADBGMSlotController_GetNextSectionIndex, ReturnValue) == 0x000000, "Member 'SQEXSEADBGMSlotController_GetNextSectionIndex::ReturnValue' has a wrong offset!");

// Function SQEXSEAD.SQEXSEADBGMSlotController.GetPlayTime
// 0x0004 (0x0004 - 0x0000)
struct SQEXSEADBGMSlotController_GetPlayTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEXSEADBGMSlotController_GetPlayTime) == 0x000004, "Wrong alignment on SQEXSEADBGMSlotController_GetPlayTime");
static_assert(sizeof(SQEXSEADBGMSlotController_GetPlayTime) == 0x000004, "Wrong size on SQEXSEADBGMSlotController_GetPlayTime");
static_assert(offsetof(SQEXSEADBGMSlotController_GetPlayTime, ReturnValue) == 0x000000, "Member 'SQEXSEADBGMSlotController_GetPlayTime::ReturnValue' has a wrong offset!");

// Function SQEXSEAD.SQEXSEADBGMSlotController.GetSectionIndex
// 0x0004 (0x0004 - 0x0000)
struct SQEXSEADBGMSlotController_GetSectionIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEXSEADBGMSlotController_GetSectionIndex) == 0x000004, "Wrong alignment on SQEXSEADBGMSlotController_GetSectionIndex");
static_assert(sizeof(SQEXSEADBGMSlotController_GetSectionIndex) == 0x000004, "Wrong size on SQEXSEADBGMSlotController_GetSectionIndex");
static_assert(offsetof(SQEXSEADBGMSlotController_GetSectionIndex, ReturnValue) == 0x000000, "Member 'SQEXSEADBGMSlotController_GetSectionIndex::ReturnValue' has a wrong offset!");

// Function SQEXSEAD.SQEXSEADBGMSlotController.GetTempo
// 0x0004 (0x0004 - 0x0000)
struct SQEXSEADBGMSlotController_GetTempo final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEXSEADBGMSlotController_GetTempo) == 0x000004, "Wrong alignment on SQEXSEADBGMSlotController_GetTempo");
static_assert(sizeof(SQEXSEADBGMSlotController_GetTempo) == 0x000004, "Wrong size on SQEXSEADBGMSlotController_GetTempo");
static_assert(offsetof(SQEXSEADBGMSlotController_GetTempo, ReturnValue) == 0x000000, "Member 'SQEXSEADBGMSlotController_GetTempo::ReturnValue' has a wrong offset!");

// Function SQEXSEAD.SQEXSEADBGMSlotController.IsPlaying
// 0x0001 (0x0001 - 0x0000)
struct SQEXSEADBGMSlotController_IsPlaying final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEXSEADBGMSlotController_IsPlaying) == 0x000001, "Wrong alignment on SQEXSEADBGMSlotController_IsPlaying");
static_assert(sizeof(SQEXSEADBGMSlotController_IsPlaying) == 0x000001, "Wrong size on SQEXSEADBGMSlotController_IsPlaying");
static_assert(offsetof(SQEXSEADBGMSlotController_IsPlaying, ReturnValue) == 0x000000, "Member 'SQEXSEADBGMSlotController_IsPlaying::ReturnValue' has a wrong offset!");

// Function SQEXSEAD.SQEXSEADBGMSlotController.Set
// 0x0008 (0x0008 - 0x0000)
struct SQEXSEADBGMSlotController_Set final
{
public:
	class USoundBase*                             Sound;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEXSEADBGMSlotController_Set) == 0x000008, "Wrong alignment on SQEXSEADBGMSlotController_Set");
static_assert(sizeof(SQEXSEADBGMSlotController_Set) == 0x000008, "Wrong size on SQEXSEADBGMSlotController_Set");
static_assert(offsetof(SQEXSEADBGMSlotController_Set, Sound) == 0x000000, "Member 'SQEXSEADBGMSlotController_Set::Sound' has a wrong offset!");

// Function SQEXSEAD.SQEXSEADBGMSlotController.SetMode
// 0x0004 (0x0004 - 0x0000)
struct SQEXSEADBGMSlotController_SetMode final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEXSEADBGMSlotController_SetMode) == 0x000004, "Wrong alignment on SQEXSEADBGMSlotController_SetMode");
static_assert(sizeof(SQEXSEADBGMSlotController_SetMode) == 0x000004, "Wrong size on SQEXSEADBGMSlotController_SetMode");
static_assert(offsetof(SQEXSEADBGMSlotController_SetMode, Index_0) == 0x000000, "Member 'SQEXSEADBGMSlotController_SetMode::Index_0' has a wrong offset!");

// Function SQEXSEAD.SQEXSEADBGMSlotController.SetModeByName
// 0x0008 (0x0008 - 0x0000)
struct SQEXSEADBGMSlotController_SetModeByName final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEXSEADBGMSlotController_SetModeByName) == 0x000004, "Wrong alignment on SQEXSEADBGMSlotController_SetModeByName");
static_assert(sizeof(SQEXSEADBGMSlotController_SetModeByName) == 0x000008, "Wrong size on SQEXSEADBGMSlotController_SetModeByName");
static_assert(offsetof(SQEXSEADBGMSlotController_SetModeByName, Name_0) == 0x000000, "Member 'SQEXSEADBGMSlotController_SetModeByName::Name_0' has a wrong offset!");

// Function SQEXSEAD.SQEXSEADBGMSlotController.SetOptions
// 0x001C (0x001C - 0x0000)
struct SQEXSEADBGMSlotController_SetOptions final
{
public:
	struct FSQEXSEAD_BGMOptions                   NewOptions;                                        // 0x0000(0x001C)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEXSEADBGMSlotController_SetOptions) == 0x000004, "Wrong alignment on SQEXSEADBGMSlotController_SetOptions");
static_assert(sizeof(SQEXSEADBGMSlotController_SetOptions) == 0x00001C, "Wrong size on SQEXSEADBGMSlotController_SetOptions");
static_assert(offsetof(SQEXSEADBGMSlotController_SetOptions, NewOptions) == 0x000000, "Member 'SQEXSEADBGMSlotController_SetOptions::NewOptions' has a wrong offset!");

// Function SQEXSEAD.SQEXSEADBGMSlotController.SetPath
// 0x0010 (0x0010 - 0x0000)
struct SQEXSEADBGMSlotController_SetPath final
{
public:
	class FString                                 Path;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEXSEADBGMSlotController_SetPath) == 0x000008, "Wrong alignment on SQEXSEADBGMSlotController_SetPath");
static_assert(sizeof(SQEXSEADBGMSlotController_SetPath) == 0x000010, "Wrong size on SQEXSEADBGMSlotController_SetPath");
static_assert(offsetof(SQEXSEADBGMSlotController_SetPath, Path) == 0x000000, "Member 'SQEXSEADBGMSlotController_SetPath::Path' has a wrong offset!");

// Function SQEXSEAD.SQEXSEADBGMSlotController.SetPlayFadeInTime
// 0x0004 (0x0004 - 0x0000)
struct SQEXSEADBGMSlotController_SetPlayFadeInTime final
{
public:
	float                                         FadeTime;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEXSEADBGMSlotController_SetPlayFadeInTime) == 0x000004, "Wrong alignment on SQEXSEADBGMSlotController_SetPlayFadeInTime");
static_assert(sizeof(SQEXSEADBGMSlotController_SetPlayFadeInTime) == 0x000004, "Wrong size on SQEXSEADBGMSlotController_SetPlayFadeInTime");
static_assert(offsetof(SQEXSEADBGMSlotController_SetPlayFadeInTime, FadeTime) == 0x000000, "Member 'SQEXSEADBGMSlotController_SetPlayFadeInTime::FadeTime' has a wrong offset!");

// Function SQEXSEAD.SQEXSEADBGMSlotController.SetPriority
// 0x0004 (0x0004 - 0x0000)
struct SQEXSEADBGMSlotController_SetPriority final
{
public:
	int32                                         Priority;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEXSEADBGMSlotController_SetPriority) == 0x000004, "Wrong alignment on SQEXSEADBGMSlotController_SetPriority");
static_assert(sizeof(SQEXSEADBGMSlotController_SetPriority) == 0x000004, "Wrong size on SQEXSEADBGMSlotController_SetPriority");
static_assert(offsetof(SQEXSEADBGMSlotController_SetPriority, Priority) == 0x000000, "Member 'SQEXSEADBGMSlotController_SetPriority::Priority' has a wrong offset!");

// Function SQEXSEAD.SQEXSEADBGMSlotController.SetRestartSameBGM
// 0x0001 (0x0001 - 0x0000)
struct SQEXSEADBGMSlotController_SetRestartSameBGM final
{
public:
	bool                                          bRestart;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEXSEADBGMSlotController_SetRestartSameBGM) == 0x000001, "Wrong alignment on SQEXSEADBGMSlotController_SetRestartSameBGM");
static_assert(sizeof(SQEXSEADBGMSlotController_SetRestartSameBGM) == 0x000001, "Wrong size on SQEXSEADBGMSlotController_SetRestartSameBGM");
static_assert(offsetof(SQEXSEADBGMSlotController_SetRestartSameBGM, bRestart) == 0x000000, "Member 'SQEXSEADBGMSlotController_SetRestartSameBGM::bRestart' has a wrong offset!");

// Function SQEXSEAD.SQEXSEADBGMSlotController.SetResumeFadeInTime
// 0x0004 (0x0004 - 0x0000)
struct SQEXSEADBGMSlotController_SetResumeFadeInTime final
{
public:
	float                                         FadeTime;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEXSEADBGMSlotController_SetResumeFadeInTime) == 0x000004, "Wrong alignment on SQEXSEADBGMSlotController_SetResumeFadeInTime");
static_assert(sizeof(SQEXSEADBGMSlotController_SetResumeFadeInTime) == 0x000004, "Wrong size on SQEXSEADBGMSlotController_SetResumeFadeInTime");
static_assert(offsetof(SQEXSEADBGMSlotController_SetResumeFadeInTime, FadeTime) == 0x000000, "Member 'SQEXSEADBGMSlotController_SetResumeFadeInTime::FadeTime' has a wrong offset!");

// Function SQEXSEAD.SQEXSEADBGMSlotController.SetSection
// 0x0004 (0x0004 - 0x0000)
struct SQEXSEADBGMSlotController_SetSection final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEXSEADBGMSlotController_SetSection) == 0x000004, "Wrong alignment on SQEXSEADBGMSlotController_SetSection");
static_assert(sizeof(SQEXSEADBGMSlotController_SetSection) == 0x000004, "Wrong size on SQEXSEADBGMSlotController_SetSection");
static_assert(offsetof(SQEXSEADBGMSlotController_SetSection, Index_0) == 0x000000, "Member 'SQEXSEADBGMSlotController_SetSection::Index_0' has a wrong offset!");

// Function SQEXSEAD.SQEXSEADBGMSlotController.SetSectionByName
// 0x0008 (0x0008 - 0x0000)
struct SQEXSEADBGMSlotController_SetSectionByName final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEXSEADBGMSlotController_SetSectionByName) == 0x000004, "Wrong alignment on SQEXSEADBGMSlotController_SetSectionByName");
static_assert(sizeof(SQEXSEADBGMSlotController_SetSectionByName) == 0x000008, "Wrong size on SQEXSEADBGMSlotController_SetSectionByName");
static_assert(offsetof(SQEXSEADBGMSlotController_SetSectionByName, Name_0) == 0x000000, "Member 'SQEXSEADBGMSlotController_SetSectionByName::Name_0' has a wrong offset!");

// Function SQEXSEAD.SQEXSEADBGMSlotController.SetSeekTime
// 0x0004 (0x0004 - 0x0000)
struct SQEXSEADBGMSlotController_SetSeekTime final
{
public:
	float                                         SeekTime;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEXSEADBGMSlotController_SetSeekTime) == 0x000004, "Wrong alignment on SQEXSEADBGMSlotController_SetSeekTime");
static_assert(sizeof(SQEXSEADBGMSlotController_SetSeekTime) == 0x000004, "Wrong size on SQEXSEADBGMSlotController_SetSeekTime");
static_assert(offsetof(SQEXSEADBGMSlotController_SetSeekTime, SeekTime) == 0x000000, "Member 'SQEXSEADBGMSlotController_SetSeekTime::SeekTime' has a wrong offset!");

// Function SQEXSEAD.SQEXSEADBGMSlotController.SetStopFadeOutTime
// 0x0004 (0x0004 - 0x0000)
struct SQEXSEADBGMSlotController_SetStopFadeOutTime final
{
public:
	float                                         FadeTime;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEXSEADBGMSlotController_SetStopFadeOutTime) == 0x000004, "Wrong alignment on SQEXSEADBGMSlotController_SetStopFadeOutTime");
static_assert(sizeof(SQEXSEADBGMSlotController_SetStopFadeOutTime) == 0x000004, "Wrong size on SQEXSEADBGMSlotController_SetStopFadeOutTime");
static_assert(offsetof(SQEXSEADBGMSlotController_SetStopFadeOutTime, FadeTime) == 0x000000, "Member 'SQEXSEADBGMSlotController_SetStopFadeOutTime::FadeTime' has a wrong offset!");

// Function SQEXSEAD.SQEXSEADBGMSlotController.SetStoreBehaviour
// 0x0001 (0x0001 - 0x0000)
struct SQEXSEADBGMSlotController_SetStoreBehaviour final
{
public:
	ESQEXSEAD_BGMStoreBehaviour                   StoreBehaviour;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEXSEADBGMSlotController_SetStoreBehaviour) == 0x000001, "Wrong alignment on SQEXSEADBGMSlotController_SetStoreBehaviour");
static_assert(sizeof(SQEXSEADBGMSlotController_SetStoreBehaviour) == 0x000001, "Wrong size on SQEXSEADBGMSlotController_SetStoreBehaviour");
static_assert(offsetof(SQEXSEADBGMSlotController_SetStoreBehaviour, StoreBehaviour) == 0x000000, "Member 'SQEXSEADBGMSlotController_SetStoreBehaviour::StoreBehaviour' has a wrong offset!");

// Function SQEXSEAD.SQEXSEADBGMSlotController.SetSuspendFadeOutTime
// 0x0004 (0x0004 - 0x0000)
struct SQEXSEADBGMSlotController_SetSuspendFadeOutTime final
{
public:
	float                                         FadeTime;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEXSEADBGMSlotController_SetSuspendFadeOutTime) == 0x000004, "Wrong alignment on SQEXSEADBGMSlotController_SetSuspendFadeOutTime");
static_assert(sizeof(SQEXSEADBGMSlotController_SetSuspendFadeOutTime) == 0x000004, "Wrong size on SQEXSEADBGMSlotController_SetSuspendFadeOutTime");
static_assert(offsetof(SQEXSEADBGMSlotController_SetSuspendFadeOutTime, FadeTime) == 0x000000, "Member 'SQEXSEADBGMSlotController_SetSuspendFadeOutTime::FadeTime' has a wrong offset!");

// Function SQEXSEAD.SQEXSEADBGMSlotController.SetVolume
// 0x0008 (0x0008 - 0x0000)
struct SQEXSEADBGMSlotController_SetVolume final
{
public:
	float                                         Volume;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeTime;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEXSEADBGMSlotController_SetVolume) == 0x000004, "Wrong alignment on SQEXSEADBGMSlotController_SetVolume");
static_assert(sizeof(SQEXSEADBGMSlotController_SetVolume) == 0x000008, "Wrong size on SQEXSEADBGMSlotController_SetVolume");
static_assert(offsetof(SQEXSEADBGMSlotController_SetVolume, Volume) == 0x000000, "Member 'SQEXSEADBGMSlotController_SetVolume::Volume' has a wrong offset!");
static_assert(offsetof(SQEXSEADBGMSlotController_SetVolume, FadeTime) == 0x000004, "Member 'SQEXSEADBGMSlotController_SetVolume::FadeTime' has a wrong offset!");

// Function SQEXSEAD.SQEXSEADStatics.AutoSeCtrl_SetEnable
// 0x0001 (0x0001 - 0x0000)
struct SQEXSEADStatics_AutoSeCtrl_SetEnable final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEXSEADStatics_AutoSeCtrl_SetEnable) == 0x000001, "Wrong alignment on SQEXSEADStatics_AutoSeCtrl_SetEnable");
static_assert(sizeof(SQEXSEADStatics_AutoSeCtrl_SetEnable) == 0x000001, "Wrong size on SQEXSEADStatics_AutoSeCtrl_SetEnable");
static_assert(offsetof(SQEXSEADStatics_AutoSeCtrl_SetEnable, Enable) == 0x000000, "Member 'SQEXSEADStatics_AutoSeCtrl_SetEnable::Enable' has a wrong offset!");

// Function SQEXSEAD.SQEXSEADStatics.CallEvent
// 0x0008 (0x0008 - 0x0000)
struct SQEXSEADStatics_CallEvent final
{
public:
	class FName                                   EventName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEXSEADStatics_CallEvent) == 0x000004, "Wrong alignment on SQEXSEADStatics_CallEvent");
static_assert(sizeof(SQEXSEADStatics_CallEvent) == 0x000008, "Wrong size on SQEXSEADStatics_CallEvent");
static_assert(offsetof(SQEXSEADStatics_CallEvent, EventName) == 0x000000, "Member 'SQEXSEADStatics_CallEvent::EventName' has a wrong offset!");

// Function SQEXSEAD.SQEXSEADStatics.CategoryCtrl_DebugMute
// 0x0010 (0x0010 - 0x0000)
struct SQEXSEADStatics_CategoryCtrl_DebugMute final
{
public:
	class FName                                   CategoryName;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bToBeMuted;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FadeTime;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEXSEADStatics_CategoryCtrl_DebugMute) == 0x000004, "Wrong alignment on SQEXSEADStatics_CategoryCtrl_DebugMute");
static_assert(sizeof(SQEXSEADStatics_CategoryCtrl_DebugMute) == 0x000010, "Wrong size on SQEXSEADStatics_CategoryCtrl_DebugMute");
static_assert(offsetof(SQEXSEADStatics_CategoryCtrl_DebugMute, CategoryName) == 0x000000, "Member 'SQEXSEADStatics_CategoryCtrl_DebugMute::CategoryName' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_CategoryCtrl_DebugMute, bToBeMuted) == 0x000008, "Member 'SQEXSEADStatics_CategoryCtrl_DebugMute::bToBeMuted' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_CategoryCtrl_DebugMute, FadeTime) == 0x00000C, "Member 'SQEXSEADStatics_CategoryCtrl_DebugMute::FadeTime' has a wrong offset!");

// Function SQEXSEAD.SQEXSEADStatics.CategoryCtrl_GetVolume
// 0x0010 (0x0010 - 0x0000)
struct SQEXSEADStatics_CategoryCtrl_GetVolume final
{
public:
	class FName                                   CategoryName;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQEXSEADCategoryVolumeLayers                 targerlayer;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEXSEADStatics_CategoryCtrl_GetVolume) == 0x000004, "Wrong alignment on SQEXSEADStatics_CategoryCtrl_GetVolume");
static_assert(sizeof(SQEXSEADStatics_CategoryCtrl_GetVolume) == 0x000010, "Wrong size on SQEXSEADStatics_CategoryCtrl_GetVolume");
static_assert(offsetof(SQEXSEADStatics_CategoryCtrl_GetVolume, CategoryName) == 0x000000, "Member 'SQEXSEADStatics_CategoryCtrl_GetVolume::CategoryName' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_CategoryCtrl_GetVolume, targerlayer) == 0x000008, "Member 'SQEXSEADStatics_CategoryCtrl_GetVolume::targerlayer' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_CategoryCtrl_GetVolume, ReturnValue) == 0x00000C, "Member 'SQEXSEADStatics_CategoryCtrl_GetVolume::ReturnValue' has a wrong offset!");

// Function SQEXSEAD.SQEXSEADStatics.CategoryCtrl_Resume
// 0x000C (0x000C - 0x0000)
struct SQEXSEADStatics_CategoryCtrl_Resume final
{
public:
	class FName                                   CategoryName;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeInTime;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEXSEADStatics_CategoryCtrl_Resume) == 0x000004, "Wrong alignment on SQEXSEADStatics_CategoryCtrl_Resume");
static_assert(sizeof(SQEXSEADStatics_CategoryCtrl_Resume) == 0x00000C, "Wrong size on SQEXSEADStatics_CategoryCtrl_Resume");
static_assert(offsetof(SQEXSEADStatics_CategoryCtrl_Resume, CategoryName) == 0x000000, "Member 'SQEXSEADStatics_CategoryCtrl_Resume::CategoryName' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_CategoryCtrl_Resume, FadeInTime) == 0x000008, "Member 'SQEXSEADStatics_CategoryCtrl_Resume::FadeInTime' has a wrong offset!");

// Function SQEXSEAD.SQEXSEADStatics.CategoryCtrl_SetPitch
// 0x0010 (0x0010 - 0x0000)
struct SQEXSEADStatics_CategoryCtrl_SetPitch final
{
public:
	class FName                                   CategoryName;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Pitch;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeTime;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEXSEADStatics_CategoryCtrl_SetPitch) == 0x000004, "Wrong alignment on SQEXSEADStatics_CategoryCtrl_SetPitch");
static_assert(sizeof(SQEXSEADStatics_CategoryCtrl_SetPitch) == 0x000010, "Wrong size on SQEXSEADStatics_CategoryCtrl_SetPitch");
static_assert(offsetof(SQEXSEADStatics_CategoryCtrl_SetPitch, CategoryName) == 0x000000, "Member 'SQEXSEADStatics_CategoryCtrl_SetPitch::CategoryName' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_CategoryCtrl_SetPitch, Pitch) == 0x000008, "Member 'SQEXSEADStatics_CategoryCtrl_SetPitch::Pitch' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_CategoryCtrl_SetPitch, FadeTime) == 0x00000C, "Member 'SQEXSEADStatics_CategoryCtrl_SetPitch::FadeTime' has a wrong offset!");

// Function SQEXSEAD.SQEXSEADStatics.CategoryCtrl_SetVolume
// 0x0014 (0x0014 - 0x0000)
struct SQEXSEADStatics_CategoryCtrl_SetVolume final
{
public:
	class FName                                   CategoryName;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Volume;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeTime;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQEXSEADCategoryVolumeLayers                 targerlayer;                                       // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQEXSEADStatics_CategoryCtrl_SetVolume) == 0x000004, "Wrong alignment on SQEXSEADStatics_CategoryCtrl_SetVolume");
static_assert(sizeof(SQEXSEADStatics_CategoryCtrl_SetVolume) == 0x000014, "Wrong size on SQEXSEADStatics_CategoryCtrl_SetVolume");
static_assert(offsetof(SQEXSEADStatics_CategoryCtrl_SetVolume, CategoryName) == 0x000000, "Member 'SQEXSEADStatics_CategoryCtrl_SetVolume::CategoryName' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_CategoryCtrl_SetVolume, Volume) == 0x000008, "Member 'SQEXSEADStatics_CategoryCtrl_SetVolume::Volume' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_CategoryCtrl_SetVolume, FadeTime) == 0x00000C, "Member 'SQEXSEADStatics_CategoryCtrl_SetVolume::FadeTime' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_CategoryCtrl_SetVolume, targerlayer) == 0x000010, "Member 'SQEXSEADStatics_CategoryCtrl_SetVolume::targerlayer' has a wrong offset!");

// Function SQEXSEAD.SQEXSEADStatics.CategoryCtrl_Stop
// 0x000C (0x000C - 0x0000)
struct SQEXSEADStatics_CategoryCtrl_Stop final
{
public:
	class FName                                   CategoryName;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeOutTime;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEXSEADStatics_CategoryCtrl_Stop) == 0x000004, "Wrong alignment on SQEXSEADStatics_CategoryCtrl_Stop");
static_assert(sizeof(SQEXSEADStatics_CategoryCtrl_Stop) == 0x00000C, "Wrong size on SQEXSEADStatics_CategoryCtrl_Stop");
static_assert(offsetof(SQEXSEADStatics_CategoryCtrl_Stop, CategoryName) == 0x000000, "Member 'SQEXSEADStatics_CategoryCtrl_Stop::CategoryName' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_CategoryCtrl_Stop, FadeOutTime) == 0x000008, "Member 'SQEXSEADStatics_CategoryCtrl_Stop::FadeOutTime' has a wrong offset!");

// Function SQEXSEAD.SQEXSEADStatics.CategoryCtrl_Suspend
// 0x000C (0x000C - 0x0000)
struct SQEXSEADStatics_CategoryCtrl_Suspend final
{
public:
	class FName                                   CategoryName;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeOutTime;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEXSEADStatics_CategoryCtrl_Suspend) == 0x000004, "Wrong alignment on SQEXSEADStatics_CategoryCtrl_Suspend");
static_assert(sizeof(SQEXSEADStatics_CategoryCtrl_Suspend) == 0x00000C, "Wrong size on SQEXSEADStatics_CategoryCtrl_Suspend");
static_assert(offsetof(SQEXSEADStatics_CategoryCtrl_Suspend, CategoryName) == 0x000000, "Member 'SQEXSEADStatics_CategoryCtrl_Suspend::CategoryName' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_CategoryCtrl_Suspend, FadeOutTime) == 0x000008, "Member 'SQEXSEADStatics_CategoryCtrl_Suspend::FadeOutTime' has a wrong offset!");

// Function SQEXSEAD.SQEXSEADStatics.CategoryCtrl_ToggleDebugMute
// 0x000C (0x000C - 0x0000)
struct SQEXSEADStatics_CategoryCtrl_ToggleDebugMute final
{
public:
	class FName                                   CategoryName;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeTime;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEXSEADStatics_CategoryCtrl_ToggleDebugMute) == 0x000004, "Wrong alignment on SQEXSEADStatics_CategoryCtrl_ToggleDebugMute");
static_assert(sizeof(SQEXSEADStatics_CategoryCtrl_ToggleDebugMute) == 0x00000C, "Wrong size on SQEXSEADStatics_CategoryCtrl_ToggleDebugMute");
static_assert(offsetof(SQEXSEADStatics_CategoryCtrl_ToggleDebugMute, CategoryName) == 0x000000, "Member 'SQEXSEADStatics_CategoryCtrl_ToggleDebugMute::CategoryName' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_CategoryCtrl_ToggleDebugMute, FadeTime) == 0x000008, "Member 'SQEXSEADStatics_CategoryCtrl_ToggleDebugMute::FadeTime' has a wrong offset!");

// Function SQEXSEAD.SQEXSEADStatics.CreateBGMSlot
// 0x0030 (0x0030 - 0x0000)
struct SQEXSEADStatics_CreateBGMSlot final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSQEXSEAD_BGMOptions                   Options;                                           // 0x0008(0x001C)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USQEXSEADBGMSlotController*             ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEXSEADStatics_CreateBGMSlot) == 0x000008, "Wrong alignment on SQEXSEADStatics_CreateBGMSlot");
static_assert(sizeof(SQEXSEADStatics_CreateBGMSlot) == 0x000030, "Wrong size on SQEXSEADStatics_CreateBGMSlot");
static_assert(offsetof(SQEXSEADStatics_CreateBGMSlot, Name_0) == 0x000000, "Member 'SQEXSEADStatics_CreateBGMSlot::Name_0' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_CreateBGMSlot, Options) == 0x000008, "Member 'SQEXSEADStatics_CreateBGMSlot::Options' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_CreateBGMSlot, ReturnValue) == 0x000028, "Member 'SQEXSEADStatics_CreateBGMSlot::ReturnValue' has a wrong offset!");

// Function SQEXSEAD.SQEXSEADStatics.ExecAudioVolumeEvent
// 0x0008 (0x0008 - 0x0000)
struct SQEXSEADStatics_ExecAudioVolumeEvent final
{
public:
	class FName                                   AudioVolumeEventName;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEXSEADStatics_ExecAudioVolumeEvent) == 0x000004, "Wrong alignment on SQEXSEADStatics_ExecAudioVolumeEvent");
static_assert(sizeof(SQEXSEADStatics_ExecAudioVolumeEvent) == 0x000008, "Wrong size on SQEXSEADStatics_ExecAudioVolumeEvent");
static_assert(offsetof(SQEXSEADStatics_ExecAudioVolumeEvent, AudioVolumeEventName) == 0x000000, "Member 'SQEXSEADStatics_ExecAudioVolumeEvent::AudioVolumeEventName' has a wrong offset!");

// Function SQEXSEAD.SQEXSEADStatics.GetBGMSlotController
// 0x0010 (0x0010 - 0x0000)
struct SQEXSEADStatics_GetBGMSlotController final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQEXSEADBGMSlotController*             ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEXSEADStatics_GetBGMSlotController) == 0x000008, "Wrong alignment on SQEXSEADStatics_GetBGMSlotController");
static_assert(sizeof(SQEXSEADStatics_GetBGMSlotController) == 0x000010, "Wrong size on SQEXSEADStatics_GetBGMSlotController");
static_assert(offsetof(SQEXSEADStatics_GetBGMSlotController, Name_0) == 0x000000, "Member 'SQEXSEADStatics_GetBGMSlotController::Name_0' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_GetBGMSlotController, ReturnValue) == 0x000008, "Member 'SQEXSEADStatics_GetBGMSlotController::ReturnValue' has a wrong offset!");

// Function SQEXSEAD.SQEXSEADStatics.GetPadVibrationEnable
// 0x0001 (0x0001 - 0x0000)
struct SQEXSEADStatics_GetPadVibrationEnable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEXSEADStatics_GetPadVibrationEnable) == 0x000001, "Wrong alignment on SQEXSEADStatics_GetPadVibrationEnable");
static_assert(sizeof(SQEXSEADStatics_GetPadVibrationEnable) == 0x000001, "Wrong size on SQEXSEADStatics_GetPadVibrationEnable");
static_assert(offsetof(SQEXSEADStatics_GetPadVibrationEnable, ReturnValue) == 0x000000, "Member 'SQEXSEADStatics_GetPadVibrationEnable::ReturnValue' has a wrong offset!");

// Function SQEXSEAD.SQEXSEADStatics.GetRenderSpeedRate
// 0x0004 (0x0004 - 0x0000)
struct SQEXSEADStatics_GetRenderSpeedRate final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEXSEADStatics_GetRenderSpeedRate) == 0x000004, "Wrong alignment on SQEXSEADStatics_GetRenderSpeedRate");
static_assert(sizeof(SQEXSEADStatics_GetRenderSpeedRate) == 0x000004, "Wrong size on SQEXSEADStatics_GetRenderSpeedRate");
static_assert(offsetof(SQEXSEADStatics_GetRenderSpeedRate, ReturnValue) == 0x000000, "Member 'SQEXSEADStatics_GetRenderSpeedRate::ReturnValue' has a wrong offset!");

// Function SQEXSEAD.SQEXSEADStatics.GetSoundDuration
// 0x0018 (0x0018 - 0x0000)
struct SQEXSEADStatics_GetSoundDuration final
{
public:
	class USoundBase*                             Sound;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SoundName;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQEXSEADStatics_GetSoundDuration) == 0x000008, "Wrong alignment on SQEXSEADStatics_GetSoundDuration");
static_assert(sizeof(SQEXSEADStatics_GetSoundDuration) == 0x000018, "Wrong size on SQEXSEADStatics_GetSoundDuration");
static_assert(offsetof(SQEXSEADStatics_GetSoundDuration, Sound) == 0x000000, "Member 'SQEXSEADStatics_GetSoundDuration::Sound' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_GetSoundDuration, SoundName) == 0x000008, "Member 'SQEXSEADStatics_GetSoundDuration::SoundName' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_GetSoundDuration, ReturnValue) == 0x000010, "Member 'SQEXSEADStatics_GetSoundDuration::ReturnValue' has a wrong offset!");

// Function SQEXSEAD.SQEXSEADStatics.IsExistSoundInBank
// 0x0018 (0x0018 - 0x0000)
struct SQEXSEADStatics_IsExistSoundInBank final
{
public:
	class USoundBase*                             Sound;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SoundName;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQEXSEADStatics_IsExistSoundInBank) == 0x000008, "Wrong alignment on SQEXSEADStatics_IsExistSoundInBank");
static_assert(sizeof(SQEXSEADStatics_IsExistSoundInBank) == 0x000018, "Wrong size on SQEXSEADStatics_IsExistSoundInBank");
static_assert(offsetof(SQEXSEADStatics_IsExistSoundInBank, Sound) == 0x000000, "Member 'SQEXSEADStatics_IsExistSoundInBank::Sound' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_IsExistSoundInBank, SoundName) == 0x000008, "Member 'SQEXSEADStatics_IsExistSoundInBank::SoundName' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_IsExistSoundInBank, ReturnValue) == 0x000010, "Member 'SQEXSEADStatics_IsExistSoundInBank::ReturnValue' has a wrong offset!");

// Function SQEXSEAD.SQEXSEADStatics.IsPlayingBGM
// 0x0010 (0x0010 - 0x0000)
struct SQEXSEADStatics_IsPlayingBGM final
{
public:
	class USoundBase*                             Sound;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQEXSEADStatics_IsPlayingBGM) == 0x000008, "Wrong alignment on SQEXSEADStatics_IsPlayingBGM");
static_assert(sizeof(SQEXSEADStatics_IsPlayingBGM) == 0x000010, "Wrong size on SQEXSEADStatics_IsPlayingBGM");
static_assert(offsetof(SQEXSEADStatics_IsPlayingBGM, Sound) == 0x000000, "Member 'SQEXSEADStatics_IsPlayingBGM::Sound' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_IsPlayingBGM, ReturnValue) == 0x000008, "Member 'SQEXSEADStatics_IsPlayingBGM::ReturnValue' has a wrong offset!");

// Function SQEXSEAD.SQEXSEADStatics.PlaySound2D
// 0x0038 (0x0038 - 0x0000)
struct SQEXSEADStatics_PlaySound2D final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             Sound;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SoundIndex;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SwitchValue;                                       // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumeMultiplier;                                  // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchMultiplier;                                   // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartTime;                                         // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundConcurrency*                      ConcurrencySettings;                               // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VibrationVolumeMultiplier;                         // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQEXSEADStatics_PlaySound2D) == 0x000008, "Wrong alignment on SQEXSEADStatics_PlaySound2D");
static_assert(sizeof(SQEXSEADStatics_PlaySound2D) == 0x000038, "Wrong size on SQEXSEADStatics_PlaySound2D");
static_assert(offsetof(SQEXSEADStatics_PlaySound2D, WorldContextObject) == 0x000000, "Member 'SQEXSEADStatics_PlaySound2D::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_PlaySound2D, Sound) == 0x000008, "Member 'SQEXSEADStatics_PlaySound2D::Sound' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_PlaySound2D, SoundIndex) == 0x000010, "Member 'SQEXSEADStatics_PlaySound2D::SoundIndex' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_PlaySound2D, SwitchValue) == 0x000014, "Member 'SQEXSEADStatics_PlaySound2D::SwitchValue' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_PlaySound2D, VolumeMultiplier) == 0x000018, "Member 'SQEXSEADStatics_PlaySound2D::VolumeMultiplier' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_PlaySound2D, PitchMultiplier) == 0x00001C, "Member 'SQEXSEADStatics_PlaySound2D::PitchMultiplier' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_PlaySound2D, StartTime) == 0x000020, "Member 'SQEXSEADStatics_PlaySound2D::StartTime' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_PlaySound2D, ConcurrencySettings) == 0x000028, "Member 'SQEXSEADStatics_PlaySound2D::ConcurrencySettings' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_PlaySound2D, VibrationVolumeMultiplier) == 0x000030, "Member 'SQEXSEADStatics_PlaySound2D::VibrationVolumeMultiplier' has a wrong offset!");

// Function SQEXSEAD.SQEXSEADStatics.PlaySound2DByName
// 0x0040 (0x0040 - 0x0000)
struct SQEXSEADStatics_PlaySound2DByName final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             Sound;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SoundName;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SwitchValue;                                       // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumeMultiplier;                                  // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchMultiplier;                                   // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartTime;                                         // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundConcurrency*                      ConcurrencySettings;                               // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VibrationVolumeMultiplier;                         // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0034(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQEXSEADStatics_PlaySound2DByName) == 0x000008, "Wrong alignment on SQEXSEADStatics_PlaySound2DByName");
static_assert(sizeof(SQEXSEADStatics_PlaySound2DByName) == 0x000040, "Wrong size on SQEXSEADStatics_PlaySound2DByName");
static_assert(offsetof(SQEXSEADStatics_PlaySound2DByName, WorldContextObject) == 0x000000, "Member 'SQEXSEADStatics_PlaySound2DByName::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_PlaySound2DByName, Sound) == 0x000008, "Member 'SQEXSEADStatics_PlaySound2DByName::Sound' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_PlaySound2DByName, SoundName) == 0x000010, "Member 'SQEXSEADStatics_PlaySound2DByName::SoundName' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_PlaySound2DByName, SwitchValue) == 0x000018, "Member 'SQEXSEADStatics_PlaySound2DByName::SwitchValue' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_PlaySound2DByName, VolumeMultiplier) == 0x00001C, "Member 'SQEXSEADStatics_PlaySound2DByName::VolumeMultiplier' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_PlaySound2DByName, PitchMultiplier) == 0x000020, "Member 'SQEXSEADStatics_PlaySound2DByName::PitchMultiplier' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_PlaySound2DByName, StartTime) == 0x000024, "Member 'SQEXSEADStatics_PlaySound2DByName::StartTime' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_PlaySound2DByName, ConcurrencySettings) == 0x000028, "Member 'SQEXSEADStatics_PlaySound2DByName::ConcurrencySettings' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_PlaySound2DByName, VibrationVolumeMultiplier) == 0x000030, "Member 'SQEXSEADStatics_PlaySound2DByName::VibrationVolumeMultiplier' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_PlaySound2DByName, ReturnValue) == 0x000034, "Member 'SQEXSEADStatics_PlaySound2DByName::ReturnValue' has a wrong offset!");

// Function SQEXSEAD.SQEXSEADStatics.PlaySound3D
// 0x0060 (0x0060 - 0x0000)
struct SQEXSEADStatics_PlaySound3D final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             Sound;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0010(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SoundIndex;                                        // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SwitchValue;                                       // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ZeroOneSlot;                                       // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ZeroOneValue;                                      // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ExternalID;                                        // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0030(0x000C)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         VolumeMultiplier;                                  // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchMultiplier;                                   // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartTime;                                         // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundAttenuation*                      AttenuationSettings;                               // 0x0048(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundConcurrency*                      ConcurrencySettings;                               // 0x0050(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVirtualizePlay;                                   // 0x0058(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUISound;                                          // 0x0059(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5A[0x2];                                       // 0x005A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         VibrationVolumeMultiplier;                         // 0x005C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEXSEADStatics_PlaySound3D) == 0x000008, "Wrong alignment on SQEXSEADStatics_PlaySound3D");
static_assert(sizeof(SQEXSEADStatics_PlaySound3D) == 0x000060, "Wrong size on SQEXSEADStatics_PlaySound3D");
static_assert(offsetof(SQEXSEADStatics_PlaySound3D, WorldContextObject) == 0x000000, "Member 'SQEXSEADStatics_PlaySound3D::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_PlaySound3D, Sound) == 0x000008, "Member 'SQEXSEADStatics_PlaySound3D::Sound' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_PlaySound3D, Location) == 0x000010, "Member 'SQEXSEADStatics_PlaySound3D::Location' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_PlaySound3D, SoundIndex) == 0x00001C, "Member 'SQEXSEADStatics_PlaySound3D::SoundIndex' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_PlaySound3D, SwitchValue) == 0x000020, "Member 'SQEXSEADStatics_PlaySound3D::SwitchValue' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_PlaySound3D, ZeroOneSlot) == 0x000024, "Member 'SQEXSEADStatics_PlaySound3D::ZeroOneSlot' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_PlaySound3D, ZeroOneValue) == 0x000028, "Member 'SQEXSEADStatics_PlaySound3D::ZeroOneValue' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_PlaySound3D, ExternalID) == 0x00002C, "Member 'SQEXSEADStatics_PlaySound3D::ExternalID' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_PlaySound3D, Rotation) == 0x000030, "Member 'SQEXSEADStatics_PlaySound3D::Rotation' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_PlaySound3D, VolumeMultiplier) == 0x00003C, "Member 'SQEXSEADStatics_PlaySound3D::VolumeMultiplier' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_PlaySound3D, PitchMultiplier) == 0x000040, "Member 'SQEXSEADStatics_PlaySound3D::PitchMultiplier' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_PlaySound3D, StartTime) == 0x000044, "Member 'SQEXSEADStatics_PlaySound3D::StartTime' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_PlaySound3D, AttenuationSettings) == 0x000048, "Member 'SQEXSEADStatics_PlaySound3D::AttenuationSettings' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_PlaySound3D, ConcurrencySettings) == 0x000050, "Member 'SQEXSEADStatics_PlaySound3D::ConcurrencySettings' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_PlaySound3D, bVirtualizePlay) == 0x000058, "Member 'SQEXSEADStatics_PlaySound3D::bVirtualizePlay' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_PlaySound3D, bUISound) == 0x000059, "Member 'SQEXSEADStatics_PlaySound3D::bUISound' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_PlaySound3D, VibrationVolumeMultiplier) == 0x00005C, "Member 'SQEXSEADStatics_PlaySound3D::VibrationVolumeMultiplier' has a wrong offset!");

// Function SQEXSEAD.SQEXSEADStatics.PlaySound3DByName
// 0x0070 (0x0070 - 0x0000)
struct SQEXSEADStatics_PlaySound3DByName final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             Sound;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SoundName;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0018(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SwitchValue;                                       // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ZeroOneSlot;                                       // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ZeroOneValue;                                      // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ExternalID;                                        // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0034(0x000C)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         VolumeMultiplier;                                  // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchMultiplier;                                   // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartTime;                                         // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundAttenuation*                      AttenuationSettings;                               // 0x0050(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundConcurrency*                      ConcurrencySettings;                               // 0x0058(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVirtualizePlay;                                   // 0x0060(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUISound;                                          // 0x0061(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_62[0x2];                                       // 0x0062(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         VibrationVolumeMultiplier;                         // 0x0064(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0068(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEXSEADStatics_PlaySound3DByName) == 0x000008, "Wrong alignment on SQEXSEADStatics_PlaySound3DByName");
static_assert(sizeof(SQEXSEADStatics_PlaySound3DByName) == 0x000070, "Wrong size on SQEXSEADStatics_PlaySound3DByName");
static_assert(offsetof(SQEXSEADStatics_PlaySound3DByName, WorldContextObject) == 0x000000, "Member 'SQEXSEADStatics_PlaySound3DByName::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_PlaySound3DByName, Sound) == 0x000008, "Member 'SQEXSEADStatics_PlaySound3DByName::Sound' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_PlaySound3DByName, SoundName) == 0x000010, "Member 'SQEXSEADStatics_PlaySound3DByName::SoundName' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_PlaySound3DByName, Location) == 0x000018, "Member 'SQEXSEADStatics_PlaySound3DByName::Location' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_PlaySound3DByName, SwitchValue) == 0x000024, "Member 'SQEXSEADStatics_PlaySound3DByName::SwitchValue' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_PlaySound3DByName, ZeroOneSlot) == 0x000028, "Member 'SQEXSEADStatics_PlaySound3DByName::ZeroOneSlot' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_PlaySound3DByName, ZeroOneValue) == 0x00002C, "Member 'SQEXSEADStatics_PlaySound3DByName::ZeroOneValue' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_PlaySound3DByName, ExternalID) == 0x000030, "Member 'SQEXSEADStatics_PlaySound3DByName::ExternalID' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_PlaySound3DByName, Rotation) == 0x000034, "Member 'SQEXSEADStatics_PlaySound3DByName::Rotation' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_PlaySound3DByName, VolumeMultiplier) == 0x000040, "Member 'SQEXSEADStatics_PlaySound3DByName::VolumeMultiplier' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_PlaySound3DByName, PitchMultiplier) == 0x000044, "Member 'SQEXSEADStatics_PlaySound3DByName::PitchMultiplier' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_PlaySound3DByName, StartTime) == 0x000048, "Member 'SQEXSEADStatics_PlaySound3DByName::StartTime' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_PlaySound3DByName, AttenuationSettings) == 0x000050, "Member 'SQEXSEADStatics_PlaySound3DByName::AttenuationSettings' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_PlaySound3DByName, ConcurrencySettings) == 0x000058, "Member 'SQEXSEADStatics_PlaySound3DByName::ConcurrencySettings' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_PlaySound3DByName, bVirtualizePlay) == 0x000060, "Member 'SQEXSEADStatics_PlaySound3DByName::bVirtualizePlay' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_PlaySound3DByName, bUISound) == 0x000061, "Member 'SQEXSEADStatics_PlaySound3DByName::bUISound' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_PlaySound3DByName, VibrationVolumeMultiplier) == 0x000064, "Member 'SQEXSEADStatics_PlaySound3DByName::VibrationVolumeMultiplier' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_PlaySound3DByName, ReturnValue) == 0x000068, "Member 'SQEXSEADStatics_PlaySound3DByName::ReturnValue' has a wrong offset!");

// Function SQEXSEAD.SQEXSEADStatics.ResetAllCategoryTemporarySettings
// 0x0004 (0x0004 - 0x0000)
struct SQEXSEADStatics_ResetAllCategoryTemporarySettings final
{
public:
	float                                         resetFadeTime;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEXSEADStatics_ResetAllCategoryTemporarySettings) == 0x000004, "Wrong alignment on SQEXSEADStatics_ResetAllCategoryTemporarySettings");
static_assert(sizeof(SQEXSEADStatics_ResetAllCategoryTemporarySettings) == 0x000004, "Wrong size on SQEXSEADStatics_ResetAllCategoryTemporarySettings");
static_assert(offsetof(SQEXSEADStatics_ResetAllCategoryTemporarySettings, resetFadeTime) == 0x000000, "Member 'SQEXSEADStatics_ResetAllCategoryTemporarySettings::resetFadeTime' has a wrong offset!");

// Function SQEXSEAD.SQEXSEADStatics.ResetEffectPreset
// 0x0004 (0x0004 - 0x0000)
struct SQEXSEADStatics_ResetEffectPreset final
{
public:
	float                                         resetFadeTime;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEXSEADStatics_ResetEffectPreset) == 0x000004, "Wrong alignment on SQEXSEADStatics_ResetEffectPreset");
static_assert(sizeof(SQEXSEADStatics_ResetEffectPreset) == 0x000004, "Wrong size on SQEXSEADStatics_ResetEffectPreset");
static_assert(offsetof(SQEXSEADStatics_ResetEffectPreset, resetFadeTime) == 0x000000, "Member 'SQEXSEADStatics_ResetEffectPreset::resetFadeTime' has a wrong offset!");

// Function SQEXSEAD.SQEXSEADStatics.ResumeBGM_OptionalFade
// 0x0004 (0x0004 - 0x0000)
struct SQEXSEADStatics_ResumeBGM_OptionalFade final
{
public:
	float                                         FadeTime;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEXSEADStatics_ResumeBGM_OptionalFade) == 0x000004, "Wrong alignment on SQEXSEADStatics_ResumeBGM_OptionalFade");
static_assert(sizeof(SQEXSEADStatics_ResumeBGM_OptionalFade) == 0x000004, "Wrong size on SQEXSEADStatics_ResumeBGM_OptionalFade");
static_assert(offsetof(SQEXSEADStatics_ResumeBGM_OptionalFade, FadeTime) == 0x000000, "Member 'SQEXSEADStatics_ResumeBGM_OptionalFade::FadeTime' has a wrong offset!");

// Function SQEXSEAD.SQEXSEADStatics.SetEffectPreset
// 0x000C (0x000C - 0x0000)
struct SQEXSEADStatics_SetEffectPreset final
{
public:
	class FName                                   presetName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeTime;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEXSEADStatics_SetEffectPreset) == 0x000004, "Wrong alignment on SQEXSEADStatics_SetEffectPreset");
static_assert(sizeof(SQEXSEADStatics_SetEffectPreset) == 0x00000C, "Wrong size on SQEXSEADStatics_SetEffectPreset");
static_assert(offsetof(SQEXSEADStatics_SetEffectPreset, presetName) == 0x000000, "Member 'SQEXSEADStatics_SetEffectPreset::presetName' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_SetEffectPreset, FadeTime) == 0x000008, "Member 'SQEXSEADStatics_SetEffectPreset::FadeTime' has a wrong offset!");

// Function SQEXSEAD.SQEXSEADStatics.SetEnableBGMAutoResume
// 0x0001 (0x0001 - 0x0000)
struct SQEXSEADStatics_SetEnableBGMAutoResume final
{
public:
	bool                                          bIsEnabled;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEXSEADStatics_SetEnableBGMAutoResume) == 0x000001, "Wrong alignment on SQEXSEADStatics_SetEnableBGMAutoResume");
static_assert(sizeof(SQEXSEADStatics_SetEnableBGMAutoResume) == 0x000001, "Wrong size on SQEXSEADStatics_SetEnableBGMAutoResume");
static_assert(offsetof(SQEXSEADStatics_SetEnableBGMAutoResume, bIsEnabled) == 0x000000, "Member 'SQEXSEADStatics_SetEnableBGMAutoResume::bIsEnabled' has a wrong offset!");

// Function SQEXSEAD.SQEXSEADStatics.SetExternalParameter
// 0x000C (0x000C - 0x0000)
struct SQEXSEADStatics_SetExternalParameter final
{
public:
	class FName                                   ParamName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEXSEADStatics_SetExternalParameter) == 0x000004, "Wrong alignment on SQEXSEADStatics_SetExternalParameter");
static_assert(sizeof(SQEXSEADStatics_SetExternalParameter) == 0x00000C, "Wrong size on SQEXSEADStatics_SetExternalParameter");
static_assert(offsetof(SQEXSEADStatics_SetExternalParameter, ParamName) == 0x000000, "Member 'SQEXSEADStatics_SetExternalParameter::ParamName' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_SetExternalParameter, Value) == 0x000008, "Member 'SQEXSEADStatics_SetExternalParameter::Value' has a wrong offset!");

// Function SQEXSEAD.SQEXSEADStatics.SetPadVibrationEnable
// 0x0001 (0x0001 - 0x0000)
struct SQEXSEADStatics_SetPadVibrationEnable final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEXSEADStatics_SetPadVibrationEnable) == 0x000001, "Wrong alignment on SQEXSEADStatics_SetPadVibrationEnable");
static_assert(sizeof(SQEXSEADStatics_SetPadVibrationEnable) == 0x000001, "Wrong size on SQEXSEADStatics_SetPadVibrationEnable");
static_assert(offsetof(SQEXSEADStatics_SetPadVibrationEnable, bEnable) == 0x000000, "Member 'SQEXSEADStatics_SetPadVibrationEnable::bEnable' has a wrong offset!");

// Function SQEXSEAD.SQEXSEADStatics.SetRenderSpeedRate
// 0x0008 (0x0008 - 0x0000)
struct SQEXSEADStatics_SetRenderSpeedRate final
{
public:
	float                                         Rate;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQEXSEADStatics_SetRenderSpeedRate) == 0x000004, "Wrong alignment on SQEXSEADStatics_SetRenderSpeedRate");
static_assert(sizeof(SQEXSEADStatics_SetRenderSpeedRate) == 0x000008, "Wrong size on SQEXSEADStatics_SetRenderSpeedRate");
static_assert(offsetof(SQEXSEADStatics_SetRenderSpeedRate, Rate) == 0x000000, "Member 'SQEXSEADStatics_SetRenderSpeedRate::Rate' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_SetRenderSpeedRate, ReturnValue) == 0x000004, "Member 'SQEXSEADStatics_SetRenderSpeedRate::ReturnValue' has a wrong offset!");

// Function SQEXSEAD.SQEXSEADStatics.SpawnSound2D
// 0x0040 (0x0040 - 0x0000)
struct SQEXSEADStatics_SpawnSound2D final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             Sound;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SoundIndex;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SwitchValue;                                       // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumeMultiplier;                                  // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchMultiplier;                                   // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartTime;                                         // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundConcurrency*                      ConcurrencySettings;                               // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPersistAcrossLevelTransition;                     // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoDestroy;                                      // 0x0031(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRecycle;                                          // 0x0032(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_33[0x1];                                       // 0x0033(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         VibrationVolumeMultiplier;                         // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQEXSEADAudioComponent*                ReturnValue;                                       // 0x0038(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEXSEADStatics_SpawnSound2D) == 0x000008, "Wrong alignment on SQEXSEADStatics_SpawnSound2D");
static_assert(sizeof(SQEXSEADStatics_SpawnSound2D) == 0x000040, "Wrong size on SQEXSEADStatics_SpawnSound2D");
static_assert(offsetof(SQEXSEADStatics_SpawnSound2D, WorldContextObject) == 0x000000, "Member 'SQEXSEADStatics_SpawnSound2D::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_SpawnSound2D, Sound) == 0x000008, "Member 'SQEXSEADStatics_SpawnSound2D::Sound' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_SpawnSound2D, SoundIndex) == 0x000010, "Member 'SQEXSEADStatics_SpawnSound2D::SoundIndex' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_SpawnSound2D, SwitchValue) == 0x000014, "Member 'SQEXSEADStatics_SpawnSound2D::SwitchValue' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_SpawnSound2D, VolumeMultiplier) == 0x000018, "Member 'SQEXSEADStatics_SpawnSound2D::VolumeMultiplier' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_SpawnSound2D, PitchMultiplier) == 0x00001C, "Member 'SQEXSEADStatics_SpawnSound2D::PitchMultiplier' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_SpawnSound2D, StartTime) == 0x000020, "Member 'SQEXSEADStatics_SpawnSound2D::StartTime' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_SpawnSound2D, ConcurrencySettings) == 0x000028, "Member 'SQEXSEADStatics_SpawnSound2D::ConcurrencySettings' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_SpawnSound2D, bPersistAcrossLevelTransition) == 0x000030, "Member 'SQEXSEADStatics_SpawnSound2D::bPersistAcrossLevelTransition' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_SpawnSound2D, bAutoDestroy) == 0x000031, "Member 'SQEXSEADStatics_SpawnSound2D::bAutoDestroy' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_SpawnSound2D, bRecycle) == 0x000032, "Member 'SQEXSEADStatics_SpawnSound2D::bRecycle' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_SpawnSound2D, VibrationVolumeMultiplier) == 0x000034, "Member 'SQEXSEADStatics_SpawnSound2D::VibrationVolumeMultiplier' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_SpawnSound2D, ReturnValue) == 0x000038, "Member 'SQEXSEADStatics_SpawnSound2D::ReturnValue' has a wrong offset!");

// Function SQEXSEAD.SQEXSEADStatics.SpawnSound2DByName
// 0x0040 (0x0040 - 0x0000)
struct SQEXSEADStatics_SpawnSound2DByName final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             Sound;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SoundName;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SwitchValue;                                       // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumeMultiplier;                                  // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchMultiplier;                                   // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartTime;                                         // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundConcurrency*                      ConcurrencySettings;                               // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPersistAcrossLevelTransition;                     // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoDestroy;                                      // 0x0031(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRecycle;                                          // 0x0032(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_33[0x1];                                       // 0x0033(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         VibrationVolumeMultiplier;                         // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQEXSEADAudioComponent*                ReturnValue;                                       // 0x0038(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEXSEADStatics_SpawnSound2DByName) == 0x000008, "Wrong alignment on SQEXSEADStatics_SpawnSound2DByName");
static_assert(sizeof(SQEXSEADStatics_SpawnSound2DByName) == 0x000040, "Wrong size on SQEXSEADStatics_SpawnSound2DByName");
static_assert(offsetof(SQEXSEADStatics_SpawnSound2DByName, WorldContextObject) == 0x000000, "Member 'SQEXSEADStatics_SpawnSound2DByName::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_SpawnSound2DByName, Sound) == 0x000008, "Member 'SQEXSEADStatics_SpawnSound2DByName::Sound' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_SpawnSound2DByName, SoundName) == 0x000010, "Member 'SQEXSEADStatics_SpawnSound2DByName::SoundName' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_SpawnSound2DByName, SwitchValue) == 0x000018, "Member 'SQEXSEADStatics_SpawnSound2DByName::SwitchValue' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_SpawnSound2DByName, VolumeMultiplier) == 0x00001C, "Member 'SQEXSEADStatics_SpawnSound2DByName::VolumeMultiplier' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_SpawnSound2DByName, PitchMultiplier) == 0x000020, "Member 'SQEXSEADStatics_SpawnSound2DByName::PitchMultiplier' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_SpawnSound2DByName, StartTime) == 0x000024, "Member 'SQEXSEADStatics_SpawnSound2DByName::StartTime' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_SpawnSound2DByName, ConcurrencySettings) == 0x000028, "Member 'SQEXSEADStatics_SpawnSound2DByName::ConcurrencySettings' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_SpawnSound2DByName, bPersistAcrossLevelTransition) == 0x000030, "Member 'SQEXSEADStatics_SpawnSound2DByName::bPersistAcrossLevelTransition' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_SpawnSound2DByName, bAutoDestroy) == 0x000031, "Member 'SQEXSEADStatics_SpawnSound2DByName::bAutoDestroy' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_SpawnSound2DByName, bRecycle) == 0x000032, "Member 'SQEXSEADStatics_SpawnSound2DByName::bRecycle' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_SpawnSound2DByName, VibrationVolumeMultiplier) == 0x000034, "Member 'SQEXSEADStatics_SpawnSound2DByName::VibrationVolumeMultiplier' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_SpawnSound2DByName, ReturnValue) == 0x000038, "Member 'SQEXSEADStatics_SpawnSound2DByName::ReturnValue' has a wrong offset!");

// Function SQEXSEAD.SQEXSEADStatics.SpawnSoundAtLocation
// 0x0070 (0x0070 - 0x0000)
struct SQEXSEADStatics_SpawnSoundAtLocation final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             Sound;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0010(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SoundIndex;                                        // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SwitchValue;                                       // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ZeroOneSlot;                                       // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ZeroOneValue;                                      // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ExternalID;                                        // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0030(0x000C)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bVirtualizePlay;                                   // 0x003C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUISound;                                          // 0x003D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3E[0x2];                                       // 0x003E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         VolumeMultiplier;                                  // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchMultiplier;                                   // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartTime;                                         // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundAttenuation*                      AttenuationSettings;                               // 0x0050(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundConcurrency*                      ConcurrencySettings;                               // 0x0058(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoDestroy;                                      // 0x0060(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRecycle;                                          // 0x0061(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_62[0x2];                                       // 0x0062(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         VibrationVolumeMultiplier;                         // 0x0064(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQEXSEADAudioComponent*                ReturnValue;                                       // 0x0068(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEXSEADStatics_SpawnSoundAtLocation) == 0x000008, "Wrong alignment on SQEXSEADStatics_SpawnSoundAtLocation");
static_assert(sizeof(SQEXSEADStatics_SpawnSoundAtLocation) == 0x000070, "Wrong size on SQEXSEADStatics_SpawnSoundAtLocation");
static_assert(offsetof(SQEXSEADStatics_SpawnSoundAtLocation, WorldContextObject) == 0x000000, "Member 'SQEXSEADStatics_SpawnSoundAtLocation::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_SpawnSoundAtLocation, Sound) == 0x000008, "Member 'SQEXSEADStatics_SpawnSoundAtLocation::Sound' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_SpawnSoundAtLocation, Location) == 0x000010, "Member 'SQEXSEADStatics_SpawnSoundAtLocation::Location' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_SpawnSoundAtLocation, SoundIndex) == 0x00001C, "Member 'SQEXSEADStatics_SpawnSoundAtLocation::SoundIndex' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_SpawnSoundAtLocation, SwitchValue) == 0x000020, "Member 'SQEXSEADStatics_SpawnSoundAtLocation::SwitchValue' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_SpawnSoundAtLocation, ZeroOneSlot) == 0x000024, "Member 'SQEXSEADStatics_SpawnSoundAtLocation::ZeroOneSlot' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_SpawnSoundAtLocation, ZeroOneValue) == 0x000028, "Member 'SQEXSEADStatics_SpawnSoundAtLocation::ZeroOneValue' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_SpawnSoundAtLocation, ExternalID) == 0x00002C, "Member 'SQEXSEADStatics_SpawnSoundAtLocation::ExternalID' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_SpawnSoundAtLocation, Rotation) == 0x000030, "Member 'SQEXSEADStatics_SpawnSoundAtLocation::Rotation' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_SpawnSoundAtLocation, bVirtualizePlay) == 0x00003C, "Member 'SQEXSEADStatics_SpawnSoundAtLocation::bVirtualizePlay' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_SpawnSoundAtLocation, bUISound) == 0x00003D, "Member 'SQEXSEADStatics_SpawnSoundAtLocation::bUISound' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_SpawnSoundAtLocation, VolumeMultiplier) == 0x000040, "Member 'SQEXSEADStatics_SpawnSoundAtLocation::VolumeMultiplier' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_SpawnSoundAtLocation, PitchMultiplier) == 0x000044, "Member 'SQEXSEADStatics_SpawnSoundAtLocation::PitchMultiplier' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_SpawnSoundAtLocation, StartTime) == 0x000048, "Member 'SQEXSEADStatics_SpawnSoundAtLocation::StartTime' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_SpawnSoundAtLocation, AttenuationSettings) == 0x000050, "Member 'SQEXSEADStatics_SpawnSoundAtLocation::AttenuationSettings' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_SpawnSoundAtLocation, ConcurrencySettings) == 0x000058, "Member 'SQEXSEADStatics_SpawnSoundAtLocation::ConcurrencySettings' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_SpawnSoundAtLocation, bAutoDestroy) == 0x000060, "Member 'SQEXSEADStatics_SpawnSoundAtLocation::bAutoDestroy' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_SpawnSoundAtLocation, bRecycle) == 0x000061, "Member 'SQEXSEADStatics_SpawnSoundAtLocation::bRecycle' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_SpawnSoundAtLocation, VibrationVolumeMultiplier) == 0x000064, "Member 'SQEXSEADStatics_SpawnSoundAtLocation::VibrationVolumeMultiplier' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_SpawnSoundAtLocation, ReturnValue) == 0x000068, "Member 'SQEXSEADStatics_SpawnSoundAtLocation::ReturnValue' has a wrong offset!");

// Function SQEXSEAD.SQEXSEADStatics.SpawnSoundAtLocationByName
// 0x0070 (0x0070 - 0x0000)
struct SQEXSEADStatics_SpawnSoundAtLocationByName final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             Sound;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0010(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SoundName;                                         // 0x001C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SwitchValue;                                       // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ZeroOneSlot;                                       // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ZeroOneValue;                                      // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ExternalID;                                        // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0034(0x000C)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bVirtualizePlay;                                   // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUISound;                                          // 0x0041(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_42[0x2];                                       // 0x0042(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         VolumeMultiplier;                                  // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchMultiplier;                                   // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartTime;                                         // 0x004C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundAttenuation*                      AttenuationSettings;                               // 0x0050(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundConcurrency*                      ConcurrencySettings;                               // 0x0058(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoDestroy;                                      // 0x0060(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRecycle;                                          // 0x0061(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_62[0x2];                                       // 0x0062(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         VibrationVolumeMultiplier;                         // 0x0064(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQEXSEADAudioComponent*                ReturnValue;                                       // 0x0068(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEXSEADStatics_SpawnSoundAtLocationByName) == 0x000008, "Wrong alignment on SQEXSEADStatics_SpawnSoundAtLocationByName");
static_assert(sizeof(SQEXSEADStatics_SpawnSoundAtLocationByName) == 0x000070, "Wrong size on SQEXSEADStatics_SpawnSoundAtLocationByName");
static_assert(offsetof(SQEXSEADStatics_SpawnSoundAtLocationByName, WorldContextObject) == 0x000000, "Member 'SQEXSEADStatics_SpawnSoundAtLocationByName::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_SpawnSoundAtLocationByName, Sound) == 0x000008, "Member 'SQEXSEADStatics_SpawnSoundAtLocationByName::Sound' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_SpawnSoundAtLocationByName, Location) == 0x000010, "Member 'SQEXSEADStatics_SpawnSoundAtLocationByName::Location' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_SpawnSoundAtLocationByName, SoundName) == 0x00001C, "Member 'SQEXSEADStatics_SpawnSoundAtLocationByName::SoundName' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_SpawnSoundAtLocationByName, SwitchValue) == 0x000024, "Member 'SQEXSEADStatics_SpawnSoundAtLocationByName::SwitchValue' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_SpawnSoundAtLocationByName, ZeroOneSlot) == 0x000028, "Member 'SQEXSEADStatics_SpawnSoundAtLocationByName::ZeroOneSlot' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_SpawnSoundAtLocationByName, ZeroOneValue) == 0x00002C, "Member 'SQEXSEADStatics_SpawnSoundAtLocationByName::ZeroOneValue' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_SpawnSoundAtLocationByName, ExternalID) == 0x000030, "Member 'SQEXSEADStatics_SpawnSoundAtLocationByName::ExternalID' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_SpawnSoundAtLocationByName, Rotation) == 0x000034, "Member 'SQEXSEADStatics_SpawnSoundAtLocationByName::Rotation' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_SpawnSoundAtLocationByName, bVirtualizePlay) == 0x000040, "Member 'SQEXSEADStatics_SpawnSoundAtLocationByName::bVirtualizePlay' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_SpawnSoundAtLocationByName, bUISound) == 0x000041, "Member 'SQEXSEADStatics_SpawnSoundAtLocationByName::bUISound' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_SpawnSoundAtLocationByName, VolumeMultiplier) == 0x000044, "Member 'SQEXSEADStatics_SpawnSoundAtLocationByName::VolumeMultiplier' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_SpawnSoundAtLocationByName, PitchMultiplier) == 0x000048, "Member 'SQEXSEADStatics_SpawnSoundAtLocationByName::PitchMultiplier' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_SpawnSoundAtLocationByName, StartTime) == 0x00004C, "Member 'SQEXSEADStatics_SpawnSoundAtLocationByName::StartTime' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_SpawnSoundAtLocationByName, AttenuationSettings) == 0x000050, "Member 'SQEXSEADStatics_SpawnSoundAtLocationByName::AttenuationSettings' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_SpawnSoundAtLocationByName, ConcurrencySettings) == 0x000058, "Member 'SQEXSEADStatics_SpawnSoundAtLocationByName::ConcurrencySettings' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_SpawnSoundAtLocationByName, bAutoDestroy) == 0x000060, "Member 'SQEXSEADStatics_SpawnSoundAtLocationByName::bAutoDestroy' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_SpawnSoundAtLocationByName, bRecycle) == 0x000061, "Member 'SQEXSEADStatics_SpawnSoundAtLocationByName::bRecycle' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_SpawnSoundAtLocationByName, VibrationVolumeMultiplier) == 0x000064, "Member 'SQEXSEADStatics_SpawnSoundAtLocationByName::VibrationVolumeMultiplier' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_SpawnSoundAtLocationByName, ReturnValue) == 0x000068, "Member 'SQEXSEADStatics_SpawnSoundAtLocationByName::ReturnValue' has a wrong offset!");

// Function SQEXSEAD.SQEXSEADStatics.SpawnSoundAttached
// 0x0078 (0x0078 - 0x0000)
struct SQEXSEADStatics_SpawnSoundAttached final
{
public:
	class USoundBase*                             Sound;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        AttachToComponent;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SoundIndex;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SwitchValue;                                       // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ZeroOneSlot;                                       // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ZeroOneValue;                                      // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ExternalID;                                        // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttachPointName;                                   // 0x0024(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x002C(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0038(0x000C)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EAttachLocation                               LocationType;                                      // 0x0044(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStopWhenAttachedToDestroyed;                      // 0x0045(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVirtualizePlay;                                   // 0x0046(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUISound;                                          // 0x0047(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumeMultiplier;                                  // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchMultiplier;                                   // 0x004C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartTime;                                         // 0x0050(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundAttenuation*                      AttenuationSettings;                               // 0x0058(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundConcurrency*                      ConcurrencySettings;                               // 0x0060(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoDestroy;                                      // 0x0068(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRecycle;                                          // 0x0069(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6A[0x2];                                       // 0x006A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         VibrationVolumeMultiplier;                         // 0x006C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQEXSEADAudioComponent*                ReturnValue;                                       // 0x0070(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEXSEADStatics_SpawnSoundAttached) == 0x000008, "Wrong alignment on SQEXSEADStatics_SpawnSoundAttached");
static_assert(sizeof(SQEXSEADStatics_SpawnSoundAttached) == 0x000078, "Wrong size on SQEXSEADStatics_SpawnSoundAttached");
static_assert(offsetof(SQEXSEADStatics_SpawnSoundAttached, Sound) == 0x000000, "Member 'SQEXSEADStatics_SpawnSoundAttached::Sound' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_SpawnSoundAttached, AttachToComponent) == 0x000008, "Member 'SQEXSEADStatics_SpawnSoundAttached::AttachToComponent' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_SpawnSoundAttached, SoundIndex) == 0x000010, "Member 'SQEXSEADStatics_SpawnSoundAttached::SoundIndex' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_SpawnSoundAttached, SwitchValue) == 0x000014, "Member 'SQEXSEADStatics_SpawnSoundAttached::SwitchValue' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_SpawnSoundAttached, ZeroOneSlot) == 0x000018, "Member 'SQEXSEADStatics_SpawnSoundAttached::ZeroOneSlot' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_SpawnSoundAttached, ZeroOneValue) == 0x00001C, "Member 'SQEXSEADStatics_SpawnSoundAttached::ZeroOneValue' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_SpawnSoundAttached, ExternalID) == 0x000020, "Member 'SQEXSEADStatics_SpawnSoundAttached::ExternalID' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_SpawnSoundAttached, AttachPointName) == 0x000024, "Member 'SQEXSEADStatics_SpawnSoundAttached::AttachPointName' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_SpawnSoundAttached, Location) == 0x00002C, "Member 'SQEXSEADStatics_SpawnSoundAttached::Location' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_SpawnSoundAttached, Rotation) == 0x000038, "Member 'SQEXSEADStatics_SpawnSoundAttached::Rotation' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_SpawnSoundAttached, LocationType) == 0x000044, "Member 'SQEXSEADStatics_SpawnSoundAttached::LocationType' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_SpawnSoundAttached, bStopWhenAttachedToDestroyed) == 0x000045, "Member 'SQEXSEADStatics_SpawnSoundAttached::bStopWhenAttachedToDestroyed' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_SpawnSoundAttached, bVirtualizePlay) == 0x000046, "Member 'SQEXSEADStatics_SpawnSoundAttached::bVirtualizePlay' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_SpawnSoundAttached, bUISound) == 0x000047, "Member 'SQEXSEADStatics_SpawnSoundAttached::bUISound' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_SpawnSoundAttached, VolumeMultiplier) == 0x000048, "Member 'SQEXSEADStatics_SpawnSoundAttached::VolumeMultiplier' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_SpawnSoundAttached, PitchMultiplier) == 0x00004C, "Member 'SQEXSEADStatics_SpawnSoundAttached::PitchMultiplier' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_SpawnSoundAttached, StartTime) == 0x000050, "Member 'SQEXSEADStatics_SpawnSoundAttached::StartTime' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_SpawnSoundAttached, AttenuationSettings) == 0x000058, "Member 'SQEXSEADStatics_SpawnSoundAttached::AttenuationSettings' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_SpawnSoundAttached, ConcurrencySettings) == 0x000060, "Member 'SQEXSEADStatics_SpawnSoundAttached::ConcurrencySettings' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_SpawnSoundAttached, bAutoDestroy) == 0x000068, "Member 'SQEXSEADStatics_SpawnSoundAttached::bAutoDestroy' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_SpawnSoundAttached, bRecycle) == 0x000069, "Member 'SQEXSEADStatics_SpawnSoundAttached::bRecycle' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_SpawnSoundAttached, VibrationVolumeMultiplier) == 0x00006C, "Member 'SQEXSEADStatics_SpawnSoundAttached::VibrationVolumeMultiplier' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_SpawnSoundAttached, ReturnValue) == 0x000070, "Member 'SQEXSEADStatics_SpawnSoundAttached::ReturnValue' has a wrong offset!");

// Function SQEXSEAD.SQEXSEADStatics.SpawnSoundAttachedByName
// 0x0078 (0x0078 - 0x0000)
struct SQEXSEADStatics_SpawnSoundAttachedByName final
{
public:
	class USoundBase*                             Sound;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        AttachToComponent;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SoundName;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SwitchValue;                                       // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ZeroOneSlot;                                       // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ZeroOneValue;                                      // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ExternalID;                                        // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttachPointName;                                   // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0030(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x003C(0x000C)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EAttachLocation                               LocationType;                                      // 0x0048(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStopWhenAttachedToDestroyed;                      // 0x0049(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVirtualizePlay;                                   // 0x004A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUISound;                                          // 0x004B(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumeMultiplier;                                  // 0x004C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchMultiplier;                                   // 0x0050(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartTime;                                         // 0x0054(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundAttenuation*                      AttenuationSettings;                               // 0x0058(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundConcurrency*                      ConcurrencySettings;                               // 0x0060(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoDestroy;                                      // 0x0068(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRecycle;                                          // 0x0069(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6A[0x2];                                       // 0x006A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         VibrationVolumeMultiplier;                         // 0x006C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQEXSEADAudioComponent*                ReturnValue;                                       // 0x0070(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEXSEADStatics_SpawnSoundAttachedByName) == 0x000008, "Wrong alignment on SQEXSEADStatics_SpawnSoundAttachedByName");
static_assert(sizeof(SQEXSEADStatics_SpawnSoundAttachedByName) == 0x000078, "Wrong size on SQEXSEADStatics_SpawnSoundAttachedByName");
static_assert(offsetof(SQEXSEADStatics_SpawnSoundAttachedByName, Sound) == 0x000000, "Member 'SQEXSEADStatics_SpawnSoundAttachedByName::Sound' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_SpawnSoundAttachedByName, AttachToComponent) == 0x000008, "Member 'SQEXSEADStatics_SpawnSoundAttachedByName::AttachToComponent' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_SpawnSoundAttachedByName, SoundName) == 0x000010, "Member 'SQEXSEADStatics_SpawnSoundAttachedByName::SoundName' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_SpawnSoundAttachedByName, SwitchValue) == 0x000018, "Member 'SQEXSEADStatics_SpawnSoundAttachedByName::SwitchValue' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_SpawnSoundAttachedByName, ZeroOneSlot) == 0x00001C, "Member 'SQEXSEADStatics_SpawnSoundAttachedByName::ZeroOneSlot' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_SpawnSoundAttachedByName, ZeroOneValue) == 0x000020, "Member 'SQEXSEADStatics_SpawnSoundAttachedByName::ZeroOneValue' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_SpawnSoundAttachedByName, ExternalID) == 0x000024, "Member 'SQEXSEADStatics_SpawnSoundAttachedByName::ExternalID' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_SpawnSoundAttachedByName, AttachPointName) == 0x000028, "Member 'SQEXSEADStatics_SpawnSoundAttachedByName::AttachPointName' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_SpawnSoundAttachedByName, Location) == 0x000030, "Member 'SQEXSEADStatics_SpawnSoundAttachedByName::Location' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_SpawnSoundAttachedByName, Rotation) == 0x00003C, "Member 'SQEXSEADStatics_SpawnSoundAttachedByName::Rotation' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_SpawnSoundAttachedByName, LocationType) == 0x000048, "Member 'SQEXSEADStatics_SpawnSoundAttachedByName::LocationType' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_SpawnSoundAttachedByName, bStopWhenAttachedToDestroyed) == 0x000049, "Member 'SQEXSEADStatics_SpawnSoundAttachedByName::bStopWhenAttachedToDestroyed' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_SpawnSoundAttachedByName, bVirtualizePlay) == 0x00004A, "Member 'SQEXSEADStatics_SpawnSoundAttachedByName::bVirtualizePlay' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_SpawnSoundAttachedByName, bUISound) == 0x00004B, "Member 'SQEXSEADStatics_SpawnSoundAttachedByName::bUISound' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_SpawnSoundAttachedByName, VolumeMultiplier) == 0x00004C, "Member 'SQEXSEADStatics_SpawnSoundAttachedByName::VolumeMultiplier' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_SpawnSoundAttachedByName, PitchMultiplier) == 0x000050, "Member 'SQEXSEADStatics_SpawnSoundAttachedByName::PitchMultiplier' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_SpawnSoundAttachedByName, StartTime) == 0x000054, "Member 'SQEXSEADStatics_SpawnSoundAttachedByName::StartTime' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_SpawnSoundAttachedByName, AttenuationSettings) == 0x000058, "Member 'SQEXSEADStatics_SpawnSoundAttachedByName::AttenuationSettings' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_SpawnSoundAttachedByName, ConcurrencySettings) == 0x000060, "Member 'SQEXSEADStatics_SpawnSoundAttachedByName::ConcurrencySettings' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_SpawnSoundAttachedByName, bAutoDestroy) == 0x000068, "Member 'SQEXSEADStatics_SpawnSoundAttachedByName::bAutoDestroy' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_SpawnSoundAttachedByName, bRecycle) == 0x000069, "Member 'SQEXSEADStatics_SpawnSoundAttachedByName::bRecycle' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_SpawnSoundAttachedByName, VibrationVolumeMultiplier) == 0x00006C, "Member 'SQEXSEADStatics_SpawnSoundAttachedByName::VibrationVolumeMultiplier' has a wrong offset!");
static_assert(offsetof(SQEXSEADStatics_SpawnSoundAttachedByName, ReturnValue) == 0x000070, "Member 'SQEXSEADStatics_SpawnSoundAttachedByName::ReturnValue' has a wrong offset!");

// Function SQEXSEAD.SQEXSEADStatics.StopAllBGM_OptionalFade
// 0x0004 (0x0004 - 0x0000)
struct SQEXSEADStatics_StopAllBGM_OptionalFade final
{
public:
	float                                         FadeTime;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEXSEADStatics_StopAllBGM_OptionalFade) == 0x000004, "Wrong alignment on SQEXSEADStatics_StopAllBGM_OptionalFade");
static_assert(sizeof(SQEXSEADStatics_StopAllBGM_OptionalFade) == 0x000004, "Wrong size on SQEXSEADStatics_StopAllBGM_OptionalFade");
static_assert(offsetof(SQEXSEADStatics_StopAllBGM_OptionalFade, FadeTime) == 0x000000, "Member 'SQEXSEADStatics_StopAllBGM_OptionalFade::FadeTime' has a wrong offset!");

// Function SQEXSEAD.SQEXSEADStatics.StopAllCategorySounds
// 0x0004 (0x0004 - 0x0000)
struct SQEXSEADStatics_StopAllCategorySounds final
{
public:
	float                                         FadeTime;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEXSEADStatics_StopAllCategorySounds) == 0x000004, "Wrong alignment on SQEXSEADStatics_StopAllCategorySounds");
static_assert(sizeof(SQEXSEADStatics_StopAllCategorySounds) == 0x000004, "Wrong size on SQEXSEADStatics_StopAllCategorySounds");
static_assert(offsetof(SQEXSEADStatics_StopAllCategorySounds, FadeTime) == 0x000000, "Member 'SQEXSEADStatics_StopAllCategorySounds::FadeTime' has a wrong offset!");

// Function SQEXSEAD.SQEXSEADStatics.SuspendBGM_OptionalFade
// 0x0004 (0x0004 - 0x0000)
struct SQEXSEADStatics_SuspendBGM_OptionalFade final
{
public:
	float                                         FadeTime;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEXSEADStatics_SuspendBGM_OptionalFade) == 0x000004, "Wrong alignment on SQEXSEADStatics_SuspendBGM_OptionalFade");
static_assert(sizeof(SQEXSEADStatics_SuspendBGM_OptionalFade) == 0x000004, "Wrong size on SQEXSEADStatics_SuspendBGM_OptionalFade");
static_assert(offsetof(SQEXSEADStatics_SuspendBGM_OptionalFade, FadeTime) == 0x000000, "Member 'SQEXSEADStatics_SuspendBGM_OptionalFade::FadeTime' has a wrong offset!");

// Function SQEXSEAD.SQEXSEADZeroOneSeComponent.SetZeroOneValue
// 0x000C (0x000C - 0x0000)
struct SQEXSEADZeroOneSeComponent_SetZeroOneValue final
{
public:
	int32                                         Slot;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeTime;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEXSEADZeroOneSeComponent_SetZeroOneValue) == 0x000004, "Wrong alignment on SQEXSEADZeroOneSeComponent_SetZeroOneValue");
static_assert(sizeof(SQEXSEADZeroOneSeComponent_SetZeroOneValue) == 0x00000C, "Wrong size on SQEXSEADZeroOneSeComponent_SetZeroOneValue");
static_assert(offsetof(SQEXSEADZeroOneSeComponent_SetZeroOneValue, Slot) == 0x000000, "Member 'SQEXSEADZeroOneSeComponent_SetZeroOneValue::Slot' has a wrong offset!");
static_assert(offsetof(SQEXSEADZeroOneSeComponent_SetZeroOneValue, Value) == 0x000004, "Member 'SQEXSEADZeroOneSeComponent_SetZeroOneValue::Value' has a wrong offset!");
static_assert(offsetof(SQEXSEADZeroOneSeComponent_SetZeroOneValue, FadeTime) == 0x000008, "Member 'SQEXSEADZeroOneSeComponent_SetZeroOneValue::FadeTime' has a wrong offset!");

}

