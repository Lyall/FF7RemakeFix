#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: HSFLipSyncRuntime

#include "Basic.hpp"

#include "HSFLipSyncRuntime_structs.hpp"
#include "CoreUObject_classes.hpp"


namespace SDK
{

// Class HSFLipSyncRuntime.HSFLipMap
// 0x0148 (0x0170 - 0x0028)
class UHSFLipMap final : public UObject
{
public:
	class FName                                   version;                                           // 0x0028(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, struct FHSFLipMapShape>     Shapes;                                            // 0x0030(0x0050)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	struct FHSFLipMapShape                        DefaultShape;                                      // 0x0080(0x0078)(Edit, EditConst, NativeAccessSpecifierPublic)
	struct FHSFLipMapShape                        MaxDifferenceShape;                                // 0x00F8(0x0078)(Edit, EditConst, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HSFLipMap">();
	}
	static class UHSFLipMap* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHSFLipMap>();
	}
};
static_assert(alignof(UHSFLipMap) == 0x000008, "Wrong alignment on UHSFLipMap");
static_assert(sizeof(UHSFLipMap) == 0x000170, "Wrong size on UHSFLipMap");
static_assert(offsetof(UHSFLipMap, version) == 0x000028, "Member 'UHSFLipMap::version' has a wrong offset!");
static_assert(offsetof(UHSFLipMap, Shapes) == 0x000030, "Member 'UHSFLipMap::Shapes' has a wrong offset!");
static_assert(offsetof(UHSFLipMap, DefaultShape) == 0x000080, "Member 'UHSFLipMap::DefaultShape' has a wrong offset!");
static_assert(offsetof(UHSFLipMap, MaxDifferenceShape) == 0x0000F8, "Member 'UHSFLipMap::MaxDifferenceShape' has a wrong offset!");

// Class HSFLipSyncRuntime.HSFLipSyncDataPack
// 0x0050 (0x0078 - 0x0028)
class UHSFLipSyncDataPack final : public UObject
{
public:
	TMap<class FName, struct FHSFLipSyncData>     Data;                                              // 0x0028(0x0050)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HSFLipSyncDataPack">();
	}
	static class UHSFLipSyncDataPack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHSFLipSyncDataPack>();
	}
};
static_assert(alignof(UHSFLipSyncDataPack) == 0x000008, "Wrong alignment on UHSFLipSyncDataPack");
static_assert(sizeof(UHSFLipSyncDataPack) == 0x000078, "Wrong size on UHSFLipSyncDataPack");
static_assert(offsetof(UHSFLipSyncDataPack, Data) == 0x000028, "Member 'UHSFLipSyncDataPack::Data' has a wrong offset!");

// Class HSFLipSyncRuntime.HSFLipSyncSettings
// 0x0018 (0x0040 - 0x0028)
class UHSFLipSyncSettings final : public UObject
{
public:
	float                                         Fps;                                               // 0x0028(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHSFLipSyncKeyframeMethod                     KeyframeMethod;                                    // 0x002C(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         StartOffset;                                       // 0x0030(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EndOffset;                                         // 0x0034(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseAudioPower;                                    // 0x0038(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseRandomization;                                 // 0x0039(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x2];                                       // 0x003A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ExpressionLevel;                                   // 0x003C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HSFLipSyncSettings">();
	}
	static class UHSFLipSyncSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHSFLipSyncSettings>();
	}
};
static_assert(alignof(UHSFLipSyncSettings) == 0x000008, "Wrong alignment on UHSFLipSyncSettings");
static_assert(sizeof(UHSFLipSyncSettings) == 0x000040, "Wrong size on UHSFLipSyncSettings");
static_assert(offsetof(UHSFLipSyncSettings, Fps) == 0x000028, "Member 'UHSFLipSyncSettings::Fps' has a wrong offset!");
static_assert(offsetof(UHSFLipSyncSettings, KeyframeMethod) == 0x00002C, "Member 'UHSFLipSyncSettings::KeyframeMethod' has a wrong offset!");
static_assert(offsetof(UHSFLipSyncSettings, StartOffset) == 0x000030, "Member 'UHSFLipSyncSettings::StartOffset' has a wrong offset!");
static_assert(offsetof(UHSFLipSyncSettings, EndOffset) == 0x000034, "Member 'UHSFLipSyncSettings::EndOffset' has a wrong offset!");
static_assert(offsetof(UHSFLipSyncSettings, bUseAudioPower) == 0x000038, "Member 'UHSFLipSyncSettings::bUseAudioPower' has a wrong offset!");
static_assert(offsetof(UHSFLipSyncSettings, bUseRandomization) == 0x000039, "Member 'UHSFLipSyncSettings::bUseRandomization' has a wrong offset!");
static_assert(offsetof(UHSFLipSyncSettings, ExpressionLevel) == 0x00003C, "Member 'UHSFLipSyncSettings::ExpressionLevel' has a wrong offset!");

}

