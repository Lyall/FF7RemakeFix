#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: EN0000_00_SecuritySoldier_Standard_AI

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "EndGame_structs.hpp"
#include "EndGame_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass EN0000_00_SecuritySoldier_Standard_AI.EN0000_00_SecuritySoldier_Standard_AI_C
// 0x0040 (0x22C8 - 0x2288)
class AEN0000_00_SecuritySoldier_Standard_AI_C : public AEndBattleAIController
{
public:
	uint8                                         Pad_2288[0x8];                                     // 0x2288(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x2290(0x0008)(Transient, DuplicateTransient)
	class UEndAITimerComponent*                   AroundTimer;                                       // 0x2298(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class AEndCharacter*                          TempChara;                                         // 0x22A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 AttackRatio;                                       // 0x22A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<int32>                                 GrenadeRatio;                                      // 0x22B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)

public:
	void ExecuteUbergraph_EN0000_00_SecuritySoldier_Standard_AI(int32 EntryPoint);
	void OnSuspendAbility(class FName InName, EEndAiAbilitySuspendFactor InFactor, EEndAiAbilitySuspendTiming InTiming);
	void OnInterceptAbility(class FName InName);
	void OnPrepareAbility(class FName InName);
	void BndEvt__AroundTimer_K2Node_ComponentBoundEvent_0_EndAITimerOnFinishTimer__DelegateSignature(class FName InName);
	void IsEnableGrenade();
	void LightAttackRequest();
	void HardAttackRequest();
	void OnMetaMessageAboutCharacter(class AEndCharacter* InChara, const class FString& InMessage);
	void OnDead(bool AtBurst);
	void OnFirstUpdate(EEndAiBattleRole InRole, int32 InStep);
	void Slu5bSpecialProcess(class FName InMessage);
	void Town7SpecialProcess();
	void OnPrepareProc();
	void OnUpdate(EEndAiBattleRole InRole, int32 InStep, float DeltaTime);
	void OnEntryBattleScene();
	void OnATBHardAttackEvent();
	void OnMotionMessage(class FName InMotionName, class FName InName, int32 InIntValue, float InFloatValue);
	void OnATBLightAttackEvent();
	void OnCheckBindAction(class FName ActionName, int32 CheckID, int32 ComboIndex);
	void ReceiveBeginPlay();
	void OnContactObject(float Angle);
	void OnContactWall(float Angle);
	void DeclareVariable();
	void OnChangeMotionState(int32 Before, int32 After);
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"EN0000_00_SecuritySoldier_Standard_AI_C">();
	}
	static class AEN0000_00_SecuritySoldier_Standard_AI_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AEN0000_00_SecuritySoldier_Standard_AI_C>();
	}
};
static_assert(alignof(AEN0000_00_SecuritySoldier_Standard_AI_C) == 0x000008, "Wrong alignment on AEN0000_00_SecuritySoldier_Standard_AI_C");
static_assert(sizeof(AEN0000_00_SecuritySoldier_Standard_AI_C) == 0x0022C8, "Wrong size on AEN0000_00_SecuritySoldier_Standard_AI_C");
static_assert(offsetof(AEN0000_00_SecuritySoldier_Standard_AI_C, UberGraphFrame) == 0x002290, "Member 'AEN0000_00_SecuritySoldier_Standard_AI_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AEN0000_00_SecuritySoldier_Standard_AI_C, AroundTimer) == 0x002298, "Member 'AEN0000_00_SecuritySoldier_Standard_AI_C::AroundTimer' has a wrong offset!");
static_assert(offsetof(AEN0000_00_SecuritySoldier_Standard_AI_C, TempChara) == 0x0022A0, "Member 'AEN0000_00_SecuritySoldier_Standard_AI_C::TempChara' has a wrong offset!");
static_assert(offsetof(AEN0000_00_SecuritySoldier_Standard_AI_C, AttackRatio) == 0x0022A8, "Member 'AEN0000_00_SecuritySoldier_Standard_AI_C::AttackRatio' has a wrong offset!");
static_assert(offsetof(AEN0000_00_SecuritySoldier_Standard_AI_C, GrenadeRatio) == 0x0022B8, "Member 'AEN0000_00_SecuritySoldier_Standard_AI_C::GrenadeRatio' has a wrong offset!");

}

