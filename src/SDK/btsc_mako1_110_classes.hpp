#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: btsc_mako1_110

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "EndGame_structs.hpp"
#include "EndGame_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass btsc_mako1_110.btsc_mako1_110_C
// 0x0098 (0x04F0 - 0x0458)
class Abtsc_mako1_110_C final : public AEndBattleScene_btsc_mako1_110
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0458(0x0008)(Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0460(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	int32                                         TLcount;                                           // 0x0468(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_46C[0x4];                                      // 0x046C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 GuardScorpionActorName_0;                          // 0x0470(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	int32                                         BarrierDestroyCount;                               // 0x0480(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SearchCount;                                       // 0x0484(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         BarrierBeginCount;                                 // 0x0488(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   DeadCharaName;                                     // 0x048C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_494[0x4];                                      // 0x0494(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           weekpoint;                                         // 0x0498(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	int32                                         NewVar_1;                                          // 0x04A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          WeekHit;                                           // 0x04AC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          ThunderHit;                                        // 0x04AD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4AE[0x2];                                      // 0x04AE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Time;                                              // 0x04B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          WeekhintOn;                                        // 0x04B4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Down_ON;                                           // 0x04B5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4B6[0x2];                                      // 0x04B6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Sync_Tutorial_Btl_0110;                            // 0x04B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Burst_Tutorial_Btl_0081;                           // 0x04C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Weak_Tutorial_Btl_0080;                            // 0x04C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   DamagedAbilityNameByChara;                         // 0x04D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AreaBox_IN;                                        // 0x04D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          BredgeBox_IN;                                      // 0x04D9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          SyncNow;                                           // 0x04DA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Phase2AreaIN;                                      // 0x04DB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int32                                         ThunderHitCloud;                                   // 0x04DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ThunderHitBarret;                                  // 0x04E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CloudBarrierHit;                                   // 0x04E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         BarretBarrierHit;                                  // 0x04E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_btsc_mako1_110(int32 EntryPoint);
	void OnBeginTalkTriggerBoxCollide(class FName TriggerBoxActorName, class FName CollideCharaName);
	void OnEndTalkTriggerBoxCollide(class FName TriggerBoxActorName, class FName CollideCharaName);
	void OnMetaMessage(const class FString& InMessage);
	void ReceiveBeginPlay();
	void OnCharaPartsBreak(class FName CauserCharaName, class FName BrokenCharaName, class FName partsID, class FName CategoryID, int32 CategoryBreakCount);
	void OnAddMagicThunderHitCountForBarrierGS(class FName CauserCharaName, int32 Count);
	void OnTakeDamage(int32 Damage, const class FName& CauserCharaName, const class FName& DamagedCharaName, const class FName& AbilityID, bool bBind, bool bGuard, bool bDodge, const class FName& hitBoneName, bool bAttributeHit, const class FName& DamageSourceID, EEndBattleAttributeType DmgSrcAttributeType, float justHitRotYaw, const struct FVector& hitPosition, bool bHeal);
	void OnCharaSyncAction(const class FName& AttackedCharaName, const class FName& ReceivedCharaName, const class FName& StateId, int32 StateCount, const class FName& syncActionID, const class FName& CauserCharaName);
	void OnCharaSpecialStatusChange(const class FName& ownerCharaName, const class FName& SpecialStatusChangeID, EEndBattleSpecialStatusChangeType Type, const class FName& StateId, const TArray<float>& Params_0, const TArray<class FName>& ParamIDs, const TArray<class AActor*>& ParamActors);
	void OnIncrementBattleCountPerID(class FName CauserCharaName, class FName TargetCharaName, EEndBattleCountLogType Type, class FName ID, int32 Count);
	void ChangePhase(int32 mphase);
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"btsc_mako1_110_C">();
	}
	static class Abtsc_mako1_110_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<Abtsc_mako1_110_C>();
	}
};
static_assert(alignof(Abtsc_mako1_110_C) == 0x000008, "Wrong alignment on Abtsc_mako1_110_C");
static_assert(sizeof(Abtsc_mako1_110_C) == 0x0004F0, "Wrong size on Abtsc_mako1_110_C");
static_assert(offsetof(Abtsc_mako1_110_C, UberGraphFrame) == 0x000458, "Member 'Abtsc_mako1_110_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(Abtsc_mako1_110_C, DefaultSceneRoot) == 0x000460, "Member 'Abtsc_mako1_110_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(Abtsc_mako1_110_C, TLcount) == 0x000468, "Member 'Abtsc_mako1_110_C::TLcount' has a wrong offset!");
static_assert(offsetof(Abtsc_mako1_110_C, GuardScorpionActorName_0) == 0x000470, "Member 'Abtsc_mako1_110_C::GuardScorpionActorName_0' has a wrong offset!");
static_assert(offsetof(Abtsc_mako1_110_C, BarrierDestroyCount) == 0x000480, "Member 'Abtsc_mako1_110_C::BarrierDestroyCount' has a wrong offset!");
static_assert(offsetof(Abtsc_mako1_110_C, SearchCount) == 0x000484, "Member 'Abtsc_mako1_110_C::SearchCount' has a wrong offset!");
static_assert(offsetof(Abtsc_mako1_110_C, BarrierBeginCount) == 0x000488, "Member 'Abtsc_mako1_110_C::BarrierBeginCount' has a wrong offset!");
static_assert(offsetof(Abtsc_mako1_110_C, DeadCharaName) == 0x00048C, "Member 'Abtsc_mako1_110_C::DeadCharaName' has a wrong offset!");
static_assert(offsetof(Abtsc_mako1_110_C, weekpoint) == 0x000498, "Member 'Abtsc_mako1_110_C::weekpoint' has a wrong offset!");
static_assert(offsetof(Abtsc_mako1_110_C, NewVar_1) == 0x0004A8, "Member 'Abtsc_mako1_110_C::NewVar_1' has a wrong offset!");
static_assert(offsetof(Abtsc_mako1_110_C, WeekHit) == 0x0004AC, "Member 'Abtsc_mako1_110_C::WeekHit' has a wrong offset!");
static_assert(offsetof(Abtsc_mako1_110_C, ThunderHit) == 0x0004AD, "Member 'Abtsc_mako1_110_C::ThunderHit' has a wrong offset!");
static_assert(offsetof(Abtsc_mako1_110_C, Time) == 0x0004B0, "Member 'Abtsc_mako1_110_C::Time' has a wrong offset!");
static_assert(offsetof(Abtsc_mako1_110_C, WeekhintOn) == 0x0004B4, "Member 'Abtsc_mako1_110_C::WeekhintOn' has a wrong offset!");
static_assert(offsetof(Abtsc_mako1_110_C, Down_ON) == 0x0004B5, "Member 'Abtsc_mako1_110_C::Down_ON' has a wrong offset!");
static_assert(offsetof(Abtsc_mako1_110_C, Sync_Tutorial_Btl_0110) == 0x0004B8, "Member 'Abtsc_mako1_110_C::Sync_Tutorial_Btl_0110' has a wrong offset!");
static_assert(offsetof(Abtsc_mako1_110_C, Burst_Tutorial_Btl_0081) == 0x0004C0, "Member 'Abtsc_mako1_110_C::Burst_Tutorial_Btl_0081' has a wrong offset!");
static_assert(offsetof(Abtsc_mako1_110_C, Weak_Tutorial_Btl_0080) == 0x0004C8, "Member 'Abtsc_mako1_110_C::Weak_Tutorial_Btl_0080' has a wrong offset!");
static_assert(offsetof(Abtsc_mako1_110_C, DamagedAbilityNameByChara) == 0x0004D0, "Member 'Abtsc_mako1_110_C::DamagedAbilityNameByChara' has a wrong offset!");
static_assert(offsetof(Abtsc_mako1_110_C, AreaBox_IN) == 0x0004D8, "Member 'Abtsc_mako1_110_C::AreaBox_IN' has a wrong offset!");
static_assert(offsetof(Abtsc_mako1_110_C, BredgeBox_IN) == 0x0004D9, "Member 'Abtsc_mako1_110_C::BredgeBox_IN' has a wrong offset!");
static_assert(offsetof(Abtsc_mako1_110_C, SyncNow) == 0x0004DA, "Member 'Abtsc_mako1_110_C::SyncNow' has a wrong offset!");
static_assert(offsetof(Abtsc_mako1_110_C, Phase2AreaIN) == 0x0004DB, "Member 'Abtsc_mako1_110_C::Phase2AreaIN' has a wrong offset!");
static_assert(offsetof(Abtsc_mako1_110_C, ThunderHitCloud) == 0x0004DC, "Member 'Abtsc_mako1_110_C::ThunderHitCloud' has a wrong offset!");
static_assert(offsetof(Abtsc_mako1_110_C, ThunderHitBarret) == 0x0004E0, "Member 'Abtsc_mako1_110_C::ThunderHitBarret' has a wrong offset!");
static_assert(offsetof(Abtsc_mako1_110_C, CloudBarrierHit) == 0x0004E4, "Member 'Abtsc_mako1_110_C::CloudBarrierHit' has a wrong offset!");
static_assert(offsetof(Abtsc_mako1_110_C, BarretBarrierHit) == 0x0004E8, "Member 'Abtsc_mako1_110_C::BarretBarrierHit' has a wrong offset!");

}

