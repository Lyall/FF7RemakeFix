#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: EndGame

#include "Basic.hpp"

#include "EndGame_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Slate_structs.hpp"
#include "Engine_structs.hpp"
#include "SlateCore_structs.hpp"
#include "UMG_structs.hpp"
#include "InputCore_structs.hpp"


namespace SDK::Params
{

// Function EndGame.EndUserWidget.AddToOffscreen
// 0x0004 (0x0004 - 0x0000)
struct EndUserWidget_AddToOffscreen final
{
public:
	int32                                         ZOrder;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndUserWidget_AddToOffscreen) == 0x000004, "Wrong alignment on EndUserWidget_AddToOffscreen");
static_assert(sizeof(EndUserWidget_AddToOffscreen) == 0x000004, "Wrong size on EndUserWidget_AddToOffscreen");
static_assert(offsetof(EndUserWidget_AddToOffscreen, ZOrder) == 0x000000, "Member 'EndUserWidget_AddToOffscreen::ZOrder' has a wrong offset!");

// Function EndGame.EndUserWidget.AddToPlayerScreenEx
// 0x0008 (0x0008 - 0x0000)
struct EndUserWidget_AddToPlayerScreenEx final
{
public:
	int32                                         ZOrder;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndUserWidget_AddToPlayerScreenEx) == 0x000004, "Wrong alignment on EndUserWidget_AddToPlayerScreenEx");
static_assert(sizeof(EndUserWidget_AddToPlayerScreenEx) == 0x000008, "Wrong size on EndUserWidget_AddToPlayerScreenEx");
static_assert(offsetof(EndUserWidget_AddToPlayerScreenEx, ZOrder) == 0x000000, "Member 'EndUserWidget_AddToPlayerScreenEx::ZOrder' has a wrong offset!");
static_assert(offsetof(EndUserWidget_AddToPlayerScreenEx, ReturnValue) == 0x000004, "Member 'EndUserWidget_AddToPlayerScreenEx::ReturnValue' has a wrong offset!");

// Function EndGame.EndUserWidget.AddToScene
// 0x0018 (0x0018 - 0x0000)
struct EndUserWidget_AddToScene final
{
public:
	struct FVector                                InLocation;                                        // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               InRotation;                                        // 0x000C(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndUserWidget_AddToScene) == 0x000004, "Wrong alignment on EndUserWidget_AddToScene");
static_assert(sizeof(EndUserWidget_AddToScene) == 0x000018, "Wrong size on EndUserWidget_AddToScene");
static_assert(offsetof(EndUserWidget_AddToScene, InLocation) == 0x000000, "Member 'EndUserWidget_AddToScene::InLocation' has a wrong offset!");
static_assert(offsetof(EndUserWidget_AddToScene, InRotation) == 0x00000C, "Member 'EndUserWidget_AddToScene::InRotation' has a wrong offset!");

// Function EndGame.EndUserWidget.AddToViewportEx
// 0x0004 (0x0004 - 0x0000)
struct EndUserWidget_AddToViewportEx final
{
public:
	int32                                         ZOrder;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndUserWidget_AddToViewportEx) == 0x000004, "Wrong alignment on EndUserWidget_AddToViewportEx");
static_assert(sizeof(EndUserWidget_AddToViewportEx) == 0x000004, "Wrong size on EndUserWidget_AddToViewportEx");
static_assert(offsetof(EndUserWidget_AddToViewportEx, ZOrder) == 0x000000, "Member 'EndUserWidget_AddToViewportEx::ZOrder' has a wrong offset!");

// Function EndGame.EndUserWidget.IsAnimationPlayingForwardByName
// 0x000C (0x000C - 0x0000)
struct EndUserWidget_IsAnimationPlayingForwardByName final
{
public:
	class FName                                   InAnimationName;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndUserWidget_IsAnimationPlayingForwardByName) == 0x000004, "Wrong alignment on EndUserWidget_IsAnimationPlayingForwardByName");
static_assert(sizeof(EndUserWidget_IsAnimationPlayingForwardByName) == 0x00000C, "Wrong size on EndUserWidget_IsAnimationPlayingForwardByName");
static_assert(offsetof(EndUserWidget_IsAnimationPlayingForwardByName, InAnimationName) == 0x000000, "Member 'EndUserWidget_IsAnimationPlayingForwardByName::InAnimationName' has a wrong offset!");
static_assert(offsetof(EndUserWidget_IsAnimationPlayingForwardByName, ReturnValue) == 0x000008, "Member 'EndUserWidget_IsAnimationPlayingForwardByName::ReturnValue' has a wrong offset!");

// Function EndGame.EndUserWidget.IsAnimationPlayingForwardEx
// 0x0010 (0x0010 - 0x0000)
struct EndUserWidget_IsAnimationPlayingForwardEx final
{
public:
	const class UWidgetAnimation*                 InAnimation;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndUserWidget_IsAnimationPlayingForwardEx) == 0x000008, "Wrong alignment on EndUserWidget_IsAnimationPlayingForwardEx");
static_assert(sizeof(EndUserWidget_IsAnimationPlayingForwardEx) == 0x000010, "Wrong size on EndUserWidget_IsAnimationPlayingForwardEx");
static_assert(offsetof(EndUserWidget_IsAnimationPlayingForwardEx, InAnimation) == 0x000000, "Member 'EndUserWidget_IsAnimationPlayingForwardEx::InAnimation' has a wrong offset!");
static_assert(offsetof(EndUserWidget_IsAnimationPlayingForwardEx, ReturnValue) == 0x000008, "Member 'EndUserWidget_IsAnimationPlayingForwardEx::ReturnValue' has a wrong offset!");

// Function EndGame.EndUserWidget.PauseAnimationByName
// 0x000C (0x000C - 0x0000)
struct EndUserWidget_PauseAnimationByName final
{
public:
	class FName                                   InAnimationName;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndUserWidget_PauseAnimationByName) == 0x000004, "Wrong alignment on EndUserWidget_PauseAnimationByName");
static_assert(sizeof(EndUserWidget_PauseAnimationByName) == 0x00000C, "Wrong size on EndUserWidget_PauseAnimationByName");
static_assert(offsetof(EndUserWidget_PauseAnimationByName, InAnimationName) == 0x000000, "Member 'EndUserWidget_PauseAnimationByName::InAnimationName' has a wrong offset!");
static_assert(offsetof(EndUserWidget_PauseAnimationByName, ReturnValue) == 0x000008, "Member 'EndUserWidget_PauseAnimationByName::ReturnValue' has a wrong offset!");

// Function EndGame.EndUserWidget.PauseAnimationEx
// 0x0010 (0x0010 - 0x0000)
struct EndUserWidget_PauseAnimationEx final
{
public:
	const class UWidgetAnimation*                 InAnimation;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndUserWidget_PauseAnimationEx) == 0x000008, "Wrong alignment on EndUserWidget_PauseAnimationEx");
static_assert(sizeof(EndUserWidget_PauseAnimationEx) == 0x000010, "Wrong size on EndUserWidget_PauseAnimationEx");
static_assert(offsetof(EndUserWidget_PauseAnimationEx, InAnimation) == 0x000000, "Member 'EndUserWidget_PauseAnimationEx::InAnimation' has a wrong offset!");
static_assert(offsetof(EndUserWidget_PauseAnimationEx, ReturnValue) == 0x000008, "Member 'EndUserWidget_PauseAnimationEx::ReturnValue' has a wrong offset!");

// Function EndGame.EndUserWidget.PlayAnimationByName
// 0x001C (0x001C - 0x0000)
struct EndUserWidget_PlayAnimationByName final
{
public:
	class FName                                   InAnimationName;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartAtTime;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumLoopsToPlay;                                    // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUMGSequencePlayMode                          PlayMode;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PlaybackSpeed;                                     // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndUserWidget_PlayAnimationByName) == 0x000004, "Wrong alignment on EndUserWidget_PlayAnimationByName");
static_assert(sizeof(EndUserWidget_PlayAnimationByName) == 0x00001C, "Wrong size on EndUserWidget_PlayAnimationByName");
static_assert(offsetof(EndUserWidget_PlayAnimationByName, InAnimationName) == 0x000000, "Member 'EndUserWidget_PlayAnimationByName::InAnimationName' has a wrong offset!");
static_assert(offsetof(EndUserWidget_PlayAnimationByName, StartAtTime) == 0x000008, "Member 'EndUserWidget_PlayAnimationByName::StartAtTime' has a wrong offset!");
static_assert(offsetof(EndUserWidget_PlayAnimationByName, NumLoopsToPlay) == 0x00000C, "Member 'EndUserWidget_PlayAnimationByName::NumLoopsToPlay' has a wrong offset!");
static_assert(offsetof(EndUserWidget_PlayAnimationByName, PlayMode) == 0x000010, "Member 'EndUserWidget_PlayAnimationByName::PlayMode' has a wrong offset!");
static_assert(offsetof(EndUserWidget_PlayAnimationByName, PlaybackSpeed) == 0x000014, "Member 'EndUserWidget_PlayAnimationByName::PlaybackSpeed' has a wrong offset!");
static_assert(offsetof(EndUserWidget_PlayAnimationByName, ReturnValue) == 0x000018, "Member 'EndUserWidget_PlayAnimationByName::ReturnValue' has a wrong offset!");

// Function EndGame.EndUserWidget.PlayAnimationEx
// 0x0018 (0x0018 - 0x0000)
struct EndUserWidget_PlayAnimationEx final
{
public:
	class UWidgetAnimation*                       InAnimation;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartAtTime;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumLoopsToPlay;                                    // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUMGSequencePlayMode                          PlayMode;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PlaybackSpeed;                                     // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndUserWidget_PlayAnimationEx) == 0x000008, "Wrong alignment on EndUserWidget_PlayAnimationEx");
static_assert(sizeof(EndUserWidget_PlayAnimationEx) == 0x000018, "Wrong size on EndUserWidget_PlayAnimationEx");
static_assert(offsetof(EndUserWidget_PlayAnimationEx, InAnimation) == 0x000000, "Member 'EndUserWidget_PlayAnimationEx::InAnimation' has a wrong offset!");
static_assert(offsetof(EndUserWidget_PlayAnimationEx, StartAtTime) == 0x000008, "Member 'EndUserWidget_PlayAnimationEx::StartAtTime' has a wrong offset!");
static_assert(offsetof(EndUserWidget_PlayAnimationEx, NumLoopsToPlay) == 0x00000C, "Member 'EndUserWidget_PlayAnimationEx::NumLoopsToPlay' has a wrong offset!");
static_assert(offsetof(EndUserWidget_PlayAnimationEx, PlayMode) == 0x000010, "Member 'EndUserWidget_PlayAnimationEx::PlayMode' has a wrong offset!");
static_assert(offsetof(EndUserWidget_PlayAnimationEx, PlaybackSpeed) == 0x000014, "Member 'EndUserWidget_PlayAnimationEx::PlaybackSpeed' has a wrong offset!");

// Function EndGame.EndUserWidget.PlayAnimationExAutoReverse
// 0x0020 (0x0020 - 0x0000)
struct EndUserWidget_PlayAnimationExAutoReverse final
{
public:
	class UWidgetAnimation*                       InAnimation;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartAtTime;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumLoopsToPlay;                                    // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUMGSequencePlayMode                          PlayMode;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PlaybackSpeed;                                     // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReverseSpeed;                                      // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndUserWidget_PlayAnimationExAutoReverse) == 0x000008, "Wrong alignment on EndUserWidget_PlayAnimationExAutoReverse");
static_assert(sizeof(EndUserWidget_PlayAnimationExAutoReverse) == 0x000020, "Wrong size on EndUserWidget_PlayAnimationExAutoReverse");
static_assert(offsetof(EndUserWidget_PlayAnimationExAutoReverse, InAnimation) == 0x000000, "Member 'EndUserWidget_PlayAnimationExAutoReverse::InAnimation' has a wrong offset!");
static_assert(offsetof(EndUserWidget_PlayAnimationExAutoReverse, StartAtTime) == 0x000008, "Member 'EndUserWidget_PlayAnimationExAutoReverse::StartAtTime' has a wrong offset!");
static_assert(offsetof(EndUserWidget_PlayAnimationExAutoReverse, NumLoopsToPlay) == 0x00000C, "Member 'EndUserWidget_PlayAnimationExAutoReverse::NumLoopsToPlay' has a wrong offset!");
static_assert(offsetof(EndUserWidget_PlayAnimationExAutoReverse, PlayMode) == 0x000010, "Member 'EndUserWidget_PlayAnimationExAutoReverse::PlayMode' has a wrong offset!");
static_assert(offsetof(EndUserWidget_PlayAnimationExAutoReverse, PlaybackSpeed) == 0x000014, "Member 'EndUserWidget_PlayAnimationExAutoReverse::PlaybackSpeed' has a wrong offset!");
static_assert(offsetof(EndUserWidget_PlayAnimationExAutoReverse, ReverseSpeed) == 0x000018, "Member 'EndUserWidget_PlayAnimationExAutoReverse::ReverseSpeed' has a wrong offset!");

// Function EndGame.EndUserWidget.PlayAnimationToByName
// 0x0020 (0x0020 - 0x0000)
struct EndUserWidget_PlayAnimationToByName final
{
public:
	class FName                                   InAnimationName;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartAtTime;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndAtTime;                                         // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumLoopsToPlay;                                    // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUMGSequencePlayMode                          PlayMode;                                          // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PlaybackSpeed;                                     // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndUserWidget_PlayAnimationToByName) == 0x000004, "Wrong alignment on EndUserWidget_PlayAnimationToByName");
static_assert(sizeof(EndUserWidget_PlayAnimationToByName) == 0x000020, "Wrong size on EndUserWidget_PlayAnimationToByName");
static_assert(offsetof(EndUserWidget_PlayAnimationToByName, InAnimationName) == 0x000000, "Member 'EndUserWidget_PlayAnimationToByName::InAnimationName' has a wrong offset!");
static_assert(offsetof(EndUserWidget_PlayAnimationToByName, StartAtTime) == 0x000008, "Member 'EndUserWidget_PlayAnimationToByName::StartAtTime' has a wrong offset!");
static_assert(offsetof(EndUserWidget_PlayAnimationToByName, EndAtTime) == 0x00000C, "Member 'EndUserWidget_PlayAnimationToByName::EndAtTime' has a wrong offset!");
static_assert(offsetof(EndUserWidget_PlayAnimationToByName, NumLoopsToPlay) == 0x000010, "Member 'EndUserWidget_PlayAnimationToByName::NumLoopsToPlay' has a wrong offset!");
static_assert(offsetof(EndUserWidget_PlayAnimationToByName, PlayMode) == 0x000014, "Member 'EndUserWidget_PlayAnimationToByName::PlayMode' has a wrong offset!");
static_assert(offsetof(EndUserWidget_PlayAnimationToByName, PlaybackSpeed) == 0x000018, "Member 'EndUserWidget_PlayAnimationToByName::PlaybackSpeed' has a wrong offset!");
static_assert(offsetof(EndUserWidget_PlayAnimationToByName, ReturnValue) == 0x00001C, "Member 'EndUserWidget_PlayAnimationToByName::ReturnValue' has a wrong offset!");

// Function EndGame.EndUserWidget.PlayAnimationToEx
// 0x0020 (0x0020 - 0x0000)
struct EndUserWidget_PlayAnimationToEx final
{
public:
	class UWidgetAnimation*                       InAnimation;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartAtTime;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndAtTime;                                         // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumLoopsToPlay;                                    // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUMGSequencePlayMode                          PlayMode;                                          // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PlaybackSpeed;                                     // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndUserWidget_PlayAnimationToEx) == 0x000008, "Wrong alignment on EndUserWidget_PlayAnimationToEx");
static_assert(sizeof(EndUserWidget_PlayAnimationToEx) == 0x000020, "Wrong size on EndUserWidget_PlayAnimationToEx");
static_assert(offsetof(EndUserWidget_PlayAnimationToEx, InAnimation) == 0x000000, "Member 'EndUserWidget_PlayAnimationToEx::InAnimation' has a wrong offset!");
static_assert(offsetof(EndUserWidget_PlayAnimationToEx, StartAtTime) == 0x000008, "Member 'EndUserWidget_PlayAnimationToEx::StartAtTime' has a wrong offset!");
static_assert(offsetof(EndUserWidget_PlayAnimationToEx, EndAtTime) == 0x00000C, "Member 'EndUserWidget_PlayAnimationToEx::EndAtTime' has a wrong offset!");
static_assert(offsetof(EndUserWidget_PlayAnimationToEx, NumLoopsToPlay) == 0x000010, "Member 'EndUserWidget_PlayAnimationToEx::NumLoopsToPlay' has a wrong offset!");
static_assert(offsetof(EndUserWidget_PlayAnimationToEx, PlayMode) == 0x000014, "Member 'EndUserWidget_PlayAnimationToEx::PlayMode' has a wrong offset!");
static_assert(offsetof(EndUserWidget_PlayAnimationToEx, PlaybackSpeed) == 0x000018, "Member 'EndUserWidget_PlayAnimationToEx::PlaybackSpeed' has a wrong offset!");

// Function EndGame.EndUserWidget.ReverseAnimationByName
// 0x0008 (0x0008 - 0x0000)
struct EndUserWidget_ReverseAnimationByName final
{
public:
	class FName                                   InAnimationName;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndUserWidget_ReverseAnimationByName) == 0x000004, "Wrong alignment on EndUserWidget_ReverseAnimationByName");
static_assert(sizeof(EndUserWidget_ReverseAnimationByName) == 0x000008, "Wrong size on EndUserWidget_ReverseAnimationByName");
static_assert(offsetof(EndUserWidget_ReverseAnimationByName, InAnimationName) == 0x000000, "Member 'EndUserWidget_ReverseAnimationByName::InAnimationName' has a wrong offset!");

// Function EndGame.EndUserWidget.ReverseAnimationEx
// 0x0008 (0x0008 - 0x0000)
struct EndUserWidget_ReverseAnimationEx final
{
public:
	const class UWidgetAnimation*                 InAnimation;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndUserWidget_ReverseAnimationEx) == 0x000008, "Wrong alignment on EndUserWidget_ReverseAnimationEx");
static_assert(sizeof(EndUserWidget_ReverseAnimationEx) == 0x000008, "Wrong size on EndUserWidget_ReverseAnimationEx");
static_assert(offsetof(EndUserWidget_ReverseAnimationEx, InAnimation) == 0x000000, "Member 'EndUserWidget_ReverseAnimationEx::InAnimation' has a wrong offset!");

// Function EndGame.EndUserWidget.SetFocusToChild
// 0x0010 (0x0010 - 0x0000)
struct EndUserWidget_SetFocusToChild final
{
public:
	class UWidget*                                InWidget;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFocusCause                                   InFocusCause;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndUserWidget_SetFocusToChild) == 0x000008, "Wrong alignment on EndUserWidget_SetFocusToChild");
static_assert(sizeof(EndUserWidget_SetFocusToChild) == 0x000010, "Wrong size on EndUserWidget_SetFocusToChild");
static_assert(offsetof(EndUserWidget_SetFocusToChild, InWidget) == 0x000000, "Member 'EndUserWidget_SetFocusToChild::InWidget' has a wrong offset!");
static_assert(offsetof(EndUserWidget_SetFocusToChild, InFocusCause) == 0x000008, "Member 'EndUserWidget_SetFocusToChild::InFocusCause' has a wrong offset!");
static_assert(offsetof(EndUserWidget_SetFocusToChild, ReturnValue) == 0x000009, "Member 'EndUserWidget_SetFocusToChild::ReturnValue' has a wrong offset!");

// Function EndGame.EndUserWidget.SetLocationInScene
// 0x000C (0x000C - 0x0000)
struct EndUserWidget_SetLocationInScene final
{
public:
	struct FVector                                InLocation;                                        // 0x0000(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndUserWidget_SetLocationInScene) == 0x000004, "Wrong alignment on EndUserWidget_SetLocationInScene");
static_assert(sizeof(EndUserWidget_SetLocationInScene) == 0x00000C, "Wrong size on EndUserWidget_SetLocationInScene");
static_assert(offsetof(EndUserWidget_SetLocationInScene, InLocation) == 0x000000, "Member 'EndUserWidget_SetLocationInScene::InLocation' has a wrong offset!");

// Function EndGame.EndUserWidget.SetNumLoopsToPlayByName
// 0x000C (0x000C - 0x0000)
struct EndUserWidget_SetNumLoopsToPlayByName final
{
public:
	class FName                                   InAnimationName;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumLoopsToPlay;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndUserWidget_SetNumLoopsToPlayByName) == 0x000004, "Wrong alignment on EndUserWidget_SetNumLoopsToPlayByName");
static_assert(sizeof(EndUserWidget_SetNumLoopsToPlayByName) == 0x00000C, "Wrong size on EndUserWidget_SetNumLoopsToPlayByName");
static_assert(offsetof(EndUserWidget_SetNumLoopsToPlayByName, InAnimationName) == 0x000000, "Member 'EndUserWidget_SetNumLoopsToPlayByName::InAnimationName' has a wrong offset!");
static_assert(offsetof(EndUserWidget_SetNumLoopsToPlayByName, NumLoopsToPlay) == 0x000008, "Member 'EndUserWidget_SetNumLoopsToPlayByName::NumLoopsToPlay' has a wrong offset!");

// Function EndGame.EndUserWidget.SetNumLoopsToPlayEx
// 0x0010 (0x0010 - 0x0000)
struct EndUserWidget_SetNumLoopsToPlayEx final
{
public:
	const class UWidgetAnimation*                 InAnimation;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumLoopsToPlay;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndUserWidget_SetNumLoopsToPlayEx) == 0x000008, "Wrong alignment on EndUserWidget_SetNumLoopsToPlayEx");
static_assert(sizeof(EndUserWidget_SetNumLoopsToPlayEx) == 0x000010, "Wrong size on EndUserWidget_SetNumLoopsToPlayEx");
static_assert(offsetof(EndUserWidget_SetNumLoopsToPlayEx, InAnimation) == 0x000000, "Member 'EndUserWidget_SetNumLoopsToPlayEx::InAnimation' has a wrong offset!");
static_assert(offsetof(EndUserWidget_SetNumLoopsToPlayEx, NumLoopsToPlay) == 0x000008, "Member 'EndUserWidget_SetNumLoopsToPlayEx::NumLoopsToPlay' has a wrong offset!");

// Function EndGame.EndUserWidget.SetPlaybackSpeedByName
// 0x000C (0x000C - 0x0000)
struct EndUserWidget_SetPlaybackSpeedByName final
{
public:
	class FName                                   InAnimationName;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlaybackSpeed;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndUserWidget_SetPlaybackSpeedByName) == 0x000004, "Wrong alignment on EndUserWidget_SetPlaybackSpeedByName");
static_assert(sizeof(EndUserWidget_SetPlaybackSpeedByName) == 0x00000C, "Wrong size on EndUserWidget_SetPlaybackSpeedByName");
static_assert(offsetof(EndUserWidget_SetPlaybackSpeedByName, InAnimationName) == 0x000000, "Member 'EndUserWidget_SetPlaybackSpeedByName::InAnimationName' has a wrong offset!");
static_assert(offsetof(EndUserWidget_SetPlaybackSpeedByName, PlaybackSpeed) == 0x000008, "Member 'EndUserWidget_SetPlaybackSpeedByName::PlaybackSpeed' has a wrong offset!");

// Function EndGame.EndUserWidget.SetPlaybackSpeedEx
// 0x0010 (0x0010 - 0x0000)
struct EndUserWidget_SetPlaybackSpeedEx final
{
public:
	const class UWidgetAnimation*                 InAnimation;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlaybackSpeed;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndUserWidget_SetPlaybackSpeedEx) == 0x000008, "Wrong alignment on EndUserWidget_SetPlaybackSpeedEx");
static_assert(sizeof(EndUserWidget_SetPlaybackSpeedEx) == 0x000010, "Wrong size on EndUserWidget_SetPlaybackSpeedEx");
static_assert(offsetof(EndUserWidget_SetPlaybackSpeedEx, InAnimation) == 0x000000, "Member 'EndUserWidget_SetPlaybackSpeedEx::InAnimation' has a wrong offset!");
static_assert(offsetof(EndUserWidget_SetPlaybackSpeedEx, PlaybackSpeed) == 0x000008, "Member 'EndUserWidget_SetPlaybackSpeedEx::PlaybackSpeed' has a wrong offset!");

// Function EndGame.EndUserWidget.SetRotationInScene
// 0x000C (0x000C - 0x0000)
struct EndUserWidget_SetRotationInScene final
{
public:
	struct FRotator                               InRotation;                                        // 0x0000(0x000C)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndUserWidget_SetRotationInScene) == 0x000004, "Wrong alignment on EndUserWidget_SetRotationInScene");
static_assert(sizeof(EndUserWidget_SetRotationInScene) == 0x00000C, "Wrong size on EndUserWidget_SetRotationInScene");
static_assert(offsetof(EndUserWidget_SetRotationInScene, InRotation) == 0x000000, "Member 'EndUserWidget_SetRotationInScene::InRotation' has a wrong offset!");

// Function EndGame.EndUserWidget.StopAnimationByName
// 0x0008 (0x0008 - 0x0000)
struct EndUserWidget_StopAnimationByName final
{
public:
	class FName                                   InAnimationName;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndUserWidget_StopAnimationByName) == 0x000004, "Wrong alignment on EndUserWidget_StopAnimationByName");
static_assert(sizeof(EndUserWidget_StopAnimationByName) == 0x000008, "Wrong size on EndUserWidget_StopAnimationByName");
static_assert(offsetof(EndUserWidget_StopAnimationByName, InAnimationName) == 0x000000, "Member 'EndUserWidget_StopAnimationByName::InAnimationName' has a wrong offset!");

// Function EndGame.EndUserWidget.StopAnimationEx
// 0x0008 (0x0008 - 0x0000)
struct EndUserWidget_StopAnimationEx final
{
public:
	const class UWidgetAnimation*                 InAnimation;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndUserWidget_StopAnimationEx) == 0x000008, "Wrong alignment on EndUserWidget_StopAnimationEx");
static_assert(sizeof(EndUserWidget_StopAnimationEx) == 0x000008, "Wrong size on EndUserWidget_StopAnimationEx");
static_assert(offsetof(EndUserWidget_StopAnimationEx, InAnimation) == 0x000000, "Member 'EndUserWidget_StopAnimationEx::InAnimation' has a wrong offset!");

// Function EndGame.EndUserWidget.GetAnimationCurrentTimeByName
// 0x000C (0x000C - 0x0000)
struct EndUserWidget_GetAnimationCurrentTimeByName final
{
public:
	class FName                                   InAnimationName;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndUserWidget_GetAnimationCurrentTimeByName) == 0x000004, "Wrong alignment on EndUserWidget_GetAnimationCurrentTimeByName");
static_assert(sizeof(EndUserWidget_GetAnimationCurrentTimeByName) == 0x00000C, "Wrong size on EndUserWidget_GetAnimationCurrentTimeByName");
static_assert(offsetof(EndUserWidget_GetAnimationCurrentTimeByName, InAnimationName) == 0x000000, "Member 'EndUserWidget_GetAnimationCurrentTimeByName::InAnimationName' has a wrong offset!");
static_assert(offsetof(EndUserWidget_GetAnimationCurrentTimeByName, ReturnValue) == 0x000008, "Member 'EndUserWidget_GetAnimationCurrentTimeByName::ReturnValue' has a wrong offset!");

// Function EndGame.EndUserWidget.GetAnimationCurrentTimeEx
// 0x0010 (0x0010 - 0x0000)
struct EndUserWidget_GetAnimationCurrentTimeEx final
{
public:
	const class UWidgetAnimation*                 InAnimation;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndUserWidget_GetAnimationCurrentTimeEx) == 0x000008, "Wrong alignment on EndUserWidget_GetAnimationCurrentTimeEx");
static_assert(sizeof(EndUserWidget_GetAnimationCurrentTimeEx) == 0x000010, "Wrong size on EndUserWidget_GetAnimationCurrentTimeEx");
static_assert(offsetof(EndUserWidget_GetAnimationCurrentTimeEx, InAnimation) == 0x000000, "Member 'EndUserWidget_GetAnimationCurrentTimeEx::InAnimation' has a wrong offset!");
static_assert(offsetof(EndUserWidget_GetAnimationCurrentTimeEx, ReturnValue) == 0x000008, "Member 'EndUserWidget_GetAnimationCurrentTimeEx::ReturnValue' has a wrong offset!");

// Function EndGame.EndUserWidget.GetAnimationEndTimeByName
// 0x000C (0x000C - 0x0000)
struct EndUserWidget_GetAnimationEndTimeByName final
{
public:
	class FName                                   InAnimationName;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndUserWidget_GetAnimationEndTimeByName) == 0x000004, "Wrong alignment on EndUserWidget_GetAnimationEndTimeByName");
static_assert(sizeof(EndUserWidget_GetAnimationEndTimeByName) == 0x00000C, "Wrong size on EndUserWidget_GetAnimationEndTimeByName");
static_assert(offsetof(EndUserWidget_GetAnimationEndTimeByName, InAnimationName) == 0x000000, "Member 'EndUserWidget_GetAnimationEndTimeByName::InAnimationName' has a wrong offset!");
static_assert(offsetof(EndUserWidget_GetAnimationEndTimeByName, ReturnValue) == 0x000008, "Member 'EndUserWidget_GetAnimationEndTimeByName::ReturnValue' has a wrong offset!");

// Function EndGame.EndUserWidget.GetAnimationStartTimeByName
// 0x000C (0x000C - 0x0000)
struct EndUserWidget_GetAnimationStartTimeByName final
{
public:
	class FName                                   InAnimationName;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndUserWidget_GetAnimationStartTimeByName) == 0x000004, "Wrong alignment on EndUserWidget_GetAnimationStartTimeByName");
static_assert(sizeof(EndUserWidget_GetAnimationStartTimeByName) == 0x00000C, "Wrong size on EndUserWidget_GetAnimationStartTimeByName");
static_assert(offsetof(EndUserWidget_GetAnimationStartTimeByName, InAnimationName) == 0x000000, "Member 'EndUserWidget_GetAnimationStartTimeByName::InAnimationName' has a wrong offset!");
static_assert(offsetof(EndUserWidget_GetAnimationStartTimeByName, ReturnValue) == 0x000008, "Member 'EndUserWidget_GetAnimationStartTimeByName::ReturnValue' has a wrong offset!");

// Function EndGame.EndUserWidget.GetFocusedChildWidget
// 0x0008 (0x0008 - 0x0000)
struct EndUserWidget_GetFocusedChildWidget final
{
public:
	class UWidget*                                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndUserWidget_GetFocusedChildWidget) == 0x000008, "Wrong alignment on EndUserWidget_GetFocusedChildWidget");
static_assert(sizeof(EndUserWidget_GetFocusedChildWidget) == 0x000008, "Wrong size on EndUserWidget_GetFocusedChildWidget");
static_assert(offsetof(EndUserWidget_GetFocusedChildWidget, ReturnValue) == 0x000000, "Member 'EndUserWidget_GetFocusedChildWidget::ReturnValue' has a wrong offset!");

// Function EndGame.EndUserWidget.GetLocationInScene
// 0x000C (0x000C - 0x0000)
struct EndUserWidget_GetLocationInScene final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndUserWidget_GetLocationInScene) == 0x000004, "Wrong alignment on EndUserWidget_GetLocationInScene");
static_assert(sizeof(EndUserWidget_GetLocationInScene) == 0x00000C, "Wrong size on EndUserWidget_GetLocationInScene");
static_assert(offsetof(EndUserWidget_GetLocationInScene, ReturnValue) == 0x000000, "Member 'EndUserWidget_GetLocationInScene::ReturnValue' has a wrong offset!");

// Function EndGame.EndUserWidget.GetRotationInScene
// 0x000C (0x000C - 0x0000)
struct EndUserWidget_GetRotationInScene final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndUserWidget_GetRotationInScene) == 0x000004, "Wrong alignment on EndUserWidget_GetRotationInScene");
static_assert(sizeof(EndUserWidget_GetRotationInScene) == 0x00000C, "Wrong size on EndUserWidget_GetRotationInScene");
static_assert(offsetof(EndUserWidget_GetRotationInScene, ReturnValue) == 0x000000, "Member 'EndUserWidget_GetRotationInScene::ReturnValue' has a wrong offset!");

// Function EndGame.EndUserWidget.GetZOrderInViewport
// 0x0004 (0x0004 - 0x0000)
struct EndUserWidget_GetZOrderInViewport final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndUserWidget_GetZOrderInViewport) == 0x000004, "Wrong alignment on EndUserWidget_GetZOrderInViewport");
static_assert(sizeof(EndUserWidget_GetZOrderInViewport) == 0x000004, "Wrong size on EndUserWidget_GetZOrderInViewport");
static_assert(offsetof(EndUserWidget_GetZOrderInViewport, ReturnValue) == 0x000000, "Member 'EndUserWidget_GetZOrderInViewport::ReturnValue' has a wrong offset!");

// Function EndGame.EndUserWidget.IsAnimationPlayingByName
// 0x000C (0x000C - 0x0000)
struct EndUserWidget_IsAnimationPlayingByName final
{
public:
	class FName                                   InAnimationName;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndUserWidget_IsAnimationPlayingByName) == 0x000004, "Wrong alignment on EndUserWidget_IsAnimationPlayingByName");
static_assert(sizeof(EndUserWidget_IsAnimationPlayingByName) == 0x00000C, "Wrong size on EndUserWidget_IsAnimationPlayingByName");
static_assert(offsetof(EndUserWidget_IsAnimationPlayingByName, InAnimationName) == 0x000000, "Member 'EndUserWidget_IsAnimationPlayingByName::InAnimationName' has a wrong offset!");
static_assert(offsetof(EndUserWidget_IsAnimationPlayingByName, ReturnValue) == 0x000008, "Member 'EndUserWidget_IsAnimationPlayingByName::ReturnValue' has a wrong offset!");

// Function EndGame.EndUserWidget.IsAnimationPlayingEx
// 0x0010 (0x0010 - 0x0000)
struct EndUserWidget_IsAnimationPlayingEx final
{
public:
	const class UWidgetAnimation*                 InAnimation;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndUserWidget_IsAnimationPlayingEx) == 0x000008, "Wrong alignment on EndUserWidget_IsAnimationPlayingEx");
static_assert(sizeof(EndUserWidget_IsAnimationPlayingEx) == 0x000010, "Wrong size on EndUserWidget_IsAnimationPlayingEx");
static_assert(offsetof(EndUserWidget_IsAnimationPlayingEx, InAnimation) == 0x000000, "Member 'EndUserWidget_IsAnimationPlayingEx::InAnimation' has a wrong offset!");
static_assert(offsetof(EndUserWidget_IsAnimationPlayingEx, ReturnValue) == 0x000008, "Member 'EndUserWidget_IsAnimationPlayingEx::ReturnValue' has a wrong offset!");

// Function EndGame.EndUserWidget.IsAnyAnimationPlayingEx
// 0x0001 (0x0001 - 0x0000)
struct EndUserWidget_IsAnyAnimationPlayingEx final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndUserWidget_IsAnyAnimationPlayingEx) == 0x000001, "Wrong alignment on EndUserWidget_IsAnyAnimationPlayingEx");
static_assert(sizeof(EndUserWidget_IsAnyAnimationPlayingEx) == 0x000001, "Wrong size on EndUserWidget_IsAnyAnimationPlayingEx");
static_assert(offsetof(EndUserWidget_IsAnyAnimationPlayingEx, ReturnValue) == 0x000000, "Member 'EndUserWidget_IsAnyAnimationPlayingEx::ReturnValue' has a wrong offset!");

// Function EndGame.EndUserWidget.IsInViewportEx
// 0x0001 (0x0001 - 0x0000)
struct EndUserWidget_IsInViewportEx final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndUserWidget_IsInViewportEx) == 0x000001, "Wrong alignment on EndUserWidget_IsInViewportEx");
static_assert(sizeof(EndUserWidget_IsInViewportEx) == 0x000001, "Wrong size on EndUserWidget_IsInViewportEx");
static_assert(offsetof(EndUserWidget_IsInViewportEx, ReturnValue) == 0x000000, "Member 'EndUserWidget_IsInViewportEx::ReturnValue' has a wrong offset!");

// Function EndGame.EndUserWidget.IsPlayingAnimationEx
// 0x0001 (0x0001 - 0x0000)
struct EndUserWidget_IsPlayingAnimationEx final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndUserWidget_IsPlayingAnimationEx) == 0x000001, "Wrong alignment on EndUserWidget_IsPlayingAnimationEx");
static_assert(sizeof(EndUserWidget_IsPlayingAnimationEx) == 0x000001, "Wrong size on EndUserWidget_IsPlayingAnimationEx");
static_assert(offsetof(EndUserWidget_IsPlayingAnimationEx, ReturnValue) == 0x000000, "Member 'EndUserWidget_IsPlayingAnimationEx::ReturnValue' has a wrong offset!");

// Function EndGame.EndUserWidget.IsPlayingAnimationIgnoreStopped
// 0x0001 (0x0001 - 0x0000)
struct EndUserWidget_IsPlayingAnimationIgnoreStopped final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndUserWidget_IsPlayingAnimationIgnoreStopped) == 0x000001, "Wrong alignment on EndUserWidget_IsPlayingAnimationIgnoreStopped");
static_assert(sizeof(EndUserWidget_IsPlayingAnimationIgnoreStopped) == 0x000001, "Wrong size on EndUserWidget_IsPlayingAnimationIgnoreStopped");
static_assert(offsetof(EndUserWidget_IsPlayingAnimationIgnoreStopped, ReturnValue) == 0x000000, "Member 'EndUserWidget_IsPlayingAnimationIgnoreStopped::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleDamageSourceComponent.GetDir
// 0x000C (0x000C - 0x0000)
struct EndBattleDamageSourceComponent_GetDir final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleDamageSourceComponent_GetDir) == 0x000004, "Wrong alignment on EndBattleDamageSourceComponent_GetDir");
static_assert(sizeof(EndBattleDamageSourceComponent_GetDir) == 0x00000C, "Wrong size on EndBattleDamageSourceComponent_GetDir");
static_assert(offsetof(EndBattleDamageSourceComponent_GetDir, ReturnValue) == 0x000000, "Member 'EndBattleDamageSourceComponent_GetDir::ReturnValue' has a wrong offset!");

// Function EndGame.EndMainSaveLoadMenu.OnSaveDataPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndMainSaveLoadMenu_OnSaveDataPressedItem final
{
public:
	int32                                         ItemIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainSaveLoadMenu_OnSaveDataPressedItem) == 0x000004, "Wrong alignment on EndMainSaveLoadMenu_OnSaveDataPressedItem");
static_assert(sizeof(EndMainSaveLoadMenu_OnSaveDataPressedItem) == 0x000004, "Wrong size on EndMainSaveLoadMenu_OnSaveDataPressedItem");
static_assert(offsetof(EndMainSaveLoadMenu_OnSaveDataPressedItem, ItemIndex) == 0x000000, "Member 'EndMainSaveLoadMenu_OnSaveDataPressedItem::ItemIndex' has a wrong offset!");

// Function EndGame.EndMainSaveLoadMenu.OnSaveDataSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndMainSaveLoadMenu_OnSaveDataSelectedIndexChanged final
{
public:
	int32                                         ItemIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainSaveLoadMenu_OnSaveDataSelectedIndexChanged) == 0x000004, "Wrong alignment on EndMainSaveLoadMenu_OnSaveDataSelectedIndexChanged");
static_assert(sizeof(EndMainSaveLoadMenu_OnSaveDataSelectedIndexChanged) == 0x000004, "Wrong size on EndMainSaveLoadMenu_OnSaveDataSelectedIndexChanged");
static_assert(offsetof(EndMainSaveLoadMenu_OnSaveDataSelectedIndexChanged, ItemIndex) == 0x000000, "Member 'EndMainSaveLoadMenu_OnSaveDataSelectedIndexChanged::ItemIndex' has a wrong offset!");

// Function EndGame.EndMainSaveLoadMenu.OnSaveDataSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndMainSaveLoadMenu_OnSaveDataSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMainSaveLoadMenu_OnSaveDataSetupItem) == 0x000008, "Wrong alignment on EndMainSaveLoadMenu_OnSaveDataSetupItem");
static_assert(sizeof(EndMainSaveLoadMenu_OnSaveDataSetupItem) == 0x000010, "Wrong size on EndMainSaveLoadMenu_OnSaveDataSetupItem");
static_assert(offsetof(EndMainSaveLoadMenu_OnSaveDataSetupItem, ItemWidget) == 0x000000, "Member 'EndMainSaveLoadMenu_OnSaveDataSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndMainSaveLoadMenu_OnSaveDataSetupItem, ItemIndex) == 0x000008, "Member 'EndMainSaveLoadMenu_OnSaveDataSetupItem::ItemIndex' has a wrong offset!");

// Function EndGame.EndBikeTriggerBoxResetPhysActor.BeginOverlap
// 0x0010 (0x0010 - 0x0000)
struct EndBikeTriggerBoxResetPhysActor_BeginOverlap final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBikeTriggerBoxResetPhysActor_BeginOverlap) == 0x000008, "Wrong alignment on EndBikeTriggerBoxResetPhysActor_BeginOverlap");
static_assert(sizeof(EndBikeTriggerBoxResetPhysActor_BeginOverlap) == 0x000010, "Wrong size on EndBikeTriggerBoxResetPhysActor_BeginOverlap");
static_assert(offsetof(EndBikeTriggerBoxResetPhysActor_BeginOverlap, OverlappedActor) == 0x000000, "Member 'EndBikeTriggerBoxResetPhysActor_BeginOverlap::OverlappedActor' has a wrong offset!");
static_assert(offsetof(EndBikeTriggerBoxResetPhysActor_BeginOverlap, OtherActor) == 0x000008, "Member 'EndBikeTriggerBoxResetPhysActor_BeginOverlap::OtherActor' has a wrong offset!");

// Function EndGame.EndBizarreBugWallActor.Play
// 0x0004 (0x0004 - 0x0000)
struct EndBizarreBugWallActor_Play final
{
public:
	float                                         BlendTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBizarreBugWallActor_Play) == 0x000004, "Wrong alignment on EndBizarreBugWallActor_Play");
static_assert(sizeof(EndBizarreBugWallActor_Play) == 0x000004, "Wrong size on EndBizarreBugWallActor_Play");
static_assert(offsetof(EndBizarreBugWallActor_Play, BlendTime) == 0x000000, "Member 'EndBizarreBugWallActor_Play::BlendTime' has a wrong offset!");

// Function EndGame.EndBizarreBugWallActor.Stop
// 0x0004 (0x0004 - 0x0000)
struct EndBizarreBugWallActor_Stop final
{
public:
	float                                         BlendTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBizarreBugWallActor_Stop) == 0x000004, "Wrong alignment on EndBizarreBugWallActor_Stop");
static_assert(sizeof(EndBizarreBugWallActor_Stop) == 0x000004, "Wrong size on EndBizarreBugWallActor_Stop");
static_assert(offsetof(EndBizarreBugWallActor_Stop, BlendTime) == 0x000000, "Member 'EndBizarreBugWallActor_Stop::BlendTime' has a wrong offset!");

// Function EndGame.EndBattleReportMenu.OnReportMenuSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndBattleReportMenu_OnReportMenuSelectedIndexChanged final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleReportMenu_OnReportMenuSelectedIndexChanged) == 0x000004, "Wrong alignment on EndBattleReportMenu_OnReportMenuSelectedIndexChanged");
static_assert(sizeof(EndBattleReportMenu_OnReportMenuSelectedIndexChanged) == 0x000004, "Wrong size on EndBattleReportMenu_OnReportMenuSelectedIndexChanged");
static_assert(offsetof(EndBattleReportMenu_OnReportMenuSelectedIndexChanged, CellIndex) == 0x000000, "Member 'EndBattleReportMenu_OnReportMenuSelectedIndexChanged::CellIndex' has a wrong offset!");

// Function EndGame.EndBattleReportMenu.OnReportMenuSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndBattleReportMenu_OnReportMenuSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleReportMenu_OnReportMenuSetupItem) == 0x000008, "Wrong alignment on EndBattleReportMenu_OnReportMenuSetupItem");
static_assert(sizeof(EndBattleReportMenu_OnReportMenuSetupItem) == 0x000010, "Wrong size on EndBattleReportMenu_OnReportMenuSetupItem");
static_assert(offsetof(EndBattleReportMenu_OnReportMenuSetupItem, ItemWidget) == 0x000000, "Member 'EndBattleReportMenu_OnReportMenuSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndBattleReportMenu_OnReportMenuSetupItem, CellIndex) == 0x000008, "Member 'EndBattleReportMenu_OnReportMenuSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndBattleReportMenu.OnSortListPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndBattleReportMenu_OnSortListPressedItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleReportMenu_OnSortListPressedItem) == 0x000004, "Wrong alignment on EndBattleReportMenu_OnSortListPressedItem");
static_assert(sizeof(EndBattleReportMenu_OnSortListPressedItem) == 0x000004, "Wrong size on EndBattleReportMenu_OnSortListPressedItem");
static_assert(offsetof(EndBattleReportMenu_OnSortListPressedItem, CellIndex) == 0x000000, "Member 'EndBattleReportMenu_OnSortListPressedItem::CellIndex' has a wrong offset!");

// Function EndGame.EndBattleReportMenu.SetReportBgImage
// 0x0018 (0x0018 - 0x0000)
struct EndBattleReportMenu_SetReportBgImage final
{
public:
	struct FSoftObjectPath                        Path;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleReportMenu_SetReportBgImage) == 0x000008, "Wrong alignment on EndBattleReportMenu_SetReportBgImage");
static_assert(sizeof(EndBattleReportMenu_SetReportBgImage) == 0x000018, "Wrong size on EndBattleReportMenu_SetReportBgImage");
static_assert(offsetof(EndBattleReportMenu_SetReportBgImage, Path) == 0x000000, "Member 'EndBattleReportMenu_SetReportBgImage::Path' has a wrong offset!");

// Function EndGame.EndBattleReportMenu.SetReportImage
// 0x0018 (0x0018 - 0x0000)
struct EndBattleReportMenu_SetReportImage final
{
public:
	struct FSoftObjectPath                        Path;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleReportMenu_SetReportImage) == 0x000008, "Wrong alignment on EndBattleReportMenu_SetReportImage");
static_assert(sizeof(EndBattleReportMenu_SetReportImage) == 0x000018, "Wrong size on EndBattleReportMenu_SetReportImage");
static_assert(offsetof(EndBattleReportMenu_SetReportImage, Path) == 0x000000, "Member 'EndBattleReportMenu_SetReportImage::Path' has a wrong offset!");

// Function EndGame.EndImageSet.SetBlendMode
// 0x0001 (0x0001 - 0x0000)
struct EndImageSet_SetBlendMode final
{
public:
	EBlendMode                                    InBlendMode;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndImageSet_SetBlendMode) == 0x000001, "Wrong alignment on EndImageSet_SetBlendMode");
static_assert(sizeof(EndImageSet_SetBlendMode) == 0x000001, "Wrong size on EndImageSet_SetBlendMode");
static_assert(offsetof(EndImageSet_SetBlendMode, InBlendMode) == 0x000000, "Member 'EndImageSet_SetBlendMode::InBlendMode' has a wrong offset!");

// Function EndGame.EndImageSet.SetColorAndOpacity
// 0x0010 (0x0010 - 0x0000)
struct EndImageSet_SetColorAndOpacity final
{
public:
	struct FLinearColor                           InColorAndOpacity;                                 // 0x0000(0x0010)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndImageSet_SetColorAndOpacity) == 0x000004, "Wrong alignment on EndImageSet_SetColorAndOpacity");
static_assert(sizeof(EndImageSet_SetColorAndOpacity) == 0x000010, "Wrong size on EndImageSet_SetColorAndOpacity");
static_assert(offsetof(EndImageSet_SetColorAndOpacity, InColorAndOpacity) == 0x000000, "Member 'EndImageSet_SetColorAndOpacity::InColorAndOpacity' has a wrong offset!");

// Function EndGame.EndImageSet.SetOpacity
// 0x0004 (0x0004 - 0x0000)
struct EndImageSet_SetOpacity final
{
public:
	float                                         InOpacity;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndImageSet_SetOpacity) == 0x000004, "Wrong alignment on EndImageSet_SetOpacity");
static_assert(sizeof(EndImageSet_SetOpacity) == 0x000004, "Wrong size on EndImageSet_SetOpacity");
static_assert(offsetof(EndImageSet_SetOpacity, InOpacity) == 0x000000, "Member 'EndImageSet_SetOpacity::InOpacity' has a wrong offset!");

// Function EndGame.EndImageSet.SetSelectedIndex
// 0x0004 (0x0004 - 0x0000)
struct EndImageSet_SetSelectedIndex final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndImageSet_SetSelectedIndex) == 0x000004, "Wrong alignment on EndImageSet_SetSelectedIndex");
static_assert(sizeof(EndImageSet_SetSelectedIndex) == 0x000004, "Wrong size on EndImageSet_SetSelectedIndex");
static_assert(offsetof(EndImageSet_SetSelectedIndex, Index_0) == 0x000000, "Member 'EndImageSet_SetSelectedIndex::Index_0' has a wrong offset!");

// Function EndGame.EndImageSet.SetSimpleMode
// 0x0001 (0x0001 - 0x0000)
struct EndImageSet_SetSimpleMode final
{
public:
	bool                                          bInSimpleMode;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndImageSet_SetSimpleMode) == 0x000001, "Wrong alignment on EndImageSet_SetSimpleMode");
static_assert(sizeof(EndImageSet_SetSimpleMode) == 0x000001, "Wrong size on EndImageSet_SetSimpleMode");
static_assert(offsetof(EndImageSet_SetSimpleMode, bInSimpleMode) == 0x000000, "Member 'EndImageSet_SetSimpleMode::bInSimpleMode' has a wrong offset!");

// Function EndGame.EndImageSet.SetSize
// 0x0008 (0x0008 - 0x0000)
struct EndImageSet_SetSize final
{
public:
	struct FVector2D                              InSize;                                            // 0x0000(0x0008)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndImageSet_SetSize) == 0x000004, "Wrong alignment on EndImageSet_SetSize");
static_assert(sizeof(EndImageSet_SetSize) == 0x000008, "Wrong size on EndImageSet_SetSize");
static_assert(offsetof(EndImageSet_SetSize, InSize) == 0x000000, "Member 'EndImageSet_SetSize::InSize' has a wrong offset!");

// Function EndGame.EndBattleEnvQueryContext.GetTargetContexts
// 0x0020 (0x0020 - 0x0000)
struct EndBattleEnvQueryContext_GetTargetContexts final
{
public:
	class UEndEnvQueryComponent*                  InQuery;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InParty;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InDistance;                                        // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AEndCharacter*>                  ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleEnvQueryContext_GetTargetContexts) == 0x000008, "Wrong alignment on EndBattleEnvQueryContext_GetTargetContexts");
static_assert(sizeof(EndBattleEnvQueryContext_GetTargetContexts) == 0x000020, "Wrong size on EndBattleEnvQueryContext_GetTargetContexts");
static_assert(offsetof(EndBattleEnvQueryContext_GetTargetContexts, InQuery) == 0x000000, "Member 'EndBattleEnvQueryContext_GetTargetContexts::InQuery' has a wrong offset!");
static_assert(offsetof(EndBattleEnvQueryContext_GetTargetContexts, InParty) == 0x000008, "Member 'EndBattleEnvQueryContext_GetTargetContexts::InParty' has a wrong offset!");
static_assert(offsetof(EndBattleEnvQueryContext_GetTargetContexts, InDistance) == 0x00000C, "Member 'EndBattleEnvQueryContext_GetTargetContexts::InDistance' has a wrong offset!");
static_assert(offsetof(EndBattleEnvQueryContext_GetTargetContexts, ReturnValue) == 0x000010, "Member 'EndBattleEnvQueryContext_GetTargetContexts::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleEnvQueryContext.GetTargetLocationContexts
// 0x0020 (0x0020 - 0x0000)
struct EndBattleEnvQueryContext_GetTargetLocationContexts final
{
public:
	class UEndEnvQueryComponent*                  InQuery;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InParty;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InDistance;                                        // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleEnvQueryContext_GetTargetLocationContexts) == 0x000008, "Wrong alignment on EndBattleEnvQueryContext_GetTargetLocationContexts");
static_assert(sizeof(EndBattleEnvQueryContext_GetTargetLocationContexts) == 0x000020, "Wrong size on EndBattleEnvQueryContext_GetTargetLocationContexts");
static_assert(offsetof(EndBattleEnvQueryContext_GetTargetLocationContexts, InQuery) == 0x000000, "Member 'EndBattleEnvQueryContext_GetTargetLocationContexts::InQuery' has a wrong offset!");
static_assert(offsetof(EndBattleEnvQueryContext_GetTargetLocationContexts, InParty) == 0x000008, "Member 'EndBattleEnvQueryContext_GetTargetLocationContexts::InParty' has a wrong offset!");
static_assert(offsetof(EndBattleEnvQueryContext_GetTargetLocationContexts, InDistance) == 0x00000C, "Member 'EndBattleEnvQueryContext_GetTargetLocationContexts::InDistance' has a wrong offset!");
static_assert(offsetof(EndBattleEnvQueryContext_GetTargetLocationContexts, ReturnValue) == 0x000010, "Member 'EndBattleEnvQueryContext_GetTargetLocationContexts::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleEnvQueryContext.ProvideActorsSet
// 0x0020 (0x0020 - 0x0000)
struct EndBattleEnvQueryContext_ProvideActorsSet final
{
public:
	class UObject*                                QuerierObject;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 QuerierActor;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         ResultingActorsSet;                                // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleEnvQueryContext_ProvideActorsSet) == 0x000008, "Wrong alignment on EndBattleEnvQueryContext_ProvideActorsSet");
static_assert(sizeof(EndBattleEnvQueryContext_ProvideActorsSet) == 0x000020, "Wrong size on EndBattleEnvQueryContext_ProvideActorsSet");
static_assert(offsetof(EndBattleEnvQueryContext_ProvideActorsSet, QuerierObject) == 0x000000, "Member 'EndBattleEnvQueryContext_ProvideActorsSet::QuerierObject' has a wrong offset!");
static_assert(offsetof(EndBattleEnvQueryContext_ProvideActorsSet, QuerierActor) == 0x000008, "Member 'EndBattleEnvQueryContext_ProvideActorsSet::QuerierActor' has a wrong offset!");
static_assert(offsetof(EndBattleEnvQueryContext_ProvideActorsSet, ResultingActorsSet) == 0x000010, "Member 'EndBattleEnvQueryContext_ProvideActorsSet::ResultingActorsSet' has a wrong offset!");

// Function EndGame.EndBattleEnvQueryContext.ProvideLocationsSet
// 0x0020 (0x0020 - 0x0000)
struct EndBattleEnvQueryContext_ProvideLocationsSet final
{
public:
	class UObject*                                QuerierObject;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 QuerierActor;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        ResultingLocationSet;                              // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleEnvQueryContext_ProvideLocationsSet) == 0x000008, "Wrong alignment on EndBattleEnvQueryContext_ProvideLocationsSet");
static_assert(sizeof(EndBattleEnvQueryContext_ProvideLocationsSet) == 0x000020, "Wrong size on EndBattleEnvQueryContext_ProvideLocationsSet");
static_assert(offsetof(EndBattleEnvQueryContext_ProvideLocationsSet, QuerierObject) == 0x000000, "Member 'EndBattleEnvQueryContext_ProvideLocationsSet::QuerierObject' has a wrong offset!");
static_assert(offsetof(EndBattleEnvQueryContext_ProvideLocationsSet, QuerierActor) == 0x000008, "Member 'EndBattleEnvQueryContext_ProvideLocationsSet::QuerierActor' has a wrong offset!");
static_assert(offsetof(EndBattleEnvQueryContext_ProvideLocationsSet, ResultingLocationSet) == 0x000010, "Member 'EndBattleEnvQueryContext_ProvideLocationsSet::ResultingLocationSet' has a wrong offset!");

// Function EndGame.EndStringListBox.SetDesiredCount
// 0x0004 (0x0004 - 0x0000)
struct EndStringListBox_SetDesiredCount final
{
public:
	int32                                         InDesiredCount;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndStringListBox_SetDesiredCount) == 0x000004, "Wrong alignment on EndStringListBox_SetDesiredCount");
static_assert(sizeof(EndStringListBox_SetDesiredCount) == 0x000004, "Wrong size on EndStringListBox_SetDesiredCount");
static_assert(offsetof(EndStringListBox_SetDesiredCount, InDesiredCount) == 0x000000, "Member 'EndStringListBox_SetDesiredCount::InDesiredCount' has a wrong offset!");

// Function EndGame.EndStringListBox.SetItems
// 0x0010 (0x0010 - 0x0000)
struct EndStringListBox_SetItems final
{
public:
	TArray<class FString>                         InItems;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndStringListBox_SetItems) == 0x000008, "Wrong alignment on EndStringListBox_SetItems");
static_assert(sizeof(EndStringListBox_SetItems) == 0x000010, "Wrong size on EndStringListBox_SetItems");
static_assert(offsetof(EndStringListBox_SetItems, InItems) == 0x000000, "Member 'EndStringListBox_SetItems::InItems' has a wrong offset!");

// Function EndGame.EndStringListBox.GetSelectedIndex
// 0x0008 (0x0008 - 0x0000)
struct EndStringListBox_GetSelectedIndex final
{
public:
	int32                                         UserIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndStringListBox_GetSelectedIndex) == 0x000004, "Wrong alignment on EndStringListBox_GetSelectedIndex");
static_assert(sizeof(EndStringListBox_GetSelectedIndex) == 0x000008, "Wrong size on EndStringListBox_GetSelectedIndex");
static_assert(offsetof(EndStringListBox_GetSelectedIndex, UserIndex) == 0x000000, "Member 'EndStringListBox_GetSelectedIndex::UserIndex' has a wrong offset!");
static_assert(offsetof(EndStringListBox_GetSelectedIndex, ReturnValue) == 0x000004, "Member 'EndStringListBox_GetSelectedIndex::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIController.ActivatePhysicalConstraint
// 0x0004 (0x0004 - 0x0000)
struct EndAIController_ActivatePhysicalConstraint final
{
public:
	float                                         BlendTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIController_ActivatePhysicalConstraint) == 0x000004, "Wrong alignment on EndAIController_ActivatePhysicalConstraint");
static_assert(sizeof(EndAIController_ActivatePhysicalConstraint) == 0x000004, "Wrong size on EndAIController_ActivatePhysicalConstraint");
static_assert(offsetof(EndAIController_ActivatePhysicalConstraint, BlendTime) == 0x000000, "Member 'EndAIController_ActivatePhysicalConstraint::BlendTime' has a wrong offset!");

// Function EndGame.EndAIController.ActivateResidentBlendMotion
// 0x000C (0x000C - 0x0000)
struct EndAIController_ActivateResidentBlendMotion final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendTime;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIController_ActivateResidentBlendMotion) == 0x000004, "Wrong alignment on EndAIController_ActivateResidentBlendMotion");
static_assert(sizeof(EndAIController_ActivateResidentBlendMotion) == 0x00000C, "Wrong size on EndAIController_ActivateResidentBlendMotion");
static_assert(offsetof(EndAIController_ActivateResidentBlendMotion, Key) == 0x000000, "Member 'EndAIController_ActivateResidentBlendMotion::Key' has a wrong offset!");
static_assert(offsetof(EndAIController_ActivateResidentBlendMotion, BlendTime) == 0x000008, "Member 'EndAIController_ActivateResidentBlendMotion::BlendTime' has a wrong offset!");

// Function EndGame.EndAIController.CorrectRotate
// 0x0004 (0x0004 - 0x0000)
struct EndAIController_CorrectRotate final
{
public:
	float                                         correctTime;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIController_CorrectRotate) == 0x000004, "Wrong alignment on EndAIController_CorrectRotate");
static_assert(sizeof(EndAIController_CorrectRotate) == 0x000004, "Wrong size on EndAIController_CorrectRotate");
static_assert(offsetof(EndAIController_CorrectRotate, correctTime) == 0x000000, "Member 'EndAIController_CorrectRotate::correctTime' has a wrong offset!");

// Function EndGame.EndAIController.DeactivatePhysicalConstraint
// 0x0004 (0x0004 - 0x0000)
struct EndAIController_DeactivatePhysicalConstraint final
{
public:
	float                                         BlendTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIController_DeactivatePhysicalConstraint) == 0x000004, "Wrong alignment on EndAIController_DeactivatePhysicalConstraint");
static_assert(sizeof(EndAIController_DeactivatePhysicalConstraint) == 0x000004, "Wrong size on EndAIController_DeactivatePhysicalConstraint");
static_assert(offsetof(EndAIController_DeactivatePhysicalConstraint, BlendTime) == 0x000000, "Member 'EndAIController_DeactivatePhysicalConstraint::BlendTime' has a wrong offset!");

// Function EndGame.EndAIController.DeactivateResidentBlendMotion
// 0x000C (0x000C - 0x0000)
struct EndAIController_DeactivateResidentBlendMotion final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendTime;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIController_DeactivateResidentBlendMotion) == 0x000004, "Wrong alignment on EndAIController_DeactivateResidentBlendMotion");
static_assert(sizeof(EndAIController_DeactivateResidentBlendMotion) == 0x00000C, "Wrong size on EndAIController_DeactivateResidentBlendMotion");
static_assert(offsetof(EndAIController_DeactivateResidentBlendMotion, Key) == 0x000000, "Member 'EndAIController_DeactivateResidentBlendMotion::Key' has a wrong offset!");
static_assert(offsetof(EndAIController_DeactivateResidentBlendMotion, BlendTime) == 0x000008, "Member 'EndAIController_DeactivateResidentBlendMotion::BlendTime' has a wrong offset!");

// Function EndGame.EndAIController.GetAIFlag
// 0x0002 (0x0002 - 0x0000)
struct EndAIController_GetAIFlag final
{
public:
	EAIInfoFlag                                   InType;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIController_GetAIFlag) == 0x000001, "Wrong alignment on EndAIController_GetAIFlag");
static_assert(sizeof(EndAIController_GetAIFlag) == 0x000002, "Wrong size on EndAIController_GetAIFlag");
static_assert(offsetof(EndAIController_GetAIFlag, InType) == 0x000000, "Member 'EndAIController_GetAIFlag::InType' has a wrong offset!");
static_assert(offsetof(EndAIController_GetAIFlag, ReturnValue) == 0x000001, "Member 'EndAIController_GetAIFlag::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIController.GetAIParam
// 0x0008 (0x0008 - 0x0000)
struct EndAIController_GetAIParam final
{
public:
	EAIInfoParam                                  InType;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIController_GetAIParam) == 0x000004, "Wrong alignment on EndAIController_GetAIParam");
static_assert(sizeof(EndAIController_GetAIParam) == 0x000008, "Wrong size on EndAIController_GetAIParam");
static_assert(offsetof(EndAIController_GetAIParam, InType) == 0x000000, "Member 'EndAIController_GetAIParam::InType' has a wrong offset!");
static_assert(offsetof(EndAIController_GetAIParam, ReturnValue) == 0x000004, "Member 'EndAIController_GetAIParam::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIController.GetCharacterLocation
// 0x000C (0x000C - 0x0000)
struct EndAIController_GetCharacterLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIController_GetCharacterLocation) == 0x000004, "Wrong alignment on EndAIController_GetCharacterLocation");
static_assert(sizeof(EndAIController_GetCharacterLocation) == 0x00000C, "Wrong size on EndAIController_GetCharacterLocation");
static_assert(offsetof(EndAIController_GetCharacterLocation, ReturnValue) == 0x000000, "Member 'EndAIController_GetCharacterLocation::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIController.GetCharacterRootLocation
// 0x000C (0x000C - 0x0000)
struct EndAIController_GetCharacterRootLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIController_GetCharacterRootLocation) == 0x000004, "Wrong alignment on EndAIController_GetCharacterRootLocation");
static_assert(sizeof(EndAIController_GetCharacterRootLocation) == 0x00000C, "Wrong size on EndAIController_GetCharacterRootLocation");
static_assert(offsetof(EndAIController_GetCharacterRootLocation, ReturnValue) == 0x000000, "Member 'EndAIController_GetCharacterRootLocation::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIController.GetCharacterRotation
// 0x000C (0x000C - 0x0000)
struct EndAIController_GetCharacterRotation final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIController_GetCharacterRotation) == 0x000004, "Wrong alignment on EndAIController_GetCharacterRotation");
static_assert(sizeof(EndAIController_GetCharacterRotation) == 0x00000C, "Wrong size on EndAIController_GetCharacterRotation");
static_assert(offsetof(EndAIController_GetCharacterRotation, ReturnValue) == 0x000000, "Member 'EndAIController_GetCharacterRotation::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIController.GetLocationAngle
// 0x0020 (0x0020 - 0x0000)
struct EndAIController_GetLocationAngle final
{
public:
	struct FVector                                Loc;                                               // 0x0000(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AEndCharacter*                          Target;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndAIController_GetLocationAngle) == 0x000008, "Wrong alignment on EndAIController_GetLocationAngle");
static_assert(sizeof(EndAIController_GetLocationAngle) == 0x000020, "Wrong size on EndAIController_GetLocationAngle");
static_assert(offsetof(EndAIController_GetLocationAngle, Loc) == 0x000000, "Member 'EndAIController_GetLocationAngle::Loc' has a wrong offset!");
static_assert(offsetof(EndAIController_GetLocationAngle, Target) == 0x000010, "Member 'EndAIController_GetLocationAngle::Target' has a wrong offset!");
static_assert(offsetof(EndAIController_GetLocationAngle, ReturnValue) == 0x000018, "Member 'EndAIController_GetLocationAngle::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIController.GetLocationAngleAbs
// 0x0020 (0x0020 - 0x0000)
struct EndAIController_GetLocationAngleAbs final
{
public:
	struct FVector                                Loc;                                               // 0x0000(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AEndCharacter*                          Target;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndAIController_GetLocationAngleAbs) == 0x000008, "Wrong alignment on EndAIController_GetLocationAngleAbs");
static_assert(sizeof(EndAIController_GetLocationAngleAbs) == 0x000020, "Wrong size on EndAIController_GetLocationAngleAbs");
static_assert(offsetof(EndAIController_GetLocationAngleAbs, Loc) == 0x000000, "Member 'EndAIController_GetLocationAngleAbs::Loc' has a wrong offset!");
static_assert(offsetof(EndAIController_GetLocationAngleAbs, Target) == 0x000010, "Member 'EndAIController_GetLocationAngleAbs::Target' has a wrong offset!");
static_assert(offsetof(EndAIController_GetLocationAngleAbs, ReturnValue) == 0x000018, "Member 'EndAIController_GetLocationAngleAbs::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIController.IsAerial
// 0x0001 (0x0001 - 0x0000)
struct EndAIController_IsAerial final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIController_IsAerial) == 0x000001, "Wrong alignment on EndAIController_IsAerial");
static_assert(sizeof(EndAIController_IsAerial) == 0x000001, "Wrong size on EndAIController_IsAerial");
static_assert(offsetof(EndAIController_IsAerial, ReturnValue) == 0x000000, "Member 'EndAIController_IsAerial::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIController.IsJumping
// 0x0001 (0x0001 - 0x0000)
struct EndAIController_IsJumping final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIController_IsJumping) == 0x000001, "Wrong alignment on EndAIController_IsJumping");
static_assert(sizeof(EndAIController_IsJumping) == 0x000001, "Wrong size on EndAIController_IsJumping");
static_assert(offsetof(EndAIController_IsJumping, ReturnValue) == 0x000000, "Member 'EndAIController_IsJumping::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIController.IsLatestOtherPathBoader
// 0x0002 (0x0002 - 0x0000)
struct EndAIController_IsLatestOtherPathBoader final
{
public:
	bool                                          ContainSemi;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIController_IsLatestOtherPathBoader) == 0x000001, "Wrong alignment on EndAIController_IsLatestOtherPathBoader");
static_assert(sizeof(EndAIController_IsLatestOtherPathBoader) == 0x000002, "Wrong size on EndAIController_IsLatestOtherPathBoader");
static_assert(offsetof(EndAIController_IsLatestOtherPathBoader, ContainSemi) == 0x000000, "Member 'EndAIController_IsLatestOtherPathBoader::ContainSemi' has a wrong offset!");
static_assert(offsetof(EndAIController_IsLatestOtherPathBoader, ReturnValue) == 0x000001, "Member 'EndAIController_IsLatestOtherPathBoader::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIController.IsMoveModeMigration
// 0x0001 (0x0001 - 0x0000)
struct EndAIController_IsMoveModeMigration final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIController_IsMoveModeMigration) == 0x000001, "Wrong alignment on EndAIController_IsMoveModeMigration");
static_assert(sizeof(EndAIController_IsMoveModeMigration) == 0x000001, "Wrong size on EndAIController_IsMoveModeMigration");
static_assert(offsetof(EndAIController_IsMoveModeMigration, ReturnValue) == 0x000000, "Member 'EndAIController_IsMoveModeMigration::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIController.IsValidAerialPoint
// 0x0010 (0x0010 - 0x0000)
struct EndAIController_IsValidAerialPoint final
{
public:
	struct FVector                                InLocation;                                        // 0x0000(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndAIController_IsValidAerialPoint) == 0x000004, "Wrong alignment on EndAIController_IsValidAerialPoint");
static_assert(sizeof(EndAIController_IsValidAerialPoint) == 0x000010, "Wrong size on EndAIController_IsValidAerialPoint");
static_assert(offsetof(EndAIController_IsValidAerialPoint, InLocation) == 0x000000, "Member 'EndAIController_IsValidAerialPoint::InLocation' has a wrong offset!");
static_assert(offsetof(EndAIController_IsValidAerialPoint, ReturnValue) == 0x00000C, "Member 'EndAIController_IsValidAerialPoint::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIController.MoveToGround
// 0x0010 (0x0010 - 0x0000)
struct EndAIController_MoveToGround final
{
public:
	float                                         MoveTime;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         groundTime;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         groundOffsetZ;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          checkNavArea;                                      // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndAIController_MoveToGround) == 0x000004, "Wrong alignment on EndAIController_MoveToGround");
static_assert(sizeof(EndAIController_MoveToGround) == 0x000010, "Wrong size on EndAIController_MoveToGround");
static_assert(offsetof(EndAIController_MoveToGround, MoveTime) == 0x000000, "Member 'EndAIController_MoveToGround::MoveTime' has a wrong offset!");
static_assert(offsetof(EndAIController_MoveToGround, groundTime) == 0x000004, "Member 'EndAIController_MoveToGround::groundTime' has a wrong offset!");
static_assert(offsetof(EndAIController_MoveToGround, groundOffsetZ) == 0x000008, "Member 'EndAIController_MoveToGround::groundOffsetZ' has a wrong offset!");
static_assert(offsetof(EndAIController_MoveToGround, checkNavArea) == 0x00000C, "Member 'EndAIController_MoveToGround::checkNavArea' has a wrong offset!");

// Function EndGame.EndAIController.MoveToGroundByGravity
// 0x0018 (0x0018 - 0x0000)
struct EndAIController_MoveToGroundByGravity final
{
public:
	EMoveToGroundHeightType                       heightType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         specifiedHeight;                                   // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         groundOffsetZ;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GravityScale;                                      // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxVelocity;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          checkNavArea;                                      // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndAIController_MoveToGroundByGravity) == 0x000004, "Wrong alignment on EndAIController_MoveToGroundByGravity");
static_assert(sizeof(EndAIController_MoveToGroundByGravity) == 0x000018, "Wrong size on EndAIController_MoveToGroundByGravity");
static_assert(offsetof(EndAIController_MoveToGroundByGravity, heightType) == 0x000000, "Member 'EndAIController_MoveToGroundByGravity::heightType' has a wrong offset!");
static_assert(offsetof(EndAIController_MoveToGroundByGravity, specifiedHeight) == 0x000004, "Member 'EndAIController_MoveToGroundByGravity::specifiedHeight' has a wrong offset!");
static_assert(offsetof(EndAIController_MoveToGroundByGravity, groundOffsetZ) == 0x000008, "Member 'EndAIController_MoveToGroundByGravity::groundOffsetZ' has a wrong offset!");
static_assert(offsetof(EndAIController_MoveToGroundByGravity, GravityScale) == 0x00000C, "Member 'EndAIController_MoveToGroundByGravity::GravityScale' has a wrong offset!");
static_assert(offsetof(EndAIController_MoveToGroundByGravity, MaxVelocity) == 0x000010, "Member 'EndAIController_MoveToGroundByGravity::MaxVelocity' has a wrong offset!");
static_assert(offsetof(EndAIController_MoveToGroundByGravity, checkNavArea) == 0x000014, "Member 'EndAIController_MoveToGroundByGravity::checkNavArea' has a wrong offset!");

// Function EndGame.EndAIController.OverwriteGraviticJumpLandingLocation
// 0x001C (0x001C - 0x0000)
struct EndAIController_OverwriteGraviticJumpLandingLocation final
{
public:
	struct FVector                                overwriteLocation;                                 // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                overwriteLookAt;                                   // 0x000C(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndAIController_OverwriteGraviticJumpLandingLocation) == 0x000004, "Wrong alignment on EndAIController_OverwriteGraviticJumpLandingLocation");
static_assert(sizeof(EndAIController_OverwriteGraviticJumpLandingLocation) == 0x00001C, "Wrong size on EndAIController_OverwriteGraviticJumpLandingLocation");
static_assert(offsetof(EndAIController_OverwriteGraviticJumpLandingLocation, overwriteLocation) == 0x000000, "Member 'EndAIController_OverwriteGraviticJumpLandingLocation::overwriteLocation' has a wrong offset!");
static_assert(offsetof(EndAIController_OverwriteGraviticJumpLandingLocation, overwriteLookAt) == 0x00000C, "Member 'EndAIController_OverwriteGraviticJumpLandingLocation::overwriteLookAt' has a wrong offset!");
static_assert(offsetof(EndAIController_OverwriteGraviticJumpLandingLocation, ReturnValue) == 0x000018, "Member 'EndAIController_OverwriteGraviticJumpLandingLocation::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIController.OverwriteGraviticJumpLandingLocationAndForward
// 0x001C (0x001C - 0x0000)
struct EndAIController_OverwriteGraviticJumpLandingLocationAndForward final
{
public:
	struct FVector                                overwriteLocation;                                 // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                overwriteForward;                                  // 0x000C(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndAIController_OverwriteGraviticJumpLandingLocationAndForward) == 0x000004, "Wrong alignment on EndAIController_OverwriteGraviticJumpLandingLocationAndForward");
static_assert(sizeof(EndAIController_OverwriteGraviticJumpLandingLocationAndForward) == 0x00001C, "Wrong size on EndAIController_OverwriteGraviticJumpLandingLocationAndForward");
static_assert(offsetof(EndAIController_OverwriteGraviticJumpLandingLocationAndForward, overwriteLocation) == 0x000000, "Member 'EndAIController_OverwriteGraviticJumpLandingLocationAndForward::overwriteLocation' has a wrong offset!");
static_assert(offsetof(EndAIController_OverwriteGraviticJumpLandingLocationAndForward, overwriteForward) == 0x00000C, "Member 'EndAIController_OverwriteGraviticJumpLandingLocationAndForward::overwriteForward' has a wrong offset!");
static_assert(offsetof(EndAIController_OverwriteGraviticJumpLandingLocationAndForward, ReturnValue) == 0x000018, "Member 'EndAIController_OverwriteGraviticJumpLandingLocationAndForward::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIController.SaveVelocity
// 0x0004 (0x0004 - 0x0000)
struct EndAIController_SaveVelocity final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIController_SaveVelocity) == 0x000004, "Wrong alignment on EndAIController_SaveVelocity");
static_assert(sizeof(EndAIController_SaveVelocity) == 0x000004, "Wrong size on EndAIController_SaveVelocity");
static_assert(offsetof(EndAIController_SaveVelocity, DeltaTime) == 0x000000, "Member 'EndAIController_SaveVelocity::DeltaTime' has a wrong offset!");

// Function EndGame.EndAIController.SetAerialFixTurn
// 0x000C (0x000C - 0x0000)
struct EndAIController_SetAerialFixTurn final
{
public:
	bool                                          InFix;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InAngle;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InLeapSpeed;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIController_SetAerialFixTurn) == 0x000004, "Wrong alignment on EndAIController_SetAerialFixTurn");
static_assert(sizeof(EndAIController_SetAerialFixTurn) == 0x00000C, "Wrong size on EndAIController_SetAerialFixTurn");
static_assert(offsetof(EndAIController_SetAerialFixTurn, InFix) == 0x000000, "Member 'EndAIController_SetAerialFixTurn::InFix' has a wrong offset!");
static_assert(offsetof(EndAIController_SetAerialFixTurn, InAngle) == 0x000004, "Member 'EndAIController_SetAerialFixTurn::InAngle' has a wrong offset!");
static_assert(offsetof(EndAIController_SetAerialFixTurn, InLeapSpeed) == 0x000008, "Member 'EndAIController_SetAerialFixTurn::InLeapSpeed' has a wrong offset!");

// Function EndGame.EndAIController.SetAIFlag
// 0x0002 (0x0002 - 0x0000)
struct EndAIController_SetAIFlag final
{
public:
	EAIInfoFlag                                   InType;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InFlag;                                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIController_SetAIFlag) == 0x000001, "Wrong alignment on EndAIController_SetAIFlag");
static_assert(sizeof(EndAIController_SetAIFlag) == 0x000002, "Wrong size on EndAIController_SetAIFlag");
static_assert(offsetof(EndAIController_SetAIFlag, InType) == 0x000000, "Member 'EndAIController_SetAIFlag::InType' has a wrong offset!");
static_assert(offsetof(EndAIController_SetAIFlag, InFlag) == 0x000001, "Member 'EndAIController_SetAIFlag::InFlag' has a wrong offset!");

// Function EndGame.EndAIController.SetAIFlagFromOther
// 0x0002 (0x0002 - 0x0000)
struct EndAIController_SetAIFlagFromOther final
{
public:
	EAIInfoFlag                                   InType;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InFlag;                                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIController_SetAIFlagFromOther) == 0x000001, "Wrong alignment on EndAIController_SetAIFlagFromOther");
static_assert(sizeof(EndAIController_SetAIFlagFromOther) == 0x000002, "Wrong size on EndAIController_SetAIFlagFromOther");
static_assert(offsetof(EndAIController_SetAIFlagFromOther, InType) == 0x000000, "Member 'EndAIController_SetAIFlagFromOther::InType' has a wrong offset!");
static_assert(offsetof(EndAIController_SetAIFlagFromOther, InFlag) == 0x000001, "Member 'EndAIController_SetAIFlagFromOther::InFlag' has a wrong offset!");

// Function EndGame.EndAIController.SetAIParam
// 0x0008 (0x0008 - 0x0000)
struct EndAIController_SetAIParam final
{
public:
	EAIInfoParam                                  InType;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InParam;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIController_SetAIParam) == 0x000004, "Wrong alignment on EndAIController_SetAIParam");
static_assert(sizeof(EndAIController_SetAIParam) == 0x000008, "Wrong size on EndAIController_SetAIParam");
static_assert(offsetof(EndAIController_SetAIParam, InType) == 0x000000, "Member 'EndAIController_SetAIParam::InType' has a wrong offset!");
static_assert(offsetof(EndAIController_SetAIParam, InParam) == 0x000004, "Member 'EndAIController_SetAIParam::InParam' has a wrong offset!");

// Function EndGame.EndAIController.SetCharacterLocation
// 0x000C (0x000C - 0x0000)
struct EndAIController_SetCharacterLocation final
{
public:
	struct FVector                                InLocation;                                        // 0x0000(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIController_SetCharacterLocation) == 0x000004, "Wrong alignment on EndAIController_SetCharacterLocation");
static_assert(sizeof(EndAIController_SetCharacterLocation) == 0x00000C, "Wrong size on EndAIController_SetCharacterLocation");
static_assert(offsetof(EndAIController_SetCharacterLocation, InLocation) == 0x000000, "Member 'EndAIController_SetCharacterLocation::InLocation' has a wrong offset!");

// Function EndGame.EndAIController.SetCharacterRotation
// 0x000C (0x000C - 0x0000)
struct EndAIController_SetCharacterRotation final
{
public:
	struct FRotator                               InRotation;                                        // 0x0000(0x000C)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIController_SetCharacterRotation) == 0x000004, "Wrong alignment on EndAIController_SetCharacterRotation");
static_assert(sizeof(EndAIController_SetCharacterRotation) == 0x00000C, "Wrong size on EndAIController_SetCharacterRotation");
static_assert(offsetof(EndAIController_SetCharacterRotation, InRotation) == 0x000000, "Member 'EndAIController_SetCharacterRotation::InRotation' has a wrong offset!");

// Function EndGame.EndAIController.SetForceAerialTurn
// 0x0001 (0x0001 - 0x0000)
struct EndAIController_SetForceAerialTurn final
{
public:
	bool                                          InForce;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIController_SetForceAerialTurn) == 0x000001, "Wrong alignment on EndAIController_SetForceAerialTurn");
static_assert(sizeof(EndAIController_SetForceAerialTurn) == 0x000001, "Wrong size on EndAIController_SetForceAerialTurn");
static_assert(offsetof(EndAIController_SetForceAerialTurn, InForce) == 0x000000, "Member 'EndAIController_SetForceAerialTurn::InForce' has a wrong offset!");

// Function EndGame.EndAIController.SetMoveMode
// 0x0002 (0x0002 - 0x0000)
struct EndAIController_SetMoveMode final
{
public:
	EEndAiMoveMode                                InType;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Skip;                                              // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIController_SetMoveMode) == 0x000001, "Wrong alignment on EndAIController_SetMoveMode");
static_assert(sizeof(EndAIController_SetMoveMode) == 0x000002, "Wrong size on EndAIController_SetMoveMode");
static_assert(offsetof(EndAIController_SetMoveMode, InType) == 0x000000, "Member 'EndAIController_SetMoveMode::InType' has a wrong offset!");
static_assert(offsetof(EndAIController_SetMoveMode, Skip) == 0x000001, "Member 'EndAIController_SetMoveMode::Skip' has a wrong offset!");

// Function EndGame.EndAIController.SetNextJumpMotion
// 0x0018 (0x0018 - 0x0000)
struct EndAIController_SetNextJumpMotion final
{
public:
	class FName                                   Begin;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Loop;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   End;                                               // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIController_SetNextJumpMotion) == 0x000004, "Wrong alignment on EndAIController_SetNextJumpMotion");
static_assert(sizeof(EndAIController_SetNextJumpMotion) == 0x000018, "Wrong size on EndAIController_SetNextJumpMotion");
static_assert(offsetof(EndAIController_SetNextJumpMotion, Begin) == 0x000000, "Member 'EndAIController_SetNextJumpMotion::Begin' has a wrong offset!");
static_assert(offsetof(EndAIController_SetNextJumpMotion, Loop) == 0x000008, "Member 'EndAIController_SetNextJumpMotion::Loop' has a wrong offset!");
static_assert(offsetof(EndAIController_SetNextJumpMotion, End) == 0x000010, "Member 'EndAIController_SetNextJumpMotion::End' has a wrong offset!");

// Function EndGame.EndAIController.SetNextJumpWallCollision
// 0x0001 (0x0001 - 0x0000)
struct EndAIController_SetNextJumpWallCollision final
{
public:
	bool                                          bHit;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIController_SetNextJumpWallCollision) == 0x000001, "Wrong alignment on EndAIController_SetNextJumpWallCollision");
static_assert(sizeof(EndAIController_SetNextJumpWallCollision) == 0x000001, "Wrong size on EndAIController_SetNextJumpWallCollision");
static_assert(offsetof(EndAIController_SetNextJumpWallCollision, bHit) == 0x000000, "Member 'EndAIController_SetNextJumpWallCollision::bHit' has a wrong offset!");

// Function EndGame.EndAIController.SetOverrideAerialHeight
// 0x0008 (0x0008 - 0x0000)
struct EndAIController_SetOverrideAerialHeight final
{
public:
	bool                                          InOverride;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InHeight;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIController_SetOverrideAerialHeight) == 0x000004, "Wrong alignment on EndAIController_SetOverrideAerialHeight");
static_assert(sizeof(EndAIController_SetOverrideAerialHeight) == 0x000008, "Wrong size on EndAIController_SetOverrideAerialHeight");
static_assert(offsetof(EndAIController_SetOverrideAerialHeight, InOverride) == 0x000000, "Member 'EndAIController_SetOverrideAerialHeight::InOverride' has a wrong offset!");
static_assert(offsetof(EndAIController_SetOverrideAerialHeight, InHeight) == 0x000004, "Member 'EndAIController_SetOverrideAerialHeight::InHeight' has a wrong offset!");

// Function EndGame.EndAIController.SetOverrideJumpBias
// 0x0008 (0x0008 - 0x0000)
struct EndAIController_SetOverrideJumpBias final
{
public:
	bool                                          InOverride;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InBias;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIController_SetOverrideJumpBias) == 0x000004, "Wrong alignment on EndAIController_SetOverrideJumpBias");
static_assert(sizeof(EndAIController_SetOverrideJumpBias) == 0x000008, "Wrong size on EndAIController_SetOverrideJumpBias");
static_assert(offsetof(EndAIController_SetOverrideJumpBias, InOverride) == 0x000000, "Member 'EndAIController_SetOverrideJumpBias::InOverride' has a wrong offset!");
static_assert(offsetof(EndAIController_SetOverrideJumpBias, InBias) == 0x000004, "Member 'EndAIController_SetOverrideJumpBias::InBias' has a wrong offset!");

// Function EndGame.EndAIController.SetOverrideJumpTime
// 0x0008 (0x0008 - 0x0000)
struct EndAIController_SetOverrideJumpTime final
{
public:
	bool                                          InOverride;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InTime;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIController_SetOverrideJumpTime) == 0x000004, "Wrong alignment on EndAIController_SetOverrideJumpTime");
static_assert(sizeof(EndAIController_SetOverrideJumpTime) == 0x000008, "Wrong size on EndAIController_SetOverrideJumpTime");
static_assert(offsetof(EndAIController_SetOverrideJumpTime, InOverride) == 0x000000, "Member 'EndAIController_SetOverrideJumpTime::InOverride' has a wrong offset!");
static_assert(offsetof(EndAIController_SetOverrideJumpTime, InTime) == 0x000004, "Member 'EndAIController_SetOverrideJumpTime::InTime' has a wrong offset!");

// Function EndGame.EndAIController.SetOverrideNextJumpForward
// 0x0010 (0x0010 - 0x0000)
struct EndAIController_SetOverrideNextJumpForward final
{
public:
	bool                                          InOverride;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                InForward;                                         // 0x0004(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIController_SetOverrideNextJumpForward) == 0x000004, "Wrong alignment on EndAIController_SetOverrideNextJumpForward");
static_assert(sizeof(EndAIController_SetOverrideNextJumpForward) == 0x000010, "Wrong size on EndAIController_SetOverrideNextJumpForward");
static_assert(offsetof(EndAIController_SetOverrideNextJumpForward, InOverride) == 0x000000, "Member 'EndAIController_SetOverrideNextJumpForward::InOverride' has a wrong offset!");
static_assert(offsetof(EndAIController_SetOverrideNextJumpForward, InForward) == 0x000004, "Member 'EndAIController_SetOverrideNextJumpForward::InForward' has a wrong offset!");

// Function EndGame.EndAIController.SetOverrideTurn
// 0x0008 (0x0008 - 0x0000)
struct EndAIController_SetOverrideTurn final
{
public:
	bool                                          InOverride;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InAngle;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIController_SetOverrideTurn) == 0x000004, "Wrong alignment on EndAIController_SetOverrideTurn");
static_assert(sizeof(EndAIController_SetOverrideTurn) == 0x000008, "Wrong size on EndAIController_SetOverrideTurn");
static_assert(offsetof(EndAIController_SetOverrideTurn, InOverride) == 0x000000, "Member 'EndAIController_SetOverrideTurn::InOverride' has a wrong offset!");
static_assert(offsetof(EndAIController_SetOverrideTurn, InAngle) == 0x000004, "Member 'EndAIController_SetOverrideTurn::InAngle' has a wrong offset!");

// Function EndGame.EndAIController.SetPrimaryAnimPack
// 0x0008 (0x0008 - 0x0000)
struct EndAIController_SetPrimaryAnimPack final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIController_SetPrimaryAnimPack) == 0x000004, "Wrong alignment on EndAIController_SetPrimaryAnimPack");
static_assert(sizeof(EndAIController_SetPrimaryAnimPack) == 0x000008, "Wrong size on EndAIController_SetPrimaryAnimPack");
static_assert(offsetof(EndAIController_SetPrimaryAnimPack, InName) == 0x000000, "Member 'EndAIController_SetPrimaryAnimPack::InName' has a wrong offset!");

// Function EndGame.EndAIController.ToEndJump
// 0x0002 (0x0002 - 0x0000)
struct EndAIController_ToEndJump final
{
public:
	bool                                          InTrace;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsTraceStartMaxHeightOwn;                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIController_ToEndJump) == 0x000001, "Wrong alignment on EndAIController_ToEndJump");
static_assert(sizeof(EndAIController_ToEndJump) == 0x000002, "Wrong size on EndAIController_ToEndJump");
static_assert(offsetof(EndAIController_ToEndJump, InTrace) == 0x000000, "Member 'EndAIController_ToEndJump::InTrace' has a wrong offset!");
static_assert(offsetof(EndAIController_ToEndJump, IsTraceStartMaxHeightOwn) == 0x000001, "Member 'EndAIController_ToEndJump::IsTraceStartMaxHeightOwn' has a wrong offset!");

// Function EndGame.EndAIController.ToGraviticJump
// 0x0034 (0x0034 - 0x0000)
struct EndAIController_ToGraviticJump final
{
public:
	struct FVector                                landingLocation;                                   // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Height;                                            // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PeakBias;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         turningDuration;                                   // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                UpVector;                                          // 0x0018(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                forwardVector;                                     // 0x0024(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bToTerrain;                                        // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndAIController_ToGraviticJump) == 0x000004, "Wrong alignment on EndAIController_ToGraviticJump");
static_assert(sizeof(EndAIController_ToGraviticJump) == 0x000034, "Wrong size on EndAIController_ToGraviticJump");
static_assert(offsetof(EndAIController_ToGraviticJump, landingLocation) == 0x000000, "Member 'EndAIController_ToGraviticJump::landingLocation' has a wrong offset!");
static_assert(offsetof(EndAIController_ToGraviticJump, Height) == 0x00000C, "Member 'EndAIController_ToGraviticJump::Height' has a wrong offset!");
static_assert(offsetof(EndAIController_ToGraviticJump, PeakBias) == 0x000010, "Member 'EndAIController_ToGraviticJump::PeakBias' has a wrong offset!");
static_assert(offsetof(EndAIController_ToGraviticJump, turningDuration) == 0x000014, "Member 'EndAIController_ToGraviticJump::turningDuration' has a wrong offset!");
static_assert(offsetof(EndAIController_ToGraviticJump, UpVector) == 0x000018, "Member 'EndAIController_ToGraviticJump::UpVector' has a wrong offset!");
static_assert(offsetof(EndAIController_ToGraviticJump, forwardVector) == 0x000024, "Member 'EndAIController_ToGraviticJump::forwardVector' has a wrong offset!");
static_assert(offsetof(EndAIController_ToGraviticJump, bToTerrain) == 0x000030, "Member 'EndAIController_ToGraviticJump::bToTerrain' has a wrong offset!");

// Function EndGame.EndAIController.ToGraviticLookAtJump
// 0x0028 (0x0028 - 0x0000)
struct EndAIController_ToGraviticLookAtJump final
{
public:
	struct FVector                                landingLocation;                                   // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Height;                                            // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PeakBias;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         turningDuration;                                   // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                lookAt;                                            // 0x0018(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bToTerrain;                                        // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndAIController_ToGraviticLookAtJump) == 0x000004, "Wrong alignment on EndAIController_ToGraviticLookAtJump");
static_assert(sizeof(EndAIController_ToGraviticLookAtJump) == 0x000028, "Wrong size on EndAIController_ToGraviticLookAtJump");
static_assert(offsetof(EndAIController_ToGraviticLookAtJump, landingLocation) == 0x000000, "Member 'EndAIController_ToGraviticLookAtJump::landingLocation' has a wrong offset!");
static_assert(offsetof(EndAIController_ToGraviticLookAtJump, Height) == 0x00000C, "Member 'EndAIController_ToGraviticLookAtJump::Height' has a wrong offset!");
static_assert(offsetof(EndAIController_ToGraviticLookAtJump, PeakBias) == 0x000010, "Member 'EndAIController_ToGraviticLookAtJump::PeakBias' has a wrong offset!");
static_assert(offsetof(EndAIController_ToGraviticLookAtJump, turningDuration) == 0x000014, "Member 'EndAIController_ToGraviticLookAtJump::turningDuration' has a wrong offset!");
static_assert(offsetof(EndAIController_ToGraviticLookAtJump, lookAt) == 0x000018, "Member 'EndAIController_ToGraviticLookAtJump::lookAt' has a wrong offset!");
static_assert(offsetof(EndAIController_ToGraviticLookAtJump, bToTerrain) == 0x000024, "Member 'EndAIController_ToGraviticLookAtJump::bToTerrain' has a wrong offset!");

// Function EndGame.EndAIController.ToJump
// 0x0001 (0x0001 - 0x0000)
struct EndAIController_ToJump final
{
public:
	bool                                          bToTerrain;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIController_ToJump) == 0x000001, "Wrong alignment on EndAIController_ToJump");
static_assert(sizeof(EndAIController_ToJump) == 0x000001, "Wrong size on EndAIController_ToJump");
static_assert(offsetof(EndAIController_ToJump, bToTerrain) == 0x000000, "Member 'EndAIController_ToJump::bToTerrain' has a wrong offset!");

// Function EndGame.EndAIController.ToJumpFromName
// 0x000C (0x000C - 0x0000)
struct EndAIController_ToJumpFromName final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bToTerrain;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndAIController_ToJumpFromName) == 0x000004, "Wrong alignment on EndAIController_ToJumpFromName");
static_assert(sizeof(EndAIController_ToJumpFromName) == 0x00000C, "Wrong size on EndAIController_ToJumpFromName");
static_assert(offsetof(EndAIController_ToJumpFromName, InName) == 0x000000, "Member 'EndAIController_ToJumpFromName::InName' has a wrong offset!");
static_assert(offsetof(EndAIController_ToJumpFromName, bToTerrain) == 0x000008, "Member 'EndAIController_ToJumpFromName::bToTerrain' has a wrong offset!");

// Function EndGame.EndAIController.ToJumpFromNav
// 0x0010 (0x0010 - 0x0000)
struct EndAIController_ToJumpFromNav final
{
public:
	class AEndNavModifierVolume*                  InNav;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bToTerrain;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndAIController_ToJumpFromNav) == 0x000008, "Wrong alignment on EndAIController_ToJumpFromNav");
static_assert(sizeof(EndAIController_ToJumpFromNav) == 0x000010, "Wrong size on EndAIController_ToJumpFromNav");
static_assert(offsetof(EndAIController_ToJumpFromNav, InNav) == 0x000000, "Member 'EndAIController_ToJumpFromNav::InNav' has a wrong offset!");
static_assert(offsetof(EndAIController_ToJumpFromNav, bToTerrain) == 0x000008, "Member 'EndAIController_ToJumpFromNav::bToTerrain' has a wrong offset!");

// Function EndGame.EndAIController.ToJumpLocation
// 0x0020 (0x0020 - 0x0000)
struct EndAIController_ToJumpLocation final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRotateYaw;                                        // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                lookAt;                                            // 0x0010(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bToTerrain;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLocationShift;                                    // 0x001D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndAIController_ToJumpLocation) == 0x000004, "Wrong alignment on EndAIController_ToJumpLocation");
static_assert(sizeof(EndAIController_ToJumpLocation) == 0x000020, "Wrong size on EndAIController_ToJumpLocation");
static_assert(offsetof(EndAIController_ToJumpLocation, Location) == 0x000000, "Member 'EndAIController_ToJumpLocation::Location' has a wrong offset!");
static_assert(offsetof(EndAIController_ToJumpLocation, bRotateYaw) == 0x00000C, "Member 'EndAIController_ToJumpLocation::bRotateYaw' has a wrong offset!");
static_assert(offsetof(EndAIController_ToJumpLocation, lookAt) == 0x000010, "Member 'EndAIController_ToJumpLocation::lookAt' has a wrong offset!");
static_assert(offsetof(EndAIController_ToJumpLocation, bToTerrain) == 0x00001C, "Member 'EndAIController_ToJumpLocation::bToTerrain' has a wrong offset!");
static_assert(offsetof(EndAIController_ToJumpLocation, bLocationShift) == 0x00001D, "Member 'EndAIController_ToJumpLocation::bLocationShift' has a wrong offset!");

// Function EndGame.EndAIController.GetLatestMoveMode
// 0x0001 (0x0001 - 0x0000)
struct EndAIController_GetLatestMoveMode final
{
public:
	EEndAiMoveMode                                ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIController_GetLatestMoveMode) == 0x000001, "Wrong alignment on EndAIController_GetLatestMoveMode");
static_assert(sizeof(EndAIController_GetLatestMoveMode) == 0x000001, "Wrong size on EndAIController_GetLatestMoveMode");
static_assert(offsetof(EndAIController_GetLatestMoveMode, ReturnValue) == 0x000000, "Member 'EndAIController_GetLatestMoveMode::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIController.GetMoveMode
// 0x0001 (0x0001 - 0x0000)
struct EndAIController_GetMoveMode final
{
public:
	EEndAiMoveMode                                ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIController_GetMoveMode) == 0x000001, "Wrong alignment on EndAIController_GetMoveMode");
static_assert(sizeof(EndAIController_GetMoveMode) == 0x000001, "Wrong size on EndAIController_GetMoveMode");
static_assert(offsetof(EndAIController_GetMoveMode, ReturnValue) == 0x000000, "Member 'EndAIController_GetMoveMode::ReturnValue' has a wrong offset!");

// Function EndGame.EndAIController.IsMoveMode
// 0x0002 (0x0002 - 0x0000)
struct EndAIController_IsMoveMode final
{
public:
	EEndAiMoveMode                                InType;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAIController_IsMoveMode) == 0x000001, "Wrong alignment on EndAIController_IsMoveMode");
static_assert(sizeof(EndAIController_IsMoveMode) == 0x000002, "Wrong size on EndAIController_IsMoveMode");
static_assert(offsetof(EndAIController_IsMoveMode, InType) == 0x000000, "Member 'EndAIController_IsMoveMode::InType' has a wrong offset!");
static_assert(offsetof(EndAIController_IsMoveMode, ReturnValue) == 0x000001, "Member 'EndAIController_IsMoveMode::ReturnValue' has a wrong offset!");

// Function EndGame.EndBorder.GetDynamicMaterial
// 0x0008 (0x0008 - 0x0000)
struct EndBorder_GetDynamicMaterial final
{
public:
	class UMaterialInstanceDynamic*               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBorder_GetDynamicMaterial) == 0x000008, "Wrong alignment on EndBorder_GetDynamicMaterial");
static_assert(sizeof(EndBorder_GetDynamicMaterial) == 0x000008, "Wrong size on EndBorder_GetDynamicMaterial");
static_assert(offsetof(EndBorder_GetDynamicMaterial, ReturnValue) == 0x000000, "Member 'EndBorder_GetDynamicMaterial::ReturnValue' has a wrong offset!");

// Function EndGame.EndBorder.SetBrush
// 0x0078 (0x0078 - 0x0000)
struct EndBorder_SetBrush final
{
public:
	struct FSlateBrush                            InBrush;                                           // 0x0000(0x0078)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBorder_SetBrush) == 0x000008, "Wrong alignment on EndBorder_SetBrush");
static_assert(sizeof(EndBorder_SetBrush) == 0x000078, "Wrong size on EndBorder_SetBrush");
static_assert(offsetof(EndBorder_SetBrush, InBrush) == 0x000000, "Member 'EndBorder_SetBrush::InBrush' has a wrong offset!");

// Function EndGame.EndBorder.SetBrushColor
// 0x0010 (0x0010 - 0x0000)
struct EndBorder_SetBrushColor final
{
public:
	struct FLinearColor                           InBrushColor;                                      // 0x0000(0x0010)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBorder_SetBrushColor) == 0x000004, "Wrong alignment on EndBorder_SetBrushColor");
static_assert(sizeof(EndBorder_SetBrushColor) == 0x000010, "Wrong size on EndBorder_SetBrushColor");
static_assert(offsetof(EndBorder_SetBrushColor, InBrushColor) == 0x000000, "Member 'EndBorder_SetBrushColor::InBrushColor' has a wrong offset!");

// Function EndGame.EndBorder.SetBrushFromAsset
// 0x0008 (0x0008 - 0x0000)
struct EndBorder_SetBrushFromAsset final
{
public:
	class USlateBrushAsset*                       Asset;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBorder_SetBrushFromAsset) == 0x000008, "Wrong alignment on EndBorder_SetBrushFromAsset");
static_assert(sizeof(EndBorder_SetBrushFromAsset) == 0x000008, "Wrong size on EndBorder_SetBrushFromAsset");
static_assert(offsetof(EndBorder_SetBrushFromAsset, Asset) == 0x000000, "Member 'EndBorder_SetBrushFromAsset::Asset' has a wrong offset!");

// Function EndGame.EndBorder.SetBrushFromMaterial
// 0x0008 (0x0008 - 0x0000)
struct EndBorder_SetBrushFromMaterial final
{
public:
	class UMaterialInterface*                     Material;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBorder_SetBrushFromMaterial) == 0x000008, "Wrong alignment on EndBorder_SetBrushFromMaterial");
static_assert(sizeof(EndBorder_SetBrushFromMaterial) == 0x000008, "Wrong size on EndBorder_SetBrushFromMaterial");
static_assert(offsetof(EndBorder_SetBrushFromMaterial, Material) == 0x000000, "Member 'EndBorder_SetBrushFromMaterial::Material' has a wrong offset!");

// Function EndGame.EndBorder.SetBrushFromTexture
// 0x0008 (0x0008 - 0x0000)
struct EndBorder_SetBrushFromTexture final
{
public:
	class UTexture2D*                             Texture;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBorder_SetBrushFromTexture) == 0x000008, "Wrong alignment on EndBorder_SetBrushFromTexture");
static_assert(sizeof(EndBorder_SetBrushFromTexture) == 0x000008, "Wrong size on EndBorder_SetBrushFromTexture");
static_assert(offsetof(EndBorder_SetBrushFromTexture, Texture) == 0x000000, "Member 'EndBorder_SetBrushFromTexture::Texture' has a wrong offset!");

// Function EndGame.EndBorder.SetContentColorAndOpacity
// 0x0010 (0x0010 - 0x0000)
struct EndBorder_SetContentColorAndOpacity final
{
public:
	struct FLinearColor                           InContentColorAndOpacity;                          // 0x0000(0x0010)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBorder_SetContentColorAndOpacity) == 0x000004, "Wrong alignment on EndBorder_SetContentColorAndOpacity");
static_assert(sizeof(EndBorder_SetContentColorAndOpacity) == 0x000010, "Wrong size on EndBorder_SetContentColorAndOpacity");
static_assert(offsetof(EndBorder_SetContentColorAndOpacity, InContentColorAndOpacity) == 0x000000, "Member 'EndBorder_SetContentColorAndOpacity::InContentColorAndOpacity' has a wrong offset!");

// Function EndGame.EndBorder.SetDesiredSizeScale
// 0x0008 (0x0008 - 0x0000)
struct EndBorder_SetDesiredSizeScale final
{
public:
	struct FVector2D                              InScale;                                           // 0x0000(0x0008)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBorder_SetDesiredSizeScale) == 0x000004, "Wrong alignment on EndBorder_SetDesiredSizeScale");
static_assert(sizeof(EndBorder_SetDesiredSizeScale) == 0x000008, "Wrong size on EndBorder_SetDesiredSizeScale");
static_assert(offsetof(EndBorder_SetDesiredSizeScale, InScale) == 0x000000, "Member 'EndBorder_SetDesiredSizeScale::InScale' has a wrong offset!");

// Function EndGame.EndBorder.SetHorizontalAlignment
// 0x0001 (0x0001 - 0x0000)
struct EndBorder_SetHorizontalAlignment final
{
public:
	EHorizontalAlignment                          InHorizontalAlignment;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBorder_SetHorizontalAlignment) == 0x000001, "Wrong alignment on EndBorder_SetHorizontalAlignment");
static_assert(sizeof(EndBorder_SetHorizontalAlignment) == 0x000001, "Wrong size on EndBorder_SetHorizontalAlignment");
static_assert(offsetof(EndBorder_SetHorizontalAlignment, InHorizontalAlignment) == 0x000000, "Member 'EndBorder_SetHorizontalAlignment::InHorizontalAlignment' has a wrong offset!");

// Function EndGame.EndBorder.SetPadding
// 0x0010 (0x0010 - 0x0000)
struct EndBorder_SetPadding final
{
public:
	struct FMargin                                InPadding;                                         // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBorder_SetPadding) == 0x000004, "Wrong alignment on EndBorder_SetPadding");
static_assert(sizeof(EndBorder_SetPadding) == 0x000010, "Wrong size on EndBorder_SetPadding");
static_assert(offsetof(EndBorder_SetPadding, InPadding) == 0x000000, "Member 'EndBorder_SetPadding::InPadding' has a wrong offset!");

// Function EndGame.EndBorder.SetVerticalAlignment
// 0x0001 (0x0001 - 0x0000)
struct EndBorder_SetVerticalAlignment final
{
public:
	EVerticalAlignment                            InVerticalAlignment;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBorder_SetVerticalAlignment) == 0x000001, "Wrong alignment on EndBorder_SetVerticalAlignment");
static_assert(sizeof(EndBorder_SetVerticalAlignment) == 0x000001, "Wrong size on EndBorder_SetVerticalAlignment");
static_assert(offsetof(EndBorder_SetVerticalAlignment, InVerticalAlignment) == 0x000000, "Member 'EndBorder_SetVerticalAlignment::InVerticalAlignment' has a wrong offset!");

// Function EndGame.EndCharacter.DisableRagdollPhysics
// 0x0008 (0x0008 - 0x0000)
struct EndCharacter_DisableRagdollPhysics final
{
public:
	float                                         FadeOutTime;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCenterActorToHip;                                 // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bResetRelativeTransform;                           // 0x0005(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndCharacter_DisableRagdollPhysics) == 0x000004, "Wrong alignment on EndCharacter_DisableRagdollPhysics");
static_assert(sizeof(EndCharacter_DisableRagdollPhysics) == 0x000008, "Wrong size on EndCharacter_DisableRagdollPhysics");
static_assert(offsetof(EndCharacter_DisableRagdollPhysics, FadeOutTime) == 0x000000, "Member 'EndCharacter_DisableRagdollPhysics::FadeOutTime' has a wrong offset!");
static_assert(offsetof(EndCharacter_DisableRagdollPhysics, bCenterActorToHip) == 0x000004, "Member 'EndCharacter_DisableRagdollPhysics::bCenterActorToHip' has a wrong offset!");
static_assert(offsetof(EndCharacter_DisableRagdollPhysics, bResetRelativeTransform) == 0x000005, "Member 'EndCharacter_DisableRagdollPhysics::bResetRelativeTransform' has a wrong offset!");

// Function EndGame.EndCharacter.EnableRagdollPhysics
// 0x0002 (0x0002 - 0x0000)
struct EndCharacter_EnableRagdollPhysics final
{
public:
	bool                                          bDisableMovement;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceDisableBodyDriver;                           // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCharacter_EnableRagdollPhysics) == 0x000001, "Wrong alignment on EndCharacter_EnableRagdollPhysics");
static_assert(sizeof(EndCharacter_EnableRagdollPhysics) == 0x000002, "Wrong size on EndCharacter_EnableRagdollPhysics");
static_assert(offsetof(EndCharacter_EnableRagdollPhysics, bDisableMovement) == 0x000000, "Member 'EndCharacter_EnableRagdollPhysics::bDisableMovement' has a wrong offset!");
static_assert(offsetof(EndCharacter_EnableRagdollPhysics, bForceDisableBodyDriver) == 0x000001, "Member 'EndCharacter_EnableRagdollPhysics::bForceDisableBodyDriver' has a wrong offset!");

// Function EndGame.EndCharacter.GetEQSComponent
// 0x0008 (0x0008 - 0x0000)
struct EndCharacter_GetEQSComponent final
{
public:
	class UEndEnvQueryComponent*                  ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCharacter_GetEQSComponent) == 0x000008, "Wrong alignment on EndCharacter_GetEQSComponent");
static_assert(sizeof(EndCharacter_GetEQSComponent) == 0x000008, "Wrong size on EndCharacter_GetEQSComponent");
static_assert(offsetof(EndCharacter_GetEQSComponent, ReturnValue) == 0x000000, "Member 'EndCharacter_GetEQSComponent::ReturnValue' has a wrong offset!");

// Function EndGame.EndCharacter.GetFeetLocation
// 0x000C (0x000C - 0x0000)
struct EndCharacter_GetFeetLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCharacter_GetFeetLocation) == 0x000004, "Wrong alignment on EndCharacter_GetFeetLocation");
static_assert(sizeof(EndCharacter_GetFeetLocation) == 0x00000C, "Wrong size on EndCharacter_GetFeetLocation");
static_assert(offsetof(EndCharacter_GetFeetLocation, ReturnValue) == 0x000000, "Member 'EndCharacter_GetFeetLocation::ReturnValue' has a wrong offset!");

// Function EndGame.EndCharacter.GetPointDirectionFromOwnPosture
// 0x0018 (0x0018 - 0x0000)
struct EndCharacter_GetPointDirectionFromOwnPosture final
{
public:
	struct FVector                                InLocation;                                        // 0x0000(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x000C(0x000C)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCharacter_GetPointDirectionFromOwnPosture) == 0x000004, "Wrong alignment on EndCharacter_GetPointDirectionFromOwnPosture");
static_assert(sizeof(EndCharacter_GetPointDirectionFromOwnPosture) == 0x000018, "Wrong size on EndCharacter_GetPointDirectionFromOwnPosture");
static_assert(offsetof(EndCharacter_GetPointDirectionFromOwnPosture, InLocation) == 0x000000, "Member 'EndCharacter_GetPointDirectionFromOwnPosture::InLocation' has a wrong offset!");
static_assert(offsetof(EndCharacter_GetPointDirectionFromOwnPosture, ReturnValue) == 0x00000C, "Member 'EndCharacter_GetPointDirectionFromOwnPosture::ReturnValue' has a wrong offset!");

// Function EndGame.EndCharacter.GetPointRotationFromOwnPosture
// 0x0018 (0x0018 - 0x0000)
struct EndCharacter_GetPointRotationFromOwnPosture final
{
public:
	struct FVector                                InLocation;                                        // 0x0000(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               ReturnValue;                                       // 0x000C(0x000C)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCharacter_GetPointRotationFromOwnPosture) == 0x000004, "Wrong alignment on EndCharacter_GetPointRotationFromOwnPosture");
static_assert(sizeof(EndCharacter_GetPointRotationFromOwnPosture) == 0x000018, "Wrong size on EndCharacter_GetPointRotationFromOwnPosture");
static_assert(offsetof(EndCharacter_GetPointRotationFromOwnPosture, InLocation) == 0x000000, "Member 'EndCharacter_GetPointRotationFromOwnPosture::InLocation' has a wrong offset!");
static_assert(offsetof(EndCharacter_GetPointRotationFromOwnPosture, ReturnValue) == 0x00000C, "Member 'EndCharacter_GetPointRotationFromOwnPosture::ReturnValue' has a wrong offset!");

// Function EndGame.EndCharacter.OnBeginCutSceneToBP
// 0x0010 (0x0010 - 0x0000)
struct EndCharacter_OnBeginCutSceneToBP final
{
public:
	class FName                                   CutsceneID;                                        // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         animBlendTime;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ikBlendTime;                                       // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCharacter_OnBeginCutSceneToBP) == 0x000004, "Wrong alignment on EndCharacter_OnBeginCutSceneToBP");
static_assert(sizeof(EndCharacter_OnBeginCutSceneToBP) == 0x000010, "Wrong size on EndCharacter_OnBeginCutSceneToBP");
static_assert(offsetof(EndCharacter_OnBeginCutSceneToBP, CutsceneID) == 0x000000, "Member 'EndCharacter_OnBeginCutSceneToBP::CutsceneID' has a wrong offset!");
static_assert(offsetof(EndCharacter_OnBeginCutSceneToBP, animBlendTime) == 0x000008, "Member 'EndCharacter_OnBeginCutSceneToBP::animBlendTime' has a wrong offset!");
static_assert(offsetof(EndCharacter_OnBeginCutSceneToBP, ikBlendTime) == 0x00000C, "Member 'EndCharacter_OnBeginCutSceneToBP::ikBlendTime' has a wrong offset!");

// Function EndGame.EndCharacter.OnEndCutSceneToBP
// 0x0010 (0x0010 - 0x0000)
struct EndCharacter_OnEndCutSceneToBP final
{
public:
	class FName                                   CutsceneID;                                        // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         animBlendTime;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ikBlendTime;                                       // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCharacter_OnEndCutSceneToBP) == 0x000004, "Wrong alignment on EndCharacter_OnEndCutSceneToBP");
static_assert(sizeof(EndCharacter_OnEndCutSceneToBP) == 0x000010, "Wrong size on EndCharacter_OnEndCutSceneToBP");
static_assert(offsetof(EndCharacter_OnEndCutSceneToBP, CutsceneID) == 0x000000, "Member 'EndCharacter_OnEndCutSceneToBP::CutsceneID' has a wrong offset!");
static_assert(offsetof(EndCharacter_OnEndCutSceneToBP, animBlendTime) == 0x000008, "Member 'EndCharacter_OnEndCutSceneToBP::animBlendTime' has a wrong offset!");
static_assert(offsetof(EndCharacter_OnEndCutSceneToBP, ikBlendTime) == 0x00000C, "Member 'EndCharacter_OnEndCutSceneToBP::ikBlendTime' has a wrong offset!");

// Function EndGame.EndCharacter.OnShowBreakMesh
// 0x0008 (0x0008 - 0x0000)
struct EndCharacter_OnShowBreakMesh final
{
public:
	class FName                                   meshName;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCharacter_OnShowBreakMesh) == 0x000004, "Wrong alignment on EndCharacter_OnShowBreakMesh");
static_assert(sizeof(EndCharacter_OnShowBreakMesh) == 0x000008, "Wrong size on EndCharacter_OnShowBreakMesh");
static_assert(offsetof(EndCharacter_OnShowBreakMesh, meshName) == 0x000000, "Member 'EndCharacter_OnShowBreakMesh::meshName' has a wrong offset!");

// Function EndGame.EndCharacter.PlayEmissiveColorAnimation
// 0x0028 (0x0028 - 0x0000)
struct EndCharacter_PlayEmissiveColorAnimation final
{
public:
	class FName                                   RequestID;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ColorPaletteId;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndEmissiveModifierType                      ModifierType;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndEmissiveCurveType                         CurveType;                                         // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLoop;                                             // 0x0012(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13[0x1];                                       // 0x0013(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Duration;                                          // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendInTime;                                       // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendOutTime;                                      // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartOffset;                                       // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndOffset;                                         // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCharacter_PlayEmissiveColorAnimation) == 0x000004, "Wrong alignment on EndCharacter_PlayEmissiveColorAnimation");
static_assert(sizeof(EndCharacter_PlayEmissiveColorAnimation) == 0x000028, "Wrong size on EndCharacter_PlayEmissiveColorAnimation");
static_assert(offsetof(EndCharacter_PlayEmissiveColorAnimation, RequestID) == 0x000000, "Member 'EndCharacter_PlayEmissiveColorAnimation::RequestID' has a wrong offset!");
static_assert(offsetof(EndCharacter_PlayEmissiveColorAnimation, ColorPaletteId) == 0x000008, "Member 'EndCharacter_PlayEmissiveColorAnimation::ColorPaletteId' has a wrong offset!");
static_assert(offsetof(EndCharacter_PlayEmissiveColorAnimation, ModifierType) == 0x000010, "Member 'EndCharacter_PlayEmissiveColorAnimation::ModifierType' has a wrong offset!");
static_assert(offsetof(EndCharacter_PlayEmissiveColorAnimation, CurveType) == 0x000011, "Member 'EndCharacter_PlayEmissiveColorAnimation::CurveType' has a wrong offset!");
static_assert(offsetof(EndCharacter_PlayEmissiveColorAnimation, bLoop) == 0x000012, "Member 'EndCharacter_PlayEmissiveColorAnimation::bLoop' has a wrong offset!");
static_assert(offsetof(EndCharacter_PlayEmissiveColorAnimation, Duration) == 0x000014, "Member 'EndCharacter_PlayEmissiveColorAnimation::Duration' has a wrong offset!");
static_assert(offsetof(EndCharacter_PlayEmissiveColorAnimation, BlendInTime) == 0x000018, "Member 'EndCharacter_PlayEmissiveColorAnimation::BlendInTime' has a wrong offset!");
static_assert(offsetof(EndCharacter_PlayEmissiveColorAnimation, BlendOutTime) == 0x00001C, "Member 'EndCharacter_PlayEmissiveColorAnimation::BlendOutTime' has a wrong offset!");
static_assert(offsetof(EndCharacter_PlayEmissiveColorAnimation, StartOffset) == 0x000020, "Member 'EndCharacter_PlayEmissiveColorAnimation::StartOffset' has a wrong offset!");
static_assert(offsetof(EndCharacter_PlayEmissiveColorAnimation, EndOffset) == 0x000024, "Member 'EndCharacter_PlayEmissiveColorAnimation::EndOffset' has a wrong offset!");

// Function EndGame.EndCharacter.SetChildMesh
// 0x0010 (0x0010 - 0x0000)
struct EndCharacter_SetChildMesh final
{
public:
	class FName                                   meshName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Label;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCharacter_SetChildMesh) == 0x000004, "Wrong alignment on EndCharacter_SetChildMesh");
static_assert(sizeof(EndCharacter_SetChildMesh) == 0x000010, "Wrong size on EndCharacter_SetChildMesh");
static_assert(offsetof(EndCharacter_SetChildMesh, meshName) == 0x000000, "Member 'EndCharacter_SetChildMesh::meshName' has a wrong offset!");
static_assert(offsetof(EndCharacter_SetChildMesh, Label) == 0x000008, "Member 'EndCharacter_SetChildMesh::Label' has a wrong offset!");

// Function EndGame.EndCharacter.SetDirectEmissiveColor
// 0x000C (0x000C - 0x0000)
struct EndCharacter_SetDirectEmissiveColor final
{
public:
	class FName                                   ColorPaletteId;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IntensityBias;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCharacter_SetDirectEmissiveColor) == 0x000004, "Wrong alignment on EndCharacter_SetDirectEmissiveColor");
static_assert(sizeof(EndCharacter_SetDirectEmissiveColor) == 0x00000C, "Wrong size on EndCharacter_SetDirectEmissiveColor");
static_assert(offsetof(EndCharacter_SetDirectEmissiveColor, ColorPaletteId) == 0x000000, "Member 'EndCharacter_SetDirectEmissiveColor::ColorPaletteId' has a wrong offset!");
static_assert(offsetof(EndCharacter_SetDirectEmissiveColor, IntensityBias) == 0x000008, "Member 'EndCharacter_SetDirectEmissiveColor::IntensityBias' has a wrong offset!");

// Function EndGame.EndCharacter.SetIgnoreRagdollPhysics
// 0x0001 (0x0001 - 0x0000)
struct EndCharacter_SetIgnoreRagdollPhysics final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCharacter_SetIgnoreRagdollPhysics) == 0x000001, "Wrong alignment on EndCharacter_SetIgnoreRagdollPhysics");
static_assert(sizeof(EndCharacter_SetIgnoreRagdollPhysics) == 0x000001, "Wrong size on EndCharacter_SetIgnoreRagdollPhysics");
static_assert(offsetof(EndCharacter_SetIgnoreRagdollPhysics, Value) == 0x000000, "Member 'EndCharacter_SetIgnoreRagdollPhysics::Value' has a wrong offset!");

// Function EndGame.EndCharacter.StopEmissiveColorAnimation
// 0x0008 (0x0008 - 0x0000)
struct EndCharacter_StopEmissiveColorAnimation final
{
public:
	class FName                                   RequestID;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCharacter_StopEmissiveColorAnimation) == 0x000004, "Wrong alignment on EndCharacter_StopEmissiveColorAnimation");
static_assert(sizeof(EndCharacter_StopEmissiveColorAnimation) == 0x000008, "Wrong size on EndCharacter_StopEmissiveColorAnimation");
static_assert(offsetof(EndCharacter_StopEmissiveColorAnimation, RequestID) == 0x000000, "Member 'EndCharacter_StopEmissiveColorAnimation::RequestID' has a wrong offset!");

// Function EndGame.EndCharacter.UseHookShotSimple
// 0x0018 (0x0018 - 0x0000)
struct EndCharacter_UseHookShotSimple final
{
public:
	struct FVector                                landingLocation;                                   // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               LandingRotation;                                   // 0x000C(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCharacter_UseHookShotSimple) == 0x000004, "Wrong alignment on EndCharacter_UseHookShotSimple");
static_assert(sizeof(EndCharacter_UseHookShotSimple) == 0x000018, "Wrong size on EndCharacter_UseHookShotSimple");
static_assert(offsetof(EndCharacter_UseHookShotSimple, landingLocation) == 0x000000, "Member 'EndCharacter_UseHookShotSimple::landingLocation' has a wrong offset!");
static_assert(offsetof(EndCharacter_UseHookShotSimple, LandingRotation) == 0x00000C, "Member 'EndCharacter_UseHookShotSimple::LandingRotation' has a wrong offset!");

// Function EndGame.EndCharacter.IsPlayer
// 0x0001 (0x0001 - 0x0000)
struct EndCharacter_IsPlayer final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCharacter_IsPlayer) == 0x000001, "Wrong alignment on EndCharacter_IsPlayer");
static_assert(sizeof(EndCharacter_IsPlayer) == 0x000001, "Wrong size on EndCharacter_IsPlayer");
static_assert(offsetof(EndCharacter_IsPlayer, ReturnValue) == 0x000000, "Member 'EndCharacter_IsPlayer::ReturnValue' has a wrong offset!");

// Function EndGame.EndCharacter.IsRagdollPhysicsEnabled
// 0x0001 (0x0001 - 0x0000)
struct EndCharacter_IsRagdollPhysicsEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCharacter_IsRagdollPhysicsEnabled) == 0x000001, "Wrong alignment on EndCharacter_IsRagdollPhysicsEnabled");
static_assert(sizeof(EndCharacter_IsRagdollPhysicsEnabled) == 0x000001, "Wrong size on EndCharacter_IsRagdollPhysicsEnabled");
static_assert(offsetof(EndCharacter_IsRagdollPhysicsEnabled, ReturnValue) == 0x000000, "Member 'EndCharacter_IsRagdollPhysicsEnabled::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleNavQueryContext.GetTargetLocationContext
// 0x0018 (0x0018 - 0x0000)
struct EndBattleNavQueryContext_GetTargetLocationContext final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0008(0x000C)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleNavQueryContext_GetTargetLocationContext) == 0x000008, "Wrong alignment on EndBattleNavQueryContext_GetTargetLocationContext");
static_assert(sizeof(EndBattleNavQueryContext_GetTargetLocationContext) == 0x000018, "Wrong size on EndBattleNavQueryContext_GetTargetLocationContext");
static_assert(offsetof(EndBattleNavQueryContext_GetTargetLocationContext, Actor) == 0x000000, "Member 'EndBattleNavQueryContext_GetTargetLocationContext::Actor' has a wrong offset!");
static_assert(offsetof(EndBattleNavQueryContext_GetTargetLocationContext, ReturnValue) == 0x000008, "Member 'EndBattleNavQueryContext_GetTargetLocationContext::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleNavQueryContext.ProvideSingleLocation
// 0x0020 (0x0020 - 0x0000)
struct EndBattleNavQueryContext_ProvideSingleLocation final
{
public:
	class UObject*                                QuerierObject;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 QuerierActor;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ResultingLocation;                                 // 0x0010(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleNavQueryContext_ProvideSingleLocation) == 0x000008, "Wrong alignment on EndBattleNavQueryContext_ProvideSingleLocation");
static_assert(sizeof(EndBattleNavQueryContext_ProvideSingleLocation) == 0x000020, "Wrong size on EndBattleNavQueryContext_ProvideSingleLocation");
static_assert(offsetof(EndBattleNavQueryContext_ProvideSingleLocation, QuerierObject) == 0x000000, "Member 'EndBattleNavQueryContext_ProvideSingleLocation::QuerierObject' has a wrong offset!");
static_assert(offsetof(EndBattleNavQueryContext_ProvideSingleLocation, QuerierActor) == 0x000008, "Member 'EndBattleNavQueryContext_ProvideSingleLocation::QuerierActor' has a wrong offset!");
static_assert(offsetof(EndBattleNavQueryContext_ProvideSingleLocation, ResultingLocation) == 0x000010, "Member 'EndBattleNavQueryContext_ProvideSingleLocation::ResultingLocation' has a wrong offset!");

// Function EndGame.EndTriggerBox.OnBeginOverlap
// 0x00A8 (0x00A8 - 0x0000)
struct EndTriggerBox_OnBeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComp;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Other;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndTriggerBox_OnBeginOverlap) == 0x000008, "Wrong alignment on EndTriggerBox_OnBeginOverlap");
static_assert(sizeof(EndTriggerBox_OnBeginOverlap) == 0x0000A8, "Wrong size on EndTriggerBox_OnBeginOverlap");
static_assert(offsetof(EndTriggerBox_OnBeginOverlap, OverlappedComp) == 0x000000, "Member 'EndTriggerBox_OnBeginOverlap::OverlappedComp' has a wrong offset!");
static_assert(offsetof(EndTriggerBox_OnBeginOverlap, Other) == 0x000008, "Member 'EndTriggerBox_OnBeginOverlap::Other' has a wrong offset!");
static_assert(offsetof(EndTriggerBox_OnBeginOverlap, OtherComp) == 0x000010, "Member 'EndTriggerBox_OnBeginOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(EndTriggerBox_OnBeginOverlap, OtherBodyIndex) == 0x000018, "Member 'EndTriggerBox_OnBeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(EndTriggerBox_OnBeginOverlap, bFromSweep) == 0x00001C, "Member 'EndTriggerBox_OnBeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(EndTriggerBox_OnBeginOverlap, SweepResult) == 0x000020, "Member 'EndTriggerBox_OnBeginOverlap::SweepResult' has a wrong offset!");

// Function EndGame.EndTriggerBox.OnEndOverlap
// 0x0020 (0x0020 - 0x0000)
struct EndTriggerBox_OnEndOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComp;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Other;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndTriggerBox_OnEndOverlap) == 0x000008, "Wrong alignment on EndTriggerBox_OnEndOverlap");
static_assert(sizeof(EndTriggerBox_OnEndOverlap) == 0x000020, "Wrong size on EndTriggerBox_OnEndOverlap");
static_assert(offsetof(EndTriggerBox_OnEndOverlap, OverlappedComp) == 0x000000, "Member 'EndTriggerBox_OnEndOverlap::OverlappedComp' has a wrong offset!");
static_assert(offsetof(EndTriggerBox_OnEndOverlap, Other) == 0x000008, "Member 'EndTriggerBox_OnEndOverlap::Other' has a wrong offset!");
static_assert(offsetof(EndTriggerBox_OnEndOverlap, OtherComp) == 0x000010, "Member 'EndTriggerBox_OnEndOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(EndTriggerBox_OnEndOverlap, OtherBodyIndex) == 0x000018, "Member 'EndTriggerBox_OnEndOverlap::OtherBodyIndex' has a wrong offset!");

// Function EndGame.EndBattleSceneBlueprint.AddStatusChange
// 0x0018 (0x0018 - 0x0000)
struct EndBattleSceneBlueprint_AddStatusChange final
{
public:
	class FName                                   CharaName;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<EEndBattleStatusChangeType>            Types;                                             // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleSceneBlueprint_AddStatusChange) == 0x000008, "Wrong alignment on EndBattleSceneBlueprint_AddStatusChange");
static_assert(sizeof(EndBattleSceneBlueprint_AddStatusChange) == 0x000018, "Wrong size on EndBattleSceneBlueprint_AddStatusChange");
static_assert(offsetof(EndBattleSceneBlueprint_AddStatusChange, CharaName) == 0x000000, "Member 'EndBattleSceneBlueprint_AddStatusChange::CharaName' has a wrong offset!");
static_assert(offsetof(EndBattleSceneBlueprint_AddStatusChange, Types) == 0x000008, "Member 'EndBattleSceneBlueprint_AddStatusChange::Types' has a wrong offset!");

// Function EndGame.EndBattleSceneBlueprint.BattleSceneDelay
// 0x0020 (0x0020 - 0x0000)
struct EndBattleSceneBlueprint_BattleSceneDelay final
{
public:
	float                                         Duration;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleSceneBlueprint_BattleSceneDelay) == 0x000008, "Wrong alignment on EndBattleSceneBlueprint_BattleSceneDelay");
static_assert(sizeof(EndBattleSceneBlueprint_BattleSceneDelay) == 0x000020, "Wrong size on EndBattleSceneBlueprint_BattleSceneDelay");
static_assert(offsetof(EndBattleSceneBlueprint_BattleSceneDelay, Duration) == 0x000000, "Member 'EndBattleSceneBlueprint_BattleSceneDelay::Duration' has a wrong offset!");
static_assert(offsetof(EndBattleSceneBlueprint_BattleSceneDelay, LatentInfo) == 0x000008, "Member 'EndBattleSceneBlueprint_BattleSceneDelay::LatentInfo' has a wrong offset!");

// Function EndGame.EndBattleSceneBlueprint.ChangePhase
// 0x0004 (0x0004 - 0x0000)
struct EndBattleSceneBlueprint_ChangePhase final
{
public:
	int32                                         _phase;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleSceneBlueprint_ChangePhase) == 0x000004, "Wrong alignment on EndBattleSceneBlueprint_ChangePhase");
static_assert(sizeof(EndBattleSceneBlueprint_ChangePhase) == 0x000004, "Wrong size on EndBattleSceneBlueprint_ChangePhase");
static_assert(offsetof(EndBattleSceneBlueprint_ChangePhase, _phase) == 0x000000, "Member 'EndBattleSceneBlueprint_ChangePhase::_phase' has a wrong offset!");

// Function EndGame.EndBattleSceneBlueprint.ConvertMultiTalkPlayTriggerID
// 0x0010 (0x0010 - 0x0000)
struct EndBattleSceneBlueprint_ConvertMultiTalkPlayTriggerID final
{
public:
	class FName                                   TalkPlayTriggerId;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleSceneBlueprint_ConvertMultiTalkPlayTriggerID) == 0x000004, "Wrong alignment on EndBattleSceneBlueprint_ConvertMultiTalkPlayTriggerID");
static_assert(sizeof(EndBattleSceneBlueprint_ConvertMultiTalkPlayTriggerID) == 0x000010, "Wrong size on EndBattleSceneBlueprint_ConvertMultiTalkPlayTriggerID");
static_assert(offsetof(EndBattleSceneBlueprint_ConvertMultiTalkPlayTriggerID, TalkPlayTriggerId) == 0x000000, "Member 'EndBattleSceneBlueprint_ConvertMultiTalkPlayTriggerID::TalkPlayTriggerId' has a wrong offset!");
static_assert(offsetof(EndBattleSceneBlueprint_ConvertMultiTalkPlayTriggerID, ReturnValue) == 0x000008, "Member 'EndBattleSceneBlueprint_ConvertMultiTalkPlayTriggerID::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleSceneBlueprint.ForceAIPCUseAbility
// 0x0020 (0x0020 - 0x0000)
struct EndBattleSceneBlueprint_ForceAIPCUseAbility final
{
public:
	EPlayerType                                   PlayerType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   AbilityID;                                         // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AEndCharacter*                          Target;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TargetPartsID;                                     // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleSceneBlueprint_ForceAIPCUseAbility) == 0x000008, "Wrong alignment on EndBattleSceneBlueprint_ForceAIPCUseAbility");
static_assert(sizeof(EndBattleSceneBlueprint_ForceAIPCUseAbility) == 0x000020, "Wrong size on EndBattleSceneBlueprint_ForceAIPCUseAbility");
static_assert(offsetof(EndBattleSceneBlueprint_ForceAIPCUseAbility, PlayerType) == 0x000000, "Member 'EndBattleSceneBlueprint_ForceAIPCUseAbility::PlayerType' has a wrong offset!");
static_assert(offsetof(EndBattleSceneBlueprint_ForceAIPCUseAbility, AbilityID) == 0x000004, "Member 'EndBattleSceneBlueprint_ForceAIPCUseAbility::AbilityID' has a wrong offset!");
static_assert(offsetof(EndBattleSceneBlueprint_ForceAIPCUseAbility, Target) == 0x000010, "Member 'EndBattleSceneBlueprint_ForceAIPCUseAbility::Target' has a wrong offset!");
static_assert(offsetof(EndBattleSceneBlueprint_ForceAIPCUseAbility, TargetPartsID) == 0x000018, "Member 'EndBattleSceneBlueprint_ForceAIPCUseAbility::TargetPartsID' has a wrong offset!");

// Function EndGame.EndBattleSceneBlueprint.OnBeginTalkTriggerBoxCollide
// 0x0010 (0x0010 - 0x0000)
struct EndBattleSceneBlueprint_OnBeginTalkTriggerBoxCollide final
{
public:
	class FName                                   TriggerBoxActorName;                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CollideCharaName;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleSceneBlueprint_OnBeginTalkTriggerBoxCollide) == 0x000004, "Wrong alignment on EndBattleSceneBlueprint_OnBeginTalkTriggerBoxCollide");
static_assert(sizeof(EndBattleSceneBlueprint_OnBeginTalkTriggerBoxCollide) == 0x000010, "Wrong size on EndBattleSceneBlueprint_OnBeginTalkTriggerBoxCollide");
static_assert(offsetof(EndBattleSceneBlueprint_OnBeginTalkTriggerBoxCollide, TriggerBoxActorName) == 0x000000, "Member 'EndBattleSceneBlueprint_OnBeginTalkTriggerBoxCollide::TriggerBoxActorName' has a wrong offset!");
static_assert(offsetof(EndBattleSceneBlueprint_OnBeginTalkTriggerBoxCollide, CollideCharaName) == 0x000008, "Member 'EndBattleSceneBlueprint_OnBeginTalkTriggerBoxCollide::CollideCharaName' has a wrong offset!");

// Function EndGame.EndBattleSceneBlueprint.OnCharaPartsBreak
// 0x0024 (0x0024 - 0x0000)
struct EndBattleSceneBlueprint_OnCharaPartsBreak final
{
public:
	class FName                                   CauserCharaName;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BrokenCharaName;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   partsID;                                           // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CategoryID;                                        // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CategoryBreakCount;                                // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleSceneBlueprint_OnCharaPartsBreak) == 0x000004, "Wrong alignment on EndBattleSceneBlueprint_OnCharaPartsBreak");
static_assert(sizeof(EndBattleSceneBlueprint_OnCharaPartsBreak) == 0x000024, "Wrong size on EndBattleSceneBlueprint_OnCharaPartsBreak");
static_assert(offsetof(EndBattleSceneBlueprint_OnCharaPartsBreak, CauserCharaName) == 0x000000, "Member 'EndBattleSceneBlueprint_OnCharaPartsBreak::CauserCharaName' has a wrong offset!");
static_assert(offsetof(EndBattleSceneBlueprint_OnCharaPartsBreak, BrokenCharaName) == 0x000008, "Member 'EndBattleSceneBlueprint_OnCharaPartsBreak::BrokenCharaName' has a wrong offset!");
static_assert(offsetof(EndBattleSceneBlueprint_OnCharaPartsBreak, partsID) == 0x000010, "Member 'EndBattleSceneBlueprint_OnCharaPartsBreak::partsID' has a wrong offset!");
static_assert(offsetof(EndBattleSceneBlueprint_OnCharaPartsBreak, CategoryID) == 0x000018, "Member 'EndBattleSceneBlueprint_OnCharaPartsBreak::CategoryID' has a wrong offset!");
static_assert(offsetof(EndBattleSceneBlueprint_OnCharaPartsBreak, CategoryBreakCount) == 0x000020, "Member 'EndBattleSceneBlueprint_OnCharaPartsBreak::CategoryBreakCount' has a wrong offset!");

// Function EndGame.EndBattleSceneBlueprint.OnCharaPartsDamage
// 0x0028 (0x0028 - 0x0000)
struct EndBattleSceneBlueprint_OnCharaPartsDamage final
{
public:
	class FName                                   CauserCharaName;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DamagedCharaName;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   partsID;                                           // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CategoryID;                                        // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RemainHP;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RemainHPPer;                                       // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleSceneBlueprint_OnCharaPartsDamage) == 0x000004, "Wrong alignment on EndBattleSceneBlueprint_OnCharaPartsDamage");
static_assert(sizeof(EndBattleSceneBlueprint_OnCharaPartsDamage) == 0x000028, "Wrong size on EndBattleSceneBlueprint_OnCharaPartsDamage");
static_assert(offsetof(EndBattleSceneBlueprint_OnCharaPartsDamage, CauserCharaName) == 0x000000, "Member 'EndBattleSceneBlueprint_OnCharaPartsDamage::CauserCharaName' has a wrong offset!");
static_assert(offsetof(EndBattleSceneBlueprint_OnCharaPartsDamage, DamagedCharaName) == 0x000008, "Member 'EndBattleSceneBlueprint_OnCharaPartsDamage::DamagedCharaName' has a wrong offset!");
static_assert(offsetof(EndBattleSceneBlueprint_OnCharaPartsDamage, partsID) == 0x000010, "Member 'EndBattleSceneBlueprint_OnCharaPartsDamage::partsID' has a wrong offset!");
static_assert(offsetof(EndBattleSceneBlueprint_OnCharaPartsDamage, CategoryID) == 0x000018, "Member 'EndBattleSceneBlueprint_OnCharaPartsDamage::CategoryID' has a wrong offset!");
static_assert(offsetof(EndBattleSceneBlueprint_OnCharaPartsDamage, RemainHP) == 0x000020, "Member 'EndBattleSceneBlueprint_OnCharaPartsDamage::RemainHP' has a wrong offset!");
static_assert(offsetof(EndBattleSceneBlueprint_OnCharaPartsDamage, RemainHPPer) == 0x000024, "Member 'EndBattleSceneBlueprint_OnCharaPartsDamage::RemainHPPer' has a wrong offset!");

// Function EndGame.EndBattleSceneBlueprint.OnCharaSpecialStatusChange
// 0x0050 (0x0050 - 0x0000)
struct EndBattleSceneBlueprint_OnCharaSpecialStatusChange final
{
public:
	class FName                                   ownerCharaName;                                    // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SpecialStatusChangeID;                             // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndBattleSpecialStatusChangeType             Type;                                              // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   StateId;                                           // 0x0014(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 Params_0;                                          // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class FName>                           ParamIDs;                                          // 0x0030(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         ParamActors;                                       // 0x0040(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleSceneBlueprint_OnCharaSpecialStatusChange) == 0x000008, "Wrong alignment on EndBattleSceneBlueprint_OnCharaSpecialStatusChange");
static_assert(sizeof(EndBattleSceneBlueprint_OnCharaSpecialStatusChange) == 0x000050, "Wrong size on EndBattleSceneBlueprint_OnCharaSpecialStatusChange");
static_assert(offsetof(EndBattleSceneBlueprint_OnCharaSpecialStatusChange, ownerCharaName) == 0x000000, "Member 'EndBattleSceneBlueprint_OnCharaSpecialStatusChange::ownerCharaName' has a wrong offset!");
static_assert(offsetof(EndBattleSceneBlueprint_OnCharaSpecialStatusChange, SpecialStatusChangeID) == 0x000008, "Member 'EndBattleSceneBlueprint_OnCharaSpecialStatusChange::SpecialStatusChangeID' has a wrong offset!");
static_assert(offsetof(EndBattleSceneBlueprint_OnCharaSpecialStatusChange, Type) == 0x000010, "Member 'EndBattleSceneBlueprint_OnCharaSpecialStatusChange::Type' has a wrong offset!");
static_assert(offsetof(EndBattleSceneBlueprint_OnCharaSpecialStatusChange, StateId) == 0x000014, "Member 'EndBattleSceneBlueprint_OnCharaSpecialStatusChange::StateId' has a wrong offset!");
static_assert(offsetof(EndBattleSceneBlueprint_OnCharaSpecialStatusChange, Params_0) == 0x000020, "Member 'EndBattleSceneBlueprint_OnCharaSpecialStatusChange::Params_0' has a wrong offset!");
static_assert(offsetof(EndBattleSceneBlueprint_OnCharaSpecialStatusChange, ParamIDs) == 0x000030, "Member 'EndBattleSceneBlueprint_OnCharaSpecialStatusChange::ParamIDs' has a wrong offset!");
static_assert(offsetof(EndBattleSceneBlueprint_OnCharaSpecialStatusChange, ParamActors) == 0x000040, "Member 'EndBattleSceneBlueprint_OnCharaSpecialStatusChange::ParamActors' has a wrong offset!");

// Function EndGame.EndBattleSceneBlueprint.OnCharaSyncAction
// 0x002C (0x002C - 0x0000)
struct EndBattleSceneBlueprint_OnCharaSyncAction final
{
public:
	class FName                                   AttackedCharaName;                                 // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReceivedCharaName;                                 // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StateId;                                           // 0x0010(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StateCount;                                        // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   syncActionID;                                      // 0x001C(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CauserCharaName;                                   // 0x0024(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleSceneBlueprint_OnCharaSyncAction) == 0x000004, "Wrong alignment on EndBattleSceneBlueprint_OnCharaSyncAction");
static_assert(sizeof(EndBattleSceneBlueprint_OnCharaSyncAction) == 0x00002C, "Wrong size on EndBattleSceneBlueprint_OnCharaSyncAction");
static_assert(offsetof(EndBattleSceneBlueprint_OnCharaSyncAction, AttackedCharaName) == 0x000000, "Member 'EndBattleSceneBlueprint_OnCharaSyncAction::AttackedCharaName' has a wrong offset!");
static_assert(offsetof(EndBattleSceneBlueprint_OnCharaSyncAction, ReceivedCharaName) == 0x000008, "Member 'EndBattleSceneBlueprint_OnCharaSyncAction::ReceivedCharaName' has a wrong offset!");
static_assert(offsetof(EndBattleSceneBlueprint_OnCharaSyncAction, StateId) == 0x000010, "Member 'EndBattleSceneBlueprint_OnCharaSyncAction::StateId' has a wrong offset!");
static_assert(offsetof(EndBattleSceneBlueprint_OnCharaSyncAction, StateCount) == 0x000018, "Member 'EndBattleSceneBlueprint_OnCharaSyncAction::StateCount' has a wrong offset!");
static_assert(offsetof(EndBattleSceneBlueprint_OnCharaSyncAction, syncActionID) == 0x00001C, "Member 'EndBattleSceneBlueprint_OnCharaSyncAction::syncActionID' has a wrong offset!");
static_assert(offsetof(EndBattleSceneBlueprint_OnCharaSyncAction, CauserCharaName) == 0x000024, "Member 'EndBattleSceneBlueprint_OnCharaSyncAction::CauserCharaName' has a wrong offset!");

// Function EndGame.EndBattleSceneBlueprint.OnCollideBattleTalkColideBox
// 0x0358 (0x0358 - 0x0000)
struct EndBattleSceneBlueprint_OnCollideBattleTalkColideBox final
{
public:
	class FName                                   ColideBoxName;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AEndCharacter*                          ownerChara;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DamageSourceID;                                    // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEndDataTableBattleDamageSource        DamageSourceDataTable;                             // 0x0018(0x0340)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleSceneBlueprint_OnCollideBattleTalkColideBox) == 0x000008, "Wrong alignment on EndBattleSceneBlueprint_OnCollideBattleTalkColideBox");
static_assert(sizeof(EndBattleSceneBlueprint_OnCollideBattleTalkColideBox) == 0x000358, "Wrong size on EndBattleSceneBlueprint_OnCollideBattleTalkColideBox");
static_assert(offsetof(EndBattleSceneBlueprint_OnCollideBattleTalkColideBox, ColideBoxName) == 0x000000, "Member 'EndBattleSceneBlueprint_OnCollideBattleTalkColideBox::ColideBoxName' has a wrong offset!");
static_assert(offsetof(EndBattleSceneBlueprint_OnCollideBattleTalkColideBox, ownerChara) == 0x000008, "Member 'EndBattleSceneBlueprint_OnCollideBattleTalkColideBox::ownerChara' has a wrong offset!");
static_assert(offsetof(EndBattleSceneBlueprint_OnCollideBattleTalkColideBox, DamageSourceID) == 0x000010, "Member 'EndBattleSceneBlueprint_OnCollideBattleTalkColideBox::DamageSourceID' has a wrong offset!");
static_assert(offsetof(EndBattleSceneBlueprint_OnCollideBattleTalkColideBox, DamageSourceDataTable) == 0x000018, "Member 'EndBattleSceneBlueprint_OnCollideBattleTalkColideBox::DamageSourceDataTable' has a wrong offset!");

// Function EndGame.EndBattleSceneBlueprint.OnCompletedTalkState
// 0x000C (0x000C - 0x0000)
struct EndBattleSceneBlueprint_OnCompletedTalkState final
{
public:
	class FName                                   TalkStateId;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInterrupted;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleSceneBlueprint_OnCompletedTalkState) == 0x000004, "Wrong alignment on EndBattleSceneBlueprint_OnCompletedTalkState");
static_assert(sizeof(EndBattleSceneBlueprint_OnCompletedTalkState) == 0x00000C, "Wrong size on EndBattleSceneBlueprint_OnCompletedTalkState");
static_assert(offsetof(EndBattleSceneBlueprint_OnCompletedTalkState, TalkStateId) == 0x000000, "Member 'EndBattleSceneBlueprint_OnCompletedTalkState::TalkStateId' has a wrong offset!");
static_assert(offsetof(EndBattleSceneBlueprint_OnCompletedTalkState, bInterrupted) == 0x000008, "Member 'EndBattleSceneBlueprint_OnCompletedTalkState::bInterrupted' has a wrong offset!");

// Function EndGame.EndBattleSceneBlueprint.OnEndFreeAct
// 0x0008 (0x0008 - 0x0000)
struct EndBattleSceneBlueprint_OnEndFreeAct final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleSceneBlueprint_OnEndFreeAct) == 0x000004, "Wrong alignment on EndBattleSceneBlueprint_OnEndFreeAct");
static_assert(sizeof(EndBattleSceneBlueprint_OnEndFreeAct) == 0x000008, "Wrong size on EndBattleSceneBlueprint_OnEndFreeAct");
static_assert(offsetof(EndBattleSceneBlueprint_OnEndFreeAct, InName) == 0x000000, "Member 'EndBattleSceneBlueprint_OnEndFreeAct::InName' has a wrong offset!");

// Function EndGame.EndBattleSceneBlueprint.OnEndRailCamera
// 0x0008 (0x0008 - 0x0000)
struct EndBattleSceneBlueprint_OnEndRailCamera final
{
public:
	class FName                                   RailCameraID;                                      // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleSceneBlueprint_OnEndRailCamera) == 0x000004, "Wrong alignment on EndBattleSceneBlueprint_OnEndRailCamera");
static_assert(sizeof(EndBattleSceneBlueprint_OnEndRailCamera) == 0x000008, "Wrong size on EndBattleSceneBlueprint_OnEndRailCamera");
static_assert(offsetof(EndBattleSceneBlueprint_OnEndRailCamera, RailCameraID) == 0x000000, "Member 'EndBattleSceneBlueprint_OnEndRailCamera::RailCameraID' has a wrong offset!");

// Function EndGame.EndBattleSceneBlueprint.OnEndTalkTriggerBoxCollide
// 0x0010 (0x0010 - 0x0000)
struct EndBattleSceneBlueprint_OnEndTalkTriggerBoxCollide final
{
public:
	class FName                                   TriggerBoxActorName;                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CollideCharaName;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleSceneBlueprint_OnEndTalkTriggerBoxCollide) == 0x000004, "Wrong alignment on EndBattleSceneBlueprint_OnEndTalkTriggerBoxCollide");
static_assert(sizeof(EndBattleSceneBlueprint_OnEndTalkTriggerBoxCollide) == 0x000010, "Wrong size on EndBattleSceneBlueprint_OnEndTalkTriggerBoxCollide");
static_assert(offsetof(EndBattleSceneBlueprint_OnEndTalkTriggerBoxCollide, TriggerBoxActorName) == 0x000000, "Member 'EndBattleSceneBlueprint_OnEndTalkTriggerBoxCollide::TriggerBoxActorName' has a wrong offset!");
static_assert(offsetof(EndBattleSceneBlueprint_OnEndTalkTriggerBoxCollide, CollideCharaName) == 0x000008, "Member 'EndBattleSceneBlueprint_OnEndTalkTriggerBoxCollide::CollideCharaName' has a wrong offset!");

// Function EndGame.EndBattleSceneBlueprint.OnEntryBattleScene
// 0x0120 (0x0120 - 0x0000)
struct EndBattleSceneBlueprint_OnEntryBattleScene final
{
public:
	class FName                                   BattleSceneID;                                     // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEndDataTableBattleScene               dataTableBattleScene;                              // 0x0008(0x0118)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleSceneBlueprint_OnEntryBattleScene) == 0x000008, "Wrong alignment on EndBattleSceneBlueprint_OnEntryBattleScene");
static_assert(sizeof(EndBattleSceneBlueprint_OnEntryBattleScene) == 0x000120, "Wrong size on EndBattleSceneBlueprint_OnEntryBattleScene");
static_assert(offsetof(EndBattleSceneBlueprint_OnEntryBattleScene, BattleSceneID) == 0x000000, "Member 'EndBattleSceneBlueprint_OnEntryBattleScene::BattleSceneID' has a wrong offset!");
static_assert(offsetof(EndBattleSceneBlueprint_OnEntryBattleScene, dataTableBattleScene) == 0x000008, "Member 'EndBattleSceneBlueprint_OnEntryBattleScene::dataTableBattleScene' has a wrong offset!");

// Function EndGame.EndBattleSceneBlueprint.OnEntryBattleSceneWave
// 0x0128 (0x0128 - 0x0000)
struct EndBattleSceneBlueprint_OnEntryBattleSceneWave final
{
public:
	class FName                                   BattleSceneID;                                     // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   baseBattleSceneId;                                 // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEndDataTableBattleScene               dataTableBattleScene;                              // 0x0010(0x0118)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleSceneBlueprint_OnEntryBattleSceneWave) == 0x000008, "Wrong alignment on EndBattleSceneBlueprint_OnEntryBattleSceneWave");
static_assert(sizeof(EndBattleSceneBlueprint_OnEntryBattleSceneWave) == 0x000128, "Wrong size on EndBattleSceneBlueprint_OnEntryBattleSceneWave");
static_assert(offsetof(EndBattleSceneBlueprint_OnEntryBattleSceneWave, BattleSceneID) == 0x000000, "Member 'EndBattleSceneBlueprint_OnEntryBattleSceneWave::BattleSceneID' has a wrong offset!");
static_assert(offsetof(EndBattleSceneBlueprint_OnEntryBattleSceneWave, baseBattleSceneId) == 0x000008, "Member 'EndBattleSceneBlueprint_OnEntryBattleSceneWave::baseBattleSceneId' has a wrong offset!");
static_assert(offsetof(EndBattleSceneBlueprint_OnEntryBattleSceneWave, dataTableBattleScene) == 0x000010, "Member 'EndBattleSceneBlueprint_OnEntryBattleSceneWave::dataTableBattleScene' has a wrong offset!");

// Function EndGame.EndBattleSceneBlueprint.OnIncrementBattleCountPerID
// 0x0020 (0x0020 - 0x0000)
struct EndBattleSceneBlueprint_OnIncrementBattleCountPerID final
{
public:
	class FName                                   CauserCharaName;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TargetCharaName;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndBattleCountLogType                        Type;                                              // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ID;                                                // 0x0014(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleSceneBlueprint_OnIncrementBattleCountPerID) == 0x000004, "Wrong alignment on EndBattleSceneBlueprint_OnIncrementBattleCountPerID");
static_assert(sizeof(EndBattleSceneBlueprint_OnIncrementBattleCountPerID) == 0x000020, "Wrong size on EndBattleSceneBlueprint_OnIncrementBattleCountPerID");
static_assert(offsetof(EndBattleSceneBlueprint_OnIncrementBattleCountPerID, CauserCharaName) == 0x000000, "Member 'EndBattleSceneBlueprint_OnIncrementBattleCountPerID::CauserCharaName' has a wrong offset!");
static_assert(offsetof(EndBattleSceneBlueprint_OnIncrementBattleCountPerID, TargetCharaName) == 0x000008, "Member 'EndBattleSceneBlueprint_OnIncrementBattleCountPerID::TargetCharaName' has a wrong offset!");
static_assert(offsetof(EndBattleSceneBlueprint_OnIncrementBattleCountPerID, Type) == 0x000010, "Member 'EndBattleSceneBlueprint_OnIncrementBattleCountPerID::Type' has a wrong offset!");
static_assert(offsetof(EndBattleSceneBlueprint_OnIncrementBattleCountPerID, ID) == 0x000014, "Member 'EndBattleSceneBlueprint_OnIncrementBattleCountPerID::ID' has a wrong offset!");
static_assert(offsetof(EndBattleSceneBlueprint_OnIncrementBattleCountPerID, Count) == 0x00001C, "Member 'EndBattleSceneBlueprint_OnIncrementBattleCountPerID::Count' has a wrong offset!");

// Function EndGame.EndBattleSceneBlueprint.OnMetaMessage
// 0x0010 (0x0010 - 0x0000)
struct EndBattleSceneBlueprint_OnMetaMessage final
{
public:
	class FString                                 InMessage;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleSceneBlueprint_OnMetaMessage) == 0x000008, "Wrong alignment on EndBattleSceneBlueprint_OnMetaMessage");
static_assert(sizeof(EndBattleSceneBlueprint_OnMetaMessage) == 0x000010, "Wrong size on EndBattleSceneBlueprint_OnMetaMessage");
static_assert(offsetof(EndBattleSceneBlueprint_OnMetaMessage, InMessage) == 0x000000, "Member 'EndBattleSceneBlueprint_OnMetaMessage::InMessage' has a wrong offset!");

// Function EndGame.EndBattleSceneBlueprint.OnMotionMessage
// 0x0010 (0x0010 - 0x0000)
struct EndBattleSceneBlueprint_OnMotionMessage final
{
public:
	class FName                                   CharaName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   motionName;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleSceneBlueprint_OnMotionMessage) == 0x000004, "Wrong alignment on EndBattleSceneBlueprint_OnMotionMessage");
static_assert(sizeof(EndBattleSceneBlueprint_OnMotionMessage) == 0x000010, "Wrong size on EndBattleSceneBlueprint_OnMotionMessage");
static_assert(offsetof(EndBattleSceneBlueprint_OnMotionMessage, CharaName) == 0x000000, "Member 'EndBattleSceneBlueprint_OnMotionMessage::CharaName' has a wrong offset!");
static_assert(offsetof(EndBattleSceneBlueprint_OnMotionMessage, motionName) == 0x000008, "Member 'EndBattleSceneBlueprint_OnMotionMessage::motionName' has a wrong offset!");

// Function EndGame.EndBattleSceneBlueprint.OnReadyBattleTalk
// 0x0008 (0x0008 - 0x0000)
struct EndBattleSceneBlueprint_OnReadyBattleTalk final
{
public:
	class FName                                   BattleSceneID;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleSceneBlueprint_OnReadyBattleTalk) == 0x000004, "Wrong alignment on EndBattleSceneBlueprint_OnReadyBattleTalk");
static_assert(sizeof(EndBattleSceneBlueprint_OnReadyBattleTalk) == 0x000008, "Wrong size on EndBattleSceneBlueprint_OnReadyBattleTalk");
static_assert(offsetof(EndBattleSceneBlueprint_OnReadyBattleTalk, BattleSceneID) == 0x000000, "Member 'EndBattleSceneBlueprint_OnReadyBattleTalk::BattleSceneID' has a wrong offset!");

// Function EndGame.EndBattleSceneBlueprint.OnTakeDamage
// 0x004C (0x004C - 0x0000)
struct EndBattleSceneBlueprint_OnTakeDamage final
{
public:
	int32                                         Damage;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CauserCharaName;                                   // 0x0004(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DamagedCharaName;                                  // 0x000C(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AbilityID;                                         // 0x0014(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBind;                                             // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGuard;                                            // 0x001D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDodge;                                            // 0x001E(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F[0x1];                                       // 0x001F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   hitBoneName;                                       // 0x0020(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAttributeHit;                                     // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   DamageSourceID;                                    // 0x002C(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndBattleAttributeType                       DmgSrcAttributeType;                               // 0x0034(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         justHitRotYaw;                                     // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                hitPosition;                                       // 0x003C(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHeal;                                             // 0x0048(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleSceneBlueprint_OnTakeDamage) == 0x000004, "Wrong alignment on EndBattleSceneBlueprint_OnTakeDamage");
static_assert(sizeof(EndBattleSceneBlueprint_OnTakeDamage) == 0x00004C, "Wrong size on EndBattleSceneBlueprint_OnTakeDamage");
static_assert(offsetof(EndBattleSceneBlueprint_OnTakeDamage, Damage) == 0x000000, "Member 'EndBattleSceneBlueprint_OnTakeDamage::Damage' has a wrong offset!");
static_assert(offsetof(EndBattleSceneBlueprint_OnTakeDamage, CauserCharaName) == 0x000004, "Member 'EndBattleSceneBlueprint_OnTakeDamage::CauserCharaName' has a wrong offset!");
static_assert(offsetof(EndBattleSceneBlueprint_OnTakeDamage, DamagedCharaName) == 0x00000C, "Member 'EndBattleSceneBlueprint_OnTakeDamage::DamagedCharaName' has a wrong offset!");
static_assert(offsetof(EndBattleSceneBlueprint_OnTakeDamage, AbilityID) == 0x000014, "Member 'EndBattleSceneBlueprint_OnTakeDamage::AbilityID' has a wrong offset!");
static_assert(offsetof(EndBattleSceneBlueprint_OnTakeDamage, bBind) == 0x00001C, "Member 'EndBattleSceneBlueprint_OnTakeDamage::bBind' has a wrong offset!");
static_assert(offsetof(EndBattleSceneBlueprint_OnTakeDamage, bGuard) == 0x00001D, "Member 'EndBattleSceneBlueprint_OnTakeDamage::bGuard' has a wrong offset!");
static_assert(offsetof(EndBattleSceneBlueprint_OnTakeDamage, bDodge) == 0x00001E, "Member 'EndBattleSceneBlueprint_OnTakeDamage::bDodge' has a wrong offset!");
static_assert(offsetof(EndBattleSceneBlueprint_OnTakeDamage, hitBoneName) == 0x000020, "Member 'EndBattleSceneBlueprint_OnTakeDamage::hitBoneName' has a wrong offset!");
static_assert(offsetof(EndBattleSceneBlueprint_OnTakeDamage, bAttributeHit) == 0x000028, "Member 'EndBattleSceneBlueprint_OnTakeDamage::bAttributeHit' has a wrong offset!");
static_assert(offsetof(EndBattleSceneBlueprint_OnTakeDamage, DamageSourceID) == 0x00002C, "Member 'EndBattleSceneBlueprint_OnTakeDamage::DamageSourceID' has a wrong offset!");
static_assert(offsetof(EndBattleSceneBlueprint_OnTakeDamage, DmgSrcAttributeType) == 0x000034, "Member 'EndBattleSceneBlueprint_OnTakeDamage::DmgSrcAttributeType' has a wrong offset!");
static_assert(offsetof(EndBattleSceneBlueprint_OnTakeDamage, justHitRotYaw) == 0x000038, "Member 'EndBattleSceneBlueprint_OnTakeDamage::justHitRotYaw' has a wrong offset!");
static_assert(offsetof(EndBattleSceneBlueprint_OnTakeDamage, hitPosition) == 0x00003C, "Member 'EndBattleSceneBlueprint_OnTakeDamage::hitPosition' has a wrong offset!");
static_assert(offsetof(EndBattleSceneBlueprint_OnTakeDamage, bHeal) == 0x000048, "Member 'EndBattleSceneBlueprint_OnTakeDamage::bHeal' has a wrong offset!");

// Function EndGame.EndBattleSceneBlueprint.OnTakeDamageSpecialStatus
// 0x0018 (0x0018 - 0x0000)
struct EndBattleSceneBlueprint_OnTakeDamageSpecialStatus final
{
public:
	class FName                                   characterName;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndBattleSpecialStatusChangeType             specialStatus;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   abilityName;                                       // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         damageParcent;                                     // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleSceneBlueprint_OnTakeDamageSpecialStatus) == 0x000004, "Wrong alignment on EndBattleSceneBlueprint_OnTakeDamageSpecialStatus");
static_assert(sizeof(EndBattleSceneBlueprint_OnTakeDamageSpecialStatus) == 0x000018, "Wrong size on EndBattleSceneBlueprint_OnTakeDamageSpecialStatus");
static_assert(offsetof(EndBattleSceneBlueprint_OnTakeDamageSpecialStatus, characterName) == 0x000000, "Member 'EndBattleSceneBlueprint_OnTakeDamageSpecialStatus::characterName' has a wrong offset!");
static_assert(offsetof(EndBattleSceneBlueprint_OnTakeDamageSpecialStatus, specialStatus) == 0x000008, "Member 'EndBattleSceneBlueprint_OnTakeDamageSpecialStatus::specialStatus' has a wrong offset!");
static_assert(offsetof(EndBattleSceneBlueprint_OnTakeDamageSpecialStatus, abilityName) == 0x00000C, "Member 'EndBattleSceneBlueprint_OnTakeDamageSpecialStatus::abilityName' has a wrong offset!");
static_assert(offsetof(EndBattleSceneBlueprint_OnTakeDamageSpecialStatus, damageParcent) == 0x000014, "Member 'EndBattleSceneBlueprint_OnTakeDamageSpecialStatus::damageParcent' has a wrong offset!");

// Function EndGame.EndBattleSceneBlueprint.RemoveStatusChange
// 0x0018 (0x0018 - 0x0000)
struct EndBattleSceneBlueprint_RemoveStatusChange final
{
public:
	class FName                                   CharaName;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<EEndBattleStatusChangeType>            Types;                                             // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleSceneBlueprint_RemoveStatusChange) == 0x000008, "Wrong alignment on EndBattleSceneBlueprint_RemoveStatusChange");
static_assert(sizeof(EndBattleSceneBlueprint_RemoveStatusChange) == 0x000018, "Wrong size on EndBattleSceneBlueprint_RemoveStatusChange");
static_assert(offsetof(EndBattleSceneBlueprint_RemoveStatusChange, CharaName) == 0x000000, "Member 'EndBattleSceneBlueprint_RemoveStatusChange::CharaName' has a wrong offset!");
static_assert(offsetof(EndBattleSceneBlueprint_RemoveStatusChange, Types) == 0x000008, "Member 'EndBattleSceneBlueprint_RemoveStatusChange::Types' has a wrong offset!");

// Function EndGame.EndBattleSceneBlueprint.SetAIPCControllerTick
// 0x0002 (0x0002 - 0x0000)
struct EndBattleSceneBlueprint_SetAIPCControllerTick final
{
public:
	EPlayerType                                   PlayerType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Flag;                                              // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleSceneBlueprint_SetAIPCControllerTick) == 0x000001, "Wrong alignment on EndBattleSceneBlueprint_SetAIPCControllerTick");
static_assert(sizeof(EndBattleSceneBlueprint_SetAIPCControllerTick) == 0x000002, "Wrong size on EndBattleSceneBlueprint_SetAIPCControllerTick");
static_assert(offsetof(EndBattleSceneBlueprint_SetAIPCControllerTick, PlayerType) == 0x000000, "Member 'EndBattleSceneBlueprint_SetAIPCControllerTick::PlayerType' has a wrong offset!");
static_assert(offsetof(EndBattleSceneBlueprint_SetAIPCControllerTick, Flag) == 0x000001, "Member 'EndBattleSceneBlueprint_SetAIPCControllerTick::Flag' has a wrong offset!");

// Function EndGame.EndBattleSceneBlueprint.SetHPByBattleSceneCharacterIndex
// 0x0008 (0x0008 - 0x0000)
struct EndBattleSceneBlueprint_SetHPByBattleSceneCharacterIndex final
{
public:
	int32                                         srcCharacterIndex;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         destCharacterIndex;                                // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleSceneBlueprint_SetHPByBattleSceneCharacterIndex) == 0x000004, "Wrong alignment on EndBattleSceneBlueprint_SetHPByBattleSceneCharacterIndex");
static_assert(sizeof(EndBattleSceneBlueprint_SetHPByBattleSceneCharacterIndex) == 0x000008, "Wrong size on EndBattleSceneBlueprint_SetHPByBattleSceneCharacterIndex");
static_assert(offsetof(EndBattleSceneBlueprint_SetHPByBattleSceneCharacterIndex, srcCharacterIndex) == 0x000000, "Member 'EndBattleSceneBlueprint_SetHPByBattleSceneCharacterIndex::srcCharacterIndex' has a wrong offset!");
static_assert(offsetof(EndBattleSceneBlueprint_SetHPByBattleSceneCharacterIndex, destCharacterIndex) == 0x000004, "Member 'EndBattleSceneBlueprint_SetHPByBattleSceneCharacterIndex::destCharacterIndex' has a wrong offset!");

// Function EndGame.EndBattleSceneBlueprint.SetPhase
// 0x0004 (0x0004 - 0x0000)
struct EndBattleSceneBlueprint_SetPhase final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleSceneBlueprint_SetPhase) == 0x000004, "Wrong alignment on EndBattleSceneBlueprint_SetPhase");
static_assert(sizeof(EndBattleSceneBlueprint_SetPhase) == 0x000004, "Wrong size on EndBattleSceneBlueprint_SetPhase");
static_assert(offsetof(EndBattleSceneBlueprint_SetPhase, Value) == 0x000000, "Member 'EndBattleSceneBlueprint_SetPhase::Value' has a wrong offset!");

// Function EndGame.EndBattleSceneBlueprint.SwitchCharaState
// 0x0010 (0x0010 - 0x0000)
struct EndBattleSceneBlueprint_SwitchCharaState final
{
public:
	EEndBattleSceneCharaStateType                 State;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CharaName;                                         // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExecInState;                                      // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleSceneBlueprint_SwitchCharaState) == 0x000004, "Wrong alignment on EndBattleSceneBlueprint_SwitchCharaState");
static_assert(sizeof(EndBattleSceneBlueprint_SwitchCharaState) == 0x000010, "Wrong size on EndBattleSceneBlueprint_SwitchCharaState");
static_assert(offsetof(EndBattleSceneBlueprint_SwitchCharaState, State) == 0x000000, "Member 'EndBattleSceneBlueprint_SwitchCharaState::State' has a wrong offset!");
static_assert(offsetof(EndBattleSceneBlueprint_SwitchCharaState, CharaName) == 0x000004, "Member 'EndBattleSceneBlueprint_SwitchCharaState::CharaName' has a wrong offset!");
static_assert(offsetof(EndBattleSceneBlueprint_SwitchCharaState, bExecInState) == 0x00000C, "Member 'EndBattleSceneBlueprint_SwitchCharaState::bExecInState' has a wrong offset!");

// Function EndGame.EndBattleSceneBlueprint.GetPhase
// 0x0004 (0x0004 - 0x0000)
struct EndBattleSceneBlueprint_GetPhase final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleSceneBlueprint_GetPhase) == 0x000004, "Wrong alignment on EndBattleSceneBlueprint_GetPhase");
static_assert(sizeof(EndBattleSceneBlueprint_GetPhase) == 0x000004, "Wrong size on EndBattleSceneBlueprint_GetPhase");
static_assert(offsetof(EndBattleSceneBlueprint_GetPhase, ReturnValue) == 0x000000, "Member 'EndBattleSceneBlueprint_GetPhase::ReturnValue' has a wrong offset!");

// Function EndGame.EndPieImage.GetDynamicMaterial
// 0x0008 (0x0008 - 0x0000)
struct EndPieImage_GetDynamicMaterial final
{
public:
	class UMaterialInstanceDynamic*               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndPieImage_GetDynamicMaterial) == 0x000008, "Wrong alignment on EndPieImage_GetDynamicMaterial");
static_assert(sizeof(EndPieImage_GetDynamicMaterial) == 0x000008, "Wrong size on EndPieImage_GetDynamicMaterial");
static_assert(offsetof(EndPieImage_GetDynamicMaterial, ReturnValue) == 0x000000, "Member 'EndPieImage_GetDynamicMaterial::ReturnValue' has a wrong offset!");

// Function EndGame.EndPieImage.SetBlendMode
// 0x0001 (0x0001 - 0x0000)
struct EndPieImage_SetBlendMode final
{
public:
	EBlendMode                                    InBlendMode;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndPieImage_SetBlendMode) == 0x000001, "Wrong alignment on EndPieImage_SetBlendMode");
static_assert(sizeof(EndPieImage_SetBlendMode) == 0x000001, "Wrong size on EndPieImage_SetBlendMode");
static_assert(offsetof(EndPieImage_SetBlendMode, InBlendMode) == 0x000000, "Member 'EndPieImage_SetBlendMode::InBlendMode' has a wrong offset!");

// Function EndGame.EndPieImage.SetBrush
// 0x0078 (0x0078 - 0x0000)
struct EndPieImage_SetBrush final
{
public:
	struct FSlateBrush                            InBrush;                                           // 0x0000(0x0078)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndPieImage_SetBrush) == 0x000008, "Wrong alignment on EndPieImage_SetBrush");
static_assert(sizeof(EndPieImage_SetBrush) == 0x000078, "Wrong size on EndPieImage_SetBrush");
static_assert(offsetof(EndPieImage_SetBrush, InBrush) == 0x000000, "Member 'EndPieImage_SetBrush::InBrush' has a wrong offset!");

// Function EndGame.EndPieImage.SetBrushFromAsset
// 0x0008 (0x0008 - 0x0000)
struct EndPieImage_SetBrushFromAsset final
{
public:
	class USlateBrushAsset*                       Asset;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndPieImage_SetBrushFromAsset) == 0x000008, "Wrong alignment on EndPieImage_SetBrushFromAsset");
static_assert(sizeof(EndPieImage_SetBrushFromAsset) == 0x000008, "Wrong size on EndPieImage_SetBrushFromAsset");
static_assert(offsetof(EndPieImage_SetBrushFromAsset, Asset) == 0x000000, "Member 'EndPieImage_SetBrushFromAsset::Asset' has a wrong offset!");

// Function EndGame.EndPieImage.SetBrushFromMaterial
// 0x0008 (0x0008 - 0x0000)
struct EndPieImage_SetBrushFromMaterial final
{
public:
	class UMaterialInterface*                     Material;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndPieImage_SetBrushFromMaterial) == 0x000008, "Wrong alignment on EndPieImage_SetBrushFromMaterial");
static_assert(sizeof(EndPieImage_SetBrushFromMaterial) == 0x000008, "Wrong size on EndPieImage_SetBrushFromMaterial");
static_assert(offsetof(EndPieImage_SetBrushFromMaterial, Material) == 0x000000, "Member 'EndPieImage_SetBrushFromMaterial::Material' has a wrong offset!");

// Function EndGame.EndPieImage.SetBrushFromTexture
// 0x0010 (0x0010 - 0x0000)
struct EndPieImage_SetBrushFromTexture final
{
public:
	class UTexture2D*                             Texture;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMatchSize;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndPieImage_SetBrushFromTexture) == 0x000008, "Wrong alignment on EndPieImage_SetBrushFromTexture");
static_assert(sizeof(EndPieImage_SetBrushFromTexture) == 0x000010, "Wrong size on EndPieImage_SetBrushFromTexture");
static_assert(offsetof(EndPieImage_SetBrushFromTexture, Texture) == 0x000000, "Member 'EndPieImage_SetBrushFromTexture::Texture' has a wrong offset!");
static_assert(offsetof(EndPieImage_SetBrushFromTexture, bMatchSize) == 0x000008, "Member 'EndPieImage_SetBrushFromTexture::bMatchSize' has a wrong offset!");

// Function EndGame.EndPieImage.SetBrushFromTextureDynamic
// 0x0010 (0x0010 - 0x0000)
struct EndPieImage_SetBrushFromTextureDynamic final
{
public:
	class UTexture2DDynamic*                      Texture;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMatchSize;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndPieImage_SetBrushFromTextureDynamic) == 0x000008, "Wrong alignment on EndPieImage_SetBrushFromTextureDynamic");
static_assert(sizeof(EndPieImage_SetBrushFromTextureDynamic) == 0x000010, "Wrong size on EndPieImage_SetBrushFromTextureDynamic");
static_assert(offsetof(EndPieImage_SetBrushFromTextureDynamic, Texture) == 0x000000, "Member 'EndPieImage_SetBrushFromTextureDynamic::Texture' has a wrong offset!");
static_assert(offsetof(EndPieImage_SetBrushFromTextureDynamic, bMatchSize) == 0x000008, "Member 'EndPieImage_SetBrushFromTextureDynamic::bMatchSize' has a wrong offset!");

// Function EndGame.EndPieImage.SetColorAndOpacity
// 0x0010 (0x0010 - 0x0000)
struct EndPieImage_SetColorAndOpacity final
{
public:
	struct FLinearColor                           InColorAndOpacity;                                 // 0x0000(0x0010)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndPieImage_SetColorAndOpacity) == 0x000004, "Wrong alignment on EndPieImage_SetColorAndOpacity");
static_assert(sizeof(EndPieImage_SetColorAndOpacity) == 0x000010, "Wrong size on EndPieImage_SetColorAndOpacity");
static_assert(offsetof(EndPieImage_SetColorAndOpacity, InColorAndOpacity) == 0x000000, "Member 'EndPieImage_SetColorAndOpacity::InColorAndOpacity' has a wrong offset!");

// Function EndGame.EndPieImage.SetEndAngle
// 0x0004 (0x0004 - 0x0000)
struct EndPieImage_SetEndAngle final
{
public:
	float                                         InAngle;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndPieImage_SetEndAngle) == 0x000004, "Wrong alignment on EndPieImage_SetEndAngle");
static_assert(sizeof(EndPieImage_SetEndAngle) == 0x000004, "Wrong size on EndPieImage_SetEndAngle");
static_assert(offsetof(EndPieImage_SetEndAngle, InAngle) == 0x000000, "Member 'EndPieImage_SetEndAngle::InAngle' has a wrong offset!");

// Function EndGame.EndPieImage.SetOpacity
// 0x0004 (0x0004 - 0x0000)
struct EndPieImage_SetOpacity final
{
public:
	float                                         InOpacity;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndPieImage_SetOpacity) == 0x000004, "Wrong alignment on EndPieImage_SetOpacity");
static_assert(sizeof(EndPieImage_SetOpacity) == 0x000004, "Wrong size on EndPieImage_SetOpacity");
static_assert(offsetof(EndPieImage_SetOpacity, InOpacity) == 0x000000, "Member 'EndPieImage_SetOpacity::InOpacity' has a wrong offset!");

// Function EndGame.EndPieImage.SetStartAngle
// 0x0004 (0x0004 - 0x0000)
struct EndPieImage_SetStartAngle final
{
public:
	float                                         InAngle;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndPieImage_SetStartAngle) == 0x000004, "Wrong alignment on EndPieImage_SetStartAngle");
static_assert(sizeof(EndPieImage_SetStartAngle) == 0x000004, "Wrong size on EndPieImage_SetStartAngle");
static_assert(offsetof(EndPieImage_SetStartAngle, InAngle) == 0x000000, "Member 'EndPieImage_SetStartAngle::InAngle' has a wrong offset!");

// Function EndGame.EndFeelerBarrierActor.Play
// 0x0004 (0x0004 - 0x0000)
struct EndFeelerBarrierActor_Play final
{
public:
	float                                         BlendTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndFeelerBarrierActor_Play) == 0x000004, "Wrong alignment on EndFeelerBarrierActor_Play");
static_assert(sizeof(EndFeelerBarrierActor_Play) == 0x000004, "Wrong size on EndFeelerBarrierActor_Play");
static_assert(offsetof(EndFeelerBarrierActor_Play, BlendTime) == 0x000000, "Member 'EndFeelerBarrierActor_Play::BlendTime' has a wrong offset!");

// Function EndGame.EndFeelerBarrierActor.Stop
// 0x0004 (0x0004 - 0x0000)
struct EndFeelerBarrierActor_Stop final
{
public:
	float                                         BlendTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndFeelerBarrierActor_Stop) == 0x000004, "Wrong alignment on EndFeelerBarrierActor_Stop");
static_assert(sizeof(EndFeelerBarrierActor_Stop) == 0x000004, "Wrong size on EndFeelerBarrierActor_Stop");
static_assert(offsetof(EndFeelerBarrierActor_Stop, BlendTime) == 0x000000, "Member 'EndFeelerBarrierActor_Stop::BlendTime' has a wrong offset!");

// Function EndGame.EndQuestMenu.OnQuestScrollBoxPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndQuestMenu_OnQuestScrollBoxPressedItem final
{
public:
	int32                                         ItemIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndQuestMenu_OnQuestScrollBoxPressedItem) == 0x000004, "Wrong alignment on EndQuestMenu_OnQuestScrollBoxPressedItem");
static_assert(sizeof(EndQuestMenu_OnQuestScrollBoxPressedItem) == 0x000004, "Wrong size on EndQuestMenu_OnQuestScrollBoxPressedItem");
static_assert(offsetof(EndQuestMenu_OnQuestScrollBoxPressedItem, ItemIndex) == 0x000000, "Member 'EndQuestMenu_OnQuestScrollBoxPressedItem::ItemIndex' has a wrong offset!");

// Function EndGame.EndQuestMenu.OnQuestScrollBoxSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndQuestMenu_OnQuestScrollBoxSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndQuestMenu_OnQuestScrollBoxSetupItem) == 0x000008, "Wrong alignment on EndQuestMenu_OnQuestScrollBoxSetupItem");
static_assert(sizeof(EndQuestMenu_OnQuestScrollBoxSetupItem) == 0x000010, "Wrong size on EndQuestMenu_OnQuestScrollBoxSetupItem");
static_assert(offsetof(EndQuestMenu_OnQuestScrollBoxSetupItem, ItemWidget) == 0x000000, "Member 'EndQuestMenu_OnQuestScrollBoxSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndQuestMenu_OnQuestScrollBoxSetupItem, ItemIndex) == 0x000008, "Member 'EndQuestMenu_OnQuestScrollBoxSetupItem::ItemIndex' has a wrong offset!");

// Function EndGame.EndPlayerStatusPanel.OnSetupStatusPanel
// 0x0001 (0x0001 - 0x0000)
struct EndPlayerStatusPanel_OnSetupStatusPanel final
{
public:
	EPlayerType                                   PlayerType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndPlayerStatusPanel_OnSetupStatusPanel) == 0x000001, "Wrong alignment on EndPlayerStatusPanel_OnSetupStatusPanel");
static_assert(sizeof(EndPlayerStatusPanel_OnSetupStatusPanel) == 0x000001, "Wrong size on EndPlayerStatusPanel_OnSetupStatusPanel");
static_assert(offsetof(EndPlayerStatusPanel_OnSetupStatusPanel, PlayerType) == 0x000000, "Member 'EndPlayerStatusPanel_OnSetupStatusPanel::PlayerType' has a wrong offset!");

// Function EndGame.EndEmissiveControlActor.GetControllerComponent
// 0x0008 (0x0008 - 0x0000)
struct EndEmissiveControlActor_GetControllerComponent final
{
public:
	class UEndEmissiveControlComponent*           ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndEmissiveControlActor_GetControllerComponent) == 0x000008, "Wrong alignment on EndEmissiveControlActor_GetControllerComponent");
static_assert(sizeof(EndEmissiveControlActor_GetControllerComponent) == 0x000008, "Wrong size on EndEmissiveControlActor_GetControllerComponent");
static_assert(offsetof(EndEmissiveControlActor_GetControllerComponent, ReturnValue) == 0x000000, "Member 'EndEmissiveControlActor_GetControllerComponent::ReturnValue' has a wrong offset!");

// Function EndGame.EndActionBreakBoxMiniGameBoxActor.ApplyBoxType
// 0x0001 (0x0001 - 0x0000)
struct EndActionBreakBoxMiniGameBoxActor_ApplyBoxType final
{
public:
	EEndBreakBoxMiniGameBoxType                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndActionBreakBoxMiniGameBoxActor_ApplyBoxType) == 0x000001, "Wrong alignment on EndActionBreakBoxMiniGameBoxActor_ApplyBoxType");
static_assert(sizeof(EndActionBreakBoxMiniGameBoxActor_ApplyBoxType) == 0x000001, "Wrong size on EndActionBreakBoxMiniGameBoxActor_ApplyBoxType");
static_assert(offsetof(EndActionBreakBoxMiniGameBoxActor_ApplyBoxType, ReturnValue) == 0x000000, "Member 'EndActionBreakBoxMiniGameBoxActor_ApplyBoxType::ReturnValue' has a wrong offset!");

// Function EndGame.EndActionBreakBoxMiniGameBoxActor.GetBoxType
// 0x0001 (0x0001 - 0x0000)
struct EndActionBreakBoxMiniGameBoxActor_GetBoxType final
{
public:
	EEndBreakBoxMiniGameBoxType                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndActionBreakBoxMiniGameBoxActor_GetBoxType) == 0x000001, "Wrong alignment on EndActionBreakBoxMiniGameBoxActor_GetBoxType");
static_assert(sizeof(EndActionBreakBoxMiniGameBoxActor_GetBoxType) == 0x000001, "Wrong size on EndActionBreakBoxMiniGameBoxActor_GetBoxType");
static_assert(offsetof(EndActionBreakBoxMiniGameBoxActor_GetBoxType, ReturnValue) == 0x000000, "Member 'EndActionBreakBoxMiniGameBoxActor_GetBoxType::ReturnValue' has a wrong offset!");

// Function EndGame.EndActionBreakBoxMiniGameBoxActor.OnComponentHit
// 0x00B0 (0x00B0 - 0x0000)
struct EndActionBreakBoxMiniGameBoxActor_OnComponentHit final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0018(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             Hit;                                               // 0x0028(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndActionBreakBoxMiniGameBoxActor_OnComponentHit) == 0x000008, "Wrong alignment on EndActionBreakBoxMiniGameBoxActor_OnComponentHit");
static_assert(sizeof(EndActionBreakBoxMiniGameBoxActor_OnComponentHit) == 0x0000B0, "Wrong size on EndActionBreakBoxMiniGameBoxActor_OnComponentHit");
static_assert(offsetof(EndActionBreakBoxMiniGameBoxActor_OnComponentHit, HitComponent) == 0x000000, "Member 'EndActionBreakBoxMiniGameBoxActor_OnComponentHit::HitComponent' has a wrong offset!");
static_assert(offsetof(EndActionBreakBoxMiniGameBoxActor_OnComponentHit, OtherActor) == 0x000008, "Member 'EndActionBreakBoxMiniGameBoxActor_OnComponentHit::OtherActor' has a wrong offset!");
static_assert(offsetof(EndActionBreakBoxMiniGameBoxActor_OnComponentHit, OtherComp) == 0x000010, "Member 'EndActionBreakBoxMiniGameBoxActor_OnComponentHit::OtherComp' has a wrong offset!");
static_assert(offsetof(EndActionBreakBoxMiniGameBoxActor_OnComponentHit, NormalImpulse) == 0x000018, "Member 'EndActionBreakBoxMiniGameBoxActor_OnComponentHit::NormalImpulse' has a wrong offset!");
static_assert(offsetof(EndActionBreakBoxMiniGameBoxActor_OnComponentHit, Hit) == 0x000028, "Member 'EndActionBreakBoxMiniGameBoxActor_OnComponentHit::Hit' has a wrong offset!");

// Function EndGame.EndActionBreakBoxMiniGameBoxActor.SetEffectDummyPoint
// 0x0010 (0x0010 - 0x0000)
struct EndActionBreakBoxMiniGameBoxActor_SetEffectDummyPoint final
{
public:
	EEndBreakBoxMiniGameEffect                    Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        Component;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndActionBreakBoxMiniGameBoxActor_SetEffectDummyPoint) == 0x000008, "Wrong alignment on EndActionBreakBoxMiniGameBoxActor_SetEffectDummyPoint");
static_assert(sizeof(EndActionBreakBoxMiniGameBoxActor_SetEffectDummyPoint) == 0x000010, "Wrong size on EndActionBreakBoxMiniGameBoxActor_SetEffectDummyPoint");
static_assert(offsetof(EndActionBreakBoxMiniGameBoxActor_SetEffectDummyPoint, Type) == 0x000000, "Member 'EndActionBreakBoxMiniGameBoxActor_SetEffectDummyPoint::Type' has a wrong offset!");
static_assert(offsetof(EndActionBreakBoxMiniGameBoxActor_SetEffectDummyPoint, Component) == 0x000008, "Member 'EndActionBreakBoxMiniGameBoxActor_SetEffectDummyPoint::Component' has a wrong offset!");

// Function EndGame.EndActionBreakBoxMiniGameBoxActor.SetImpulseRadius
// 0x0004 (0x0004 - 0x0000)
struct EndActionBreakBoxMiniGameBoxActor_SetImpulseRadius final
{
public:
	float                                         InRadius;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndActionBreakBoxMiniGameBoxActor_SetImpulseRadius) == 0x000004, "Wrong alignment on EndActionBreakBoxMiniGameBoxActor_SetImpulseRadius");
static_assert(sizeof(EndActionBreakBoxMiniGameBoxActor_SetImpulseRadius) == 0x000004, "Wrong size on EndActionBreakBoxMiniGameBoxActor_SetImpulseRadius");
static_assert(offsetof(EndActionBreakBoxMiniGameBoxActor_SetImpulseRadius, InRadius) == 0x000000, "Member 'EndActionBreakBoxMiniGameBoxActor_SetImpulseRadius::InRadius' has a wrong offset!");

// Function EndGame.EndActionBreakBoxMiniGameBoxActor.SetReferenceStaticMesh
// 0x0010 (0x0010 - 0x0000)
struct EndActionBreakBoxMiniGameBoxActor_SetReferenceStaticMesh final
{
public:
	EEndBreakBoxMiniGameBoxType                   Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMeshComponent*                   StaticMeshComp;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndActionBreakBoxMiniGameBoxActor_SetReferenceStaticMesh) == 0x000008, "Wrong alignment on EndActionBreakBoxMiniGameBoxActor_SetReferenceStaticMesh");
static_assert(sizeof(EndActionBreakBoxMiniGameBoxActor_SetReferenceStaticMesh) == 0x000010, "Wrong size on EndActionBreakBoxMiniGameBoxActor_SetReferenceStaticMesh");
static_assert(offsetof(EndActionBreakBoxMiniGameBoxActor_SetReferenceStaticMesh, Type) == 0x000000, "Member 'EndActionBreakBoxMiniGameBoxActor_SetReferenceStaticMesh::Type' has a wrong offset!");
static_assert(offsetof(EndActionBreakBoxMiniGameBoxActor_SetReferenceStaticMesh, StaticMeshComp) == 0x000008, "Member 'EndActionBreakBoxMiniGameBoxActor_SetReferenceStaticMesh::StaticMeshComp' has a wrong offset!");

// Function EndGame.EndEnemyDetailWindow.OnAcquisionSetup
// 0x0010 (0x0010 - 0x0000)
struct EndEnemyDetailWindow_OnAcquisionSetup final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndEnemyDetailWindow_OnAcquisionSetup) == 0x000008, "Wrong alignment on EndEnemyDetailWindow_OnAcquisionSetup");
static_assert(sizeof(EndEnemyDetailWindow_OnAcquisionSetup) == 0x000010, "Wrong size on EndEnemyDetailWindow_OnAcquisionSetup");
static_assert(offsetof(EndEnemyDetailWindow_OnAcquisionSetup, ItemWidget) == 0x000000, "Member 'EndEnemyDetailWindow_OnAcquisionSetup::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndEnemyDetailWindow_OnAcquisionSetup, ItemIndex) == 0x000008, "Member 'EndEnemyDetailWindow_OnAcquisionSetup::ItemIndex' has a wrong offset!");

// Function EndGame.EndEnemyDetailWindow.OnBattleAbilitySetup
// 0x0010 (0x0010 - 0x0000)
struct EndEnemyDetailWindow_OnBattleAbilitySetup final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndEnemyDetailWindow_OnBattleAbilitySetup) == 0x000008, "Wrong alignment on EndEnemyDetailWindow_OnBattleAbilitySetup");
static_assert(sizeof(EndEnemyDetailWindow_OnBattleAbilitySetup) == 0x000010, "Wrong size on EndEnemyDetailWindow_OnBattleAbilitySetup");
static_assert(offsetof(EndEnemyDetailWindow_OnBattleAbilitySetup, ItemWidget) == 0x000000, "Member 'EndEnemyDetailWindow_OnBattleAbilitySetup::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndEnemyDetailWindow_OnBattleAbilitySetup, ItemIndex) == 0x000008, "Member 'EndEnemyDetailWindow_OnBattleAbilitySetup::ItemIndex' has a wrong offset!");

// Function EndGame.EndEnemyDetailWindow.OnBattleLogSetup
// 0x0010 (0x0010 - 0x0000)
struct EndEnemyDetailWindow_OnBattleLogSetup final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndEnemyDetailWindow_OnBattleLogSetup) == 0x000008, "Wrong alignment on EndEnemyDetailWindow_OnBattleLogSetup");
static_assert(sizeof(EndEnemyDetailWindow_OnBattleLogSetup) == 0x000010, "Wrong size on EndEnemyDetailWindow_OnBattleLogSetup");
static_assert(offsetof(EndEnemyDetailWindow_OnBattleLogSetup, ItemWidget) == 0x000000, "Member 'EndEnemyDetailWindow_OnBattleLogSetup::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndEnemyDetailWindow_OnBattleLogSetup, ItemIndex) == 0x000008, "Member 'EndEnemyDetailWindow_OnBattleLogSetup::ItemIndex' has a wrong offset!");

// Function EndGame.EndEnemyDetailWindow.OnBufferSetup
// 0x0010 (0x0010 - 0x0000)
struct EndEnemyDetailWindow_OnBufferSetup final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndEnemyDetailWindow_OnBufferSetup) == 0x000008, "Wrong alignment on EndEnemyDetailWindow_OnBufferSetup");
static_assert(sizeof(EndEnemyDetailWindow_OnBufferSetup) == 0x000010, "Wrong size on EndEnemyDetailWindow_OnBufferSetup");
static_assert(offsetof(EndEnemyDetailWindow_OnBufferSetup, ItemWidget) == 0x000000, "Member 'EndEnemyDetailWindow_OnBufferSetup::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndEnemyDetailWindow_OnBufferSetup, ItemIndex) == 0x000008, "Member 'EndEnemyDetailWindow_OnBufferSetup::ItemIndex' has a wrong offset!");

// Function EndGame.EndEnemyDetailWindow.OnBuffIconSetup
// 0x0010 (0x0010 - 0x0000)
struct EndEnemyDetailWindow_OnBuffIconSetup final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndEnemyDetailWindow_OnBuffIconSetup) == 0x000008, "Wrong alignment on EndEnemyDetailWindow_OnBuffIconSetup");
static_assert(sizeof(EndEnemyDetailWindow_OnBuffIconSetup) == 0x000010, "Wrong size on EndEnemyDetailWindow_OnBuffIconSetup");
static_assert(offsetof(EndEnemyDetailWindow_OnBuffIconSetup, ItemWidget) == 0x000000, "Member 'EndEnemyDetailWindow_OnBuffIconSetup::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndEnemyDetailWindow_OnBuffIconSetup, CellIndex) == 0x000008, "Member 'EndEnemyDetailWindow_OnBuffIconSetup::CellIndex' has a wrong offset!");

// Function EndGame.EndEnemyDetailWindow.OnDebuffIconSetup
// 0x0010 (0x0010 - 0x0000)
struct EndEnemyDetailWindow_OnDebuffIconSetup final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndEnemyDetailWindow_OnDebuffIconSetup) == 0x000008, "Wrong alignment on EndEnemyDetailWindow_OnDebuffIconSetup");
static_assert(sizeof(EndEnemyDetailWindow_OnDebuffIconSetup) == 0x000010, "Wrong size on EndEnemyDetailWindow_OnDebuffIconSetup");
static_assert(offsetof(EndEnemyDetailWindow_OnDebuffIconSetup, ItemWidget) == 0x000000, "Member 'EndEnemyDetailWindow_OnDebuffIconSetup::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndEnemyDetailWindow_OnDebuffIconSetup, CellIndex) == 0x000008, "Member 'EndEnemyDetailWindow_OnDebuffIconSetup::CellIndex' has a wrong offset!");

// Function EndGame.EndEnemyDetailWindow.OnDropItemListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndEnemyDetailWindow_OnDropItemListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndEnemyDetailWindow_OnDropItemListSetupItem) == 0x000008, "Wrong alignment on EndEnemyDetailWindow_OnDropItemListSetupItem");
static_assert(sizeof(EndEnemyDetailWindow_OnDropItemListSetupItem) == 0x000010, "Wrong size on EndEnemyDetailWindow_OnDropItemListSetupItem");
static_assert(offsetof(EndEnemyDetailWindow_OnDropItemListSetupItem, ItemWidget) == 0x000000, "Member 'EndEnemyDetailWindow_OnDropItemListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndEnemyDetailWindow_OnDropItemListSetupItem, CellIndex) == 0x000008, "Member 'EndEnemyDetailWindow_OnDropItemListSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndEnemyDetailWindow.OnRareDropItemListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndEnemyDetailWindow_OnRareDropItemListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndEnemyDetailWindow_OnRareDropItemListSetupItem) == 0x000008, "Wrong alignment on EndEnemyDetailWindow_OnRareDropItemListSetupItem");
static_assert(sizeof(EndEnemyDetailWindow_OnRareDropItemListSetupItem) == 0x000010, "Wrong size on EndEnemyDetailWindow_OnRareDropItemListSetupItem");
static_assert(offsetof(EndEnemyDetailWindow_OnRareDropItemListSetupItem, ItemWidget) == 0x000000, "Member 'EndEnemyDetailWindow_OnRareDropItemListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndEnemyDetailWindow_OnRareDropItemListSetupItem, CellIndex) == 0x000008, "Member 'EndEnemyDetailWindow_OnRareDropItemListSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndEnemyDetailWindow.OnResistanceIconListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndEnemyDetailWindow_OnResistanceIconListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndEnemyDetailWindow_OnResistanceIconListSetupItem) == 0x000008, "Wrong alignment on EndEnemyDetailWindow_OnResistanceIconListSetupItem");
static_assert(sizeof(EndEnemyDetailWindow_OnResistanceIconListSetupItem) == 0x000010, "Wrong size on EndEnemyDetailWindow_OnResistanceIconListSetupItem");
static_assert(offsetof(EndEnemyDetailWindow_OnResistanceIconListSetupItem, ItemWidget) == 0x000000, "Member 'EndEnemyDetailWindow_OnResistanceIconListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndEnemyDetailWindow_OnResistanceIconListSetupItem, CellIndex) == 0x000008, "Member 'EndEnemyDetailWindow_OnResistanceIconListSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndEnemyDetailWindow.OnResistanceListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndEnemyDetailWindow_OnResistanceListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndEnemyDetailWindow_OnResistanceListSetupItem) == 0x000008, "Wrong alignment on EndEnemyDetailWindow_OnResistanceListSetupItem");
static_assert(sizeof(EndEnemyDetailWindow_OnResistanceListSetupItem) == 0x000010, "Wrong size on EndEnemyDetailWindow_OnResistanceListSetupItem");
static_assert(offsetof(EndEnemyDetailWindow_OnResistanceListSetupItem, ItemWidget) == 0x000000, "Member 'EndEnemyDetailWindow_OnResistanceListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndEnemyDetailWindow_OnResistanceListSetupItem, CellIndex) == 0x000008, "Member 'EndEnemyDetailWindow_OnResistanceListSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndEnemyDetailWindow.OnStealListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndEnemyDetailWindow_OnStealListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndEnemyDetailWindow_OnStealListSetupItem) == 0x000008, "Wrong alignment on EndEnemyDetailWindow_OnStealListSetupItem");
static_assert(sizeof(EndEnemyDetailWindow_OnStealListSetupItem) == 0x000010, "Wrong size on EndEnemyDetailWindow_OnStealListSetupItem");
static_assert(offsetof(EndEnemyDetailWindow_OnStealListSetupItem, ItemWidget) == 0x000000, "Member 'EndEnemyDetailWindow_OnStealListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndEnemyDetailWindow_OnStealListSetupItem, CellIndex) == 0x000008, "Member 'EndEnemyDetailWindow_OnStealListSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndActionSlum7DartsRankWindowWidget.OnSetupItems
// 0x0010 (0x0010 - 0x0000)
struct EndActionSlum7DartsRankWindowWidget_OnSetupItems final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndActionSlum7DartsRankWindowWidget_OnSetupItems) == 0x000008, "Wrong alignment on EndActionSlum7DartsRankWindowWidget_OnSetupItems");
static_assert(sizeof(EndActionSlum7DartsRankWindowWidget_OnSetupItems) == 0x000010, "Wrong size on EndActionSlum7DartsRankWindowWidget_OnSetupItems");
static_assert(offsetof(EndActionSlum7DartsRankWindowWidget_OnSetupItems, ItemWidget) == 0x000000, "Member 'EndActionSlum7DartsRankWindowWidget_OnSetupItems::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndActionSlum7DartsRankWindowWidget_OnSetupItems, Index_0) == 0x000008, "Member 'EndActionSlum7DartsRankWindowWidget_OnSetupItems::Index_0' has a wrong offset!");

// Function EndGame.EndBikeTriggerBox.OnOverlapBegin
// 0x0010 (0x0010 - 0x0000)
struct EndBikeTriggerBox_OnOverlapBegin final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBikeTriggerBox_OnOverlapBegin) == 0x000008, "Wrong alignment on EndBikeTriggerBox_OnOverlapBegin");
static_assert(sizeof(EndBikeTriggerBox_OnOverlapBegin) == 0x000010, "Wrong size on EndBikeTriggerBox_OnOverlapBegin");
static_assert(offsetof(EndBikeTriggerBox_OnOverlapBegin, OverlappedActor) == 0x000000, "Member 'EndBikeTriggerBox_OnOverlapBegin::OverlappedActor' has a wrong offset!");
static_assert(offsetof(EndBikeTriggerBox_OnOverlapBegin, OtherActor) == 0x000008, "Member 'EndBikeTriggerBox_OnOverlapBegin::OtherActor' has a wrong offset!");

// Function EndGame.EndBikeTriggerBox.OnOverlapEnd
// 0x0010 (0x0010 - 0x0000)
struct EndBikeTriggerBox_OnOverlapEnd final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBikeTriggerBox_OnOverlapEnd) == 0x000008, "Wrong alignment on EndBikeTriggerBox_OnOverlapEnd");
static_assert(sizeof(EndBikeTriggerBox_OnOverlapEnd) == 0x000010, "Wrong size on EndBikeTriggerBox_OnOverlapEnd");
static_assert(offsetof(EndBikeTriggerBox_OnOverlapEnd, OverlappedActor) == 0x000000, "Member 'EndBikeTriggerBox_OnOverlapEnd::OverlappedActor' has a wrong offset!");
static_assert(offsetof(EndBikeTriggerBox_OnOverlapEnd, OtherActor) == 0x000008, "Member 'EndBikeTriggerBox_OnOverlapEnd::OtherActor' has a wrong offset!");

// Function EndGame.EndActivityAPI.ActivityInit
// 0x0020 (0x0020 - 0x0000)
struct EndActivityAPI_ActivityInit final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndActivityAPI_ActivityInit) == 0x000008, "Wrong alignment on EndActivityAPI_ActivityInit");
static_assert(sizeof(EndActivityAPI_ActivityInit) == 0x000020, "Wrong size on EndActivityAPI_ActivityInit");
static_assert(offsetof(EndActivityAPI_ActivityInit, WorldContextObject) == 0x000000, "Member 'EndActivityAPI_ActivityInit::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EndActivityAPI_ActivityInit, LatentInfo) == 0x000008, "Member 'EndActivityAPI_ActivityInit::LatentInfo' has a wrong offset!");

// Function EndGame.EndActivityAPI.GetActivityInitResult
// 0x0001 (0x0001 - 0x0000)
struct EndActivityAPI_GetActivityInitResult final
{
public:
	EEndActivityInitResult                        ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndActivityAPI_GetActivityInitResult) == 0x000001, "Wrong alignment on EndActivityAPI_GetActivityInitResult");
static_assert(sizeof(EndActivityAPI_GetActivityInitResult) == 0x000001, "Wrong size on EndActivityAPI_GetActivityInitResult");
static_assert(offsetof(EndActivityAPI_GetActivityInitResult, ReturnValue) == 0x000000, "Member 'EndActivityAPI_GetActivityInitResult::ReturnValue' has a wrong offset!");

// Function EndGame.EndBonamikGlobalWindActor.SetDirection
// 0x000C (0x000C - 0x0000)
struct EndBonamikGlobalWindActor_SetDirection final
{
public:
	struct FVector                                InDirection;                                       // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBonamikGlobalWindActor_SetDirection) == 0x000004, "Wrong alignment on EndBonamikGlobalWindActor_SetDirection");
static_assert(sizeof(EndBonamikGlobalWindActor_SetDirection) == 0x00000C, "Wrong size on EndBonamikGlobalWindActor_SetDirection");
static_assert(offsetof(EndBonamikGlobalWindActor_SetDirection, InDirection) == 0x000000, "Member 'EndBonamikGlobalWindActor_SetDirection::InDirection' has a wrong offset!");

// Function EndGame.EndBonamikGlobalWindActor.SetWindData
// 0x0008 (0x0008 - 0x0000)
struct EndBonamikGlobalWindActor_SetWindData final
{
public:
	class UEndBonamikWindData*                    InWindData;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBonamikGlobalWindActor_SetWindData) == 0x000008, "Wrong alignment on EndBonamikGlobalWindActor_SetWindData");
static_assert(sizeof(EndBonamikGlobalWindActor_SetWindData) == 0x000008, "Wrong size on EndBonamikGlobalWindActor_SetWindData");
static_assert(offsetof(EndBonamikGlobalWindActor_SetWindData, InWindData) == 0x000000, "Member 'EndBonamikGlobalWindActor_SetWindData::InWindData' has a wrong offset!");

// Function EndGame.EndInvalidationBox.SetCanCache
// 0x0001 (0x0001 - 0x0000)
struct EndInvalidationBox_SetCanCache final
{
public:
	bool                                          CanCache;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndInvalidationBox_SetCanCache) == 0x000001, "Wrong alignment on EndInvalidationBox_SetCanCache");
static_assert(sizeof(EndInvalidationBox_SetCanCache) == 0x000001, "Wrong size on EndInvalidationBox_SetCanCache");
static_assert(offsetof(EndInvalidationBox_SetCanCache, CanCache) == 0x000000, "Member 'EndInvalidationBox_SetCanCache::CanCache' has a wrong offset!");

// Function EndGame.EndInvalidationBox.GetCanCache
// 0x0001 (0x0001 - 0x0000)
struct EndInvalidationBox_GetCanCache final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndInvalidationBox_GetCanCache) == 0x000001, "Wrong alignment on EndInvalidationBox_GetCanCache");
static_assert(sizeof(EndInvalidationBox_GetCanCache) == 0x000001, "Wrong size on EndInvalidationBox_GetCanCache");
static_assert(offsetof(EndInvalidationBox_GetCanCache, ReturnValue) == 0x000000, "Member 'EndInvalidationBox_GetCanCache::ReturnValue' has a wrong offset!");

// Function EndGame.EndMainMenuListBase.OnCellPressed
// 0x0004 (0x0004 - 0x0000)
struct EndMainMenuListBase_OnCellPressed final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainMenuListBase_OnCellPressed) == 0x000004, "Wrong alignment on EndMainMenuListBase_OnCellPressed");
static_assert(sizeof(EndMainMenuListBase_OnCellPressed) == 0x000004, "Wrong size on EndMainMenuListBase_OnCellPressed");
static_assert(offsetof(EndMainMenuListBase_OnCellPressed, CellIndex) == 0x000000, "Member 'EndMainMenuListBase_OnCellPressed::CellIndex' has a wrong offset!");

// Function EndGame.EndBorderSlot.SetHorizontalAlignment
// 0x0001 (0x0001 - 0x0000)
struct EndBorderSlot_SetHorizontalAlignment final
{
public:
	EHorizontalAlignment                          InHorizontalAlignment;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBorderSlot_SetHorizontalAlignment) == 0x000001, "Wrong alignment on EndBorderSlot_SetHorizontalAlignment");
static_assert(sizeof(EndBorderSlot_SetHorizontalAlignment) == 0x000001, "Wrong size on EndBorderSlot_SetHorizontalAlignment");
static_assert(offsetof(EndBorderSlot_SetHorizontalAlignment, InHorizontalAlignment) == 0x000000, "Member 'EndBorderSlot_SetHorizontalAlignment::InHorizontalAlignment' has a wrong offset!");

// Function EndGame.EndBorderSlot.SetPadding
// 0x0010 (0x0010 - 0x0000)
struct EndBorderSlot_SetPadding final
{
public:
	struct FMargin                                InPadding;                                         // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBorderSlot_SetPadding) == 0x000004, "Wrong alignment on EndBorderSlot_SetPadding");
static_assert(sizeof(EndBorderSlot_SetPadding) == 0x000010, "Wrong size on EndBorderSlot_SetPadding");
static_assert(offsetof(EndBorderSlot_SetPadding, InPadding) == 0x000000, "Member 'EndBorderSlot_SetPadding::InPadding' has a wrong offset!");

// Function EndGame.EndBorderSlot.SetVerticalAlignment
// 0x0001 (0x0001 - 0x0000)
struct EndBorderSlot_SetVerticalAlignment final
{
public:
	EVerticalAlignment                            InVerticalAlignment;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBorderSlot_SetVerticalAlignment) == 0x000001, "Wrong alignment on EndBorderSlot_SetVerticalAlignment");
static_assert(sizeof(EndBorderSlot_SetVerticalAlignment) == 0x000001, "Wrong size on EndBorderSlot_SetVerticalAlignment");
static_assert(offsetof(EndBorderSlot_SetVerticalAlignment, InVerticalAlignment) == 0x000000, "Member 'EndBorderSlot_SetVerticalAlignment::InVerticalAlignment' has a wrong offset!");

// Function EndGame.EndAITimerComponent.AddTimer
// 0x000C (0x000C - 0x0000)
struct EndAITimerComponent_AddTimer final
{
public:
	float                                         InTime;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InName;                                            // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAITimerComponent_AddTimer) == 0x000004, "Wrong alignment on EndAITimerComponent_AddTimer");
static_assert(sizeof(EndAITimerComponent_AddTimer) == 0x00000C, "Wrong size on EndAITimerComponent_AddTimer");
static_assert(offsetof(EndAITimerComponent_AddTimer, InTime) == 0x000000, "Member 'EndAITimerComponent_AddTimer::InTime' has a wrong offset!");
static_assert(offsetof(EndAITimerComponent_AddTimer, InName) == 0x000004, "Member 'EndAITimerComponent_AddTimer::InName' has a wrong offset!");

// Function EndGame.EndAITimerComponent.IsRunning
// 0x0001 (0x0001 - 0x0000)
struct EndAITimerComponent_IsRunning final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAITimerComponent_IsRunning) == 0x000001, "Wrong alignment on EndAITimerComponent_IsRunning");
static_assert(sizeof(EndAITimerComponent_IsRunning) == 0x000001, "Wrong size on EndAITimerComponent_IsRunning");
static_assert(offsetof(EndAITimerComponent_IsRunning, ReturnValue) == 0x000000, "Member 'EndAITimerComponent_IsRunning::ReturnValue' has a wrong offset!");

// Function EndGame.EndAITimerComponent.IsRunningFromName
// 0x000C (0x000C - 0x0000)
struct EndAITimerComponent_IsRunningFromName final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndAITimerComponent_IsRunningFromName) == 0x000004, "Wrong alignment on EndAITimerComponent_IsRunningFromName");
static_assert(sizeof(EndAITimerComponent_IsRunningFromName) == 0x00000C, "Wrong size on EndAITimerComponent_IsRunningFromName");
static_assert(offsetof(EndAITimerComponent_IsRunningFromName, InName) == 0x000000, "Member 'EndAITimerComponent_IsRunningFromName::InName' has a wrong offset!");
static_assert(offsetof(EndAITimerComponent_IsRunningFromName, ReturnValue) == 0x000008, "Member 'EndAITimerComponent_IsRunningFromName::ReturnValue' has a wrong offset!");

// Function EndGame.EndAITimerComponent.NotRunning
// 0x0001 (0x0001 - 0x0000)
struct EndAITimerComponent_NotRunning final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAITimerComponent_NotRunning) == 0x000001, "Wrong alignment on EndAITimerComponent_NotRunning");
static_assert(sizeof(EndAITimerComponent_NotRunning) == 0x000001, "Wrong size on EndAITimerComponent_NotRunning");
static_assert(offsetof(EndAITimerComponent_NotRunning, ReturnValue) == 0x000000, "Member 'EndAITimerComponent_NotRunning::ReturnValue' has a wrong offset!");

// Function EndGame.EndAITimerComponent.NotRunningFromName
// 0x000C (0x000C - 0x0000)
struct EndAITimerComponent_NotRunningFromName final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndAITimerComponent_NotRunningFromName) == 0x000004, "Wrong alignment on EndAITimerComponent_NotRunningFromName");
static_assert(sizeof(EndAITimerComponent_NotRunningFromName) == 0x00000C, "Wrong size on EndAITimerComponent_NotRunningFromName");
static_assert(offsetof(EndAITimerComponent_NotRunningFromName, InName) == 0x000000, "Member 'EndAITimerComponent_NotRunningFromName::InName' has a wrong offset!");
static_assert(offsetof(EndAITimerComponent_NotRunningFromName, ReturnValue) == 0x000008, "Member 'EndAITimerComponent_NotRunningFromName::ReturnValue' has a wrong offset!");

// Function EndGame.EndAITimerComponent.START
// 0x000C (0x000C - 0x0000)
struct EndAITimerComponent_START final
{
public:
	float                                         InTime;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InName;                                            // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAITimerComponent_START) == 0x000004, "Wrong alignment on EndAITimerComponent_START");
static_assert(sizeof(EndAITimerComponent_START) == 0x00000C, "Wrong size on EndAITimerComponent_START");
static_assert(offsetof(EndAITimerComponent_START, InTime) == 0x000000, "Member 'EndAITimerComponent_START::InTime' has a wrong offset!");
static_assert(offsetof(EndAITimerComponent_START, InName) == 0x000004, "Member 'EndAITimerComponent_START::InName' has a wrong offset!");

// Function EndGame.EndAITimerComponent.Suspend
// 0x0008 (0x0008 - 0x0000)
struct EndAITimerComponent_Suspend final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAITimerComponent_Suspend) == 0x000004, "Wrong alignment on EndAITimerComponent_Suspend");
static_assert(sizeof(EndAITimerComponent_Suspend) == 0x000008, "Wrong size on EndAITimerComponent_Suspend");
static_assert(offsetof(EndAITimerComponent_Suspend, InName) == 0x000000, "Member 'EndAITimerComponent_Suspend::InName' has a wrong offset!");

// Function EndGame.EndFieldAPI.ActivateCameraFlavorReset
// 0x0008 (0x0008 - 0x0000)
struct EndFieldAPI_ActivateCameraFlavorReset final
{
public:
	float                                         Pitch;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Yaw;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndFieldAPI_ActivateCameraFlavorReset) == 0x000004, "Wrong alignment on EndFieldAPI_ActivateCameraFlavorReset");
static_assert(sizeof(EndFieldAPI_ActivateCameraFlavorReset) == 0x000008, "Wrong size on EndFieldAPI_ActivateCameraFlavorReset");
static_assert(offsetof(EndFieldAPI_ActivateCameraFlavorReset, Pitch) == 0x000000, "Member 'EndFieldAPI_ActivateCameraFlavorReset::Pitch' has a wrong offset!");
static_assert(offsetof(EndFieldAPI_ActivateCameraFlavorReset, Yaw) == 0x000004, "Member 'EndFieldAPI_ActivateCameraFlavorReset::Yaw' has a wrong offset!");

// Function EndGame.EndFieldAPI.CallbackCreatePlayerActor
// 0x0010 (0x0010 - 0x0000)
struct EndFieldAPI_CallbackCreatePlayerActor final
{
public:
	class FName                                   partyActorName;                                    // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Actor;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndFieldAPI_CallbackCreatePlayerActor) == 0x000008, "Wrong alignment on EndFieldAPI_CallbackCreatePlayerActor");
static_assert(sizeof(EndFieldAPI_CallbackCreatePlayerActor) == 0x000010, "Wrong size on EndFieldAPI_CallbackCreatePlayerActor");
static_assert(offsetof(EndFieldAPI_CallbackCreatePlayerActor, partyActorName) == 0x000000, "Member 'EndFieldAPI_CallbackCreatePlayerActor::partyActorName' has a wrong offset!");
static_assert(offsetof(EndFieldAPI_CallbackCreatePlayerActor, Actor) == 0x000008, "Member 'EndFieldAPI_CallbackCreatePlayerActor::Actor' has a wrong offset!");

// Function EndGame.EndFieldAPI.CheckExclusion
// 0x0002 (0x0002 - 0x0000)
struct EndFieldAPI_CheckExclusion final
{
public:
	EndFieldExclusion                             enumValue;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndFieldAPI_CheckExclusion) == 0x000001, "Wrong alignment on EndFieldAPI_CheckExclusion");
static_assert(sizeof(EndFieldAPI_CheckExclusion) == 0x000002, "Wrong size on EndFieldAPI_CheckExclusion");
static_assert(offsetof(EndFieldAPI_CheckExclusion, enumValue) == 0x000000, "Member 'EndFieldAPI_CheckExclusion::enumValue' has a wrong offset!");
static_assert(offsetof(EndFieldAPI_CheckExclusion, ReturnValue) == 0x000001, "Member 'EndFieldAPI_CheckExclusion::ReturnValue' has a wrong offset!");

// Function EndGame.EndFieldAPI.ClearDebugFlag
// 0x0001 (0x0001 - 0x0000)
struct EndFieldAPI_ClearDebugFlag final
{
public:
	EEndDebugFlag                                 Flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndFieldAPI_ClearDebugFlag) == 0x000001, "Wrong alignment on EndFieldAPI_ClearDebugFlag");
static_assert(sizeof(EndFieldAPI_ClearDebugFlag) == 0x000001, "Wrong size on EndFieldAPI_ClearDebugFlag");
static_assert(offsetof(EndFieldAPI_ClearDebugFlag, Flag) == 0x000000, "Member 'EndFieldAPI_ClearDebugFlag::Flag' has a wrong offset!");

// Function EndGame.EndFieldAPI.DelayFinishBattleScene
// 0x000C (0x000C - 0x0000)
struct EndFieldAPI_DelayFinishBattleScene final
{
public:
	class FName                                   baseBattleSceneId;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DelayTime;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndFieldAPI_DelayFinishBattleScene) == 0x000004, "Wrong alignment on EndFieldAPI_DelayFinishBattleScene");
static_assert(sizeof(EndFieldAPI_DelayFinishBattleScene) == 0x00000C, "Wrong size on EndFieldAPI_DelayFinishBattleScene");
static_assert(offsetof(EndFieldAPI_DelayFinishBattleScene, baseBattleSceneId) == 0x000000, "Member 'EndFieldAPI_DelayFinishBattleScene::baseBattleSceneId' has a wrong offset!");
static_assert(offsetof(EndFieldAPI_DelayFinishBattleScene, DelayTime) == 0x000008, "Member 'EndFieldAPI_DelayFinishBattleScene::DelayTime' has a wrong offset!");

// Function EndGame.EndFieldAPI.EntryLocation
// 0x0008 (0x0008 - 0x0000)
struct EndFieldAPI_EntryLocation final
{
public:
	class FName                                   LocationName;                                      // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndFieldAPI_EntryLocation) == 0x000004, "Wrong alignment on EndFieldAPI_EntryLocation");
static_assert(sizeof(EndFieldAPI_EntryLocation) == 0x000008, "Wrong size on EndFieldAPI_EntryLocation");
static_assert(offsetof(EndFieldAPI_EntryLocation, LocationName) == 0x000000, "Member 'EndFieldAPI_EntryLocation::LocationName' has a wrong offset!");

// Function EndGame.EndFieldAPI.FieldAiLookAtTarget
// 0x0024 (0x0024 - 0x0000)
struct EndFieldAPI_FieldAiLookAtTarget final
{
public:
	class FName                                   TargetActorName;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LookAtTargetActorName;                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LookAtTargetLocation;                              // 0x0010(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReactionDistance;                                  // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InIgnoreLookAtDeactiveAngle;                       // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InIsLookAwayFromActor;                             // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0022(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23[0x1];                                       // 0x0023(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndFieldAPI_FieldAiLookAtTarget) == 0x000004, "Wrong alignment on EndFieldAPI_FieldAiLookAtTarget");
static_assert(sizeof(EndFieldAPI_FieldAiLookAtTarget) == 0x000024, "Wrong size on EndFieldAPI_FieldAiLookAtTarget");
static_assert(offsetof(EndFieldAPI_FieldAiLookAtTarget, TargetActorName) == 0x000000, "Member 'EndFieldAPI_FieldAiLookAtTarget::TargetActorName' has a wrong offset!");
static_assert(offsetof(EndFieldAPI_FieldAiLookAtTarget, LookAtTargetActorName) == 0x000008, "Member 'EndFieldAPI_FieldAiLookAtTarget::LookAtTargetActorName' has a wrong offset!");
static_assert(offsetof(EndFieldAPI_FieldAiLookAtTarget, LookAtTargetLocation) == 0x000010, "Member 'EndFieldAPI_FieldAiLookAtTarget::LookAtTargetLocation' has a wrong offset!");
static_assert(offsetof(EndFieldAPI_FieldAiLookAtTarget, ReactionDistance) == 0x00001C, "Member 'EndFieldAPI_FieldAiLookAtTarget::ReactionDistance' has a wrong offset!");
static_assert(offsetof(EndFieldAPI_FieldAiLookAtTarget, InIgnoreLookAtDeactiveAngle) == 0x000020, "Member 'EndFieldAPI_FieldAiLookAtTarget::InIgnoreLookAtDeactiveAngle' has a wrong offset!");
static_assert(offsetof(EndFieldAPI_FieldAiLookAtTarget, InIsLookAwayFromActor) == 0x000021, "Member 'EndFieldAPI_FieldAiLookAtTarget::InIsLookAwayFromActor' has a wrong offset!");
static_assert(offsetof(EndFieldAPI_FieldAiLookAtTarget, ReturnValue) == 0x000022, "Member 'EndFieldAPI_FieldAiLookAtTarget::ReturnValue' has a wrong offset!");

// Function EndGame.EndFieldAPI.FindEndTargetPoint
// 0x0040 (0x0040 - 0x0000)
struct EndFieldAPI_FindEndTargetPoint final
{
public:
	class FName                                   NodeName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ReturnValue;                                       // 0x0010(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndFieldAPI_FindEndTargetPoint) == 0x000010, "Wrong alignment on EndFieldAPI_FindEndTargetPoint");
static_assert(sizeof(EndFieldAPI_FindEndTargetPoint) == 0x000040, "Wrong size on EndFieldAPI_FindEndTargetPoint");
static_assert(offsetof(EndFieldAPI_FindEndTargetPoint, NodeName) == 0x000000, "Member 'EndFieldAPI_FindEndTargetPoint::NodeName' has a wrong offset!");
static_assert(offsetof(EndFieldAPI_FindEndTargetPoint, ReturnValue) == 0x000010, "Member 'EndFieldAPI_FindEndTargetPoint::ReturnValue' has a wrong offset!");

// Function EndGame.EndFieldAPI.FinishBattleScene
// 0x0008 (0x0008 - 0x0000)
struct EndFieldAPI_FinishBattleScene final
{
public:
	class FName                                   baseBattleSceneId;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndFieldAPI_FinishBattleScene) == 0x000004, "Wrong alignment on EndFieldAPI_FinishBattleScene");
static_assert(sizeof(EndFieldAPI_FinishBattleScene) == 0x000008, "Wrong size on EndFieldAPI_FinishBattleScene");
static_assert(offsetof(EndFieldAPI_FinishBattleScene, baseBattleSceneId) == 0x000000, "Member 'EndFieldAPI_FinishBattleScene::baseBattleSceneId' has a wrong offset!");

// Function EndGame.EndFieldAPI.GetEndTargetPointLocation
// 0x0014 (0x0014 - 0x0000)
struct EndFieldAPI_GetEndTargetPointLocation final
{
public:
	class FName                                   NodeName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0008(0x000C)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndFieldAPI_GetEndTargetPointLocation) == 0x000004, "Wrong alignment on EndFieldAPI_GetEndTargetPointLocation");
static_assert(sizeof(EndFieldAPI_GetEndTargetPointLocation) == 0x000014, "Wrong size on EndFieldAPI_GetEndTargetPointLocation");
static_assert(offsetof(EndFieldAPI_GetEndTargetPointLocation, NodeName) == 0x000000, "Member 'EndFieldAPI_GetEndTargetPointLocation::NodeName' has a wrong offset!");
static_assert(offsetof(EndFieldAPI_GetEndTargetPointLocation, ReturnValue) == 0x000008, "Member 'EndFieldAPI_GetEndTargetPointLocation::ReturnValue' has a wrong offset!");

// Function EndGame.EndFieldAPI.GetEndTargetPointTransform
// 0x0040 (0x0040 - 0x0000)
struct EndFieldAPI_GetEndTargetPointTransform final
{
public:
	class FName                                   NodeName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ReturnValue;                                       // 0x0010(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndFieldAPI_GetEndTargetPointTransform) == 0x000010, "Wrong alignment on EndFieldAPI_GetEndTargetPointTransform");
static_assert(sizeof(EndFieldAPI_GetEndTargetPointTransform) == 0x000040, "Wrong size on EndFieldAPI_GetEndTargetPointTransform");
static_assert(offsetof(EndFieldAPI_GetEndTargetPointTransform, NodeName) == 0x000000, "Member 'EndFieldAPI_GetEndTargetPointTransform::NodeName' has a wrong offset!");
static_assert(offsetof(EndFieldAPI_GetEndTargetPointTransform, ReturnValue) == 0x000010, "Member 'EndFieldAPI_GetEndTargetPointTransform::ReturnValue' has a wrong offset!");

// Function EndGame.EndFieldAPI.IsEnableFieldControler
// 0x0002 (0x0002 - 0x0000)
struct EndFieldAPI_IsEnableFieldControler final
{
public:
	bool                                          bEncount;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndFieldAPI_IsEnableFieldControler) == 0x000001, "Wrong alignment on EndFieldAPI_IsEnableFieldControler");
static_assert(sizeof(EndFieldAPI_IsEnableFieldControler) == 0x000002, "Wrong size on EndFieldAPI_IsEnableFieldControler");
static_assert(offsetof(EndFieldAPI_IsEnableFieldControler, bEncount) == 0x000000, "Member 'EndFieldAPI_IsEnableFieldControler::bEncount' has a wrong offset!");
static_assert(offsetof(EndFieldAPI_IsEnableFieldControler, ReturnValue) == 0x000001, "Member 'EndFieldAPI_IsEnableFieldControler::ReturnValue' has a wrong offset!");

// Function EndGame.EndFieldAPI.IsEnableFieldFullScreenMainMenu
// 0x0001 (0x0001 - 0x0000)
struct EndFieldAPI_IsEnableFieldFullScreenMainMenu final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndFieldAPI_IsEnableFieldFullScreenMainMenu) == 0x000001, "Wrong alignment on EndFieldAPI_IsEnableFieldFullScreenMainMenu");
static_assert(sizeof(EndFieldAPI_IsEnableFieldFullScreenMainMenu) == 0x000001, "Wrong size on EndFieldAPI_IsEnableFieldFullScreenMainMenu");
static_assert(offsetof(EndFieldAPI_IsEnableFieldFullScreenMainMenu, ReturnValue) == 0x000000, "Member 'EndFieldAPI_IsEnableFieldFullScreenMainMenu::ReturnValue' has a wrong offset!");

// Function EndGame.EndFieldAPI.IsEnableSkipPauseMenu
// 0x0001 (0x0001 - 0x0000)
struct EndFieldAPI_IsEnableSkipPauseMenu final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndFieldAPI_IsEnableSkipPauseMenu) == 0x000001, "Wrong alignment on EndFieldAPI_IsEnableSkipPauseMenu");
static_assert(sizeof(EndFieldAPI_IsEnableSkipPauseMenu) == 0x000001, "Wrong size on EndFieldAPI_IsEnableSkipPauseMenu");
static_assert(offsetof(EndFieldAPI_IsEnableSkipPauseMenu, ReturnValue) == 0x000000, "Member 'EndFieldAPI_IsEnableSkipPauseMenu::ReturnValue' has a wrong offset!");

// Function EndGame.EndFieldAPI.IsEnableUpdateBattleParameter
// 0x0001 (0x0001 - 0x0000)
struct EndFieldAPI_IsEnableUpdateBattleParameter final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndFieldAPI_IsEnableUpdateBattleParameter) == 0x000001, "Wrong alignment on EndFieldAPI_IsEnableUpdateBattleParameter");
static_assert(sizeof(EndFieldAPI_IsEnableUpdateBattleParameter) == 0x000001, "Wrong size on EndFieldAPI_IsEnableUpdateBattleParameter");
static_assert(offsetof(EndFieldAPI_IsEnableUpdateBattleParameter, ReturnValue) == 0x000000, "Member 'EndFieldAPI_IsEnableUpdateBattleParameter::ReturnValue' has a wrong offset!");

// Function EndGame.EndFieldAPI.IsEncountWaveBattleScene
// 0x000C (0x000C - 0x0000)
struct EndFieldAPI_IsEncountWaveBattleScene final
{
public:
	class FName                                   BattleSceneID;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndFieldAPI_IsEncountWaveBattleScene) == 0x000004, "Wrong alignment on EndFieldAPI_IsEncountWaveBattleScene");
static_assert(sizeof(EndFieldAPI_IsEncountWaveBattleScene) == 0x00000C, "Wrong size on EndFieldAPI_IsEncountWaveBattleScene");
static_assert(offsetof(EndFieldAPI_IsEncountWaveBattleScene, BattleSceneID) == 0x000000, "Member 'EndFieldAPI_IsEncountWaveBattleScene::BattleSceneID' has a wrong offset!");
static_assert(offsetof(EndFieldAPI_IsEncountWaveBattleScene, ReturnValue) == 0x000008, "Member 'EndFieldAPI_IsEncountWaveBattleScene::ReturnValue' has a wrong offset!");

// Function EndGame.EndFieldAPI.IsEscaping
// 0x0001 (0x0001 - 0x0000)
struct EndFieldAPI_IsEscaping final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndFieldAPI_IsEscaping) == 0x000001, "Wrong alignment on EndFieldAPI_IsEscaping");
static_assert(sizeof(EndFieldAPI_IsEscaping) == 0x000001, "Wrong size on EndFieldAPI_IsEscaping");
static_assert(offsetof(EndFieldAPI_IsEscaping, ReturnValue) == 0x000000, "Member 'EndFieldAPI_IsEscaping::ReturnValue' has a wrong offset!");

// Function EndGame.EndFieldAPI.IsShowEscaping
// 0x0001 (0x0001 - 0x0000)
struct EndFieldAPI_IsShowEscaping final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndFieldAPI_IsShowEscaping) == 0x000001, "Wrong alignment on EndFieldAPI_IsShowEscaping");
static_assert(sizeof(EndFieldAPI_IsShowEscaping) == 0x000001, "Wrong size on EndFieldAPI_IsShowEscaping");
static_assert(offsetof(EndFieldAPI_IsShowEscaping, ReturnValue) == 0x000000, "Member 'EndFieldAPI_IsShowEscaping::ReturnValue' has a wrong offset!");

// Function EndGame.EndFieldAPI.IsStable
// 0x0001 (0x0001 - 0x0000)
struct EndFieldAPI_IsStable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndFieldAPI_IsStable) == 0x000001, "Wrong alignment on EndFieldAPI_IsStable");
static_assert(sizeof(EndFieldAPI_IsStable) == 0x000001, "Wrong size on EndFieldAPI_IsStable");
static_assert(offsetof(EndFieldAPI_IsStable, ReturnValue) == 0x000000, "Member 'EndFieldAPI_IsStable::ReturnValue' has a wrong offset!");

// Function EndGame.EndFieldAPI.IsWaveBattleScene
// 0x0010 (0x0010 - 0x0000)
struct EndFieldAPI_IsWaveBattleScene final
{
public:
	class FName                                   baseBattleSceneId;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         waveIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndFieldAPI_IsWaveBattleScene) == 0x000004, "Wrong alignment on EndFieldAPI_IsWaveBattleScene");
static_assert(sizeof(EndFieldAPI_IsWaveBattleScene) == 0x000010, "Wrong size on EndFieldAPI_IsWaveBattleScene");
static_assert(offsetof(EndFieldAPI_IsWaveBattleScene, baseBattleSceneId) == 0x000000, "Member 'EndFieldAPI_IsWaveBattleScene::baseBattleSceneId' has a wrong offset!");
static_assert(offsetof(EndFieldAPI_IsWaveBattleScene, waveIndex) == 0x000008, "Member 'EndFieldAPI_IsWaveBattleScene::waveIndex' has a wrong offset!");
static_assert(offsetof(EndFieldAPI_IsWaveBattleScene, ReturnValue) == 0x00000C, "Member 'EndFieldAPI_IsWaveBattleScene::ReturnValue' has a wrong offset!");

// Function EndGame.EndFieldAPI.IsWaveCharacter
// 0x0010 (0x0010 - 0x0000)
struct EndFieldAPI_IsWaveCharacter final
{
public:
	class AEndCharacter*                          chara;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndFieldAPI_IsWaveCharacter) == 0x000008, "Wrong alignment on EndFieldAPI_IsWaveCharacter");
static_assert(sizeof(EndFieldAPI_IsWaveCharacter) == 0x000010, "Wrong size on EndFieldAPI_IsWaveCharacter");
static_assert(offsetof(EndFieldAPI_IsWaveCharacter, chara) == 0x000000, "Member 'EndFieldAPI_IsWaveCharacter::chara' has a wrong offset!");
static_assert(offsetof(EndFieldAPI_IsWaveCharacter, ReturnValue) == 0x000008, "Member 'EndFieldAPI_IsWaveCharacter::ReturnValue' has a wrong offset!");

// Function EndGame.EndFieldAPI.PlayBGM
// 0x0018 (0x0018 - 0x0000)
struct EndFieldAPI_PlayBGM final
{
public:
	EndFieldBGMLayer                              Layer;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   BGM;                                               // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         fadeStartTime;                                     // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         fadeEndTime;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          crossFade;                                         // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndFieldAPI_PlayBGM) == 0x000004, "Wrong alignment on EndFieldAPI_PlayBGM");
static_assert(sizeof(EndFieldAPI_PlayBGM) == 0x000018, "Wrong size on EndFieldAPI_PlayBGM");
static_assert(offsetof(EndFieldAPI_PlayBGM, Layer) == 0x000000, "Member 'EndFieldAPI_PlayBGM::Layer' has a wrong offset!");
static_assert(offsetof(EndFieldAPI_PlayBGM, BGM) == 0x000004, "Member 'EndFieldAPI_PlayBGM::BGM' has a wrong offset!");
static_assert(offsetof(EndFieldAPI_PlayBGM, fadeStartTime) == 0x00000C, "Member 'EndFieldAPI_PlayBGM::fadeStartTime' has a wrong offset!");
static_assert(offsetof(EndFieldAPI_PlayBGM, fadeEndTime) == 0x000010, "Member 'EndFieldAPI_PlayBGM::fadeEndTime' has a wrong offset!");
static_assert(offsetof(EndFieldAPI_PlayBGM, crossFade) == 0x000014, "Member 'EndFieldAPI_PlayBGM::crossFade' has a wrong offset!");

// Function EndGame.EndFieldAPI.RefreshCacheBGM
// 0x0010 (0x0010 - 0x0000)
struct EndFieldAPI_RefreshCacheBGM final
{
public:
	class FString                                 cacheBGM;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndFieldAPI_RefreshCacheBGM) == 0x000008, "Wrong alignment on EndFieldAPI_RefreshCacheBGM");
static_assert(sizeof(EndFieldAPI_RefreshCacheBGM) == 0x000010, "Wrong size on EndFieldAPI_RefreshCacheBGM");
static_assert(offsetof(EndFieldAPI_RefreshCacheBGM, cacheBGM) == 0x000000, "Member 'EndFieldAPI_RefreshCacheBGM::cacheBGM' has a wrong offset!");

// Function EndGame.EndFieldAPI.ResetFieldAiLookAtTarget
// 0x000C (0x000C - 0x0000)
struct EndFieldAPI_ResetFieldAiLookAtTarget final
{
public:
	class FName                                   TargetActorName;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndFieldAPI_ResetFieldAiLookAtTarget) == 0x000004, "Wrong alignment on EndFieldAPI_ResetFieldAiLookAtTarget");
static_assert(sizeof(EndFieldAPI_ResetFieldAiLookAtTarget) == 0x00000C, "Wrong size on EndFieldAPI_ResetFieldAiLookAtTarget");
static_assert(offsetof(EndFieldAPI_ResetFieldAiLookAtTarget, TargetActorName) == 0x000000, "Member 'EndFieldAPI_ResetFieldAiLookAtTarget::TargetActorName' has a wrong offset!");
static_assert(offsetof(EndFieldAPI_ResetFieldAiLookAtTarget, ReturnValue) == 0x000008, "Member 'EndFieldAPI_ResetFieldAiLookAtTarget::ReturnValue' has a wrong offset!");

// Function EndGame.EndFieldAPI.ResetOverrideTargetLengthCameraFlavorByBP
// 0x0008 (0x0008 - 0x0000)
struct EndFieldAPI_ResetOverrideTargetLengthCameraFlavorByBP final
{
public:
	class FName                                   CharaSpecID;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndFieldAPI_ResetOverrideTargetLengthCameraFlavorByBP) == 0x000004, "Wrong alignment on EndFieldAPI_ResetOverrideTargetLengthCameraFlavorByBP");
static_assert(sizeof(EndFieldAPI_ResetOverrideTargetLengthCameraFlavorByBP) == 0x000008, "Wrong size on EndFieldAPI_ResetOverrideTargetLengthCameraFlavorByBP");
static_assert(offsetof(EndFieldAPI_ResetOverrideTargetLengthCameraFlavorByBP, CharaSpecID) == 0x000000, "Member 'EndFieldAPI_ResetOverrideTargetLengthCameraFlavorByBP::CharaSpecID' has a wrong offset!");

// Function EndGame.EndFieldAPI.SendPlannerEventTrigger
// 0x0018 (0x0018 - 0x0000)
struct EndFieldAPI_SendPlannerEventTrigger final
{
public:
	class FName                                   PlannerEventID;                                    // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TriggerId;                                         // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndFieldAPI_SendPlannerEventTrigger) == 0x000008, "Wrong alignment on EndFieldAPI_SendPlannerEventTrigger");
static_assert(sizeof(EndFieldAPI_SendPlannerEventTrigger) == 0x000018, "Wrong size on EndFieldAPI_SendPlannerEventTrigger");
static_assert(offsetof(EndFieldAPI_SendPlannerEventTrigger, PlannerEventID) == 0x000000, "Member 'EndFieldAPI_SendPlannerEventTrigger::PlannerEventID' has a wrong offset!");
static_assert(offsetof(EndFieldAPI_SendPlannerEventTrigger, TriggerId) == 0x000008, "Member 'EndFieldAPI_SendPlannerEventTrigger::TriggerId' has a wrong offset!");

// Function EndGame.EndFieldAPI.SendStateTrigger
// 0x0010 (0x0010 - 0x0000)
struct EndFieldAPI_SendStateTrigger final
{
public:
	class FString                                 StateTriggerName;                                  // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndFieldAPI_SendStateTrigger) == 0x000008, "Wrong alignment on EndFieldAPI_SendStateTrigger");
static_assert(sizeof(EndFieldAPI_SendStateTrigger) == 0x000010, "Wrong size on EndFieldAPI_SendStateTrigger");
static_assert(offsetof(EndFieldAPI_SendStateTrigger, StateTriggerName) == 0x000000, "Member 'EndFieldAPI_SendStateTrigger::StateTriggerName' has a wrong offset!");

// Function EndGame.EndFieldAPI.SendStateTriggerDirect
// 0x0010 (0x0010 - 0x0000)
struct EndFieldAPI_SendStateTriggerDirect final
{
public:
	class FString                                 StateTriggerName;                                  // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndFieldAPI_SendStateTriggerDirect) == 0x000008, "Wrong alignment on EndFieldAPI_SendStateTriggerDirect");
static_assert(sizeof(EndFieldAPI_SendStateTriggerDirect) == 0x000010, "Wrong size on EndFieldAPI_SendStateTriggerDirect");
static_assert(offsetof(EndFieldAPI_SendStateTriggerDirect, StateTriggerName) == 0x000000, "Member 'EndFieldAPI_SendStateTriggerDirect::StateTriggerName' has a wrong offset!");

// Function EndGame.EndFieldAPI.SetDebugFlag
// 0x0001 (0x0001 - 0x0000)
struct EndFieldAPI_SetDebugFlag final
{
public:
	EEndDebugFlag                                 Flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndFieldAPI_SetDebugFlag) == 0x000001, "Wrong alignment on EndFieldAPI_SetDebugFlag");
static_assert(sizeof(EndFieldAPI_SetDebugFlag) == 0x000001, "Wrong size on EndFieldAPI_SetDebugFlag");
static_assert(offsetof(EndFieldAPI_SetDebugFlag, Flag) == 0x000000, "Member 'EndFieldAPI_SetDebugFlag::Flag' has a wrong offset!");

// Function EndGame.EndFieldAPI.SetExecSlotIndex
// 0x0004 (0x0004 - 0x0000)
struct EndFieldAPI_SetExecSlotIndex final
{
public:
	int32                                         SlotIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndFieldAPI_SetExecSlotIndex) == 0x000004, "Wrong alignment on EndFieldAPI_SetExecSlotIndex");
static_assert(sizeof(EndFieldAPI_SetExecSlotIndex) == 0x000004, "Wrong size on EndFieldAPI_SetExecSlotIndex");
static_assert(offsetof(EndFieldAPI_SetExecSlotIndex, SlotIndex) == 0x000000, "Member 'EndFieldAPI_SetExecSlotIndex::SlotIndex' has a wrong offset!");

// Function EndGame.EndFieldAPI.SetOverrideTargetLengthCameraFlavorByBP
// 0x0010 (0x0010 - 0x0000)
struct EndFieldAPI_SetOverrideTargetLengthCameraFlavorByBP final
{
public:
	class FName                                   CharaSpecID;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   dataTableCameraFlavorID;                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndFieldAPI_SetOverrideTargetLengthCameraFlavorByBP) == 0x000004, "Wrong alignment on EndFieldAPI_SetOverrideTargetLengthCameraFlavorByBP");
static_assert(sizeof(EndFieldAPI_SetOverrideTargetLengthCameraFlavorByBP) == 0x000010, "Wrong size on EndFieldAPI_SetOverrideTargetLengthCameraFlavorByBP");
static_assert(offsetof(EndFieldAPI_SetOverrideTargetLengthCameraFlavorByBP, CharaSpecID) == 0x000000, "Member 'EndFieldAPI_SetOverrideTargetLengthCameraFlavorByBP::CharaSpecID' has a wrong offset!");
static_assert(offsetof(EndFieldAPI_SetOverrideTargetLengthCameraFlavorByBP, dataTableCameraFlavorID) == 0x000008, "Member 'EndFieldAPI_SetOverrideTargetLengthCameraFlavorByBP::dataTableCameraFlavorID' has a wrong offset!");

// Function EndGame.EndFieldAPI.SetTruthLocationName
// 0x0008 (0x0008 - 0x0000)
struct EndFieldAPI_SetTruthLocationName final
{
public:
	class FName                                   truthLocationName;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndFieldAPI_SetTruthLocationName) == 0x000004, "Wrong alignment on EndFieldAPI_SetTruthLocationName");
static_assert(sizeof(EndFieldAPI_SetTruthLocationName) == 0x000008, "Wrong size on EndFieldAPI_SetTruthLocationName");
static_assert(offsetof(EndFieldAPI_SetTruthLocationName, truthLocationName) == 0x000000, "Member 'EndFieldAPI_SetTruthLocationName::truthLocationName' has a wrong offset!");

// Function EndGame.EndFieldAPI.StartWaveBattleScene
// 0x0040 (0x0040 - 0x0000)
struct EndFieldAPI_StartWaveBattleScene final
{
public:
	class FName                                   baseBattleSceneId;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EndWaveBattleSceneType                        Type;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         IntegerArgument00;                                 // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IntegerArgument01;                                 // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IntegerArgument02;                                 // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IntegerArgument03;                                 // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTransform>                     enemyPopTransforms;                                // 0x0020(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           ReturnValue;                                       // 0x0030(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndFieldAPI_StartWaveBattleScene) == 0x000008, "Wrong alignment on EndFieldAPI_StartWaveBattleScene");
static_assert(sizeof(EndFieldAPI_StartWaveBattleScene) == 0x000040, "Wrong size on EndFieldAPI_StartWaveBattleScene");
static_assert(offsetof(EndFieldAPI_StartWaveBattleScene, baseBattleSceneId) == 0x000000, "Member 'EndFieldAPI_StartWaveBattleScene::baseBattleSceneId' has a wrong offset!");
static_assert(offsetof(EndFieldAPI_StartWaveBattleScene, Type) == 0x000008, "Member 'EndFieldAPI_StartWaveBattleScene::Type' has a wrong offset!");
static_assert(offsetof(EndFieldAPI_StartWaveBattleScene, IntegerArgument00) == 0x00000C, "Member 'EndFieldAPI_StartWaveBattleScene::IntegerArgument00' has a wrong offset!");
static_assert(offsetof(EndFieldAPI_StartWaveBattleScene, IntegerArgument01) == 0x000010, "Member 'EndFieldAPI_StartWaveBattleScene::IntegerArgument01' has a wrong offset!");
static_assert(offsetof(EndFieldAPI_StartWaveBattleScene, IntegerArgument02) == 0x000014, "Member 'EndFieldAPI_StartWaveBattleScene::IntegerArgument02' has a wrong offset!");
static_assert(offsetof(EndFieldAPI_StartWaveBattleScene, IntegerArgument03) == 0x000018, "Member 'EndFieldAPI_StartWaveBattleScene::IntegerArgument03' has a wrong offset!");
static_assert(offsetof(EndFieldAPI_StartWaveBattleScene, enemyPopTransforms) == 0x000020, "Member 'EndFieldAPI_StartWaveBattleScene::enemyPopTransforms' has a wrong offset!");
static_assert(offsetof(EndFieldAPI_StartWaveBattleScene, ReturnValue) == 0x000030, "Member 'EndFieldAPI_StartWaveBattleScene::ReturnValue' has a wrong offset!");

// Function EndGame.EndFieldAPI.StartWaveBattleSceneReturnWaveBattleSceneId
// 0x0038 (0x0038 - 0x0000)
struct EndFieldAPI_StartWaveBattleSceneReturnWaveBattleSceneId final
{
public:
	class FName                                   baseBattleSceneId;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EndWaveBattleSceneType                        Type;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         IntegerArgument00;                                 // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IntegerArgument01;                                 // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IntegerArgument02;                                 // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IntegerArgument03;                                 // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTransform>                     enemyPopTransforms;                                // 0x0020(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndFieldAPI_StartWaveBattleSceneReturnWaveBattleSceneId) == 0x000008, "Wrong alignment on EndFieldAPI_StartWaveBattleSceneReturnWaveBattleSceneId");
static_assert(sizeof(EndFieldAPI_StartWaveBattleSceneReturnWaveBattleSceneId) == 0x000038, "Wrong size on EndFieldAPI_StartWaveBattleSceneReturnWaveBattleSceneId");
static_assert(offsetof(EndFieldAPI_StartWaveBattleSceneReturnWaveBattleSceneId, baseBattleSceneId) == 0x000000, "Member 'EndFieldAPI_StartWaveBattleSceneReturnWaveBattleSceneId::baseBattleSceneId' has a wrong offset!");
static_assert(offsetof(EndFieldAPI_StartWaveBattleSceneReturnWaveBattleSceneId, Type) == 0x000008, "Member 'EndFieldAPI_StartWaveBattleSceneReturnWaveBattleSceneId::Type' has a wrong offset!");
static_assert(offsetof(EndFieldAPI_StartWaveBattleSceneReturnWaveBattleSceneId, IntegerArgument00) == 0x00000C, "Member 'EndFieldAPI_StartWaveBattleSceneReturnWaveBattleSceneId::IntegerArgument00' has a wrong offset!");
static_assert(offsetof(EndFieldAPI_StartWaveBattleSceneReturnWaveBattleSceneId, IntegerArgument01) == 0x000010, "Member 'EndFieldAPI_StartWaveBattleSceneReturnWaveBattleSceneId::IntegerArgument01' has a wrong offset!");
static_assert(offsetof(EndFieldAPI_StartWaveBattleSceneReturnWaveBattleSceneId, IntegerArgument02) == 0x000014, "Member 'EndFieldAPI_StartWaveBattleSceneReturnWaveBattleSceneId::IntegerArgument02' has a wrong offset!");
static_assert(offsetof(EndFieldAPI_StartWaveBattleSceneReturnWaveBattleSceneId, IntegerArgument03) == 0x000018, "Member 'EndFieldAPI_StartWaveBattleSceneReturnWaveBattleSceneId::IntegerArgument03' has a wrong offset!");
static_assert(offsetof(EndFieldAPI_StartWaveBattleSceneReturnWaveBattleSceneId, enemyPopTransforms) == 0x000020, "Member 'EndFieldAPI_StartWaveBattleSceneReturnWaveBattleSceneId::enemyPopTransforms' has a wrong offset!");
static_assert(offsetof(EndFieldAPI_StartWaveBattleSceneReturnWaveBattleSceneId, ReturnValue) == 0x000030, "Member 'EndFieldAPI_StartWaveBattleSceneReturnWaveBattleSceneId::ReturnValue' has a wrong offset!");

// Function EndGame.EndFieldAPI.WaitStable
// 0x0020 (0x0020 - 0x0000)
struct EndFieldAPI_WaitStable final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndFieldAPI_WaitStable) == 0x000008, "Wrong alignment on EndFieldAPI_WaitStable");
static_assert(sizeof(EndFieldAPI_WaitStable) == 0x000020, "Wrong size on EndFieldAPI_WaitStable");
static_assert(offsetof(EndFieldAPI_WaitStable, WorldContextObject) == 0x000000, "Member 'EndFieldAPI_WaitStable::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EndFieldAPI_WaitStable, LatentInfo) == 0x000008, "Member 'EndFieldAPI_WaitStable::LatentInfo' has a wrong offset!");

// Function EndGame.EndFieldKeyGuideList.OnCommandCellSetupField
// 0x0010 (0x0010 - 0x0000)
struct EndFieldKeyGuideList_OnCommandCellSetupField final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndFieldKeyGuideList_OnCommandCellSetupField) == 0x000008, "Wrong alignment on EndFieldKeyGuideList_OnCommandCellSetupField");
static_assert(sizeof(EndFieldKeyGuideList_OnCommandCellSetupField) == 0x000010, "Wrong size on EndFieldKeyGuideList_OnCommandCellSetupField");
static_assert(offsetof(EndFieldKeyGuideList_OnCommandCellSetupField, ItemWidget) == 0x000000, "Member 'EndFieldKeyGuideList_OnCommandCellSetupField::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndFieldKeyGuideList_OnCommandCellSetupField, ItemIndex) == 0x000008, "Member 'EndFieldKeyGuideList_OnCommandCellSetupField::ItemIndex' has a wrong offset!");

// Function EndGame.EndFieldKeyGuideList.OnCommandCellSetupGBike
// 0x0010 (0x0010 - 0x0000)
struct EndFieldKeyGuideList_OnCommandCellSetupGBike final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndFieldKeyGuideList_OnCommandCellSetupGBike) == 0x000008, "Wrong alignment on EndFieldKeyGuideList_OnCommandCellSetupGBike");
static_assert(sizeof(EndFieldKeyGuideList_OnCommandCellSetupGBike) == 0x000010, "Wrong size on EndFieldKeyGuideList_OnCommandCellSetupGBike");
static_assert(offsetof(EndFieldKeyGuideList_OnCommandCellSetupGBike, ItemWidget) == 0x000000, "Member 'EndFieldKeyGuideList_OnCommandCellSetupGBike::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndFieldKeyGuideList_OnCommandCellSetupGBike, ItemIndex) == 0x000008, "Member 'EndFieldKeyGuideList_OnCommandCellSetupGBike::ItemIndex' has a wrong offset!");

// Function EndGame.EndFieldKeyGuideList.OnCommandCellSetupPlayFeel
// 0x0010 (0x0010 - 0x0000)
struct EndFieldKeyGuideList_OnCommandCellSetupPlayFeel final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndFieldKeyGuideList_OnCommandCellSetupPlayFeel) == 0x000008, "Wrong alignment on EndFieldKeyGuideList_OnCommandCellSetupPlayFeel");
static_assert(sizeof(EndFieldKeyGuideList_OnCommandCellSetupPlayFeel) == 0x000010, "Wrong size on EndFieldKeyGuideList_OnCommandCellSetupPlayFeel");
static_assert(offsetof(EndFieldKeyGuideList_OnCommandCellSetupPlayFeel, ItemWidget) == 0x000000, "Member 'EndFieldKeyGuideList_OnCommandCellSetupPlayFeel::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndFieldKeyGuideList_OnCommandCellSetupPlayFeel, ItemIndex) == 0x000008, "Member 'EndFieldKeyGuideList_OnCommandCellSetupPlayFeel::ItemIndex' has a wrong offset!");

// Function EndGame.EndBattleAIController.BranchAnd2
// 0x0003 (0x0003 - 0x0000)
struct EndBattleAIController_BranchAnd2 final
{
public:
	EEndAIBranchBit                               OutSignal;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          A;                                                 // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          B;                                                 // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_BranchAnd2) == 0x000001, "Wrong alignment on EndBattleAIController_BranchAnd2");
static_assert(sizeof(EndBattleAIController_BranchAnd2) == 0x000003, "Wrong size on EndBattleAIController_BranchAnd2");
static_assert(offsetof(EndBattleAIController_BranchAnd2, OutSignal) == 0x000000, "Member 'EndBattleAIController_BranchAnd2::OutSignal' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_BranchAnd2, A) == 0x000001, "Member 'EndBattleAIController_BranchAnd2::A' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_BranchAnd2, B) == 0x000002, "Member 'EndBattleAIController_BranchAnd2::B' has a wrong offset!");

// Function EndGame.EndBattleAIController.AddAirPointArea
// 0x0014 (0x0014 - 0x0000)
struct EndBattleAIController_AddAirPointArea final
{
public:
	struct FVector                                InLocation;                                        // 0x0000(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InRadius;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InGroup;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_AddAirPointArea) == 0x000004, "Wrong alignment on EndBattleAIController_AddAirPointArea");
static_assert(sizeof(EndBattleAIController_AddAirPointArea) == 0x000014, "Wrong size on EndBattleAIController_AddAirPointArea");
static_assert(offsetof(EndBattleAIController_AddAirPointArea, InLocation) == 0x000000, "Member 'EndBattleAIController_AddAirPointArea::InLocation' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_AddAirPointArea, InRadius) == 0x00000C, "Member 'EndBattleAIController_AddAirPointArea::InRadius' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_AddAirPointArea, InGroup) == 0x000010, "Member 'EndBattleAIController_AddAirPointArea::InGroup' has a wrong offset!");

// Function EndGame.EndBattleAIController.AddAreaFromModify
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAIController_AddAreaFromModify final
{
public:
	EModifierVolumeType                           InType;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InGroup;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_AddAreaFromModify) == 0x000004, "Wrong alignment on EndBattleAIController_AddAreaFromModify");
static_assert(sizeof(EndBattleAIController_AddAreaFromModify) == 0x000008, "Wrong size on EndBattleAIController_AddAreaFromModify");
static_assert(offsetof(EndBattleAIController_AddAreaFromModify, InType) == 0x000000, "Member 'EndBattleAIController_AddAreaFromModify::InType' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_AddAreaFromModify, InGroup) == 0x000004, "Member 'EndBattleAIController_AddAreaFromModify::InGroup' has a wrong offset!");

// Function EndGame.EndBattleAIController.AddAttachEffect
// 0x0078 (0x0078 - 0x0000)
struct EndBattleAIController_AddAttachEffect final
{
public:
	struct FEndCharacterAttachEffectArguments     args;                                              // 0x0000(0x0078)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_AddAttachEffect) == 0x000008, "Wrong alignment on EndBattleAIController_AddAttachEffect");
static_assert(sizeof(EndBattleAIController_AddAttachEffect) == 0x000078, "Wrong size on EndBattleAIController_AddAttachEffect");
static_assert(offsetof(EndBattleAIController_AddAttachEffect, args) == 0x000000, "Member 'EndBattleAIController_AddAttachEffect::args' has a wrong offset!");

// Function EndGame.EndBattleAIController.AddBindAction
// 0x000C (0x000C - 0x0000)
struct EndBattleAIController_AddBindAction final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAIController_AddBindAction) == 0x000004, "Wrong alignment on EndBattleAIController_AddBindAction");
static_assert(sizeof(EndBattleAIController_AddBindAction) == 0x00000C, "Wrong size on EndBattleAIController_AddBindAction");
static_assert(offsetof(EndBattleAIController_AddBindAction, InName) == 0x000000, "Member 'EndBattleAIController_AddBindAction::InName' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_AddBindAction, ReturnValue) == 0x000008, "Member 'EndBattleAIController_AddBindAction::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.AddBlackListArea
// 0x0014 (0x0014 - 0x0000)
struct EndBattleAIController_AddBlackListArea final
{
public:
	struct FVector                                InLocation;                                        // 0x0000(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InRadius;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InGroup;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_AddBlackListArea) == 0x000004, "Wrong alignment on EndBattleAIController_AddBlackListArea");
static_assert(sizeof(EndBattleAIController_AddBlackListArea) == 0x000014, "Wrong size on EndBattleAIController_AddBlackListArea");
static_assert(offsetof(EndBattleAIController_AddBlackListArea, InLocation) == 0x000000, "Member 'EndBattleAIController_AddBlackListArea::InLocation' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_AddBlackListArea, InRadius) == 0x00000C, "Member 'EndBattleAIController_AddBlackListArea::InRadius' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_AddBlackListArea, InGroup) == 0x000010, "Member 'EndBattleAIController_AddBlackListArea::InGroup' has a wrong offset!");

// Function EndGame.EndBattleAIController.AddChaseArea
// 0x0014 (0x0014 - 0x0000)
struct EndBattleAIController_AddChaseArea final
{
public:
	struct FVector                                InLocation;                                        // 0x0000(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InRadius;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InGroup;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_AddChaseArea) == 0x000004, "Wrong alignment on EndBattleAIController_AddChaseArea");
static_assert(sizeof(EndBattleAIController_AddChaseArea) == 0x000014, "Wrong size on EndBattleAIController_AddChaseArea");
static_assert(offsetof(EndBattleAIController_AddChaseArea, InLocation) == 0x000000, "Member 'EndBattleAIController_AddChaseArea::InLocation' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_AddChaseArea, InRadius) == 0x00000C, "Member 'EndBattleAIController_AddChaseArea::InRadius' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_AddChaseArea, InGroup) == 0x000010, "Member 'EndBattleAIController_AddChaseArea::InGroup' has a wrong offset!");

// Function EndGame.EndBattleAIController.AddDefenseArea
// 0x0014 (0x0014 - 0x0000)
struct EndBattleAIController_AddDefenseArea final
{
public:
	struct FVector                                InLocation;                                        // 0x0000(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InRadius;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InGroup;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_AddDefenseArea) == 0x000004, "Wrong alignment on EndBattleAIController_AddDefenseArea");
static_assert(sizeof(EndBattleAIController_AddDefenseArea) == 0x000014, "Wrong size on EndBattleAIController_AddDefenseArea");
static_assert(offsetof(EndBattleAIController_AddDefenseArea, InLocation) == 0x000000, "Member 'EndBattleAIController_AddDefenseArea::InLocation' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_AddDefenseArea, InRadius) == 0x00000C, "Member 'EndBattleAIController_AddDefenseArea::InRadius' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_AddDefenseArea, InGroup) == 0x000010, "Member 'EndBattleAIController_AddDefenseArea::InGroup' has a wrong offset!");

// Function EndGame.EndBattleAIController.AddDestructionPartsName
// 0x0024 (0x0024 - 0x0000)
struct EndBattleAIController_AddDestructionPartsName final
{
public:
	class FName                                   keyword;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   meshName;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   destructionPartsLabelName;                         // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   restorePartsLabelName;                             // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_AddDestructionPartsName) == 0x000004, "Wrong alignment on EndBattleAIController_AddDestructionPartsName");
static_assert(sizeof(EndBattleAIController_AddDestructionPartsName) == 0x000024, "Wrong size on EndBattleAIController_AddDestructionPartsName");
static_assert(offsetof(EndBattleAIController_AddDestructionPartsName, keyword) == 0x000000, "Member 'EndBattleAIController_AddDestructionPartsName::keyword' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_AddDestructionPartsName, meshName) == 0x000008, "Member 'EndBattleAIController_AddDestructionPartsName::meshName' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_AddDestructionPartsName, destructionPartsLabelName) == 0x000010, "Member 'EndBattleAIController_AddDestructionPartsName::destructionPartsLabelName' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_AddDestructionPartsName, restorePartsLabelName) == 0x000018, "Member 'EndBattleAIController_AddDestructionPartsName::restorePartsLabelName' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_AddDestructionPartsName, ReturnValue) == 0x000020, "Member 'EndBattleAIController_AddDestructionPartsName::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.AddEasySpawnCharacter
// 0x0020 (0x0020 - 0x0000)
struct EndBattleAIController_AddEasySpawnCharacter final
{
public:
	class FName                                   keyword;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CharaSpecName;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          spawnedInvisible;                                  // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          spawnedDisableCollision;                           // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndBattleEasySpawnEnableRagdollType          enableRagdollType;                                 // 0x0012(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13[0x1];                                       // 0x0013(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         destroyTimer;                                      // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          recycle;                                           // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          enableStartupDestroyTimer;                         // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x001C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_AddEasySpawnCharacter) == 0x000004, "Wrong alignment on EndBattleAIController_AddEasySpawnCharacter");
static_assert(sizeof(EndBattleAIController_AddEasySpawnCharacter) == 0x000020, "Wrong size on EndBattleAIController_AddEasySpawnCharacter");
static_assert(offsetof(EndBattleAIController_AddEasySpawnCharacter, keyword) == 0x000000, "Member 'EndBattleAIController_AddEasySpawnCharacter::keyword' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_AddEasySpawnCharacter, CharaSpecName) == 0x000008, "Member 'EndBattleAIController_AddEasySpawnCharacter::CharaSpecName' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_AddEasySpawnCharacter, spawnedInvisible) == 0x000010, "Member 'EndBattleAIController_AddEasySpawnCharacter::spawnedInvisible' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_AddEasySpawnCharacter, spawnedDisableCollision) == 0x000011, "Member 'EndBattleAIController_AddEasySpawnCharacter::spawnedDisableCollision' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_AddEasySpawnCharacter, enableRagdollType) == 0x000012, "Member 'EndBattleAIController_AddEasySpawnCharacter::enableRagdollType' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_AddEasySpawnCharacter, destroyTimer) == 0x000014, "Member 'EndBattleAIController_AddEasySpawnCharacter::destroyTimer' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_AddEasySpawnCharacter, recycle) == 0x000018, "Member 'EndBattleAIController_AddEasySpawnCharacter::recycle' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_AddEasySpawnCharacter, enableStartupDestroyTimer) == 0x000019, "Member 'EndBattleAIController_AddEasySpawnCharacter::enableStartupDestroyTimer' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_AddEasySpawnCharacter, ReturnValue) == 0x00001C, "Member 'EndBattleAIController_AddEasySpawnCharacter::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.AddIgnoreNavArea
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAIController_AddIgnoreNavArea final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_AddIgnoreNavArea) == 0x000004, "Wrong alignment on EndBattleAIController_AddIgnoreNavArea");
static_assert(sizeof(EndBattleAIController_AddIgnoreNavArea) == 0x000008, "Wrong size on EndBattleAIController_AddIgnoreNavArea");
static_assert(offsetof(EndBattleAIController_AddIgnoreNavArea, InName) == 0x000000, "Member 'EndBattleAIController_AddIgnoreNavArea::InName' has a wrong offset!");

// Function EndGame.EndBattleAIController.AddPathArea
// 0x0014 (0x0014 - 0x0000)
struct EndBattleAIController_AddPathArea final
{
public:
	struct FVector                                InLocation;                                        // 0x0000(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InRadius;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InGroup;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_AddPathArea) == 0x000004, "Wrong alignment on EndBattleAIController_AddPathArea");
static_assert(sizeof(EndBattleAIController_AddPathArea) == 0x000014, "Wrong size on EndBattleAIController_AddPathArea");
static_assert(offsetof(EndBattleAIController_AddPathArea, InLocation) == 0x000000, "Member 'EndBattleAIController_AddPathArea::InLocation' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_AddPathArea, InRadius) == 0x00000C, "Member 'EndBattleAIController_AddPathArea::InRadius' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_AddPathArea, InGroup) == 0x000010, "Member 'EndBattleAIController_AddPathArea::InGroup' has a wrong offset!");

// Function EndGame.EndBattleAIController.AddSpecialStateEffect
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAIController_AddSpecialStateEffect final
{
public:
	class FName                                   specialStateEffectID;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_AddSpecialStateEffect) == 0x000004, "Wrong alignment on EndBattleAIController_AddSpecialStateEffect");
static_assert(sizeof(EndBattleAIController_AddSpecialStateEffect) == 0x000008, "Wrong size on EndBattleAIController_AddSpecialStateEffect");
static_assert(offsetof(EndBattleAIController_AddSpecialStateEffect, specialStateEffectID) == 0x000000, "Member 'EndBattleAIController_AddSpecialStateEffect::specialStateEffectID' has a wrong offset!");

// Function EndGame.EndBattleAIController.AddSpecialStateEffectWithBeamTarget
// 0x0018 (0x0018 - 0x0000)
struct EndBattleAIController_AddSpecialStateEffectWithBeamTarget final
{
public:
	class FName                                   specialStateEffectID;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AEndCharacter*>                  beamTargetCharaList;                               // 0x0008(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_AddSpecialStateEffectWithBeamTarget) == 0x000008, "Wrong alignment on EndBattleAIController_AddSpecialStateEffectWithBeamTarget");
static_assert(sizeof(EndBattleAIController_AddSpecialStateEffectWithBeamTarget) == 0x000018, "Wrong size on EndBattleAIController_AddSpecialStateEffectWithBeamTarget");
static_assert(offsetof(EndBattleAIController_AddSpecialStateEffectWithBeamTarget, specialStateEffectID) == 0x000000, "Member 'EndBattleAIController_AddSpecialStateEffectWithBeamTarget::specialStateEffectID' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_AddSpecialStateEffectWithBeamTarget, beamTargetCharaList) == 0x000008, "Member 'EndBattleAIController_AddSpecialStateEffectWithBeamTarget::beamTargetCharaList' has a wrong offset!");

// Function EndGame.EndBattleAIController.AddSpecialStatus
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAIController_AddSpecialStatus final
{
public:
	EEndBattleSpecialStatusChangeType             Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_AddSpecialStatus) == 0x000001, "Wrong alignment on EndBattleAIController_AddSpecialStatus");
static_assert(sizeof(EndBattleAIController_AddSpecialStatus) == 0x000001, "Wrong size on EndBattleAIController_AddSpecialStatus");
static_assert(offsetof(EndBattleAIController_AddSpecialStatus, Type) == 0x000000, "Member 'EndBattleAIController_AddSpecialStatus::Type' has a wrong offset!");

// Function EndGame.EndBattleAIController.AddSpecialStatusByID
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAIController_AddSpecialStatusByID final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_AddSpecialStatusByID) == 0x000004, "Wrong alignment on EndBattleAIController_AddSpecialStatusByID");
static_assert(sizeof(EndBattleAIController_AddSpecialStatusByID) == 0x000008, "Wrong size on EndBattleAIController_AddSpecialStatusByID");
static_assert(offsetof(EndBattleAIController_AddSpecialStatusByID, ID) == 0x000000, "Member 'EndBattleAIController_AddSpecialStatusByID::ID' has a wrong offset!");

// Function EndGame.EndBattleAIController.AddSubStep
// 0x0004 (0x0004 - 0x0000)
struct EndBattleAIController_AddSubStep final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_AddSubStep) == 0x000004, "Wrong alignment on EndBattleAIController_AddSubStep");
static_assert(sizeof(EndBattleAIController_AddSubStep) == 0x000004, "Wrong size on EndBattleAIController_AddSubStep");
static_assert(offsetof(EndBattleAIController_AddSubStep, ReturnValue) == 0x000000, "Member 'EndBattleAIController_AddSubStep::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.AddWhiteListArea
// 0x0014 (0x0014 - 0x0000)
struct EndBattleAIController_AddWhiteListArea final
{
public:
	struct FVector                                InLocation;                                        // 0x0000(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InRadius;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InGroup;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_AddWhiteListArea) == 0x000004, "Wrong alignment on EndBattleAIController_AddWhiteListArea");
static_assert(sizeof(EndBattleAIController_AddWhiteListArea) == 0x000014, "Wrong size on EndBattleAIController_AddWhiteListArea");
static_assert(offsetof(EndBattleAIController_AddWhiteListArea, InLocation) == 0x000000, "Member 'EndBattleAIController_AddWhiteListArea::InLocation' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_AddWhiteListArea, InRadius) == 0x00000C, "Member 'EndBattleAIController_AddWhiteListArea::InRadius' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_AddWhiteListArea, InGroup) == 0x000010, "Member 'EndBattleAIController_AddWhiteListArea::InGroup' has a wrong offset!");

// Function EndGame.EndBattleAIController.AIDelay
// 0x0028 (0x0028 - 0x0000)
struct EndBattleAIController_AIDelay final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0010(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_AIDelay) == 0x000008, "Wrong alignment on EndBattleAIController_AIDelay");
static_assert(sizeof(EndBattleAIController_AIDelay) == 0x000028, "Wrong size on EndBattleAIController_AIDelay");
static_assert(offsetof(EndBattleAIController_AIDelay, WorldContextObject) == 0x000000, "Member 'EndBattleAIController_AIDelay::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_AIDelay, Duration) == 0x000008, "Member 'EndBattleAIController_AIDelay::Duration' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_AIDelay, LatentInfo) == 0x000010, "Member 'EndBattleAIController_AIDelay::LatentInfo' has a wrong offset!");

// Function EndGame.EndBattleAIController.BranchAnd
// 0x0003 (0x0003 - 0x0000)
struct EndBattleAIController_BranchAnd final
{
public:
	bool                                          Flag1;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Flag2;                                             // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndAIBranchBit                               OutSignal;                                         // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_BranchAnd) == 0x000001, "Wrong alignment on EndBattleAIController_BranchAnd");
static_assert(sizeof(EndBattleAIController_BranchAnd) == 0x000003, "Wrong size on EndBattleAIController_BranchAnd");
static_assert(offsetof(EndBattleAIController_BranchAnd, Flag1) == 0x000000, "Member 'EndBattleAIController_BranchAnd::Flag1' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_BranchAnd, Flag2) == 0x000001, "Member 'EndBattleAIController_BranchAnd::Flag2' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_BranchAnd, OutSignal) == 0x000002, "Member 'EndBattleAIController_BranchAnd::OutSignal' has a wrong offset!");

// Function EndGame.EndBattleAIController.BranchOR
// 0x0003 (0x0003 - 0x0000)
struct EndBattleAIController_BranchOR final
{
public:
	bool                                          Flag1;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Flag2;                                             // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndAIBranchBit                               OutSignal;                                         // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_BranchOR) == 0x000001, "Wrong alignment on EndBattleAIController_BranchOR");
static_assert(sizeof(EndBattleAIController_BranchOR) == 0x000003, "Wrong size on EndBattleAIController_BranchOR");
static_assert(offsetof(EndBattleAIController_BranchOR, Flag1) == 0x000000, "Member 'EndBattleAIController_BranchOR::Flag1' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_BranchOR, Flag2) == 0x000001, "Member 'EndBattleAIController_BranchOR::Flag2' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_BranchOR, OutSignal) == 0x000002, "Member 'EndBattleAIController_BranchOR::OutSignal' has a wrong offset!");

// Function EndGame.EndBattleAIController.BranchXOR
// 0x0003 (0x0003 - 0x0000)
struct EndBattleAIController_BranchXOR final
{
public:
	bool                                          Flag1;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Flag2;                                             // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndAIBranchBit                               OutSignal;                                         // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_BranchXOR) == 0x000001, "Wrong alignment on EndBattleAIController_BranchXOR");
static_assert(sizeof(EndBattleAIController_BranchXOR) == 0x000003, "Wrong size on EndBattleAIController_BranchXOR");
static_assert(offsetof(EndBattleAIController_BranchXOR, Flag1) == 0x000000, "Member 'EndBattleAIController_BranchXOR::Flag1' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_BranchXOR, Flag2) == 0x000001, "Member 'EndBattleAIController_BranchXOR::Flag2' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_BranchXOR, OutSignal) == 0x000002, "Member 'EndBattleAIController_BranchXOR::OutSignal' has a wrong offset!");

// Function EndGame.EndBattleAIController.CalcATBChangeValue
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAIController_CalcATBChangeValue final
{
public:
	float                                         IntervalTime;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          resetComparetiveATB;                               // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          defaultIntervalSeconds;                            // 0x0005(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAIController_CalcATBChangeValue) == 0x000004, "Wrong alignment on EndBattleAIController_CalcATBChangeValue");
static_assert(sizeof(EndBattleAIController_CalcATBChangeValue) == 0x000008, "Wrong size on EndBattleAIController_CalcATBChangeValue");
static_assert(offsetof(EndBattleAIController_CalcATBChangeValue, IntervalTime) == 0x000000, "Member 'EndBattleAIController_CalcATBChangeValue::IntervalTime' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_CalcATBChangeValue, resetComparetiveATB) == 0x000004, "Member 'EndBattleAIController_CalcATBChangeValue::resetComparetiveATB' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_CalcATBChangeValue, defaultIntervalSeconds) == 0x000005, "Member 'EndBattleAIController_CalcATBChangeValue::defaultIntervalSeconds' has a wrong offset!");

// Function EndGame.EndBattleAIController.CanSeeBlockCharacter
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAIController_CanSeeBlockCharacter final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAIController_CanSeeBlockCharacter) == 0x000008, "Wrong alignment on EndBattleAIController_CanSeeBlockCharacter");
static_assert(sizeof(EndBattleAIController_CanSeeBlockCharacter) == 0x000010, "Wrong size on EndBattleAIController_CanSeeBlockCharacter");
static_assert(offsetof(EndBattleAIController_CanSeeBlockCharacter, InChara) == 0x000000, "Member 'EndBattleAIController_CanSeeBlockCharacter::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_CanSeeBlockCharacter, ReturnValue) == 0x000008, "Member 'EndBattleAIController_CanSeeBlockCharacter::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.CanSeeBlockTarget
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAIController_CanSeeBlockTarget final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_CanSeeBlockTarget) == 0x000001, "Wrong alignment on EndBattleAIController_CanSeeBlockTarget");
static_assert(sizeof(EndBattleAIController_CanSeeBlockTarget) == 0x000001, "Wrong size on EndBattleAIController_CanSeeBlockTarget");
static_assert(offsetof(EndBattleAIController_CanSeeBlockTarget, ReturnValue) == 0x000000, "Member 'EndBattleAIController_CanSeeBlockTarget::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.CanSeeCharacter
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAIController_CanSeeCharacter final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAIController_CanSeeCharacter) == 0x000008, "Wrong alignment on EndBattleAIController_CanSeeCharacter");
static_assert(sizeof(EndBattleAIController_CanSeeCharacter) == 0x000010, "Wrong size on EndBattleAIController_CanSeeCharacter");
static_assert(offsetof(EndBattleAIController_CanSeeCharacter, InChara) == 0x000000, "Member 'EndBattleAIController_CanSeeCharacter::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_CanSeeCharacter, ReturnValue) == 0x000008, "Member 'EndBattleAIController_CanSeeCharacter::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.CanSeeTarget
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAIController_CanSeeTarget final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_CanSeeTarget) == 0x000001, "Wrong alignment on EndBattleAIController_CanSeeTarget");
static_assert(sizeof(EndBattleAIController_CanSeeTarget) == 0x000001, "Wrong size on EndBattleAIController_CanSeeTarget");
static_assert(offsetof(EndBattleAIController_CanSeeTarget, ReturnValue) == 0x000000, "Member 'EndBattleAIController_CanSeeTarget::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.ChangeBattleScenePhase
// 0x0004 (0x0004 - 0x0000)
struct EndBattleAIController_ChangeBattleScenePhase final
{
public:
	int32                                         Phase;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_ChangeBattleScenePhase) == 0x000004, "Wrong alignment on EndBattleAIController_ChangeBattleScenePhase");
static_assert(sizeof(EndBattleAIController_ChangeBattleScenePhase) == 0x000004, "Wrong size on EndBattleAIController_ChangeBattleScenePhase");
static_assert(offsetof(EndBattleAIController_ChangeBattleScenePhase, Phase) == 0x000000, "Member 'EndBattleAIController_ChangeBattleScenePhase::Phase' has a wrong offset!");

// Function EndGame.EndBattleAIController.CreateDamageSource
// 0x0020 (0x0020 - 0x0000)
struct EndBattleAIController_CreateDamageSource final
{
public:
	class FName                                   DamageSourceID;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AEndCharacter*                          targetChara;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AbilityID;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideDamage;                                   // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         OverrideDamage;                                    // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_CreateDamageSource) == 0x000008, "Wrong alignment on EndBattleAIController_CreateDamageSource");
static_assert(sizeof(EndBattleAIController_CreateDamageSource) == 0x000020, "Wrong size on EndBattleAIController_CreateDamageSource");
static_assert(offsetof(EndBattleAIController_CreateDamageSource, DamageSourceID) == 0x000000, "Member 'EndBattleAIController_CreateDamageSource::DamageSourceID' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_CreateDamageSource, targetChara) == 0x000008, "Member 'EndBattleAIController_CreateDamageSource::targetChara' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_CreateDamageSource, AbilityID) == 0x000010, "Member 'EndBattleAIController_CreateDamageSource::AbilityID' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_CreateDamageSource, bOverrideDamage) == 0x000018, "Member 'EndBattleAIController_CreateDamageSource::bOverrideDamage' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_CreateDamageSource, OverrideDamage) == 0x00001C, "Member 'EndBattleAIController_CreateDamageSource::OverrideDamage' has a wrong offset!");

// Function EndGame.EndBattleAIController.CreateDamageSourceByCurrentTargetBase
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAIController_CreateDamageSourceByCurrentTargetBase final
{
public:
	class FName                                   DamageSourceID;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_CreateDamageSourceByCurrentTargetBase) == 0x000004, "Wrong alignment on EndBattleAIController_CreateDamageSourceByCurrentTargetBase");
static_assert(sizeof(EndBattleAIController_CreateDamageSourceByCurrentTargetBase) == 0x000008, "Wrong size on EndBattleAIController_CreateDamageSourceByCurrentTargetBase");
static_assert(offsetof(EndBattleAIController_CreateDamageSourceByCurrentTargetBase, DamageSourceID) == 0x000000, "Member 'EndBattleAIController_CreateDamageSourceByCurrentTargetBase::DamageSourceID' has a wrong offset!");

// Function EndGame.EndBattleAIController.CreateSyncAction
// 0x0018 (0x0018 - 0x0000)
struct EndBattleAIController_CreateSyncAction final
{
public:
	class FName                                   syncActionID;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AEndCharacter*                          targetChara;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverwrite;                                        // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAIController_CreateSyncAction) == 0x000008, "Wrong alignment on EndBattleAIController_CreateSyncAction");
static_assert(sizeof(EndBattleAIController_CreateSyncAction) == 0x000018, "Wrong size on EndBattleAIController_CreateSyncAction");
static_assert(offsetof(EndBattleAIController_CreateSyncAction, syncActionID) == 0x000000, "Member 'EndBattleAIController_CreateSyncAction::syncActionID' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_CreateSyncAction, targetChara) == 0x000008, "Member 'EndBattleAIController_CreateSyncAction::targetChara' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_CreateSyncAction, bOverwrite) == 0x000010, "Member 'EndBattleAIController_CreateSyncAction::bOverwrite' has a wrong offset!");

// Function EndGame.EndBattleAIController.DestroyDamageSource
// 0x000C (0x000C - 0x0000)
struct EndBattleAIController_DestroyDamageSource final
{
public:
	class FName                                   DamageSourceID;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDestroyEffect;                                    // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAIController_DestroyDamageSource) == 0x000004, "Wrong alignment on EndBattleAIController_DestroyDamageSource");
static_assert(sizeof(EndBattleAIController_DestroyDamageSource) == 0x00000C, "Wrong size on EndBattleAIController_DestroyDamageSource");
static_assert(offsetof(EndBattleAIController_DestroyDamageSource, DamageSourceID) == 0x000000, "Member 'EndBattleAIController_DestroyDamageSource::DamageSourceID' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_DestroyDamageSource, bDestroyEffect) == 0x000008, "Member 'EndBattleAIController_DestroyDamageSource::bDestroyEffect' has a wrong offset!");

// Function EndGame.EndBattleAIController.DoOnceWithThen
// 0x0028 (0x0028 - 0x0000)
struct EndBattleAIController_DoOnceWithThen final
{
public:
	EEndDoOnceCode                                Code;                                              // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	EEndDoOnceOutCode                             Result;                                            // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAIController_DoOnceWithThen) == 0x000008, "Wrong alignment on EndBattleAIController_DoOnceWithThen");
static_assert(sizeof(EndBattleAIController_DoOnceWithThen) == 0x000028, "Wrong size on EndBattleAIController_DoOnceWithThen");
static_assert(offsetof(EndBattleAIController_DoOnceWithThen, Code) == 0x000000, "Member 'EndBattleAIController_DoOnceWithThen::Code' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_DoOnceWithThen, LatentInfo) == 0x000008, "Member 'EndBattleAIController_DoOnceWithThen::LatentInfo' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_DoOnceWithThen, Result) == 0x000020, "Member 'EndBattleAIController_DoOnceWithThen::Result' has a wrong offset!");

// Function EndGame.EndBattleAIController.FloatCmpBranch
// 0x000C (0x000C - 0x0000)
struct EndBattleAIController_FloatCmpBranch final
{
public:
	float                                         ValueA;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ValueB;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndAiMathCmp                                 cmp;                                               // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndAIBranchBit                               OutSignal;                                         // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAIController_FloatCmpBranch) == 0x000004, "Wrong alignment on EndBattleAIController_FloatCmpBranch");
static_assert(sizeof(EndBattleAIController_FloatCmpBranch) == 0x00000C, "Wrong size on EndBattleAIController_FloatCmpBranch");
static_assert(offsetof(EndBattleAIController_FloatCmpBranch, ValueA) == 0x000000, "Member 'EndBattleAIController_FloatCmpBranch::ValueA' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_FloatCmpBranch, ValueB) == 0x000004, "Member 'EndBattleAIController_FloatCmpBranch::ValueB' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_FloatCmpBranch, cmp) == 0x000008, "Member 'EndBattleAIController_FloatCmpBranch::cmp' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_FloatCmpBranch, OutSignal) == 0x000009, "Member 'EndBattleAIController_FloatCmpBranch::OutSignal' has a wrong offset!");

// Function EndGame.EndBattleAIController.ForceDisableAimEffectorSetting
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAIController_ForceDisableAimEffectorSetting final
{
public:
	class FName                                   EffectorSettingName;                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_ForceDisableAimEffectorSetting) == 0x000004, "Wrong alignment on EndBattleAIController_ForceDisableAimEffectorSetting");
static_assert(sizeof(EndBattleAIController_ForceDisableAimEffectorSetting) == 0x000008, "Wrong size on EndBattleAIController_ForceDisableAimEffectorSetting");
static_assert(offsetof(EndBattleAIController_ForceDisableAimEffectorSetting, EffectorSettingName) == 0x000000, "Member 'EndBattleAIController_ForceDisableAimEffectorSetting::EffectorSettingName' has a wrong offset!");

// Function EndGame.EndBattleAIController.ForceEnableAimEffectorSetting
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAIController_ForceEnableAimEffectorSetting final
{
public:
	class FName                                   EffectorSettingName;                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_ForceEnableAimEffectorSetting) == 0x000004, "Wrong alignment on EndBattleAIController_ForceEnableAimEffectorSetting");
static_assert(sizeof(EndBattleAIController_ForceEnableAimEffectorSetting) == 0x000008, "Wrong size on EndBattleAIController_ForceEnableAimEffectorSetting");
static_assert(offsetof(EndBattleAIController_ForceEnableAimEffectorSetting, EffectorSettingName) == 0x000000, "Member 'EndBattleAIController_ForceEnableAimEffectorSetting::EffectorSettingName' has a wrong offset!");

// Function EndGame.EndBattleAIController.ForceRequestAction
// 0x000C (0x000C - 0x0000)
struct EndBattleAIController_ForceRequestAction final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAIController_ForceRequestAction) == 0x000004, "Wrong alignment on EndBattleAIController_ForceRequestAction");
static_assert(sizeof(EndBattleAIController_ForceRequestAction) == 0x00000C, "Wrong size on EndBattleAIController_ForceRequestAction");
static_assert(offsetof(EndBattleAIController_ForceRequestAction, InName) == 0x000000, "Member 'EndBattleAIController_ForceRequestAction::InName' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_ForceRequestAction, ReturnValue) == 0x000008, "Member 'EndBattleAIController_ForceRequestAction::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.GetActionAbilityLocalCountFromID
// 0x000C (0x000C - 0x0000)
struct EndBattleAIController_GetActionAbilityLocalCountFromID final
{
public:
	class FName                                   InAbilityID;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_GetActionAbilityLocalCountFromID) == 0x000004, "Wrong alignment on EndBattleAIController_GetActionAbilityLocalCountFromID");
static_assert(sizeof(EndBattleAIController_GetActionAbilityLocalCountFromID) == 0x00000C, "Wrong size on EndBattleAIController_GetActionAbilityLocalCountFromID");
static_assert(offsetof(EndBattleAIController_GetActionAbilityLocalCountFromID, InAbilityID) == 0x000000, "Member 'EndBattleAIController_GetActionAbilityLocalCountFromID::InAbilityID' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_GetActionAbilityLocalCountFromID, ReturnValue) == 0x000008, "Member 'EndBattleAIController_GetActionAbilityLocalCountFromID::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.GetActionCharacter
// 0x0020 (0x0020 - 0x0000)
struct EndBattleAIController_GetActionCharacter final
{
public:
	EEndAiBattleTargetType                        InTarget;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   InActionName;                                      // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AEndCharacter*>                  ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_GetActionCharacter) == 0x000008, "Wrong alignment on EndBattleAIController_GetActionCharacter");
static_assert(sizeof(EndBattleAIController_GetActionCharacter) == 0x000020, "Wrong size on EndBattleAIController_GetActionCharacter");
static_assert(offsetof(EndBattleAIController_GetActionCharacter, InTarget) == 0x000000, "Member 'EndBattleAIController_GetActionCharacter::InTarget' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_GetActionCharacter, InActionName) == 0x000004, "Member 'EndBattleAIController_GetActionCharacter::InActionName' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_GetActionCharacter, ReturnValue) == 0x000010, "Member 'EndBattleAIController_GetActionCharacter::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.GetActionCount
// 0x000C (0x000C - 0x0000)
struct EndBattleAIController_GetActionCount final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_GetActionCount) == 0x000004, "Wrong alignment on EndBattleAIController_GetActionCount");
static_assert(sizeof(EndBattleAIController_GetActionCount) == 0x00000C, "Wrong size on EndBattleAIController_GetActionCount");
static_assert(offsetof(EndBattleAIController_GetActionCount, InName) == 0x000000, "Member 'EndBattleAIController_GetActionCount::InName' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_GetActionCount, ReturnValue) == 0x000008, "Member 'EndBattleAIController_GetActionCount::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.GetActionInTime
// 0x000C (0x000C - 0x0000)
struct EndBattleAIController_GetActionInTime final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_GetActionInTime) == 0x000004, "Wrong alignment on EndBattleAIController_GetActionInTime");
static_assert(sizeof(EndBattleAIController_GetActionInTime) == 0x00000C, "Wrong size on EndBattleAIController_GetActionInTime");
static_assert(offsetof(EndBattleAIController_GetActionInTime, InName) == 0x000000, "Member 'EndBattleAIController_GetActionInTime::InName' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_GetActionInTime, ReturnValue) == 0x000008, "Member 'EndBattleAIController_GetActionInTime::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.GetActionLocalCount
// 0x000C (0x000C - 0x0000)
struct EndBattleAIController_GetActionLocalCount final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_GetActionLocalCount) == 0x000004, "Wrong alignment on EndBattleAIController_GetActionLocalCount");
static_assert(sizeof(EndBattleAIController_GetActionLocalCount) == 0x00000C, "Wrong size on EndBattleAIController_GetActionLocalCount");
static_assert(offsetof(EndBattleAIController_GetActionLocalCount, InName) == 0x000000, "Member 'EndBattleAIController_GetActionLocalCount::InName' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_GetActionLocalCount, ReturnValue) == 0x000008, "Member 'EndBattleAIController_GetActionLocalCount::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.GetActionRequestCount
// 0x000C (0x000C - 0x0000)
struct EndBattleAIController_GetActionRequestCount final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_GetActionRequestCount) == 0x000004, "Wrong alignment on EndBattleAIController_GetActionRequestCount");
static_assert(sizeof(EndBattleAIController_GetActionRequestCount) == 0x00000C, "Wrong size on EndBattleAIController_GetActionRequestCount");
static_assert(offsetof(EndBattleAIController_GetActionRequestCount, InName) == 0x000000, "Member 'EndBattleAIController_GetActionRequestCount::InName' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_GetActionRequestCount, ReturnValue) == 0x000008, "Member 'EndBattleAIController_GetActionRequestCount::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.GetActionTime
// 0x000C (0x000C - 0x0000)
struct EndBattleAIController_GetActionTime final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_GetActionTime) == 0x000004, "Wrong alignment on EndBattleAIController_GetActionTime");
static_assert(sizeof(EndBattleAIController_GetActionTime) == 0x00000C, "Wrong size on EndBattleAIController_GetActionTime");
static_assert(offsetof(EndBattleAIController_GetActionTime, InName) == 0x000000, "Member 'EndBattleAIController_GetActionTime::InName' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_GetActionTime, ReturnValue) == 0x000008, "Member 'EndBattleAIController_GetActionTime::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.GetAerialBoidsLeader
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAIController_GetAerialBoidsLeader final
{
public:
	class AEndCharacter*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_GetAerialBoidsLeader) == 0x000008, "Wrong alignment on EndBattleAIController_GetAerialBoidsLeader");
static_assert(sizeof(EndBattleAIController_GetAerialBoidsLeader) == 0x000008, "Wrong size on EndBattleAIController_GetAerialBoidsLeader");
static_assert(offsetof(EndBattleAIController_GetAerialBoidsLeader, ReturnValue) == 0x000000, "Member 'EndBattleAIController_GetAerialBoidsLeader::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.GetAerialHeliVelocity
// 0x0004 (0x0004 - 0x0000)
struct EndBattleAIController_GetAerialHeliVelocity final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_GetAerialHeliVelocity) == 0x000004, "Wrong alignment on EndBattleAIController_GetAerialHeliVelocity");
static_assert(sizeof(EndBattleAIController_GetAerialHeliVelocity) == 0x000004, "Wrong size on EndBattleAIController_GetAerialHeliVelocity");
static_assert(offsetof(EndBattleAIController_GetAerialHeliVelocity, ReturnValue) == 0x000000, "Member 'EndBattleAIController_GetAerialHeliVelocity::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.GetAerialMoveType
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAIController_GetAerialMoveType final
{
public:
	EBattleAirMoveType                            ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_GetAerialMoveType) == 0x000001, "Wrong alignment on EndBattleAIController_GetAerialMoveType");
static_assert(sizeof(EndBattleAIController_GetAerialMoveType) == 0x000001, "Wrong size on EndBattleAIController_GetAerialMoveType");
static_assert(offsetof(EndBattleAIController_GetAerialMoveType, ReturnValue) == 0x000000, "Member 'EndBattleAIController_GetAerialMoveType::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.GetAirMoveGoalDistance
// 0x0004 (0x0004 - 0x0000)
struct EndBattleAIController_GetAirMoveGoalDistance final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_GetAirMoveGoalDistance) == 0x000004, "Wrong alignment on EndBattleAIController_GetAirMoveGoalDistance");
static_assert(sizeof(EndBattleAIController_GetAirMoveGoalDistance) == 0x000004, "Wrong size on EndBattleAIController_GetAirMoveGoalDistance");
static_assert(offsetof(EndBattleAIController_GetAirMoveGoalDistance, ReturnValue) == 0x000000, "Member 'EndBattleAIController_GetAirMoveGoalDistance::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.GetAirMoveGoalDistance2D
// 0x0004 (0x0004 - 0x0000)
struct EndBattleAIController_GetAirMoveGoalDistance2D final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_GetAirMoveGoalDistance2D) == 0x000004, "Wrong alignment on EndBattleAIController_GetAirMoveGoalDistance2D");
static_assert(sizeof(EndBattleAIController_GetAirMoveGoalDistance2D) == 0x000004, "Wrong size on EndBattleAIController_GetAirMoveGoalDistance2D");
static_assert(offsetof(EndBattleAIController_GetAirMoveGoalDistance2D, ReturnValue) == 0x000000, "Member 'EndBattleAIController_GetAirMoveGoalDistance2D::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.GetATB
// 0x0004 (0x0004 - 0x0000)
struct EndBattleAIController_GetATB final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_GetATB) == 0x000004, "Wrong alignment on EndBattleAIController_GetATB");
static_assert(sizeof(EndBattleAIController_GetATB) == 0x000004, "Wrong size on EndBattleAIController_GetATB");
static_assert(offsetof(EndBattleAIController_GetATB, ReturnValue) == 0x000000, "Member 'EndBattleAIController_GetATB::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.GetATBMax
// 0x0004 (0x0004 - 0x0000)
struct EndBattleAIController_GetATBMax final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_GetATBMax) == 0x000004, "Wrong alignment on EndBattleAIController_GetATBMax");
static_assert(sizeof(EndBattleAIController_GetATBMax) == 0x000004, "Wrong size on EndBattleAIController_GetATBMax");
static_assert(offsetof(EndBattleAIController_GetATBMax, ReturnValue) == 0x000000, "Member 'EndBattleAIController_GetATBMax::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.GetBattleAIFlag
// 0x0002 (0x0002 - 0x0000)
struct EndBattleAIController_GetBattleAIFlag final
{
public:
	EBattleAIInfoFlag                             InType;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_GetBattleAIFlag) == 0x000001, "Wrong alignment on EndBattleAIController_GetBattleAIFlag");
static_assert(sizeof(EndBattleAIController_GetBattleAIFlag) == 0x000002, "Wrong size on EndBattleAIController_GetBattleAIFlag");
static_assert(offsetof(EndBattleAIController_GetBattleAIFlag, InType) == 0x000000, "Member 'EndBattleAIController_GetBattleAIFlag::InType' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_GetBattleAIFlag, ReturnValue) == 0x000001, "Member 'EndBattleAIController_GetBattleAIFlag::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.GetBattleAIParam
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAIController_GetBattleAIParam final
{
public:
	EBattleAIInfoParam                            InType;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_GetBattleAIParam) == 0x000004, "Wrong alignment on EndBattleAIController_GetBattleAIParam");
static_assert(sizeof(EndBattleAIController_GetBattleAIParam) == 0x000008, "Wrong size on EndBattleAIController_GetBattleAIParam");
static_assert(offsetof(EndBattleAIController_GetBattleAIParam, InType) == 0x000000, "Member 'EndBattleAIController_GetBattleAIParam::InType' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_GetBattleAIParam, ReturnValue) == 0x000004, "Member 'EndBattleAIController_GetBattleAIParam::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.GetBattleAIProgress
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAIController_GetBattleAIProgress final
{
public:
	EBattleAIProgress                             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_GetBattleAIProgress) == 0x000001, "Wrong alignment on EndBattleAIController_GetBattleAIProgress");
static_assert(sizeof(EndBattleAIController_GetBattleAIProgress) == 0x000001, "Wrong size on EndBattleAIController_GetBattleAIProgress");
static_assert(offsetof(EndBattleAIController_GetBattleAIProgress, ReturnValue) == 0x000000, "Member 'EndBattleAIController_GetBattleAIProgress::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.GetBattleInSituation
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAIController_GetBattleInSituation final
{
public:
	EBattleInSituationType                        ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_GetBattleInSituation) == 0x000001, "Wrong alignment on EndBattleAIController_GetBattleInSituation");
static_assert(sizeof(EndBattleAIController_GetBattleInSituation) == 0x000001, "Wrong size on EndBattleAIController_GetBattleInSituation");
static_assert(offsetof(EndBattleAIController_GetBattleInSituation, ReturnValue) == 0x000000, "Member 'EndBattleAIController_GetBattleInSituation::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.GetBattleMoveType
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAIController_GetBattleMoveType final
{
public:
	EBattleMoveType                               ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_GetBattleMoveType) == 0x000001, "Wrong alignment on EndBattleAIController_GetBattleMoveType");
static_assert(sizeof(EndBattleAIController_GetBattleMoveType) == 0x000001, "Wrong size on EndBattleAIController_GetBattleMoveType");
static_assert(offsetof(EndBattleAIController_GetBattleMoveType, ReturnValue) == 0x000000, "Member 'EndBattleAIController_GetBattleMoveType::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.GetBattleSceneBlueprint
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAIController_GetBattleSceneBlueprint final
{
public:
	class AEndBattleSceneBlueprint*               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_GetBattleSceneBlueprint) == 0x000008, "Wrong alignment on EndBattleAIController_GetBattleSceneBlueprint");
static_assert(sizeof(EndBattleAIController_GetBattleSceneBlueprint) == 0x000008, "Wrong size on EndBattleAIController_GetBattleSceneBlueprint");
static_assert(offsetof(EndBattleAIController_GetBattleSceneBlueprint, ReturnValue) == 0x000000, "Member 'EndBattleAIController_GetBattleSceneBlueprint::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.GetBattleScenePhase
// 0x0004 (0x0004 - 0x0000)
struct EndBattleAIController_GetBattleScenePhase final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_GetBattleScenePhase) == 0x000004, "Wrong alignment on EndBattleAIController_GetBattleScenePhase");
static_assert(sizeof(EndBattleAIController_GetBattleScenePhase) == 0x000004, "Wrong size on EndBattleAIController_GetBattleScenePhase");
static_assert(offsetof(EndBattleAIController_GetBattleScenePhase, ReturnValue) == 0x000000, "Member 'EndBattleAIController_GetBattleScenePhase::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.GetBattleScenePhaseTime
// 0x0004 (0x0004 - 0x0000)
struct EndBattleAIController_GetBattleScenePhaseTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_GetBattleScenePhaseTime) == 0x000004, "Wrong alignment on EndBattleAIController_GetBattleScenePhaseTime");
static_assert(sizeof(EndBattleAIController_GetBattleScenePhaseTime) == 0x000004, "Wrong size on EndBattleAIController_GetBattleScenePhaseTime");
static_assert(offsetof(EndBattleAIController_GetBattleScenePhaseTime, ReturnValue) == 0x000000, "Member 'EndBattleAIController_GetBattleScenePhaseTime::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.GetBP
// 0x0004 (0x0004 - 0x0000)
struct EndBattleAIController_GetBP final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_GetBP) == 0x000004, "Wrong alignment on EndBattleAIController_GetBP");
static_assert(sizeof(EndBattleAIController_GetBP) == 0x000004, "Wrong size on EndBattleAIController_GetBP");
static_assert(offsetof(EndBattleAIController_GetBP, ReturnValue) == 0x000000, "Member 'EndBattleAIController_GetBP::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.GetBPPercent
// 0x0004 (0x0004 - 0x0000)
struct EndBattleAIController_GetBPPercent final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_GetBPPercent) == 0x000004, "Wrong alignment on EndBattleAIController_GetBPPercent");
static_assert(sizeof(EndBattleAIController_GetBPPercent) == 0x000004, "Wrong size on EndBattleAIController_GetBPPercent");
static_assert(offsetof(EndBattleAIController_GetBPPercent, ReturnValue) == 0x000000, "Member 'EndBattleAIController_GetBPPercent::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.GetCharaBattleID
// 0x0004 (0x0004 - 0x0000)
struct EndBattleAIController_GetCharaBattleID final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_GetCharaBattleID) == 0x000004, "Wrong alignment on EndBattleAIController_GetCharaBattleID");
static_assert(sizeof(EndBattleAIController_GetCharaBattleID) == 0x000004, "Wrong size on EndBattleAIController_GetCharaBattleID");
static_assert(offsetof(EndBattleAIController_GetCharaBattleID, ReturnValue) == 0x000000, "Member 'EndBattleAIController_GetCharaBattleID::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.GetCharacter
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAIController_GetCharacter final
{
public:
	class AEndCharacter*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_GetCharacter) == 0x000008, "Wrong alignment on EndBattleAIController_GetCharacter");
static_assert(sizeof(EndBattleAIController_GetCharacter) == 0x000008, "Wrong size on EndBattleAIController_GetCharacter");
static_assert(offsetof(EndBattleAIController_GetCharacter, ReturnValue) == 0x000000, "Member 'EndBattleAIController_GetCharacter::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.GetCharaRoleID
// 0x0004 (0x0004 - 0x0000)
struct EndBattleAIController_GetCharaRoleID final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_GetCharaRoleID) == 0x000004, "Wrong alignment on EndBattleAIController_GetCharaRoleID");
static_assert(sizeof(EndBattleAIController_GetCharaRoleID) == 0x000004, "Wrong size on EndBattleAIController_GetCharaRoleID");
static_assert(offsetof(EndBattleAIController_GetCharaRoleID, ReturnValue) == 0x000000, "Member 'EndBattleAIController_GetCharaRoleID::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.GetCharaSpec
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAIController_GetCharaSpec final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_GetCharaSpec) == 0x000004, "Wrong alignment on EndBattleAIController_GetCharaSpec");
static_assert(sizeof(EndBattleAIController_GetCharaSpec) == 0x000008, "Wrong size on EndBattleAIController_GetCharaSpec");
static_assert(offsetof(EndBattleAIController_GetCharaSpec, ReturnValue) == 0x000000, "Member 'EndBattleAIController_GetCharaSpec::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.GetCurrentAction
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAIController_GetCurrentAction final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_GetCurrentAction) == 0x000004, "Wrong alignment on EndBattleAIController_GetCurrentAction");
static_assert(sizeof(EndBattleAIController_GetCurrentAction) == 0x000008, "Wrong size on EndBattleAIController_GetCurrentAction");
static_assert(offsetof(EndBattleAIController_GetCurrentAction, ReturnValue) == 0x000000, "Member 'EndBattleAIController_GetCurrentAction::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.GetCurrentBindAction
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAIController_GetCurrentBindAction final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_GetCurrentBindAction) == 0x000004, "Wrong alignment on EndBattleAIController_GetCurrentBindAction");
static_assert(sizeof(EndBattleAIController_GetCurrentBindAction) == 0x000008, "Wrong size on EndBattleAIController_GetCurrentBindAction");
static_assert(offsetof(EndBattleAIController_GetCurrentBindAction, ReturnValue) == 0x000000, "Member 'EndBattleAIController_GetCurrentBindAction::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.GetDistance
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAIController_GetDistance final
{
public:
	class AEndCharacter*                          Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Path;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_GetDistance) == 0x000008, "Wrong alignment on EndBattleAIController_GetDistance");
static_assert(sizeof(EndBattleAIController_GetDistance) == 0x000010, "Wrong size on EndBattleAIController_GetDistance");
static_assert(offsetof(EndBattleAIController_GetDistance, Target) == 0x000000, "Member 'EndBattleAIController_GetDistance::Target' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_GetDistance, Path) == 0x000008, "Member 'EndBattleAIController_GetDistance::Path' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_GetDistance, ReturnValue) == 0x00000C, "Member 'EndBattleAIController_GetDistance::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.GetEnemyABSAngle
// 0x0004 (0x0004 - 0x0000)
struct EndBattleAIController_GetEnemyABSAngle final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_GetEnemyABSAngle) == 0x000004, "Wrong alignment on EndBattleAIController_GetEnemyABSAngle");
static_assert(sizeof(EndBattleAIController_GetEnemyABSAngle) == 0x000004, "Wrong size on EndBattleAIController_GetEnemyABSAngle");
static_assert(offsetof(EndBattleAIController_GetEnemyABSAngle, ReturnValue) == 0x000000, "Member 'EndBattleAIController_GetEnemyABSAngle::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.GetEnemyAngle
// 0x0004 (0x0004 - 0x0000)
struct EndBattleAIController_GetEnemyAngle final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_GetEnemyAngle) == 0x000004, "Wrong alignment on EndBattleAIController_GetEnemyAngle");
static_assert(sizeof(EndBattleAIController_GetEnemyAngle) == 0x000004, "Wrong size on EndBattleAIController_GetEnemyAngle");
static_assert(offsetof(EndBattleAIController_GetEnemyAngle, ReturnValue) == 0x000000, "Member 'EndBattleAIController_GetEnemyAngle::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.GetEnemyDistance
// 0x0004 (0x0004 - 0x0000)
struct EndBattleAIController_GetEnemyDistance final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_GetEnemyDistance) == 0x000004, "Wrong alignment on EndBattleAIController_GetEnemyDistance");
static_assert(sizeof(EndBattleAIController_GetEnemyDistance) == 0x000004, "Wrong size on EndBattleAIController_GetEnemyDistance");
static_assert(offsetof(EndBattleAIController_GetEnemyDistance, ReturnValue) == 0x000000, "Member 'EndBattleAIController_GetEnemyDistance::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.GetEnemyDistance2D
// 0x0004 (0x0004 - 0x0000)
struct EndBattleAIController_GetEnemyDistance2D final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_GetEnemyDistance2D) == 0x000004, "Wrong alignment on EndBattleAIController_GetEnemyDistance2D");
static_assert(sizeof(EndBattleAIController_GetEnemyDistance2D) == 0x000004, "Wrong size on EndBattleAIController_GetEnemyDistance2D");
static_assert(offsetof(EndBattleAIController_GetEnemyDistance2D, ReturnValue) == 0x000000, "Member 'EndBattleAIController_GetEnemyDistance2D::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.GetEnemyHeightDistance
// 0x0004 (0x0004 - 0x0000)
struct EndBattleAIController_GetEnemyHeightDistance final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_GetEnemyHeightDistance) == 0x000004, "Wrong alignment on EndBattleAIController_GetEnemyHeightDistance");
static_assert(sizeof(EndBattleAIController_GetEnemyHeightDistance) == 0x000004, "Wrong size on EndBattleAIController_GetEnemyHeightDistance");
static_assert(offsetof(EndBattleAIController_GetEnemyHeightDistance, ReturnValue) == 0x000000, "Member 'EndBattleAIController_GetEnemyHeightDistance::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.GetEnemyHeightDistanceAbs
// 0x0004 (0x0004 - 0x0000)
struct EndBattleAIController_GetEnemyHeightDistanceAbs final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_GetEnemyHeightDistanceAbs) == 0x000004, "Wrong alignment on EndBattleAIController_GetEnemyHeightDistanceAbs");
static_assert(sizeof(EndBattleAIController_GetEnemyHeightDistanceAbs) == 0x000004, "Wrong size on EndBattleAIController_GetEnemyHeightDistanceAbs");
static_assert(offsetof(EndBattleAIController_GetEnemyHeightDistanceAbs, ReturnValue) == 0x000000, "Member 'EndBattleAIController_GetEnemyHeightDistanceAbs::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.GetEnemyLocation
// 0x000C (0x000C - 0x0000)
struct EndBattleAIController_GetEnemyLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_GetEnemyLocation) == 0x000004, "Wrong alignment on EndBattleAIController_GetEnemyLocation");
static_assert(sizeof(EndBattleAIController_GetEnemyLocation) == 0x00000C, "Wrong size on EndBattleAIController_GetEnemyLocation");
static_assert(offsetof(EndBattleAIController_GetEnemyLocation, ReturnValue) == 0x000000, "Member 'EndBattleAIController_GetEnemyLocation::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.GetEnemyMember
// 0x0018 (0x0018 - 0x0000)
struct EndBattleAIController_GetEnemyMember final
{
public:
	TArray<class AEndCharacter*>                  OutMember;                                         // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bAlive;                                            // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAIController_GetEnemyMember) == 0x000008, "Wrong alignment on EndBattleAIController_GetEnemyMember");
static_assert(sizeof(EndBattleAIController_GetEnemyMember) == 0x000018, "Wrong size on EndBattleAIController_GetEnemyMember");
static_assert(offsetof(EndBattleAIController_GetEnemyMember, OutMember) == 0x000000, "Member 'EndBattleAIController_GetEnemyMember::OutMember' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_GetEnemyMember, bAlive) == 0x000010, "Member 'EndBattleAIController_GetEnemyMember::bAlive' has a wrong offset!");

// Function EndGame.EndBattleAIController.GetEnemyMembersIgnoreSelf
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAIController_GetEnemyMembersIgnoreSelf final
{
public:
	TArray<class AEndCharacter*>                  ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_GetEnemyMembersIgnoreSelf) == 0x000008, "Wrong alignment on EndBattleAIController_GetEnemyMembersIgnoreSelf");
static_assert(sizeof(EndBattleAIController_GetEnemyMembersIgnoreSelf) == 0x000010, "Wrong size on EndBattleAIController_GetEnemyMembersIgnoreSelf");
static_assert(offsetof(EndBattleAIController_GetEnemyMembersIgnoreSelf, ReturnValue) == 0x000000, "Member 'EndBattleAIController_GetEnemyMembersIgnoreSelf::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.GetEnemyPitchAngle
// 0x0004 (0x0004 - 0x0000)
struct EndBattleAIController_GetEnemyPitchAngle final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_GetEnemyPitchAngle) == 0x000004, "Wrong alignment on EndBattleAIController_GetEnemyPitchAngle");
static_assert(sizeof(EndBattleAIController_GetEnemyPitchAngle) == 0x000004, "Wrong size on EndBattleAIController_GetEnemyPitchAngle");
static_assert(offsetof(EndBattleAIController_GetEnemyPitchAngle, ReturnValue) == 0x000000, "Member 'EndBattleAIController_GetEnemyPitchAngle::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.GetEnemyRotation
// 0x000C (0x000C - 0x0000)
struct EndBattleAIController_GetEnemyRotation final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_GetEnemyRotation) == 0x000004, "Wrong alignment on EndBattleAIController_GetEnemyRotation");
static_assert(sizeof(EndBattleAIController_GetEnemyRotation) == 0x00000C, "Wrong size on EndBattleAIController_GetEnemyRotation");
static_assert(offsetof(EndBattleAIController_GetEnemyRotation, ReturnValue) == 0x000000, "Member 'EndBattleAIController_GetEnemyRotation::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.GetEnemysDistance
// 0x0004 (0x0004 - 0x0000)
struct EndBattleAIController_GetEnemysDistance final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_GetEnemysDistance) == 0x000004, "Wrong alignment on EndBattleAIController_GetEnemysDistance");
static_assert(sizeof(EndBattleAIController_GetEnemysDistance) == 0x000004, "Wrong size on EndBattleAIController_GetEnemysDistance");
static_assert(offsetof(EndBattleAIController_GetEnemysDistance, ReturnValue) == 0x000000, "Member 'EndBattleAIController_GetEnemysDistance::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.GetEnemyToPathDistance
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAIController_GetEnemyToPathDistance final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_GetEnemyToPathDistance) == 0x000004, "Wrong alignment on EndBattleAIController_GetEnemyToPathDistance");
static_assert(sizeof(EndBattleAIController_GetEnemyToPathDistance) == 0x000010, "Wrong size on EndBattleAIController_GetEnemyToPathDistance");
static_assert(offsetof(EndBattleAIController_GetEnemyToPathDistance, Location) == 0x000000, "Member 'EndBattleAIController_GetEnemyToPathDistance::Location' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_GetEnemyToPathDistance, ReturnValue) == 0x00000C, "Member 'EndBattleAIController_GetEnemyToPathDistance::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.GetEnemyVector
// 0x000C (0x000C - 0x0000)
struct EndBattleAIController_GetEnemyVector final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_GetEnemyVector) == 0x000004, "Wrong alignment on EndBattleAIController_GetEnemyVector");
static_assert(sizeof(EndBattleAIController_GetEnemyVector) == 0x00000C, "Wrong size on EndBattleAIController_GetEnemyVector");
static_assert(offsetof(EndBattleAIController_GetEnemyVector, ReturnValue) == 0x000000, "Member 'EndBattleAIController_GetEnemyVector::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.GetEntryType
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAIController_GetEntryType final
{
public:
	EBattleEntryType                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_GetEntryType) == 0x000001, "Wrong alignment on EndBattleAIController_GetEntryType");
static_assert(sizeof(EndBattleAIController_GetEntryType) == 0x000001, "Wrong size on EndBattleAIController_GetEntryType");
static_assert(offsetof(EndBattleAIController_GetEntryType, ReturnValue) == 0x000000, "Member 'EndBattleAIController_GetEntryType::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.GetEscapeState
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAIController_GetEscapeState final
{
public:
	EEndAiEscapeState                             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_GetEscapeState) == 0x000001, "Wrong alignment on EndBattleAIController_GetEscapeState");
static_assert(sizeof(EndBattleAIController_GetEscapeState) == 0x000001, "Wrong size on EndBattleAIController_GetEscapeState");
static_assert(offsetof(EndBattleAIController_GetEscapeState, ReturnValue) == 0x000000, "Member 'EndBattleAIController_GetEscapeState::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.GetHP
// 0x0004 (0x0004 - 0x0000)
struct EndBattleAIController_GetHP final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_GetHP) == 0x000004, "Wrong alignment on EndBattleAIController_GetHP");
static_assert(sizeof(EndBattleAIController_GetHP) == 0x000004, "Wrong size on EndBattleAIController_GetHP");
static_assert(offsetof(EndBattleAIController_GetHP, ReturnValue) == 0x000000, "Member 'EndBattleAIController_GetHP::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.GetHPMax
// 0x0004 (0x0004 - 0x0000)
struct EndBattleAIController_GetHPMax final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_GetHPMax) == 0x000004, "Wrong alignment on EndBattleAIController_GetHPMax");
static_assert(sizeof(EndBattleAIController_GetHPMax) == 0x000004, "Wrong size on EndBattleAIController_GetHPMax");
static_assert(offsetof(EndBattleAIController_GetHPMax, ReturnValue) == 0x000000, "Member 'EndBattleAIController_GetHPMax::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.GetHPPercent
// 0x0004 (0x0004 - 0x0000)
struct EndBattleAIController_GetHPPercent final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_GetHPPercent) == 0x000004, "Wrong alignment on EndBattleAIController_GetHPPercent");
static_assert(sizeof(EndBattleAIController_GetHPPercent) == 0x000004, "Wrong size on EndBattleAIController_GetHPPercent");
static_assert(offsetof(EndBattleAIController_GetHPPercent, ReturnValue) == 0x000000, "Member 'EndBattleAIController_GetHPPercent::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.GetLeader
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAIController_GetLeader final
{
public:
	class AEndCharacter*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_GetLeader) == 0x000008, "Wrong alignment on EndBattleAIController_GetLeader");
static_assert(sizeof(EndBattleAIController_GetLeader) == 0x000008, "Wrong size on EndBattleAIController_GetLeader");
static_assert(offsetof(EndBattleAIController_GetLeader, ReturnValue) == 0x000000, "Member 'EndBattleAIController_GetLeader::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.GetNearestSplinePoint
// 0x0004 (0x0004 - 0x0000)
struct EndBattleAIController_GetNearestSplinePoint final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_GetNearestSplinePoint) == 0x000004, "Wrong alignment on EndBattleAIController_GetNearestSplinePoint");
static_assert(sizeof(EndBattleAIController_GetNearestSplinePoint) == 0x000004, "Wrong size on EndBattleAIController_GetNearestSplinePoint");
static_assert(offsetof(EndBattleAIController_GetNearestSplinePoint, ReturnValue) == 0x000000, "Member 'EndBattleAIController_GetNearestSplinePoint::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.GetNearestSplinePointFloat
// 0x0004 (0x0004 - 0x0000)
struct EndBattleAIController_GetNearestSplinePointFloat final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_GetNearestSplinePointFloat) == 0x000004, "Wrong alignment on EndBattleAIController_GetNearestSplinePointFloat");
static_assert(sizeof(EndBattleAIController_GetNearestSplinePointFloat) == 0x000004, "Wrong size on EndBattleAIController_GetNearestSplinePointFloat");
static_assert(offsetof(EndBattleAIController_GetNearestSplinePointFloat, ReturnValue) == 0x000000, "Member 'EndBattleAIController_GetNearestSplinePointFloat::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.GetNextWarpPosition
// 0x000C (0x000C - 0x0000)
struct EndBattleAIController_GetNextWarpPosition final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_GetNextWarpPosition) == 0x000004, "Wrong alignment on EndBattleAIController_GetNextWarpPosition");
static_assert(sizeof(EndBattleAIController_GetNextWarpPosition) == 0x00000C, "Wrong size on EndBattleAIController_GetNextWarpPosition");
static_assert(offsetof(EndBattleAIController_GetNextWarpPosition, ReturnValue) == 0x000000, "Member 'EndBattleAIController_GetNextWarpPosition::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.GetPartsHPPercent
// 0x000C (0x000C - 0x0000)
struct EndBattleAIController_GetPartsHPPercent final
{
public:
	class FName                                   partsID;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_GetPartsHPPercent) == 0x000004, "Wrong alignment on EndBattleAIController_GetPartsHPPercent");
static_assert(sizeof(EndBattleAIController_GetPartsHPPercent) == 0x00000C, "Wrong size on EndBattleAIController_GetPartsHPPercent");
static_assert(offsetof(EndBattleAIController_GetPartsHPPercent, partsID) == 0x000000, "Member 'EndBattleAIController_GetPartsHPPercent::partsID' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_GetPartsHPPercent, ReturnValue) == 0x000008, "Member 'EndBattleAIController_GetPartsHPPercent::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.GetPartyMember
// 0x0018 (0x0018 - 0x0000)
struct EndBattleAIController_GetPartyMember final
{
public:
	TArray<class AEndCharacter*>                  OutMember;                                         // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bIgnoreSelf;                                       // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAIController_GetPartyMember) == 0x000008, "Wrong alignment on EndBattleAIController_GetPartyMember");
static_assert(sizeof(EndBattleAIController_GetPartyMember) == 0x000018, "Wrong size on EndBattleAIController_GetPartyMember");
static_assert(offsetof(EndBattleAIController_GetPartyMember, OutMember) == 0x000000, "Member 'EndBattleAIController_GetPartyMember::OutMember' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_GetPartyMember, bIgnoreSelf) == 0x000010, "Member 'EndBattleAIController_GetPartyMember::bIgnoreSelf' has a wrong offset!");

// Function EndGame.EndBattleAIController.GetPathDistance
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAIController_GetPathDistance final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_GetPathDistance) == 0x000004, "Wrong alignment on EndBattleAIController_GetPathDistance");
static_assert(sizeof(EndBattleAIController_GetPathDistance) == 0x000010, "Wrong size on EndBattleAIController_GetPathDistance");
static_assert(offsetof(EndBattleAIController_GetPathDistance, Location) == 0x000000, "Member 'EndBattleAIController_GetPathDistance::Location' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_GetPathDistance, ReturnValue) == 0x00000C, "Member 'EndBattleAIController_GetPathDistance::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.GetRaceAndRoleCount
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAIController_GetRaceAndRoleCount final
{
public:
	class FName                                   InRace;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndAiBattleRole                              InRole;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_GetRaceAndRoleCount) == 0x000004, "Wrong alignment on EndBattleAIController_GetRaceAndRoleCount");
static_assert(sizeof(EndBattleAIController_GetRaceAndRoleCount) == 0x000010, "Wrong size on EndBattleAIController_GetRaceAndRoleCount");
static_assert(offsetof(EndBattleAIController_GetRaceAndRoleCount, InRace) == 0x000000, "Member 'EndBattleAIController_GetRaceAndRoleCount::InRace' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_GetRaceAndRoleCount, InRole) == 0x000008, "Member 'EndBattleAIController_GetRaceAndRoleCount::InRole' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_GetRaceAndRoleCount, ReturnValue) == 0x00000C, "Member 'EndBattleAIController_GetRaceAndRoleCount::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.GetRaceCount
// 0x000C (0x000C - 0x0000)
struct EndBattleAIController_GetRaceCount final
{
public:
	class FName                                   InRace;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_GetRaceCount) == 0x000004, "Wrong alignment on EndBattleAIController_GetRaceCount");
static_assert(sizeof(EndBattleAIController_GetRaceCount) == 0x00000C, "Wrong size on EndBattleAIController_GetRaceCount");
static_assert(offsetof(EndBattleAIController_GetRaceCount, InRace) == 0x000000, "Member 'EndBattleAIController_GetRaceCount::InRace' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_GetRaceCount, ReturnValue) == 0x000008, "Member 'EndBattleAIController_GetRaceCount::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.GetRatioSwitch
// 0x0018 (0x0018 - 0x0000)
struct EndBattleAIController_GetRatioSwitch final
{
public:
	TArray<int32>                                 inArray;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAIController_GetRatioSwitch) == 0x000008, "Wrong alignment on EndBattleAIController_GetRatioSwitch");
static_assert(sizeof(EndBattleAIController_GetRatioSwitch) == 0x000018, "Wrong size on EndBattleAIController_GetRatioSwitch");
static_assert(offsetof(EndBattleAIController_GetRatioSwitch, inArray) == 0x000000, "Member 'EndBattleAIController_GetRatioSwitch::inArray' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_GetRatioSwitch, ReturnValue) == 0x000010, "Member 'EndBattleAIController_GetRatioSwitch::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.GetRatioSwitch2
// 0x000C (0x000C - 0x0000)
struct EndBattleAIController_GetRatioSwitch2 final
{
public:
	int32                                         Switch0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Switch1;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_GetRatioSwitch2) == 0x000004, "Wrong alignment on EndBattleAIController_GetRatioSwitch2");
static_assert(sizeof(EndBattleAIController_GetRatioSwitch2) == 0x00000C, "Wrong size on EndBattleAIController_GetRatioSwitch2");
static_assert(offsetof(EndBattleAIController_GetRatioSwitch2, Switch0) == 0x000000, "Member 'EndBattleAIController_GetRatioSwitch2::Switch0' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_GetRatioSwitch2, Switch1) == 0x000004, "Member 'EndBattleAIController_GetRatioSwitch2::Switch1' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_GetRatioSwitch2, ReturnValue) == 0x000008, "Member 'EndBattleAIController_GetRatioSwitch2::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.GetRatioSwitch3
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAIController_GetRatioSwitch3 final
{
public:
	int32                                         Switch0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Switch1;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Switch2;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_GetRatioSwitch3) == 0x000004, "Wrong alignment on EndBattleAIController_GetRatioSwitch3");
static_assert(sizeof(EndBattleAIController_GetRatioSwitch3) == 0x000010, "Wrong size on EndBattleAIController_GetRatioSwitch3");
static_assert(offsetof(EndBattleAIController_GetRatioSwitch3, Switch0) == 0x000000, "Member 'EndBattleAIController_GetRatioSwitch3::Switch0' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_GetRatioSwitch3, Switch1) == 0x000004, "Member 'EndBattleAIController_GetRatioSwitch3::Switch1' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_GetRatioSwitch3, Switch2) == 0x000008, "Member 'EndBattleAIController_GetRatioSwitch3::Switch2' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_GetRatioSwitch3, ReturnValue) == 0x00000C, "Member 'EndBattleAIController_GetRatioSwitch3::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.GetRemainingHardAttackATB
// 0x0004 (0x0004 - 0x0000)
struct EndBattleAIController_GetRemainingHardAttackATB final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_GetRemainingHardAttackATB) == 0x000004, "Wrong alignment on EndBattleAIController_GetRemainingHardAttackATB");
static_assert(sizeof(EndBattleAIController_GetRemainingHardAttackATB) == 0x000004, "Wrong size on EndBattleAIController_GetRemainingHardAttackATB");
static_assert(offsetof(EndBattleAIController_GetRemainingHardAttackATB, ReturnValue) == 0x000000, "Member 'EndBattleAIController_GetRemainingHardAttackATB::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.GetRemainingLightAttackATB
// 0x0004 (0x0004 - 0x0000)
struct EndBattleAIController_GetRemainingLightAttackATB final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_GetRemainingLightAttackATB) == 0x000004, "Wrong alignment on EndBattleAIController_GetRemainingLightAttackATB");
static_assert(sizeof(EndBattleAIController_GetRemainingLightAttackATB) == 0x000004, "Wrong size on EndBattleAIController_GetRemainingLightAttackATB");
static_assert(offsetof(EndBattleAIController_GetRemainingLightAttackATB, ReturnValue) == 0x000000, "Member 'EndBattleAIController_GetRemainingLightAttackATB::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.GetReserveRole
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAIController_GetReserveRole final
{
public:
	EEndAiBattleRole                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_GetReserveRole) == 0x000001, "Wrong alignment on EndBattleAIController_GetReserveRole");
static_assert(sizeof(EndBattleAIController_GetReserveRole) == 0x000001, "Wrong size on EndBattleAIController_GetReserveRole");
static_assert(offsetof(EndBattleAIController_GetReserveRole, ReturnValue) == 0x000000, "Member 'EndBattleAIController_GetReserveRole::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.GetReserveStep
// 0x0004 (0x0004 - 0x0000)
struct EndBattleAIController_GetReserveStep final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_GetReserveStep) == 0x000004, "Wrong alignment on EndBattleAIController_GetReserveStep");
static_assert(sizeof(EndBattleAIController_GetReserveStep) == 0x000004, "Wrong size on EndBattleAIController_GetReserveStep");
static_assert(offsetof(EndBattleAIController_GetReserveStep, ReturnValue) == 0x000000, "Member 'EndBattleAIController_GetReserveStep::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.GetReserveSubStep
// 0x0004 (0x0004 - 0x0000)
struct EndBattleAIController_GetReserveSubStep final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_GetReserveSubStep) == 0x000004, "Wrong alignment on EndBattleAIController_GetReserveSubStep");
static_assert(sizeof(EndBattleAIController_GetReserveSubStep) == 0x000004, "Wrong size on EndBattleAIController_GetReserveSubStep");
static_assert(offsetof(EndBattleAIController_GetReserveSubStep, ReturnValue) == 0x000000, "Member 'EndBattleAIController_GetReserveSubStep::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.GetRole
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAIController_GetRole final
{
public:
	EEndAiBattleRole                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_GetRole) == 0x000001, "Wrong alignment on EndBattleAIController_GetRole");
static_assert(sizeof(EndBattleAIController_GetRole) == 0x000001, "Wrong size on EndBattleAIController_GetRole");
static_assert(offsetof(EndBattleAIController_GetRole, ReturnValue) == 0x000000, "Member 'EndBattleAIController_GetRole::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.GetRoleCount
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAIController_GetRoleCount final
{
public:
	EEndAiBattleRole                              InRole;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_GetRoleCount) == 0x000004, "Wrong alignment on EndBattleAIController_GetRoleCount");
static_assert(sizeof(EndBattleAIController_GetRoleCount) == 0x000008, "Wrong size on EndBattleAIController_GetRoleCount");
static_assert(offsetof(EndBattleAIController_GetRoleCount, InRole) == 0x000000, "Member 'EndBattleAIController_GetRoleCount::InRole' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_GetRoleCount, ReturnValue) == 0x000004, "Member 'EndBattleAIController_GetRoleCount::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.GetSceneEnemyCount
// 0x0004 (0x0004 - 0x0000)
struct EndBattleAIController_GetSceneEnemyCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_GetSceneEnemyCount) == 0x000004, "Wrong alignment on EndBattleAIController_GetSceneEnemyCount");
static_assert(sizeof(EndBattleAIController_GetSceneEnemyCount) == 0x000004, "Wrong size on EndBattleAIController_GetSceneEnemyCount");
static_assert(offsetof(EndBattleAIController_GetSceneEnemyCount, ReturnValue) == 0x000000, "Member 'EndBattleAIController_GetSceneEnemyCount::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.GetSpecialStatusChangeCharacter
// 0x0018 (0x0018 - 0x0000)
struct EndBattleAIController_GetSpecialStatusChangeCharacter final
{
public:
	EEndAiBattleTargetType                        InTarget;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndBattleSpecialStatusChangeType             Type;                                              // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AEndCharacter*>                  ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_GetSpecialStatusChangeCharacter) == 0x000008, "Wrong alignment on EndBattleAIController_GetSpecialStatusChangeCharacter");
static_assert(sizeof(EndBattleAIController_GetSpecialStatusChangeCharacter) == 0x000018, "Wrong size on EndBattleAIController_GetSpecialStatusChangeCharacter");
static_assert(offsetof(EndBattleAIController_GetSpecialStatusChangeCharacter, InTarget) == 0x000000, "Member 'EndBattleAIController_GetSpecialStatusChangeCharacter::InTarget' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_GetSpecialStatusChangeCharacter, Type) == 0x000001, "Member 'EndBattleAIController_GetSpecialStatusChangeCharacter::Type' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_GetSpecialStatusChangeCharacter, ReturnValue) == 0x000008, "Member 'EndBattleAIController_GetSpecialStatusChangeCharacter::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.GetSplinePoint
// 0x0004 (0x0004 - 0x0000)
struct EndBattleAIController_GetSplinePoint final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_GetSplinePoint) == 0x000004, "Wrong alignment on EndBattleAIController_GetSplinePoint");
static_assert(sizeof(EndBattleAIController_GetSplinePoint) == 0x000004, "Wrong size on EndBattleAIController_GetSplinePoint");
static_assert(offsetof(EndBattleAIController_GetSplinePoint, ReturnValue) == 0x000000, "Member 'EndBattleAIController_GetSplinePoint::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.GetSplinePointFloat
// 0x0004 (0x0004 - 0x0000)
struct EndBattleAIController_GetSplinePointFloat final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_GetSplinePointFloat) == 0x000004, "Wrong alignment on EndBattleAIController_GetSplinePointFloat");
static_assert(sizeof(EndBattleAIController_GetSplinePointFloat) == 0x000004, "Wrong size on EndBattleAIController_GetSplinePointFloat");
static_assert(offsetof(EndBattleAIController_GetSplinePointFloat, ReturnValue) == 0x000000, "Member 'EndBattleAIController_GetSplinePointFloat::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.GetStatusChangeCharacter
// 0x0018 (0x0018 - 0x0000)
struct EndBattleAIController_GetStatusChangeCharacter final
{
public:
	EEndAiBattleTargetType                        InTarget;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndBattleStatusChangeType                    Type;                                              // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AEndCharacter*>                  ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_GetStatusChangeCharacter) == 0x000008, "Wrong alignment on EndBattleAIController_GetStatusChangeCharacter");
static_assert(sizeof(EndBattleAIController_GetStatusChangeCharacter) == 0x000018, "Wrong size on EndBattleAIController_GetStatusChangeCharacter");
static_assert(offsetof(EndBattleAIController_GetStatusChangeCharacter, InTarget) == 0x000000, "Member 'EndBattleAIController_GetStatusChangeCharacter::InTarget' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_GetStatusChangeCharacter, Type) == 0x000001, "Member 'EndBattleAIController_GetStatusChangeCharacter::Type' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_GetStatusChangeCharacter, ReturnValue) == 0x000008, "Member 'EndBattleAIController_GetStatusChangeCharacter::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.GetStep
// 0x0004 (0x0004 - 0x0000)
struct EndBattleAIController_GetStep final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_GetStep) == 0x000004, "Wrong alignment on EndBattleAIController_GetStep");
static_assert(sizeof(EndBattleAIController_GetStep) == 0x000004, "Wrong size on EndBattleAIController_GetStep");
static_assert(offsetof(EndBattleAIController_GetStep, ReturnValue) == 0x000000, "Member 'EndBattleAIController_GetStep::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.GetSubStep
// 0x0004 (0x0004 - 0x0000)
struct EndBattleAIController_GetSubStep final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_GetSubStep) == 0x000004, "Wrong alignment on EndBattleAIController_GetSubStep");
static_assert(sizeof(EndBattleAIController_GetSubStep) == 0x000004, "Wrong size on EndBattleAIController_GetSubStep");
static_assert(offsetof(EndBattleAIController_GetSubStep, ReturnValue) == 0x000000, "Member 'EndBattleAIController_GetSubStep::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.GetSummonMaster
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAIController_GetSummonMaster final
{
public:
	class AEndCharacter*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_GetSummonMaster) == 0x000008, "Wrong alignment on EndBattleAIController_GetSummonMaster");
static_assert(sizeof(EndBattleAIController_GetSummonMaster) == 0x000008, "Wrong size on EndBattleAIController_GetSummonMaster");
static_assert(offsetof(EndBattleAIController_GetSummonMaster, ReturnValue) == 0x000000, "Member 'EndBattleAIController_GetSummonMaster::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.GetSyncActionCharacter
// 0x0018 (0x0018 - 0x0000)
struct EndBattleAIController_GetSyncActionCharacter final
{
public:
	EEndAiBattleTargetType                        InTarget;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndBattleSyncActionType                      Type;                                              // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AEndCharacter*>                  ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_GetSyncActionCharacter) == 0x000008, "Wrong alignment on EndBattleAIController_GetSyncActionCharacter");
static_assert(sizeof(EndBattleAIController_GetSyncActionCharacter) == 0x000018, "Wrong size on EndBattleAIController_GetSyncActionCharacter");
static_assert(offsetof(EndBattleAIController_GetSyncActionCharacter, InTarget) == 0x000000, "Member 'EndBattleAIController_GetSyncActionCharacter::InTarget' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_GetSyncActionCharacter, Type) == 0x000001, "Member 'EndBattleAIController_GetSyncActionCharacter::Type' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_GetSyncActionCharacter, ReturnValue) == 0x000008, "Member 'EndBattleAIController_GetSyncActionCharacter::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.GetTarget
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAIController_GetTarget final
{
public:
	class AEndCharacter*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_GetTarget) == 0x000008, "Wrong alignment on EndBattleAIController_GetTarget");
static_assert(sizeof(EndBattleAIController_GetTarget) == 0x000008, "Wrong size on EndBattleAIController_GetTarget");
static_assert(offsetof(EndBattleAIController_GetTarget, ReturnValue) == 0x000000, "Member 'EndBattleAIController_GetTarget::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.GetTargetBase
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAIController_GetTargetBase final
{
public:
	class AEndCharacter*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_GetTargetBase) == 0x000008, "Wrong alignment on EndBattleAIController_GetTargetBase");
static_assert(sizeof(EndBattleAIController_GetTargetBase) == 0x000008, "Wrong size on EndBattleAIController_GetTargetBase");
static_assert(offsetof(EndBattleAIController_GetTargetBase, ReturnValue) == 0x000000, "Member 'EndBattleAIController_GetTargetBase::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.GetTriggerBoxCondition
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAIController_GetTriggerBoxCondition final
{
public:
	ETriggerBoxCondition                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_GetTriggerBoxCondition) == 0x000001, "Wrong alignment on EndBattleAIController_GetTriggerBoxCondition");
static_assert(sizeof(EndBattleAIController_GetTriggerBoxCondition) == 0x000001, "Wrong size on EndBattleAIController_GetTriggerBoxCondition");
static_assert(offsetof(EndBattleAIController_GetTriggerBoxCondition, ReturnValue) == 0x000000, "Member 'EndBattleAIController_GetTriggerBoxCondition::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.GetWarpPosition
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAIController_GetWarpPosition final
{
public:
	int32                                         warpPointId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0004(0x000C)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_GetWarpPosition) == 0x000004, "Wrong alignment on EndBattleAIController_GetWarpPosition");
static_assert(sizeof(EndBattleAIController_GetWarpPosition) == 0x000010, "Wrong size on EndBattleAIController_GetWarpPosition");
static_assert(offsetof(EndBattleAIController_GetWarpPosition, warpPointId) == 0x000000, "Member 'EndBattleAIController_GetWarpPosition::warpPointId' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_GetWarpPosition, ReturnValue) == 0x000004, "Member 'EndBattleAIController_GetWarpPosition::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.GetWorkBool
// 0x000C (0x000C - 0x0000)
struct EndBattleAIController_GetWorkBool final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAIController_GetWorkBool) == 0x000004, "Wrong alignment on EndBattleAIController_GetWorkBool");
static_assert(sizeof(EndBattleAIController_GetWorkBool) == 0x00000C, "Wrong size on EndBattleAIController_GetWorkBool");
static_assert(offsetof(EndBattleAIController_GetWorkBool, Name_0) == 0x000000, "Member 'EndBattleAIController_GetWorkBool::Name_0' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_GetWorkBool, ReturnValue) == 0x000008, "Member 'EndBattleAIController_GetWorkBool::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.GetWorkFloat
// 0x000C (0x000C - 0x0000)
struct EndBattleAIController_GetWorkFloat final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_GetWorkFloat) == 0x000004, "Wrong alignment on EndBattleAIController_GetWorkFloat");
static_assert(sizeof(EndBattleAIController_GetWorkFloat) == 0x00000C, "Wrong size on EndBattleAIController_GetWorkFloat");
static_assert(offsetof(EndBattleAIController_GetWorkFloat, Name_0) == 0x000000, "Member 'EndBattleAIController_GetWorkFloat::Name_0' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_GetWorkFloat, ReturnValue) == 0x000008, "Member 'EndBattleAIController_GetWorkFloat::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.GetWorkInt32
// 0x000C (0x000C - 0x0000)
struct EndBattleAIController_GetWorkInt32 final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_GetWorkInt32) == 0x000004, "Wrong alignment on EndBattleAIController_GetWorkInt32");
static_assert(sizeof(EndBattleAIController_GetWorkInt32) == 0x00000C, "Wrong size on EndBattleAIController_GetWorkInt32");
static_assert(offsetof(EndBattleAIController_GetWorkInt32, Name_0) == 0x000000, "Member 'EndBattleAIController_GetWorkInt32::Name_0' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_GetWorkInt32, ReturnValue) == 0x000008, "Member 'EndBattleAIController_GetWorkInt32::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.GetWorkName
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAIController_GetWorkName final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_GetWorkName) == 0x000004, "Wrong alignment on EndBattleAIController_GetWorkName");
static_assert(sizeof(EndBattleAIController_GetWorkName) == 0x000010, "Wrong size on EndBattleAIController_GetWorkName");
static_assert(offsetof(EndBattleAIController_GetWorkName, Name_0) == 0x000000, "Member 'EndBattleAIController_GetWorkName::Name_0' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_GetWorkName, ReturnValue) == 0x000008, "Member 'EndBattleAIController_GetWorkName::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.GetWorkRotator
// 0x0014 (0x0014 - 0x0000)
struct EndBattleAIController_GetWorkRotator final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               ReturnValue;                                       // 0x0008(0x000C)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_GetWorkRotator) == 0x000004, "Wrong alignment on EndBattleAIController_GetWorkRotator");
static_assert(sizeof(EndBattleAIController_GetWorkRotator) == 0x000014, "Wrong size on EndBattleAIController_GetWorkRotator");
static_assert(offsetof(EndBattleAIController_GetWorkRotator, Name_0) == 0x000000, "Member 'EndBattleAIController_GetWorkRotator::Name_0' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_GetWorkRotator, ReturnValue) == 0x000008, "Member 'EndBattleAIController_GetWorkRotator::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.GetWorkVector
// 0x0014 (0x0014 - 0x0000)
struct EndBattleAIController_GetWorkVector final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0008(0x000C)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_GetWorkVector) == 0x000004, "Wrong alignment on EndBattleAIController_GetWorkVector");
static_assert(sizeof(EndBattleAIController_GetWorkVector) == 0x000014, "Wrong size on EndBattleAIController_GetWorkVector");
static_assert(offsetof(EndBattleAIController_GetWorkVector, Name_0) == 0x000000, "Member 'EndBattleAIController_GetWorkVector::Name_0' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_GetWorkVector, ReturnValue) == 0x000008, "Member 'EndBattleAIController_GetWorkVector::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.HasAbilityCancelNumber
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAIController_HasAbilityCancelNumber final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_HasAbilityCancelNumber) == 0x000001, "Wrong alignment on EndBattleAIController_HasAbilityCancelNumber");
static_assert(sizeof(EndBattleAIController_HasAbilityCancelNumber) == 0x000001, "Wrong size on EndBattleAIController_HasAbilityCancelNumber");
static_assert(offsetof(EndBattleAIController_HasAbilityCancelNumber, ReturnValue) == 0x000000, "Member 'EndBattleAIController_HasAbilityCancelNumber::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.HasDamageSource
// 0x000C (0x000C - 0x0000)
struct EndBattleAIController_HasDamageSource final
{
public:
	class FName                                   DamageSourceID;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAIController_HasDamageSource) == 0x000004, "Wrong alignment on EndBattleAIController_HasDamageSource");
static_assert(sizeof(EndBattleAIController_HasDamageSource) == 0x00000C, "Wrong size on EndBattleAIController_HasDamageSource");
static_assert(offsetof(EndBattleAIController_HasDamageSource, DamageSourceID) == 0x000000, "Member 'EndBattleAIController_HasDamageSource::DamageSourceID' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_HasDamageSource, ReturnValue) == 0x000008, "Member 'EndBattleAIController_HasDamageSource::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.HasSpecialStatus
// 0x0002 (0x0002 - 0x0000)
struct EndBattleAIController_HasSpecialStatus final
{
public:
	EEndBattleSpecialStatusChangeType             Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_HasSpecialStatus) == 0x000001, "Wrong alignment on EndBattleAIController_HasSpecialStatus");
static_assert(sizeof(EndBattleAIController_HasSpecialStatus) == 0x000002, "Wrong size on EndBattleAIController_HasSpecialStatus");
static_assert(offsetof(EndBattleAIController_HasSpecialStatus, Type) == 0x000000, "Member 'EndBattleAIController_HasSpecialStatus::Type' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_HasSpecialStatus, ReturnValue) == 0x000001, "Member 'EndBattleAIController_HasSpecialStatus::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.HasSpecialStatusByID
// 0x000C (0x000C - 0x0000)
struct EndBattleAIController_HasSpecialStatusByID final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAIController_HasSpecialStatusByID) == 0x000004, "Wrong alignment on EndBattleAIController_HasSpecialStatusByID");
static_assert(sizeof(EndBattleAIController_HasSpecialStatusByID) == 0x00000C, "Wrong size on EndBattleAIController_HasSpecialStatusByID");
static_assert(offsetof(EndBattleAIController_HasSpecialStatusByID, ID) == 0x000000, "Member 'EndBattleAIController_HasSpecialStatusByID::ID' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_HasSpecialStatusByID, ReturnValue) == 0x000008, "Member 'EndBattleAIController_HasSpecialStatusByID::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.HasStatusChange
// 0x0003 (0x0003 - 0x0000)
struct EndBattleAIController_HasStatusChange final
{
public:
	EEndAiBattleTargetType                        InTarget;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndBattleStatusChangeType                    Type;                                              // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_HasStatusChange) == 0x000001, "Wrong alignment on EndBattleAIController_HasStatusChange");
static_assert(sizeof(EndBattleAIController_HasStatusChange) == 0x000003, "Wrong size on EndBattleAIController_HasStatusChange");
static_assert(offsetof(EndBattleAIController_HasStatusChange, InTarget) == 0x000000, "Member 'EndBattleAIController_HasStatusChange::InTarget' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_HasStatusChange, Type) == 0x000001, "Member 'EndBattleAIController_HasStatusChange::Type' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_HasStatusChange, ReturnValue) == 0x000002, "Member 'EndBattleAIController_HasStatusChange::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.HasStatusChangeDeSpell
// 0x0002 (0x0002 - 0x0000)
struct EndBattleAIController_HasStatusChangeDeSpell final
{
public:
	EEndAiBattleTargetType                        InTarget;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_HasStatusChangeDeSpell) == 0x000001, "Wrong alignment on EndBattleAIController_HasStatusChangeDeSpell");
static_assert(sizeof(EndBattleAIController_HasStatusChangeDeSpell) == 0x000002, "Wrong size on EndBattleAIController_HasStatusChangeDeSpell");
static_assert(offsetof(EndBattleAIController_HasStatusChangeDeSpell, InTarget) == 0x000000, "Member 'EndBattleAIController_HasStatusChangeDeSpell::InTarget' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_HasStatusChangeDeSpell, ReturnValue) == 0x000001, "Member 'EndBattleAIController_HasStatusChangeDeSpell::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.HasStatusChangeEsuna
// 0x0002 (0x0002 - 0x0000)
struct EndBattleAIController_HasStatusChangeEsuna final
{
public:
	EEndAiBattleTargetType                        InTarget;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_HasStatusChangeEsuna) == 0x000001, "Wrong alignment on EndBattleAIController_HasStatusChangeEsuna");
static_assert(sizeof(EndBattleAIController_HasStatusChangeEsuna) == 0x000002, "Wrong size on EndBattleAIController_HasStatusChangeEsuna");
static_assert(offsetof(EndBattleAIController_HasStatusChangeEsuna, InTarget) == 0x000000, "Member 'EndBattleAIController_HasStatusChangeEsuna::InTarget' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_HasStatusChangeEsuna, ReturnValue) == 0x000001, "Member 'EndBattleAIController_HasStatusChangeEsuna::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.HasStatusDeBarrier
// 0x0002 (0x0002 - 0x0000)
struct EndBattleAIController_HasStatusDeBarrier final
{
public:
	EEndAiBattleTargetType                        InTarget;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_HasStatusDeBarrier) == 0x000001, "Wrong alignment on EndBattleAIController_HasStatusDeBarrier");
static_assert(sizeof(EndBattleAIController_HasStatusDeBarrier) == 0x000002, "Wrong size on EndBattleAIController_HasStatusDeBarrier");
static_assert(offsetof(EndBattleAIController_HasStatusDeBarrier, InTarget) == 0x000000, "Member 'EndBattleAIController_HasStatusDeBarrier::InTarget' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_HasStatusDeBarrier, ReturnValue) == 0x000001, "Member 'EndBattleAIController_HasStatusDeBarrier::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.ImmediateAction
// 0x000C (0x000C - 0x0000)
struct EndBattleAIController_ImmediateAction final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAIController_ImmediateAction) == 0x000004, "Wrong alignment on EndBattleAIController_ImmediateAction");
static_assert(sizeof(EndBattleAIController_ImmediateAction) == 0x00000C, "Wrong size on EndBattleAIController_ImmediateAction");
static_assert(offsetof(EndBattleAIController_ImmediateAction, InName) == 0x000000, "Member 'EndBattleAIController_ImmediateAction::InName' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_ImmediateAction, ReturnValue) == 0x000008, "Member 'EndBattleAIController_ImmediateAction::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.ImmediateBindAction
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAIController_ImmediateBindAction final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InCancelID;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAIController_ImmediateBindAction) == 0x000004, "Wrong alignment on EndBattleAIController_ImmediateBindAction");
static_assert(sizeof(EndBattleAIController_ImmediateBindAction) == 0x000010, "Wrong size on EndBattleAIController_ImmediateBindAction");
static_assert(offsetof(EndBattleAIController_ImmediateBindAction, InName) == 0x000000, "Member 'EndBattleAIController_ImmediateBindAction::InName' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_ImmediateBindAction, InCancelID) == 0x000008, "Member 'EndBattleAIController_ImmediateBindAction::InCancelID' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_ImmediateBindAction, ReturnValue) == 0x00000C, "Member 'EndBattleAIController_ImmediateBindAction::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.ImmediateMotion
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAIController_ImmediateMotion final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Inter;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAIController_ImmediateMotion) == 0x000004, "Wrong alignment on EndBattleAIController_ImmediateMotion");
static_assert(sizeof(EndBattleAIController_ImmediateMotion) == 0x000010, "Wrong size on EndBattleAIController_ImmediateMotion");
static_assert(offsetof(EndBattleAIController_ImmediateMotion, InName) == 0x000000, "Member 'EndBattleAIController_ImmediateMotion::InName' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_ImmediateMotion, Inter) == 0x000008, "Member 'EndBattleAIController_ImmediateMotion::Inter' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_ImmediateMotion, ReturnValue) == 0x00000C, "Member 'EndBattleAIController_ImmediateMotion::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.ImmediateRegisterMove
// 0x000C (0x000C - 0x0000)
struct EndBattleAIController_ImmediateRegisterMove final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAIController_ImmediateRegisterMove) == 0x000004, "Wrong alignment on EndBattleAIController_ImmediateRegisterMove");
static_assert(sizeof(EndBattleAIController_ImmediateRegisterMove) == 0x00000C, "Wrong size on EndBattleAIController_ImmediateRegisterMove");
static_assert(offsetof(EndBattleAIController_ImmediateRegisterMove, InName) == 0x000000, "Member 'EndBattleAIController_ImmediateRegisterMove::InName' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_ImmediateRegisterMove, ReturnValue) == 0x000008, "Member 'EndBattleAIController_ImmediateRegisterMove::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.ImmediateRegisterMoveWeak
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAIController_ImmediateRegisterMoveWeak final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_ImmediateRegisterMoveWeak) == 0x000004, "Wrong alignment on EndBattleAIController_ImmediateRegisterMoveWeak");
static_assert(sizeof(EndBattleAIController_ImmediateRegisterMoveWeak) == 0x000008, "Wrong size on EndBattleAIController_ImmediateRegisterMoveWeak");
static_assert(offsetof(EndBattleAIController_ImmediateRegisterMoveWeak, InName) == 0x000000, "Member 'EndBattleAIController_ImmediateRegisterMoveWeak::InName' has a wrong offset!");

// Function EndGame.EndBattleAIController.IntCmpBranch
// 0x000C (0x000C - 0x0000)
struct EndBattleAIController_IntCmpBranch final
{
public:
	int32                                         ValueA;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ValueB;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndAiMathCmp                                 cmp;                                               // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndAIBranchBit                               OutSignal;                                         // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAIController_IntCmpBranch) == 0x000004, "Wrong alignment on EndBattleAIController_IntCmpBranch");
static_assert(sizeof(EndBattleAIController_IntCmpBranch) == 0x00000C, "Wrong size on EndBattleAIController_IntCmpBranch");
static_assert(offsetof(EndBattleAIController_IntCmpBranch, ValueA) == 0x000000, "Member 'EndBattleAIController_IntCmpBranch::ValueA' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_IntCmpBranch, ValueB) == 0x000004, "Member 'EndBattleAIController_IntCmpBranch::ValueB' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_IntCmpBranch, cmp) == 0x000008, "Member 'EndBattleAIController_IntCmpBranch::cmp' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_IntCmpBranch, OutSignal) == 0x000009, "Member 'EndBattleAIController_IntCmpBranch::OutSignal' has a wrong offset!");

// Function EndGame.EndBattleAIController.IsAbility
// 0x000C (0x000C - 0x0000)
struct EndBattleAIController_IsAbility final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAIController_IsAbility) == 0x000004, "Wrong alignment on EndBattleAIController_IsAbility");
static_assert(sizeof(EndBattleAIController_IsAbility) == 0x00000C, "Wrong size on EndBattleAIController_IsAbility");
static_assert(offsetof(EndBattleAIController_IsAbility, InName) == 0x000000, "Member 'EndBattleAIController_IsAbility::InName' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_IsAbility, ReturnValue) == 0x000008, "Member 'EndBattleAIController_IsAbility::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.IsAbilityState
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAIController_IsAbilityState final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_IsAbilityState) == 0x000001, "Wrong alignment on EndBattleAIController_IsAbilityState");
static_assert(sizeof(EndBattleAIController_IsAbilityState) == 0x000001, "Wrong size on EndBattleAIController_IsAbilityState");
static_assert(offsetof(EndBattleAIController_IsAbilityState, ReturnValue) == 0x000000, "Member 'EndBattleAIController_IsAbilityState::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.IsActionCount
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAIController_IsActionCount final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InCount;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndAiMathCmp                                 InCmp;                                             // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000D(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAIController_IsActionCount) == 0x000004, "Wrong alignment on EndBattleAIController_IsActionCount");
static_assert(sizeof(EndBattleAIController_IsActionCount) == 0x000010, "Wrong size on EndBattleAIController_IsActionCount");
static_assert(offsetof(EndBattleAIController_IsActionCount, InName) == 0x000000, "Member 'EndBattleAIController_IsActionCount::InName' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_IsActionCount, InCount) == 0x000008, "Member 'EndBattleAIController_IsActionCount::InCount' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_IsActionCount, InCmp) == 0x00000C, "Member 'EndBattleAIController_IsActionCount::InCmp' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_IsActionCount, ReturnValue) == 0x00000D, "Member 'EndBattleAIController_IsActionCount::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.IsActionLocalCount
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAIController_IsActionLocalCount final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InCount;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndAiMathCmp                                 InCmp;                                             // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000D(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAIController_IsActionLocalCount) == 0x000004, "Wrong alignment on EndBattleAIController_IsActionLocalCount");
static_assert(sizeof(EndBattleAIController_IsActionLocalCount) == 0x000010, "Wrong size on EndBattleAIController_IsActionLocalCount");
static_assert(offsetof(EndBattleAIController_IsActionLocalCount, InName) == 0x000000, "Member 'EndBattleAIController_IsActionLocalCount::InName' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_IsActionLocalCount, InCount) == 0x000008, "Member 'EndBattleAIController_IsActionLocalCount::InCount' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_IsActionLocalCount, InCmp) == 0x00000C, "Member 'EndBattleAIController_IsActionLocalCount::InCmp' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_IsActionLocalCount, ReturnValue) == 0x00000D, "Member 'EndBattleAIController_IsActionLocalCount::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.IsActionTimeOver
// 0x000C (0x000C - 0x0000)
struct EndBattleAIController_IsActionTimeOver final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAIController_IsActionTimeOver) == 0x000004, "Wrong alignment on EndBattleAIController_IsActionTimeOver");
static_assert(sizeof(EndBattleAIController_IsActionTimeOver) == 0x00000C, "Wrong size on EndBattleAIController_IsActionTimeOver");
static_assert(offsetof(EndBattleAIController_IsActionTimeOver, InName) == 0x000000, "Member 'EndBattleAIController_IsActionTimeOver::InName' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_IsActionTimeOver, ReturnValue) == 0x000008, "Member 'EndBattleAIController_IsActionTimeOver::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.IsAggressive
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAIController_IsAggressive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_IsAggressive) == 0x000001, "Wrong alignment on EndBattleAIController_IsAggressive");
static_assert(sizeof(EndBattleAIController_IsAggressive) == 0x000001, "Wrong size on EndBattleAIController_IsAggressive");
static_assert(offsetof(EndBattleAIController_IsAggressive, ReturnValue) == 0x000000, "Member 'EndBattleAIController_IsAggressive::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.IsATB
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAIController_IsATB final
{
public:
	int32                                         InATB;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAIController_IsATB) == 0x000004, "Wrong alignment on EndBattleAIController_IsATB");
static_assert(sizeof(EndBattleAIController_IsATB) == 0x000008, "Wrong size on EndBattleAIController_IsATB");
static_assert(offsetof(EndBattleAIController_IsATB, InATB) == 0x000000, "Member 'EndBattleAIController_IsATB::InATB' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_IsATB, ReturnValue) == 0x000004, "Member 'EndBattleAIController_IsATB::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.IsATBLightAttack
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAIController_IsATBLightAttack final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_IsATBLightAttack) == 0x000001, "Wrong alignment on EndBattleAIController_IsATBLightAttack");
static_assert(sizeof(EndBattleAIController_IsATBLightAttack) == 0x000001, "Wrong size on EndBattleAIController_IsATBLightAttack");
static_assert(offsetof(EndBattleAIController_IsATBLightAttack, ReturnValue) == 0x000000, "Member 'EndBattleAIController_IsATBLightAttack::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.IsBadState
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAIController_IsBadState final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_IsBadState) == 0x000001, "Wrong alignment on EndBattleAIController_IsBadState");
static_assert(sizeof(EndBattleAIController_IsBadState) == 0x000001, "Wrong size on EndBattleAIController_IsBadState");
static_assert(offsetof(EndBattleAIController_IsBadState, ReturnValue) == 0x000000, "Member 'EndBattleAIController_IsBadState::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.IsBattleAIEnableTick
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAIController_IsBattleAIEnableTick final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_IsBattleAIEnableTick) == 0x000001, "Wrong alignment on EndBattleAIController_IsBattleAIEnableTick");
static_assert(sizeof(EndBattleAIController_IsBattleAIEnableTick) == 0x000001, "Wrong size on EndBattleAIController_IsBattleAIEnableTick");
static_assert(offsetof(EndBattleAIController_IsBattleAIEnableTick, ReturnValue) == 0x000000, "Member 'EndBattleAIController_IsBattleAIEnableTick::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.IsBattleScenePhase
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAIController_IsBattleScenePhase final
{
public:
	int32                                         InPhase;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAIController_IsBattleScenePhase) == 0x000004, "Wrong alignment on EndBattleAIController_IsBattleScenePhase");
static_assert(sizeof(EndBattleAIController_IsBattleScenePhase) == 0x000008, "Wrong size on EndBattleAIController_IsBattleScenePhase");
static_assert(offsetof(EndBattleAIController_IsBattleScenePhase, InPhase) == 0x000000, "Member 'EndBattleAIController_IsBattleScenePhase::InPhase' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_IsBattleScenePhase, ReturnValue) == 0x000004, "Member 'EndBattleAIController_IsBattleScenePhase::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.IsBoolBranch
// 0x000C (0x000C - 0x0000)
struct EndBattleAIController_IsBoolBranch final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndAIBranchBit                               OutSignal;                                         // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAIController_IsBoolBranch) == 0x000004, "Wrong alignment on EndBattleAIController_IsBoolBranch");
static_assert(sizeof(EndBattleAIController_IsBoolBranch) == 0x00000C, "Wrong size on EndBattleAIController_IsBoolBranch");
static_assert(offsetof(EndBattleAIController_IsBoolBranch, Name_0) == 0x000000, "Member 'EndBattleAIController_IsBoolBranch::Name_0' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_IsBoolBranch, OutSignal) == 0x000008, "Member 'EndBattleAIController_IsBoolBranch::OutSignal' has a wrong offset!");

// Function EndGame.EndBattleAIController.IsBPAttackChance
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAIController_IsBPAttackChance final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_IsBPAttackChance) == 0x000001, "Wrong alignment on EndBattleAIController_IsBPAttackChance");
static_assert(sizeof(EndBattleAIController_IsBPAttackChance) == 0x000001, "Wrong size on EndBattleAIController_IsBPAttackChance");
static_assert(offsetof(EndBattleAIController_IsBPAttackChance, ReturnValue) == 0x000000, "Member 'EndBattleAIController_IsBPAttackChance::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.IsBrokenParts
// 0x000C (0x000C - 0x0000)
struct EndBattleAIController_IsBrokenParts final
{
public:
	class FName                                   partsID;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAIController_IsBrokenParts) == 0x000004, "Wrong alignment on EndBattleAIController_IsBrokenParts");
static_assert(sizeof(EndBattleAIController_IsBrokenParts) == 0x00000C, "Wrong size on EndBattleAIController_IsBrokenParts");
static_assert(offsetof(EndBattleAIController_IsBrokenParts, partsID) == 0x000000, "Member 'EndBattleAIController_IsBrokenParts::partsID' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_IsBrokenParts, ReturnValue) == 0x000008, "Member 'EndBattleAIController_IsBrokenParts::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.IsBurst
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAIController_IsBurst final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_IsBurst) == 0x000001, "Wrong alignment on EndBattleAIController_IsBurst");
static_assert(sizeof(EndBattleAIController_IsBurst) == 0x000001, "Wrong size on EndBattleAIController_IsBurst");
static_assert(offsetof(EndBattleAIController_IsBurst, ReturnValue) == 0x000000, "Member 'EndBattleAIController_IsBurst::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.IsCombo
// 0x000C (0x000C - 0x0000)
struct EndBattleAIController_IsCombo final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAIController_IsCombo) == 0x000004, "Wrong alignment on EndBattleAIController_IsCombo");
static_assert(sizeof(EndBattleAIController_IsCombo) == 0x00000C, "Wrong size on EndBattleAIController_IsCombo");
static_assert(offsetof(EndBattleAIController_IsCombo, InName) == 0x000000, "Member 'EndBattleAIController_IsCombo::InName' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_IsCombo, ReturnValue) == 0x000008, "Member 'EndBattleAIController_IsCombo::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.IsDelayProcessing
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAIController_IsDelayProcessing final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_IsDelayProcessing) == 0x000001, "Wrong alignment on EndBattleAIController_IsDelayProcessing");
static_assert(sizeof(EndBattleAIController_IsDelayProcessing) == 0x000001, "Wrong size on EndBattleAIController_IsDelayProcessing");
static_assert(offsetof(EndBattleAIController_IsDelayProcessing, ReturnValue) == 0x000000, "Member 'EndBattleAIController_IsDelayProcessing::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.IsDestruction
// 0x000C (0x000C - 0x0000)
struct EndBattleAIController_IsDestruction final
{
public:
	class FName                                   keyword;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAIController_IsDestruction) == 0x000004, "Wrong alignment on EndBattleAIController_IsDestruction");
static_assert(sizeof(EndBattleAIController_IsDestruction) == 0x00000C, "Wrong size on EndBattleAIController_IsDestruction");
static_assert(offsetof(EndBattleAIController_IsDestruction, keyword) == 0x000000, "Member 'EndBattleAIController_IsDestruction::keyword' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_IsDestruction, ReturnValue) == 0x000008, "Member 'EndBattleAIController_IsDestruction::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.IsDisableProcessDead
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAIController_IsDisableProcessDead final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_IsDisableProcessDead) == 0x000001, "Wrong alignment on EndBattleAIController_IsDisableProcessDead");
static_assert(sizeof(EndBattleAIController_IsDisableProcessDead) == 0x000001, "Wrong size on EndBattleAIController_IsDisableProcessDead");
static_assert(offsetof(EndBattleAIController_IsDisableProcessDead, ReturnValue) == 0x000000, "Member 'EndBattleAIController_IsDisableProcessDead::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.IsEnemyAngleFront
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAIController_IsEnemyAngleFront final
{
public:
	float                                         InAngle;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InReverse;                                         // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0005(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAIController_IsEnemyAngleFront) == 0x000004, "Wrong alignment on EndBattleAIController_IsEnemyAngleFront");
static_assert(sizeof(EndBattleAIController_IsEnemyAngleFront) == 0x000008, "Wrong size on EndBattleAIController_IsEnemyAngleFront");
static_assert(offsetof(EndBattleAIController_IsEnemyAngleFront, InAngle) == 0x000000, "Member 'EndBattleAIController_IsEnemyAngleFront::InAngle' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_IsEnemyAngleFront, InReverse) == 0x000004, "Member 'EndBattleAIController_IsEnemyAngleFront::InReverse' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_IsEnemyAngleFront, ReturnValue) == 0x000005, "Member 'EndBattleAIController_IsEnemyAngleFront::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.IsEnemyAngleFrontBranch
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAIController_IsEnemyAngleFrontBranch final
{
public:
	float                                         InAngle;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndAIBranchBit                               OutSignal;                                         // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InReverse;                                         // 0x0005(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAIController_IsEnemyAngleFrontBranch) == 0x000004, "Wrong alignment on EndBattleAIController_IsEnemyAngleFrontBranch");
static_assert(sizeof(EndBattleAIController_IsEnemyAngleFrontBranch) == 0x000008, "Wrong size on EndBattleAIController_IsEnemyAngleFrontBranch");
static_assert(offsetof(EndBattleAIController_IsEnemyAngleFrontBranch, InAngle) == 0x000000, "Member 'EndBattleAIController_IsEnemyAngleFrontBranch::InAngle' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_IsEnemyAngleFrontBranch, OutSignal) == 0x000004, "Member 'EndBattleAIController_IsEnemyAngleFrontBranch::OutSignal' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_IsEnemyAngleFrontBranch, InReverse) == 0x000005, "Member 'EndBattleAIController_IsEnemyAngleFrontBranch::InReverse' has a wrong offset!");

// Function EndGame.EndBattleAIController.IsEnemyDistanceBranch
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAIController_IsEnemyDistanceBranch final
{
public:
	float                                         InDistance;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndAiMathCmp                                 cmp;                                               // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndAIBranchBit                               OutSignal;                                         // 0x0005(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAIController_IsEnemyDistanceBranch) == 0x000004, "Wrong alignment on EndBattleAIController_IsEnemyDistanceBranch");
static_assert(sizeof(EndBattleAIController_IsEnemyDistanceBranch) == 0x000008, "Wrong size on EndBattleAIController_IsEnemyDistanceBranch");
static_assert(offsetof(EndBattleAIController_IsEnemyDistanceBranch, InDistance) == 0x000000, "Member 'EndBattleAIController_IsEnemyDistanceBranch::InDistance' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_IsEnemyDistanceBranch, cmp) == 0x000004, "Member 'EndBattleAIController_IsEnemyDistanceBranch::cmp' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_IsEnemyDistanceBranch, OutSignal) == 0x000005, "Member 'EndBattleAIController_IsEnemyDistanceBranch::OutSignal' has a wrong offset!");

// Function EndGame.EndBattleAIController.IsEnemyDistanceHigh
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAIController_IsEnemyDistanceHigh final
{
public:
	float                                         InDistance;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAIController_IsEnemyDistanceHigh) == 0x000004, "Wrong alignment on EndBattleAIController_IsEnemyDistanceHigh");
static_assert(sizeof(EndBattleAIController_IsEnemyDistanceHigh) == 0x000008, "Wrong size on EndBattleAIController_IsEnemyDistanceHigh");
static_assert(offsetof(EndBattleAIController_IsEnemyDistanceHigh, InDistance) == 0x000000, "Member 'EndBattleAIController_IsEnemyDistanceHigh::InDistance' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_IsEnemyDistanceHigh, ReturnValue) == 0x000004, "Member 'EndBattleAIController_IsEnemyDistanceHigh::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.IsEnemyDistanceLow
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAIController_IsEnemyDistanceLow final
{
public:
	float                                         InDistance;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAIController_IsEnemyDistanceLow) == 0x000004, "Wrong alignment on EndBattleAIController_IsEnemyDistanceLow");
static_assert(sizeof(EndBattleAIController_IsEnemyDistanceLow) == 0x000008, "Wrong size on EndBattleAIController_IsEnemyDistanceLow");
static_assert(offsetof(EndBattleAIController_IsEnemyDistanceLow, InDistance) == 0x000000, "Member 'EndBattleAIController_IsEnemyDistanceLow::InDistance' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_IsEnemyDistanceLow, ReturnValue) == 0x000004, "Member 'EndBattleAIController_IsEnemyDistanceLow::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.IsEnemyRange
// 0x000C (0x000C - 0x0000)
struct EndBattleAIController_IsEnemyRange final
{
public:
	float                                         InMin;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InMax;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAIController_IsEnemyRange) == 0x000004, "Wrong alignment on EndBattleAIController_IsEnemyRange");
static_assert(sizeof(EndBattleAIController_IsEnemyRange) == 0x00000C, "Wrong size on EndBattleAIController_IsEnemyRange");
static_assert(offsetof(EndBattleAIController_IsEnemyRange, InMin) == 0x000000, "Member 'EndBattleAIController_IsEnemyRange::InMin' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_IsEnemyRange, InMax) == 0x000004, "Member 'EndBattleAIController_IsEnemyRange::InMax' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_IsEnemyRange, ReturnValue) == 0x000008, "Member 'EndBattleAIController_IsEnemyRange::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.IsEnemyRangeBranch
// 0x000C (0x000C - 0x0000)
struct EndBattleAIController_IsEnemyRangeBranch final
{
public:
	float                                         InMin;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InMax;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndAiMathBinCmp                              cmp;                                               // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndAIBranchBit                               OutSignal;                                         // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAIController_IsEnemyRangeBranch) == 0x000004, "Wrong alignment on EndBattleAIController_IsEnemyRangeBranch");
static_assert(sizeof(EndBattleAIController_IsEnemyRangeBranch) == 0x00000C, "Wrong size on EndBattleAIController_IsEnemyRangeBranch");
static_assert(offsetof(EndBattleAIController_IsEnemyRangeBranch, InMin) == 0x000000, "Member 'EndBattleAIController_IsEnemyRangeBranch::InMin' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_IsEnemyRangeBranch, InMax) == 0x000004, "Member 'EndBattleAIController_IsEnemyRangeBranch::InMax' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_IsEnemyRangeBranch, cmp) == 0x000008, "Member 'EndBattleAIController_IsEnemyRangeBranch::cmp' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_IsEnemyRangeBranch, OutSignal) == 0x000009, "Member 'EndBattleAIController_IsEnemyRangeBranch::OutSignal' has a wrong offset!");

// Function EndGame.EndBattleAIController.IsEscaping
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAIController_IsEscaping final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_IsEscaping) == 0x000001, "Wrong alignment on EndBattleAIController_IsEscaping");
static_assert(sizeof(EndBattleAIController_IsEscaping) == 0x000001, "Wrong size on EndBattleAIController_IsEscaping");
static_assert(offsetof(EndBattleAIController_IsEscaping, ReturnValue) == 0x000000, "Member 'EndBattleAIController_IsEscaping::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.IsFly
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAIController_IsFly final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_IsFly) == 0x000001, "Wrong alignment on EndBattleAIController_IsFly");
static_assert(sizeof(EndBattleAIController_IsFly) == 0x000001, "Wrong size on EndBattleAIController_IsFly");
static_assert(offsetof(EndBattleAIController_IsFly, ReturnValue) == 0x000000, "Member 'EndBattleAIController_IsFly::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.IsHPPercent
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAIController_IsHPPercent final
{
public:
	int32                                         Percent;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndAiMathCmp                                 cmp;                                               // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0005(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAIController_IsHPPercent) == 0x000004, "Wrong alignment on EndBattleAIController_IsHPPercent");
static_assert(sizeof(EndBattleAIController_IsHPPercent) == 0x000008, "Wrong size on EndBattleAIController_IsHPPercent");
static_assert(offsetof(EndBattleAIController_IsHPPercent, Percent) == 0x000000, "Member 'EndBattleAIController_IsHPPercent::Percent' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_IsHPPercent, cmp) == 0x000004, "Member 'EndBattleAIController_IsHPPercent::cmp' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_IsHPPercent, ReturnValue) == 0x000005, "Member 'EndBattleAIController_IsHPPercent::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.IsIdle
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAIController_IsIdle final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_IsIdle) == 0x000001, "Wrong alignment on EndBattleAIController_IsIdle");
static_assert(sizeof(EndBattleAIController_IsIdle) == 0x000001, "Wrong size on EndBattleAIController_IsIdle");
static_assert(offsetof(EndBattleAIController_IsIdle, ReturnValue) == 0x000000, "Member 'EndBattleAIController_IsIdle::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.IsMotion
// 0x000C (0x000C - 0x0000)
struct EndBattleAIController_IsMotion final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAIController_IsMotion) == 0x000004, "Wrong alignment on EndBattleAIController_IsMotion");
static_assert(sizeof(EndBattleAIController_IsMotion) == 0x00000C, "Wrong size on EndBattleAIController_IsMotion");
static_assert(offsetof(EndBattleAIController_IsMotion, InName) == 0x000000, "Member 'EndBattleAIController_IsMotion::InName' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_IsMotion, ReturnValue) == 0x000008, "Member 'EndBattleAIController_IsMotion::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.IsMotionState
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAIController_IsMotionState final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_IsMotionState) == 0x000001, "Wrong alignment on EndBattleAIController_IsMotionState");
static_assert(sizeof(EndBattleAIController_IsMotionState) == 0x000001, "Wrong size on EndBattleAIController_IsMotionState");
static_assert(offsetof(EndBattleAIController_IsMotionState, ReturnValue) == 0x000000, "Member 'EndBattleAIController_IsMotionState::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.IsOverrideUpperAnim
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAIController_IsOverrideUpperAnim final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_IsOverrideUpperAnim) == 0x000001, "Wrong alignment on EndBattleAIController_IsOverrideUpperAnim");
static_assert(sizeof(EndBattleAIController_IsOverrideUpperAnim) == 0x000001, "Wrong size on EndBattleAIController_IsOverrideUpperAnim");
static_assert(offsetof(EndBattleAIController_IsOverrideUpperAnim, ReturnValue) == 0x000000, "Member 'EndBattleAIController_IsOverrideUpperAnim::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.IsRangeArea
// 0x0020 (0x0020 - 0x0000)
struct EndBattleAIController_IsRangeArea final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InLocation;                                        // 0x0008(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InRadius;                                          // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAIController_IsRangeArea) == 0x000008, "Wrong alignment on EndBattleAIController_IsRangeArea");
static_assert(sizeof(EndBattleAIController_IsRangeArea) == 0x000020, "Wrong size on EndBattleAIController_IsRangeArea");
static_assert(offsetof(EndBattleAIController_IsRangeArea, InChara) == 0x000000, "Member 'EndBattleAIController_IsRangeArea::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_IsRangeArea, InLocation) == 0x000008, "Member 'EndBattleAIController_IsRangeArea::InLocation' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_IsRangeArea, InRadius) == 0x000014, "Member 'EndBattleAIController_IsRangeArea::InRadius' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_IsRangeArea, ReturnValue) == 0x000018, "Member 'EndBattleAIController_IsRangeArea::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.IsRole
// 0x0002 (0x0002 - 0x0000)
struct EndBattleAIController_IsRole final
{
public:
	EEndAiBattleRole                              InRole;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_IsRole) == 0x000001, "Wrong alignment on EndBattleAIController_IsRole");
static_assert(sizeof(EndBattleAIController_IsRole) == 0x000002, "Wrong size on EndBattleAIController_IsRole");
static_assert(offsetof(EndBattleAIController_IsRole, InRole) == 0x000000, "Member 'EndBattleAIController_IsRole::InRole' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_IsRole, ReturnValue) == 0x000001, "Member 'EndBattleAIController_IsRole::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.IsRunningAITimer
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAIController_IsRunningAITimer final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_IsRunningAITimer) == 0x000001, "Wrong alignment on EndBattleAIController_IsRunningAITimer");
static_assert(sizeof(EndBattleAIController_IsRunningAITimer) == 0x000001, "Wrong size on EndBattleAIController_IsRunningAITimer");
static_assert(offsetof(EndBattleAIController_IsRunningAITimer, ReturnValue) == 0x000000, "Member 'EndBattleAIController_IsRunningAITimer::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.IsSceneSense
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAIController_IsSceneSense final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_IsSceneSense) == 0x000001, "Wrong alignment on EndBattleAIController_IsSceneSense");
static_assert(sizeof(EndBattleAIController_IsSceneSense) == 0x000001, "Wrong size on EndBattleAIController_IsSceneSense");
static_assert(offsetof(EndBattleAIController_IsSceneSense, ReturnValue) == 0x000000, "Member 'EndBattleAIController_IsSceneSense::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.IsStep
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAIController_IsStep final
{
public:
	int32                                         InStep;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAIController_IsStep) == 0x000004, "Wrong alignment on EndBattleAIController_IsStep");
static_assert(sizeof(EndBattleAIController_IsStep) == 0x000008, "Wrong size on EndBattleAIController_IsStep");
static_assert(offsetof(EndBattleAIController_IsStep, InStep) == 0x000000, "Member 'EndBattleAIController_IsStep::InStep' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_IsStep, ReturnValue) == 0x000004, "Member 'EndBattleAIController_IsStep::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.IsStepAndSubStep
// 0x000C (0x000C - 0x0000)
struct EndBattleAIController_IsStepAndSubStep final
{
public:
	int32                                         InStep;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InSubStep;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAIController_IsStepAndSubStep) == 0x000004, "Wrong alignment on EndBattleAIController_IsStepAndSubStep");
static_assert(sizeof(EndBattleAIController_IsStepAndSubStep) == 0x00000C, "Wrong size on EndBattleAIController_IsStepAndSubStep");
static_assert(offsetof(EndBattleAIController_IsStepAndSubStep, InStep) == 0x000000, "Member 'EndBattleAIController_IsStepAndSubStep::InStep' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_IsStepAndSubStep, InSubStep) == 0x000004, "Member 'EndBattleAIController_IsStepAndSubStep::InSubStep' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_IsStepAndSubStep, ReturnValue) == 0x000008, "Member 'EndBattleAIController_IsStepAndSubStep::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.IsSubStep
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAIController_IsSubStep final
{
public:
	int32                                         InSubStep;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAIController_IsSubStep) == 0x000004, "Wrong alignment on EndBattleAIController_IsSubStep");
static_assert(sizeof(EndBattleAIController_IsSubStep) == 0x000008, "Wrong size on EndBattleAIController_IsSubStep");
static_assert(offsetof(EndBattleAIController_IsSubStep, InSubStep) == 0x000000, "Member 'EndBattleAIController_IsSubStep::InSubStep' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_IsSubStep, ReturnValue) == 0x000004, "Member 'EndBattleAIController_IsSubStep::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.IsToad
// 0x0002 (0x0002 - 0x0000)
struct EndBattleAIController_IsToad final
{
public:
	EPlayerType                                   PlayerType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_IsToad) == 0x000001, "Wrong alignment on EndBattleAIController_IsToad");
static_assert(sizeof(EndBattleAIController_IsToad) == 0x000002, "Wrong size on EndBattleAIController_IsToad");
static_assert(offsetof(EndBattleAIController_IsToad, PlayerType) == 0x000000, "Member 'EndBattleAIController_IsToad::PlayerType' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_IsToad, ReturnValue) == 0x000001, "Member 'EndBattleAIController_IsToad::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.IsTriggerBoxCondition
// 0x0002 (0x0002 - 0x0000)
struct EndBattleAIController_IsTriggerBoxCondition final
{
public:
	ETriggerBoxCondition                          Condition;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_IsTriggerBoxCondition) == 0x000001, "Wrong alignment on EndBattleAIController_IsTriggerBoxCondition");
static_assert(sizeof(EndBattleAIController_IsTriggerBoxCondition) == 0x000002, "Wrong size on EndBattleAIController_IsTriggerBoxCondition");
static_assert(offsetof(EndBattleAIController_IsTriggerBoxCondition, Condition) == 0x000000, "Member 'EndBattleAIController_IsTriggerBoxCondition::Condition' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_IsTriggerBoxCondition, ReturnValue) == 0x000001, "Member 'EndBattleAIController_IsTriggerBoxCondition::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.IsValidAerialCharaPoint
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAIController_IsValidAerialCharaPoint final
{
public:
	struct FVector                                InOffset;                                          // 0x0000(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InRotateYaw;                                       // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000D(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAIController_IsValidAerialCharaPoint) == 0x000004, "Wrong alignment on EndBattleAIController_IsValidAerialCharaPoint");
static_assert(sizeof(EndBattleAIController_IsValidAerialCharaPoint) == 0x000010, "Wrong size on EndBattleAIController_IsValidAerialCharaPoint");
static_assert(offsetof(EndBattleAIController_IsValidAerialCharaPoint, InOffset) == 0x000000, "Member 'EndBattleAIController_IsValidAerialCharaPoint::InOffset' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_IsValidAerialCharaPoint, InRotateYaw) == 0x00000C, "Member 'EndBattleAIController_IsValidAerialCharaPoint::InRotateYaw' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_IsValidAerialCharaPoint, ReturnValue) == 0x00000D, "Member 'EndBattleAIController_IsValidAerialCharaPoint::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.IsValidPath
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAIController_IsValidPath final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_IsValidPath) == 0x000001, "Wrong alignment on EndBattleAIController_IsValidPath");
static_assert(sizeof(EndBattleAIController_IsValidPath) == 0x000001, "Wrong size on EndBattleAIController_IsValidPath");
static_assert(offsetof(EndBattleAIController_IsValidPath, ReturnValue) == 0x000000, "Member 'EndBattleAIController_IsValidPath::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.IsValidPathPoint
// 0x0014 (0x0014 - 0x0000)
struct EndBattleAIController_IsValidPathPoint final
{
public:
	struct FVector                                OutLocation;                                       // 0x0000(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InQuantity;                                        // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAIController_IsValidPathPoint) == 0x000004, "Wrong alignment on EndBattleAIController_IsValidPathPoint");
static_assert(sizeof(EndBattleAIController_IsValidPathPoint) == 0x000014, "Wrong size on EndBattleAIController_IsValidPathPoint");
static_assert(offsetof(EndBattleAIController_IsValidPathPoint, OutLocation) == 0x000000, "Member 'EndBattleAIController_IsValidPathPoint::OutLocation' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_IsValidPathPoint, InQuantity) == 0x00000C, "Member 'EndBattleAIController_IsValidPathPoint::InQuantity' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_IsValidPathPoint, ReturnValue) == 0x000010, "Member 'EndBattleAIController_IsValidPathPoint::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.IsWeakCondition
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAIController_IsWeakCondition final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_IsWeakCondition) == 0x000001, "Wrong alignment on EndBattleAIController_IsWeakCondition");
static_assert(sizeof(EndBattleAIController_IsWeakCondition) == 0x000001, "Wrong size on EndBattleAIController_IsWeakCondition");
static_assert(offsetof(EndBattleAIController_IsWeakCondition, ReturnValue) == 0x000000, "Member 'EndBattleAIController_IsWeakCondition::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.IsWithinTargetEQS
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAIController_IsWithinTargetEQS final
{
public:
	struct FVector                                inP;                                               // 0x0000(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAIController_IsWithinTargetEQS) == 0x000004, "Wrong alignment on EndBattleAIController_IsWithinTargetEQS");
static_assert(sizeof(EndBattleAIController_IsWithinTargetEQS) == 0x000010, "Wrong size on EndBattleAIController_IsWithinTargetEQS");
static_assert(offsetof(EndBattleAIController_IsWithinTargetEQS, inP) == 0x000000, "Member 'EndBattleAIController_IsWithinTargetEQS::inP' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_IsWithinTargetEQS, ReturnValue) == 0x00000C, "Member 'EndBattleAIController_IsWithinTargetEQS::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.IsWorkFloat
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAIController_IsWorkFloat final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndAiMathCmp                                 cmp;                                               // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000D(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAIController_IsWorkFloat) == 0x000004, "Wrong alignment on EndBattleAIController_IsWorkFloat");
static_assert(sizeof(EndBattleAIController_IsWorkFloat) == 0x000010, "Wrong size on EndBattleAIController_IsWorkFloat");
static_assert(offsetof(EndBattleAIController_IsWorkFloat, Name_0) == 0x000000, "Member 'EndBattleAIController_IsWorkFloat::Name_0' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_IsWorkFloat, Value) == 0x000008, "Member 'EndBattleAIController_IsWorkFloat::Value' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_IsWorkFloat, cmp) == 0x00000C, "Member 'EndBattleAIController_IsWorkFloat::cmp' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_IsWorkFloat, ReturnValue) == 0x00000D, "Member 'EndBattleAIController_IsWorkFloat::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.IsWorkFloatBranch
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAIController_IsWorkFloatBranch final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndAiMathCmp                                 cmp;                                               // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndAIBranchBit                               OutSignal;                                         // 0x000D(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAIController_IsWorkFloatBranch) == 0x000004, "Wrong alignment on EndBattleAIController_IsWorkFloatBranch");
static_assert(sizeof(EndBattleAIController_IsWorkFloatBranch) == 0x000010, "Wrong size on EndBattleAIController_IsWorkFloatBranch");
static_assert(offsetof(EndBattleAIController_IsWorkFloatBranch, Name_0) == 0x000000, "Member 'EndBattleAIController_IsWorkFloatBranch::Name_0' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_IsWorkFloatBranch, Value) == 0x000008, "Member 'EndBattleAIController_IsWorkFloatBranch::Value' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_IsWorkFloatBranch, cmp) == 0x00000C, "Member 'EndBattleAIController_IsWorkFloatBranch::cmp' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_IsWorkFloatBranch, OutSignal) == 0x00000D, "Member 'EndBattleAIController_IsWorkFloatBranch::OutSignal' has a wrong offset!");

// Function EndGame.EndBattleAIController.IsWorkInt32
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAIController_IsWorkInt32 final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndAiMathCmp                                 cmp;                                               // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000D(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAIController_IsWorkInt32) == 0x000004, "Wrong alignment on EndBattleAIController_IsWorkInt32");
static_assert(sizeof(EndBattleAIController_IsWorkInt32) == 0x000010, "Wrong size on EndBattleAIController_IsWorkInt32");
static_assert(offsetof(EndBattleAIController_IsWorkInt32, Name_0) == 0x000000, "Member 'EndBattleAIController_IsWorkInt32::Name_0' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_IsWorkInt32, Value) == 0x000008, "Member 'EndBattleAIController_IsWorkInt32::Value' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_IsWorkInt32, cmp) == 0x00000C, "Member 'EndBattleAIController_IsWorkInt32::cmp' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_IsWorkInt32, ReturnValue) == 0x00000D, "Member 'EndBattleAIController_IsWorkInt32::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.IsWorkInt32Branch
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAIController_IsWorkInt32Branch final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndAiMathCmp                                 cmp;                                               // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndAIBranchBit                               OutSignal;                                         // 0x000D(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAIController_IsWorkInt32Branch) == 0x000004, "Wrong alignment on EndBattleAIController_IsWorkInt32Branch");
static_assert(sizeof(EndBattleAIController_IsWorkInt32Branch) == 0x000010, "Wrong size on EndBattleAIController_IsWorkInt32Branch");
static_assert(offsetof(EndBattleAIController_IsWorkInt32Branch, Name_0) == 0x000000, "Member 'EndBattleAIController_IsWorkInt32Branch::Name_0' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_IsWorkInt32Branch, Value) == 0x000008, "Member 'EndBattleAIController_IsWorkInt32Branch::Value' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_IsWorkInt32Branch, cmp) == 0x00000C, "Member 'EndBattleAIController_IsWorkInt32Branch::cmp' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_IsWorkInt32Branch, OutSignal) == 0x00000D, "Member 'EndBattleAIController_IsWorkInt32Branch::OutSignal' has a wrong offset!");

// Function EndGame.EndBattleAIController.LockTargetCharaBase
// 0x0002 (0x0002 - 0x0000)
struct EndBattleAIController_LockTargetCharaBase final
{
public:
	EEndBattleTargetCharaBaseLockType             Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLock;                                             // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_LockTargetCharaBase) == 0x000001, "Wrong alignment on EndBattleAIController_LockTargetCharaBase");
static_assert(sizeof(EndBattleAIController_LockTargetCharaBase) == 0x000002, "Wrong size on EndBattleAIController_LockTargetCharaBase");
static_assert(offsetof(EndBattleAIController_LockTargetCharaBase, Type) == 0x000000, "Member 'EndBattleAIController_LockTargetCharaBase::Type' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_LockTargetCharaBase, bLock) == 0x000001, "Member 'EndBattleAIController_LockTargetCharaBase::bLock' has a wrong offset!");

// Function EndGame.EndBattleAIController.NextSubStep
// 0x0004 (0x0004 - 0x0000)
struct EndBattleAIController_NextSubStep final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_NextSubStep) == 0x000004, "Wrong alignment on EndBattleAIController_NextSubStep");
static_assert(sizeof(EndBattleAIController_NextSubStep) == 0x000004, "Wrong size on EndBattleAIController_NextSubStep");
static_assert(offsetof(EndBattleAIController_NextSubStep, ReturnValue) == 0x000000, "Member 'EndBattleAIController_NextSubStep::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.NotBoolBranch
// 0x000C (0x000C - 0x0000)
struct EndBattleAIController_NotBoolBranch final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndAIBranchBit                               OutSignal;                                         // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAIController_NotBoolBranch) == 0x000004, "Wrong alignment on EndBattleAIController_NotBoolBranch");
static_assert(sizeof(EndBattleAIController_NotBoolBranch) == 0x00000C, "Wrong size on EndBattleAIController_NotBoolBranch");
static_assert(offsetof(EndBattleAIController_NotBoolBranch, Name_0) == 0x000000, "Member 'EndBattleAIController_NotBoolBranch::Name_0' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_NotBoolBranch, OutSignal) == 0x000008, "Member 'EndBattleAIController_NotBoolBranch::OutSignal' has a wrong offset!");

// Function EndGame.EndBattleAIController.NotifyAbilityReaction
// 0x0004 (0x0004 - 0x0000)
struct EndBattleAIController_NotifyAbilityReaction final
{
public:
	float                                         Param0;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_NotifyAbilityReaction) == 0x000004, "Wrong alignment on EndBattleAIController_NotifyAbilityReaction");
static_assert(sizeof(EndBattleAIController_NotifyAbilityReaction) == 0x000004, "Wrong size on EndBattleAIController_NotifyAbilityReaction");
static_assert(offsetof(EndBattleAIController_NotifyAbilityReaction, Param0) == 0x000000, "Member 'EndBattleAIController_NotifyAbilityReaction::Param0' has a wrong offset!");

// Function EndGame.EndBattleAIController.OnAbilityReactionCondition
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAIController_OnAbilityReactionCondition final
{
public:
	EEndBattleAbilityReactionConditionType        abilityReactionConditionType;                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_OnAbilityReactionCondition) == 0x000001, "Wrong alignment on EndBattleAIController_OnAbilityReactionCondition");
static_assert(sizeof(EndBattleAIController_OnAbilityReactionCondition) == 0x000001, "Wrong size on EndBattleAIController_OnAbilityReactionCondition");
static_assert(offsetof(EndBattleAIController_OnAbilityReactionCondition, abilityReactionConditionType) == 0x000000, "Member 'EndBattleAIController_OnAbilityReactionCondition::abilityReactionConditionType' has a wrong offset!");

// Function EndGame.EndBattleAIController.OnAbilityReactionConditionTargetDodge
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAIController_OnAbilityReactionConditionTargetDodge final
{
public:
	class FName                                   AbilityID;                                         // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AEndCharacter*                          targetChara;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_OnAbilityReactionConditionTargetDodge) == 0x000008, "Wrong alignment on EndBattleAIController_OnAbilityReactionConditionTargetDodge");
static_assert(sizeof(EndBattleAIController_OnAbilityReactionConditionTargetDodge) == 0x000010, "Wrong size on EndBattleAIController_OnAbilityReactionConditionTargetDodge");
static_assert(offsetof(EndBattleAIController_OnAbilityReactionConditionTargetDodge, AbilityID) == 0x000000, "Member 'EndBattleAIController_OnAbilityReactionConditionTargetDodge::AbilityID' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OnAbilityReactionConditionTargetDodge, targetChara) == 0x000008, "Member 'EndBattleAIController_OnAbilityReactionConditionTargetDodge::targetChara' has a wrong offset!");

// Function EndGame.EndBattleAIController.OnAbilityReactionConditionTargetDodgeAngle
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAIController_OnAbilityReactionConditionTargetDodgeAngle final
{
public:
	class FName                                   AbilityID;                                         // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AEndCharacter*                          targetChara;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_OnAbilityReactionConditionTargetDodgeAngle) == 0x000008, "Wrong alignment on EndBattleAIController_OnAbilityReactionConditionTargetDodgeAngle");
static_assert(sizeof(EndBattleAIController_OnAbilityReactionConditionTargetDodgeAngle) == 0x000010, "Wrong size on EndBattleAIController_OnAbilityReactionConditionTargetDodgeAngle");
static_assert(offsetof(EndBattleAIController_OnAbilityReactionConditionTargetDodgeAngle, AbilityID) == 0x000000, "Member 'EndBattleAIController_OnAbilityReactionConditionTargetDodgeAngle::AbilityID' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OnAbilityReactionConditionTargetDodgeAngle, targetChara) == 0x000008, "Member 'EndBattleAIController_OnAbilityReactionConditionTargetDodgeAngle::targetChara' has a wrong offset!");

// Function EndGame.EndBattleAIController.OnAbilityReactionConditionTargetDodgeDirection
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAIController_OnAbilityReactionConditionTargetDodgeDirection final
{
public:
	class FName                                   AbilityID;                                         // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AEndCharacter*                          targetChara;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_OnAbilityReactionConditionTargetDodgeDirection) == 0x000008, "Wrong alignment on EndBattleAIController_OnAbilityReactionConditionTargetDodgeDirection");
static_assert(sizeof(EndBattleAIController_OnAbilityReactionConditionTargetDodgeDirection) == 0x000010, "Wrong size on EndBattleAIController_OnAbilityReactionConditionTargetDodgeDirection");
static_assert(offsetof(EndBattleAIController_OnAbilityReactionConditionTargetDodgeDirection, AbilityID) == 0x000000, "Member 'EndBattleAIController_OnAbilityReactionConditionTargetDodgeDirection::AbilityID' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OnAbilityReactionConditionTargetDodgeDirection, targetChara) == 0x000008, "Member 'EndBattleAIController_OnAbilityReactionConditionTargetDodgeDirection::targetChara' has a wrong offset!");

// Function EndGame.EndBattleAIController.OnAddStatusChange
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAIController_OnAddStatusChange final
{
public:
	EEndBattleStatusChangeType                    Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_OnAddStatusChange) == 0x000001, "Wrong alignment on EndBattleAIController_OnAddStatusChange");
static_assert(sizeof(EndBattleAIController_OnAddStatusChange) == 0x000001, "Wrong size on EndBattleAIController_OnAddStatusChange");
static_assert(offsetof(EndBattleAIController_OnAddStatusChange, Type) == 0x000000, "Member 'EndBattleAIController_OnAddStatusChange::Type' has a wrong offset!");

// Function EndGame.EndBattleAIController.OnArrivalRegisterMove
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAIController_OnArrivalRegisterMove final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_OnArrivalRegisterMove) == 0x000004, "Wrong alignment on EndBattleAIController_OnArrivalRegisterMove");
static_assert(sizeof(EndBattleAIController_OnArrivalRegisterMove) == 0x000008, "Wrong size on EndBattleAIController_OnArrivalRegisterMove");
static_assert(offsetof(EndBattleAIController_OnArrivalRegisterMove, InName) == 0x000000, "Member 'EndBattleAIController_OnArrivalRegisterMove::InName' has a wrong offset!");

// Function EndGame.EndBattleAIController.OnBeginAbility
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAIController_OnBeginAbility final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InAbilityName;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_OnBeginAbility) == 0x000008, "Wrong alignment on EndBattleAIController_OnBeginAbility");
static_assert(sizeof(EndBattleAIController_OnBeginAbility) == 0x000010, "Wrong size on EndBattleAIController_OnBeginAbility");
static_assert(offsetof(EndBattleAIController_OnBeginAbility, InChara) == 0x000000, "Member 'EndBattleAIController_OnBeginAbility::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OnBeginAbility, InAbilityName) == 0x000008, "Member 'EndBattleAIController_OnBeginAbility::InAbilityName' has a wrong offset!");

// Function EndGame.EndBattleAIController.OnBeginCutScene
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAIController_OnBeginCutScene final
{
public:
	class FName                                   CutsceneID;                                        // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_OnBeginCutScene) == 0x000004, "Wrong alignment on EndBattleAIController_OnBeginCutScene");
static_assert(sizeof(EndBattleAIController_OnBeginCutScene) == 0x000008, "Wrong size on EndBattleAIController_OnBeginCutScene");
static_assert(offsetof(EndBattleAIController_OnBeginCutScene, CutsceneID) == 0x000000, "Member 'EndBattleAIController_OnBeginCutScene::CutsceneID' has a wrong offset!");

// Function EndGame.EndBattleAIController.OnBurstEnd
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAIController_OnBurstEnd final
{
public:
	bool                                          instant;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_OnBurstEnd) == 0x000001, "Wrong alignment on EndBattleAIController_OnBurstEnd");
static_assert(sizeof(EndBattleAIController_OnBurstEnd) == 0x000001, "Wrong size on EndBattleAIController_OnBurstEnd");
static_assert(offsetof(EndBattleAIController_OnBurstEnd, instant) == 0x000000, "Member 'EndBattleAIController_OnBurstEnd::instant' has a wrong offset!");

// Function EndGame.EndBattleAIController.OnChangeLeader
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAIController_OnChangeLeader final
{
public:
	class AEndCharacter*                          InLeader;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_OnChangeLeader) == 0x000008, "Wrong alignment on EndBattleAIController_OnChangeLeader");
static_assert(sizeof(EndBattleAIController_OnChangeLeader) == 0x000008, "Wrong size on EndBattleAIController_OnChangeLeader");
static_assert(offsetof(EndBattleAIController_OnChangeLeader, InLeader) == 0x000000, "Member 'EndBattleAIController_OnChangeLeader::InLeader' has a wrong offset!");

// Function EndGame.EndBattleAIController.OnChangeMotionState
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAIController_OnChangeMotionState final
{
public:
	int32                                         Before;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         After;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_OnChangeMotionState) == 0x000004, "Wrong alignment on EndBattleAIController_OnChangeMotionState");
static_assert(sizeof(EndBattleAIController_OnChangeMotionState) == 0x000008, "Wrong size on EndBattleAIController_OnChangeMotionState");
static_assert(offsetof(EndBattleAIController_OnChangeMotionState, Before) == 0x000000, "Member 'EndBattleAIController_OnChangeMotionState::Before' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OnChangeMotionState, After) == 0x000004, "Member 'EndBattleAIController_OnChangeMotionState::After' has a wrong offset!");

// Function EndGame.EndBattleAIController.OnChangePhase
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAIController_OnChangePhase final
{
public:
	int32                                         InNew;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InOld;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_OnChangePhase) == 0x000004, "Wrong alignment on EndBattleAIController_OnChangePhase");
static_assert(sizeof(EndBattleAIController_OnChangePhase) == 0x000008, "Wrong size on EndBattleAIController_OnChangePhase");
static_assert(offsetof(EndBattleAIController_OnChangePhase, InNew) == 0x000000, "Member 'EndBattleAIController_OnChangePhase::InNew' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OnChangePhase, InOld) == 0x000004, "Member 'EndBattleAIController_OnChangePhase::InOld' has a wrong offset!");

// Function EndGame.EndBattleAIController.OnChangeRole
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAIController_OnChangeRole final
{
public:
	EEndAiBattleRole                              InRole;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_OnChangeRole) == 0x000001, "Wrong alignment on EndBattleAIController_OnChangeRole");
static_assert(sizeof(EndBattleAIController_OnChangeRole) == 0x000001, "Wrong size on EndBattleAIController_OnChangeRole");
static_assert(offsetof(EndBattleAIController_OnChangeRole, InRole) == 0x000000, "Member 'EndBattleAIController_OnChangeRole::InRole' has a wrong offset!");

// Function EndGame.EndBattleAIController.OnChangeStep
// 0x0004 (0x0004 - 0x0000)
struct EndBattleAIController_OnChangeStep final
{
public:
	int32                                         InStep;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_OnChangeStep) == 0x000004, "Wrong alignment on EndBattleAIController_OnChangeStep");
static_assert(sizeof(EndBattleAIController_OnChangeStep) == 0x000004, "Wrong size on EndBattleAIController_OnChangeStep");
static_assert(offsetof(EndBattleAIController_OnChangeStep, InStep) == 0x000000, "Member 'EndBattleAIController_OnChangeStep::InStep' has a wrong offset!");

// Function EndGame.EndBattleAIController.OnCheckBindAction
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAIController_OnCheckBindAction final
{
public:
	class FName                                   ActionName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CheckID;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ComboIndex;                                        // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_OnCheckBindAction) == 0x000004, "Wrong alignment on EndBattleAIController_OnCheckBindAction");
static_assert(sizeof(EndBattleAIController_OnCheckBindAction) == 0x000010, "Wrong size on EndBattleAIController_OnCheckBindAction");
static_assert(offsetof(EndBattleAIController_OnCheckBindAction, ActionName) == 0x000000, "Member 'EndBattleAIController_OnCheckBindAction::ActionName' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OnCheckBindAction, CheckID) == 0x000008, "Member 'EndBattleAIController_OnCheckBindAction::CheckID' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OnCheckBindAction, ComboIndex) == 0x00000C, "Member 'EndBattleAIController_OnCheckBindAction::ComboIndex' has a wrong offset!");

// Function EndGame.EndBattleAIController.OnClearAction
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAIController_OnClearAction final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_OnClearAction) == 0x000004, "Wrong alignment on EndBattleAIController_OnClearAction");
static_assert(sizeof(EndBattleAIController_OnClearAction) == 0x000008, "Wrong size on EndBattleAIController_OnClearAction");
static_assert(offsetof(EndBattleAIController_OnClearAction, InName) == 0x000000, "Member 'EndBattleAIController_OnClearAction::InName' has a wrong offset!");

// Function EndGame.EndBattleAIController.OnCompleteAbility
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAIController_OnCompleteAbility final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_OnCompleteAbility) == 0x000004, "Wrong alignment on EndBattleAIController_OnCompleteAbility");
static_assert(sizeof(EndBattleAIController_OnCompleteAbility) == 0x000008, "Wrong size on EndBattleAIController_OnCompleteAbility");
static_assert(offsetof(EndBattleAIController_OnCompleteAbility, InName) == 0x000000, "Member 'EndBattleAIController_OnCompleteAbility::InName' has a wrong offset!");

// Function EndGame.EndBattleAIController.OnCompletedAbilityExtraActionEvent
// 0x000C (0x000C - 0x0000)
struct EndBattleAIController_OnCompletedAbilityExtraActionEvent final
{
public:
	EPlayerType                                   PlayerType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   AbilityFName;                                      // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_OnCompletedAbilityExtraActionEvent) == 0x000004, "Wrong alignment on EndBattleAIController_OnCompletedAbilityExtraActionEvent");
static_assert(sizeof(EndBattleAIController_OnCompletedAbilityExtraActionEvent) == 0x00000C, "Wrong size on EndBattleAIController_OnCompletedAbilityExtraActionEvent");
static_assert(offsetof(EndBattleAIController_OnCompletedAbilityExtraActionEvent, PlayerType) == 0x000000, "Member 'EndBattleAIController_OnCompletedAbilityExtraActionEvent::PlayerType' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OnCompletedAbilityExtraActionEvent, AbilityFName) == 0x000004, "Member 'EndBattleAIController_OnCompletedAbilityExtraActionEvent::AbilityFName' has a wrong offset!");

// Function EndGame.EndBattleAIController.OnCompleteRegisterMove
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAIController_OnCompleteRegisterMove final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_OnCompleteRegisterMove) == 0x000004, "Wrong alignment on EndBattleAIController_OnCompleteRegisterMove");
static_assert(sizeof(EndBattleAIController_OnCompleteRegisterMove) == 0x000008, "Wrong size on EndBattleAIController_OnCompleteRegisterMove");
static_assert(offsetof(EndBattleAIController_OnCompleteRegisterMove, InName) == 0x000000, "Member 'EndBattleAIController_OnCompleteRegisterMove::InName' has a wrong offset!");

// Function EndGame.EndBattleAIController.OnContactObject
// 0x0004 (0x0004 - 0x0000)
struct EndBattleAIController_OnContactObject final
{
public:
	float                                         Angle;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_OnContactObject) == 0x000004, "Wrong alignment on EndBattleAIController_OnContactObject");
static_assert(sizeof(EndBattleAIController_OnContactObject) == 0x000004, "Wrong size on EndBattleAIController_OnContactObject");
static_assert(offsetof(EndBattleAIController_OnContactObject, Angle) == 0x000000, "Member 'EndBattleAIController_OnContactObject::Angle' has a wrong offset!");

// Function EndGame.EndBattleAIController.OnContactWall
// 0x0004 (0x0004 - 0x0000)
struct EndBattleAIController_OnContactWall final
{
public:
	float                                         Angle;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_OnContactWall) == 0x000004, "Wrong alignment on EndBattleAIController_OnContactWall");
static_assert(sizeof(EndBattleAIController_OnContactWall) == 0x000004, "Wrong size on EndBattleAIController_OnContactWall");
static_assert(offsetof(EndBattleAIController_OnContactWall, Angle) == 0x000000, "Member 'EndBattleAIController_OnContactWall::Angle' has a wrong offset!");

// Function EndGame.EndBattleAIController.OnConvocation
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAIController_OnConvocation final
{
public:
	class AEndCharacter*                          InLeader;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InFormationName;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_OnConvocation) == 0x000008, "Wrong alignment on EndBattleAIController_OnConvocation");
static_assert(sizeof(EndBattleAIController_OnConvocation) == 0x000010, "Wrong size on EndBattleAIController_OnConvocation");
static_assert(offsetof(EndBattleAIController_OnConvocation, InLeader) == 0x000000, "Member 'EndBattleAIController_OnConvocation::InLeader' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OnConvocation, InFormationName) == 0x000008, "Member 'EndBattleAIController_OnConvocation::InFormationName' has a wrong offset!");

// Function EndGame.EndBattleAIController.OnCreateDamageSource
// 0x0018 (0x0018 - 0x0000)
struct EndBattleAIController_OnCreateDamageSource final
{
public:
	class AEndCharacter*                          InOwner;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DamageSourceID;                                    // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UEndBattleDamageSourceComponent*        InDamageSource;                                    // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_OnCreateDamageSource) == 0x000008, "Wrong alignment on EndBattleAIController_OnCreateDamageSource");
static_assert(sizeof(EndBattleAIController_OnCreateDamageSource) == 0x000018, "Wrong size on EndBattleAIController_OnCreateDamageSource");
static_assert(offsetof(EndBattleAIController_OnCreateDamageSource, InOwner) == 0x000000, "Member 'EndBattleAIController_OnCreateDamageSource::InOwner' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OnCreateDamageSource, DamageSourceID) == 0x000008, "Member 'EndBattleAIController_OnCreateDamageSource::DamageSourceID' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OnCreateDamageSource, InDamageSource) == 0x000010, "Member 'EndBattleAIController_OnCreateDamageSource::InDamageSource' has a wrong offset!");

// Function EndGame.EndBattleAIController.OnCutSceneMessage
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAIController_OnCutSceneMessage final
{
public:
	class FName                                   Message;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_OnCutSceneMessage) == 0x000004, "Wrong alignment on EndBattleAIController_OnCutSceneMessage");
static_assert(sizeof(EndBattleAIController_OnCutSceneMessage) == 0x000008, "Wrong size on EndBattleAIController_OnCutSceneMessage");
static_assert(offsetof(EndBattleAIController_OnCutSceneMessage, Message) == 0x000000, "Member 'EndBattleAIController_OnCutSceneMessage::Message' has a wrong offset!");

// Function EndGame.EndBattleAIController.OnDamageSourceEntry
// 0x0028 (0x0028 - 0x0000)
struct EndBattleAIController_OnDamageSourceEntry final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InAbilityName;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InLocation;                                        // 0x0010(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UEndBattleDamageSourceComponent*        InDamageSourceComponent;                           // 0x0020(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_OnDamageSourceEntry) == 0x000008, "Wrong alignment on EndBattleAIController_OnDamageSourceEntry");
static_assert(sizeof(EndBattleAIController_OnDamageSourceEntry) == 0x000028, "Wrong size on EndBattleAIController_OnDamageSourceEntry");
static_assert(offsetof(EndBattleAIController_OnDamageSourceEntry, InChara) == 0x000000, "Member 'EndBattleAIController_OnDamageSourceEntry::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OnDamageSourceEntry, InAbilityName) == 0x000008, "Member 'EndBattleAIController_OnDamageSourceEntry::InAbilityName' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OnDamageSourceEntry, InLocation) == 0x000010, "Member 'EndBattleAIController_OnDamageSourceEntry::InLocation' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OnDamageSourceEntry, InDamageSourceComponent) == 0x000020, "Member 'EndBattleAIController_OnDamageSourceEntry::InDamageSourceComponent' has a wrong offset!");

// Function EndGame.EndBattleAIController.OnDead
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAIController_OnDead final
{
public:
	bool                                          AtBurst;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_OnDead) == 0x000001, "Wrong alignment on EndBattleAIController_OnDead");
static_assert(sizeof(EndBattleAIController_OnDead) == 0x000001, "Wrong size on EndBattleAIController_OnDead");
static_assert(offsetof(EndBattleAIController_OnDead, AtBurst) == 0x000000, "Member 'EndBattleAIController_OnDead::AtBurst' has a wrong offset!");

// Function EndGame.EndBattleAIController.OnDestroyDamageSource
// 0x0014 (0x0014 - 0x0000)
struct EndBattleAIController_OnDestroyDamageSource final
{
public:
	class FName                                   DamageSourceID;                                    // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_OnDestroyDamageSource) == 0x000004, "Wrong alignment on EndBattleAIController_OnDestroyDamageSource");
static_assert(sizeof(EndBattleAIController_OnDestroyDamageSource) == 0x000014, "Wrong size on EndBattleAIController_OnDestroyDamageSource");
static_assert(offsetof(EndBattleAIController_OnDestroyDamageSource, DamageSourceID) == 0x000000, "Member 'EndBattleAIController_OnDestroyDamageSource::DamageSourceID' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OnDestroyDamageSource, Location) == 0x000008, "Member 'EndBattleAIController_OnDestroyDamageSource::Location' has a wrong offset!");

// Function EndGame.EndBattleAIController.OnEndCutScene
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAIController_OnEndCutScene final
{
public:
	class FName                                   CutsceneID;                                        // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_OnEndCutScene) == 0x000004, "Wrong alignment on EndBattleAIController_OnEndCutScene");
static_assert(sizeof(EndBattleAIController_OnEndCutScene) == 0x000008, "Wrong size on EndBattleAIController_OnEndCutScene");
static_assert(offsetof(EndBattleAIController_OnEndCutScene, CutsceneID) == 0x000000, "Member 'EndBattleAIController_OnEndCutScene::CutsceneID' has a wrong offset!");

// Function EndGame.EndBattleAIController.OnEntryCharaRange
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAIController_OnEntryCharaRange final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_OnEntryCharaRange) == 0x000008, "Wrong alignment on EndBattleAIController_OnEntryCharaRange");
static_assert(sizeof(EndBattleAIController_OnEntryCharaRange) == 0x000008, "Wrong size on EndBattleAIController_OnEntryCharaRange");
static_assert(offsetof(EndBattleAIController_OnEntryCharaRange, InChara) == 0x000000, "Member 'EndBattleAIController_OnEntryCharaRange::InChara' has a wrong offset!");

// Function EndGame.EndBattleAIController.OnEventAddWeakCondition
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAIController_OnEventAddWeakCondition final
{
public:
	EEndBattleWeakConditionType                   ConditionType;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_OnEventAddWeakCondition) == 0x000001, "Wrong alignment on EndBattleAIController_OnEventAddWeakCondition");
static_assert(sizeof(EndBattleAIController_OnEventAddWeakCondition) == 0x000001, "Wrong size on EndBattleAIController_OnEventAddWeakCondition");
static_assert(offsetof(EndBattleAIController_OnEventAddWeakCondition, ConditionType) == 0x000000, "Member 'EndBattleAIController_OnEventAddWeakCondition::ConditionType' has a wrong offset!");

// Function EndGame.EndBattleAIController.OnEventCompletedWeakCondition
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAIController_OnEventCompletedWeakCondition final
{
public:
	EEndBattleWeakConditionType                   ConditionType;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_OnEventCompletedWeakCondition) == 0x000001, "Wrong alignment on EndBattleAIController_OnEventCompletedWeakCondition");
static_assert(sizeof(EndBattleAIController_OnEventCompletedWeakCondition) == 0x000001, "Wrong size on EndBattleAIController_OnEventCompletedWeakCondition");
static_assert(offsetof(EndBattleAIController_OnEventCompletedWeakCondition, ConditionType) == 0x000000, "Member 'EndBattleAIController_OnEventCompletedWeakCondition::ConditionType' has a wrong offset!");

// Function EndGame.EndBattleAIController.OnEventDamageOverWeakCondition
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAIController_OnEventDamageOverWeakCondition final
{
public:
	EEndBattleWeakConditionType                   ConditionType;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_OnEventDamageOverWeakCondition) == 0x000001, "Wrong alignment on EndBattleAIController_OnEventDamageOverWeakCondition");
static_assert(sizeof(EndBattleAIController_OnEventDamageOverWeakCondition) == 0x000001, "Wrong size on EndBattleAIController_OnEventDamageOverWeakCondition");
static_assert(offsetof(EndBattleAIController_OnEventDamageOverWeakCondition, ConditionType) == 0x000000, "Member 'EndBattleAIController_OnEventDamageOverWeakCondition::ConditionType' has a wrong offset!");

// Function EndGame.EndBattleAIController.OnEventDamageSource
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAIController_OnEventDamageSource final
{
public:
	class FName                                   DamageSourceID;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_OnEventDamageSource) == 0x000004, "Wrong alignment on EndBattleAIController_OnEventDamageSource");
static_assert(sizeof(EndBattleAIController_OnEventDamageSource) == 0x000008, "Wrong size on EndBattleAIController_OnEventDamageSource");
static_assert(offsetof(EndBattleAIController_OnEventDamageSource, DamageSourceID) == 0x000000, "Member 'EndBattleAIController_OnEventDamageSource::DamageSourceID' has a wrong offset!");

// Function EndGame.EndBattleAIController.OnEventRemoveWeakCondition
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAIController_OnEventRemoveWeakCondition final
{
public:
	EEndBattleWeakConditionType                   ConditionType;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_OnEventRemoveWeakCondition) == 0x000001, "Wrong alignment on EndBattleAIController_OnEventRemoveWeakCondition");
static_assert(sizeof(EndBattleAIController_OnEventRemoveWeakCondition) == 0x000001, "Wrong size on EndBattleAIController_OnEventRemoveWeakCondition");
static_assert(offsetof(EndBattleAIController_OnEventRemoveWeakCondition, ConditionType) == 0x000000, "Member 'EndBattleAIController_OnEventRemoveWeakCondition::ConditionType' has a wrong offset!");

// Function EndGame.EndBattleAIController.OnFear
// 0x0028 (0x0028 - 0x0000)
struct EndBattleAIController_OnFear final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InAbilityName;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InLocation;                                        // 0x0010(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UEndBattleDamageSourceComponent*        InDamageSourceComponent;                           // 0x0020(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_OnFear) == 0x000008, "Wrong alignment on EndBattleAIController_OnFear");
static_assert(sizeof(EndBattleAIController_OnFear) == 0x000028, "Wrong size on EndBattleAIController_OnFear");
static_assert(offsetof(EndBattleAIController_OnFear, InChara) == 0x000000, "Member 'EndBattleAIController_OnFear::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OnFear, InAbilityName) == 0x000008, "Member 'EndBattleAIController_OnFear::InAbilityName' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OnFear, InLocation) == 0x000010, "Member 'EndBattleAIController_OnFear::InLocation' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OnFear, InDamageSourceComponent) == 0x000020, "Member 'EndBattleAIController_OnFear::InDamageSourceComponent' has a wrong offset!");

// Function EndGame.EndBattleAIController.OnFirstUpdate
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAIController_OnFirstUpdate final
{
public:
	EEndAiBattleRole                              InRole;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InStep;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_OnFirstUpdate) == 0x000004, "Wrong alignment on EndBattleAIController_OnFirstUpdate");
static_assert(sizeof(EndBattleAIController_OnFirstUpdate) == 0x000008, "Wrong size on EndBattleAIController_OnFirstUpdate");
static_assert(offsetof(EndBattleAIController_OnFirstUpdate, InRole) == 0x000000, "Member 'EndBattleAIController_OnFirstUpdate::InRole' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OnFirstUpdate, InStep) == 0x000004, "Member 'EndBattleAIController_OnFirstUpdate::InStep' has a wrong offset!");

// Function EndGame.EndBattleAIController.OnGetCreateFieldPosition
// 0x0028 (0x0028 - 0x0000)
struct EndBattleAIController_OnGetCreateFieldPosition final
{
public:
	struct FVector                                outPosition;                                       // 0x0000(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InBattleAbilityID;                                 // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InDamageSourceID;                                  // 0x0014(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InAnimationName;                                   // 0x001C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAIController_OnGetCreateFieldPosition) == 0x000004, "Wrong alignment on EndBattleAIController_OnGetCreateFieldPosition");
static_assert(sizeof(EndBattleAIController_OnGetCreateFieldPosition) == 0x000028, "Wrong size on EndBattleAIController_OnGetCreateFieldPosition");
static_assert(offsetof(EndBattleAIController_OnGetCreateFieldPosition, outPosition) == 0x000000, "Member 'EndBattleAIController_OnGetCreateFieldPosition::outPosition' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OnGetCreateFieldPosition, InBattleAbilityID) == 0x00000C, "Member 'EndBattleAIController_OnGetCreateFieldPosition::InBattleAbilityID' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OnGetCreateFieldPosition, InDamageSourceID) == 0x000014, "Member 'EndBattleAIController_OnGetCreateFieldPosition::InDamageSourceID' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OnGetCreateFieldPosition, InAnimationName) == 0x00001C, "Member 'EndBattleAIController_OnGetCreateFieldPosition::InAnimationName' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OnGetCreateFieldPosition, ReturnValue) == 0x000024, "Member 'EndBattleAIController_OnGetCreateFieldPosition::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.OnGetTargetFieldPosition
// 0x0028 (0x0028 - 0x0000)
struct EndBattleAIController_OnGetTargetFieldPosition final
{
public:
	struct FVector                                outPosition;                                       // 0x0000(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InBattleAbilityID;                                 // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InDamageSourceID;                                  // 0x0014(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InAnimationName;                                   // 0x001C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAIController_OnGetTargetFieldPosition) == 0x000004, "Wrong alignment on EndBattleAIController_OnGetTargetFieldPosition");
static_assert(sizeof(EndBattleAIController_OnGetTargetFieldPosition) == 0x000028, "Wrong size on EndBattleAIController_OnGetTargetFieldPosition");
static_assert(offsetof(EndBattleAIController_OnGetTargetFieldPosition, outPosition) == 0x000000, "Member 'EndBattleAIController_OnGetTargetFieldPosition::outPosition' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OnGetTargetFieldPosition, InBattleAbilityID) == 0x00000C, "Member 'EndBattleAIController_OnGetTargetFieldPosition::InBattleAbilityID' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OnGetTargetFieldPosition, InDamageSourceID) == 0x000014, "Member 'EndBattleAIController_OnGetTargetFieldPosition::InDamageSourceID' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OnGetTargetFieldPosition, InAnimationName) == 0x00001C, "Member 'EndBattleAIController_OnGetTargetFieldPosition::InAnimationName' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OnGetTargetFieldPosition, ReturnValue) == 0x000024, "Member 'EndBattleAIController_OnGetTargetFieldPosition::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.OnGiveDamage
// 0x0038 (0x0038 - 0x0000)
struct EndBattleAIController_OnGiveDamage final
{
public:
	int32                                         Damage;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AEndCharacter*                          InTarget;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InName;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InBind;                                            // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InGuard;                                           // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InJustGuard;                                       // 0x001A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          KeepOver;                                          // 0x001B(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InDodge;                                           // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InCounter;                                         // 0x001D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   InBoneName;                                        // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InAttributeWeak;                                   // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   InDamageSourceID;                                  // 0x002C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InSteal;                                           // 0x0034(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          heal;                                              // 0x0035(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_36[0x2];                                       // 0x0036(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAIController_OnGiveDamage) == 0x000008, "Wrong alignment on EndBattleAIController_OnGiveDamage");
static_assert(sizeof(EndBattleAIController_OnGiveDamage) == 0x000038, "Wrong size on EndBattleAIController_OnGiveDamage");
static_assert(offsetof(EndBattleAIController_OnGiveDamage, Damage) == 0x000000, "Member 'EndBattleAIController_OnGiveDamage::Damage' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OnGiveDamage, InTarget) == 0x000008, "Member 'EndBattleAIController_OnGiveDamage::InTarget' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OnGiveDamage, InName) == 0x000010, "Member 'EndBattleAIController_OnGiveDamage::InName' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OnGiveDamage, InBind) == 0x000018, "Member 'EndBattleAIController_OnGiveDamage::InBind' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OnGiveDamage, InGuard) == 0x000019, "Member 'EndBattleAIController_OnGiveDamage::InGuard' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OnGiveDamage, InJustGuard) == 0x00001A, "Member 'EndBattleAIController_OnGiveDamage::InJustGuard' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OnGiveDamage, KeepOver) == 0x00001B, "Member 'EndBattleAIController_OnGiveDamage::KeepOver' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OnGiveDamage, InDodge) == 0x00001C, "Member 'EndBattleAIController_OnGiveDamage::InDodge' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OnGiveDamage, InCounter) == 0x00001D, "Member 'EndBattleAIController_OnGiveDamage::InCounter' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OnGiveDamage, InBoneName) == 0x000020, "Member 'EndBattleAIController_OnGiveDamage::InBoneName' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OnGiveDamage, InAttributeWeak) == 0x000028, "Member 'EndBattleAIController_OnGiveDamage::InAttributeWeak' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OnGiveDamage, InDamageSourceID) == 0x00002C, "Member 'EndBattleAIController_OnGiveDamage::InDamageSourceID' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OnGiveDamage, InSteal) == 0x000034, "Member 'EndBattleAIController_OnGiveDamage::InSteal' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OnGiveDamage, heal) == 0x000035, "Member 'EndBattleAIController_OnGiveDamage::heal' has a wrong offset!");

// Function EndGame.EndBattleAIController.OnInAreaSensorEvent
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAIController_OnInAreaSensorEvent final
{
public:
	EPlayerType                                   PlayerType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_OnInAreaSensorEvent) == 0x000001, "Wrong alignment on EndBattleAIController_OnInAreaSensorEvent");
static_assert(sizeof(EndBattleAIController_OnInAreaSensorEvent) == 0x000001, "Wrong size on EndBattleAIController_OnInAreaSensorEvent");
static_assert(offsetof(EndBattleAIController_OnInAreaSensorEvent, PlayerType) == 0x000000, "Member 'EndBattleAIController_OnInAreaSensorEvent::PlayerType' has a wrong offset!");

// Function EndGame.EndBattleAIController.OnIncrementBattleCountPerID
// 0x0018 (0x0018 - 0x0000)
struct EndBattleAIController_OnIncrementBattleCountPerID final
{
public:
	class FName                                   TargetCharaName;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndBattleCountLogType                        Type;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ID;                                                // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_OnIncrementBattleCountPerID) == 0x000004, "Wrong alignment on EndBattleAIController_OnIncrementBattleCountPerID");
static_assert(sizeof(EndBattleAIController_OnIncrementBattleCountPerID) == 0x000018, "Wrong size on EndBattleAIController_OnIncrementBattleCountPerID");
static_assert(offsetof(EndBattleAIController_OnIncrementBattleCountPerID, TargetCharaName) == 0x000000, "Member 'EndBattleAIController_OnIncrementBattleCountPerID::TargetCharaName' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OnIncrementBattleCountPerID, Type) == 0x000008, "Member 'EndBattleAIController_OnIncrementBattleCountPerID::Type' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OnIncrementBattleCountPerID, ID) == 0x00000C, "Member 'EndBattleAIController_OnIncrementBattleCountPerID::ID' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OnIncrementBattleCountPerID, Count) == 0x000014, "Member 'EndBattleAIController_OnIncrementBattleCountPerID::Count' has a wrong offset!");

// Function EndGame.EndBattleAIController.OnInterceptAbility
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAIController_OnInterceptAbility final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_OnInterceptAbility) == 0x000004, "Wrong alignment on EndBattleAIController_OnInterceptAbility");
static_assert(sizeof(EndBattleAIController_OnInterceptAbility) == 0x000008, "Wrong size on EndBattleAIController_OnInterceptAbility");
static_assert(offsetof(EndBattleAIController_OnInterceptAbility, InName) == 0x000000, "Member 'EndBattleAIController_OnInterceptAbility::InName' has a wrong offset!");

// Function EndGame.EndBattleAIController.OnIsHitDamage
// 0x0020 (0x0020 - 0x0000)
struct EndBattleAIController_OnIsHitDamage final
{
public:
	class AEndCharacter*                          causerChara;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AbilityID;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         abilityUniqueID;                                   // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DamageSourceID;                                    // 0x0014(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAIController_OnIsHitDamage) == 0x000008, "Wrong alignment on EndBattleAIController_OnIsHitDamage");
static_assert(sizeof(EndBattleAIController_OnIsHitDamage) == 0x000020, "Wrong size on EndBattleAIController_OnIsHitDamage");
static_assert(offsetof(EndBattleAIController_OnIsHitDamage, causerChara) == 0x000000, "Member 'EndBattleAIController_OnIsHitDamage::causerChara' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OnIsHitDamage, AbilityID) == 0x000008, "Member 'EndBattleAIController_OnIsHitDamage::AbilityID' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OnIsHitDamage, abilityUniqueID) == 0x000010, "Member 'EndBattleAIController_OnIsHitDamage::abilityUniqueID' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OnIsHitDamage, DamageSourceID) == 0x000014, "Member 'EndBattleAIController_OnIsHitDamage::DamageSourceID' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OnIsHitDamage, ReturnValue) == 0x00001C, "Member 'EndBattleAIController_OnIsHitDamage::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.OnKilled
// 0x0020 (0x0020 - 0x0000)
struct EndBattleAIController_OnKilled final
{
public:
	int32                                         Damage;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AEndCharacter*                          InTarget;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InName;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InBind;                                            // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAIController_OnKilled) == 0x000008, "Wrong alignment on EndBattleAIController_OnKilled");
static_assert(sizeof(EndBattleAIController_OnKilled) == 0x000020, "Wrong size on EndBattleAIController_OnKilled");
static_assert(offsetof(EndBattleAIController_OnKilled, Damage) == 0x000000, "Member 'EndBattleAIController_OnKilled::Damage' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OnKilled, InTarget) == 0x000008, "Member 'EndBattleAIController_OnKilled::InTarget' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OnKilled, InName) == 0x000010, "Member 'EndBattleAIController_OnKilled::InName' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OnKilled, InBind) == 0x000018, "Member 'EndBattleAIController_OnKilled::InBind' has a wrong offset!");

// Function EndGame.EndBattleAIController.OnMetaEventNotifyEnemyAbility
// 0x0020 (0x0020 - 0x0000)
struct EndBattleAIController_OnMetaEventNotifyEnemyAbility final
{
public:
	class AEndCharacter*                          InSender;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AEndCharacter*                          InReceiver;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InName;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InNormal;                                          // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAIController_OnMetaEventNotifyEnemyAbility) == 0x000008, "Wrong alignment on EndBattleAIController_OnMetaEventNotifyEnemyAbility");
static_assert(sizeof(EndBattleAIController_OnMetaEventNotifyEnemyAbility) == 0x000020, "Wrong size on EndBattleAIController_OnMetaEventNotifyEnemyAbility");
static_assert(offsetof(EndBattleAIController_OnMetaEventNotifyEnemyAbility, InSender) == 0x000000, "Member 'EndBattleAIController_OnMetaEventNotifyEnemyAbility::InSender' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OnMetaEventNotifyEnemyAbility, InReceiver) == 0x000008, "Member 'EndBattleAIController_OnMetaEventNotifyEnemyAbility::InReceiver' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OnMetaEventNotifyEnemyAbility, InName) == 0x000010, "Member 'EndBattleAIController_OnMetaEventNotifyEnemyAbility::InName' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OnMetaEventNotifyEnemyAbility, InNormal) == 0x000018, "Member 'EndBattleAIController_OnMetaEventNotifyEnemyAbility::InNormal' has a wrong offset!");

// Function EndGame.EndBattleAIController.OnMetaEventTakeDamage
// 0x0030 (0x0030 - 0x0000)
struct EndBattleAIController_OnMetaEventTakeDamage final
{
public:
	int32                                         Damage;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AEndCharacter*                          InSender;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AEndCharacter*                          InReceiver;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InName;                                            // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InBind;                                            // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InGuard;                                           // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InDodge;                                           // 0x0022(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23[0x1];                                       // 0x0023(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   InBoneName;                                        // 0x0024(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InAttributeWeak;                                   // 0x002C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InHeal;                                            // 0x002D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2E[0x2];                                       // 0x002E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAIController_OnMetaEventTakeDamage) == 0x000008, "Wrong alignment on EndBattleAIController_OnMetaEventTakeDamage");
static_assert(sizeof(EndBattleAIController_OnMetaEventTakeDamage) == 0x000030, "Wrong size on EndBattleAIController_OnMetaEventTakeDamage");
static_assert(offsetof(EndBattleAIController_OnMetaEventTakeDamage, Damage) == 0x000000, "Member 'EndBattleAIController_OnMetaEventTakeDamage::Damage' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OnMetaEventTakeDamage, InSender) == 0x000008, "Member 'EndBattleAIController_OnMetaEventTakeDamage::InSender' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OnMetaEventTakeDamage, InReceiver) == 0x000010, "Member 'EndBattleAIController_OnMetaEventTakeDamage::InReceiver' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OnMetaEventTakeDamage, InName) == 0x000018, "Member 'EndBattleAIController_OnMetaEventTakeDamage::InName' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OnMetaEventTakeDamage, InBind) == 0x000020, "Member 'EndBattleAIController_OnMetaEventTakeDamage::InBind' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OnMetaEventTakeDamage, InGuard) == 0x000021, "Member 'EndBattleAIController_OnMetaEventTakeDamage::InGuard' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OnMetaEventTakeDamage, InDodge) == 0x000022, "Member 'EndBattleAIController_OnMetaEventTakeDamage::InDodge' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OnMetaEventTakeDamage, InBoneName) == 0x000024, "Member 'EndBattleAIController_OnMetaEventTakeDamage::InBoneName' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OnMetaEventTakeDamage, InAttributeWeak) == 0x00002C, "Member 'EndBattleAIController_OnMetaEventTakeDamage::InAttributeWeak' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OnMetaEventTakeDamage, InHeal) == 0x00002D, "Member 'EndBattleAIController_OnMetaEventTakeDamage::InHeal' has a wrong offset!");

// Function EndGame.EndBattleAIController.OnMetaMessage
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAIController_OnMetaMessage final
{
public:
	class FString                                 InMessage;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_OnMetaMessage) == 0x000008, "Wrong alignment on EndBattleAIController_OnMetaMessage");
static_assert(sizeof(EndBattleAIController_OnMetaMessage) == 0x000010, "Wrong size on EndBattleAIController_OnMetaMessage");
static_assert(offsetof(EndBattleAIController_OnMetaMessage, InMessage) == 0x000000, "Member 'EndBattleAIController_OnMetaMessage::InMessage' has a wrong offset!");

// Function EndGame.EndBattleAIController.OnMetaMessageAboutCharacter
// 0x0018 (0x0018 - 0x0000)
struct EndBattleAIController_OnMetaMessageAboutCharacter final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InMessage;                                         // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_OnMetaMessageAboutCharacter) == 0x000008, "Wrong alignment on EndBattleAIController_OnMetaMessageAboutCharacter");
static_assert(sizeof(EndBattleAIController_OnMetaMessageAboutCharacter) == 0x000018, "Wrong size on EndBattleAIController_OnMetaMessageAboutCharacter");
static_assert(offsetof(EndBattleAIController_OnMetaMessageAboutCharacter, InChara) == 0x000000, "Member 'EndBattleAIController_OnMetaMessageAboutCharacter::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OnMetaMessageAboutCharacter, InMessage) == 0x000008, "Member 'EndBattleAIController_OnMetaMessageAboutCharacter::InMessage' has a wrong offset!");

// Function EndGame.EndBattleAIController.OnMotionMessage
// 0x0018 (0x0018 - 0x0000)
struct EndBattleAIController_OnMotionMessage final
{
public:
	class FName                                   InMotionName;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InName;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InIntValue;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InFloatValue;                                      // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_OnMotionMessage) == 0x000004, "Wrong alignment on EndBattleAIController_OnMotionMessage");
static_assert(sizeof(EndBattleAIController_OnMotionMessage) == 0x000018, "Wrong size on EndBattleAIController_OnMotionMessage");
static_assert(offsetof(EndBattleAIController_OnMotionMessage, InMotionName) == 0x000000, "Member 'EndBattleAIController_OnMotionMessage::InMotionName' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OnMotionMessage, InName) == 0x000008, "Member 'EndBattleAIController_OnMotionMessage::InName' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OnMotionMessage, InIntValue) == 0x000010, "Member 'EndBattleAIController_OnMotionMessage::InIntValue' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OnMotionMessage, InFloatValue) == 0x000014, "Member 'EndBattleAIController_OnMotionMessage::InFloatValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.OnMotionStateMessageBegin
// 0x001C (0x001C - 0x0000)
struct EndBattleAIController_OnMotionStateMessageBegin final
{
public:
	class FName                                   InMotionName;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InName;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InIntValue;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InFloatValue;                                      // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InTotalDuration;                                   // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_OnMotionStateMessageBegin) == 0x000004, "Wrong alignment on EndBattleAIController_OnMotionStateMessageBegin");
static_assert(sizeof(EndBattleAIController_OnMotionStateMessageBegin) == 0x00001C, "Wrong size on EndBattleAIController_OnMotionStateMessageBegin");
static_assert(offsetof(EndBattleAIController_OnMotionStateMessageBegin, InMotionName) == 0x000000, "Member 'EndBattleAIController_OnMotionStateMessageBegin::InMotionName' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OnMotionStateMessageBegin, InName) == 0x000008, "Member 'EndBattleAIController_OnMotionStateMessageBegin::InName' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OnMotionStateMessageBegin, InIntValue) == 0x000010, "Member 'EndBattleAIController_OnMotionStateMessageBegin::InIntValue' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OnMotionStateMessageBegin, InFloatValue) == 0x000014, "Member 'EndBattleAIController_OnMotionStateMessageBegin::InFloatValue' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OnMotionStateMessageBegin, InTotalDuration) == 0x000018, "Member 'EndBattleAIController_OnMotionStateMessageBegin::InTotalDuration' has a wrong offset!");

// Function EndGame.EndBattleAIController.OnMotionStateMessageEnd
// 0x0018 (0x0018 - 0x0000)
struct EndBattleAIController_OnMotionStateMessageEnd final
{
public:
	class FName                                   InMotionName;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InName;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InIntValue;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InFloatValue;                                      // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_OnMotionStateMessageEnd) == 0x000004, "Wrong alignment on EndBattleAIController_OnMotionStateMessageEnd");
static_assert(sizeof(EndBattleAIController_OnMotionStateMessageEnd) == 0x000018, "Wrong size on EndBattleAIController_OnMotionStateMessageEnd");
static_assert(offsetof(EndBattleAIController_OnMotionStateMessageEnd, InMotionName) == 0x000000, "Member 'EndBattleAIController_OnMotionStateMessageEnd::InMotionName' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OnMotionStateMessageEnd, InName) == 0x000008, "Member 'EndBattleAIController_OnMotionStateMessageEnd::InName' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OnMotionStateMessageEnd, InIntValue) == 0x000010, "Member 'EndBattleAIController_OnMotionStateMessageEnd::InIntValue' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OnMotionStateMessageEnd, InFloatValue) == 0x000014, "Member 'EndBattleAIController_OnMotionStateMessageEnd::InFloatValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.OnMotionStateMessageUpdate
// 0x0020 (0x0020 - 0x0000)
struct EndBattleAIController_OnMotionStateMessageUpdate final
{
public:
	class FName                                   InMotionName;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InName;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InIntValue;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InFloatValue;                                      // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InProgress;                                        // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LatestContactWall;                                 // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LatestContact;                                     // 0x001D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAIController_OnMotionStateMessageUpdate) == 0x000004, "Wrong alignment on EndBattleAIController_OnMotionStateMessageUpdate");
static_assert(sizeof(EndBattleAIController_OnMotionStateMessageUpdate) == 0x000020, "Wrong size on EndBattleAIController_OnMotionStateMessageUpdate");
static_assert(offsetof(EndBattleAIController_OnMotionStateMessageUpdate, InMotionName) == 0x000000, "Member 'EndBattleAIController_OnMotionStateMessageUpdate::InMotionName' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OnMotionStateMessageUpdate, InName) == 0x000008, "Member 'EndBattleAIController_OnMotionStateMessageUpdate::InName' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OnMotionStateMessageUpdate, InIntValue) == 0x000010, "Member 'EndBattleAIController_OnMotionStateMessageUpdate::InIntValue' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OnMotionStateMessageUpdate, InFloatValue) == 0x000014, "Member 'EndBattleAIController_OnMotionStateMessageUpdate::InFloatValue' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OnMotionStateMessageUpdate, InProgress) == 0x000018, "Member 'EndBattleAIController_OnMotionStateMessageUpdate::InProgress' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OnMotionStateMessageUpdate, LatestContactWall) == 0x00001C, "Member 'EndBattleAIController_OnMotionStateMessageUpdate::LatestContactWall' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OnMotionStateMessageUpdate, LatestContact) == 0x00001D, "Member 'EndBattleAIController_OnMotionStateMessageUpdate::LatestContact' has a wrong offset!");

// Function EndGame.EndBattleAIController.OnNotifyEnemyAbility
// 0x0018 (0x0018 - 0x0000)
struct EndBattleAIController_OnNotifyEnemyAbility final
{
public:
	class AEndCharacter*                          InEnemy;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InName;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InNormal;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAIController_OnNotifyEnemyAbility) == 0x000008, "Wrong alignment on EndBattleAIController_OnNotifyEnemyAbility");
static_assert(sizeof(EndBattleAIController_OnNotifyEnemyAbility) == 0x000018, "Wrong size on EndBattleAIController_OnNotifyEnemyAbility");
static_assert(offsetof(EndBattleAIController_OnNotifyEnemyAbility, InEnemy) == 0x000000, "Member 'EndBattleAIController_OnNotifyEnemyAbility::InEnemy' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OnNotifyEnemyAbility, InName) == 0x000008, "Member 'EndBattleAIController_OnNotifyEnemyAbility::InName' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OnNotifyEnemyAbility, InNormal) == 0x000010, "Member 'EndBattleAIController_OnNotifyEnemyAbility::InNormal' has a wrong offset!");

// Function EndGame.EndBattleAIController.OnOrder
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAIController_OnOrder final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InMessage;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_OnOrder) == 0x000008, "Wrong alignment on EndBattleAIController_OnOrder");
static_assert(sizeof(EndBattleAIController_OnOrder) == 0x000010, "Wrong size on EndBattleAIController_OnOrder");
static_assert(offsetof(EndBattleAIController_OnOrder, InChara) == 0x000000, "Member 'EndBattleAIController_OnOrder::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OnOrder, InMessage) == 0x000008, "Member 'EndBattleAIController_OnOrder::InMessage' has a wrong offset!");

// Function EndGame.EndBattleAIController.OnOutAreaSensorEvent
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAIController_OnOutAreaSensorEvent final
{
public:
	EPlayerType                                   PlayerType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_OnOutAreaSensorEvent) == 0x000001, "Wrong alignment on EndBattleAIController_OnOutAreaSensorEvent");
static_assert(sizeof(EndBattleAIController_OnOutAreaSensorEvent) == 0x000001, "Wrong size on EndBattleAIController_OnOutAreaSensorEvent");
static_assert(offsetof(EndBattleAIController_OnOutAreaSensorEvent, PlayerType) == 0x000000, "Member 'EndBattleAIController_OnOutAreaSensorEvent::PlayerType' has a wrong offset!");

// Function EndGame.EndBattleAIController.OnOverlapTriggerBox
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAIController_OnOverlapTriggerBox final
{
public:
	class FName                                   ObjectName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_OnOverlapTriggerBox) == 0x000004, "Wrong alignment on EndBattleAIController_OnOverlapTriggerBox");
static_assert(sizeof(EndBattleAIController_OnOverlapTriggerBox) == 0x000008, "Wrong size on EndBattleAIController_OnOverlapTriggerBox");
static_assert(offsetof(EndBattleAIController_OnOverlapTriggerBox, ObjectName) == 0x000000, "Member 'EndBattleAIController_OnOverlapTriggerBox::ObjectName' has a wrong offset!");

// Function EndGame.EndBattleAIController.OnPartsBreak
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAIController_OnPartsBreak final
{
public:
	class FName                                   partsID;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_OnPartsBreak) == 0x000004, "Wrong alignment on EndBattleAIController_OnPartsBreak");
static_assert(sizeof(EndBattleAIController_OnPartsBreak) == 0x000008, "Wrong size on EndBattleAIController_OnPartsBreak");
static_assert(offsetof(EndBattleAIController_OnPartsBreak, partsID) == 0x000000, "Member 'EndBattleAIController_OnPartsBreak::partsID' has a wrong offset!");

// Function EndGame.EndBattleAIController.OnPassiveUpdate
// 0x000C (0x000C - 0x0000)
struct EndBattleAIController_OnPassiveUpdate final
{
public:
	EEndAiBattleRole                              InRole;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InStep;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaTime;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_OnPassiveUpdate) == 0x000004, "Wrong alignment on EndBattleAIController_OnPassiveUpdate");
static_assert(sizeof(EndBattleAIController_OnPassiveUpdate) == 0x00000C, "Wrong size on EndBattleAIController_OnPassiveUpdate");
static_assert(offsetof(EndBattleAIController_OnPassiveUpdate, InRole) == 0x000000, "Member 'EndBattleAIController_OnPassiveUpdate::InRole' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OnPassiveUpdate, InStep) == 0x000004, "Member 'EndBattleAIController_OnPassiveUpdate::InStep' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OnPassiveUpdate, DeltaTime) == 0x000008, "Member 'EndBattleAIController_OnPassiveUpdate::DeltaTime' has a wrong offset!");

// Function EndGame.EndBattleAIController.OnPinchCondition
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAIController_OnPinchCondition final
{
public:
	EPlayerType                                   playerTyoe;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_OnPinchCondition) == 0x000001, "Wrong alignment on EndBattleAIController_OnPinchCondition");
static_assert(sizeof(EndBattleAIController_OnPinchCondition) == 0x000001, "Wrong size on EndBattleAIController_OnPinchCondition");
static_assert(offsetof(EndBattleAIController_OnPinchCondition, playerTyoe) == 0x000000, "Member 'EndBattleAIController_OnPinchCondition::playerTyoe' has a wrong offset!");

// Function EndGame.EndBattleAIController.OnPreCalcDamage
// 0x0018 (0x0018 - 0x0000)
struct EndBattleAIController_OnPreCalcDamage final
{
public:
	class AEndCharacter*                          causerCharacter;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   abilityName;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DamageSourceID;                                    // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_OnPreCalcDamage) == 0x000008, "Wrong alignment on EndBattleAIController_OnPreCalcDamage");
static_assert(sizeof(EndBattleAIController_OnPreCalcDamage) == 0x000018, "Wrong size on EndBattleAIController_OnPreCalcDamage");
static_assert(offsetof(EndBattleAIController_OnPreCalcDamage, causerCharacter) == 0x000000, "Member 'EndBattleAIController_OnPreCalcDamage::causerCharacter' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OnPreCalcDamage, abilityName) == 0x000008, "Member 'EndBattleAIController_OnPreCalcDamage::abilityName' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OnPreCalcDamage, DamageSourceID) == 0x000010, "Member 'EndBattleAIController_OnPreCalcDamage::DamageSourceID' has a wrong offset!");

// Function EndGame.EndBattleAIController.OnPrepareAbility
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAIController_OnPrepareAbility final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_OnPrepareAbility) == 0x000004, "Wrong alignment on EndBattleAIController_OnPrepareAbility");
static_assert(sizeof(EndBattleAIController_OnPrepareAbility) == 0x000008, "Wrong size on EndBattleAIController_OnPrepareAbility");
static_assert(offsetof(EndBattleAIController_OnPrepareAbility, InName) == 0x000000, "Member 'EndBattleAIController_OnPrepareAbility::InName' has a wrong offset!");

// Function EndGame.EndBattleAIController.OnPreparingAbility
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAIController_OnPreparingAbility final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_OnPreparingAbility) == 0x000004, "Wrong alignment on EndBattleAIController_OnPreparingAbility");
static_assert(sizeof(EndBattleAIController_OnPreparingAbility) == 0x000008, "Wrong size on EndBattleAIController_OnPreparingAbility");
static_assert(offsetof(EndBattleAIController_OnPreparingAbility, InName) == 0x000000, "Member 'EndBattleAIController_OnPreparingAbility::InName' has a wrong offset!");

// Function EndGame.EndBattleAIController.OnPressedDodgeButtonFromSyncAction
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAIController_OnPressedDodgeButtonFromSyncAction final
{
public:
	float                                         totalPower;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxPower;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_OnPressedDodgeButtonFromSyncAction) == 0x000004, "Wrong alignment on EndBattleAIController_OnPressedDodgeButtonFromSyncAction");
static_assert(sizeof(EndBattleAIController_OnPressedDodgeButtonFromSyncAction) == 0x000008, "Wrong size on EndBattleAIController_OnPressedDodgeButtonFromSyncAction");
static_assert(offsetof(EndBattleAIController_OnPressedDodgeButtonFromSyncAction, totalPower) == 0x000000, "Member 'EndBattleAIController_OnPressedDodgeButtonFromSyncAction::totalPower' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OnPressedDodgeButtonFromSyncAction, MaxPower) == 0x000004, "Member 'EndBattleAIController_OnPressedDodgeButtonFromSyncAction::MaxPower' has a wrong offset!");

// Function EndGame.EndBattleAIController.OnPreTakeDamage
// 0x0040 (0x0040 - 0x0000)
struct EndBattleAIController_OnPreTakeDamage final
{
public:
	float                                         justHitRotYaw;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AEndCharacter*                          OwnerCharacter;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InName;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   hitBoneName;                                       // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DamageSourceID;                                    // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                hitPosition;                                       // 0x0028(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Damage;                                            // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InGuard;                                           // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAIController_OnPreTakeDamage) == 0x000008, "Wrong alignment on EndBattleAIController_OnPreTakeDamage");
static_assert(sizeof(EndBattleAIController_OnPreTakeDamage) == 0x000040, "Wrong size on EndBattleAIController_OnPreTakeDamage");
static_assert(offsetof(EndBattleAIController_OnPreTakeDamage, justHitRotYaw) == 0x000000, "Member 'EndBattleAIController_OnPreTakeDamage::justHitRotYaw' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OnPreTakeDamage, OwnerCharacter) == 0x000008, "Member 'EndBattleAIController_OnPreTakeDamage::OwnerCharacter' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OnPreTakeDamage, InName) == 0x000010, "Member 'EndBattleAIController_OnPreTakeDamage::InName' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OnPreTakeDamage, hitBoneName) == 0x000018, "Member 'EndBattleAIController_OnPreTakeDamage::hitBoneName' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OnPreTakeDamage, DamageSourceID) == 0x000020, "Member 'EndBattleAIController_OnPreTakeDamage::DamageSourceID' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OnPreTakeDamage, hitPosition) == 0x000028, "Member 'EndBattleAIController_OnPreTakeDamage::hitPosition' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OnPreTakeDamage, Damage) == 0x000034, "Member 'EndBattleAIController_OnPreTakeDamage::Damage' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OnPreTakeDamage, InGuard) == 0x000038, "Member 'EndBattleAIController_OnPreTakeDamage::InGuard' has a wrong offset!");

// Function EndGame.EndBattleAIController.OnReactionSensing
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAIController_OnReactionSensing final
{
public:
	class AEndCharacter*                          causerChara;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndBattleReactionInfluenceType               ReactionInfluenceType;                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndBattleAttackDirectionType                 AttackDirectionType;                               // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndBattleAbilityCommandType                  CommandType;                                       // 0x000A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndBattleAttributeType                       DmgSrcAttributeType;                               // 0x000B(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CutValue;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_OnReactionSensing) == 0x000008, "Wrong alignment on EndBattleAIController_OnReactionSensing");
static_assert(sizeof(EndBattleAIController_OnReactionSensing) == 0x000010, "Wrong size on EndBattleAIController_OnReactionSensing");
static_assert(offsetof(EndBattleAIController_OnReactionSensing, causerChara) == 0x000000, "Member 'EndBattleAIController_OnReactionSensing::causerChara' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OnReactionSensing, ReactionInfluenceType) == 0x000008, "Member 'EndBattleAIController_OnReactionSensing::ReactionInfluenceType' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OnReactionSensing, AttackDirectionType) == 0x000009, "Member 'EndBattleAIController_OnReactionSensing::AttackDirectionType' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OnReactionSensing, CommandType) == 0x00000A, "Member 'EndBattleAIController_OnReactionSensing::CommandType' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OnReactionSensing, DmgSrcAttributeType) == 0x00000B, "Member 'EndBattleAIController_OnReactionSensing::DmgSrcAttributeType' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OnReactionSensing, CutValue) == 0x00000C, "Member 'EndBattleAIController_OnReactionSensing::CutValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.OnReactionSensingAbilityInvoke
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAIController_OnReactionSensingAbilityInvoke final
{
public:
	class AEndCharacter*                          causerChara;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndBattleReactionInfluenceType               ReactionInfluenceType;                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndBattleAttackDirectionType                 AttackDirectionType;                               // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndBattleAbilityCommandType                  CommandType;                                       // 0x000A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAIController_OnReactionSensingAbilityInvoke) == 0x000008, "Wrong alignment on EndBattleAIController_OnReactionSensingAbilityInvoke");
static_assert(sizeof(EndBattleAIController_OnReactionSensingAbilityInvoke) == 0x000010, "Wrong size on EndBattleAIController_OnReactionSensingAbilityInvoke");
static_assert(offsetof(EndBattleAIController_OnReactionSensingAbilityInvoke, causerChara) == 0x000000, "Member 'EndBattleAIController_OnReactionSensingAbilityInvoke::causerChara' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OnReactionSensingAbilityInvoke, ReactionInfluenceType) == 0x000008, "Member 'EndBattleAIController_OnReactionSensingAbilityInvoke::ReactionInfluenceType' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OnReactionSensingAbilityInvoke, AttackDirectionType) == 0x000009, "Member 'EndBattleAIController_OnReactionSensingAbilityInvoke::AttackDirectionType' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OnReactionSensingAbilityInvoke, CommandType) == 0x00000A, "Member 'EndBattleAIController_OnReactionSensingAbilityInvoke::CommandType' has a wrong offset!");

// Function EndGame.EndBattleAIController.OnReactionSensingAbilitySequenceInvoke
// 0x0020 (0x0020 - 0x0000)
struct EndBattleAIController_OnReactionSensingAbilitySequenceInvoke final
{
public:
	class AEndCharacter*                          causerChara;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndBattleReactionInfluenceType               ReactionInfluenceType;                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndBattleAttackDirectionType                 AttackDirectionType;                               // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndBattleAbilityCommandType                  CommandType;                                       // 0x000A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	const class UAnimSequence*                    AnimSequence;                                      // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartTime;                                         // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAIController_OnReactionSensingAbilitySequenceInvoke) == 0x000008, "Wrong alignment on EndBattleAIController_OnReactionSensingAbilitySequenceInvoke");
static_assert(sizeof(EndBattleAIController_OnReactionSensingAbilitySequenceInvoke) == 0x000020, "Wrong size on EndBattleAIController_OnReactionSensingAbilitySequenceInvoke");
static_assert(offsetof(EndBattleAIController_OnReactionSensingAbilitySequenceInvoke, causerChara) == 0x000000, "Member 'EndBattleAIController_OnReactionSensingAbilitySequenceInvoke::causerChara' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OnReactionSensingAbilitySequenceInvoke, ReactionInfluenceType) == 0x000008, "Member 'EndBattleAIController_OnReactionSensingAbilitySequenceInvoke::ReactionInfluenceType' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OnReactionSensingAbilitySequenceInvoke, AttackDirectionType) == 0x000009, "Member 'EndBattleAIController_OnReactionSensingAbilitySequenceInvoke::AttackDirectionType' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OnReactionSensingAbilitySequenceInvoke, CommandType) == 0x00000A, "Member 'EndBattleAIController_OnReactionSensingAbilitySequenceInvoke::CommandType' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OnReactionSensingAbilitySequenceInvoke, AnimSequence) == 0x000010, "Member 'EndBattleAIController_OnReactionSensingAbilitySequenceInvoke::AnimSequence' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OnReactionSensingAbilitySequenceInvoke, StartTime) == 0x000018, "Member 'EndBattleAIController_OnReactionSensingAbilitySequenceInvoke::StartTime' has a wrong offset!");

// Function EndGame.EndBattleAIController.OnRemoveStatusChange
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAIController_OnRemoveStatusChange final
{
public:
	EEndBattleStatusChangeType                    Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_OnRemoveStatusChange) == 0x000001, "Wrong alignment on EndBattleAIController_OnRemoveStatusChange");
static_assert(sizeof(EndBattleAIController_OnRemoveStatusChange) == 0x000001, "Wrong size on EndBattleAIController_OnRemoveStatusChange");
static_assert(offsetof(EndBattleAIController_OnRemoveStatusChange, Type) == 0x000000, "Member 'EndBattleAIController_OnRemoveStatusChange::Type' has a wrong offset!");

// Function EndGame.EndBattleAIController.OnRunningRegisterMove
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAIController_OnRunningRegisterMove final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_OnRunningRegisterMove) == 0x000004, "Wrong alignment on EndBattleAIController_OnRunningRegisterMove");
static_assert(sizeof(EndBattleAIController_OnRunningRegisterMove) == 0x000008, "Wrong size on EndBattleAIController_OnRunningRegisterMove");
static_assert(offsetof(EndBattleAIController_OnRunningRegisterMove, InName) == 0x000000, "Member 'EndBattleAIController_OnRunningRegisterMove::InName' has a wrong offset!");

// Function EndGame.EndBattleAIController.OnSpecialStateEffectEvent
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAIController_OnSpecialStateEffectEvent final
{
public:
	class FName                                   EventName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_OnSpecialStateEffectEvent) == 0x000004, "Wrong alignment on EndBattleAIController_OnSpecialStateEffectEvent");
static_assert(sizeof(EndBattleAIController_OnSpecialStateEffectEvent) == 0x000008, "Wrong size on EndBattleAIController_OnSpecialStateEffectEvent");
static_assert(offsetof(EndBattleAIController_OnSpecialStateEffectEvent, EventName) == 0x000000, "Member 'EndBattleAIController_OnSpecialStateEffectEvent::EventName' has a wrong offset!");

// Function EndGame.EndBattleAIController.OnSpecialStatusChange
// 0x0048 (0x0048 - 0x0000)
struct EndBattleAIController_OnSpecialStatusChange final
{
public:
	class FName                                   SpecialStatusChangeID;                             // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndBattleSpecialStatusChangeType             Type;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ChangeID;                                          // 0x000C(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 Params_0;                                          // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class FName>                           ParamIDs;                                          // 0x0028(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         ParamActors;                                       // 0x0038(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_OnSpecialStatusChange) == 0x000008, "Wrong alignment on EndBattleAIController_OnSpecialStatusChange");
static_assert(sizeof(EndBattleAIController_OnSpecialStatusChange) == 0x000048, "Wrong size on EndBattleAIController_OnSpecialStatusChange");
static_assert(offsetof(EndBattleAIController_OnSpecialStatusChange, SpecialStatusChangeID) == 0x000000, "Member 'EndBattleAIController_OnSpecialStatusChange::SpecialStatusChangeID' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OnSpecialStatusChange, Type) == 0x000008, "Member 'EndBattleAIController_OnSpecialStatusChange::Type' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OnSpecialStatusChange, ChangeID) == 0x00000C, "Member 'EndBattleAIController_OnSpecialStatusChange::ChangeID' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OnSpecialStatusChange, Params_0) == 0x000018, "Member 'EndBattleAIController_OnSpecialStatusChange::Params_0' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OnSpecialStatusChange, ParamIDs) == 0x000028, "Member 'EndBattleAIController_OnSpecialStatusChange::ParamIDs' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OnSpecialStatusChange, ParamActors) == 0x000038, "Member 'EndBattleAIController_OnSpecialStatusChange::ParamActors' has a wrong offset!");

// Function EndGame.EndBattleAIController.OnSuspendAbility
// 0x000C (0x000C - 0x0000)
struct EndBattleAIController_OnSuspendAbility final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndAiAbilitySuspendFactor                    InFactor;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndAiAbilitySuspendTiming                    InTiming;                                          // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAIController_OnSuspendAbility) == 0x000004, "Wrong alignment on EndBattleAIController_OnSuspendAbility");
static_assert(sizeof(EndBattleAIController_OnSuspendAbility) == 0x00000C, "Wrong size on EndBattleAIController_OnSuspendAbility");
static_assert(offsetof(EndBattleAIController_OnSuspendAbility, InName) == 0x000000, "Member 'EndBattleAIController_OnSuspendAbility::InName' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OnSuspendAbility, InFactor) == 0x000008, "Member 'EndBattleAIController_OnSuspendAbility::InFactor' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OnSuspendAbility, InTiming) == 0x000009, "Member 'EndBattleAIController_OnSuspendAbility::InTiming' has a wrong offset!");

// Function EndGame.EndBattleAIController.OnSuspendRegisterTurn
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAIController_OnSuspendRegisterTurn final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_OnSuspendRegisterTurn) == 0x000004, "Wrong alignment on EndBattleAIController_OnSuspendRegisterTurn");
static_assert(sizeof(EndBattleAIController_OnSuspendRegisterTurn) == 0x000008, "Wrong size on EndBattleAIController_OnSuspendRegisterTurn");
static_assert(offsetof(EndBattleAIController_OnSuspendRegisterTurn, InName) == 0x000000, "Member 'EndBattleAIController_OnSuspendRegisterTurn::InName' has a wrong offset!");

// Function EndGame.EndBattleAIController.OnSyncActionChange
// 0x0018 (0x0018 - 0x0000)
struct EndBattleAIController_OnSyncActionChange final
{
public:
	class FName                                   syncActionID;                                      // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ChangeID;                                          // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DetachDamageSourceID;                              // 0x0010(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_OnSyncActionChange) == 0x000004, "Wrong alignment on EndBattleAIController_OnSyncActionChange");
static_assert(sizeof(EndBattleAIController_OnSyncActionChange) == 0x000018, "Wrong size on EndBattleAIController_OnSyncActionChange");
static_assert(offsetof(EndBattleAIController_OnSyncActionChange, syncActionID) == 0x000000, "Member 'EndBattleAIController_OnSyncActionChange::syncActionID' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OnSyncActionChange, ChangeID) == 0x000008, "Member 'EndBattleAIController_OnSyncActionChange::ChangeID' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OnSyncActionChange, DetachDamageSourceID) == 0x000010, "Member 'EndBattleAIController_OnSyncActionChange::DetachDamageSourceID' has a wrong offset!");

// Function EndGame.EndBattleAIController.OnSystemMessage
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAIController_OnSystemMessage final
{
public:
	class FString                                 InMessage;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_OnSystemMessage) == 0x000008, "Wrong alignment on EndBattleAIController_OnSystemMessage");
static_assert(sizeof(EndBattleAIController_OnSystemMessage) == 0x000010, "Wrong size on EndBattleAIController_OnSystemMessage");
static_assert(offsetof(EndBattleAIController_OnSystemMessage, InMessage) == 0x000000, "Member 'EndBattleAIController_OnSystemMessage::InMessage' has a wrong offset!");

// Function EndGame.EndBattleAIController.OnTakeAbilityInvoke
// 0x0028 (0x0028 - 0x0000)
struct EndBattleAIController_OnTakeAbilityInvoke final
{
public:
	class AEndCharacter*                          causerChara;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   abilityName;                                       // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndBattleAbilityCommandType                  AbilityCommandType;                                // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           AnimationNameList;                                 // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_OnTakeAbilityInvoke) == 0x000008, "Wrong alignment on EndBattleAIController_OnTakeAbilityInvoke");
static_assert(sizeof(EndBattleAIController_OnTakeAbilityInvoke) == 0x000028, "Wrong size on EndBattleAIController_OnTakeAbilityInvoke");
static_assert(offsetof(EndBattleAIController_OnTakeAbilityInvoke, causerChara) == 0x000000, "Member 'EndBattleAIController_OnTakeAbilityInvoke::causerChara' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OnTakeAbilityInvoke, abilityName) == 0x000008, "Member 'EndBattleAIController_OnTakeAbilityInvoke::abilityName' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OnTakeAbilityInvoke, AbilityCommandType) == 0x000010, "Member 'EndBattleAIController_OnTakeAbilityInvoke::AbilityCommandType' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OnTakeAbilityInvoke, AnimationNameList) == 0x000018, "Member 'EndBattleAIController_OnTakeAbilityInvoke::AnimationNameList' has a wrong offset!");

// Function EndGame.EndBattleAIController.OnTakeAbilitySequenceInvoke
// 0x0028 (0x0028 - 0x0000)
struct EndBattleAIController_OnTakeAbilitySequenceInvoke final
{
public:
	class AEndCharacter*                          causerChara;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   abilityName;                                       // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AnimName;                                          // 0x0010(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UAnimSequence*                    AnimSequence;                                      // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartTime;                                         // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAIController_OnTakeAbilitySequenceInvoke) == 0x000008, "Wrong alignment on EndBattleAIController_OnTakeAbilitySequenceInvoke");
static_assert(sizeof(EndBattleAIController_OnTakeAbilitySequenceInvoke) == 0x000028, "Wrong size on EndBattleAIController_OnTakeAbilitySequenceInvoke");
static_assert(offsetof(EndBattleAIController_OnTakeAbilitySequenceInvoke, causerChara) == 0x000000, "Member 'EndBattleAIController_OnTakeAbilitySequenceInvoke::causerChara' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OnTakeAbilitySequenceInvoke, abilityName) == 0x000008, "Member 'EndBattleAIController_OnTakeAbilitySequenceInvoke::abilityName' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OnTakeAbilitySequenceInvoke, AnimName) == 0x000010, "Member 'EndBattleAIController_OnTakeAbilitySequenceInvoke::AnimName' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OnTakeAbilitySequenceInvoke, AnimSequence) == 0x000018, "Member 'EndBattleAIController_OnTakeAbilitySequenceInvoke::AnimSequence' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OnTakeAbilitySequenceInvoke, StartTime) == 0x000020, "Member 'EndBattleAIController_OnTakeAbilitySequenceInvoke::StartTime' has a wrong offset!");

// Function EndGame.EndBattleAIController.OnTakeDamage
// 0x0390 (0x0390 - 0x0000)
struct EndBattleAIController_OnTakeDamage final
{
public:
	int32                                         Damage;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AEndCharacter*                          InChara;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InName;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndBattleAbilityCommandType                  InCommandType;                                     // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InBind;                                            // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InGuard;                                           // 0x001A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InDodge;                                           // 0x001B(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InBoneName;                                        // 0x001C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InAttributeWeak;                                   // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   InDmgSrcID;                                        // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndBattleAttributeType                       InDmgSrcAttribute;                                 // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         justHitRotYaw;                                     // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                hitPosition;                                       // 0x0038(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InHeal;                                            // 0x0044(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InCounter;                                         // 0x0045(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_46[0x2];                                       // 0x0046(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEndDataTableBattleDamageSource        dataTableBattleDamageSource;                       // 0x0048(0x0340)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          useAbilityUCPC;                                    // 0x0388(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_389[0x7];                                      // 0x0389(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAIController_OnTakeDamage) == 0x000008, "Wrong alignment on EndBattleAIController_OnTakeDamage");
static_assert(sizeof(EndBattleAIController_OnTakeDamage) == 0x000390, "Wrong size on EndBattleAIController_OnTakeDamage");
static_assert(offsetof(EndBattleAIController_OnTakeDamage, Damage) == 0x000000, "Member 'EndBattleAIController_OnTakeDamage::Damage' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OnTakeDamage, InChara) == 0x000008, "Member 'EndBattleAIController_OnTakeDamage::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OnTakeDamage, InName) == 0x000010, "Member 'EndBattleAIController_OnTakeDamage::InName' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OnTakeDamage, InCommandType) == 0x000018, "Member 'EndBattleAIController_OnTakeDamage::InCommandType' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OnTakeDamage, InBind) == 0x000019, "Member 'EndBattleAIController_OnTakeDamage::InBind' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OnTakeDamage, InGuard) == 0x00001A, "Member 'EndBattleAIController_OnTakeDamage::InGuard' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OnTakeDamage, InDodge) == 0x00001B, "Member 'EndBattleAIController_OnTakeDamage::InDodge' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OnTakeDamage, InBoneName) == 0x00001C, "Member 'EndBattleAIController_OnTakeDamage::InBoneName' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OnTakeDamage, InAttributeWeak) == 0x000024, "Member 'EndBattleAIController_OnTakeDamage::InAttributeWeak' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OnTakeDamage, InDmgSrcID) == 0x000028, "Member 'EndBattleAIController_OnTakeDamage::InDmgSrcID' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OnTakeDamage, InDmgSrcAttribute) == 0x000030, "Member 'EndBattleAIController_OnTakeDamage::InDmgSrcAttribute' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OnTakeDamage, justHitRotYaw) == 0x000034, "Member 'EndBattleAIController_OnTakeDamage::justHitRotYaw' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OnTakeDamage, hitPosition) == 0x000038, "Member 'EndBattleAIController_OnTakeDamage::hitPosition' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OnTakeDamage, InHeal) == 0x000044, "Member 'EndBattleAIController_OnTakeDamage::InHeal' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OnTakeDamage, InCounter) == 0x000045, "Member 'EndBattleAIController_OnTakeDamage::InCounter' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OnTakeDamage, dataTableBattleDamageSource) == 0x000048, "Member 'EndBattleAIController_OnTakeDamage::dataTableBattleDamageSource' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OnTakeDamage, useAbilityUCPC) == 0x000388, "Member 'EndBattleAIController_OnTakeDamage::useAbilityUCPC' has a wrong offset!");

// Function EndGame.EndBattleAIController.OnTakeDamageOnce
// 0x0018 (0x0018 - 0x0000)
struct EndBattleAIController_OnTakeDamageOnce final
{
public:
	class AEndCharacter*                          InCauserChara;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InAbilityID;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InAttributeWeak;                                   // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndBattleAbilityCommandType                  AbilityCommandType;                                // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAIController_OnTakeDamageOnce) == 0x000008, "Wrong alignment on EndBattleAIController_OnTakeDamageOnce");
static_assert(sizeof(EndBattleAIController_OnTakeDamageOnce) == 0x000018, "Wrong size on EndBattleAIController_OnTakeDamageOnce");
static_assert(offsetof(EndBattleAIController_OnTakeDamageOnce, InCauserChara) == 0x000000, "Member 'EndBattleAIController_OnTakeDamageOnce::InCauserChara' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OnTakeDamageOnce, InAbilityID) == 0x000008, "Member 'EndBattleAIController_OnTakeDamageOnce::InAbilityID' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OnTakeDamageOnce, InAttributeWeak) == 0x000010, "Member 'EndBattleAIController_OnTakeDamageOnce::InAttributeWeak' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OnTakeDamageOnce, AbilityCommandType) == 0x000011, "Member 'EndBattleAIController_OnTakeDamageOnce::AbilityCommandType' has a wrong offset!");

// Function EndGame.EndBattleAIController.OnUpdate
// 0x000C (0x000C - 0x0000)
struct EndBattleAIController_OnUpdate final
{
public:
	EEndAiBattleRole                              InRole;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InStep;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaTime;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_OnUpdate) == 0x000004, "Wrong alignment on EndBattleAIController_OnUpdate");
static_assert(sizeof(EndBattleAIController_OnUpdate) == 0x00000C, "Wrong size on EndBattleAIController_OnUpdate");
static_assert(offsetof(EndBattleAIController_OnUpdate, InRole) == 0x000000, "Member 'EndBattleAIController_OnUpdate::InRole' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OnUpdate, InStep) == 0x000004, "Member 'EndBattleAIController_OnUpdate::InStep' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OnUpdate, DeltaTime) == 0x000008, "Member 'EndBattleAIController_OnUpdate::DeltaTime' has a wrong offset!");

// Function EndGame.EndBattleAIController.OverrideDamageHitReactionID
// 0x0210 (0x0210 - 0x0000)
struct EndBattleAIController_OverrideDamageHitReactionID final
{
public:
	class FName                                   AbilityID;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEndDataTableBattleAbility             dataTableBattleAbility;                            // 0x0008(0x01F0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FName                                   DamageSourceID;                                    // 0x01F8(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          abilityFirstHit;                                   // 0x0200(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_201[0x3];                                      // 0x0201(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   damageHitReactionID;                               // 0x0204(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20C[0x4];                                      // 0x020C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAIController_OverrideDamageHitReactionID) == 0x000008, "Wrong alignment on EndBattleAIController_OverrideDamageHitReactionID");
static_assert(sizeof(EndBattleAIController_OverrideDamageHitReactionID) == 0x000210, "Wrong size on EndBattleAIController_OverrideDamageHitReactionID");
static_assert(offsetof(EndBattleAIController_OverrideDamageHitReactionID, AbilityID) == 0x000000, "Member 'EndBattleAIController_OverrideDamageHitReactionID::AbilityID' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OverrideDamageHitReactionID, dataTableBattleAbility) == 0x000008, "Member 'EndBattleAIController_OverrideDamageHitReactionID::dataTableBattleAbility' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OverrideDamageHitReactionID, DamageSourceID) == 0x0001F8, "Member 'EndBattleAIController_OverrideDamageHitReactionID::DamageSourceID' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OverrideDamageHitReactionID, abilityFirstHit) == 0x000200, "Member 'EndBattleAIController_OverrideDamageHitReactionID::abilityFirstHit' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_OverrideDamageHitReactionID, damageHitReactionID) == 0x000204, "Member 'EndBattleAIController_OverrideDamageHitReactionID::damageHitReactionID' has a wrong offset!");

// Function EndGame.EndBattleAIController.PlayAddMotion
// 0x000C (0x000C - 0x0000)
struct EndBattleAIController_PlayAddMotion final
{
public:
	class FName                                   motionName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndExtraActionLayer                          Layer;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInfiniteLoop;                                     // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAIController_PlayAddMotion) == 0x000004, "Wrong alignment on EndBattleAIController_PlayAddMotion");
static_assert(sizeof(EndBattleAIController_PlayAddMotion) == 0x00000C, "Wrong size on EndBattleAIController_PlayAddMotion");
static_assert(offsetof(EndBattleAIController_PlayAddMotion, motionName) == 0x000000, "Member 'EndBattleAIController_PlayAddMotion::motionName' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_PlayAddMotion, Layer) == 0x000008, "Member 'EndBattleAIController_PlayAddMotion::Layer' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_PlayAddMotion, bInfiniteLoop) == 0x000009, "Member 'EndBattleAIController_PlayAddMotion::bInfiniteLoop' has a wrong offset!");

// Function EndGame.EndBattleAIController.PlayBattleCameraSequence
// 0x000C (0x000C - 0x0000)
struct EndBattleAIController_PlayBattleCameraSequence final
{
public:
	class FName                                   SequenceID;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_PlayBattleCameraSequence) == 0x000004, "Wrong alignment on EndBattleAIController_PlayBattleCameraSequence");
static_assert(sizeof(EndBattleAIController_PlayBattleCameraSequence) == 0x00000C, "Wrong size on EndBattleAIController_PlayBattleCameraSequence");
static_assert(offsetof(EndBattleAIController_PlayBattleCameraSequence, SequenceID) == 0x000000, "Member 'EndBattleAIController_PlayBattleCameraSequence::SequenceID' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_PlayBattleCameraSequence, ReturnValue) == 0x000008, "Member 'EndBattleAIController_PlayBattleCameraSequence::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.PlayFsmAddMotion
// 0x0018 (0x0018 - 0x0000)
struct EndBattleAIController_PlayFsmAddMotion final
{
public:
	class FName                                   motionBegin;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   motionLoop;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   motionEnd;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_PlayFsmAddMotion) == 0x000004, "Wrong alignment on EndBattleAIController_PlayFsmAddMotion");
static_assert(sizeof(EndBattleAIController_PlayFsmAddMotion) == 0x000018, "Wrong size on EndBattleAIController_PlayFsmAddMotion");
static_assert(offsetof(EndBattleAIController_PlayFsmAddMotion, motionBegin) == 0x000000, "Member 'EndBattleAIController_PlayFsmAddMotion::motionBegin' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_PlayFsmAddMotion, motionLoop) == 0x000008, "Member 'EndBattleAIController_PlayFsmAddMotion::motionLoop' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_PlayFsmAddMotion, motionEnd) == 0x000010, "Member 'EndBattleAIController_PlayFsmAddMotion::motionEnd' has a wrong offset!");

// Function EndGame.EndBattleAIController.PlayMotion
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAIController_PlayMotion final
{
public:
	class FName                                   motionName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_PlayMotion) == 0x000004, "Wrong alignment on EndBattleAIController_PlayMotion");
static_assert(sizeof(EndBattleAIController_PlayMotion) == 0x000008, "Wrong size on EndBattleAIController_PlayMotion");
static_assert(offsetof(EndBattleAIController_PlayMotion, motionName) == 0x000000, "Member 'EndBattleAIController_PlayMotion::motionName' has a wrong offset!");

// Function EndGame.EndBattleAIController.PlayPartLoopMotion
// 0x0014 (0x0014 - 0x0000)
struct EndBattleAIController_PlayPartLoopMotion final
{
public:
	class FName                                   motionName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InBone;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndExtraActionLayer                          Layer;                                             // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAIController_PlayPartLoopMotion) == 0x000004, "Wrong alignment on EndBattleAIController_PlayPartLoopMotion");
static_assert(sizeof(EndBattleAIController_PlayPartLoopMotion) == 0x000014, "Wrong size on EndBattleAIController_PlayPartLoopMotion");
static_assert(offsetof(EndBattleAIController_PlayPartLoopMotion, motionName) == 0x000000, "Member 'EndBattleAIController_PlayPartLoopMotion::motionName' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_PlayPartLoopMotion, InBone) == 0x000008, "Member 'EndBattleAIController_PlayPartLoopMotion::InBone' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_PlayPartLoopMotion, Layer) == 0x000010, "Member 'EndBattleAIController_PlayPartLoopMotion::Layer' has a wrong offset!");

// Function EndGame.EndBattleAIController.PlayPartMotion
// 0x001C (0x001C - 0x0000)
struct EndBattleAIController_PlayPartMotion final
{
public:
	class FName                                   motionName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InBone;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndExtraActionLayer                          Layer;                                             // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         overrideBlendIn;                                   // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         overrideBlendOut;                                  // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_PlayPartMotion) == 0x000004, "Wrong alignment on EndBattleAIController_PlayPartMotion");
static_assert(sizeof(EndBattleAIController_PlayPartMotion) == 0x00001C, "Wrong size on EndBattleAIController_PlayPartMotion");
static_assert(offsetof(EndBattleAIController_PlayPartMotion, motionName) == 0x000000, "Member 'EndBattleAIController_PlayPartMotion::motionName' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_PlayPartMotion, InBone) == 0x000008, "Member 'EndBattleAIController_PlayPartMotion::InBone' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_PlayPartMotion, Layer) == 0x000010, "Member 'EndBattleAIController_PlayPartMotion::Layer' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_PlayPartMotion, overrideBlendIn) == 0x000014, "Member 'EndBattleAIController_PlayPartMotion::overrideBlendIn' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_PlayPartMotion, overrideBlendOut) == 0x000018, "Member 'EndBattleAIController_PlayPartMotion::overrideBlendOut' has a wrong offset!");

// Function EndGame.EndBattleAIController.RegisterAbility
// 0x0064 (0x0064 - 0x0000)
struct EndBattleAIController_RegisterAbility final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InID;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InTime;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InTimeout;                                         // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InATB;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InRandomATB;                                       // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InMinRange;                                        // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InMaxRange;                                        // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InActionMin;                                       // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InActionMax;                                       // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InHeightMin;                                       // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InHeightMax;                                       // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InViewRange;                                       // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ViewReverse;                                       // 0x003C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InDelayMove;                                       // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InDelayAbility;                                    // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InDelayRandAbility;                                // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InNeedMove;                                        // 0x004C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InNeedBetterMove;                                  // 0x004D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InAerialNeedMove;                                  // 0x004E(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InCancelLostTarget;                                // 0x004F(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InOverrideLeftAbility;                             // 0x0050(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InOverrideRightAbility;                            // 0x0058(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InNeedSee;                                         // 0x0060(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0061(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_62[0x2];                                       // 0x0062(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAIController_RegisterAbility) == 0x000004, "Wrong alignment on EndBattleAIController_RegisterAbility");
static_assert(sizeof(EndBattleAIController_RegisterAbility) == 0x000064, "Wrong size on EndBattleAIController_RegisterAbility");
static_assert(offsetof(EndBattleAIController_RegisterAbility, InName) == 0x000000, "Member 'EndBattleAIController_RegisterAbility::InName' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_RegisterAbility, InID) == 0x000008, "Member 'EndBattleAIController_RegisterAbility::InID' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_RegisterAbility, InTime) == 0x000010, "Member 'EndBattleAIController_RegisterAbility::InTime' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_RegisterAbility, InTimeout) == 0x000014, "Member 'EndBattleAIController_RegisterAbility::InTimeout' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_RegisterAbility, InATB) == 0x000018, "Member 'EndBattleAIController_RegisterAbility::InATB' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_RegisterAbility, InRandomATB) == 0x00001C, "Member 'EndBattleAIController_RegisterAbility::InRandomATB' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_RegisterAbility, InMinRange) == 0x000020, "Member 'EndBattleAIController_RegisterAbility::InMinRange' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_RegisterAbility, InMaxRange) == 0x000024, "Member 'EndBattleAIController_RegisterAbility::InMaxRange' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_RegisterAbility, InActionMin) == 0x000028, "Member 'EndBattleAIController_RegisterAbility::InActionMin' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_RegisterAbility, InActionMax) == 0x00002C, "Member 'EndBattleAIController_RegisterAbility::InActionMax' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_RegisterAbility, InHeightMin) == 0x000030, "Member 'EndBattleAIController_RegisterAbility::InHeightMin' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_RegisterAbility, InHeightMax) == 0x000034, "Member 'EndBattleAIController_RegisterAbility::InHeightMax' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_RegisterAbility, InViewRange) == 0x000038, "Member 'EndBattleAIController_RegisterAbility::InViewRange' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_RegisterAbility, ViewReverse) == 0x00003C, "Member 'EndBattleAIController_RegisterAbility::ViewReverse' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_RegisterAbility, InDelayMove) == 0x000040, "Member 'EndBattleAIController_RegisterAbility::InDelayMove' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_RegisterAbility, InDelayAbility) == 0x000044, "Member 'EndBattleAIController_RegisterAbility::InDelayAbility' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_RegisterAbility, InDelayRandAbility) == 0x000048, "Member 'EndBattleAIController_RegisterAbility::InDelayRandAbility' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_RegisterAbility, InNeedMove) == 0x00004C, "Member 'EndBattleAIController_RegisterAbility::InNeedMove' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_RegisterAbility, InNeedBetterMove) == 0x00004D, "Member 'EndBattleAIController_RegisterAbility::InNeedBetterMove' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_RegisterAbility, InAerialNeedMove) == 0x00004E, "Member 'EndBattleAIController_RegisterAbility::InAerialNeedMove' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_RegisterAbility, InCancelLostTarget) == 0x00004F, "Member 'EndBattleAIController_RegisterAbility::InCancelLostTarget' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_RegisterAbility, InOverrideLeftAbility) == 0x000050, "Member 'EndBattleAIController_RegisterAbility::InOverrideLeftAbility' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_RegisterAbility, InOverrideRightAbility) == 0x000058, "Member 'EndBattleAIController_RegisterAbility::InOverrideRightAbility' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_RegisterAbility, InNeedSee) == 0x000060, "Member 'EndBattleAIController_RegisterAbility::InNeedSee' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_RegisterAbility, ReturnValue) == 0x000061, "Member 'EndBattleAIController_RegisterAbility::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.RegisterAbilityListener
// 0x000C (0x000C - 0x0000)
struct EndBattleAIController_RegisterAbilityListener final
{
public:
	class FName                                   InAbility;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAIController_RegisterAbilityListener) == 0x000004, "Wrong alignment on EndBattleAIController_RegisterAbilityListener");
static_assert(sizeof(EndBattleAIController_RegisterAbilityListener) == 0x00000C, "Wrong size on EndBattleAIController_RegisterAbilityListener");
static_assert(offsetof(EndBattleAIController_RegisterAbilityListener, InAbility) == 0x000000, "Member 'EndBattleAIController_RegisterAbilityListener::InAbility' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_RegisterAbilityListener, ReturnValue) == 0x000008, "Member 'EndBattleAIController_RegisterAbilityListener::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.RegisterCharaRangeListener
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAIController_RegisterCharaRangeListener final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InRange;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAIController_RegisterCharaRangeListener) == 0x000008, "Wrong alignment on EndBattleAIController_RegisterCharaRangeListener");
static_assert(sizeof(EndBattleAIController_RegisterCharaRangeListener) == 0x000010, "Wrong size on EndBattleAIController_RegisterCharaRangeListener");
static_assert(offsetof(EndBattleAIController_RegisterCharaRangeListener, InChara) == 0x000000, "Member 'EndBattleAIController_RegisterCharaRangeListener::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_RegisterCharaRangeListener, InRange) == 0x000008, "Member 'EndBattleAIController_RegisterCharaRangeListener::InRange' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_RegisterCharaRangeListener, ReturnValue) == 0x00000C, "Member 'EndBattleAIController_RegisterCharaRangeListener::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.RegisterCombo
// 0x0058 (0x0058 - 0x0000)
struct EndBattleAIController_RegisterCombo final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InTime;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InATB;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InRandomATB;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InAction1;                                         // 0x0014(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InAction2;                                         // 0x001C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InAction3;                                         // 0x0024(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InAction4;                                         // 0x002C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InAction5;                                         // 0x0034(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InAction6;                                         // 0x003C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InAction7;                                         // 0x0044(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InAction8;                                         // 0x004C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InLock;                                            // 0x0054(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InTimeout;                                         // 0x0055(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0056(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_57[0x1];                                       // 0x0057(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAIController_RegisterCombo) == 0x000004, "Wrong alignment on EndBattleAIController_RegisterCombo");
static_assert(sizeof(EndBattleAIController_RegisterCombo) == 0x000058, "Wrong size on EndBattleAIController_RegisterCombo");
static_assert(offsetof(EndBattleAIController_RegisterCombo, InName) == 0x000000, "Member 'EndBattleAIController_RegisterCombo::InName' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_RegisterCombo, InTime) == 0x000008, "Member 'EndBattleAIController_RegisterCombo::InTime' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_RegisterCombo, InATB) == 0x00000C, "Member 'EndBattleAIController_RegisterCombo::InATB' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_RegisterCombo, InRandomATB) == 0x000010, "Member 'EndBattleAIController_RegisterCombo::InRandomATB' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_RegisterCombo, InAction1) == 0x000014, "Member 'EndBattleAIController_RegisterCombo::InAction1' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_RegisterCombo, InAction2) == 0x00001C, "Member 'EndBattleAIController_RegisterCombo::InAction2' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_RegisterCombo, InAction3) == 0x000024, "Member 'EndBattleAIController_RegisterCombo::InAction3' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_RegisterCombo, InAction4) == 0x00002C, "Member 'EndBattleAIController_RegisterCombo::InAction4' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_RegisterCombo, InAction5) == 0x000034, "Member 'EndBattleAIController_RegisterCombo::InAction5' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_RegisterCombo, InAction6) == 0x00003C, "Member 'EndBattleAIController_RegisterCombo::InAction6' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_RegisterCombo, InAction7) == 0x000044, "Member 'EndBattleAIController_RegisterCombo::InAction7' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_RegisterCombo, InAction8) == 0x00004C, "Member 'EndBattleAIController_RegisterCombo::InAction8' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_RegisterCombo, InLock) == 0x000054, "Member 'EndBattleAIController_RegisterCombo::InLock' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_RegisterCombo, InTimeout) == 0x000055, "Member 'EndBattleAIController_RegisterCombo::InTimeout' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_RegisterCombo, ReturnValue) == 0x000056, "Member 'EndBattleAIController_RegisterCombo::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.RegisterConfront
// 0x0014 (0x0014 - 0x0000)
struct EndBattleAIController_RegisterConfront final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InMin;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InMax;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAIController_RegisterConfront) == 0x000004, "Wrong alignment on EndBattleAIController_RegisterConfront");
static_assert(sizeof(EndBattleAIController_RegisterConfront) == 0x000014, "Wrong size on EndBattleAIController_RegisterConfront");
static_assert(offsetof(EndBattleAIController_RegisterConfront, InName) == 0x000000, "Member 'EndBattleAIController_RegisterConfront::InName' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_RegisterConfront, InMin) == 0x000008, "Member 'EndBattleAIController_RegisterConfront::InMin' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_RegisterConfront, InMax) == 0x00000C, "Member 'EndBattleAIController_RegisterConfront::InMax' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_RegisterConfront, ReturnValue) == 0x000010, "Member 'EndBattleAIController_RegisterConfront::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.RegisterMotion
// 0x0014 (0x0014 - 0x0000)
struct EndBattleAIController_RegisterMotion final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InTime;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InOverrideKeep;                                    // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAIController_RegisterMotion) == 0x000004, "Wrong alignment on EndBattleAIController_RegisterMotion");
static_assert(sizeof(EndBattleAIController_RegisterMotion) == 0x000014, "Wrong size on EndBattleAIController_RegisterMotion");
static_assert(offsetof(EndBattleAIController_RegisterMotion, InName) == 0x000000, "Member 'EndBattleAIController_RegisterMotion::InName' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_RegisterMotion, InTime) == 0x000008, "Member 'EndBattleAIController_RegisterMotion::InTime' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_RegisterMotion, InOverrideKeep) == 0x00000C, "Member 'EndBattleAIController_RegisterMotion::InOverrideKeep' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_RegisterMotion, ReturnValue) == 0x000010, "Member 'EndBattleAIController_RegisterMotion::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.RegisterMove
// 0x0044 (0x0044 - 0x0000)
struct EndBattleAIController_RegisterMove final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InLocation;                                        // 0x0008(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InLookAt;                                          // 0x0014(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InRadius;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InTimeout;                                         // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InPathFind;                                        // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InWalkRadius;                                      // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InWaitIdle;                                        // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SmoothingDistance;                                 // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InImmediate;                                       // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InInterval;                                        // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAIController_RegisterMove) == 0x000004, "Wrong alignment on EndBattleAIController_RegisterMove");
static_assert(sizeof(EndBattleAIController_RegisterMove) == 0x000044, "Wrong size on EndBattleAIController_RegisterMove");
static_assert(offsetof(EndBattleAIController_RegisterMove, InName) == 0x000000, "Member 'EndBattleAIController_RegisterMove::InName' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_RegisterMove, InLocation) == 0x000008, "Member 'EndBattleAIController_RegisterMove::InLocation' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_RegisterMove, InLookAt) == 0x000014, "Member 'EndBattleAIController_RegisterMove::InLookAt' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_RegisterMove, InRadius) == 0x000020, "Member 'EndBattleAIController_RegisterMove::InRadius' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_RegisterMove, InTimeout) == 0x000024, "Member 'EndBattleAIController_RegisterMove::InTimeout' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_RegisterMove, InPathFind) == 0x000028, "Member 'EndBattleAIController_RegisterMove::InPathFind' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_RegisterMove, InWalkRadius) == 0x00002C, "Member 'EndBattleAIController_RegisterMove::InWalkRadius' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_RegisterMove, InWaitIdle) == 0x000030, "Member 'EndBattleAIController_RegisterMove::InWaitIdle' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_RegisterMove, SmoothingDistance) == 0x000034, "Member 'EndBattleAIController_RegisterMove::SmoothingDistance' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_RegisterMove, InImmediate) == 0x000038, "Member 'EndBattleAIController_RegisterMove::InImmediate' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_RegisterMove, InInterval) == 0x00003C, "Member 'EndBattleAIController_RegisterMove::InInterval' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_RegisterMove, ReturnValue) == 0x000040, "Member 'EndBattleAIController_RegisterMove::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.RegisterOrder
// 0x0028 (0x0028 - 0x0000)
struct EndBattleAIController_RegisterOrder final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InOrder;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InCount;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InRace;                                            // 0x0014(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBattleOrderRule                              InRule;                                            // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InInterest;                                        // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAIController_RegisterOrder) == 0x000004, "Wrong alignment on EndBattleAIController_RegisterOrder");
static_assert(sizeof(EndBattleAIController_RegisterOrder) == 0x000028, "Wrong size on EndBattleAIController_RegisterOrder");
static_assert(offsetof(EndBattleAIController_RegisterOrder, InName) == 0x000000, "Member 'EndBattleAIController_RegisterOrder::InName' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_RegisterOrder, InOrder) == 0x000008, "Member 'EndBattleAIController_RegisterOrder::InOrder' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_RegisterOrder, InCount) == 0x000010, "Member 'EndBattleAIController_RegisterOrder::InCount' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_RegisterOrder, InRace) == 0x000014, "Member 'EndBattleAIController_RegisterOrder::InRace' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_RegisterOrder, InRule) == 0x00001C, "Member 'EndBattleAIController_RegisterOrder::InRule' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_RegisterOrder, InInterest) == 0x000020, "Member 'EndBattleAIController_RegisterOrder::InInterest' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_RegisterOrder, ReturnValue) == 0x000024, "Member 'EndBattleAIController_RegisterOrder::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.RegisterTurn
// 0x001C (0x001C - 0x0000)
struct EndBattleAIController_RegisterTurn final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InYaw;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InMargin;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InTarget;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InTimeout;                                         // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAIController_RegisterTurn) == 0x000004, "Wrong alignment on EndBattleAIController_RegisterTurn");
static_assert(sizeof(EndBattleAIController_RegisterTurn) == 0x00001C, "Wrong size on EndBattleAIController_RegisterTurn");
static_assert(offsetof(EndBattleAIController_RegisterTurn, InName) == 0x000000, "Member 'EndBattleAIController_RegisterTurn::InName' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_RegisterTurn, InYaw) == 0x000008, "Member 'EndBattleAIController_RegisterTurn::InYaw' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_RegisterTurn, InMargin) == 0x00000C, "Member 'EndBattleAIController_RegisterTurn::InMargin' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_RegisterTurn, InTarget) == 0x000010, "Member 'EndBattleAIController_RegisterTurn::InTarget' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_RegisterTurn, InTimeout) == 0x000014, "Member 'EndBattleAIController_RegisterTurn::InTimeout' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_RegisterTurn, ReturnValue) == 0x000018, "Member 'EndBattleAIController_RegisterTurn::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.RemakeWeakCondition
// 0x0002 (0x0002 - 0x0000)
struct EndBattleAIController_RemakeWeakCondition final
{
public:
	ETriggerWeakRemakeType                        remakeType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          resetProtectionTime;                               // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_RemakeWeakCondition) == 0x000001, "Wrong alignment on EndBattleAIController_RemakeWeakCondition");
static_assert(sizeof(EndBattleAIController_RemakeWeakCondition) == 0x000002, "Wrong size on EndBattleAIController_RemakeWeakCondition");
static_assert(offsetof(EndBattleAIController_RemakeWeakCondition, remakeType) == 0x000000, "Member 'EndBattleAIController_RemakeWeakCondition::remakeType' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_RemakeWeakCondition, resetProtectionTime) == 0x000001, "Member 'EndBattleAIController_RemakeWeakCondition::resetProtectionTime' has a wrong offset!");

// Function EndGame.EndBattleAIController.RemoveAttachEffect
// 0x0014 (0x0014 - 0x0000)
struct EndBattleAIController_RemoveAttachEffect final
{
public:
	class FName                                   AttachSocketName;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ResourceName;                                      // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDestroy;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAIController_RemoveAttachEffect) == 0x000004, "Wrong alignment on EndBattleAIController_RemoveAttachEffect");
static_assert(sizeof(EndBattleAIController_RemoveAttachEffect) == 0x000014, "Wrong size on EndBattleAIController_RemoveAttachEffect");
static_assert(offsetof(EndBattleAIController_RemoveAttachEffect, AttachSocketName) == 0x000000, "Member 'EndBattleAIController_RemoveAttachEffect::AttachSocketName' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_RemoveAttachEffect, ResourceName) == 0x000008, "Member 'EndBattleAIController_RemoveAttachEffect::ResourceName' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_RemoveAttachEffect, bDestroy) == 0x000010, "Member 'EndBattleAIController_RemoveAttachEffect::bDestroy' has a wrong offset!");

// Function EndGame.EndBattleAIController.RemoveIgnoreNavArea
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAIController_RemoveIgnoreNavArea final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_RemoveIgnoreNavArea) == 0x000004, "Wrong alignment on EndBattleAIController_RemoveIgnoreNavArea");
static_assert(sizeof(EndBattleAIController_RemoveIgnoreNavArea) == 0x000008, "Wrong size on EndBattleAIController_RemoveIgnoreNavArea");
static_assert(offsetof(EndBattleAIController_RemoveIgnoreNavArea, InName) == 0x000000, "Member 'EndBattleAIController_RemoveIgnoreNavArea::InName' has a wrong offset!");

// Function EndGame.EndBattleAIController.RemoveSpecialStateEffect
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAIController_RemoveSpecialStateEffect final
{
public:
	class FName                                   specialStateEffectID;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_RemoveSpecialStateEffect) == 0x000004, "Wrong alignment on EndBattleAIController_RemoveSpecialStateEffect");
static_assert(sizeof(EndBattleAIController_RemoveSpecialStateEffect) == 0x000008, "Wrong size on EndBattleAIController_RemoveSpecialStateEffect");
static_assert(offsetof(EndBattleAIController_RemoveSpecialStateEffect, specialStateEffectID) == 0x000000, "Member 'EndBattleAIController_RemoveSpecialStateEffect::specialStateEffectID' has a wrong offset!");

// Function EndGame.EndBattleAIController.RemoveSpecialStatus
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAIController_RemoveSpecialStatus final
{
public:
	EEndBattleSpecialStatusChangeType             Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_RemoveSpecialStatus) == 0x000001, "Wrong alignment on EndBattleAIController_RemoveSpecialStatus");
static_assert(sizeof(EndBattleAIController_RemoveSpecialStatus) == 0x000001, "Wrong size on EndBattleAIController_RemoveSpecialStatus");
static_assert(offsetof(EndBattleAIController_RemoveSpecialStatus, Type) == 0x000000, "Member 'EndBattleAIController_RemoveSpecialStatus::Type' has a wrong offset!");

// Function EndGame.EndBattleAIController.RemoveSpecialStatusByID
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAIController_RemoveSpecialStatusByID final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_RemoveSpecialStatusByID) == 0x000004, "Wrong alignment on EndBattleAIController_RemoveSpecialStatusByID");
static_assert(sizeof(EndBattleAIController_RemoveSpecialStatusByID) == 0x000008, "Wrong size on EndBattleAIController_RemoveSpecialStatusByID");
static_assert(offsetof(EndBattleAIController_RemoveSpecialStatusByID, ID) == 0x000000, "Member 'EndBattleAIController_RemoveSpecialStatusByID::ID' has a wrong offset!");

// Function EndGame.EndBattleAIController.RemoveStatusChange
// 0x0002 (0x0002 - 0x0000)
struct EndBattleAIController_RemoveStatusChange final
{
public:
	EEndBattleStatusChangeType                    Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_RemoveStatusChange) == 0x000001, "Wrong alignment on EndBattleAIController_RemoveStatusChange");
static_assert(sizeof(EndBattleAIController_RemoveStatusChange) == 0x000002, "Wrong size on EndBattleAIController_RemoveStatusChange");
static_assert(offsetof(EndBattleAIController_RemoveStatusChange, Type) == 0x000000, "Member 'EndBattleAIController_RemoveStatusChange::Type' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_RemoveStatusChange, ReturnValue) == 0x000001, "Member 'EndBattleAIController_RemoveStatusChange::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.RequestAction
// 0x000C (0x000C - 0x0000)
struct EndBattleAIController_RequestAction final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAIController_RequestAction) == 0x000004, "Wrong alignment on EndBattleAIController_RequestAction");
static_assert(sizeof(EndBattleAIController_RequestAction) == 0x00000C, "Wrong size on EndBattleAIController_RequestAction");
static_assert(offsetof(EndBattleAIController_RequestAction, InName) == 0x000000, "Member 'EndBattleAIController_RequestAction::InName' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_RequestAction, ReturnValue) == 0x000008, "Member 'EndBattleAIController_RequestAction::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.RequestActionStep
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAIController_RequestActionStep final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InStep;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAIController_RequestActionStep) == 0x000004, "Wrong alignment on EndBattleAIController_RequestActionStep");
static_assert(sizeof(EndBattleAIController_RequestActionStep) == 0x000010, "Wrong size on EndBattleAIController_RequestActionStep");
static_assert(offsetof(EndBattleAIController_RequestActionStep, InName) == 0x000000, "Member 'EndBattleAIController_RequestActionStep::InName' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_RequestActionStep, InStep) == 0x000008, "Member 'EndBattleAIController_RequestActionStep::InStep' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_RequestActionStep, ReturnValue) == 0x00000C, "Member 'EndBattleAIController_RequestActionStep::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.RequestActionSubStep
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAIController_RequestActionSubStep final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InSubStep;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAIController_RequestActionSubStep) == 0x000004, "Wrong alignment on EndBattleAIController_RequestActionSubStep");
static_assert(sizeof(EndBattleAIController_RequestActionSubStep) == 0x000010, "Wrong size on EndBattleAIController_RequestActionSubStep");
static_assert(offsetof(EndBattleAIController_RequestActionSubStep, InName) == 0x000000, "Member 'EndBattleAIController_RequestActionSubStep::InName' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_RequestActionSubStep, InSubStep) == 0x000008, "Member 'EndBattleAIController_RequestActionSubStep::InSubStep' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_RequestActionSubStep, ReturnValue) == 0x00000C, "Member 'EndBattleAIController_RequestActionSubStep::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.RequestActorChase
// 0x0018 (0x0018 - 0x0000)
struct EndBattleAIController_RequestActorChase final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InOffset;                                          // 0x0008(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAIController_RequestActorChase) == 0x000008, "Wrong alignment on EndBattleAIController_RequestActorChase");
static_assert(sizeof(EndBattleAIController_RequestActorChase) == 0x000018, "Wrong size on EndBattleAIController_RequestActorChase");
static_assert(offsetof(EndBattleAIController_RequestActorChase, InActor) == 0x000000, "Member 'EndBattleAIController_RequestActorChase::InActor' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_RequestActorChase, InOffset) == 0x000008, "Member 'EndBattleAIController_RequestActorChase::InOffset' has a wrong offset!");

// Function EndGame.EndBattleAIController.RequestAerialCrash
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAIController_RequestAerialCrash final
{
public:
	bool                                          InBurst;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_RequestAerialCrash) == 0x000001, "Wrong alignment on EndBattleAIController_RequestAerialCrash");
static_assert(sizeof(EndBattleAIController_RequestAerialCrash) == 0x000001, "Wrong size on EndBattleAIController_RequestAerialCrash");
static_assert(offsetof(EndBattleAIController_RequestAerialCrash, InBurst) == 0x000000, "Member 'EndBattleAIController_RequestAerialCrash::InBurst' has a wrong offset!");

// Function EndGame.EndBattleAIController.RequestBindAction
// 0x000C (0x000C - 0x0000)
struct EndBattleAIController_RequestBindAction final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAIController_RequestBindAction) == 0x000004, "Wrong alignment on EndBattleAIController_RequestBindAction");
static_assert(sizeof(EndBattleAIController_RequestBindAction) == 0x00000C, "Wrong size on EndBattleAIController_RequestBindAction");
static_assert(offsetof(EndBattleAIController_RequestBindAction, InName) == 0x000000, "Member 'EndBattleAIController_RequestBindAction::InName' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_RequestBindAction, ReturnValue) == 0x000008, "Member 'EndBattleAIController_RequestBindAction::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.RequestDodge
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAIController_RequestDodge final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InEnemy;                                           // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAIController_RequestDodge) == 0x000004, "Wrong alignment on EndBattleAIController_RequestDodge");
static_assert(sizeof(EndBattleAIController_RequestDodge) == 0x000010, "Wrong size on EndBattleAIController_RequestDodge");
static_assert(offsetof(EndBattleAIController_RequestDodge, Location) == 0x000000, "Member 'EndBattleAIController_RequestDodge::Location' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_RequestDodge, InEnemy) == 0x00000C, "Member 'EndBattleAIController_RequestDodge::InEnemy' has a wrong offset!");

// Function EndGame.EndBattleAIController.RequestGroundCrash
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAIController_RequestGroundCrash final
{
public:
	bool                                          InBurst;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_RequestGroundCrash) == 0x000001, "Wrong alignment on EndBattleAIController_RequestGroundCrash");
static_assert(sizeof(EndBattleAIController_RequestGroundCrash) == 0x000001, "Wrong size on EndBattleAIController_RequestGroundCrash");
static_assert(offsetof(EndBattleAIController_RequestGroundCrash, InBurst) == 0x000000, "Member 'EndBattleAIController_RequestGroundCrash::InBurst' has a wrong offset!");

// Function EndGame.EndBattleAIController.RequestGroundSpline
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAIController_RequestGroundSpline final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_RequestGroundSpline) == 0x000004, "Wrong alignment on EndBattleAIController_RequestGroundSpline");
static_assert(sizeof(EndBattleAIController_RequestGroundSpline) == 0x000008, "Wrong size on EndBattleAIController_RequestGroundSpline");
static_assert(offsetof(EndBattleAIController_RequestGroundSpline, InName) == 0x000000, "Member 'EndBattleAIController_RequestGroundSpline::InName' has a wrong offset!");

// Function EndGame.EndBattleAIController.RequestGuard
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAIController_RequestGuard final
{
public:
	float                                         InTime;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InMovable;                                         // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAIController_RequestGuard) == 0x000004, "Wrong alignment on EndBattleAIController_RequestGuard");
static_assert(sizeof(EndBattleAIController_RequestGuard) == 0x000008, "Wrong size on EndBattleAIController_RequestGuard");
static_assert(offsetof(EndBattleAIController_RequestGuard, InTime) == 0x000000, "Member 'EndBattleAIController_RequestGuard::InTime' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_RequestGuard, InMovable) == 0x000004, "Member 'EndBattleAIController_RequestGuard::InMovable' has a wrong offset!");

// Function EndGame.EndBattleAIController.RequestHeliMove
// 0x0030 (0x0030 - 0x0000)
struct EndBattleAIController_RequestHeliMove final
{
public:
	struct FEndBattleHelicopterSpec               InSpec;                                            // 0x0000(0x0028)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         InGoal;                                            // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InSkip;                                            // 0x002C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAIController_RequestHeliMove) == 0x000004, "Wrong alignment on EndBattleAIController_RequestHeliMove");
static_assert(sizeof(EndBattleAIController_RequestHeliMove) == 0x000030, "Wrong size on EndBattleAIController_RequestHeliMove");
static_assert(offsetof(EndBattleAIController_RequestHeliMove, InSpec) == 0x000000, "Member 'EndBattleAIController_RequestHeliMove::InSpec' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_RequestHeliMove, InGoal) == 0x000028, "Member 'EndBattleAIController_RequestHeliMove::InGoal' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_RequestHeliMove, InSkip) == 0x00002C, "Member 'EndBattleAIController_RequestHeliMove::InSkip' has a wrong offset!");

// Function EndGame.EndBattleAIController.RequestHeliOverridePoint
// 0x0030 (0x0030 - 0x0000)
struct EndBattleAIController_RequestHeliOverridePoint final
{
public:
	class AEndNavModifierVolume*                  InNav;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEndBattleHelicopterSpec               InSpec;                                            // 0x0008(0x0028)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_RequestHeliOverridePoint) == 0x000008, "Wrong alignment on EndBattleAIController_RequestHeliOverridePoint");
static_assert(sizeof(EndBattleAIController_RequestHeliOverridePoint) == 0x000030, "Wrong size on EndBattleAIController_RequestHeliOverridePoint");
static_assert(offsetof(EndBattleAIController_RequestHeliOverridePoint, InNav) == 0x000000, "Member 'EndBattleAIController_RequestHeliOverridePoint::InNav' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_RequestHeliOverridePoint, InSpec) == 0x000008, "Member 'EndBattleAIController_RequestHeliOverridePoint::InSpec' has a wrong offset!");

// Function EndGame.EndBattleAIController.RequestNextSpline
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAIController_RequestNextSpline final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_RequestNextSpline) == 0x000004, "Wrong alignment on EndBattleAIController_RequestNextSpline");
static_assert(sizeof(EndBattleAIController_RequestNextSpline) == 0x000008, "Wrong size on EndBattleAIController_RequestNextSpline");
static_assert(offsetof(EndBattleAIController_RequestNextSpline, InName) == 0x000000, "Member 'EndBattleAIController_RequestNextSpline::InName' has a wrong offset!");

// Function EndGame.EndBattleAIController.RequestPathFind
// 0x0002 (0x0002 - 0x0000)
struct EndBattleAIController_RequestPathFind final
{
public:
	bool                                          IgnoreCanMove;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_RequestPathFind) == 0x000001, "Wrong alignment on EndBattleAIController_RequestPathFind");
static_assert(sizeof(EndBattleAIController_RequestPathFind) == 0x000002, "Wrong size on EndBattleAIController_RequestPathFind");
static_assert(offsetof(EndBattleAIController_RequestPathFind, IgnoreCanMove) == 0x000000, "Member 'EndBattleAIController_RequestPathFind::IgnoreCanMove' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_RequestPathFind, ReturnValue) == 0x000001, "Member 'EndBattleAIController_RequestPathFind::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.RequestPathFindLocation
// 0x0024 (0x0024 - 0x0000)
struct EndBattleAIController_RequestPathFindLocation final
{
public:
	struct FVector                                InLocation;                                        // 0x0000(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InLookAt;                                          // 0x000C(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InRadius;                                          // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SmoothingDistance;                                 // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAIController_RequestPathFindLocation) == 0x000004, "Wrong alignment on EndBattleAIController_RequestPathFindLocation");
static_assert(sizeof(EndBattleAIController_RequestPathFindLocation) == 0x000024, "Wrong size on EndBattleAIController_RequestPathFindLocation");
static_assert(offsetof(EndBattleAIController_RequestPathFindLocation, InLocation) == 0x000000, "Member 'EndBattleAIController_RequestPathFindLocation::InLocation' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_RequestPathFindLocation, InLookAt) == 0x00000C, "Member 'EndBattleAIController_RequestPathFindLocation::InLookAt' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_RequestPathFindLocation, InRadius) == 0x000018, "Member 'EndBattleAIController_RequestPathFindLocation::InRadius' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_RequestPathFindLocation, SmoothingDistance) == 0x00001C, "Member 'EndBattleAIController_RequestPathFindLocation::SmoothingDistance' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_RequestPathFindLocation, ReturnValue) == 0x000020, "Member 'EndBattleAIController_RequestPathFindLocation::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.RequestReserveAction
// 0x0028 (0x0028 - 0x0000)
struct EndBattleAIController_RequestReserveAction final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         iValue;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         fValue;                                            // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 sValue;                                            // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAIController_RequestReserveAction) == 0x000008, "Wrong alignment on EndBattleAIController_RequestReserveAction");
static_assert(sizeof(EndBattleAIController_RequestReserveAction) == 0x000028, "Wrong size on EndBattleAIController_RequestReserveAction");
static_assert(offsetof(EndBattleAIController_RequestReserveAction, InName) == 0x000000, "Member 'EndBattleAIController_RequestReserveAction::InName' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_RequestReserveAction, iValue) == 0x000008, "Member 'EndBattleAIController_RequestReserveAction::iValue' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_RequestReserveAction, fValue) == 0x00000C, "Member 'EndBattleAIController_RequestReserveAction::fValue' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_RequestReserveAction, sValue) == 0x000010, "Member 'EndBattleAIController_RequestReserveAction::sValue' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_RequestReserveAction, ReturnValue) == 0x000020, "Member 'EndBattleAIController_RequestReserveAction::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.RequestReserveAction2Arg
// 0x0040 (0x0040 - 0x0000)
struct EndBattleAIController_RequestReserveAction2Arg final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         iValue;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         iValue2;                                           // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         fValue;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         fValue2;                                           // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 sValue;                                            // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 sValue2;                                           // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAIController_RequestReserveAction2Arg) == 0x000008, "Wrong alignment on EndBattleAIController_RequestReserveAction2Arg");
static_assert(sizeof(EndBattleAIController_RequestReserveAction2Arg) == 0x000040, "Wrong size on EndBattleAIController_RequestReserveAction2Arg");
static_assert(offsetof(EndBattleAIController_RequestReserveAction2Arg, InName) == 0x000000, "Member 'EndBattleAIController_RequestReserveAction2Arg::InName' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_RequestReserveAction2Arg, iValue) == 0x000008, "Member 'EndBattleAIController_RequestReserveAction2Arg::iValue' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_RequestReserveAction2Arg, iValue2) == 0x00000C, "Member 'EndBattleAIController_RequestReserveAction2Arg::iValue2' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_RequestReserveAction2Arg, fValue) == 0x000010, "Member 'EndBattleAIController_RequestReserveAction2Arg::fValue' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_RequestReserveAction2Arg, fValue2) == 0x000014, "Member 'EndBattleAIController_RequestReserveAction2Arg::fValue2' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_RequestReserveAction2Arg, sValue) == 0x000018, "Member 'EndBattleAIController_RequestReserveAction2Arg::sValue' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_RequestReserveAction2Arg, sValue2) == 0x000028, "Member 'EndBattleAIController_RequestReserveAction2Arg::sValue2' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_RequestReserveAction2Arg, ReturnValue) == 0x000038, "Member 'EndBattleAIController_RequestReserveAction2Arg::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.RequestShowAbilityName
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAIController_RequestShowAbilityName final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InTime;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNonGuardableIcon;                                 // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAIController_RequestShowAbilityName) == 0x000004, "Wrong alignment on EndBattleAIController_RequestShowAbilityName");
static_assert(sizeof(EndBattleAIController_RequestShowAbilityName) == 0x000010, "Wrong size on EndBattleAIController_RequestShowAbilityName");
static_assert(offsetof(EndBattleAIController_RequestShowAbilityName, InName) == 0x000000, "Member 'EndBattleAIController_RequestShowAbilityName::InName' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_RequestShowAbilityName, InTime) == 0x000008, "Member 'EndBattleAIController_RequestShowAbilityName::InTime' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_RequestShowAbilityName, bNonGuardableIcon) == 0x00000C, "Member 'EndBattleAIController_RequestShowAbilityName::bNonGuardableIcon' has a wrong offset!");

// Function EndGame.EndBattleAIController.RequestWandering
// 0x000C (0x000C - 0x0000)
struct EndBattleAIController_RequestWandering final
{
public:
	struct FVector                                InLocation;                                        // 0x0000(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_RequestWandering) == 0x000004, "Wrong alignment on EndBattleAIController_RequestWandering");
static_assert(sizeof(EndBattleAIController_RequestWandering) == 0x00000C, "Wrong size on EndBattleAIController_RequestWandering");
static_assert(offsetof(EndBattleAIController_RequestWandering, InLocation) == 0x000000, "Member 'EndBattleAIController_RequestWandering::InLocation' has a wrong offset!");

// Function EndGame.EndBattleAIController.ReserveAbility
// 0x000C (0x000C - 0x0000)
struct EndBattleAIController_ReserveAbility final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InImmediate;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAIController_ReserveAbility) == 0x000004, "Wrong alignment on EndBattleAIController_ReserveAbility");
static_assert(sizeof(EndBattleAIController_ReserveAbility) == 0x00000C, "Wrong size on EndBattleAIController_ReserveAbility");
static_assert(offsetof(EndBattleAIController_ReserveAbility, InName) == 0x000000, "Member 'EndBattleAIController_ReserveAbility::InName' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_ReserveAbility, InImmediate) == 0x000008, "Member 'EndBattleAIController_ReserveAbility::InImmediate' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_ReserveAbility, ReturnValue) == 0x000009, "Member 'EndBattleAIController_ReserveAbility::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.ResetActionAbilityLocalCountFromID
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAIController_ResetActionAbilityLocalCountFromID final
{
public:
	class FName                                   InAbilityID;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_ResetActionAbilityLocalCountFromID) == 0x000004, "Wrong alignment on EndBattleAIController_ResetActionAbilityLocalCountFromID");
static_assert(sizeof(EndBattleAIController_ResetActionAbilityLocalCountFromID) == 0x000008, "Wrong size on EndBattleAIController_ResetActionAbilityLocalCountFromID");
static_assert(offsetof(EndBattleAIController_ResetActionAbilityLocalCountFromID, InAbilityID) == 0x000000, "Member 'EndBattleAIController_ResetActionAbilityLocalCountFromID::InAbilityID' has a wrong offset!");

// Function EndGame.EndBattleAIController.ResetActionLocalCount
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAIController_ResetActionLocalCount final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_ResetActionLocalCount) == 0x000004, "Wrong alignment on EndBattleAIController_ResetActionLocalCount");
static_assert(sizeof(EndBattleAIController_ResetActionLocalCount) == 0x000008, "Wrong size on EndBattleAIController_ResetActionLocalCount");
static_assert(offsetof(EndBattleAIController_ResetActionLocalCount, InName) == 0x000000, "Member 'EndBattleAIController_ResetActionLocalCount::InName' has a wrong offset!");

// Function EndGame.EndBattleAIController.ResetActionRequestCount
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAIController_ResetActionRequestCount final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_ResetActionRequestCount) == 0x000004, "Wrong alignment on EndBattleAIController_ResetActionRequestCount");
static_assert(sizeof(EndBattleAIController_ResetActionRequestCount) == 0x000008, "Wrong size on EndBattleAIController_ResetActionRequestCount");
static_assert(offsetof(EndBattleAIController_ResetActionRequestCount, InName) == 0x000000, "Member 'EndBattleAIController_ResetActionRequestCount::InName' has a wrong offset!");

// Function EndGame.EndBattleAIController.ResetAngleRangeTargetPoint
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAIController_ResetAngleRangeTargetPoint final
{
public:
	class FName                                   SocketName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_ResetAngleRangeTargetPoint) == 0x000004, "Wrong alignment on EndBattleAIController_ResetAngleRangeTargetPoint");
static_assert(sizeof(EndBattleAIController_ResetAngleRangeTargetPoint) == 0x000008, "Wrong size on EndBattleAIController_ResetAngleRangeTargetPoint");
static_assert(offsetof(EndBattleAIController_ResetAngleRangeTargetPoint, SocketName) == 0x000000, "Member 'EndBattleAIController_ResetAngleRangeTargetPoint::SocketName' has a wrong offset!");

// Function EndGame.EndBattleAIController.ResetOverrideAnim
// 0x000C (0x000C - 0x0000)
struct EndBattleAIController_ResetOverrideAnim final
{
public:
	EEndLocomotionAnim                            InType;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   InInter;                                           // 0x0004(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_ResetOverrideAnim) == 0x000004, "Wrong alignment on EndBattleAIController_ResetOverrideAnim");
static_assert(sizeof(EndBattleAIController_ResetOverrideAnim) == 0x00000C, "Wrong size on EndBattleAIController_ResetOverrideAnim");
static_assert(offsetof(EndBattleAIController_ResetOverrideAnim, InType) == 0x000000, "Member 'EndBattleAIController_ResetOverrideAnim::InType' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_ResetOverrideAnim, InInter) == 0x000004, "Member 'EndBattleAIController_ResetOverrideAnim::InInter' has a wrong offset!");

// Function EndGame.EndBattleAIController.ResetOverrideBattleCharaPartsSpec
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAIController_ResetOverrideBattleCharaPartsSpec final
{
public:
	class FName                                   BaseID;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_ResetOverrideBattleCharaPartsSpec) == 0x000004, "Wrong alignment on EndBattleAIController_ResetOverrideBattleCharaPartsSpec");
static_assert(sizeof(EndBattleAIController_ResetOverrideBattleCharaPartsSpec) == 0x000008, "Wrong size on EndBattleAIController_ResetOverrideBattleCharaPartsSpec");
static_assert(offsetof(EndBattleAIController_ResetOverrideBattleCharaPartsSpec, BaseID) == 0x000000, "Member 'EndBattleAIController_ResetOverrideBattleCharaPartsSpec::BaseID' has a wrong offset!");

// Function EndGame.EndBattleAIController.ResetOverrideUpperAnim
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAIController_ResetOverrideUpperAnim final
{
public:
	bool                                          InPlayEndAnim;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_ResetOverrideUpperAnim) == 0x000001, "Wrong alignment on EndBattleAIController_ResetOverrideUpperAnim");
static_assert(sizeof(EndBattleAIController_ResetOverrideUpperAnim) == 0x000001, "Wrong size on EndBattleAIController_ResetOverrideUpperAnim");
static_assert(offsetof(EndBattleAIController_ResetOverrideUpperAnim, InPlayEndAnim) == 0x000000, "Member 'EndBattleAIController_ResetOverrideUpperAnim::InPlayEndAnim' has a wrong offset!");

// Function EndGame.EndBattleAIController.ResetWorkBool
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAIController_ResetWorkBool final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_ResetWorkBool) == 0x000004, "Wrong alignment on EndBattleAIController_ResetWorkBool");
static_assert(sizeof(EndBattleAIController_ResetWorkBool) == 0x000008, "Wrong size on EndBattleAIController_ResetWorkBool");
static_assert(offsetof(EndBattleAIController_ResetWorkBool, Name_0) == 0x000000, "Member 'EndBattleAIController_ResetWorkBool::Name_0' has a wrong offset!");

// Function EndGame.EndBattleAIController.ResetWorkFloat
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAIController_ResetWorkFloat final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_ResetWorkFloat) == 0x000004, "Wrong alignment on EndBattleAIController_ResetWorkFloat");
static_assert(sizeof(EndBattleAIController_ResetWorkFloat) == 0x000008, "Wrong size on EndBattleAIController_ResetWorkFloat");
static_assert(offsetof(EndBattleAIController_ResetWorkFloat, Name_0) == 0x000000, "Member 'EndBattleAIController_ResetWorkFloat::Name_0' has a wrong offset!");

// Function EndGame.EndBattleAIController.ResetWorkInt32
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAIController_ResetWorkInt32 final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_ResetWorkInt32) == 0x000004, "Wrong alignment on EndBattleAIController_ResetWorkInt32");
static_assert(sizeof(EndBattleAIController_ResetWorkInt32) == 0x000008, "Wrong size on EndBattleAIController_ResetWorkInt32");
static_assert(offsetof(EndBattleAIController_ResetWorkInt32, Name_0) == 0x000000, "Member 'EndBattleAIController_ResetWorkInt32::Name_0' has a wrong offset!");

// Function EndGame.EndBattleAIController.ResetWorkName
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAIController_ResetWorkName final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_ResetWorkName) == 0x000004, "Wrong alignment on EndBattleAIController_ResetWorkName");
static_assert(sizeof(EndBattleAIController_ResetWorkName) == 0x000008, "Wrong size on EndBattleAIController_ResetWorkName");
static_assert(offsetof(EndBattleAIController_ResetWorkName, Name_0) == 0x000000, "Member 'EndBattleAIController_ResetWorkName::Name_0' has a wrong offset!");

// Function EndGame.EndBattleAIController.ResetWorkRotator
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAIController_ResetWorkRotator final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_ResetWorkRotator) == 0x000004, "Wrong alignment on EndBattleAIController_ResetWorkRotator");
static_assert(sizeof(EndBattleAIController_ResetWorkRotator) == 0x000008, "Wrong size on EndBattleAIController_ResetWorkRotator");
static_assert(offsetof(EndBattleAIController_ResetWorkRotator, Name_0) == 0x000000, "Member 'EndBattleAIController_ResetWorkRotator::Name_0' has a wrong offset!");

// Function EndGame.EndBattleAIController.ResetWorkVector
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAIController_ResetWorkVector final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_ResetWorkVector) == 0x000004, "Wrong alignment on EndBattleAIController_ResetWorkVector");
static_assert(sizeof(EndBattleAIController_ResetWorkVector) == 0x000008, "Wrong size on EndBattleAIController_ResetWorkVector");
static_assert(offsetof(EndBattleAIController_ResetWorkVector, Name_0) == 0x000000, "Member 'EndBattleAIController_ResetWorkVector::Name_0' has a wrong offset!");

// Function EndGame.EndBattleAIController.SelfDisappear
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAIController_SelfDisappear final
{
public:
	bool                                          drawPause;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_SelfDisappear) == 0x000001, "Wrong alignment on EndBattleAIController_SelfDisappear");
static_assert(sizeof(EndBattleAIController_SelfDisappear) == 0x000001, "Wrong size on EndBattleAIController_SelfDisappear");
static_assert(offsetof(EndBattleAIController_SelfDisappear, drawPause) == 0x000000, "Member 'EndBattleAIController_SelfDisappear::drawPause' has a wrong offset!");

// Function EndGame.EndBattleAIController.SetActionTime
// 0x000C (0x000C - 0x0000)
struct EndBattleAIController_SetActionTime final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InTime;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_SetActionTime) == 0x000004, "Wrong alignment on EndBattleAIController_SetActionTime");
static_assert(sizeof(EndBattleAIController_SetActionTime) == 0x00000C, "Wrong size on EndBattleAIController_SetActionTime");
static_assert(offsetof(EndBattleAIController_SetActionTime, InName) == 0x000000, "Member 'EndBattleAIController_SetActionTime::InName' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_SetActionTime, InTime) == 0x000008, "Member 'EndBattleAIController_SetActionTime::InTime' has a wrong offset!");

// Function EndGame.EndBattleAIController.SetAerialBoidsLeader
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAIController_SetAerialBoidsLeader final
{
public:
	class AEndCharacter*                          InLeader;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_SetAerialBoidsLeader) == 0x000008, "Wrong alignment on EndBattleAIController_SetAerialBoidsLeader");
static_assert(sizeof(EndBattleAIController_SetAerialBoidsLeader) == 0x000008, "Wrong size on EndBattleAIController_SetAerialBoidsLeader");
static_assert(offsetof(EndBattleAIController_SetAerialBoidsLeader, InLeader) == 0x000000, "Member 'EndBattleAIController_SetAerialBoidsLeader::InLeader' has a wrong offset!");

// Function EndGame.EndBattleAIController.SetAerialMoveType
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAIController_SetAerialMoveType final
{
public:
	EBattleAirMoveType                            InType;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_SetAerialMoveType) == 0x000001, "Wrong alignment on EndBattleAIController_SetAerialMoveType");
static_assert(sizeof(EndBattleAIController_SetAerialMoveType) == 0x000001, "Wrong size on EndBattleAIController_SetAerialMoveType");
static_assert(offsetof(EndBattleAIController_SetAerialMoveType, InType) == 0x000000, "Member 'EndBattleAIController_SetAerialMoveType::InType' has a wrong offset!");

// Function EndGame.EndBattleAIController.SetAISpec
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAIController_SetAISpec final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_SetAISpec) == 0x000004, "Wrong alignment on EndBattleAIController_SetAISpec");
static_assert(sizeof(EndBattleAIController_SetAISpec) == 0x000008, "Wrong size on EndBattleAIController_SetAISpec");
static_assert(offsetof(EndBattleAIController_SetAISpec, InName) == 0x000000, "Member 'EndBattleAIController_SetAISpec::InName' has a wrong offset!");

// Function EndGame.EndBattleAIController.SetAngleRangeTargetPoint
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAIController_SetAngleRangeTargetPoint final
{
public:
	class FName                                   SocketName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         baseAngle;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         angleRange;                                        // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_SetAngleRangeTargetPoint) == 0x000004, "Wrong alignment on EndBattleAIController_SetAngleRangeTargetPoint");
static_assert(sizeof(EndBattleAIController_SetAngleRangeTargetPoint) == 0x000010, "Wrong size on EndBattleAIController_SetAngleRangeTargetPoint");
static_assert(offsetof(EndBattleAIController_SetAngleRangeTargetPoint, SocketName) == 0x000000, "Member 'EndBattleAIController_SetAngleRangeTargetPoint::SocketName' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_SetAngleRangeTargetPoint, baseAngle) == 0x000008, "Member 'EndBattleAIController_SetAngleRangeTargetPoint::baseAngle' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_SetAngleRangeTargetPoint, angleRange) == 0x00000C, "Member 'EndBattleAIController_SetAngleRangeTargetPoint::angleRange' has a wrong offset!");

// Function EndGame.EndBattleAIController.SetBattleAbilityRotateStateLocation
// 0x000C (0x000C - 0x0000)
struct EndBattleAIController_SetBattleAbilityRotateStateLocation final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_SetBattleAbilityRotateStateLocation) == 0x000004, "Wrong alignment on EndBattleAIController_SetBattleAbilityRotateStateLocation");
static_assert(sizeof(EndBattleAIController_SetBattleAbilityRotateStateLocation) == 0x00000C, "Wrong size on EndBattleAIController_SetBattleAbilityRotateStateLocation");
static_assert(offsetof(EndBattleAIController_SetBattleAbilityRotateStateLocation, Location) == 0x000000, "Member 'EndBattleAIController_SetBattleAbilityRotateStateLocation::Location' has a wrong offset!");

// Function EndGame.EndBattleAIController.SetBattleAbilityRotateStatePointName
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAIController_SetBattleAbilityRotateStatePointName final
{
public:
	class FName                                   modifierVolumeName;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_SetBattleAbilityRotateStatePointName) == 0x000004, "Wrong alignment on EndBattleAIController_SetBattleAbilityRotateStatePointName");
static_assert(sizeof(EndBattleAIController_SetBattleAbilityRotateStatePointName) == 0x000008, "Wrong size on EndBattleAIController_SetBattleAbilityRotateStatePointName");
static_assert(offsetof(EndBattleAIController_SetBattleAbilityRotateStatePointName, modifierVolumeName) == 0x000000, "Member 'EndBattleAIController_SetBattleAbilityRotateStatePointName::modifierVolumeName' has a wrong offset!");

// Function EndGame.EndBattleAIController.SetBattleAIFlag
// 0x0002 (0x0002 - 0x0000)
struct EndBattleAIController_SetBattleAIFlag final
{
public:
	EBattleAIInfoFlag                             InType;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InFlag;                                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_SetBattleAIFlag) == 0x000001, "Wrong alignment on EndBattleAIController_SetBattleAIFlag");
static_assert(sizeof(EndBattleAIController_SetBattleAIFlag) == 0x000002, "Wrong size on EndBattleAIController_SetBattleAIFlag");
static_assert(offsetof(EndBattleAIController_SetBattleAIFlag, InType) == 0x000000, "Member 'EndBattleAIController_SetBattleAIFlag::InType' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_SetBattleAIFlag, InFlag) == 0x000001, "Member 'EndBattleAIController_SetBattleAIFlag::InFlag' has a wrong offset!");

// Function EndGame.EndBattleAIController.SetBattleAIParam
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAIController_SetBattleAIParam final
{
public:
	EBattleAIInfoParam                            InType;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InParam;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_SetBattleAIParam) == 0x000004, "Wrong alignment on EndBattleAIController_SetBattleAIParam");
static_assert(sizeof(EndBattleAIController_SetBattleAIParam) == 0x000008, "Wrong size on EndBattleAIController_SetBattleAIParam");
static_assert(offsetof(EndBattleAIController_SetBattleAIParam, InType) == 0x000000, "Member 'EndBattleAIController_SetBattleAIParam::InType' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_SetBattleAIParam, InParam) == 0x000004, "Member 'EndBattleAIController_SetBattleAIParam::InParam' has a wrong offset!");

// Function EndGame.EndBattleAIController.SetBattleSafeTransform
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAIController_SetBattleSafeTransform final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_SetBattleSafeTransform) == 0x000001, "Wrong alignment on EndBattleAIController_SetBattleSafeTransform");
static_assert(sizeof(EndBattleAIController_SetBattleSafeTransform) == 0x000001, "Wrong size on EndBattleAIController_SetBattleSafeTransform");
static_assert(offsetof(EndBattleAIController_SetBattleSafeTransform, bEnable) == 0x000000, "Member 'EndBattleAIController_SetBattleSafeTransform::bEnable' has a wrong offset!");

// Function EndGame.EndBattleAIController.SetBattleSensorShapeType
// 0x0018 (0x0018 - 0x0000)
struct EndBattleAIController_SetBattleSensorShapeType final
{
public:
	EBattleSensorShapeType                        InSensorShapeType;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InAngleRange;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InRadiusMin;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InRadiusMax;                                       // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InSocketName;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_SetBattleSensorShapeType) == 0x000004, "Wrong alignment on EndBattleAIController_SetBattleSensorShapeType");
static_assert(sizeof(EndBattleAIController_SetBattleSensorShapeType) == 0x000018, "Wrong size on EndBattleAIController_SetBattleSensorShapeType");
static_assert(offsetof(EndBattleAIController_SetBattleSensorShapeType, InSensorShapeType) == 0x000000, "Member 'EndBattleAIController_SetBattleSensorShapeType::InSensorShapeType' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_SetBattleSensorShapeType, InAngleRange) == 0x000004, "Member 'EndBattleAIController_SetBattleSensorShapeType::InAngleRange' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_SetBattleSensorShapeType, InRadiusMin) == 0x000008, "Member 'EndBattleAIController_SetBattleSensorShapeType::InRadiusMin' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_SetBattleSensorShapeType, InRadiusMax) == 0x00000C, "Member 'EndBattleAIController_SetBattleSensorShapeType::InRadiusMax' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_SetBattleSensorShapeType, InSocketName) == 0x000010, "Member 'EndBattleAIController_SetBattleSensorShapeType::InSocketName' has a wrong offset!");

// Function EndGame.EndBattleAIController.SetBodyDummyParts
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAIController_SetBodyDummyParts final
{
public:
	class FName                                   PartsSpecID;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_SetBodyDummyParts) == 0x000004, "Wrong alignment on EndBattleAIController_SetBodyDummyParts");
static_assert(sizeof(EndBattleAIController_SetBodyDummyParts) == 0x000008, "Wrong size on EndBattleAIController_SetBodyDummyParts");
static_assert(offsetof(EndBattleAIController_SetBodyDummyParts, PartsSpecID) == 0x000000, "Member 'EndBattleAIController_SetBodyDummyParts::PartsSpecID' has a wrong offset!");

// Function EndGame.EndBattleAIController.SetBP
// 0x0004 (0x0004 - 0x0000)
struct EndBattleAIController_SetBP final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_SetBP) == 0x000004, "Wrong alignment on EndBattleAIController_SetBP");
static_assert(sizeof(EndBattleAIController_SetBP) == 0x000004, "Wrong size on EndBattleAIController_SetBP");
static_assert(offsetof(EndBattleAIController_SetBP, Value) == 0x000000, "Member 'EndBattleAIController_SetBP::Value' has a wrong offset!");

// Function EndGame.EndBattleAIController.SetBPAttackChance
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAIController_SetBPAttackChance final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_SetBPAttackChance) == 0x000001, "Wrong alignment on EndBattleAIController_SetBPAttackChance");
static_assert(sizeof(EndBattleAIController_SetBPAttackChance) == 0x000001, "Wrong size on EndBattleAIController_SetBPAttackChance");
static_assert(offsetof(EndBattleAIController_SetBPAttackChance, Enable) == 0x000000, "Member 'EndBattleAIController_SetBPAttackChance::Enable' has a wrong offset!");

// Function EndGame.EndBattleAIController.SetBPDamageCoefficient
// 0x0004 (0x0004 - 0x0000)
struct EndBattleAIController_SetBPDamageCoefficient final
{
public:
	float                                         coefficient;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_SetBPDamageCoefficient) == 0x000004, "Wrong alignment on EndBattleAIController_SetBPDamageCoefficient");
static_assert(sizeof(EndBattleAIController_SetBPDamageCoefficient) == 0x000004, "Wrong size on EndBattleAIController_SetBPDamageCoefficient");
static_assert(offsetof(EndBattleAIController_SetBPDamageCoefficient, coefficient) == 0x000000, "Member 'EndBattleAIController_SetBPDamageCoefficient::coefficient' has a wrong offset!");

// Function EndGame.EndBattleAIController.SetBPPercent
// 0x0004 (0x0004 - 0x0000)
struct EndBattleAIController_SetBPPercent final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_SetBPPercent) == 0x000004, "Wrong alignment on EndBattleAIController_SetBPPercent");
static_assert(sizeof(EndBattleAIController_SetBPPercent) == 0x000004, "Wrong size on EndBattleAIController_SetBPPercent");
static_assert(offsetof(EndBattleAIController_SetBPPercent, Value) == 0x000000, "Member 'EndBattleAIController_SetBPPercent::Value' has a wrong offset!");

// Function EndGame.EndBattleAIController.SetBurstForceAerial
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAIController_SetBurstForceAerial final
{
public:
	bool                                          Flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_SetBurstForceAerial) == 0x000001, "Wrong alignment on EndBattleAIController_SetBurstForceAerial");
static_assert(sizeof(EndBattleAIController_SetBurstForceAerial) == 0x000001, "Wrong size on EndBattleAIController_SetBurstForceAerial");
static_assert(offsetof(EndBattleAIController_SetBurstForceAerial, Flag) == 0x000000, "Member 'EndBattleAIController_SetBurstForceAerial::Flag' has a wrong offset!");

// Function EndGame.EndBattleAIController.SetCapturableBySummon
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAIController_SetCapturableBySummon final
{
public:
	bool                                          Flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_SetCapturableBySummon) == 0x000001, "Wrong alignment on EndBattleAIController_SetCapturableBySummon");
static_assert(sizeof(EndBattleAIController_SetCapturableBySummon) == 0x000001, "Wrong size on EndBattleAIController_SetCapturableBySummon");
static_assert(offsetof(EndBattleAIController_SetCapturableBySummon, Flag) == 0x000000, "Member 'EndBattleAIController_SetCapturableBySummon::Flag' has a wrong offset!");

// Function EndGame.EndBattleAIController.SetCommandLinkageTimeScale
// 0x0004 (0x0004 - 0x0000)
struct EndBattleAIController_SetCommandLinkageTimeScale final
{
public:
	float                                         Scale;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_SetCommandLinkageTimeScale) == 0x000004, "Wrong alignment on EndBattleAIController_SetCommandLinkageTimeScale");
static_assert(sizeof(EndBattleAIController_SetCommandLinkageTimeScale) == 0x000004, "Wrong size on EndBattleAIController_SetCommandLinkageTimeScale");
static_assert(offsetof(EndBattleAIController_SetCommandLinkageTimeScale, Scale) == 0x000000, "Member 'EndBattleAIController_SetCommandLinkageTimeScale::Scale' has a wrong offset!");

// Function EndGame.EndBattleAIController.SetConfront
// 0x000C (0x000C - 0x0000)
struct EndBattleAIController_SetConfront final
{
public:
	float                                         InNear;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InConfront;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InFar;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_SetConfront) == 0x000004, "Wrong alignment on EndBattleAIController_SetConfront");
static_assert(sizeof(EndBattleAIController_SetConfront) == 0x00000C, "Wrong size on EndBattleAIController_SetConfront");
static_assert(offsetof(EndBattleAIController_SetConfront, InNear) == 0x000000, "Member 'EndBattleAIController_SetConfront::InNear' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_SetConfront, InConfront) == 0x000004, "Member 'EndBattleAIController_SetConfront::InConfront' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_SetConfront, InFar) == 0x000008, "Member 'EndBattleAIController_SetConfront::InFar' has a wrong offset!");

// Function EndGame.EndBattleAIController.SetCountDownTimer
// 0x000C (0x000C - 0x0000)
struct EndBattleAIController_SetCountDownTimer final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InParam;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_SetCountDownTimer) == 0x000004, "Wrong alignment on EndBattleAIController_SetCountDownTimer");
static_assert(sizeof(EndBattleAIController_SetCountDownTimer) == 0x00000C, "Wrong size on EndBattleAIController_SetCountDownTimer");
static_assert(offsetof(EndBattleAIController_SetCountDownTimer, InName) == 0x000000, "Member 'EndBattleAIController_SetCountDownTimer::InName' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_SetCountDownTimer, InParam) == 0x000008, "Member 'EndBattleAIController_SetCountDownTimer::InParam' has a wrong offset!");

// Function EndGame.EndBattleAIController.SetDisableBPDamage
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAIController_SetDisableBPDamage final
{
public:
	bool                                          disable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_SetDisableBPDamage) == 0x000001, "Wrong alignment on EndBattleAIController_SetDisableBPDamage");
static_assert(sizeof(EndBattleAIController_SetDisableBPDamage) == 0x000001, "Wrong size on EndBattleAIController_SetDisableBPDamage");
static_assert(offsetof(EndBattleAIController_SetDisableBPDamage, disable) == 0x000000, "Member 'EndBattleAIController_SetDisableBPDamage::disable' has a wrong offset!");

// Function EndGame.EndBattleAIController.SetDisableBurst
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAIController_SetDisableBurst final
{
public:
	bool                                          disable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_SetDisableBurst) == 0x000001, "Wrong alignment on EndBattleAIController_SetDisableBurst");
static_assert(sizeof(EndBattleAIController_SetDisableBurst) == 0x000001, "Wrong size on EndBattleAIController_SetDisableBurst");
static_assert(offsetof(EndBattleAIController_SetDisableBurst, disable) == 0x000000, "Member 'EndBattleAIController_SetDisableBurst::disable' has a wrong offset!");

// Function EndGame.EndBattleAIController.SetDisableParts
// 0x000C (0x000C - 0x0000)
struct EndBattleAIController_SetDisableParts final
{
public:
	class FName                                   partsID;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisableTarget;                                    // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisableDamage;                                    // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisableDamageCollision;                           // 0x000A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x1];                                        // 0x000B(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAIController_SetDisableParts) == 0x000004, "Wrong alignment on EndBattleAIController_SetDisableParts");
static_assert(sizeof(EndBattleAIController_SetDisableParts) == 0x00000C, "Wrong size on EndBattleAIController_SetDisableParts");
static_assert(offsetof(EndBattleAIController_SetDisableParts, partsID) == 0x000000, "Member 'EndBattleAIController_SetDisableParts::partsID' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_SetDisableParts, bDisableTarget) == 0x000008, "Member 'EndBattleAIController_SetDisableParts::bDisableTarget' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_SetDisableParts, bDisableDamage) == 0x000009, "Member 'EndBattleAIController_SetDisableParts::bDisableDamage' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_SetDisableParts, bDisableDamageCollision) == 0x00000A, "Member 'EndBattleAIController_SetDisableParts::bDisableDamageCollision' has a wrong offset!");

// Function EndGame.EndBattleAIController.SetDisableReaction
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAIController_SetDisableReaction final
{
public:
	bool                                          disable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_SetDisableReaction) == 0x000001, "Wrong alignment on EndBattleAIController_SetDisableReaction");
static_assert(sizeof(EndBattleAIController_SetDisableReaction) == 0x000001, "Wrong size on EndBattleAIController_SetDisableReaction");
static_assert(offsetof(EndBattleAIController_SetDisableReaction, disable) == 0x000000, "Member 'EndBattleAIController_SetDisableReaction::disable' has a wrong offset!");

// Function EndGame.EndBattleAIController.SetDisableRemainAttributeEffect
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAIController_SetDisableRemainAttributeEffect final
{
public:
	EEndBattleAttributeType                       attribute;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_SetDisableRemainAttributeEffect) == 0x000001, "Wrong alignment on EndBattleAIController_SetDisableRemainAttributeEffect");
static_assert(sizeof(EndBattleAIController_SetDisableRemainAttributeEffect) == 0x000001, "Wrong size on EndBattleAIController_SetDisableRemainAttributeEffect");
static_assert(offsetof(EndBattleAIController_SetDisableRemainAttributeEffect, attribute) == 0x000000, "Member 'EndBattleAIController_SetDisableRemainAttributeEffect::attribute' has a wrong offset!");

// Function EndGame.EndBattleAIController.SetDisableSuspendAction
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAIController_SetDisableSuspendAction final
{
public:
	bool                                          disable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_SetDisableSuspendAction) == 0x000001, "Wrong alignment on EndBattleAIController_SetDisableSuspendAction");
static_assert(sizeof(EndBattleAIController_SetDisableSuspendAction) == 0x000001, "Wrong size on EndBattleAIController_SetDisableSuspendAction");
static_assert(offsetof(EndBattleAIController_SetDisableSuspendAction, disable) == 0x000000, "Member 'EndBattleAIController_SetDisableSuspendAction::disable' has a wrong offset!");

// Function EndGame.EndBattleAIController.SetDisableTargetPoint
// 0x000C (0x000C - 0x0000)
struct EndBattleAIController_SetDisableTargetPoint final
{
public:
	class FName                                   SocketName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisable;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAIController_SetDisableTargetPoint) == 0x000004, "Wrong alignment on EndBattleAIController_SetDisableTargetPoint");
static_assert(sizeof(EndBattleAIController_SetDisableTargetPoint) == 0x00000C, "Wrong size on EndBattleAIController_SetDisableTargetPoint");
static_assert(offsetof(EndBattleAIController_SetDisableTargetPoint, SocketName) == 0x000000, "Member 'EndBattleAIController_SetDisableTargetPoint::SocketName' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_SetDisableTargetPoint, bDisable) == 0x000008, "Member 'EndBattleAIController_SetDisableTargetPoint::bDisable' has a wrong offset!");

// Function EndGame.EndBattleAIController.SetEnableCompletedAbilityExtraActionEvent
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAIController_SetEnableCompletedAbilityExtraActionEvent final
{
public:
	bool                                          InEnable;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_SetEnableCompletedAbilityExtraActionEvent) == 0x000001, "Wrong alignment on EndBattleAIController_SetEnableCompletedAbilityExtraActionEvent");
static_assert(sizeof(EndBattleAIController_SetEnableCompletedAbilityExtraActionEvent) == 0x000001, "Wrong size on EndBattleAIController_SetEnableCompletedAbilityExtraActionEvent");
static_assert(offsetof(EndBattleAIController_SetEnableCompletedAbilityExtraActionEvent, InEnable) == 0x000000, "Member 'EndBattleAIController_SetEnableCompletedAbilityExtraActionEvent::InEnable' has a wrong offset!");

// Function EndGame.EndBattleAIController.SetEnableContactWallReturnAngle
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAIController_SetEnableContactWallReturnAngle final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_SetEnableContactWallReturnAngle) == 0x000001, "Wrong alignment on EndBattleAIController_SetEnableContactWallReturnAngle");
static_assert(sizeof(EndBattleAIController_SetEnableContactWallReturnAngle) == 0x000001, "Wrong size on EndBattleAIController_SetEnableContactWallReturnAngle");
static_assert(offsetof(EndBattleAIController_SetEnableContactWallReturnAngle, Enable) == 0x000000, "Member 'EndBattleAIController_SetEnableContactWallReturnAngle::Enable' has a wrong offset!");

// Function EndGame.EndBattleAIController.SetEnabledUpdateAimLocation
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAIController_SetEnabledUpdateAimLocation final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_SetEnabledUpdateAimLocation) == 0x000001, "Wrong alignment on EndBattleAIController_SetEnabledUpdateAimLocation");
static_assert(sizeof(EndBattleAIController_SetEnabledUpdateAimLocation) == 0x000001, "Wrong size on EndBattleAIController_SetEnabledUpdateAimLocation");
static_assert(offsetof(EndBattleAIController_SetEnabledUpdateAimLocation, bEnabled) == 0x000000, "Member 'EndBattleAIController_SetEnabledUpdateAimLocation::bEnabled' has a wrong offset!");

// Function EndGame.EndBattleAIController.SetEnablePauseUpdateDamageSource
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAIController_SetEnablePauseUpdateDamageSource final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_SetEnablePauseUpdateDamageSource) == 0x000001, "Wrong alignment on EndBattleAIController_SetEnablePauseUpdateDamageSource");
static_assert(sizeof(EndBattleAIController_SetEnablePauseUpdateDamageSource) == 0x000001, "Wrong size on EndBattleAIController_SetEnablePauseUpdateDamageSource");
static_assert(offsetof(EndBattleAIController_SetEnablePauseUpdateDamageSource, Enable) == 0x000000, "Member 'EndBattleAIController_SetEnablePauseUpdateDamageSource::Enable' has a wrong offset!");

// Function EndGame.EndBattleAIController.SetEnableWeakCondition
// 0x0002 (0x0002 - 0x0000)
struct EndBattleAIController_SetEnableWeakCondition final
{
public:
	EEndWeakConditionEnable                       Condition;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndWeakConditionEnableOption                 Option;                                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_SetEnableWeakCondition) == 0x000001, "Wrong alignment on EndBattleAIController_SetEnableWeakCondition");
static_assert(sizeof(EndBattleAIController_SetEnableWeakCondition) == 0x000002, "Wrong size on EndBattleAIController_SetEnableWeakCondition");
static_assert(offsetof(EndBattleAIController_SetEnableWeakCondition, Condition) == 0x000000, "Member 'EndBattleAIController_SetEnableWeakCondition::Condition' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_SetEnableWeakCondition, Option) == 0x000001, "Member 'EndBattleAIController_SetEnableWeakCondition::Option' has a wrong offset!");

// Function EndGame.EndBattleAIController.SetEyeTraceFlag
// 0x0003 (0x0003 - 0x0000)
struct EndBattleAIController_SetEyeTraceFlag final
{
public:
	bool                                          InTarget;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InParty;                                           // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InEnemy;                                           // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_SetEyeTraceFlag) == 0x000001, "Wrong alignment on EndBattleAIController_SetEyeTraceFlag");
static_assert(sizeof(EndBattleAIController_SetEyeTraceFlag) == 0x000003, "Wrong size on EndBattleAIController_SetEyeTraceFlag");
static_assert(offsetof(EndBattleAIController_SetEyeTraceFlag, InTarget) == 0x000000, "Member 'EndBattleAIController_SetEyeTraceFlag::InTarget' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_SetEyeTraceFlag, InParty) == 0x000001, "Member 'EndBattleAIController_SetEyeTraceFlag::InParty' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_SetEyeTraceFlag, InEnemy) == 0x000002, "Member 'EndBattleAIController_SetEyeTraceFlag::InEnemy' has a wrong offset!");

// Function EndGame.EndBattleAIController.SetFly
// 0x000C (0x000C - 0x0000)
struct EndBattleAIController_SetFly final
{
public:
	float                                         InHeight;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InUpSpeed;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InDownSpeed;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_SetFly) == 0x000004, "Wrong alignment on EndBattleAIController_SetFly");
static_assert(sizeof(EndBattleAIController_SetFly) == 0x00000C, "Wrong size on EndBattleAIController_SetFly");
static_assert(offsetof(EndBattleAIController_SetFly, InHeight) == 0x000000, "Member 'EndBattleAIController_SetFly::InHeight' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_SetFly, InUpSpeed) == 0x000004, "Member 'EndBattleAIController_SetFly::InUpSpeed' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_SetFly, InDownSpeed) == 0x000008, "Member 'EndBattleAIController_SetFly::InDownSpeed' has a wrong offset!");

// Function EndGame.EndBattleAIController.SetForceEnableTargetSpecialStatusChange
// 0x0002 (0x0002 - 0x0000)
struct EndBattleAIController_SetForceEnableTargetSpecialStatusChange final
{
public:
	EEndBattleSpecialStatusChangeType             Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Enable;                                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_SetForceEnableTargetSpecialStatusChange) == 0x000001, "Wrong alignment on EndBattleAIController_SetForceEnableTargetSpecialStatusChange");
static_assert(sizeof(EndBattleAIController_SetForceEnableTargetSpecialStatusChange) == 0x000002, "Wrong size on EndBattleAIController_SetForceEnableTargetSpecialStatusChange");
static_assert(offsetof(EndBattleAIController_SetForceEnableTargetSpecialStatusChange, Type) == 0x000000, "Member 'EndBattleAIController_SetForceEnableTargetSpecialStatusChange::Type' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_SetForceEnableTargetSpecialStatusChange, Enable) == 0x000001, "Member 'EndBattleAIController_SetForceEnableTargetSpecialStatusChange::Enable' has a wrong offset!");

// Function EndGame.EndBattleAIController.SetForceMoveType
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAIController_SetForceMoveType final
{
public:
	EEndAiMoveMode                                InType;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_SetForceMoveType) == 0x000001, "Wrong alignment on EndBattleAIController_SetForceMoveType");
static_assert(sizeof(EndBattleAIController_SetForceMoveType) == 0x000001, "Wrong size on EndBattleAIController_SetForceMoveType");
static_assert(offsetof(EndBattleAIController_SetForceMoveType, InType) == 0x000000, "Member 'EndBattleAIController_SetForceMoveType::InType' has a wrong offset!");

// Function EndGame.EndBattleAIController.SetHPMinLimit
// 0x0004 (0x0004 - 0x0000)
struct EndBattleAIController_SetHPMinLimit final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_SetHPMinLimit) == 0x000004, "Wrong alignment on EndBattleAIController_SetHPMinLimit");
static_assert(sizeof(EndBattleAIController_SetHPMinLimit) == 0x000004, "Wrong size on EndBattleAIController_SetHPMinLimit");
static_assert(offsetof(EndBattleAIController_SetHPMinLimit, Value) == 0x000000, "Member 'EndBattleAIController_SetHPMinLimit::Value' has a wrong offset!");

// Function EndGame.EndBattleAIController.SetHPMinLimitAIPCAttackPercent
// 0x0004 (0x0004 - 0x0000)
struct EndBattleAIController_SetHPMinLimitAIPCAttackPercent final
{
public:
	int32                                         InPercent;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_SetHPMinLimitAIPCAttackPercent) == 0x000004, "Wrong alignment on EndBattleAIController_SetHPMinLimitAIPCAttackPercent");
static_assert(sizeof(EndBattleAIController_SetHPMinLimitAIPCAttackPercent) == 0x000004, "Wrong size on EndBattleAIController_SetHPMinLimitAIPCAttackPercent");
static_assert(offsetof(EndBattleAIController_SetHPMinLimitAIPCAttackPercent, InPercent) == 0x000000, "Member 'EndBattleAIController_SetHPMinLimitAIPCAttackPercent::InPercent' has a wrong offset!");

// Function EndGame.EndBattleAIController.SetHPMinLimitPassiveDamagePercent
// 0x0004 (0x0004 - 0x0000)
struct EndBattleAIController_SetHPMinLimitPassiveDamagePercent final
{
public:
	int32                                         InPercent;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_SetHPMinLimitPassiveDamagePercent) == 0x000004, "Wrong alignment on EndBattleAIController_SetHPMinLimitPassiveDamagePercent");
static_assert(sizeof(EndBattleAIController_SetHPMinLimitPassiveDamagePercent) == 0x000004, "Wrong size on EndBattleAIController_SetHPMinLimitPassiveDamagePercent");
static_assert(offsetof(EndBattleAIController_SetHPMinLimitPassiveDamagePercent, InPercent) == 0x000000, "Member 'EndBattleAIController_SetHPMinLimitPassiveDamagePercent::InPercent' has a wrong offset!");

// Function EndGame.EndBattleAIController.SetHPMinLimitPercent
// 0x0004 (0x0004 - 0x0000)
struct EndBattleAIController_SetHPMinLimitPercent final
{
public:
	int32                                         InPercent;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_SetHPMinLimitPercent) == 0x000004, "Wrong alignment on EndBattleAIController_SetHPMinLimitPercent");
static_assert(sizeof(EndBattleAIController_SetHPMinLimitPercent) == 0x000004, "Wrong size on EndBattleAIController_SetHPMinLimitPercent");
static_assert(offsetof(EndBattleAIController_SetHPMinLimitPercent, InPercent) == 0x000000, "Member 'EndBattleAIController_SetHPMinLimitPercent::InPercent' has a wrong offset!");

// Function EndGame.EndBattleAIController.SetHPPercent
// 0x0004 (0x0004 - 0x0000)
struct EndBattleAIController_SetHPPercent final
{
public:
	int32                                         Percent;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_SetHPPercent) == 0x000004, "Wrong alignment on EndBattleAIController_SetHPPercent");
static_assert(sizeof(EndBattleAIController_SetHPPercent) == 0x000004, "Wrong size on EndBattleAIController_SetHPPercent");
static_assert(offsetof(EndBattleAIController_SetHPPercent, Percent) == 0x000000, "Member 'EndBattleAIController_SetHPPercent::Percent' has a wrong offset!");

// Function EndGame.EndBattleAIController.SetIgnore
// 0x0004 (0x0004 - 0x0000)
struct EndBattleAIController_SetIgnore final
{
public:
	float                                         InTime;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_SetIgnore) == 0x000004, "Wrong alignment on EndBattleAIController_SetIgnore");
static_assert(sizeof(EndBattleAIController_SetIgnore) == 0x000004, "Wrong size on EndBattleAIController_SetIgnore");
static_assert(offsetof(EndBattleAIController_SetIgnore, InTime) == 0x000000, "Member 'EndBattleAIController_SetIgnore::InTime' has a wrong offset!");

// Function EndGame.EndBattleAIController.SetMeshDisp
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAIController_SetMeshDisp final
{
public:
	bool                                          InDisp;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_SetMeshDisp) == 0x000001, "Wrong alignment on EndBattleAIController_SetMeshDisp");
static_assert(sizeof(EndBattleAIController_SetMeshDisp) == 0x000001, "Wrong size on EndBattleAIController_SetMeshDisp");
static_assert(offsetof(EndBattleAIController_SetMeshDisp, InDisp) == 0x000000, "Member 'EndBattleAIController_SetMeshDisp::InDisp' has a wrong offset!");

// Function EndGame.EndBattleAIController.SetMovementMode
// 0x0005 (0x0005 - 0x0000)
struct EndBattleAIController_SetMovementMode final
{
public:
	bool                                          bMovable;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHitWall;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHitObject;                                        // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFitFloor;                                         // 0x0003(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMaxWeight;                                        // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_SetMovementMode) == 0x000001, "Wrong alignment on EndBattleAIController_SetMovementMode");
static_assert(sizeof(EndBattleAIController_SetMovementMode) == 0x000005, "Wrong size on EndBattleAIController_SetMovementMode");
static_assert(offsetof(EndBattleAIController_SetMovementMode, bMovable) == 0x000000, "Member 'EndBattleAIController_SetMovementMode::bMovable' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_SetMovementMode, bHitWall) == 0x000001, "Member 'EndBattleAIController_SetMovementMode::bHitWall' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_SetMovementMode, bHitObject) == 0x000002, "Member 'EndBattleAIController_SetMovementMode::bHitObject' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_SetMovementMode, bFitFloor) == 0x000003, "Member 'EndBattleAIController_SetMovementMode::bFitFloor' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_SetMovementMode, bMaxWeight) == 0x000004, "Member 'EndBattleAIController_SetMovementMode::bMaxWeight' has a wrong offset!");

// Function EndGame.EndBattleAIController.SetMoveModeParam
// 0x000C (0x000C - 0x0000)
struct EndBattleAIController_SetMoveModeParam final
{
public:
	EBattleMoveType                               InType;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InStrafe;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InRunDistance;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InArrivalRadius;                                   // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_SetMoveModeParam) == 0x000004, "Wrong alignment on EndBattleAIController_SetMoveModeParam");
static_assert(sizeof(EndBattleAIController_SetMoveModeParam) == 0x00000C, "Wrong size on EndBattleAIController_SetMoveModeParam");
static_assert(offsetof(EndBattleAIController_SetMoveModeParam, InType) == 0x000000, "Member 'EndBattleAIController_SetMoveModeParam::InType' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_SetMoveModeParam, InStrafe) == 0x000001, "Member 'EndBattleAIController_SetMoveModeParam::InStrafe' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_SetMoveModeParam, InRunDistance) == 0x000004, "Member 'EndBattleAIController_SetMoveModeParam::InRunDistance' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_SetMoveModeParam, InArrivalRadius) == 0x000008, "Member 'EndBattleAIController_SetMoveModeParam::InArrivalRadius' has a wrong offset!");

// Function EndGame.EndBattleAIController.SetNextAbilityTarget
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAIController_SetNextAbilityTarget final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_SetNextAbilityTarget) == 0x000008, "Wrong alignment on EndBattleAIController_SetNextAbilityTarget");
static_assert(sizeof(EndBattleAIController_SetNextAbilityTarget) == 0x000008, "Wrong size on EndBattleAIController_SetNextAbilityTarget");
static_assert(offsetof(EndBattleAIController_SetNextAbilityTarget, InChara) == 0x000000, "Member 'EndBattleAIController_SetNextAbilityTarget::InChara' has a wrong offset!");

// Function EndGame.EndBattleAIController.SetNextWarpPosition
// 0x000C (0x000C - 0x0000)
struct EndBattleAIController_SetNextWarpPosition final
{
public:
	struct FVector                                warpPosition;                                      // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_SetNextWarpPosition) == 0x000004, "Wrong alignment on EndBattleAIController_SetNextWarpPosition");
static_assert(sizeof(EndBattleAIController_SetNextWarpPosition) == 0x00000C, "Wrong size on EndBattleAIController_SetNextWarpPosition");
static_assert(offsetof(EndBattleAIController_SetNextWarpPosition, warpPosition) == 0x000000, "Member 'EndBattleAIController_SetNextWarpPosition::warpPosition' has a wrong offset!");

// Function EndGame.EndBattleAIController.SetOtherMoveAnim
// 0x0018 (0x0018 - 0x0000)
struct EndBattleAIController_SetOtherMoveAnim final
{
public:
	class FName                                   InStart;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InLoop;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InEnd;                                             // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_SetOtherMoveAnim) == 0x000004, "Wrong alignment on EndBattleAIController_SetOtherMoveAnim");
static_assert(sizeof(EndBattleAIController_SetOtherMoveAnim) == 0x000018, "Wrong size on EndBattleAIController_SetOtherMoveAnim");
static_assert(offsetof(EndBattleAIController_SetOtherMoveAnim, InStart) == 0x000000, "Member 'EndBattleAIController_SetOtherMoveAnim::InStart' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_SetOtherMoveAnim, InLoop) == 0x000008, "Member 'EndBattleAIController_SetOtherMoveAnim::InLoop' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_SetOtherMoveAnim, InEnd) == 0x000010, "Member 'EndBattleAIController_SetOtherMoveAnim::InEnd' has a wrong offset!");

// Function EndGame.EndBattleAIController.SetOverrideAbilityKeep
// 0x0004 (0x0004 - 0x0000)
struct EndBattleAIController_SetOverrideAbilityKeep final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_SetOverrideAbilityKeep) == 0x000004, "Wrong alignment on EndBattleAIController_SetOverrideAbilityKeep");
static_assert(sizeof(EndBattleAIController_SetOverrideAbilityKeep) == 0x000004, "Wrong size on EndBattleAIController_SetOverrideAbilityKeep");
static_assert(offsetof(EndBattleAIController_SetOverrideAbilityKeep, Value) == 0x000000, "Member 'EndBattleAIController_SetOverrideAbilityKeep::Value' has a wrong offset!");

// Function EndGame.EndBattleAIController.SetOverrideAbilityRange
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAIController_SetOverrideAbilityRange final
{
public:
	float                                         InPrepareMin;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InPrepareMax;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InMin;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InMax;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_SetOverrideAbilityRange) == 0x000004, "Wrong alignment on EndBattleAIController_SetOverrideAbilityRange");
static_assert(sizeof(EndBattleAIController_SetOverrideAbilityRange) == 0x000010, "Wrong size on EndBattleAIController_SetOverrideAbilityRange");
static_assert(offsetof(EndBattleAIController_SetOverrideAbilityRange, InPrepareMin) == 0x000000, "Member 'EndBattleAIController_SetOverrideAbilityRange::InPrepareMin' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_SetOverrideAbilityRange, InPrepareMax) == 0x000004, "Member 'EndBattleAIController_SetOverrideAbilityRange::InPrepareMax' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_SetOverrideAbilityRange, InMin) == 0x000008, "Member 'EndBattleAIController_SetOverrideAbilityRange::InMin' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_SetOverrideAbilityRange, InMax) == 0x00000C, "Member 'EndBattleAIController_SetOverrideAbilityRange::InMax' has a wrong offset!");

// Function EndGame.EndBattleAIController.SetOverrideActiveAimAngle
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAIController_SetOverrideActiveAimAngle final
{
public:
	struct FVector2D                              ActiveYawRange;                                    // 0x0000(0x0008)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ActivePitchRange;                                  // 0x0008(0x0008)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_SetOverrideActiveAimAngle) == 0x000004, "Wrong alignment on EndBattleAIController_SetOverrideActiveAimAngle");
static_assert(sizeof(EndBattleAIController_SetOverrideActiveAimAngle) == 0x000010, "Wrong size on EndBattleAIController_SetOverrideActiveAimAngle");
static_assert(offsetof(EndBattleAIController_SetOverrideActiveAimAngle, ActiveYawRange) == 0x000000, "Member 'EndBattleAIController_SetOverrideActiveAimAngle::ActiveYawRange' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_SetOverrideActiveAimAngle, ActivePitchRange) == 0x000008, "Member 'EndBattleAIController_SetOverrideActiveAimAngle::ActivePitchRange' has a wrong offset!");

// Function EndGame.EndBattleAIController.SetOverrideAerialAroundPoint
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAIController_SetOverrideAerialAroundPoint final
{
public:
	bool                                          InOverride;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                InPoint;                                           // 0x0004(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_SetOverrideAerialAroundPoint) == 0x000004, "Wrong alignment on EndBattleAIController_SetOverrideAerialAroundPoint");
static_assert(sizeof(EndBattleAIController_SetOverrideAerialAroundPoint) == 0x000010, "Wrong size on EndBattleAIController_SetOverrideAerialAroundPoint");
static_assert(offsetof(EndBattleAIController_SetOverrideAerialAroundPoint, InOverride) == 0x000000, "Member 'EndBattleAIController_SetOverrideAerialAroundPoint::InOverride' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_SetOverrideAerialAroundPoint, InPoint) == 0x000004, "Member 'EndBattleAIController_SetOverrideAerialAroundPoint::InPoint' has a wrong offset!");

// Function EndGame.EndBattleAIController.SetOverrideAnim
// 0x0018 (0x0018 - 0x0000)
struct EndBattleAIController_SetOverrideAnim final
{
public:
	EEndLocomotionAnim                            InType;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   InName;                                            // 0x0004(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InInter;                                           // 0x000C(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndAnimWalkType                              InAfterType;                                       // 0x0014(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAIController_SetOverrideAnim) == 0x000004, "Wrong alignment on EndBattleAIController_SetOverrideAnim");
static_assert(sizeof(EndBattleAIController_SetOverrideAnim) == 0x000018, "Wrong size on EndBattleAIController_SetOverrideAnim");
static_assert(offsetof(EndBattleAIController_SetOverrideAnim, InType) == 0x000000, "Member 'EndBattleAIController_SetOverrideAnim::InType' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_SetOverrideAnim, InName) == 0x000004, "Member 'EndBattleAIController_SetOverrideAnim::InName' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_SetOverrideAnim, InInter) == 0x00000C, "Member 'EndBattleAIController_SetOverrideAnim::InInter' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_SetOverrideAnim, InAfterType) == 0x000014, "Member 'EndBattleAIController_SetOverrideAnim::InAfterType' has a wrong offset!");

// Function EndGame.EndBattleAIController.SetOverrideAroundPoint
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAIController_SetOverrideAroundPoint final
{
public:
	bool                                          InOverride;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                InPoint;                                           // 0x0004(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_SetOverrideAroundPoint) == 0x000004, "Wrong alignment on EndBattleAIController_SetOverrideAroundPoint");
static_assert(sizeof(EndBattleAIController_SetOverrideAroundPoint) == 0x000010, "Wrong size on EndBattleAIController_SetOverrideAroundPoint");
static_assert(offsetof(EndBattleAIController_SetOverrideAroundPoint, InOverride) == 0x000000, "Member 'EndBattleAIController_SetOverrideAroundPoint::InOverride' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_SetOverrideAroundPoint, InPoint) == 0x000004, "Member 'EndBattleAIController_SetOverrideAroundPoint::InPoint' has a wrong offset!");

// Function EndGame.EndBattleAIController.SetOverrideAroundPointReserveUpdate
// 0x0002 (0x0002 - 0x0000)
struct EndBattleAIController_SetOverrideAroundPointReserveUpdate final
{
public:
	bool                                          InOverride;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAroundPointType                              InType;                                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_SetOverrideAroundPointReserveUpdate) == 0x000001, "Wrong alignment on EndBattleAIController_SetOverrideAroundPointReserveUpdate");
static_assert(sizeof(EndBattleAIController_SetOverrideAroundPointReserveUpdate) == 0x000002, "Wrong size on EndBattleAIController_SetOverrideAroundPointReserveUpdate");
static_assert(offsetof(EndBattleAIController_SetOverrideAroundPointReserveUpdate, InOverride) == 0x000000, "Member 'EndBattleAIController_SetOverrideAroundPointReserveUpdate::InOverride' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_SetOverrideAroundPointReserveUpdate, InType) == 0x000001, "Member 'EndBattleAIController_SetOverrideAroundPointReserveUpdate::InType' has a wrong offset!");

// Function EndGame.EndBattleAIController.SetOverrideBattleCharaPartsSpec
// 0x0014 (0x0014 - 0x0000)
struct EndBattleAIController_SetOverrideBattleCharaPartsSpec final
{
public:
	class FName                                   BaseID;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OverrideId;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bChangeHP;                                         // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAIController_SetOverrideBattleCharaPartsSpec) == 0x000004, "Wrong alignment on EndBattleAIController_SetOverrideBattleCharaPartsSpec");
static_assert(sizeof(EndBattleAIController_SetOverrideBattleCharaPartsSpec) == 0x000014, "Wrong size on EndBattleAIController_SetOverrideBattleCharaPartsSpec");
static_assert(offsetof(EndBattleAIController_SetOverrideBattleCharaPartsSpec, BaseID) == 0x000000, "Member 'EndBattleAIController_SetOverrideBattleCharaPartsSpec::BaseID' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_SetOverrideBattleCharaPartsSpec, OverrideId) == 0x000008, "Member 'EndBattleAIController_SetOverrideBattleCharaPartsSpec::OverrideId' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_SetOverrideBattleCharaPartsSpec, bChangeHP) == 0x000010, "Member 'EndBattleAIController_SetOverrideBattleCharaPartsSpec::bChangeHP' has a wrong offset!");

// Function EndGame.EndBattleAIController.SetOverrideBattleCharaSpec
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAIController_SetOverrideBattleCharaSpec final
{
public:
	class FName                                   BattleCharaSpecID;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_SetOverrideBattleCharaSpec) == 0x000004, "Wrong alignment on EndBattleAIController_SetOverrideBattleCharaSpec");
static_assert(sizeof(EndBattleAIController_SetOverrideBattleCharaSpec) == 0x000008, "Wrong size on EndBattleAIController_SetOverrideBattleCharaSpec");
static_assert(offsetof(EndBattleAIController_SetOverrideBattleCharaSpec, BattleCharaSpecID) == 0x000000, "Member 'EndBattleAIController_SetOverrideBattleCharaSpec::BattleCharaSpecID' has a wrong offset!");

// Function EndGame.EndBattleAIController.SetOverrideConfrontCharacter
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAIController_SetOverrideConfrontCharacter final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_SetOverrideConfrontCharacter) == 0x000008, "Wrong alignment on EndBattleAIController_SetOverrideConfrontCharacter");
static_assert(sizeof(EndBattleAIController_SetOverrideConfrontCharacter) == 0x000008, "Wrong size on EndBattleAIController_SetOverrideConfrontCharacter");
static_assert(offsetof(EndBattleAIController_SetOverrideConfrontCharacter, InChara) == 0x000000, "Member 'EndBattleAIController_SetOverrideConfrontCharacter::InChara' has a wrong offset!");

// Function EndGame.EndBattleAIController.SetOverrideKeep
// 0x0004 (0x0004 - 0x0000)
struct EndBattleAIController_SetOverrideKeep final
{
public:
	int32                                         InKeep;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_SetOverrideKeep) == 0x000004, "Wrong alignment on EndBattleAIController_SetOverrideKeep");
static_assert(sizeof(EndBattleAIController_SetOverrideKeep) == 0x000004, "Wrong size on EndBattleAIController_SetOverrideKeep");
static_assert(offsetof(EndBattleAIController_SetOverrideKeep, InKeep) == 0x000000, "Member 'EndBattleAIController_SetOverrideKeep::InKeep' has a wrong offset!");

// Function EndGame.EndBattleAIController.SetOverrideKeepFromAbility
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAIController_SetOverrideKeepFromAbility final
{
public:
	class FName                                   InAbilityName;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_SetOverrideKeepFromAbility) == 0x000004, "Wrong alignment on EndBattleAIController_SetOverrideKeepFromAbility");
static_assert(sizeof(EndBattleAIController_SetOverrideKeepFromAbility) == 0x000008, "Wrong size on EndBattleAIController_SetOverrideKeepFromAbility");
static_assert(offsetof(EndBattleAIController_SetOverrideKeepFromAbility, InAbilityName) == 0x000000, "Member 'EndBattleAIController_SetOverrideKeepFromAbility::InAbilityName' has a wrong offset!");

// Function EndGame.EndBattleAIController.SetOverrideLocomotionAnim
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAIController_SetOverrideLocomotionAnim final
{
public:
	class FName                                   InID;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_SetOverrideLocomotionAnim) == 0x000004, "Wrong alignment on EndBattleAIController_SetOverrideLocomotionAnim");
static_assert(sizeof(EndBattleAIController_SetOverrideLocomotionAnim) == 0x000008, "Wrong size on EndBattleAIController_SetOverrideLocomotionAnim");
static_assert(offsetof(EndBattleAIController_SetOverrideLocomotionAnim, InID) == 0x000000, "Member 'EndBattleAIController_SetOverrideLocomotionAnim::InID' has a wrong offset!");

// Function EndGame.EndBattleAIController.SetOverrideParamTargetCorrectionNotify
// 0x0024 (0x0024 - 0x0000)
struct EndBattleAIController_SetOverrideParamTargetCorrectionNotify final
{
public:
	class FName                                   motionName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   abilityName;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideDirectionAngle;                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OverrideDirectionAngle;                            // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideDistance;                                 // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OverrideDistance;                                  // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideNotDistanceMoveStop;                      // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndBattleAbilityTargetCloseMoveType          OverrideNotDistanceMoveStopType;                   // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x2];                                       // 0x0022(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAIController_SetOverrideParamTargetCorrectionNotify) == 0x000004, "Wrong alignment on EndBattleAIController_SetOverrideParamTargetCorrectionNotify");
static_assert(sizeof(EndBattleAIController_SetOverrideParamTargetCorrectionNotify) == 0x000024, "Wrong size on EndBattleAIController_SetOverrideParamTargetCorrectionNotify");
static_assert(offsetof(EndBattleAIController_SetOverrideParamTargetCorrectionNotify, motionName) == 0x000000, "Member 'EndBattleAIController_SetOverrideParamTargetCorrectionNotify::motionName' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_SetOverrideParamTargetCorrectionNotify, abilityName) == 0x000008, "Member 'EndBattleAIController_SetOverrideParamTargetCorrectionNotify::abilityName' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_SetOverrideParamTargetCorrectionNotify, bOverrideDirectionAngle) == 0x000010, "Member 'EndBattleAIController_SetOverrideParamTargetCorrectionNotify::bOverrideDirectionAngle' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_SetOverrideParamTargetCorrectionNotify, OverrideDirectionAngle) == 0x000014, "Member 'EndBattleAIController_SetOverrideParamTargetCorrectionNotify::OverrideDirectionAngle' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_SetOverrideParamTargetCorrectionNotify, bOverrideDistance) == 0x000018, "Member 'EndBattleAIController_SetOverrideParamTargetCorrectionNotify::bOverrideDistance' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_SetOverrideParamTargetCorrectionNotify, OverrideDistance) == 0x00001C, "Member 'EndBattleAIController_SetOverrideParamTargetCorrectionNotify::OverrideDistance' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_SetOverrideParamTargetCorrectionNotify, bOverrideNotDistanceMoveStop) == 0x000020, "Member 'EndBattleAIController_SetOverrideParamTargetCorrectionNotify::bOverrideNotDistanceMoveStop' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_SetOverrideParamTargetCorrectionNotify, OverrideNotDistanceMoveStopType) == 0x000021, "Member 'EndBattleAIController_SetOverrideParamTargetCorrectionNotify::OverrideNotDistanceMoveStopType' has a wrong offset!");

// Function EndGame.EndBattleAIController.SetOverrideUpperAnim
// 0x0018 (0x0018 - 0x0000)
struct EndBattleAIController_SetOverrideUpperAnim final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InInterIn;                                         // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InInterOut;                                        // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_SetOverrideUpperAnim) == 0x000004, "Wrong alignment on EndBattleAIController_SetOverrideUpperAnim");
static_assert(sizeof(EndBattleAIController_SetOverrideUpperAnim) == 0x000018, "Wrong size on EndBattleAIController_SetOverrideUpperAnim");
static_assert(offsetof(EndBattleAIController_SetOverrideUpperAnim, InName) == 0x000000, "Member 'EndBattleAIController_SetOverrideUpperAnim::InName' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_SetOverrideUpperAnim, InInterIn) == 0x000008, "Member 'EndBattleAIController_SetOverrideUpperAnim::InInterIn' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_SetOverrideUpperAnim, InInterOut) == 0x000010, "Member 'EndBattleAIController_SetOverrideUpperAnim::InInterOut' has a wrong offset!");

// Function EndGame.EndBattleAIController.SetPauseUpdateDamageSource
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAIController_SetPauseUpdateDamageSource final
{
public:
	bool                                          Pause;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_SetPauseUpdateDamageSource) == 0x000001, "Wrong alignment on EndBattleAIController_SetPauseUpdateDamageSource");
static_assert(sizeof(EndBattleAIController_SetPauseUpdateDamageSource) == 0x000001, "Wrong size on EndBattleAIController_SetPauseUpdateDamageSource");
static_assert(offsetof(EndBattleAIController_SetPauseUpdateDamageSource, Pause) == 0x000000, "Member 'EndBattleAIController_SetPauseUpdateDamageSource::Pause' has a wrong offset!");

// Function EndGame.EndBattleAIController.SetPreAsyncTick
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAIController_SetPreAsyncTick final
{
public:
	bool                                          bUse;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_SetPreAsyncTick) == 0x000001, "Wrong alignment on EndBattleAIController_SetPreAsyncTick");
static_assert(sizeof(EndBattleAIController_SetPreAsyncTick) == 0x000001, "Wrong size on EndBattleAIController_SetPreAsyncTick");
static_assert(offsetof(EndBattleAIController_SetPreAsyncTick, bUse) == 0x000000, "Member 'EndBattleAIController_SetPreAsyncTick::bUse' has a wrong offset!");

// Function EndGame.EndBattleAIController.SetPushCollisionEnable
// 0x000C (0x000C - 0x0000)
struct EndBattleAIController_SetPushCollisionEnable final
{
public:
	class FName                                   partId;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Enable;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAIController_SetPushCollisionEnable) == 0x000004, "Wrong alignment on EndBattleAIController_SetPushCollisionEnable");
static_assert(sizeof(EndBattleAIController_SetPushCollisionEnable) == 0x00000C, "Wrong size on EndBattleAIController_SetPushCollisionEnable");
static_assert(offsetof(EndBattleAIController_SetPushCollisionEnable, partId) == 0x000000, "Member 'EndBattleAIController_SetPushCollisionEnable::partId' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_SetPushCollisionEnable, Enable) == 0x000008, "Member 'EndBattleAIController_SetPushCollisionEnable::Enable' has a wrong offset!");

// Function EndGame.EndBattleAIController.SetRole
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAIController_SetRole final
{
public:
	EEndAiBattleRole                              InRole;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_SetRole) == 0x000001, "Wrong alignment on EndBattleAIController_SetRole");
static_assert(sizeof(EndBattleAIController_SetRole) == 0x000001, "Wrong size on EndBattleAIController_SetRole");
static_assert(offsetof(EndBattleAIController_SetRole, InRole) == 0x000000, "Member 'EndBattleAIController_SetRole::InRole' has a wrong offset!");

// Function EndGame.EndBattleAIController.SetSecondRoleTerm
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAIController_SetSecondRoleTerm final
{
public:
	EEndAiBattleSecondRole                        InTerm;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_SetSecondRoleTerm) == 0x000001, "Wrong alignment on EndBattleAIController_SetSecondRoleTerm");
static_assert(sizeof(EndBattleAIController_SetSecondRoleTerm) == 0x000001, "Wrong size on EndBattleAIController_SetSecondRoleTerm");
static_assert(offsetof(EndBattleAIController_SetSecondRoleTerm, InTerm) == 0x000000, "Member 'EndBattleAIController_SetSecondRoleTerm::InTerm' has a wrong offset!");

// Function EndGame.EndBattleAIController.SetSpecialStatusStateChangeID
// 0x0014 (0x0014 - 0x0000)
struct EndBattleAIController_SetSpecialStatusStateChangeID final
{
public:
	EEndBattleSpecialStatusChangeType             Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   StateChangeID;                                     // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   paramID;                                           // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_SetSpecialStatusStateChangeID) == 0x000004, "Wrong alignment on EndBattleAIController_SetSpecialStatusStateChangeID");
static_assert(sizeof(EndBattleAIController_SetSpecialStatusStateChangeID) == 0x000014, "Wrong size on EndBattleAIController_SetSpecialStatusStateChangeID");
static_assert(offsetof(EndBattleAIController_SetSpecialStatusStateChangeID, Type) == 0x000000, "Member 'EndBattleAIController_SetSpecialStatusStateChangeID::Type' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_SetSpecialStatusStateChangeID, StateChangeID) == 0x000004, "Member 'EndBattleAIController_SetSpecialStatusStateChangeID::StateChangeID' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_SetSpecialStatusStateChangeID, paramID) == 0x00000C, "Member 'EndBattleAIController_SetSpecialStatusStateChangeID::paramID' has a wrong offset!");

// Function EndGame.EndBattleAIController.SetSplinePointFloat
// 0x0004 (0x0004 - 0x0000)
struct EndBattleAIController_SetSplinePointFloat final
{
public:
	float                                         InPoint;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_SetSplinePointFloat) == 0x000004, "Wrong alignment on EndBattleAIController_SetSplinePointFloat");
static_assert(sizeof(EndBattleAIController_SetSplinePointFloat) == 0x000004, "Wrong size on EndBattleAIController_SetSplinePointFloat");
static_assert(offsetof(EndBattleAIController_SetSplinePointFloat, InPoint) == 0x000000, "Member 'EndBattleAIController_SetSplinePointFloat::InPoint' has a wrong offset!");

// Function EndGame.EndBattleAIController.SetStep
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAIController_SetStep final
{
public:
	int32                                         InStep;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InClearSubStep;                                    // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAIController_SetStep) == 0x000004, "Wrong alignment on EndBattleAIController_SetStep");
static_assert(sizeof(EndBattleAIController_SetStep) == 0x000008, "Wrong size on EndBattleAIController_SetStep");
static_assert(offsetof(EndBattleAIController_SetStep, InStep) == 0x000000, "Member 'EndBattleAIController_SetStep::InStep' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_SetStep, InClearSubStep) == 0x000004, "Member 'EndBattleAIController_SetStep::InClearSubStep' has a wrong offset!");

// Function EndGame.EndBattleAIController.SetSubStep
// 0x0004 (0x0004 - 0x0000)
struct EndBattleAIController_SetSubStep final
{
public:
	int32                                         InSubStep;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_SetSubStep) == 0x000004, "Wrong alignment on EndBattleAIController_SetSubStep");
static_assert(sizeof(EndBattleAIController_SetSubStep) == 0x000004, "Wrong size on EndBattleAIController_SetSubStep");
static_assert(offsetof(EndBattleAIController_SetSubStep, InSubStep) == 0x000000, "Member 'EndBattleAIController_SetSubStep::InSubStep' has a wrong offset!");

// Function EndGame.EndBattleAIController.SetTarget
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAIController_SetTarget final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_SetTarget) == 0x000008, "Wrong alignment on EndBattleAIController_SetTarget");
static_assert(sizeof(EndBattleAIController_SetTarget) == 0x000008, "Wrong size on EndBattleAIController_SetTarget");
static_assert(offsetof(EndBattleAIController_SetTarget, InChara) == 0x000000, "Member 'EndBattleAIController_SetTarget::InChara' has a wrong offset!");

// Function EndGame.EndBattleAIController.SetTargetAbility
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAIController_SetTargetAbility final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_SetTargetAbility) == 0x000008, "Wrong alignment on EndBattleAIController_SetTargetAbility");
static_assert(sizeof(EndBattleAIController_SetTargetAbility) == 0x000008, "Wrong size on EndBattleAIController_SetTargetAbility");
static_assert(offsetof(EndBattleAIController_SetTargetAbility, InChara) == 0x000000, "Member 'EndBattleAIController_SetTargetAbility::InChara' has a wrong offset!");

// Function EndGame.EndBattleAIController.SetTargetByType
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAIController_SetTargetByType final
{
public:
	EBattleAISetTargetType                        InType;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_SetTargetByType) == 0x000001, "Wrong alignment on EndBattleAIController_SetTargetByType");
static_assert(sizeof(EndBattleAIController_SetTargetByType) == 0x000001, "Wrong size on EndBattleAIController_SetTargetByType");
static_assert(offsetof(EndBattleAIController_SetTargetByType, InType) == 0x000000, "Member 'EndBattleAIController_SetTargetByType::InType' has a wrong offset!");

// Function EndGame.EndBattleAIController.SetTargetPlayer
// 0x0002 (0x0002 - 0x0000)
struct EndBattleAIController_SetTargetPlayer final
{
public:
	EPlayerType                                   Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_SetTargetPlayer) == 0x000001, "Wrong alignment on EndBattleAIController_SetTargetPlayer");
static_assert(sizeof(EndBattleAIController_SetTargetPlayer) == 0x000002, "Wrong size on EndBattleAIController_SetTargetPlayer");
static_assert(offsetof(EndBattleAIController_SetTargetPlayer, Type) == 0x000000, "Member 'EndBattleAIController_SetTargetPlayer::Type' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_SetTargetPlayer, ReturnValue) == 0x000001, "Member 'EndBattleAIController_SetTargetPlayer::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.SetTargetTurn
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAIController_SetTargetTurn final
{
public:
	bool                                          InTurn;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_SetTargetTurn) == 0x000001, "Wrong alignment on EndBattleAIController_SetTargetTurn");
static_assert(sizeof(EndBattleAIController_SetTargetTurn) == 0x000001, "Wrong size on EndBattleAIController_SetTargetTurn");
static_assert(offsetof(EndBattleAIController_SetTargetTurn, InTurn) == 0x000000, "Member 'EndBattleAIController_SetTargetTurn::InTurn' has a wrong offset!");

// Function EndGame.EndBattleAIController.SetTriggerBoxCondition
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAIController_SetTriggerBoxCondition final
{
public:
	ETriggerBoxCondition                          Condition;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_SetTriggerBoxCondition) == 0x000001, "Wrong alignment on EndBattleAIController_SetTriggerBoxCondition");
static_assert(sizeof(EndBattleAIController_SetTriggerBoxCondition) == 0x000001, "Wrong size on EndBattleAIController_SetTriggerBoxCondition");
static_assert(offsetof(EndBattleAIController_SetTriggerBoxCondition, Condition) == 0x000000, "Member 'EndBattleAIController_SetTriggerBoxCondition::Condition' has a wrong offset!");

// Function EndGame.EndBattleAIController.SetTurn
// 0x0002 (0x0002 - 0x0000)
struct EndBattleAIController_SetTurn final
{
public:
	EBattleMoveType                               InType;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InTurn;                                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_SetTurn) == 0x000001, "Wrong alignment on EndBattleAIController_SetTurn");
static_assert(sizeof(EndBattleAIController_SetTurn) == 0x000002, "Wrong size on EndBattleAIController_SetTurn");
static_assert(offsetof(EndBattleAIController_SetTurn, InType) == 0x000000, "Member 'EndBattleAIController_SetTurn::InType' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_SetTurn, InTurn) == 0x000001, "Member 'EndBattleAIController_SetTurn::InTurn' has a wrong offset!");

// Function EndGame.EndBattleAIController.SetUncheckEnvStaticMeshContactWall
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAIController_SetUncheckEnvStaticMeshContactWall final
{
public:
	bool                                          uncheck;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_SetUncheckEnvStaticMeshContactWall) == 0x000001, "Wrong alignment on EndBattleAIController_SetUncheckEnvStaticMeshContactWall");
static_assert(sizeof(EndBattleAIController_SetUncheckEnvStaticMeshContactWall) == 0x000001, "Wrong size on EndBattleAIController_SetUncheckEnvStaticMeshContactWall");
static_assert(offsetof(EndBattleAIController_SetUncheckEnvStaticMeshContactWall, uncheck) == 0x000000, "Member 'EndBattleAIController_SetUncheckEnvStaticMeshContactWall::uncheck' has a wrong offset!");

// Function EndGame.EndBattleAIController.SetupCeilJump
// 0x0014 (0x0014 - 0x0000)
struct EndBattleAIController_SetupCeilJump final
{
public:
	float                                         MinQt;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxQt;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KickDistQt;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InLimitAngle;                                      // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAIController_SetupCeilJump) == 0x000004, "Wrong alignment on EndBattleAIController_SetupCeilJump");
static_assert(sizeof(EndBattleAIController_SetupCeilJump) == 0x000014, "Wrong size on EndBattleAIController_SetupCeilJump");
static_assert(offsetof(EndBattleAIController_SetupCeilJump, MinQt) == 0x000000, "Member 'EndBattleAIController_SetupCeilJump::MinQt' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_SetupCeilJump, MaxQt) == 0x000004, "Member 'EndBattleAIController_SetupCeilJump::MaxQt' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_SetupCeilJump, KickDistQt) == 0x000008, "Member 'EndBattleAIController_SetupCeilJump::KickDistQt' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_SetupCeilJump, InLimitAngle) == 0x00000C, "Member 'EndBattleAIController_SetupCeilJump::InLimitAngle' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_SetupCeilJump, ReturnValue) == 0x000010, "Member 'EndBattleAIController_SetupCeilJump::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.SetupDroppingAbility
// 0x0014 (0x0014 - 0x0000)
struct EndBattleAIController_SetupDroppingAbility final
{
public:
	float                                         Speed;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Acc;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Rotate;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotateUp;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotateDown;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_SetupDroppingAbility) == 0x000004, "Wrong alignment on EndBattleAIController_SetupDroppingAbility");
static_assert(sizeof(EndBattleAIController_SetupDroppingAbility) == 0x000014, "Wrong size on EndBattleAIController_SetupDroppingAbility");
static_assert(offsetof(EndBattleAIController_SetupDroppingAbility, Speed) == 0x000000, "Member 'EndBattleAIController_SetupDroppingAbility::Speed' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_SetupDroppingAbility, Acc) == 0x000004, "Member 'EndBattleAIController_SetupDroppingAbility::Acc' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_SetupDroppingAbility, Rotate) == 0x000008, "Member 'EndBattleAIController_SetupDroppingAbility::Rotate' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_SetupDroppingAbility, RotateUp) == 0x00000C, "Member 'EndBattleAIController_SetupDroppingAbility::RotateUp' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_SetupDroppingAbility, RotateDown) == 0x000010, "Member 'EndBattleAIController_SetupDroppingAbility::RotateDown' has a wrong offset!");

// Function EndGame.EndBattleAIController.SetupWallJump
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAIController_SetupWallJump final
{
public:
	float                                         MinQt;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxQt;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KickDistQt;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InCeil;                                            // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000D(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAIController_SetupWallJump) == 0x000004, "Wrong alignment on EndBattleAIController_SetupWallJump");
static_assert(sizeof(EndBattleAIController_SetupWallJump) == 0x000010, "Wrong size on EndBattleAIController_SetupWallJump");
static_assert(offsetof(EndBattleAIController_SetupWallJump, MinQt) == 0x000000, "Member 'EndBattleAIController_SetupWallJump::MinQt' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_SetupWallJump, MaxQt) == 0x000004, "Member 'EndBattleAIController_SetupWallJump::MaxQt' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_SetupWallJump, KickDistQt) == 0x000008, "Member 'EndBattleAIController_SetupWallJump::KickDistQt' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_SetupWallJump, InCeil) == 0x00000C, "Member 'EndBattleAIController_SetupWallJump::InCeil' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_SetupWallJump, ReturnValue) == 0x00000D, "Member 'EndBattleAIController_SetupWallJump::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.SetupWallJumpDetailed
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAIController_SetupWallJumpDetailed final
{
public:
	float                                         MinQt;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxQt;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KickDistQt;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InCeil;                                            // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000D(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAIController_SetupWallJumpDetailed) == 0x000004, "Wrong alignment on EndBattleAIController_SetupWallJumpDetailed");
static_assert(sizeof(EndBattleAIController_SetupWallJumpDetailed) == 0x000010, "Wrong size on EndBattleAIController_SetupWallJumpDetailed");
static_assert(offsetof(EndBattleAIController_SetupWallJumpDetailed, MinQt) == 0x000000, "Member 'EndBattleAIController_SetupWallJumpDetailed::MinQt' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_SetupWallJumpDetailed, MaxQt) == 0x000004, "Member 'EndBattleAIController_SetupWallJumpDetailed::MaxQt' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_SetupWallJumpDetailed, KickDistQt) == 0x000008, "Member 'EndBattleAIController_SetupWallJumpDetailed::KickDistQt' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_SetupWallJumpDetailed, InCeil) == 0x00000C, "Member 'EndBattleAIController_SetupWallJumpDetailed::InCeil' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_SetupWallJumpDetailed, ReturnValue) == 0x00000D, "Member 'EndBattleAIController_SetupWallJumpDetailed::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.SetupWarpInformation
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAIController_SetupWarpInformation final
{
public:
	TArray<class FName>                           warpPointNames;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_SetupWarpInformation) == 0x000008, "Wrong alignment on EndBattleAIController_SetupWarpInformation");
static_assert(sizeof(EndBattleAIController_SetupWarpInformation) == 0x000010, "Wrong size on EndBattleAIController_SetupWarpInformation");
static_assert(offsetof(EndBattleAIController_SetupWarpInformation, warpPointNames) == 0x000000, "Member 'EndBattleAIController_SetupWarpInformation::warpPointNames' has a wrong offset!");

// Function EndGame.EndBattleAIController.SetupWaterJump
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAIController_SetupWaterJump final
{
public:
	float                                         InRangeMin;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InRangeMax;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_SetupWaterJump) == 0x000004, "Wrong alignment on EndBattleAIController_SetupWaterJump");
static_assert(sizeof(EndBattleAIController_SetupWaterJump) == 0x000010, "Wrong size on EndBattleAIController_SetupWaterJump");
static_assert(offsetof(EndBattleAIController_SetupWaterJump, InRangeMin) == 0x000000, "Member 'EndBattleAIController_SetupWaterJump::InRangeMin' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_SetupWaterJump, InRangeMax) == 0x000004, "Member 'EndBattleAIController_SetupWaterJump::InRangeMax' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_SetupWaterJump, ReturnValue) == 0x000008, "Member 'EndBattleAIController_SetupWaterJump::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.SetVisibilityWeapon
// 0x0002 (0x0002 - 0x0000)
struct EndBattleAIController_SetVisibilityWeapon final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWeaponSlot                                   weaponSlotType;                                    // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_SetVisibilityWeapon) == 0x000001, "Wrong alignment on EndBattleAIController_SetVisibilityWeapon");
static_assert(sizeof(EndBattleAIController_SetVisibilityWeapon) == 0x000002, "Wrong size on EndBattleAIController_SetVisibilityWeapon");
static_assert(offsetof(EndBattleAIController_SetVisibilityWeapon, bVisible) == 0x000000, "Member 'EndBattleAIController_SetVisibilityWeapon::bVisible' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_SetVisibilityWeapon, weaponSlotType) == 0x000001, "Member 'EndBattleAIController_SetVisibilityWeapon::weaponSlotType' has a wrong offset!");

// Function EndGame.EndBattleAIController.SetWeakConditionDamageOnlyMode
// 0x0002 (0x0002 - 0x0000)
struct EndBattleAIController_SetWeakConditionDamageOnlyMode final
{
public:
	bool                                          enableDamageOnlyMode;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          enableDamageOverEvent;                             // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_SetWeakConditionDamageOnlyMode) == 0x000001, "Wrong alignment on EndBattleAIController_SetWeakConditionDamageOnlyMode");
static_assert(sizeof(EndBattleAIController_SetWeakConditionDamageOnlyMode) == 0x000002, "Wrong size on EndBattleAIController_SetWeakConditionDamageOnlyMode");
static_assert(offsetof(EndBattleAIController_SetWeakConditionDamageOnlyMode, enableDamageOnlyMode) == 0x000000, "Member 'EndBattleAIController_SetWeakConditionDamageOnlyMode::enableDamageOnlyMode' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_SetWeakConditionDamageOnlyMode, enableDamageOverEvent) == 0x000001, "Member 'EndBattleAIController_SetWeakConditionDamageOnlyMode::enableDamageOverEvent' has a wrong offset!");

// Function EndGame.EndBattleAIController.SetWorkBool
// 0x000C (0x000C - 0x0000)
struct EndBattleAIController_SetWorkBool final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Value;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAIController_SetWorkBool) == 0x000004, "Wrong alignment on EndBattleAIController_SetWorkBool");
static_assert(sizeof(EndBattleAIController_SetWorkBool) == 0x00000C, "Wrong size on EndBattleAIController_SetWorkBool");
static_assert(offsetof(EndBattleAIController_SetWorkBool, Name_0) == 0x000000, "Member 'EndBattleAIController_SetWorkBool::Name_0' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_SetWorkBool, Value) == 0x000008, "Member 'EndBattleAIController_SetWorkBool::Value' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_SetWorkBool, ReturnValue) == 0x000009, "Member 'EndBattleAIController_SetWorkBool::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.SetWorkFloat
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAIController_SetWorkFloat final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_SetWorkFloat) == 0x000004, "Wrong alignment on EndBattleAIController_SetWorkFloat");
static_assert(sizeof(EndBattleAIController_SetWorkFloat) == 0x000010, "Wrong size on EndBattleAIController_SetWorkFloat");
static_assert(offsetof(EndBattleAIController_SetWorkFloat, Name_0) == 0x000000, "Member 'EndBattleAIController_SetWorkFloat::Name_0' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_SetWorkFloat, Value) == 0x000008, "Member 'EndBattleAIController_SetWorkFloat::Value' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_SetWorkFloat, ReturnValue) == 0x00000C, "Member 'EndBattleAIController_SetWorkFloat::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.SetWorkInt32
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAIController_SetWorkInt32 final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_SetWorkInt32) == 0x000004, "Wrong alignment on EndBattleAIController_SetWorkInt32");
static_assert(sizeof(EndBattleAIController_SetWorkInt32) == 0x000010, "Wrong size on EndBattleAIController_SetWorkInt32");
static_assert(offsetof(EndBattleAIController_SetWorkInt32, Name_0) == 0x000000, "Member 'EndBattleAIController_SetWorkInt32::Name_0' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_SetWorkInt32, Value) == 0x000008, "Member 'EndBattleAIController_SetWorkInt32::Value' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_SetWorkInt32, ReturnValue) == 0x00000C, "Member 'EndBattleAIController_SetWorkInt32::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.SetWorkName
// 0x0018 (0x0018 - 0x0000)
struct EndBattleAIController_SetWorkName final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Value;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_SetWorkName) == 0x000004, "Wrong alignment on EndBattleAIController_SetWorkName");
static_assert(sizeof(EndBattleAIController_SetWorkName) == 0x000018, "Wrong size on EndBattleAIController_SetWorkName");
static_assert(offsetof(EndBattleAIController_SetWorkName, Name_0) == 0x000000, "Member 'EndBattleAIController_SetWorkName::Name_0' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_SetWorkName, Value) == 0x000008, "Member 'EndBattleAIController_SetWorkName::Value' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_SetWorkName, ReturnValue) == 0x000010, "Member 'EndBattleAIController_SetWorkName::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.SetWorkRotator
// 0x0020 (0x0020 - 0x0000)
struct EndBattleAIController_SetWorkRotator final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Value;                                             // 0x0008(0x000C)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               ReturnValue;                                       // 0x0014(0x000C)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_SetWorkRotator) == 0x000004, "Wrong alignment on EndBattleAIController_SetWorkRotator");
static_assert(sizeof(EndBattleAIController_SetWorkRotator) == 0x000020, "Wrong size on EndBattleAIController_SetWorkRotator");
static_assert(offsetof(EndBattleAIController_SetWorkRotator, Name_0) == 0x000000, "Member 'EndBattleAIController_SetWorkRotator::Name_0' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_SetWorkRotator, Value) == 0x000008, "Member 'EndBattleAIController_SetWorkRotator::Value' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_SetWorkRotator, ReturnValue) == 0x000014, "Member 'EndBattleAIController_SetWorkRotator::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.SetWorkVector
// 0x0020 (0x0020 - 0x0000)
struct EndBattleAIController_SetWorkVector final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Value;                                             // 0x0008(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0014(0x000C)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_SetWorkVector) == 0x000004, "Wrong alignment on EndBattleAIController_SetWorkVector");
static_assert(sizeof(EndBattleAIController_SetWorkVector) == 0x000020, "Wrong size on EndBattleAIController_SetWorkVector");
static_assert(offsetof(EndBattleAIController_SetWorkVector, Name_0) == 0x000000, "Member 'EndBattleAIController_SetWorkVector::Name_0' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_SetWorkVector, Value) == 0x000008, "Member 'EndBattleAIController_SetWorkVector::Value' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_SetWorkVector, ReturnValue) == 0x000014, "Member 'EndBattleAIController_SetWorkVector::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.StartBurst
// 0x0002 (0x0002 - 0x0000)
struct EndBattleAIController_StartBurst final
{
public:
	bool                                          Force;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_StartBurst) == 0x000001, "Wrong alignment on EndBattleAIController_StartBurst");
static_assert(sizeof(EndBattleAIController_StartBurst) == 0x000002, "Wrong size on EndBattleAIController_StartBurst");
static_assert(offsetof(EndBattleAIController_StartBurst, Force) == 0x000000, "Member 'EndBattleAIController_StartBurst::Force' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_StartBurst, ReturnValue) == 0x000001, "Member 'EndBattleAIController_StartBurst::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.SuspendAction
// 0x0002 (0x0002 - 0x0000)
struct EndBattleAIController_SuspendAction final
{
public:
	bool                                          Ability;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Motion;                                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_SuspendAction) == 0x000001, "Wrong alignment on EndBattleAIController_SuspendAction");
static_assert(sizeof(EndBattleAIController_SuspendAction) == 0x000002, "Wrong size on EndBattleAIController_SuspendAction");
static_assert(offsetof(EndBattleAIController_SuspendAction, Ability) == 0x000000, "Member 'EndBattleAIController_SuspendAction::Ability' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_SuspendAction, Motion) == 0x000001, "Member 'EndBattleAIController_SuspendAction::Motion' has a wrong offset!");

// Function EndGame.EndBattleAIController.ToBreak
// 0x000C (0x000C - 0x0000)
struct EndBattleAIController_ToBreak final
{
public:
	class FName                                   charaPartsSpecName;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableBreakMessage;                               // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAIController_ToBreak) == 0x000004, "Wrong alignment on EndBattleAIController_ToBreak");
static_assert(sizeof(EndBattleAIController_ToBreak) == 0x00000C, "Wrong size on EndBattleAIController_ToBreak");
static_assert(offsetof(EndBattleAIController_ToBreak, charaPartsSpecName) == 0x000000, "Member 'EndBattleAIController_ToBreak::charaPartsSpecName' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_ToBreak, bEnableBreakMessage) == 0x000008, "Member 'EndBattleAIController_ToBreak::bEnableBreakMessage' has a wrong offset!");

// Function EndGame.EndBattleAIController.ToChangeParts
// 0x0014 (0x0014 - 0x0000)
struct EndBattleAIController_ToChangeParts final
{
public:
	class FName                                   meshName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   meshLabel;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAIController_ToChangeParts) == 0x000004, "Wrong alignment on EndBattleAIController_ToChangeParts");
static_assert(sizeof(EndBattleAIController_ToChangeParts) == 0x000014, "Wrong size on EndBattleAIController_ToChangeParts");
static_assert(offsetof(EndBattleAIController_ToChangeParts, meshName) == 0x000000, "Member 'EndBattleAIController_ToChangeParts::meshName' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_ToChangeParts, meshLabel) == 0x000008, "Member 'EndBattleAIController_ToChangeParts::meshLabel' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_ToChangeParts, ReturnValue) == 0x000010, "Member 'EndBattleAIController_ToChangeParts::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.ToDestructionParts
// 0x000C (0x000C - 0x0000)
struct EndBattleAIController_ToDestructionParts final
{
public:
	class FName                                   keyword;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_ToDestructionParts) == 0x000004, "Wrong alignment on EndBattleAIController_ToDestructionParts");
static_assert(sizeof(EndBattleAIController_ToDestructionParts) == 0x00000C, "Wrong size on EndBattleAIController_ToDestructionParts");
static_assert(offsetof(EndBattleAIController_ToDestructionParts, keyword) == 0x000000, "Member 'EndBattleAIController_ToDestructionParts::keyword' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_ToDestructionParts, ReturnValue) == 0x000008, "Member 'EndBattleAIController_ToDestructionParts::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.ToKillEasySpawnCharacter
// 0x000C (0x000C - 0x0000)
struct EndBattleAIController_ToKillEasySpawnCharacter final
{
public:
	class FName                                   keyword;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          forceDestroy;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAIController_ToKillEasySpawnCharacter) == 0x000004, "Wrong alignment on EndBattleAIController_ToKillEasySpawnCharacter");
static_assert(sizeof(EndBattleAIController_ToKillEasySpawnCharacter) == 0x00000C, "Wrong size on EndBattleAIController_ToKillEasySpawnCharacter");
static_assert(offsetof(EndBattleAIController_ToKillEasySpawnCharacter, keyword) == 0x000000, "Member 'EndBattleAIController_ToKillEasySpawnCharacter::keyword' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_ToKillEasySpawnCharacter, forceDestroy) == 0x000008, "Member 'EndBattleAIController_ToKillEasySpawnCharacter::forceDestroy' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_ToKillEasySpawnCharacter, ReturnValue) == 0x000009, "Member 'EndBattleAIController_ToKillEasySpawnCharacter::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.ToMoveToSocketEasySpawnCharacter
// 0x0014 (0x0014 - 0x0000)
struct EndBattleAIController_ToMoveToSocketEasySpawnCharacter final
{
public:
	class FName                                   keyword;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SocketName;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAIController_ToMoveToSocketEasySpawnCharacter) == 0x000004, "Wrong alignment on EndBattleAIController_ToMoveToSocketEasySpawnCharacter");
static_assert(sizeof(EndBattleAIController_ToMoveToSocketEasySpawnCharacter) == 0x000014, "Wrong size on EndBattleAIController_ToMoveToSocketEasySpawnCharacter");
static_assert(offsetof(EndBattleAIController_ToMoveToSocketEasySpawnCharacter, keyword) == 0x000000, "Member 'EndBattleAIController_ToMoveToSocketEasySpawnCharacter::keyword' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_ToMoveToSocketEasySpawnCharacter, SocketName) == 0x000008, "Member 'EndBattleAIController_ToMoveToSocketEasySpawnCharacter::SocketName' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_ToMoveToSocketEasySpawnCharacter, ReturnValue) == 0x000010, "Member 'EndBattleAIController_ToMoveToSocketEasySpawnCharacter::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.ToRepair
// 0x0018 (0x0018 - 0x0000)
struct EndBattleAIController_ToRepair final
{
public:
	class FName                                   charaPartsSpecName;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   meshLabelName;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndPartsRepairConditionType                  Condition;                                         // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_ToRepair) == 0x000004, "Wrong alignment on EndBattleAIController_ToRepair");
static_assert(sizeof(EndBattleAIController_ToRepair) == 0x000018, "Wrong size on EndBattleAIController_ToRepair");
static_assert(offsetof(EndBattleAIController_ToRepair, charaPartsSpecName) == 0x000000, "Member 'EndBattleAIController_ToRepair::charaPartsSpecName' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_ToRepair, meshLabelName) == 0x000008, "Member 'EndBattleAIController_ToRepair::meshLabelName' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_ToRepair, Condition) == 0x000010, "Member 'EndBattleAIController_ToRepair::Condition' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_ToRepair, ReturnValue) == 0x000014, "Member 'EndBattleAIController_ToRepair::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.ToRepairWithHPPercent
// 0x0014 (0x0014 - 0x0000)
struct EndBattleAIController_ToRepairWithHPPercent final
{
public:
	class FName                                   charaPartsSpecName;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   meshLabelName;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HPPercent;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_ToRepairWithHPPercent) == 0x000004, "Wrong alignment on EndBattleAIController_ToRepairWithHPPercent");
static_assert(sizeof(EndBattleAIController_ToRepairWithHPPercent) == 0x000014, "Wrong size on EndBattleAIController_ToRepairWithHPPercent");
static_assert(offsetof(EndBattleAIController_ToRepairWithHPPercent, charaPartsSpecName) == 0x000000, "Member 'EndBattleAIController_ToRepairWithHPPercent::charaPartsSpecName' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_ToRepairWithHPPercent, meshLabelName) == 0x000008, "Member 'EndBattleAIController_ToRepairWithHPPercent::meshLabelName' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_ToRepairWithHPPercent, HPPercent) == 0x000010, "Member 'EndBattleAIController_ToRepairWithHPPercent::HPPercent' has a wrong offset!");

// Function EndGame.EndBattleAIController.ToRestoreParts
// 0x000C (0x000C - 0x0000)
struct EndBattleAIController_ToRestoreParts final
{
public:
	class FName                                   keyword;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_ToRestoreParts) == 0x000004, "Wrong alignment on EndBattleAIController_ToRestoreParts");
static_assert(sizeof(EndBattleAIController_ToRestoreParts) == 0x00000C, "Wrong size on EndBattleAIController_ToRestoreParts");
static_assert(offsetof(EndBattleAIController_ToRestoreParts, keyword) == 0x000000, "Member 'EndBattleAIController_ToRestoreParts::keyword' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_ToRestoreParts, ReturnValue) == 0x000008, "Member 'EndBattleAIController_ToRestoreParts::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.ToSpawnEasySpawnCharacter
// 0x0024 (0x0024 - 0x0000)
struct EndBattleAIController_ToSpawnEasySpawnCharacter final
{
public:
	class FName                                   keyword;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                hidePosition;                                      // 0x0008(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0014(0x000C)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAIController_ToSpawnEasySpawnCharacter) == 0x000004, "Wrong alignment on EndBattleAIController_ToSpawnEasySpawnCharacter");
static_assert(sizeof(EndBattleAIController_ToSpawnEasySpawnCharacter) == 0x000024, "Wrong size on EndBattleAIController_ToSpawnEasySpawnCharacter");
static_assert(offsetof(EndBattleAIController_ToSpawnEasySpawnCharacter, keyword) == 0x000000, "Member 'EndBattleAIController_ToSpawnEasySpawnCharacter::keyword' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_ToSpawnEasySpawnCharacter, hidePosition) == 0x000008, "Member 'EndBattleAIController_ToSpawnEasySpawnCharacter::hidePosition' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_ToSpawnEasySpawnCharacter, Rotation) == 0x000014, "Member 'EndBattleAIController_ToSpawnEasySpawnCharacter::Rotation' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_ToSpawnEasySpawnCharacter, ReturnValue) == 0x000020, "Member 'EndBattleAIController_ToSpawnEasySpawnCharacter::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.TransformCharacter
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAIController_TransformCharacter final
{
public:
	class FName                                   BattleCharaSpecID;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_TransformCharacter) == 0x000004, "Wrong alignment on EndBattleAIController_TransformCharacter");
static_assert(sizeof(EndBattleAIController_TransformCharacter) == 0x000008, "Wrong size on EndBattleAIController_TransformCharacter");
static_assert(offsetof(EndBattleAIController_TransformCharacter, BattleCharaSpecID) == 0x000000, "Member 'EndBattleAIController_TransformCharacter::BattleCharaSpecID' has a wrong offset!");

// Function EndGame.EndBattleAIController.TryPossibleEasySpawnCharacter
// 0x000C (0x000C - 0x0000)
struct EndBattleAIController_TryPossibleEasySpawnCharacter final
{
public:
	class FName                                   keyword;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAIController_TryPossibleEasySpawnCharacter) == 0x000004, "Wrong alignment on EndBattleAIController_TryPossibleEasySpawnCharacter");
static_assert(sizeof(EndBattleAIController_TryPossibleEasySpawnCharacter) == 0x00000C, "Wrong size on EndBattleAIController_TryPossibleEasySpawnCharacter");
static_assert(offsetof(EndBattleAIController_TryPossibleEasySpawnCharacter, keyword) == 0x000000, "Member 'EndBattleAIController_TryPossibleEasySpawnCharacter::keyword' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_TryPossibleEasySpawnCharacter, ReturnValue) == 0x000008, "Member 'EndBattleAIController_TryPossibleEasySpawnCharacter::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.GetEasySpawnCharacter
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAIController_GetEasySpawnCharacter final
{
public:
	class FName                                   keyword;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AEndCharacter*                          ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_GetEasySpawnCharacter) == 0x000008, "Wrong alignment on EndBattleAIController_GetEasySpawnCharacter");
static_assert(sizeof(EndBattleAIController_GetEasySpawnCharacter) == 0x000010, "Wrong size on EndBattleAIController_GetEasySpawnCharacter");
static_assert(offsetof(EndBattleAIController_GetEasySpawnCharacter, keyword) == 0x000000, "Member 'EndBattleAIController_GetEasySpawnCharacter::keyword' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_GetEasySpawnCharacter, ReturnValue) == 0x000008, "Member 'EndBattleAIController_GetEasySpawnCharacter::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.GetFirstDamageTime
// 0x0018 (0x0018 - 0x0000)
struct EndBattleAIController_GetFirstDamageTime final
{
public:
	float                                         FirstDamageTime;                                   // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UAnimSequence*                    AnimSequecne;                                      // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartTime;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAIController_GetFirstDamageTime) == 0x000008, "Wrong alignment on EndBattleAIController_GetFirstDamageTime");
static_assert(sizeof(EndBattleAIController_GetFirstDamageTime) == 0x000018, "Wrong size on EndBattleAIController_GetFirstDamageTime");
static_assert(offsetof(EndBattleAIController_GetFirstDamageTime, FirstDamageTime) == 0x000000, "Member 'EndBattleAIController_GetFirstDamageTime::FirstDamageTime' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_GetFirstDamageTime, AnimSequecne) == 0x000008, "Member 'EndBattleAIController_GetFirstDamageTime::AnimSequecne' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_GetFirstDamageTime, StartTime) == 0x000010, "Member 'EndBattleAIController_GetFirstDamageTime::StartTime' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_GetFirstDamageTime, ReturnValue) == 0x000014, "Member 'EndBattleAIController_GetFirstDamageTime::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.GetSpecialStatusParamFloat
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAIController_GetSpecialStatusParamFloat final
{
public:
	EEndBattleSpecialStatusChangeType             Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   paramID;                                           // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_GetSpecialStatusParamFloat) == 0x000004, "Wrong alignment on EndBattleAIController_GetSpecialStatusParamFloat");
static_assert(sizeof(EndBattleAIController_GetSpecialStatusParamFloat) == 0x000010, "Wrong size on EndBattleAIController_GetSpecialStatusParamFloat");
static_assert(offsetof(EndBattleAIController_GetSpecialStatusParamFloat, Type) == 0x000000, "Member 'EndBattleAIController_GetSpecialStatusParamFloat::Type' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_GetSpecialStatusParamFloat, paramID) == 0x000004, "Member 'EndBattleAIController_GetSpecialStatusParamFloat::paramID' has a wrong offset!");
static_assert(offsetof(EndBattleAIController_GetSpecialStatusParamFloat, ReturnValue) == 0x00000C, "Member 'EndBattleAIController_GetSpecialStatusParamFloat::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.GetSpecialStatusType
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAIController_GetSpecialStatusType final
{
public:
	TArray<EEndBattleSpecialStatusChangeType>     typeList;                                          // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_GetSpecialStatusType) == 0x000008, "Wrong alignment on EndBattleAIController_GetSpecialStatusType");
static_assert(sizeof(EndBattleAIController_GetSpecialStatusType) == 0x000010, "Wrong size on EndBattleAIController_GetSpecialStatusType");
static_assert(offsetof(EndBattleAIController_GetSpecialStatusType, typeList) == 0x000000, "Member 'EndBattleAIController_GetSpecialStatusType::typeList' has a wrong offset!");

// Function EndGame.EndBattleAIController.IsInDummyBattle
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAIController_IsInDummyBattle final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_IsInDummyBattle) == 0x000001, "Wrong alignment on EndBattleAIController_IsInDummyBattle");
static_assert(sizeof(EndBattleAIController_IsInDummyBattle) == 0x000001, "Wrong size on EndBattleAIController_IsInDummyBattle");
static_assert(offsetof(EndBattleAIController_IsInDummyBattle, ReturnValue) == 0x000000, "Member 'EndBattleAIController_IsInDummyBattle::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.IsInSyncAction
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAIController_IsInSyncAction final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_IsInSyncAction) == 0x000001, "Wrong alignment on EndBattleAIController_IsInSyncAction");
static_assert(sizeof(EndBattleAIController_IsInSyncAction) == 0x000001, "Wrong size on EndBattleAIController_IsInSyncAction");
static_assert(offsetof(EndBattleAIController_IsInSyncAction, ReturnValue) == 0x000000, "Member 'EndBattleAIController_IsInSyncAction::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIController.IsLockTargetCharaBase
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAIController_IsLockTargetCharaBase final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIController_IsLockTargetCharaBase) == 0x000001, "Wrong alignment on EndBattleAIController_IsLockTargetCharaBase");
static_assert(sizeof(EndBattleAIController_IsLockTargetCharaBase) == 0x000001, "Wrong size on EndBattleAIController_IsLockTargetCharaBase");
static_assert(offsetof(EndBattleAIController_IsLockTargetCharaBase, ReturnValue) == 0x000000, "Member 'EndBattleAIController_IsLockTargetCharaBase::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIEB0021Controller.OnCounterCheck
// 0x001C (0x001C - 0x0000)
struct EndBattleAIEB0021Controller_OnCounterCheck final
{
public:
	class FName                                   InTakeAbilityID;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InTakeMotionID;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InPlanAction;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InCount;                                           // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIEB0021Controller_OnCounterCheck) == 0x000004, "Wrong alignment on EndBattleAIEB0021Controller_OnCounterCheck");
static_assert(sizeof(EndBattleAIEB0021Controller_OnCounterCheck) == 0x00001C, "Wrong size on EndBattleAIEB0021Controller_OnCounterCheck");
static_assert(offsetof(EndBattleAIEB0021Controller_OnCounterCheck, InTakeAbilityID) == 0x000000, "Member 'EndBattleAIEB0021Controller_OnCounterCheck::InTakeAbilityID' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0021Controller_OnCounterCheck, InTakeMotionID) == 0x000008, "Member 'EndBattleAIEB0021Controller_OnCounterCheck::InTakeMotionID' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0021Controller_OnCounterCheck, InPlanAction) == 0x000010, "Member 'EndBattleAIEB0021Controller_OnCounterCheck::InPlanAction' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0021Controller_OnCounterCheck, InCount) == 0x000018, "Member 'EndBattleAIEB0021Controller_OnCounterCheck::InCount' has a wrong offset!");

// Function EndGame.EndBattleAIEB0021Controller.RequestBlownAway
// 0x0020 (0x0020 - 0x0000)
struct EndBattleAIEB0021Controller_RequestBlownAway final
{
public:
	class AEndCharacter*                          causerCharacter;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OutTargetName;                                     // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutTargetLocation;                                 // 0x0010(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAIEB0021Controller_RequestBlownAway) == 0x000008, "Wrong alignment on EndBattleAIEB0021Controller_RequestBlownAway");
static_assert(sizeof(EndBattleAIEB0021Controller_RequestBlownAway) == 0x000020, "Wrong size on EndBattleAIEB0021Controller_RequestBlownAway");
static_assert(offsetof(EndBattleAIEB0021Controller_RequestBlownAway, causerCharacter) == 0x000000, "Member 'EndBattleAIEB0021Controller_RequestBlownAway::causerCharacter' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0021Controller_RequestBlownAway, OutTargetName) == 0x000008, "Member 'EndBattleAIEB0021Controller_RequestBlownAway::OutTargetName' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0021Controller_RequestBlownAway, OutTargetLocation) == 0x000010, "Member 'EndBattleAIEB0021Controller_RequestBlownAway::OutTargetLocation' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0021Controller_RequestBlownAway, ReturnValue) == 0x00001C, "Member 'EndBattleAIEB0021Controller_RequestBlownAway::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIEB0021Controller.SetHitTerrainAbilityName
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAIEB0021Controller_SetHitTerrainAbilityName final
{
public:
	class FName                                   abilitiName;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIEB0021Controller_SetHitTerrainAbilityName) == 0x000004, "Wrong alignment on EndBattleAIEB0021Controller_SetHitTerrainAbilityName");
static_assert(sizeof(EndBattleAIEB0021Controller_SetHitTerrainAbilityName) == 0x000008, "Wrong size on EndBattleAIEB0021Controller_SetHitTerrainAbilityName");
static_assert(offsetof(EndBattleAIEB0021Controller_SetHitTerrainAbilityName, abilitiName) == 0x000000, "Member 'EndBattleAIEB0021Controller_SetHitTerrainAbilityName::abilitiName' has a wrong offset!");

// Function EndGame.EndBattleAIEB0021Controller.SetHitTerrainDamageSourceName
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAIEB0021Controller_SetHitTerrainDamageSourceName final
{
public:
	class FName                                   damageSourceName;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIEB0021Controller_SetHitTerrainDamageSourceName) == 0x000004, "Wrong alignment on EndBattleAIEB0021Controller_SetHitTerrainDamageSourceName");
static_assert(sizeof(EndBattleAIEB0021Controller_SetHitTerrainDamageSourceName) == 0x000008, "Wrong size on EndBattleAIEB0021Controller_SetHitTerrainDamageSourceName");
static_assert(offsetof(EndBattleAIEB0021Controller_SetHitTerrainDamageSourceName, damageSourceName) == 0x000000, "Member 'EndBattleAIEB0021Controller_SetHitTerrainDamageSourceName::damageSourceName' has a wrong offset!");

// Function EndGame.EndMainSystemMenu.OnLeftMenuPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndMainSystemMenu_OnLeftMenuPressedItem final
{
public:
	int32                                         ItemIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainSystemMenu_OnLeftMenuPressedItem) == 0x000004, "Wrong alignment on EndMainSystemMenu_OnLeftMenuPressedItem");
static_assert(sizeof(EndMainSystemMenu_OnLeftMenuPressedItem) == 0x000004, "Wrong size on EndMainSystemMenu_OnLeftMenuPressedItem");
static_assert(offsetof(EndMainSystemMenu_OnLeftMenuPressedItem, ItemIndex) == 0x000000, "Member 'EndMainSystemMenu_OnLeftMenuPressedItem::ItemIndex' has a wrong offset!");

// Function EndGame.EndMainSystemMenu.OnLeftMenuSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndMainSystemMenu_OnLeftMenuSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMainSystemMenu_OnLeftMenuSetupItem) == 0x000008, "Wrong alignment on EndMainSystemMenu_OnLeftMenuSetupItem");
static_assert(sizeof(EndMainSystemMenu_OnLeftMenuSetupItem) == 0x000010, "Wrong size on EndMainSystemMenu_OnLeftMenuSetupItem");
static_assert(offsetof(EndMainSystemMenu_OnLeftMenuSetupItem, ItemWidget) == 0x000000, "Member 'EndMainSystemMenu_OnLeftMenuSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndMainSystemMenu_OnLeftMenuSetupItem, ItemIndex) == 0x000008, "Member 'EndMainSystemMenu_OnLeftMenuSetupItem::ItemIndex' has a wrong offset!");

// Function EndGame.EndBattleAIFitSplineController.FindNearestSplineNodeActor
// 0x0028 (0x0028 - 0x0000)
struct EndBattleAIFitSplineController_FindNearestSplineNodeActor final
{
public:
	float                                         InFanAngle;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InFanRadiusMin;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InFanRadiusMax;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InSocketName;                                      // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NextPointDistance;                                 // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InGroupName;                                       // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AEndBattleAISpline*                     ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIFitSplineController_FindNearestSplineNodeActor) == 0x000008, "Wrong alignment on EndBattleAIFitSplineController_FindNearestSplineNodeActor");
static_assert(sizeof(EndBattleAIFitSplineController_FindNearestSplineNodeActor) == 0x000028, "Wrong size on EndBattleAIFitSplineController_FindNearestSplineNodeActor");
static_assert(offsetof(EndBattleAIFitSplineController_FindNearestSplineNodeActor, InFanAngle) == 0x000000, "Member 'EndBattleAIFitSplineController_FindNearestSplineNodeActor::InFanAngle' has a wrong offset!");
static_assert(offsetof(EndBattleAIFitSplineController_FindNearestSplineNodeActor, InFanRadiusMin) == 0x000004, "Member 'EndBattleAIFitSplineController_FindNearestSplineNodeActor::InFanRadiusMin' has a wrong offset!");
static_assert(offsetof(EndBattleAIFitSplineController_FindNearestSplineNodeActor, InFanRadiusMax) == 0x000008, "Member 'EndBattleAIFitSplineController_FindNearestSplineNodeActor::InFanRadiusMax' has a wrong offset!");
static_assert(offsetof(EndBattleAIFitSplineController_FindNearestSplineNodeActor, InSocketName) == 0x00000C, "Member 'EndBattleAIFitSplineController_FindNearestSplineNodeActor::InSocketName' has a wrong offset!");
static_assert(offsetof(EndBattleAIFitSplineController_FindNearestSplineNodeActor, NextPointDistance) == 0x000014, "Member 'EndBattleAIFitSplineController_FindNearestSplineNodeActor::NextPointDistance' has a wrong offset!");
static_assert(offsetof(EndBattleAIFitSplineController_FindNearestSplineNodeActor, InGroupName) == 0x000018, "Member 'EndBattleAIFitSplineController_FindNearestSplineNodeActor::InGroupName' has a wrong offset!");
static_assert(offsetof(EndBattleAIFitSplineController_FindNearestSplineNodeActor, ReturnValue) == 0x000020, "Member 'EndBattleAIFitSplineController_FindNearestSplineNodeActor::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIFitSplineController.FindNearestSplineNodeLocation
// 0x0038 (0x0038 - 0x0000)
struct EndBattleAIFitSplineController_FindNearestSplineNodeLocation final
{
public:
	class FName                                   OutSplineNodeName;                                 // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutPointLocation;                                  // 0x0008(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutNextPointDistance;                              // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InFanAngle;                                        // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InFanRadiusMin;                                    // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InFanRadiusMax;                                    // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InSocketName;                                      // 0x0024(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InGroupName;                                       // 0x002C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0034(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAIFitSplineController_FindNearestSplineNodeLocation) == 0x000004, "Wrong alignment on EndBattleAIFitSplineController_FindNearestSplineNodeLocation");
static_assert(sizeof(EndBattleAIFitSplineController_FindNearestSplineNodeLocation) == 0x000038, "Wrong size on EndBattleAIFitSplineController_FindNearestSplineNodeLocation");
static_assert(offsetof(EndBattleAIFitSplineController_FindNearestSplineNodeLocation, OutSplineNodeName) == 0x000000, "Member 'EndBattleAIFitSplineController_FindNearestSplineNodeLocation::OutSplineNodeName' has a wrong offset!");
static_assert(offsetof(EndBattleAIFitSplineController_FindNearestSplineNodeLocation, OutPointLocation) == 0x000008, "Member 'EndBattleAIFitSplineController_FindNearestSplineNodeLocation::OutPointLocation' has a wrong offset!");
static_assert(offsetof(EndBattleAIFitSplineController_FindNearestSplineNodeLocation, OutNextPointDistance) == 0x000014, "Member 'EndBattleAIFitSplineController_FindNearestSplineNodeLocation::OutNextPointDistance' has a wrong offset!");
static_assert(offsetof(EndBattleAIFitSplineController_FindNearestSplineNodeLocation, InFanAngle) == 0x000018, "Member 'EndBattleAIFitSplineController_FindNearestSplineNodeLocation::InFanAngle' has a wrong offset!");
static_assert(offsetof(EndBattleAIFitSplineController_FindNearestSplineNodeLocation, InFanRadiusMin) == 0x00001C, "Member 'EndBattleAIFitSplineController_FindNearestSplineNodeLocation::InFanRadiusMin' has a wrong offset!");
static_assert(offsetof(EndBattleAIFitSplineController_FindNearestSplineNodeLocation, InFanRadiusMax) == 0x000020, "Member 'EndBattleAIFitSplineController_FindNearestSplineNodeLocation::InFanRadiusMax' has a wrong offset!");
static_assert(offsetof(EndBattleAIFitSplineController_FindNearestSplineNodeLocation, InSocketName) == 0x000024, "Member 'EndBattleAIFitSplineController_FindNearestSplineNodeLocation::InSocketName' has a wrong offset!");
static_assert(offsetof(EndBattleAIFitSplineController_FindNearestSplineNodeLocation, InGroupName) == 0x00002C, "Member 'EndBattleAIFitSplineController_FindNearestSplineNodeLocation::InGroupName' has a wrong offset!");
static_assert(offsetof(EndBattleAIFitSplineController_FindNearestSplineNodeLocation, ReturnValue) == 0x000034, "Member 'EndBattleAIFitSplineController_FindNearestSplineNodeLocation::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIFitSplineController.FindNearestSplineNodeName
// 0x0028 (0x0028 - 0x0000)
struct EndBattleAIFitSplineController_FindNearestSplineNodeName final
{
public:
	float                                         InFanAngle;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InFanRadiusMin;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InFanRadiusMax;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InSocketName;                                      // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NextPointDistance;                                 // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InGroupName;                                       // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIFitSplineController_FindNearestSplineNodeName) == 0x000004, "Wrong alignment on EndBattleAIFitSplineController_FindNearestSplineNodeName");
static_assert(sizeof(EndBattleAIFitSplineController_FindNearestSplineNodeName) == 0x000028, "Wrong size on EndBattleAIFitSplineController_FindNearestSplineNodeName");
static_assert(offsetof(EndBattleAIFitSplineController_FindNearestSplineNodeName, InFanAngle) == 0x000000, "Member 'EndBattleAIFitSplineController_FindNearestSplineNodeName::InFanAngle' has a wrong offset!");
static_assert(offsetof(EndBattleAIFitSplineController_FindNearestSplineNodeName, InFanRadiusMin) == 0x000004, "Member 'EndBattleAIFitSplineController_FindNearestSplineNodeName::InFanRadiusMin' has a wrong offset!");
static_assert(offsetof(EndBattleAIFitSplineController_FindNearestSplineNodeName, InFanRadiusMax) == 0x000008, "Member 'EndBattleAIFitSplineController_FindNearestSplineNodeName::InFanRadiusMax' has a wrong offset!");
static_assert(offsetof(EndBattleAIFitSplineController_FindNearestSplineNodeName, InSocketName) == 0x00000C, "Member 'EndBattleAIFitSplineController_FindNearestSplineNodeName::InSocketName' has a wrong offset!");
static_assert(offsetof(EndBattleAIFitSplineController_FindNearestSplineNodeName, NextPointDistance) == 0x000014, "Member 'EndBattleAIFitSplineController_FindNearestSplineNodeName::NextPointDistance' has a wrong offset!");
static_assert(offsetof(EndBattleAIFitSplineController_FindNearestSplineNodeName, InGroupName) == 0x000018, "Member 'EndBattleAIFitSplineController_FindNearestSplineNodeName::InGroupName' has a wrong offset!");
static_assert(offsetof(EndBattleAIFitSplineController_FindNearestSplineNodeName, ReturnValue) == 0x000020, "Member 'EndBattleAIFitSplineController_FindNearestSplineNodeName::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIFitSplineController.GetConnectGoal
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAIFitSplineController_GetConnectGoal final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIFitSplineController_GetConnectGoal) == 0x000004, "Wrong alignment on EndBattleAIFitSplineController_GetConnectGoal");
static_assert(sizeof(EndBattleAIFitSplineController_GetConnectGoal) == 0x000008, "Wrong size on EndBattleAIFitSplineController_GetConnectGoal");
static_assert(offsetof(EndBattleAIFitSplineController_GetConnectGoal, ReturnValue) == 0x000000, "Member 'EndBattleAIFitSplineController_GetConnectGoal::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIFitSplineController.GetCurrentSprine
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAIFitSplineController_GetCurrentSprine final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIFitSplineController_GetCurrentSprine) == 0x000004, "Wrong alignment on EndBattleAIFitSplineController_GetCurrentSprine");
static_assert(sizeof(EndBattleAIFitSplineController_GetCurrentSprine) == 0x000008, "Wrong size on EndBattleAIFitSplineController_GetCurrentSprine");
static_assert(offsetof(EndBattleAIFitSplineController_GetCurrentSprine, ReturnValue) == 0x000000, "Member 'EndBattleAIFitSplineController_GetCurrentSprine::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIFitSplineController.GetCurrentVelocity
// 0x0004 (0x0004 - 0x0000)
struct EndBattleAIFitSplineController_GetCurrentVelocity final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIFitSplineController_GetCurrentVelocity) == 0x000004, "Wrong alignment on EndBattleAIFitSplineController_GetCurrentVelocity");
static_assert(sizeof(EndBattleAIFitSplineController_GetCurrentVelocity) == 0x000004, "Wrong size on EndBattleAIFitSplineController_GetCurrentVelocity");
static_assert(offsetof(EndBattleAIFitSplineController_GetCurrentVelocity, ReturnValue) == 0x000000, "Member 'EndBattleAIFitSplineController_GetCurrentVelocity::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIFitSplineController.GetPrevSprine
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAIFitSplineController_GetPrevSprine final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIFitSplineController_GetPrevSprine) == 0x000004, "Wrong alignment on EndBattleAIFitSplineController_GetPrevSprine");
static_assert(sizeof(EndBattleAIFitSplineController_GetPrevSprine) == 0x000008, "Wrong size on EndBattleAIFitSplineController_GetPrevSprine");
static_assert(offsetof(EndBattleAIFitSplineController_GetPrevSprine, ReturnValue) == 0x000000, "Member 'EndBattleAIFitSplineController_GetPrevSprine::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIFitSplineController.GetSplineLocation
// 0x0014 (0x0014 - 0x0000)
struct EndBattleAIFitSplineController_GetSplineLocation final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0008(0x000C)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIFitSplineController_GetSplineLocation) == 0x000004, "Wrong alignment on EndBattleAIFitSplineController_GetSplineLocation");
static_assert(sizeof(EndBattleAIFitSplineController_GetSplineLocation) == 0x000014, "Wrong size on EndBattleAIFitSplineController_GetSplineLocation");
static_assert(offsetof(EndBattleAIFitSplineController_GetSplineLocation, InName) == 0x000000, "Member 'EndBattleAIFitSplineController_GetSplineLocation::InName' has a wrong offset!");
static_assert(offsetof(EndBattleAIFitSplineController_GetSplineLocation, ReturnValue) == 0x000008, "Member 'EndBattleAIFitSplineController_GetSplineLocation::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIFitSplineController.GetSplineVector
// 0x0014 (0x0014 - 0x0000)
struct EndBattleAIFitSplineController_GetSplineVector final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0008(0x000C)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIFitSplineController_GetSplineVector) == 0x000004, "Wrong alignment on EndBattleAIFitSplineController_GetSplineVector");
static_assert(sizeof(EndBattleAIFitSplineController_GetSplineVector) == 0x000014, "Wrong size on EndBattleAIFitSplineController_GetSplineVector");
static_assert(offsetof(EndBattleAIFitSplineController_GetSplineVector, InName) == 0x000000, "Member 'EndBattleAIFitSplineController_GetSplineVector::InName' has a wrong offset!");
static_assert(offsetof(EndBattleAIFitSplineController_GetSplineVector, ReturnValue) == 0x000008, "Member 'EndBattleAIFitSplineController_GetSplineVector::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIFitSplineController.OnBeginSplineMove
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAIFitSplineController_OnBeginSplineMove final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIFitSplineController_OnBeginSplineMove) == 0x000004, "Wrong alignment on EndBattleAIFitSplineController_OnBeginSplineMove");
static_assert(sizeof(EndBattleAIFitSplineController_OnBeginSplineMove) == 0x000008, "Wrong size on EndBattleAIFitSplineController_OnBeginSplineMove");
static_assert(offsetof(EndBattleAIFitSplineController_OnBeginSplineMove, InName) == 0x000000, "Member 'EndBattleAIFitSplineController_OnBeginSplineMove::InName' has a wrong offset!");

// Function EndGame.EndBattleAIFitSplineController.OnCompleteSplineMove
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAIFitSplineController_OnCompleteSplineMove final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIFitSplineController_OnCompleteSplineMove) == 0x000004, "Wrong alignment on EndBattleAIFitSplineController_OnCompleteSplineMove");
static_assert(sizeof(EndBattleAIFitSplineController_OnCompleteSplineMove) == 0x000008, "Wrong size on EndBattleAIFitSplineController_OnCompleteSplineMove");
static_assert(offsetof(EndBattleAIFitSplineController_OnCompleteSplineMove, InName) == 0x000000, "Member 'EndBattleAIFitSplineController_OnCompleteSplineMove::InName' has a wrong offset!");

// Function EndGame.EndBattleAIFitSplineController.OnSuspendSplineMove
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAIFitSplineController_OnSuspendSplineMove final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIFitSplineController_OnSuspendSplineMove) == 0x000004, "Wrong alignment on EndBattleAIFitSplineController_OnSuspendSplineMove");
static_assert(sizeof(EndBattleAIFitSplineController_OnSuspendSplineMove) == 0x000008, "Wrong size on EndBattleAIFitSplineController_OnSuspendSplineMove");
static_assert(offsetof(EndBattleAIFitSplineController_OnSuspendSplineMove, InName) == 0x000000, "Member 'EndBattleAIFitSplineController_OnSuspendSplineMove::InName' has a wrong offset!");

// Function EndGame.EndBattleAIFitSplineController.OnUpdateSplineMove
// 0x000C (0x000C - 0x0000)
struct EndBattleAIFitSplineController_OnUpdateSplineMove final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InProgress;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIFitSplineController_OnUpdateSplineMove) == 0x000004, "Wrong alignment on EndBattleAIFitSplineController_OnUpdateSplineMove");
static_assert(sizeof(EndBattleAIFitSplineController_OnUpdateSplineMove) == 0x00000C, "Wrong size on EndBattleAIFitSplineController_OnUpdateSplineMove");
static_assert(offsetof(EndBattleAIFitSplineController_OnUpdateSplineMove, InName) == 0x000000, "Member 'EndBattleAIFitSplineController_OnUpdateSplineMove::InName' has a wrong offset!");
static_assert(offsetof(EndBattleAIFitSplineController_OnUpdateSplineMove, InProgress) == 0x000008, "Member 'EndBattleAIFitSplineController_OnUpdateSplineMove::InProgress' has a wrong offset!");

// Function EndGame.EndBattleAIFitSplineController.RequestChangeMotion
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAIFitSplineController_RequestChangeMotion final
{
public:
	class FName                                   InMotionName;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIFitSplineController_RequestChangeMotion) == 0x000004, "Wrong alignment on EndBattleAIFitSplineController_RequestChangeMotion");
static_assert(sizeof(EndBattleAIFitSplineController_RequestChangeMotion) == 0x000008, "Wrong size on EndBattleAIFitSplineController_RequestChangeMotion");
static_assert(offsetof(EndBattleAIFitSplineController_RequestChangeMotion, InMotionName) == 0x000000, "Member 'EndBattleAIFitSplineController_RequestChangeMotion::InMotionName' has a wrong offset!");

// Function EndGame.EndBattleAIFitSplineController.RequestConnectSpline
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAIFitSplineController_RequestConnectSpline final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIFitSplineController_RequestConnectSpline) == 0x000004, "Wrong alignment on EndBattleAIFitSplineController_RequestConnectSpline");
static_assert(sizeof(EndBattleAIFitSplineController_RequestConnectSpline) == 0x000008, "Wrong size on EndBattleAIFitSplineController_RequestConnectSpline");
static_assert(offsetof(EndBattleAIFitSplineController_RequestConnectSpline, InName) == 0x000000, "Member 'EndBattleAIFitSplineController_RequestConnectSpline::InName' has a wrong offset!");

// Function EndGame.EndBattleAIFitSplineController.RequestOneShotMotion
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAIFitSplineController_RequestOneShotMotion final
{
public:
	class FName                                   InMotionName;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIFitSplineController_RequestOneShotMotion) == 0x000004, "Wrong alignment on EndBattleAIFitSplineController_RequestOneShotMotion");
static_assert(sizeof(EndBattleAIFitSplineController_RequestOneShotMotion) == 0x000008, "Wrong size on EndBattleAIFitSplineController_RequestOneShotMotion");
static_assert(offsetof(EndBattleAIFitSplineController_RequestOneShotMotion, InMotionName) == 0x000000, "Member 'EndBattleAIFitSplineController_RequestOneShotMotion::InMotionName' has a wrong offset!");

// Function EndGame.EndBattleAIFitSplineController.RequestSplineMove
// 0x0014 (0x0014 - 0x0000)
struct EndBattleAIFitSplineController_RequestSplineMove final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InMotionName;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InNextPointDistance;                               // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIFitSplineController_RequestSplineMove) == 0x000004, "Wrong alignment on EndBattleAIFitSplineController_RequestSplineMove");
static_assert(sizeof(EndBattleAIFitSplineController_RequestSplineMove) == 0x000014, "Wrong size on EndBattleAIFitSplineController_RequestSplineMove");
static_assert(offsetof(EndBattleAIFitSplineController_RequestSplineMove, InName) == 0x000000, "Member 'EndBattleAIFitSplineController_RequestSplineMove::InName' has a wrong offset!");
static_assert(offsetof(EndBattleAIFitSplineController_RequestSplineMove, InMotionName) == 0x000008, "Member 'EndBattleAIFitSplineController_RequestSplineMove::InMotionName' has a wrong offset!");
static_assert(offsetof(EndBattleAIFitSplineController_RequestSplineMove, InNextPointDistance) == 0x000010, "Member 'EndBattleAIFitSplineController_RequestSplineMove::InNextPointDistance' has a wrong offset!");

// Function EndGame.EndBattleAIFitSplineController.ReserveNextSpline
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAIFitSplineController_ReserveNextSpline final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIFitSplineController_ReserveNextSpline) == 0x000004, "Wrong alignment on EndBattleAIFitSplineController_ReserveNextSpline");
static_assert(sizeof(EndBattleAIFitSplineController_ReserveNextSpline) == 0x000008, "Wrong size on EndBattleAIFitSplineController_ReserveNextSpline");
static_assert(offsetof(EndBattleAIFitSplineController_ReserveNextSpline, InName) == 0x000000, "Member 'EndBattleAIFitSplineController_ReserveNextSpline::InName' has a wrong offset!");

// Function EndGame.EndBattleAIFitSplineController.SetFitSplineAcceleration
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAIFitSplineController_SetFitSplineAcceleration final
{
public:
	float                                         InAcceleration;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InDeceleration;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIFitSplineController_SetFitSplineAcceleration) == 0x000004, "Wrong alignment on EndBattleAIFitSplineController_SetFitSplineAcceleration");
static_assert(sizeof(EndBattleAIFitSplineController_SetFitSplineAcceleration) == 0x000008, "Wrong size on EndBattleAIFitSplineController_SetFitSplineAcceleration");
static_assert(offsetof(EndBattleAIFitSplineController_SetFitSplineAcceleration, InAcceleration) == 0x000000, "Member 'EndBattleAIFitSplineController_SetFitSplineAcceleration::InAcceleration' has a wrong offset!");
static_assert(offsetof(EndBattleAIFitSplineController_SetFitSplineAcceleration, InDeceleration) == 0x000004, "Member 'EndBattleAIFitSplineController_SetFitSplineAcceleration::InDeceleration' has a wrong offset!");

// Function EndGame.EndBattleAIFitSplineController.SetFitSplineRoll
// 0x000C (0x000C - 0x0000)
struct EndBattleAIFitSplineController_SetFitSplineRoll final
{
public:
	float                                         InThreashold;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InRate;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InSpeed;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIFitSplineController_SetFitSplineRoll) == 0x000004, "Wrong alignment on EndBattleAIFitSplineController_SetFitSplineRoll");
static_assert(sizeof(EndBattleAIFitSplineController_SetFitSplineRoll) == 0x00000C, "Wrong size on EndBattleAIFitSplineController_SetFitSplineRoll");
static_assert(offsetof(EndBattleAIFitSplineController_SetFitSplineRoll, InThreashold) == 0x000000, "Member 'EndBattleAIFitSplineController_SetFitSplineRoll::InThreashold' has a wrong offset!");
static_assert(offsetof(EndBattleAIFitSplineController_SetFitSplineRoll, InRate) == 0x000004, "Member 'EndBattleAIFitSplineController_SetFitSplineRoll::InRate' has a wrong offset!");
static_assert(offsetof(EndBattleAIFitSplineController_SetFitSplineRoll, InSpeed) == 0x000008, "Member 'EndBattleAIFitSplineController_SetFitSplineRoll::InSpeed' has a wrong offset!");

// Function EndGame.EndBattleAIFitSplineController.SetFitSplineVelocity
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAIFitSplineController_SetFitSplineVelocity final
{
public:
	float                                         InMax;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InMin;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIFitSplineController_SetFitSplineVelocity) == 0x000004, "Wrong alignment on EndBattleAIFitSplineController_SetFitSplineVelocity");
static_assert(sizeof(EndBattleAIFitSplineController_SetFitSplineVelocity) == 0x000008, "Wrong size on EndBattleAIFitSplineController_SetFitSplineVelocity");
static_assert(offsetof(EndBattleAIFitSplineController_SetFitSplineVelocity, InMax) == 0x000000, "Member 'EndBattleAIFitSplineController_SetFitSplineVelocity::InMax' has a wrong offset!");
static_assert(offsetof(EndBattleAIFitSplineController_SetFitSplineVelocity, InMin) == 0x000004, "Member 'EndBattleAIFitSplineController_SetFitSplineVelocity::InMin' has a wrong offset!");

// Function EndGame.EndBattleAIEB0017Controller.CheckLinkMode
// 0x0002 (0x0002 - 0x0000)
struct EndBattleAIEB0017Controller_CheckLinkMode final
{
public:
	EDarknationLinkMode                           linkMode;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIEB0017Controller_CheckLinkMode) == 0x000001, "Wrong alignment on EndBattleAIEB0017Controller_CheckLinkMode");
static_assert(sizeof(EndBattleAIEB0017Controller_CheckLinkMode) == 0x000002, "Wrong size on EndBattleAIEB0017Controller_CheckLinkMode");
static_assert(offsetof(EndBattleAIEB0017Controller_CheckLinkMode, linkMode) == 0x000000, "Member 'EndBattleAIEB0017Controller_CheckLinkMode::linkMode' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0017Controller_CheckLinkMode, ReturnValue) == 0x000001, "Member 'EndBattleAIEB0017Controller_CheckLinkMode::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIEB0017Controller.SetLinkMode
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAIEB0017Controller_SetLinkMode final
{
public:
	EDarknationLinkMode                           linkMode;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIEB0017Controller_SetLinkMode) == 0x000001, "Wrong alignment on EndBattleAIEB0017Controller_SetLinkMode");
static_assert(sizeof(EndBattleAIEB0017Controller_SetLinkMode) == 0x000001, "Wrong size on EndBattleAIEB0017Controller_SetLinkMode");
static_assert(offsetof(EndBattleAIEB0017Controller_SetLinkMode, linkMode) == 0x000000, "Member 'EndBattleAIEB0017Controller_SetLinkMode::linkMode' has a wrong offset!");

// Function EndGame.EndMenuAPI.AddFadeFilter
// 0x0040 (0x0040 - 0x0000)
struct EndMenuAPI_AddFadeFilter final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name_0;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ZOrder;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           FromColor;                                         // 0x0014(0x0010)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ToColor;                                           // 0x0024(0x0010)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeTime;                                          // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoDestroy;                                      // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPauseable;                                        // 0x0039(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMenuAPI_AddFadeFilter) == 0x000008, "Wrong alignment on EndMenuAPI_AddFadeFilter");
static_assert(sizeof(EndMenuAPI_AddFadeFilter) == 0x000040, "Wrong size on EndMenuAPI_AddFadeFilter");
static_assert(offsetof(EndMenuAPI_AddFadeFilter, WorldContextObject) == 0x000000, "Member 'EndMenuAPI_AddFadeFilter::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_AddFadeFilter, Name_0) == 0x000008, "Member 'EndMenuAPI_AddFadeFilter::Name_0' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_AddFadeFilter, ZOrder) == 0x000010, "Member 'EndMenuAPI_AddFadeFilter::ZOrder' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_AddFadeFilter, FromColor) == 0x000014, "Member 'EndMenuAPI_AddFadeFilter::FromColor' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_AddFadeFilter, ToColor) == 0x000024, "Member 'EndMenuAPI_AddFadeFilter::ToColor' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_AddFadeFilter, FadeTime) == 0x000034, "Member 'EndMenuAPI_AddFadeFilter::FadeTime' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_AddFadeFilter, bAutoDestroy) == 0x000038, "Member 'EndMenuAPI_AddFadeFilter::bAutoDestroy' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_AddFadeFilter, bPauseable) == 0x000039, "Member 'EndMenuAPI_AddFadeFilter::bPauseable' has a wrong offset!");

// Function EndGame.EndMenuAPI.AddMessageLog_AnyThread
// 0x0020 (0x0020 - 0x0000)
struct EndMenuAPI_AddMessageLog_AnyThread final
{
public:
	EEndMenuIconKind                              Icon;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Message;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndMenuLogEffectKind                         Effect;                                            // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMenuAPI_AddMessageLog_AnyThread) == 0x000008, "Wrong alignment on EndMenuAPI_AddMessageLog_AnyThread");
static_assert(sizeof(EndMenuAPI_AddMessageLog_AnyThread) == 0x000020, "Wrong size on EndMenuAPI_AddMessageLog_AnyThread");
static_assert(offsetof(EndMenuAPI_AddMessageLog_AnyThread, Icon) == 0x000000, "Member 'EndMenuAPI_AddMessageLog_AnyThread::Icon' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_AddMessageLog_AnyThread, Message) == 0x000008, "Member 'EndMenuAPI_AddMessageLog_AnyThread::Message' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_AddMessageLog_AnyThread, Effect) == 0x000018, "Member 'EndMenuAPI_AddMessageLog_AnyThread::Effect' has a wrong offset!");

// Function EndGame.EndMenuAPI.AddTalkLogByTextId
// 0x0018 (0x0018 - 0x0000)
struct EndMenuAPI_AddTalkLogByTextId final
{
public:
	class FString                                 TextID;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WaitSeconds;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMenuAPI_AddTalkLogByTextId) == 0x000008, "Wrong alignment on EndMenuAPI_AddTalkLogByTextId");
static_assert(sizeof(EndMenuAPI_AddTalkLogByTextId) == 0x000018, "Wrong size on EndMenuAPI_AddTalkLogByTextId");
static_assert(offsetof(EndMenuAPI_AddTalkLogByTextId, TextID) == 0x000000, "Member 'EndMenuAPI_AddTalkLogByTextId::TextID' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_AddTalkLogByTextId, WaitSeconds) == 0x000010, "Member 'EndMenuAPI_AddTalkLogByTextId::WaitSeconds' has a wrong offset!");

// Function EndGame.EndMenuAPI.AreaNameExists
// 0x0018 (0x0018 - 0x0000)
struct EndMenuAPI_AreaNameExists final
{
public:
	class FString                                 TextID;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMenuAPI_AreaNameExists) == 0x000008, "Wrong alignment on EndMenuAPI_AreaNameExists");
static_assert(sizeof(EndMenuAPI_AreaNameExists) == 0x000018, "Wrong size on EndMenuAPI_AreaNameExists");
static_assert(offsetof(EndMenuAPI_AreaNameExists, TextID) == 0x000000, "Member 'EndMenuAPI_AreaNameExists::TextID' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_AreaNameExists, ReturnValue) == 0x000010, "Member 'EndMenuAPI_AreaNameExists::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuAPI.BPHideBattleEscape
// 0x0001 (0x0001 - 0x0000)
struct EndMenuAPI_BPHideBattleEscape final
{
public:
	bool                                          aInBattle;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuAPI_BPHideBattleEscape) == 0x000001, "Wrong alignment on EndMenuAPI_BPHideBattleEscape");
static_assert(sizeof(EndMenuAPI_BPHideBattleEscape) == 0x000001, "Wrong size on EndMenuAPI_BPHideBattleEscape");
static_assert(offsetof(EndMenuAPI_BPHideBattleEscape, aInBattle) == 0x000000, "Member 'EndMenuAPI_BPHideBattleEscape::aInBattle' has a wrong offset!");

// Function EndGame.EndMenuAPI.BPHideBattleTutorialWindow
// 0x0008 (0x0008 - 0x0000)
struct EndMenuAPI_BPHideBattleTutorialWindow final
{
public:
	class FName                                   aKey;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuAPI_BPHideBattleTutorialWindow) == 0x000004, "Wrong alignment on EndMenuAPI_BPHideBattleTutorialWindow");
static_assert(sizeof(EndMenuAPI_BPHideBattleTutorialWindow) == 0x000008, "Wrong size on EndMenuAPI_BPHideBattleTutorialWindow");
static_assert(offsetof(EndMenuAPI_BPHideBattleTutorialWindow, aKey) == 0x000000, "Member 'EndMenuAPI_BPHideBattleTutorialWindow::aKey' has a wrong offset!");

// Function EndGame.EndMenuAPI.BPHideCaution
// 0x0001 (0x0001 - 0x0000)
struct EndMenuAPI_BPHideCaution final
{
public:
	bool                                          aInBattle;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuAPI_BPHideCaution) == 0x000001, "Wrong alignment on EndMenuAPI_BPHideCaution");
static_assert(sizeof(EndMenuAPI_BPHideCaution) == 0x000001, "Wrong size on EndMenuAPI_BPHideCaution");
static_assert(offsetof(EndMenuAPI_BPHideCaution, aInBattle) == 0x000000, "Member 'EndMenuAPI_BPHideCaution::aInBattle' has a wrong offset!");

// Function EndGame.EndMenuAPI.BPHideCountdown
// 0x0001 (0x0001 - 0x0000)
struct EndMenuAPI_BPHideCountdown final
{
public:
	bool                                          aHideFailed;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuAPI_BPHideCountdown) == 0x000001, "Wrong alignment on EndMenuAPI_BPHideCountdown");
static_assert(sizeof(EndMenuAPI_BPHideCountdown) == 0x000001, "Wrong size on EndMenuAPI_BPHideCountdown");
static_assert(offsetof(EndMenuAPI_BPHideCountdown, aHideFailed) == 0x000000, "Member 'EndMenuAPI_BPHideCountdown::aHideFailed' has a wrong offset!");

// Function EndGame.EndMenuAPI.BPHideEventProgress
// 0x0001 (0x0001 - 0x0000)
struct EndMenuAPI_BPHideEventProgress final
{
public:
	bool                                          aAnimation;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuAPI_BPHideEventProgress) == 0x000001, "Wrong alignment on EndMenuAPI_BPHideEventProgress");
static_assert(sizeof(EndMenuAPI_BPHideEventProgress) == 0x000001, "Wrong size on EndMenuAPI_BPHideEventProgress");
static_assert(offsetof(EndMenuAPI_BPHideEventProgress, aAnimation) == 0x000000, "Member 'EndMenuAPI_BPHideEventProgress::aAnimation' has a wrong offset!");

// Function EndGame.EndMenuAPI.BPHideUIFilterWindow
// 0x0001 (0x0001 - 0x0000)
struct EndMenuAPI_BPHideUIFilterWindow final
{
public:
	EEndMenuUIFilterType                          aFilterType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuAPI_BPHideUIFilterWindow) == 0x000001, "Wrong alignment on EndMenuAPI_BPHideUIFilterWindow");
static_assert(sizeof(EndMenuAPI_BPHideUIFilterWindow) == 0x000001, "Wrong size on EndMenuAPI_BPHideUIFilterWindow");
static_assert(offsetof(EndMenuAPI_BPHideUIFilterWindow, aFilterType) == 0x000000, "Member 'EndMenuAPI_BPHideUIFilterWindow::aFilterType' has a wrong offset!");

// Function EndGame.EndMenuAPI.BPSetBossDamageLidHP
// 0x0004 (0x0004 - 0x0000)
struct EndMenuAPI_BPSetBossDamageLidHP final
{
public:
	float                                         aHP;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuAPI_BPSetBossDamageLidHP) == 0x000004, "Wrong alignment on EndMenuAPI_BPSetBossDamageLidHP");
static_assert(sizeof(EndMenuAPI_BPSetBossDamageLidHP) == 0x000004, "Wrong size on EndMenuAPI_BPSetBossDamageLidHP");
static_assert(offsetof(EndMenuAPI_BPSetBossDamageLidHP, aHP) == 0x000000, "Member 'EndMenuAPI_BPSetBossDamageLidHP::aHP' has a wrong offset!");

// Function EndGame.EndMenuAPI.BPSetBossHPGauge
// 0x0004 (0x0004 - 0x0000)
struct EndMenuAPI_BPSetBossHPGauge final
{
public:
	float                                         aHP;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuAPI_BPSetBossHPGauge) == 0x000004, "Wrong alignment on EndMenuAPI_BPSetBossHPGauge");
static_assert(sizeof(EndMenuAPI_BPSetBossHPGauge) == 0x000004, "Wrong size on EndMenuAPI_BPSetBossHPGauge");
static_assert(offsetof(EndMenuAPI_BPSetBossHPGauge, aHP) == 0x000000, "Member 'EndMenuAPI_BPSetBossHPGauge::aHP' has a wrong offset!");

// Function EndGame.EndMenuAPI.BPSetCautionQuantity
// 0x0004 (0x0004 - 0x0000)
struct EndMenuAPI_BPSetCautionQuantity final
{
public:
	float                                         aQT;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuAPI_BPSetCautionQuantity) == 0x000004, "Wrong alignment on EndMenuAPI_BPSetCautionQuantity");
static_assert(sizeof(EndMenuAPI_BPSetCautionQuantity) == 0x000004, "Wrong size on EndMenuAPI_BPSetCautionQuantity");
static_assert(offsetof(EndMenuAPI_BPSetCautionQuantity, aQT) == 0x000000, "Member 'EndMenuAPI_BPSetCautionQuantity::aQT' has a wrong offset!");

// Function EndGame.EndMenuAPI.BPSetCountdownTime
// 0x0004 (0x0004 - 0x0000)
struct EndMenuAPI_BPSetCountdownTime final
{
public:
	float                                         SetTime;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuAPI_BPSetCountdownTime) == 0x000004, "Wrong alignment on EndMenuAPI_BPSetCountdownTime");
static_assert(sizeof(EndMenuAPI_BPSetCountdownTime) == 0x000004, "Wrong size on EndMenuAPI_BPSetCountdownTime");
static_assert(offsetof(EndMenuAPI_BPSetCountdownTime, SetTime) == 0x000000, "Member 'EndMenuAPI_BPSetCountdownTime::SetTime' has a wrong offset!");

// Function EndGame.EndMenuAPI.BPSetFieldStaminaGauge
// 0x0004 (0x0004 - 0x0000)
struct EndMenuAPI_BPSetFieldStaminaGauge final
{
public:
	float                                         aGaugeQt;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuAPI_BPSetFieldStaminaGauge) == 0x000004, "Wrong alignment on EndMenuAPI_BPSetFieldStaminaGauge");
static_assert(sizeof(EndMenuAPI_BPSetFieldStaminaGauge) == 0x000004, "Wrong size on EndMenuAPI_BPSetFieldStaminaGauge");
static_assert(offsetof(EndMenuAPI_BPSetFieldStaminaGauge, aGaugeQt) == 0x000000, "Member 'EndMenuAPI_BPSetFieldStaminaGauge::aGaugeQt' has a wrong offset!");

// Function EndGame.EndMenuAPI.BPSetFieldStaminaSpeed
// 0x0004 (0x0004 - 0x0000)
struct EndMenuAPI_BPSetFieldStaminaSpeed final
{
public:
	float                                         aSpeedQt;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuAPI_BPSetFieldStaminaSpeed) == 0x000004, "Wrong alignment on EndMenuAPI_BPSetFieldStaminaSpeed");
static_assert(sizeof(EndMenuAPI_BPSetFieldStaminaSpeed) == 0x000004, "Wrong size on EndMenuAPI_BPSetFieldStaminaSpeed");
static_assert(offsetof(EndMenuAPI_BPSetFieldStaminaSpeed, aSpeedQt) == 0x000000, "Member 'EndMenuAPI_BPSetFieldStaminaSpeed::aSpeedQt' has a wrong offset!");

// Function EndGame.EndMenuAPI.BPShowBattleEscape
// 0x0008 (0x0008 - 0x0000)
struct EndMenuAPI_BPShowBattleEscape final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuAPI_BPShowBattleEscape) == 0x000008, "Wrong alignment on EndMenuAPI_BPShowBattleEscape");
static_assert(sizeof(EndMenuAPI_BPShowBattleEscape) == 0x000008, "Wrong size on EndMenuAPI_BPShowBattleEscape");
static_assert(offsetof(EndMenuAPI_BPShowBattleEscape, WorldContextObject) == 0x000000, "Member 'EndMenuAPI_BPShowBattleEscape::WorldContextObject' has a wrong offset!");

// Function EndGame.EndMenuAPI.BPShowBattleLockonMarkerIcon
// 0x0020 (0x0020 - 0x0000)
struct EndMenuAPI_BPShowBattleLockonMarkerIcon final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WorldPosition;                                     // 0x0008(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndMenuLockonMarkerType                      aType;                                             // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserWidget*                            ReturnValue;                                       // 0x0018(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuAPI_BPShowBattleLockonMarkerIcon) == 0x000008, "Wrong alignment on EndMenuAPI_BPShowBattleLockonMarkerIcon");
static_assert(sizeof(EndMenuAPI_BPShowBattleLockonMarkerIcon) == 0x000020, "Wrong size on EndMenuAPI_BPShowBattleLockonMarkerIcon");
static_assert(offsetof(EndMenuAPI_BPShowBattleLockonMarkerIcon, WorldContextObject) == 0x000000, "Member 'EndMenuAPI_BPShowBattleLockonMarkerIcon::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_BPShowBattleLockonMarkerIcon, WorldPosition) == 0x000008, "Member 'EndMenuAPI_BPShowBattleLockonMarkerIcon::WorldPosition' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_BPShowBattleLockonMarkerIcon, aType) == 0x000014, "Member 'EndMenuAPI_BPShowBattleLockonMarkerIcon::aType' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_BPShowBattleLockonMarkerIcon, ReturnValue) == 0x000018, "Member 'EndMenuAPI_BPShowBattleLockonMarkerIcon::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuAPI.BPShowBattleTutorialWindow
// 0x0010 (0x0010 - 0x0000)
struct EndMenuAPI_BPShowBattleTutorialWindow final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   aKey;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuAPI_BPShowBattleTutorialWindow) == 0x000008, "Wrong alignment on EndMenuAPI_BPShowBattleTutorialWindow");
static_assert(sizeof(EndMenuAPI_BPShowBattleTutorialWindow) == 0x000010, "Wrong size on EndMenuAPI_BPShowBattleTutorialWindow");
static_assert(offsetof(EndMenuAPI_BPShowBattleTutorialWindow, WorldContextObject) == 0x000000, "Member 'EndMenuAPI_BPShowBattleTutorialWindow::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_BPShowBattleTutorialWindow, aKey) == 0x000008, "Member 'EndMenuAPI_BPShowBattleTutorialWindow::aKey' has a wrong offset!");

// Function EndGame.EndMenuAPI.BPShowBossStatus
// 0x0008 (0x0008 - 0x0000)
struct EndMenuAPI_BPShowBossStatus final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuAPI_BPShowBossStatus) == 0x000008, "Wrong alignment on EndMenuAPI_BPShowBossStatus");
static_assert(sizeof(EndMenuAPI_BPShowBossStatus) == 0x000008, "Wrong size on EndMenuAPI_BPShowBossStatus");
static_assert(offsetof(EndMenuAPI_BPShowBossStatus, WorldContextObject) == 0x000000, "Member 'EndMenuAPI_BPShowBossStatus::WorldContextObject' has a wrong offset!");

// Function EndGame.EndMenuAPI.BPShowCaution
// 0x0008 (0x0008 - 0x0000)
struct EndMenuAPI_BPShowCaution final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuAPI_BPShowCaution) == 0x000008, "Wrong alignment on EndMenuAPI_BPShowCaution");
static_assert(sizeof(EndMenuAPI_BPShowCaution) == 0x000008, "Wrong size on EndMenuAPI_BPShowCaution");
static_assert(offsetof(EndMenuAPI_BPShowCaution, WorldContextObject) == 0x000000, "Member 'EndMenuAPI_BPShowCaution::WorldContextObject' has a wrong offset!");

// Function EndGame.EndMenuAPI.BPShowCharacterJoin
// 0x0010 (0x0010 - 0x0000)
struct EndMenuAPI_BPShowCharacterJoin final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlayerType                                   PlayerType;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsIn;                                             // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMenuAPI_BPShowCharacterJoin) == 0x000008, "Wrong alignment on EndMenuAPI_BPShowCharacterJoin");
static_assert(sizeof(EndMenuAPI_BPShowCharacterJoin) == 0x000010, "Wrong size on EndMenuAPI_BPShowCharacterJoin");
static_assert(offsetof(EndMenuAPI_BPShowCharacterJoin, WorldContextObject) == 0x000000, "Member 'EndMenuAPI_BPShowCharacterJoin::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_BPShowCharacterJoin, PlayerType) == 0x000008, "Member 'EndMenuAPI_BPShowCharacterJoin::PlayerType' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_BPShowCharacterJoin, bIsIn) == 0x000009, "Member 'EndMenuAPI_BPShowCharacterJoin::bIsIn' has a wrong offset!");

// Function EndGame.EndMenuAPI.BPShowCharacterReJoin
// 0x0010 (0x0010 - 0x0000)
struct EndMenuAPI_BPShowCharacterReJoin final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsLeftOut;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMenuAPI_BPShowCharacterReJoin) == 0x000008, "Wrong alignment on EndMenuAPI_BPShowCharacterReJoin");
static_assert(sizeof(EndMenuAPI_BPShowCharacterReJoin) == 0x000010, "Wrong size on EndMenuAPI_BPShowCharacterReJoin");
static_assert(offsetof(EndMenuAPI_BPShowCharacterReJoin, WorldContextObject) == 0x000000, "Member 'EndMenuAPI_BPShowCharacterReJoin::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_BPShowCharacterReJoin, bIsLeftOut) == 0x000008, "Member 'EndMenuAPI_BPShowCharacterReJoin::bIsLeftOut' has a wrong offset!");

// Function EndGame.EndMenuAPI.BPShowCountdown
// 0x0010 (0x0010 - 0x0000)
struct EndMenuAPI_BPShowCountdown final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SetTime;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMenuAPI_BPShowCountdown) == 0x000008, "Wrong alignment on EndMenuAPI_BPShowCountdown");
static_assert(sizeof(EndMenuAPI_BPShowCountdown) == 0x000010, "Wrong size on EndMenuAPI_BPShowCountdown");
static_assert(offsetof(EndMenuAPI_BPShowCountdown, WorldContextObject) == 0x000000, "Member 'EndMenuAPI_BPShowCountdown::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_BPShowCountdown, SetTime) == 0x000008, "Member 'EndMenuAPI_BPShowCountdown::SetTime' has a wrong offset!");

// Function EndGame.EndMenuAPI.BPShowDataAccessIcon
// 0x0008 (0x0008 - 0x0000)
struct EndMenuAPI_BPShowDataAccessIcon final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuAPI_BPShowDataAccessIcon) == 0x000008, "Wrong alignment on EndMenuAPI_BPShowDataAccessIcon");
static_assert(sizeof(EndMenuAPI_BPShowDataAccessIcon) == 0x000008, "Wrong size on EndMenuAPI_BPShowDataAccessIcon");
static_assert(offsetof(EndMenuAPI_BPShowDataAccessIcon, WorldContextObject) == 0x000000, "Member 'EndMenuAPI_BPShowDataAccessIcon::WorldContextObject' has a wrong offset!");

// Function EndGame.EndMenuAPI.BPShowEventProgress
// 0x0018 (0x0018 - 0x0000)
struct EndMenuAPI_BPShowEventProgress final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 aShowText;                                         // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuAPI_BPShowEventProgress) == 0x000008, "Wrong alignment on EndMenuAPI_BPShowEventProgress");
static_assert(sizeof(EndMenuAPI_BPShowEventProgress) == 0x000018, "Wrong size on EndMenuAPI_BPShowEventProgress");
static_assert(offsetof(EndMenuAPI_BPShowEventProgress, WorldContextObject) == 0x000000, "Member 'EndMenuAPI_BPShowEventProgress::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_BPShowEventProgress, aShowText) == 0x000008, "Member 'EndMenuAPI_BPShowEventProgress::aShowText' has a wrong offset!");

// Function EndGame.EndMenuAPI.BPShowFieldAction
// 0x0010 (0x0010 - 0x0000)
struct EndMenuAPI_BPShowFieldAction final
{
public:
	class FString                                 aActionTextId;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuAPI_BPShowFieldAction) == 0x000008, "Wrong alignment on EndMenuAPI_BPShowFieldAction");
static_assert(sizeof(EndMenuAPI_BPShowFieldAction) == 0x000010, "Wrong size on EndMenuAPI_BPShowFieldAction");
static_assert(offsetof(EndMenuAPI_BPShowFieldAction, aActionTextId) == 0x000000, "Member 'EndMenuAPI_BPShowFieldAction::aActionTextId' has a wrong offset!");

// Function EndGame.EndMenuAPI.BPShowFieldInputGuidelineWindow
// 0x0010 (0x0010 - 0x0000)
struct EndMenuAPI_BPShowFieldInputGuidelineWindow final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndMenuInputGuidelineType                    aType;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMenuAPI_BPShowFieldInputGuidelineWindow) == 0x000008, "Wrong alignment on EndMenuAPI_BPShowFieldInputGuidelineWindow");
static_assert(sizeof(EndMenuAPI_BPShowFieldInputGuidelineWindow) == 0x000010, "Wrong size on EndMenuAPI_BPShowFieldInputGuidelineWindow");
static_assert(offsetof(EndMenuAPI_BPShowFieldInputGuidelineWindow, WorldContextObject) == 0x000000, "Member 'EndMenuAPI_BPShowFieldInputGuidelineWindow::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_BPShowFieldInputGuidelineWindow, aType) == 0x000008, "Member 'EndMenuAPI_BPShowFieldInputGuidelineWindow::aType' has a wrong offset!");

// Function EndGame.EndMenuAPI.BPShowFieldStaminaIcon
// 0x0008 (0x0008 - 0x0000)
struct EndMenuAPI_BPShowFieldStaminaIcon final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuAPI_BPShowFieldStaminaIcon) == 0x000008, "Wrong alignment on EndMenuAPI_BPShowFieldStaminaIcon");
static_assert(sizeof(EndMenuAPI_BPShowFieldStaminaIcon) == 0x000008, "Wrong size on EndMenuAPI_BPShowFieldStaminaIcon");
static_assert(offsetof(EndMenuAPI_BPShowFieldStaminaIcon, WorldContextObject) == 0x000000, "Member 'EndMenuAPI_BPShowFieldStaminaIcon::WorldContextObject' has a wrong offset!");

// Function EndGame.EndMenuAPI.BPShowGameOver
// 0x0008 (0x0008 - 0x0000)
struct EndMenuAPI_BPShowGameOver final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuAPI_BPShowGameOver) == 0x000008, "Wrong alignment on EndMenuAPI_BPShowGameOver");
static_assert(sizeof(EndMenuAPI_BPShowGameOver) == 0x000008, "Wrong size on EndMenuAPI_BPShowGameOver");
static_assert(offsetof(EndMenuAPI_BPShowGameOver, WorldContextObject) == 0x000000, "Member 'EndMenuAPI_BPShowGameOver::WorldContextObject' has a wrong offset!");

// Function EndGame.EndMenuAPI.BPShowNavimap
// 0x0008 (0x0008 - 0x0000)
struct EndMenuAPI_BPShowNavimap final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuAPI_BPShowNavimap) == 0x000008, "Wrong alignment on EndMenuAPI_BPShowNavimap");
static_assert(sizeof(EndMenuAPI_BPShowNavimap) == 0x000008, "Wrong size on EndMenuAPI_BPShowNavimap");
static_assert(offsetof(EndMenuAPI_BPShowNavimap, WorldContextObject) == 0x000000, "Member 'EndMenuAPI_BPShowNavimap::WorldContextObject' has a wrong offset!");

// Function EndGame.EndMenuAPI.BPShowTalkSelect
// 0x0010 (0x0010 - 0x0000)
struct EndMenuAPI_BPShowTalkSelect final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndMenuTalkSelectWindowType                  aWindowType;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMenuAPI_BPShowTalkSelect) == 0x000008, "Wrong alignment on EndMenuAPI_BPShowTalkSelect");
static_assert(sizeof(EndMenuAPI_BPShowTalkSelect) == 0x000010, "Wrong size on EndMenuAPI_BPShowTalkSelect");
static_assert(offsetof(EndMenuAPI_BPShowTalkSelect, WorldContextObject) == 0x000000, "Member 'EndMenuAPI_BPShowTalkSelect::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_BPShowTalkSelect, aWindowType) == 0x000008, "Member 'EndMenuAPI_BPShowTalkSelect::aWindowType' has a wrong offset!");

// Function EndGame.EndMenuAPI.BPShowUIFilterWindow
// 0x0010 (0x0010 - 0x0000)
struct EndMenuAPI_BPShowUIFilterWindow final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndMenuUIFilterType                          aFilterType;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMenuAPI_BPShowUIFilterWindow) == 0x000008, "Wrong alignment on EndMenuAPI_BPShowUIFilterWindow");
static_assert(sizeof(EndMenuAPI_BPShowUIFilterWindow) == 0x000010, "Wrong size on EndMenuAPI_BPShowUIFilterWindow");
static_assert(offsetof(EndMenuAPI_BPShowUIFilterWindow, WorldContextObject) == 0x000000, "Member 'EndMenuAPI_BPShowUIFilterWindow::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_BPShowUIFilterWindow, aFilterType) == 0x000008, "Member 'EndMenuAPI_BPShowUIFilterWindow::aFilterType' has a wrong offset!");

// Function EndGame.EndMenuAPI.BPShowVisionIcon
// 0x0008 (0x0008 - 0x0000)
struct EndMenuAPI_BPShowVisionIcon final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuAPI_BPShowVisionIcon) == 0x000008, "Wrong alignment on EndMenuAPI_BPShowVisionIcon");
static_assert(sizeof(EndMenuAPI_BPShowVisionIcon) == 0x000008, "Wrong size on EndMenuAPI_BPShowVisionIcon");
static_assert(offsetof(EndMenuAPI_BPShowVisionIcon, WorldContextObject) == 0x000000, "Member 'EndMenuAPI_BPShowVisionIcon::WorldContextObject' has a wrong offset!");

// Function EndGame.EndMenuAPI.ChangeBattleTargetIconState
// 0x0010 (0x0010 - 0x0000)
struct EndMenuAPI_ChangeBattleTargetIconState final
{
public:
	class UUserWidget*                            Icon;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndMenuBattleTargetState                     State;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMenuAPI_ChangeBattleTargetIconState) == 0x000008, "Wrong alignment on EndMenuAPI_ChangeBattleTargetIconState");
static_assert(sizeof(EndMenuAPI_ChangeBattleTargetIconState) == 0x000010, "Wrong size on EndMenuAPI_ChangeBattleTargetIconState");
static_assert(offsetof(EndMenuAPI_ChangeBattleTargetIconState, Icon) == 0x000000, "Member 'EndMenuAPI_ChangeBattleTargetIconState::Icon' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_ChangeBattleTargetIconState, State) == 0x000008, "Member 'EndMenuAPI_ChangeBattleTargetIconState::State' has a wrong offset!");

// Function EndGame.EndMenuAPI.ChangeFadeFilter
// 0x0020 (0x0020 - 0x0000)
struct EndMenuAPI_ChangeFadeFilter final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ToColor;                                           // 0x0008(0x0010)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeTime;                                          // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoDestroy;                                      // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPauseable;                                        // 0x001D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMenuAPI_ChangeFadeFilter) == 0x000004, "Wrong alignment on EndMenuAPI_ChangeFadeFilter");
static_assert(sizeof(EndMenuAPI_ChangeFadeFilter) == 0x000020, "Wrong size on EndMenuAPI_ChangeFadeFilter");
static_assert(offsetof(EndMenuAPI_ChangeFadeFilter, Name_0) == 0x000000, "Member 'EndMenuAPI_ChangeFadeFilter::Name_0' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_ChangeFadeFilter, ToColor) == 0x000008, "Member 'EndMenuAPI_ChangeFadeFilter::ToColor' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_ChangeFadeFilter, FadeTime) == 0x000018, "Member 'EndMenuAPI_ChangeFadeFilter::FadeTime' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_ChangeFadeFilter, bAutoDestroy) == 0x00001C, "Member 'EndMenuAPI_ChangeFadeFilter::bAutoDestroy' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_ChangeFadeFilter, bPauseable) == 0x00001D, "Member 'EndMenuAPI_ChangeFadeFilter::bPauseable' has a wrong offset!");

// Function EndGame.EndMenuAPI.ChangeFieldTargetIconButton
// 0x0010 (0x0010 - 0x0000)
struct EndMenuAPI_ChangeFieldTargetIconButton final
{
public:
	class UUserWidget*                            Icon;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndMenuFieldTargetIconType                   aButtonType;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMenuAPI_ChangeFieldTargetIconButton) == 0x000008, "Wrong alignment on EndMenuAPI_ChangeFieldTargetIconButton");
static_assert(sizeof(EndMenuAPI_ChangeFieldTargetIconButton) == 0x000010, "Wrong size on EndMenuAPI_ChangeFieldTargetIconButton");
static_assert(offsetof(EndMenuAPI_ChangeFieldTargetIconButton, Icon) == 0x000000, "Member 'EndMenuAPI_ChangeFieldTargetIconButton::Icon' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_ChangeFieldTargetIconButton, aButtonType) == 0x000008, "Member 'EndMenuAPI_ChangeFieldTargetIconButton::aButtonType' has a wrong offset!");

// Function EndGame.EndMenuAPI.ChangeFieldTargetIconState
// 0x0010 (0x0010 - 0x0000)
struct EndMenuAPI_ChangeFieldTargetIconState final
{
public:
	class UUserWidget*                            Icon;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndMenuFieldTargetState                      State;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMenuAPI_ChangeFieldTargetIconState) == 0x000008, "Wrong alignment on EndMenuAPI_ChangeFieldTargetIconState");
static_assert(sizeof(EndMenuAPI_ChangeFieldTargetIconState) == 0x000010, "Wrong size on EndMenuAPI_ChangeFieldTargetIconState");
static_assert(offsetof(EndMenuAPI_ChangeFieldTargetIconState, Icon) == 0x000000, "Member 'EndMenuAPI_ChangeFieldTargetIconState::Icon' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_ChangeFieldTargetIconState, State) == 0x000008, "Member 'EndMenuAPI_ChangeFieldTargetIconState::State' has a wrong offset!");

// Function EndGame.EndMenuAPI.ChapterNameExists
// 0x0018 (0x0018 - 0x0000)
struct EndMenuAPI_ChapterNameExists final
{
public:
	class FString                                 TextID;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMenuAPI_ChapterNameExists) == 0x000008, "Wrong alignment on EndMenuAPI_ChapterNameExists");
static_assert(sizeof(EndMenuAPI_ChapterNameExists) == 0x000018, "Wrong size on EndMenuAPI_ChapterNameExists");
static_assert(offsetof(EndMenuAPI_ChapterNameExists, TextID) == 0x000000, "Member 'EndMenuAPI_ChapterNameExists::TextID' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_ChapterNameExists, ReturnValue) == 0x000010, "Member 'EndMenuAPI_ChapterNameExists::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuAPI.CreateWidgetFromPack
// 0x0020 (0x0020 - 0x0000)
struct EndMenuAPI_CreateWidgetFromPack final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LevelName;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ResourceName;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUserWidget*                            ReturnValue;                                       // 0x0018(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuAPI_CreateWidgetFromPack) == 0x000008, "Wrong alignment on EndMenuAPI_CreateWidgetFromPack");
static_assert(sizeof(EndMenuAPI_CreateWidgetFromPack) == 0x000020, "Wrong size on EndMenuAPI_CreateWidgetFromPack");
static_assert(offsetof(EndMenuAPI_CreateWidgetFromPack, WorldContextObject) == 0x000000, "Member 'EndMenuAPI_CreateWidgetFromPack::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_CreateWidgetFromPack, LevelName) == 0x000008, "Member 'EndMenuAPI_CreateWidgetFromPack::LevelName' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_CreateWidgetFromPack, ResourceName) == 0x000010, "Member 'EndMenuAPI_CreateWidgetFromPack::ResourceName' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_CreateWidgetFromPack, ReturnValue) == 0x000018, "Member 'EndMenuAPI_CreateWidgetFromPack::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuAPI.GetBattleTargetIconState
// 0x0010 (0x0010 - 0x0000)
struct EndMenuAPI_GetBattleTargetIconState final
{
public:
	class UUserWidget*                            Icon;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndMenuBattleTargetState                     ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMenuAPI_GetBattleTargetIconState) == 0x000008, "Wrong alignment on EndMenuAPI_GetBattleTargetIconState");
static_assert(sizeof(EndMenuAPI_GetBattleTargetIconState) == 0x000010, "Wrong size on EndMenuAPI_GetBattleTargetIconState");
static_assert(offsetof(EndMenuAPI_GetBattleTargetIconState, Icon) == 0x000000, "Member 'EndMenuAPI_GetBattleTargetIconState::Icon' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_GetBattleTargetIconState, ReturnValue) == 0x000008, "Member 'EndMenuAPI_GetBattleTargetIconState::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuAPI.GetFadeFilterCurrentColor
// 0x0018 (0x0018 - 0x0000)
struct EndMenuAPI_GetFadeFilterCurrentColor final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuAPI_GetFadeFilterCurrentColor) == 0x000004, "Wrong alignment on EndMenuAPI_GetFadeFilterCurrentColor");
static_assert(sizeof(EndMenuAPI_GetFadeFilterCurrentColor) == 0x000018, "Wrong size on EndMenuAPI_GetFadeFilterCurrentColor");
static_assert(offsetof(EndMenuAPI_GetFadeFilterCurrentColor, Name_0) == 0x000000, "Member 'EndMenuAPI_GetFadeFilterCurrentColor::Name_0' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_GetFadeFilterCurrentColor, ReturnValue) == 0x000008, "Member 'EndMenuAPI_GetFadeFilterCurrentColor::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuAPI.GetFadeFilterNames
// 0x0010 (0x0010 - 0x0000)
struct EndMenuAPI_GetFadeFilterNames final
{
public:
	TArray<class FName>                           outNames;                                          // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuAPI_GetFadeFilterNames) == 0x000008, "Wrong alignment on EndMenuAPI_GetFadeFilterNames");
static_assert(sizeof(EndMenuAPI_GetFadeFilterNames) == 0x000010, "Wrong size on EndMenuAPI_GetFadeFilterNames");
static_assert(offsetof(EndMenuAPI_GetFadeFilterNames, outNames) == 0x000000, "Member 'EndMenuAPI_GetFadeFilterNames::outNames' has a wrong offset!");

// Function EndGame.EndMenuAPI.GetFadeFilterVisibility
// 0x000C (0x000C - 0x0000)
struct EndMenuAPI_GetFadeFilterVisibility final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMenuAPI_GetFadeFilterVisibility) == 0x000004, "Wrong alignment on EndMenuAPI_GetFadeFilterVisibility");
static_assert(sizeof(EndMenuAPI_GetFadeFilterVisibility) == 0x00000C, "Wrong size on EndMenuAPI_GetFadeFilterVisibility");
static_assert(offsetof(EndMenuAPI_GetFadeFilterVisibility, Name_0) == 0x000000, "Member 'EndMenuAPI_GetFadeFilterVisibility::Name_0' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_GetFadeFilterVisibility, ReturnValue) == 0x000008, "Member 'EndMenuAPI_GetFadeFilterVisibility::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuAPI.GetFieldTargetIconState
// 0x0010 (0x0010 - 0x0000)
struct EndMenuAPI_GetFieldTargetIconState final
{
public:
	class UUserWidget*                            Icon;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndMenuFieldTargetState                      ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMenuAPI_GetFieldTargetIconState) == 0x000008, "Wrong alignment on EndMenuAPI_GetFieldTargetIconState");
static_assert(sizeof(EndMenuAPI_GetFieldTargetIconState) == 0x000010, "Wrong size on EndMenuAPI_GetFieldTargetIconState");
static_assert(offsetof(EndMenuAPI_GetFieldTargetIconState, Icon) == 0x000000, "Member 'EndMenuAPI_GetFieldTargetIconState::Icon' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_GetFieldTargetIconState, ReturnValue) == 0x000008, "Member 'EndMenuAPI_GetFieldTargetIconState::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuAPI.GetItemMessageLogIconKind
// 0x000C (0x000C - 0x0000)
struct EndMenuAPI_GetItemMessageLogIconKind final
{
public:
	class FName                                   ItemID;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndMenuIconKind                              ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMenuAPI_GetItemMessageLogIconKind) == 0x000004, "Wrong alignment on EndMenuAPI_GetItemMessageLogIconKind");
static_assert(sizeof(EndMenuAPI_GetItemMessageLogIconKind) == 0x00000C, "Wrong size on EndMenuAPI_GetItemMessageLogIconKind");
static_assert(offsetof(EndMenuAPI_GetItemMessageLogIconKind, ItemID) == 0x000000, "Member 'EndMenuAPI_GetItemMessageLogIconKind::ItemID' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_GetItemMessageLogIconKind, ReturnValue) == 0x000008, "Member 'EndMenuAPI_GetItemMessageLogIconKind::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuAPI.GetMessageWindowSelectedIndex
// 0x0010 (0x0010 - 0x0000)
struct EndMenuAPI_GetMessageWindowSelectedIndex final
{
public:
	class UUserWidget*                            Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMenuAPI_GetMessageWindowSelectedIndex) == 0x000008, "Wrong alignment on EndMenuAPI_GetMessageWindowSelectedIndex");
static_assert(sizeof(EndMenuAPI_GetMessageWindowSelectedIndex) == 0x000010, "Wrong size on EndMenuAPI_GetMessageWindowSelectedIndex");
static_assert(offsetof(EndMenuAPI_GetMessageWindowSelectedIndex, Widget) == 0x000000, "Member 'EndMenuAPI_GetMessageWindowSelectedIndex::Widget' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_GetMessageWindowSelectedIndex, ReturnValue) == 0x000008, "Member 'EndMenuAPI_GetMessageWindowSelectedIndex::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuAPI.GetString
// 0x0020 (0x0020 - 0x0000)
struct EndMenuAPI_GetString final
{
public:
	class FString                                 TextID;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuAPI_GetString) == 0x000008, "Wrong alignment on EndMenuAPI_GetString");
static_assert(sizeof(EndMenuAPI_GetString) == 0x000020, "Wrong size on EndMenuAPI_GetString");
static_assert(offsetof(EndMenuAPI_GetString, TextID) == 0x000000, "Member 'EndMenuAPI_GetString::TextID' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_GetString, ReturnValue) == 0x000010, "Member 'EndMenuAPI_GetString::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuAPI.GetWidgetAnimationByName
// 0x0018 (0x0018 - 0x0000)
struct EndMenuAPI_GetWidgetAnimationByName final
{
public:
	class UWidget*                                InWidget;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InName;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuAPI_GetWidgetAnimationByName) == 0x000008, "Wrong alignment on EndMenuAPI_GetWidgetAnimationByName");
static_assert(sizeof(EndMenuAPI_GetWidgetAnimationByName) == 0x000018, "Wrong size on EndMenuAPI_GetWidgetAnimationByName");
static_assert(offsetof(EndMenuAPI_GetWidgetAnimationByName, InWidget) == 0x000000, "Member 'EndMenuAPI_GetWidgetAnimationByName::InWidget' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_GetWidgetAnimationByName, InName) == 0x000008, "Member 'EndMenuAPI_GetWidgetAnimationByName::InName' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_GetWidgetAnimationByName, ReturnValue) == 0x000010, "Member 'EndMenuAPI_GetWidgetAnimationByName::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuAPI.GetWidgetAnimations
// 0x0018 (0x0018 - 0x0000)
struct EndMenuAPI_GetWidgetAnimations final
{
public:
	class UWidget*                                InWidget;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           outNames;                                          // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuAPI_GetWidgetAnimations) == 0x000008, "Wrong alignment on EndMenuAPI_GetWidgetAnimations");
static_assert(sizeof(EndMenuAPI_GetWidgetAnimations) == 0x000018, "Wrong size on EndMenuAPI_GetWidgetAnimations");
static_assert(offsetof(EndMenuAPI_GetWidgetAnimations, InWidget) == 0x000000, "Member 'EndMenuAPI_GetWidgetAnimations::InWidget' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_GetWidgetAnimations, outNames) == 0x000008, "Member 'EndMenuAPI_GetWidgetAnimations::outNames' has a wrong offset!");

// Function EndGame.EndMenuAPI.HasFadeFilters
// 0x0001 (0x0001 - 0x0000)
struct EndMenuAPI_HasFadeFilters final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuAPI_HasFadeFilters) == 0x000001, "Wrong alignment on EndMenuAPI_HasFadeFilters");
static_assert(sizeof(EndMenuAPI_HasFadeFilters) == 0x000001, "Wrong size on EndMenuAPI_HasFadeFilters");
static_assert(offsetof(EndMenuAPI_HasFadeFilters, ReturnValue) == 0x000000, "Member 'EndMenuAPI_HasFadeFilters::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuAPI.HasFadeFiltersDuringAnimation
// 0x0001 (0x0001 - 0x0000)
struct EndMenuAPI_HasFadeFiltersDuringAnimation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuAPI_HasFadeFiltersDuringAnimation) == 0x000001, "Wrong alignment on EndMenuAPI_HasFadeFiltersDuringAnimation");
static_assert(sizeof(EndMenuAPI_HasFadeFiltersDuringAnimation) == 0x000001, "Wrong size on EndMenuAPI_HasFadeFiltersDuringAnimation");
static_assert(offsetof(EndMenuAPI_HasFadeFiltersDuringAnimation, ReturnValue) == 0x000000, "Member 'EndMenuAPI_HasFadeFiltersDuringAnimation::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuAPI.HideBattleTargetIcon
// 0x0008 (0x0008 - 0x0000)
struct EndMenuAPI_HideBattleTargetIcon final
{
public:
	class UUserWidget*                            Icon;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuAPI_HideBattleTargetIcon) == 0x000008, "Wrong alignment on EndMenuAPI_HideBattleTargetIcon");
static_assert(sizeof(EndMenuAPI_HideBattleTargetIcon) == 0x000008, "Wrong size on EndMenuAPI_HideBattleTargetIcon");
static_assert(offsetof(EndMenuAPI_HideBattleTargetIcon, Icon) == 0x000000, "Member 'EndMenuAPI_HideBattleTargetIcon::Icon' has a wrong offset!");

// Function EndGame.EndMenuAPI.HideFieldPane
// 0x0001 (0x0001 - 0x0000)
struct EndMenuAPI_HideFieldPane final
{
public:
	EEndMenuFieldPaneType                         Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuAPI_HideFieldPane) == 0x000001, "Wrong alignment on EndMenuAPI_HideFieldPane");
static_assert(sizeof(EndMenuAPI_HideFieldPane) == 0x000001, "Wrong size on EndMenuAPI_HideFieldPane");
static_assert(offsetof(EndMenuAPI_HideFieldPane, Type) == 0x000000, "Member 'EndMenuAPI_HideFieldPane::Type' has a wrong offset!");

// Function EndGame.EndMenuAPI.HideFieldTargetIcon
// 0x0008 (0x0008 - 0x0000)
struct EndMenuAPI_HideFieldTargetIcon final
{
public:
	class UUserWidget*                            Icon;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuAPI_HideFieldTargetIcon) == 0x000008, "Wrong alignment on EndMenuAPI_HideFieldTargetIcon");
static_assert(sizeof(EndMenuAPI_HideFieldTargetIcon) == 0x000008, "Wrong size on EndMenuAPI_HideFieldTargetIcon");
static_assert(offsetof(EndMenuAPI_HideFieldTargetIcon, Icon) == 0x000000, "Member 'EndMenuAPI_HideFieldTargetIcon::Icon' has a wrong offset!");

// Function EndGame.EndMenuAPI.HideMessageWindow
// 0x0008 (0x0008 - 0x0000)
struct EndMenuAPI_HideMessageWindow final
{
public:
	class UUserWidget*                            Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuAPI_HideMessageWindow) == 0x000008, "Wrong alignment on EndMenuAPI_HideMessageWindow");
static_assert(sizeof(EndMenuAPI_HideMessageWindow) == 0x000008, "Wrong size on EndMenuAPI_HideMessageWindow");
static_assert(offsetof(EndMenuAPI_HideMessageWindow, Widget) == 0x000000, "Member 'EndMenuAPI_HideMessageWindow::Widget' has a wrong offset!");

// Function EndGame.EndMenuAPI.HideSubtitle
// 0x0010 (0x0010 - 0x0000)
struct EndMenuAPI_HideSubtitle final
{
public:
	class FString                                 TextID;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuAPI_HideSubtitle) == 0x000008, "Wrong alignment on EndMenuAPI_HideSubtitle");
static_assert(sizeof(EndMenuAPI_HideSubtitle) == 0x000010, "Wrong size on EndMenuAPI_HideSubtitle");
static_assert(offsetof(EndMenuAPI_HideSubtitle, TextID) == 0x000000, "Member 'EndMenuAPI_HideSubtitle::TextID' has a wrong offset!");

// Function EndGame.EndMenuAPI.IsFadeFilter
// 0x000C (0x000C - 0x0000)
struct EndMenuAPI_IsFadeFilter final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMenuAPI_IsFadeFilter) == 0x000004, "Wrong alignment on EndMenuAPI_IsFadeFilter");
static_assert(sizeof(EndMenuAPI_IsFadeFilter) == 0x00000C, "Wrong size on EndMenuAPI_IsFadeFilter");
static_assert(offsetof(EndMenuAPI_IsFadeFilter, Name_0) == 0x000000, "Member 'EndMenuAPI_IsFadeFilter::Name_0' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_IsFadeFilter, ReturnValue) == 0x000008, "Member 'EndMenuAPI_IsFadeFilter::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuAPI.IsFadeFilterDuringAnimation
// 0x000C (0x000C - 0x0000)
struct EndMenuAPI_IsFadeFilterDuringAnimation final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMenuAPI_IsFadeFilterDuringAnimation) == 0x000004, "Wrong alignment on EndMenuAPI_IsFadeFilterDuringAnimation");
static_assert(sizeof(EndMenuAPI_IsFadeFilterDuringAnimation) == 0x00000C, "Wrong size on EndMenuAPI_IsFadeFilterDuringAnimation");
static_assert(offsetof(EndMenuAPI_IsFadeFilterDuringAnimation, Name_0) == 0x000000, "Member 'EndMenuAPI_IsFadeFilterDuringAnimation::Name_0' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_IsFadeFilterDuringAnimation, ReturnValue) == 0x000008, "Member 'EndMenuAPI_IsFadeFilterDuringAnimation::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuAPI.IsFieldMenuShortcutActive
// 0x0001 (0x0001 - 0x0000)
struct EndMenuAPI_IsFieldMenuShortcutActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuAPI_IsFieldMenuShortcutActive) == 0x000001, "Wrong alignment on EndMenuAPI_IsFieldMenuShortcutActive");
static_assert(sizeof(EndMenuAPI_IsFieldMenuShortcutActive) == 0x000001, "Wrong size on EndMenuAPI_IsFieldMenuShortcutActive");
static_assert(offsetof(EndMenuAPI_IsFieldMenuShortcutActive, ReturnValue) == 0x000000, "Member 'EndMenuAPI_IsFieldMenuShortcutActive::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuAPI.IsFieldMenuStatus
// 0x0002 (0x0002 - 0x0000)
struct EndMenuAPI_IsFieldMenuStatus final
{
public:
	EEndMenuFieldMenuStatus                       Status;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuAPI_IsFieldMenuStatus) == 0x000001, "Wrong alignment on EndMenuAPI_IsFieldMenuStatus");
static_assert(sizeof(EndMenuAPI_IsFieldMenuStatus) == 0x000002, "Wrong size on EndMenuAPI_IsFieldMenuStatus");
static_assert(offsetof(EndMenuAPI_IsFieldMenuStatus, Status) == 0x000000, "Member 'EndMenuAPI_IsFieldMenuStatus::Status' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_IsFieldMenuStatus, ReturnValue) == 0x000001, "Member 'EndMenuAPI_IsFieldMenuStatus::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuAPI.IsJoinLeftUpdate
// 0x0001 (0x0001 - 0x0000)
struct EndMenuAPI_IsJoinLeftUpdate final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuAPI_IsJoinLeftUpdate) == 0x000001, "Wrong alignment on EndMenuAPI_IsJoinLeftUpdate");
static_assert(sizeof(EndMenuAPI_IsJoinLeftUpdate) == 0x000001, "Wrong size on EndMenuAPI_IsJoinLeftUpdate");
static_assert(offsetof(EndMenuAPI_IsJoinLeftUpdate, ReturnValue) == 0x000000, "Member 'EndMenuAPI_IsJoinLeftUpdate::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuAPI.IsMessageWindowClosed
// 0x0010 (0x0010 - 0x0000)
struct EndMenuAPI_IsMessageWindowClosed final
{
public:
	class UUserWidget*                            Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMenuAPI_IsMessageWindowClosed) == 0x000008, "Wrong alignment on EndMenuAPI_IsMessageWindowClosed");
static_assert(sizeof(EndMenuAPI_IsMessageWindowClosed) == 0x000010, "Wrong size on EndMenuAPI_IsMessageWindowClosed");
static_assert(offsetof(EndMenuAPI_IsMessageWindowClosed, Widget) == 0x000000, "Member 'EndMenuAPI_IsMessageWindowClosed::Widget' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_IsMessageWindowClosed, ReturnValue) == 0x000008, "Member 'EndMenuAPI_IsMessageWindowClosed::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuAPI.IsPauseMenuClosed
// 0x0001 (0x0001 - 0x0000)
struct EndMenuAPI_IsPauseMenuClosed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuAPI_IsPauseMenuClosed) == 0x000001, "Wrong alignment on EndMenuAPI_IsPauseMenuClosed");
static_assert(sizeof(EndMenuAPI_IsPauseMenuClosed) == 0x000001, "Wrong size on EndMenuAPI_IsPauseMenuClosed");
static_assert(offsetof(EndMenuAPI_IsPauseMenuClosed, ReturnValue) == 0x000000, "Member 'EndMenuAPI_IsPauseMenuClosed::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuAPI.IsSubtitleClosed
// 0x0018 (0x0018 - 0x0000)
struct EndMenuAPI_IsSubtitleClosed final
{
public:
	class FString                                 TextID;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMenuAPI_IsSubtitleClosed) == 0x000008, "Wrong alignment on EndMenuAPI_IsSubtitleClosed");
static_assert(sizeof(EndMenuAPI_IsSubtitleClosed) == 0x000018, "Wrong size on EndMenuAPI_IsSubtitleClosed");
static_assert(offsetof(EndMenuAPI_IsSubtitleClosed, TextID) == 0x000000, "Member 'EndMenuAPI_IsSubtitleClosed::TextID' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_IsSubtitleClosed, ReturnValue) == 0x000010, "Member 'EndMenuAPI_IsSubtitleClosed::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuAPI.Key_IsVirtualAccept
// 0x0020 (0x0020 - 0x0000)
struct EndMenuAPI_Key_IsVirtualAccept final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMenuAPI_Key_IsVirtualAccept) == 0x000008, "Wrong alignment on EndMenuAPI_Key_IsVirtualAccept");
static_assert(sizeof(EndMenuAPI_Key_IsVirtualAccept) == 0x000020, "Wrong size on EndMenuAPI_Key_IsVirtualAccept");
static_assert(offsetof(EndMenuAPI_Key_IsVirtualAccept, Key) == 0x000000, "Member 'EndMenuAPI_Key_IsVirtualAccept::Key' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_Key_IsVirtualAccept, ReturnValue) == 0x000018, "Member 'EndMenuAPI_Key_IsVirtualAccept::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuAPI.Key_IsVirtualBack
// 0x0020 (0x0020 - 0x0000)
struct EndMenuAPI_Key_IsVirtualBack final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMenuAPI_Key_IsVirtualBack) == 0x000008, "Wrong alignment on EndMenuAPI_Key_IsVirtualBack");
static_assert(sizeof(EndMenuAPI_Key_IsVirtualBack) == 0x000020, "Wrong size on EndMenuAPI_Key_IsVirtualBack");
static_assert(offsetof(EndMenuAPI_Key_IsVirtualBack, Key) == 0x000000, "Member 'EndMenuAPI_Key_IsVirtualBack::Key' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_Key_IsVirtualBack, ReturnValue) == 0x000018, "Member 'EndMenuAPI_Key_IsVirtualBack::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuAPI.LocationNameExists
// 0x0018 (0x0018 - 0x0000)
struct EndMenuAPI_LocationNameExists final
{
public:
	class FString                                 TextID;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMenuAPI_LocationNameExists) == 0x000008, "Wrong alignment on EndMenuAPI_LocationNameExists");
static_assert(sizeof(EndMenuAPI_LocationNameExists) == 0x000018, "Wrong size on EndMenuAPI_LocationNameExists");
static_assert(offsetof(EndMenuAPI_LocationNameExists, TextID) == 0x000000, "Member 'EndMenuAPI_LocationNameExists::TextID' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_LocationNameExists, ReturnValue) == 0x000010, "Member 'EndMenuAPI_LocationNameExists::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuAPI.MakeSoftClassPtr
// 0x0038 (0x0038 - 0x0000)
struct EndMenuAPI_MakeSoftClassPtr final
{
public:
	class FString                                 inString;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   ReturnValue;                                       // 0x0010(0x0028)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuAPI_MakeSoftClassPtr) == 0x000008, "Wrong alignment on EndMenuAPI_MakeSoftClassPtr");
static_assert(sizeof(EndMenuAPI_MakeSoftClassPtr) == 0x000038, "Wrong size on EndMenuAPI_MakeSoftClassPtr");
static_assert(offsetof(EndMenuAPI_MakeSoftClassPtr, inString) == 0x000000, "Member 'EndMenuAPI_MakeSoftClassPtr::inString' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_MakeSoftClassPtr, ReturnValue) == 0x000010, "Member 'EndMenuAPI_MakeSoftClassPtr::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuAPI.Need4KFont
// 0x0001 (0x0001 - 0x0000)
struct EndMenuAPI_Need4KFont final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuAPI_Need4KFont) == 0x000001, "Wrong alignment on EndMenuAPI_Need4KFont");
static_assert(sizeof(EndMenuAPI_Need4KFont) == 0x000001, "Wrong size on EndMenuAPI_Need4KFont");
static_assert(offsetof(EndMenuAPI_Need4KFont, ReturnValue) == 0x000000, "Member 'EndMenuAPI_Need4KFont::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuAPI.RemoveFadeFilter
// 0x0008 (0x0008 - 0x0000)
struct EndMenuAPI_RemoveFadeFilter final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuAPI_RemoveFadeFilter) == 0x000004, "Wrong alignment on EndMenuAPI_RemoveFadeFilter");
static_assert(sizeof(EndMenuAPI_RemoveFadeFilter) == 0x000008, "Wrong size on EndMenuAPI_RemoveFadeFilter");
static_assert(offsetof(EndMenuAPI_RemoveFadeFilter, Name_0) == 0x000000, "Member 'EndMenuAPI_RemoveFadeFilter::Name_0' has a wrong offset!");

// Function EndGame.EndMenuAPI.SetBattleEnemyStatusWindowPosition
// 0x0018 (0x0018 - 0x0000)
struct EndMenuAPI_SetBattleEnemyStatusWindowPosition final
{
public:
	class UUserWidget*                            Icon;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WorldPosition;                                     // 0x0008(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMenuAPI_SetBattleEnemyStatusWindowPosition) == 0x000008, "Wrong alignment on EndMenuAPI_SetBattleEnemyStatusWindowPosition");
static_assert(sizeof(EndMenuAPI_SetBattleEnemyStatusWindowPosition) == 0x000018, "Wrong size on EndMenuAPI_SetBattleEnemyStatusWindowPosition");
static_assert(offsetof(EndMenuAPI_SetBattleEnemyStatusWindowPosition, Icon) == 0x000000, "Member 'EndMenuAPI_SetBattleEnemyStatusWindowPosition::Icon' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_SetBattleEnemyStatusWindowPosition, WorldPosition) == 0x000008, "Member 'EndMenuAPI_SetBattleEnemyStatusWindowPosition::WorldPosition' has a wrong offset!");

// Function EndGame.EndMenuAPI.SetBattleTargetIconActor
// 0x0010 (0x0010 - 0x0000)
struct EndMenuAPI_SetBattleTargetIconActor final
{
public:
	class UUserWidget*                            Icon;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Actor;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuAPI_SetBattleTargetIconActor) == 0x000008, "Wrong alignment on EndMenuAPI_SetBattleTargetIconActor");
static_assert(sizeof(EndMenuAPI_SetBattleTargetIconActor) == 0x000010, "Wrong size on EndMenuAPI_SetBattleTargetIconActor");
static_assert(offsetof(EndMenuAPI_SetBattleTargetIconActor, Icon) == 0x000000, "Member 'EndMenuAPI_SetBattleTargetIconActor::Icon' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_SetBattleTargetIconActor, Actor) == 0x000008, "Member 'EndMenuAPI_SetBattleTargetIconActor::Actor' has a wrong offset!");

// Function EndGame.EndMenuAPI.SetBattleTargetIconPosition
// 0x0018 (0x0018 - 0x0000)
struct EndMenuAPI_SetBattleTargetIconPosition final
{
public:
	class UUserWidget*                            Icon;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WorldPosition;                                     // 0x0008(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMenuAPI_SetBattleTargetIconPosition) == 0x000008, "Wrong alignment on EndMenuAPI_SetBattleTargetIconPosition");
static_assert(sizeof(EndMenuAPI_SetBattleTargetIconPosition) == 0x000018, "Wrong size on EndMenuAPI_SetBattleTargetIconPosition");
static_assert(offsetof(EndMenuAPI_SetBattleTargetIconPosition, Icon) == 0x000000, "Member 'EndMenuAPI_SetBattleTargetIconPosition::Icon' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_SetBattleTargetIconPosition, WorldPosition) == 0x000008, "Member 'EndMenuAPI_SetBattleTargetIconPosition::WorldPosition' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_SetBattleTargetIconPosition, ReturnValue) == 0x000014, "Member 'EndMenuAPI_SetBattleTargetIconPosition::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuAPI.SetFadeFilterVisibility
// 0x000C (0x000C - 0x0000)
struct EndMenuAPI_SetFadeFilterVisibility final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVisible;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMenuAPI_SetFadeFilterVisibility) == 0x000004, "Wrong alignment on EndMenuAPI_SetFadeFilterVisibility");
static_assert(sizeof(EndMenuAPI_SetFadeFilterVisibility) == 0x00000C, "Wrong size on EndMenuAPI_SetFadeFilterVisibility");
static_assert(offsetof(EndMenuAPI_SetFadeFilterVisibility, Name_0) == 0x000000, "Member 'EndMenuAPI_SetFadeFilterVisibility::Name_0' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_SetFadeFilterVisibility, bVisible) == 0x000008, "Member 'EndMenuAPI_SetFadeFilterVisibility::bVisible' has a wrong offset!");

// Function EndGame.EndMenuAPI.SetFieldMenuInBattle
// 0x0001 (0x0001 - 0x0000)
struct EndMenuAPI_SetFieldMenuInBattle final
{
public:
	bool                                          bInInBattle;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuAPI_SetFieldMenuInBattle) == 0x000001, "Wrong alignment on EndMenuAPI_SetFieldMenuInBattle");
static_assert(sizeof(EndMenuAPI_SetFieldMenuInBattle) == 0x000001, "Wrong size on EndMenuAPI_SetFieldMenuInBattle");
static_assert(offsetof(EndMenuAPI_SetFieldMenuInBattle, bInInBattle) == 0x000000, "Member 'EndMenuAPI_SetFieldMenuInBattle::bInInBattle' has a wrong offset!");

// Function EndGame.EndMenuAPI.SetFieldTargetIconHoldGauge
// 0x0010 (0x0010 - 0x0000)
struct EndMenuAPI_SetFieldTargetIconHoldGauge final
{
public:
	class UUserWidget*                            Icon;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         aGauge;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMenuAPI_SetFieldTargetIconHoldGauge) == 0x000008, "Wrong alignment on EndMenuAPI_SetFieldTargetIconHoldGauge");
static_assert(sizeof(EndMenuAPI_SetFieldTargetIconHoldGauge) == 0x000010, "Wrong size on EndMenuAPI_SetFieldTargetIconHoldGauge");
static_assert(offsetof(EndMenuAPI_SetFieldTargetIconHoldGauge, Icon) == 0x000000, "Member 'EndMenuAPI_SetFieldTargetIconHoldGauge::Icon' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_SetFieldTargetIconHoldGauge, aGauge) == 0x000008, "Member 'EndMenuAPI_SetFieldTargetIconHoldGauge::aGauge' has a wrong offset!");

// Function EndGame.EndMenuAPI.SetFieldTargetIconPosition
// 0x0018 (0x0018 - 0x0000)
struct EndMenuAPI_SetFieldTargetIconPosition final
{
public:
	class UUserWidget*                            Icon;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WorldPosition;                                     // 0x0008(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMenuAPI_SetFieldTargetIconPosition) == 0x000008, "Wrong alignment on EndMenuAPI_SetFieldTargetIconPosition");
static_assert(sizeof(EndMenuAPI_SetFieldTargetIconPosition) == 0x000018, "Wrong size on EndMenuAPI_SetFieldTargetIconPosition");
static_assert(offsetof(EndMenuAPI_SetFieldTargetIconPosition, Icon) == 0x000000, "Member 'EndMenuAPI_SetFieldTargetIconPosition::Icon' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_SetFieldTargetIconPosition, WorldPosition) == 0x000008, "Member 'EndMenuAPI_SetFieldTargetIconPosition::WorldPosition' has a wrong offset!");

// Function EndGame.EndMenuAPI.SetFocusBrushBySlateColor
// 0x0028 (0x0028 - 0x0000)
struct EndMenuAPI_SetFocusBrushBySlateColor final
{
public:
	struct FSlateColor                            InColor;                                           // 0x0000(0x0028)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuAPI_SetFocusBrushBySlateColor) == 0x000008, "Wrong alignment on EndMenuAPI_SetFocusBrushBySlateColor");
static_assert(sizeof(EndMenuAPI_SetFocusBrushBySlateColor) == 0x000028, "Wrong size on EndMenuAPI_SetFocusBrushBySlateColor");
static_assert(offsetof(EndMenuAPI_SetFocusBrushBySlateColor, InColor) == 0x000000, "Member 'EndMenuAPI_SetFocusBrushBySlateColor::InColor' has a wrong offset!");

// Function EndGame.EndMenuAPI.SetFocusToWidget
// 0x0008 (0x0008 - 0x0000)
struct EndMenuAPI_SetFocusToWidget final
{
public:
	class UWidget*                                InWidget;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuAPI_SetFocusToWidget) == 0x000008, "Wrong alignment on EndMenuAPI_SetFocusToWidget");
static_assert(sizeof(EndMenuAPI_SetFocusToWidget) == 0x000008, "Wrong size on EndMenuAPI_SetFocusToWidget");
static_assert(offsetof(EndMenuAPI_SetFocusToWidget, InWidget) == 0x000000, "Member 'EndMenuAPI_SetFocusToWidget::InWidget' has a wrong offset!");

// Function EndGame.EndMenuAPI.SetNavimapInBattle
// 0x0001 (0x0001 - 0x0000)
struct EndMenuAPI_SetNavimapInBattle final
{
public:
	bool                                          bInInBattle;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuAPI_SetNavimapInBattle) == 0x000001, "Wrong alignment on EndMenuAPI_SetNavimapInBattle");
static_assert(sizeof(EndMenuAPI_SetNavimapInBattle) == 0x000001, "Wrong size on EndMenuAPI_SetNavimapInBattle");
static_assert(offsetof(EndMenuAPI_SetNavimapInBattle, bInInBattle) == 0x000000, "Member 'EndMenuAPI_SetNavimapInBattle::bInInBattle' has a wrong offset!");

// Function EndGame.EndMenuAPI.SetVirtualAcceptRight
// 0x0001 (0x0001 - 0x0000)
struct EndMenuAPI_SetVirtualAcceptRight final
{
public:
	bool                                          bRight;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuAPI_SetVirtualAcceptRight) == 0x000001, "Wrong alignment on EndMenuAPI_SetVirtualAcceptRight");
static_assert(sizeof(EndMenuAPI_SetVirtualAcceptRight) == 0x000001, "Wrong size on EndMenuAPI_SetVirtualAcceptRight");
static_assert(offsetof(EndMenuAPI_SetVirtualAcceptRight, bRight) == 0x000000, "Member 'EndMenuAPI_SetVirtualAcceptRight::bRight' has a wrong offset!");

// Function EndGame.EndMenuAPI.ShowAreaName
// 0x0018 (0x0018 - 0x0000)
struct EndMenuAPI_ShowAreaName final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TextID;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuAPI_ShowAreaName) == 0x000008, "Wrong alignment on EndMenuAPI_ShowAreaName");
static_assert(sizeof(EndMenuAPI_ShowAreaName) == 0x000018, "Wrong size on EndMenuAPI_ShowAreaName");
static_assert(offsetof(EndMenuAPI_ShowAreaName, WorldContextObject) == 0x000000, "Member 'EndMenuAPI_ShowAreaName::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_ShowAreaName, TextID) == 0x000008, "Member 'EndMenuAPI_ShowAreaName::TextID' has a wrong offset!");

// Function EndGame.EndMenuAPI.ShowBattleEnemyStatusWindow
// 0x0008 (0x0008 - 0x0000)
struct EndMenuAPI_ShowBattleEnemyStatusWindow final
{
public:
	class UUserWidget*                            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuAPI_ShowBattleEnemyStatusWindow) == 0x000008, "Wrong alignment on EndMenuAPI_ShowBattleEnemyStatusWindow");
static_assert(sizeof(EndMenuAPI_ShowBattleEnemyStatusWindow) == 0x000008, "Wrong size on EndMenuAPI_ShowBattleEnemyStatusWindow");
static_assert(offsetof(EndMenuAPI_ShowBattleEnemyStatusWindow, ReturnValue) == 0x000000, "Member 'EndMenuAPI_ShowBattleEnemyStatusWindow::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuAPI.ShowBattlePlayerStatusWindow
// 0x0008 (0x0008 - 0x0000)
struct EndMenuAPI_ShowBattlePlayerStatusWindow final
{
public:
	class UUserWidget*                            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuAPI_ShowBattlePlayerStatusWindow) == 0x000008, "Wrong alignment on EndMenuAPI_ShowBattlePlayerStatusWindow");
static_assert(sizeof(EndMenuAPI_ShowBattlePlayerStatusWindow) == 0x000008, "Wrong size on EndMenuAPI_ShowBattlePlayerStatusWindow");
static_assert(offsetof(EndMenuAPI_ShowBattlePlayerStatusWindow, ReturnValue) == 0x000000, "Member 'EndMenuAPI_ShowBattlePlayerStatusWindow::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuAPI.ShowBattleTargetIcon
// 0x0020 (0x0020 - 0x0000)
struct EndMenuAPI_ShowBattleTargetIcon final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WorldPosition;                                     // 0x0008(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndMenuBattleTargetState                     State;                                             // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserWidget*                            ReturnValue;                                       // 0x0018(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuAPI_ShowBattleTargetIcon) == 0x000008, "Wrong alignment on EndMenuAPI_ShowBattleTargetIcon");
static_assert(sizeof(EndMenuAPI_ShowBattleTargetIcon) == 0x000020, "Wrong size on EndMenuAPI_ShowBattleTargetIcon");
static_assert(offsetof(EndMenuAPI_ShowBattleTargetIcon, WorldContextObject) == 0x000000, "Member 'EndMenuAPI_ShowBattleTargetIcon::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_ShowBattleTargetIcon, WorldPosition) == 0x000008, "Member 'EndMenuAPI_ShowBattleTargetIcon::WorldPosition' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_ShowBattleTargetIcon, State) == 0x000014, "Member 'EndMenuAPI_ShowBattleTargetIcon::State' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_ShowBattleTargetIcon, ReturnValue) == 0x000018, "Member 'EndMenuAPI_ShowBattleTargetIcon::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuAPI.ShowChapterName
// 0x0028 (0x0028 - 0x0000)
struct EndMenuAPI_ShowChapterName final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TextID;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EnTextId;                                          // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuAPI_ShowChapterName) == 0x000008, "Wrong alignment on EndMenuAPI_ShowChapterName");
static_assert(sizeof(EndMenuAPI_ShowChapterName) == 0x000028, "Wrong size on EndMenuAPI_ShowChapterName");
static_assert(offsetof(EndMenuAPI_ShowChapterName, WorldContextObject) == 0x000000, "Member 'EndMenuAPI_ShowChapterName::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_ShowChapterName, TextID) == 0x000008, "Member 'EndMenuAPI_ShowChapterName::TextID' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_ShowChapterName, EnTextId) == 0x000018, "Member 'EndMenuAPI_ShowChapterName::EnTextId' has a wrong offset!");

// Function EndGame.EndMenuAPI.ShowDamagePopupMessage
// 0x0040 (0x0040 - 0x0000)
struct EndMenuAPI_ShowDamagePopupMessage final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Actor;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WorldPosition;                                     // 0x0010(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndMenuPopupMessageKind                      Kind;                                              // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEndMenuDamageInfo                     Info;                                              // 0x0020(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuAPI_ShowDamagePopupMessage) == 0x000008, "Wrong alignment on EndMenuAPI_ShowDamagePopupMessage");
static_assert(sizeof(EndMenuAPI_ShowDamagePopupMessage) == 0x000040, "Wrong size on EndMenuAPI_ShowDamagePopupMessage");
static_assert(offsetof(EndMenuAPI_ShowDamagePopupMessage, WorldContextObject) == 0x000000, "Member 'EndMenuAPI_ShowDamagePopupMessage::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_ShowDamagePopupMessage, Actor) == 0x000008, "Member 'EndMenuAPI_ShowDamagePopupMessage::Actor' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_ShowDamagePopupMessage, WorldPosition) == 0x000010, "Member 'EndMenuAPI_ShowDamagePopupMessage::WorldPosition' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_ShowDamagePopupMessage, Kind) == 0x00001C, "Member 'EndMenuAPI_ShowDamagePopupMessage::Kind' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_ShowDamagePopupMessage, Info) == 0x000020, "Member 'EndMenuAPI_ShowDamagePopupMessage::Info' has a wrong offset!");

// Function EndGame.EndMenuAPI.ShowDebugListBox
// 0x0050 (0x0050 - 0x0000)
struct EndMenuAPI_ShowDebugListBox final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         InStringArray;                                     // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         InWidth;                                           // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InHeight;                                          // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InSingleNodeAutoClick;                             // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 OutString;                                         // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0038(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuAPI_ShowDebugListBox) == 0x000008, "Wrong alignment on EndMenuAPI_ShowDebugListBox");
static_assert(sizeof(EndMenuAPI_ShowDebugListBox) == 0x000050, "Wrong size on EndMenuAPI_ShowDebugListBox");
static_assert(offsetof(EndMenuAPI_ShowDebugListBox, WorldContextObject) == 0x000000, "Member 'EndMenuAPI_ShowDebugListBox::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_ShowDebugListBox, InStringArray) == 0x000008, "Member 'EndMenuAPI_ShowDebugListBox::InStringArray' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_ShowDebugListBox, InWidth) == 0x000018, "Member 'EndMenuAPI_ShowDebugListBox::InWidth' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_ShowDebugListBox, InHeight) == 0x00001C, "Member 'EndMenuAPI_ShowDebugListBox::InHeight' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_ShowDebugListBox, InSingleNodeAutoClick) == 0x000020, "Member 'EndMenuAPI_ShowDebugListBox::InSingleNodeAutoClick' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_ShowDebugListBox, OutString) == 0x000028, "Member 'EndMenuAPI_ShowDebugListBox::OutString' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_ShowDebugListBox, LatentInfo) == 0x000038, "Member 'EndMenuAPI_ShowDebugListBox::LatentInfo' has a wrong offset!");

// Function EndGame.EndMenuAPI.ShowFieldMenu
// 0x0008 (0x0008 - 0x0000)
struct EndMenuAPI_ShowFieldMenu final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuAPI_ShowFieldMenu) == 0x000008, "Wrong alignment on EndMenuAPI_ShowFieldMenu");
static_assert(sizeof(EndMenuAPI_ShowFieldMenu) == 0x000008, "Wrong size on EndMenuAPI_ShowFieldMenu");
static_assert(offsetof(EndMenuAPI_ShowFieldMenu, WorldContextObject) == 0x000000, "Member 'EndMenuAPI_ShowFieldMenu::WorldContextObject' has a wrong offset!");

// Function EndGame.EndMenuAPI.ShowFieldPane
// 0x0001 (0x0001 - 0x0000)
struct EndMenuAPI_ShowFieldPane final
{
public:
	EEndMenuFieldPaneType                         Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuAPI_ShowFieldPane) == 0x000001, "Wrong alignment on EndMenuAPI_ShowFieldPane");
static_assert(sizeof(EndMenuAPI_ShowFieldPane) == 0x000001, "Wrong size on EndMenuAPI_ShowFieldPane");
static_assert(offsetof(EndMenuAPI_ShowFieldPane, Type) == 0x000000, "Member 'EndMenuAPI_ShowFieldPane::Type' has a wrong offset!");

// Function EndGame.EndMenuAPI.ShowFieldTargetIcon
// 0x0020 (0x0020 - 0x0000)
struct EndMenuAPI_ShowFieldTargetIcon final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WorldPosition;                                     // 0x0008(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndMenuFieldTargetState                      State;                                             // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndMenuFieldTargetIconType                   aType;                                             // 0x0015(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserWidget*                            ReturnValue;                                       // 0x0018(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuAPI_ShowFieldTargetIcon) == 0x000008, "Wrong alignment on EndMenuAPI_ShowFieldTargetIcon");
static_assert(sizeof(EndMenuAPI_ShowFieldTargetIcon) == 0x000020, "Wrong size on EndMenuAPI_ShowFieldTargetIcon");
static_assert(offsetof(EndMenuAPI_ShowFieldTargetIcon, WorldContextObject) == 0x000000, "Member 'EndMenuAPI_ShowFieldTargetIcon::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_ShowFieldTargetIcon, WorldPosition) == 0x000008, "Member 'EndMenuAPI_ShowFieldTargetIcon::WorldPosition' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_ShowFieldTargetIcon, State) == 0x000014, "Member 'EndMenuAPI_ShowFieldTargetIcon::State' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_ShowFieldTargetIcon, aType) == 0x000015, "Member 'EndMenuAPI_ShowFieldTargetIcon::aType' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_ShowFieldTargetIcon, ReturnValue) == 0x000018, "Member 'EndMenuAPI_ShowFieldTargetIcon::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuAPI.ShowFollowingPopupMessage
// 0x0030 (0x0030 - 0x0000)
struct EndMenuAPI_ShowFollowingPopupMessage final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Actor;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WorldPosition;                                     // 0x0010(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndMenuPopupMessageKind                      Kind;                                              // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Value;                                             // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Magnificate;                                       // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndMenuDamageResistance                      Resistance;                                        // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndMenuPopupMessageFlags                     Flags_0;                                           // 0x0029(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMenuAPI_ShowFollowingPopupMessage) == 0x000008, "Wrong alignment on EndMenuAPI_ShowFollowingPopupMessage");
static_assert(sizeof(EndMenuAPI_ShowFollowingPopupMessage) == 0x000030, "Wrong size on EndMenuAPI_ShowFollowingPopupMessage");
static_assert(offsetof(EndMenuAPI_ShowFollowingPopupMessage, WorldContextObject) == 0x000000, "Member 'EndMenuAPI_ShowFollowingPopupMessage::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_ShowFollowingPopupMessage, Actor) == 0x000008, "Member 'EndMenuAPI_ShowFollowingPopupMessage::Actor' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_ShowFollowingPopupMessage, WorldPosition) == 0x000010, "Member 'EndMenuAPI_ShowFollowingPopupMessage::WorldPosition' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_ShowFollowingPopupMessage, Kind) == 0x00001C, "Member 'EndMenuAPI_ShowFollowingPopupMessage::Kind' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_ShowFollowingPopupMessage, Value) == 0x000020, "Member 'EndMenuAPI_ShowFollowingPopupMessage::Value' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_ShowFollowingPopupMessage, Magnificate) == 0x000024, "Member 'EndMenuAPI_ShowFollowingPopupMessage::Magnificate' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_ShowFollowingPopupMessage, Resistance) == 0x000028, "Member 'EndMenuAPI_ShowFollowingPopupMessage::Resistance' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_ShowFollowingPopupMessage, Flags_0) == 0x000029, "Member 'EndMenuAPI_ShowFollowingPopupMessage::Flags_0' has a wrong offset!");

// Function EndGame.EndMenuAPI.ShowLoadingIcon
// 0x0008 (0x0008 - 0x0000)
struct EndMenuAPI_ShowLoadingIcon final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuAPI_ShowLoadingIcon) == 0x000008, "Wrong alignment on EndMenuAPI_ShowLoadingIcon");
static_assert(sizeof(EndMenuAPI_ShowLoadingIcon) == 0x000008, "Wrong size on EndMenuAPI_ShowLoadingIcon");
static_assert(offsetof(EndMenuAPI_ShowLoadingIcon, WorldContextObject) == 0x000000, "Member 'EndMenuAPI_ShowLoadingIcon::WorldContextObject' has a wrong offset!");

// Function EndGame.EndMenuAPI.ShowLoadingScreen
// 0x0018 (0x0018 - 0x0000)
struct EndMenuAPI_ShowLoadingScreen final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LocationID;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShowLocationTip;                                   // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMenuAPI_ShowLoadingScreen) == 0x000008, "Wrong alignment on EndMenuAPI_ShowLoadingScreen");
static_assert(sizeof(EndMenuAPI_ShowLoadingScreen) == 0x000018, "Wrong size on EndMenuAPI_ShowLoadingScreen");
static_assert(offsetof(EndMenuAPI_ShowLoadingScreen, WorldContextObject) == 0x000000, "Member 'EndMenuAPI_ShowLoadingScreen::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_ShowLoadingScreen, LocationID) == 0x000008, "Member 'EndMenuAPI_ShowLoadingScreen::LocationID' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_ShowLoadingScreen, ShowLocationTip) == 0x000010, "Member 'EndMenuAPI_ShowLoadingScreen::ShowLocationTip' has a wrong offset!");

// Function EndGame.EndMenuAPI.ShowLoadingScreenForChocoboFastTravel
// 0x0020 (0x0020 - 0x0000)
struct EndMenuAPI_ShowLoadingScreenForChocoboFastTravel final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ChocoboText;                                       // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LocationID;                                        // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuAPI_ShowLoadingScreenForChocoboFastTravel) == 0x000008, "Wrong alignment on EndMenuAPI_ShowLoadingScreenForChocoboFastTravel");
static_assert(sizeof(EndMenuAPI_ShowLoadingScreenForChocoboFastTravel) == 0x000020, "Wrong size on EndMenuAPI_ShowLoadingScreenForChocoboFastTravel");
static_assert(offsetof(EndMenuAPI_ShowLoadingScreenForChocoboFastTravel, WorldContextObject) == 0x000000, "Member 'EndMenuAPI_ShowLoadingScreenForChocoboFastTravel::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_ShowLoadingScreenForChocoboFastTravel, ChocoboText) == 0x000008, "Member 'EndMenuAPI_ShowLoadingScreenForChocoboFastTravel::ChocoboText' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_ShowLoadingScreenForChocoboFastTravel, LocationID) == 0x000018, "Member 'EndMenuAPI_ShowLoadingScreenForChocoboFastTravel::LocationID' has a wrong offset!");

// Function EndGame.EndMenuAPI.ShowLocationName
// 0x0028 (0x0028 - 0x0000)
struct EndMenuAPI_ShowLocationName final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TextID;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EnTextId;                                          // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuAPI_ShowLocationName) == 0x000008, "Wrong alignment on EndMenuAPI_ShowLocationName");
static_assert(sizeof(EndMenuAPI_ShowLocationName) == 0x000028, "Wrong size on EndMenuAPI_ShowLocationName");
static_assert(offsetof(EndMenuAPI_ShowLocationName, WorldContextObject) == 0x000000, "Member 'EndMenuAPI_ShowLocationName::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_ShowLocationName, TextID) == 0x000008, "Member 'EndMenuAPI_ShowLocationName::TextID' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_ShowLocationName, EnTextId) == 0x000018, "Member 'EndMenuAPI_ShowLocationName::EnTextId' has a wrong offset!");

// Function EndGame.EndMenuAPI.ShowMessageLogs
// 0x0008 (0x0008 - 0x0000)
struct EndMenuAPI_ShowMessageLogs final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuAPI_ShowMessageLogs) == 0x000008, "Wrong alignment on EndMenuAPI_ShowMessageLogs");
static_assert(sizeof(EndMenuAPI_ShowMessageLogs) == 0x000008, "Wrong size on EndMenuAPI_ShowMessageLogs");
static_assert(offsetof(EndMenuAPI_ShowMessageLogs, WorldContextObject) == 0x000000, "Member 'EndMenuAPI_ShowMessageLogs::WorldContextObject' has a wrong offset!");

// Function EndGame.EndMenuAPI.ShowMessageWindow
// 0x0038 (0x0038 - 0x0000)
struct EndMenuAPI_ShowMessageWindow final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TextID;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         OptionTextIds;                                     // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	EEndMenuMessageWindowFlags                    Flags_0;                                           // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserWidget*                            ReturnValue;                                       // 0x0030(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuAPI_ShowMessageWindow) == 0x000008, "Wrong alignment on EndMenuAPI_ShowMessageWindow");
static_assert(sizeof(EndMenuAPI_ShowMessageWindow) == 0x000038, "Wrong size on EndMenuAPI_ShowMessageWindow");
static_assert(offsetof(EndMenuAPI_ShowMessageWindow, WorldContextObject) == 0x000000, "Member 'EndMenuAPI_ShowMessageWindow::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_ShowMessageWindow, TextID) == 0x000008, "Member 'EndMenuAPI_ShowMessageWindow::TextID' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_ShowMessageWindow, OptionTextIds) == 0x000018, "Member 'EndMenuAPI_ShowMessageWindow::OptionTextIds' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_ShowMessageWindow, Flags_0) == 0x000028, "Member 'EndMenuAPI_ShowMessageWindow::Flags_0' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_ShowMessageWindow, ReturnValue) == 0x000030, "Member 'EndMenuAPI_ShowMessageWindow::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuAPI.ShowMovie
// 0x0010 (0x0010 - 0x0000)
struct EndMenuAPI_ShowMovie final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     Material;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuAPI_ShowMovie) == 0x000008, "Wrong alignment on EndMenuAPI_ShowMovie");
static_assert(sizeof(EndMenuAPI_ShowMovie) == 0x000010, "Wrong size on EndMenuAPI_ShowMovie");
static_assert(offsetof(EndMenuAPI_ShowMovie, WorldContextObject) == 0x000000, "Member 'EndMenuAPI_ShowMovie::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_ShowMovie, Material) == 0x000008, "Member 'EndMenuAPI_ShowMovie::Material' has a wrong offset!");

// Function EndGame.EndMenuAPI.ShowPauseMenu
// 0x0010 (0x0010 - 0x0000)
struct EndMenuAPI_ShowPauseMenu final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndMenuPauseMode                             Mode;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMenuAPI_ShowPauseMenu) == 0x000008, "Wrong alignment on EndMenuAPI_ShowPauseMenu");
static_assert(sizeof(EndMenuAPI_ShowPauseMenu) == 0x000010, "Wrong size on EndMenuAPI_ShowPauseMenu");
static_assert(offsetof(EndMenuAPI_ShowPauseMenu, WorldContextObject) == 0x000000, "Member 'EndMenuAPI_ShowPauseMenu::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_ShowPauseMenu, Mode) == 0x000008, "Member 'EndMenuAPI_ShowPauseMenu::Mode' has a wrong offset!");

// Function EndGame.EndMenuAPI.ShowPopupMessage
// 0x0028 (0x0028 - 0x0000)
struct EndMenuAPI_ShowPopupMessage final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WorldPosition;                                     // 0x0008(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndMenuPopupMessageKind                      Kind;                                              // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Value;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Magnificate;                                       // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndMenuDamageResistance                      Resistance;                                        // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndMenuPopupMessageFlags                     Flags_0;                                           // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMenuAPI_ShowPopupMessage) == 0x000008, "Wrong alignment on EndMenuAPI_ShowPopupMessage");
static_assert(sizeof(EndMenuAPI_ShowPopupMessage) == 0x000028, "Wrong size on EndMenuAPI_ShowPopupMessage");
static_assert(offsetof(EndMenuAPI_ShowPopupMessage, WorldContextObject) == 0x000000, "Member 'EndMenuAPI_ShowPopupMessage::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_ShowPopupMessage, WorldPosition) == 0x000008, "Member 'EndMenuAPI_ShowPopupMessage::WorldPosition' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_ShowPopupMessage, Kind) == 0x000014, "Member 'EndMenuAPI_ShowPopupMessage::Kind' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_ShowPopupMessage, Value) == 0x000018, "Member 'EndMenuAPI_ShowPopupMessage::Value' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_ShowPopupMessage, Magnificate) == 0x00001C, "Member 'EndMenuAPI_ShowPopupMessage::Magnificate' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_ShowPopupMessage, Resistance) == 0x000020, "Member 'EndMenuAPI_ShowPopupMessage::Resistance' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_ShowPopupMessage, Flags_0) == 0x000021, "Member 'EndMenuAPI_ShowPopupMessage::Flags_0' has a wrong offset!");

// Function EndGame.EndMenuAPI.ShowSkippingIcon
// 0x0008 (0x0008 - 0x0000)
struct EndMenuAPI_ShowSkippingIcon final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuAPI_ShowSkippingIcon) == 0x000008, "Wrong alignment on EndMenuAPI_ShowSkippingIcon");
static_assert(sizeof(EndMenuAPI_ShowSkippingIcon) == 0x000008, "Wrong size on EndMenuAPI_ShowSkippingIcon");
static_assert(offsetof(EndMenuAPI_ShowSkippingIcon, WorldContextObject) == 0x000000, "Member 'EndMenuAPI_ShowSkippingIcon::WorldContextObject' has a wrong offset!");

// Function EndGame.EndMenuAPI.ShowSubtitle
// 0x0020 (0x0020 - 0x0000)
struct EndMenuAPI_ShowSubtitle final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TextID;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWaitKey;                                          // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bArrowHidden;                                      // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMenuAPI_ShowSubtitle) == 0x000008, "Wrong alignment on EndMenuAPI_ShowSubtitle");
static_assert(sizeof(EndMenuAPI_ShowSubtitle) == 0x000020, "Wrong size on EndMenuAPI_ShowSubtitle");
static_assert(offsetof(EndMenuAPI_ShowSubtitle, WorldContextObject) == 0x000000, "Member 'EndMenuAPI_ShowSubtitle::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_ShowSubtitle, TextID) == 0x000008, "Member 'EndMenuAPI_ShowSubtitle::TextID' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_ShowSubtitle, bWaitKey) == 0x000018, "Member 'EndMenuAPI_ShowSubtitle::bWaitKey' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_ShowSubtitle, bArrowHidden) == 0x000019, "Member 'EndMenuAPI_ShowSubtitle::bArrowHidden' has a wrong offset!");

// Function EndGame.EndMenuAPI.ShowTalkLogs
// 0x0008 (0x0008 - 0x0000)
struct EndMenuAPI_ShowTalkLogs final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuAPI_ShowTalkLogs) == 0x000008, "Wrong alignment on EndMenuAPI_ShowTalkLogs");
static_assert(sizeof(EndMenuAPI_ShowTalkLogs) == 0x000008, "Wrong size on EndMenuAPI_ShowTalkLogs");
static_assert(offsetof(EndMenuAPI_ShowTalkLogs, WorldContextObject) == 0x000000, "Member 'EndMenuAPI_ShowTalkLogs::WorldContextObject' has a wrong offset!");

// Function EndGame.EndMenuAPI.UpdateMenu
// 0x0004 (0x0004 - 0x0000)
struct EndMenuAPI_UpdateMenu final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuAPI_UpdateMenu) == 0x000004, "Wrong alignment on EndMenuAPI_UpdateMenu");
static_assert(sizeof(EndMenuAPI_UpdateMenu) == 0x000004, "Wrong size on EndMenuAPI_UpdateMenu");
static_assert(offsetof(EndMenuAPI_UpdateMenu, DeltaSeconds) == 0x000000, "Member 'EndMenuAPI_UpdateMenu::DeltaSeconds' has a wrong offset!");

// Function EndGame.EndMenuAPI.IsBattleTargetIconActor
// 0x0010 (0x0010 - 0x0000)
struct EndMenuAPI_IsBattleTargetIconActor final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMenuAPI_IsBattleTargetIconActor) == 0x000008, "Wrong alignment on EndMenuAPI_IsBattleTargetIconActor");
static_assert(sizeof(EndMenuAPI_IsBattleTargetIconActor) == 0x000010, "Wrong size on EndMenuAPI_IsBattleTargetIconActor");
static_assert(offsetof(EndMenuAPI_IsBattleTargetIconActor, Actor) == 0x000000, "Member 'EndMenuAPI_IsBattleTargetIconActor::Actor' has a wrong offset!");
static_assert(offsetof(EndMenuAPI_IsBattleTargetIconActor, ReturnValue) == 0x000008, "Member 'EndMenuAPI_IsBattleTargetIconActor::ReturnValue' has a wrong offset!");

// Function EndGame.EndLoadingScreen.OnTipListSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndLoadingScreen_OnTipListSelectedIndexChanged final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndLoadingScreen_OnTipListSelectedIndexChanged) == 0x000004, "Wrong alignment on EndLoadingScreen_OnTipListSelectedIndexChanged");
static_assert(sizeof(EndLoadingScreen_OnTipListSelectedIndexChanged) == 0x000004, "Wrong size on EndLoadingScreen_OnTipListSelectedIndexChanged");
static_assert(offsetof(EndLoadingScreen_OnTipListSelectedIndexChanged, CellIndex) == 0x000000, "Member 'EndLoadingScreen_OnTipListSelectedIndexChanged::CellIndex' has a wrong offset!");

// Function EndGame.EndLoadingScreen.OnTipListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndLoadingScreen_OnTipListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndLoadingScreen_OnTipListSetupItem) == 0x000008, "Wrong alignment on EndLoadingScreen_OnTipListSetupItem");
static_assert(sizeof(EndLoadingScreen_OnTipListSetupItem) == 0x000010, "Wrong size on EndLoadingScreen_OnTipListSetupItem");
static_assert(offsetof(EndLoadingScreen_OnTipListSetupItem, ItemWidget) == 0x000000, "Member 'EndLoadingScreen_OnTipListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndLoadingScreen_OnTipListSetupItem, CellIndex) == 0x000008, "Member 'EndLoadingScreen_OnTipListSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndShopItemInfoWindow.OnCoreListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndShopItemInfoWindow_OnCoreListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndShopItemInfoWindow_OnCoreListSetupItem) == 0x000008, "Wrong alignment on EndShopItemInfoWindow_OnCoreListSetupItem");
static_assert(sizeof(EndShopItemInfoWindow_OnCoreListSetupItem) == 0x000010, "Wrong size on EndShopItemInfoWindow_OnCoreListSetupItem");
static_assert(offsetof(EndShopItemInfoWindow_OnCoreListSetupItem, ItemWidget) == 0x000000, "Member 'EndShopItemInfoWindow_OnCoreListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndShopItemInfoWindow_OnCoreListSetupItem, CellIndex) == 0x000008, "Member 'EndShopItemInfoWindow_OnCoreListSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndShopItemInfoWindow.OnMateriaInfoListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndShopItemInfoWindow_OnMateriaInfoListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndShopItemInfoWindow_OnMateriaInfoListSetupItem) == 0x000008, "Wrong alignment on EndShopItemInfoWindow_OnMateriaInfoListSetupItem");
static_assert(sizeof(EndShopItemInfoWindow_OnMateriaInfoListSetupItem) == 0x000010, "Wrong size on EndShopItemInfoWindow_OnMateriaInfoListSetupItem");
static_assert(offsetof(EndShopItemInfoWindow_OnMateriaInfoListSetupItem, ItemWidget) == 0x000000, "Member 'EndShopItemInfoWindow_OnMateriaInfoListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndShopItemInfoWindow_OnMateriaInfoListSetupItem, CellIndex) == 0x000008, "Member 'EndShopItemInfoWindow_OnMateriaInfoListSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndShopItemInfoWindow.OnMeasureInfoListSize
// 0x000C (0x000C - 0x0000)
struct EndShopItemInfoWindow_OnMeasureInfoListSize final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndShopItemInfoWindow_OnMeasureInfoListSize) == 0x000004, "Wrong alignment on EndShopItemInfoWindow_OnMeasureInfoListSize");
static_assert(sizeof(EndShopItemInfoWindow_OnMeasureInfoListSize) == 0x00000C, "Wrong size on EndShopItemInfoWindow_OnMeasureInfoListSize");
static_assert(offsetof(EndShopItemInfoWindow_OnMeasureInfoListSize, CellIndex) == 0x000000, "Member 'EndShopItemInfoWindow_OnMeasureInfoListSize::CellIndex' has a wrong offset!");
static_assert(offsetof(EndShopItemInfoWindow_OnMeasureInfoListSize, ReturnValue) == 0x000004, "Member 'EndShopItemInfoWindow_OnMeasureInfoListSize::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIPcBaseController.RequestUseAbility
// 0x000C (0x000C - 0x0000)
struct EndBattleAIPcBaseController_RequestUseAbility final
{
public:
	class FName                                   AbilityID;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAIPcBaseController_RequestUseAbility) == 0x000004, "Wrong alignment on EndBattleAIPcBaseController_RequestUseAbility");
static_assert(sizeof(EndBattleAIPcBaseController_RequestUseAbility) == 0x00000C, "Wrong size on EndBattleAIPcBaseController_RequestUseAbility");
static_assert(offsetof(EndBattleAIPcBaseController_RequestUseAbility, AbilityID) == 0x000000, "Member 'EndBattleAIPcBaseController_RequestUseAbility::AbilityID' has a wrong offset!");
static_assert(offsetof(EndBattleAIPcBaseController_RequestUseAbility, ReturnValue) == 0x000008, "Member 'EndBattleAIPcBaseController_RequestUseAbility::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIPcBaseController.SetDefenceActor
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAIPcBaseController_SetDefenceActor final
{
public:
	class AActor*                                 TargetActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDistance;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BestDistance;                                      // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIPcBaseController_SetDefenceActor) == 0x000008, "Wrong alignment on EndBattleAIPcBaseController_SetDefenceActor");
static_assert(sizeof(EndBattleAIPcBaseController_SetDefenceActor) == 0x000010, "Wrong size on EndBattleAIPcBaseController_SetDefenceActor");
static_assert(offsetof(EndBattleAIPcBaseController_SetDefenceActor, TargetActor) == 0x000000, "Member 'EndBattleAIPcBaseController_SetDefenceActor::TargetActor' has a wrong offset!");
static_assert(offsetof(EndBattleAIPcBaseController_SetDefenceActor, MaxDistance) == 0x000008, "Member 'EndBattleAIPcBaseController_SetDefenceActor::MaxDistance' has a wrong offset!");
static_assert(offsetof(EndBattleAIPcBaseController_SetDefenceActor, BestDistance) == 0x00000C, "Member 'EndBattleAIPcBaseController_SetDefenceActor::BestDistance' has a wrong offset!");

// Function EndGame.EndBattleAIPcBaseController.SetDefenceLocaiton
// 0x0014 (0x0014 - 0x0000)
struct EndBattleAIPcBaseController_SetDefenceLocaiton final
{
public:
	struct FVector                                TargetLoaction;                                    // 0x0000(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDistance;                                       // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BestDistance;                                      // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIPcBaseController_SetDefenceLocaiton) == 0x000004, "Wrong alignment on EndBattleAIPcBaseController_SetDefenceLocaiton");
static_assert(sizeof(EndBattleAIPcBaseController_SetDefenceLocaiton) == 0x000014, "Wrong size on EndBattleAIPcBaseController_SetDefenceLocaiton");
static_assert(offsetof(EndBattleAIPcBaseController_SetDefenceLocaiton, TargetLoaction) == 0x000000, "Member 'EndBattleAIPcBaseController_SetDefenceLocaiton::TargetLoaction' has a wrong offset!");
static_assert(offsetof(EndBattleAIPcBaseController_SetDefenceLocaiton, MaxDistance) == 0x00000C, "Member 'EndBattleAIPcBaseController_SetDefenceLocaiton::MaxDistance' has a wrong offset!");
static_assert(offsetof(EndBattleAIPcBaseController_SetDefenceLocaiton, BestDistance) == 0x000010, "Member 'EndBattleAIPcBaseController_SetDefenceLocaiton::BestDistance' has a wrong offset!");

// Function EndGame.EndJukeboxMenu.OnSoundListPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndJukeboxMenu_OnSoundListPressedItem final
{
public:
	int32                                         ItemIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndJukeboxMenu_OnSoundListPressedItem) == 0x000004, "Wrong alignment on EndJukeboxMenu_OnSoundListPressedItem");
static_assert(sizeof(EndJukeboxMenu_OnSoundListPressedItem) == 0x000004, "Wrong size on EndJukeboxMenu_OnSoundListPressedItem");
static_assert(offsetof(EndJukeboxMenu_OnSoundListPressedItem, ItemIndex) == 0x000000, "Member 'EndJukeboxMenu_OnSoundListPressedItem::ItemIndex' has a wrong offset!");

// Function EndGame.EndJukeboxMenu.OnSoundListSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndJukeboxMenu_OnSoundListSelectedIndexChanged final
{
public:
	int32                                         ItemIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndJukeboxMenu_OnSoundListSelectedIndexChanged) == 0x000004, "Wrong alignment on EndJukeboxMenu_OnSoundListSelectedIndexChanged");
static_assert(sizeof(EndJukeboxMenu_OnSoundListSelectedIndexChanged) == 0x000004, "Wrong size on EndJukeboxMenu_OnSoundListSelectedIndexChanged");
static_assert(offsetof(EndJukeboxMenu_OnSoundListSelectedIndexChanged, ItemIndex) == 0x000000, "Member 'EndJukeboxMenu_OnSoundListSelectedIndexChanged::ItemIndex' has a wrong offset!");

// Function EndGame.EndJukeboxMenu.OnSoundListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndJukeboxMenu_OnSoundListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndJukeboxMenu_OnSoundListSetupItem) == 0x000008, "Wrong alignment on EndJukeboxMenu_OnSoundListSetupItem");
static_assert(sizeof(EndJukeboxMenu_OnSoundListSetupItem) == 0x000010, "Wrong size on EndJukeboxMenu_OnSoundListSetupItem");
static_assert(offsetof(EndJukeboxMenu_OnSoundListSetupItem, ItemWidget) == 0x000000, "Member 'EndJukeboxMenu_OnSoundListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndJukeboxMenu_OnSoundListSetupItem, ItemIndex) == 0x000008, "Member 'EndJukeboxMenu_OnSoundListSetupItem::ItemIndex' has a wrong offset!");

// Function EndGame.EndAreaMapMenu.OnLeftMenuSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndAreaMapMenu_OnLeftMenuSelectedIndexChanged final
{
public:
	int32                                         ItemIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndAreaMapMenu_OnLeftMenuSelectedIndexChanged) == 0x000004, "Wrong alignment on EndAreaMapMenu_OnLeftMenuSelectedIndexChanged");
static_assert(sizeof(EndAreaMapMenu_OnLeftMenuSelectedIndexChanged) == 0x000004, "Wrong size on EndAreaMapMenu_OnLeftMenuSelectedIndexChanged");
static_assert(offsetof(EndAreaMapMenu_OnLeftMenuSelectedIndexChanged, ItemIndex) == 0x000000, "Member 'EndAreaMapMenu_OnLeftMenuSelectedIndexChanged::ItemIndex' has a wrong offset!");

// Function EndGame.EndAreaMapMenu.OnLeftMenuSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndAreaMapMenu_OnLeftMenuSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndAreaMapMenu_OnLeftMenuSetupItem) == 0x000008, "Wrong alignment on EndAreaMapMenu_OnLeftMenuSetupItem");
static_assert(sizeof(EndAreaMapMenu_OnLeftMenuSetupItem) == 0x000010, "Wrong size on EndAreaMapMenu_OnLeftMenuSetupItem");
static_assert(offsetof(EndAreaMapMenu_OnLeftMenuSetupItem, ItemWidget) == 0x000000, "Member 'EndAreaMapMenu_OnLeftMenuSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndAreaMapMenu_OnLeftMenuSetupItem, ItemIndex) == 0x000008, "Member 'EndAreaMapMenu_OnLeftMenuSetupItem::ItemIndex' has a wrong offset!");

// Function EndGame.EndAreaMapMenu.OnStoryListBoxSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndAreaMapMenu_OnStoryListBoxSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndAreaMapMenu_OnStoryListBoxSetupItem) == 0x000008, "Wrong alignment on EndAreaMapMenu_OnStoryListBoxSetupItem");
static_assert(sizeof(EndAreaMapMenu_OnStoryListBoxSetupItem) == 0x000010, "Wrong size on EndAreaMapMenu_OnStoryListBoxSetupItem");
static_assert(offsetof(EndAreaMapMenu_OnStoryListBoxSetupItem, ItemWidget) == 0x000000, "Member 'EndAreaMapMenu_OnStoryListBoxSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndAreaMapMenu_OnStoryListBoxSetupItem, ItemIndex) == 0x000008, "Member 'EndAreaMapMenu_OnStoryListBoxSetupItem::ItemIndex' has a wrong offset!");

// Function EndGame.RangeTest.IsRangeTest
// 0x0018 (0x0018 - 0x0000)
struct RangeTest_IsRangeTest final
{
public:
	float                                         InMin;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InMax;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InDist;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class URangeTest*                             ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RangeTest_IsRangeTest) == 0x000008, "Wrong alignment on RangeTest_IsRangeTest");
static_assert(sizeof(RangeTest_IsRangeTest) == 0x000018, "Wrong size on RangeTest_IsRangeTest");
static_assert(offsetof(RangeTest_IsRangeTest, InMin) == 0x000000, "Member 'RangeTest_IsRangeTest::InMin' has a wrong offset!");
static_assert(offsetof(RangeTest_IsRangeTest, InMax) == 0x000004, "Member 'RangeTest_IsRangeTest::InMax' has a wrong offset!");
static_assert(offsetof(RangeTest_IsRangeTest, InDist) == 0x000008, "Member 'RangeTest_IsRangeTest::InDist' has a wrong offset!");
static_assert(offsetof(RangeTest_IsRangeTest, ReturnValue) == 0x000010, "Member 'RangeTest_IsRangeTest::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIEB0003Controller.IsPlayerInConfirmSpark
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAIEB0003Controller_IsPlayerInConfirmSpark final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIEB0003Controller_IsPlayerInConfirmSpark) == 0x000001, "Wrong alignment on EndBattleAIEB0003Controller_IsPlayerInConfirmSpark");
static_assert(sizeof(EndBattleAIEB0003Controller_IsPlayerInConfirmSpark) == 0x000001, "Wrong size on EndBattleAIEB0003Controller_IsPlayerInConfirmSpark");
static_assert(offsetof(EndBattleAIEB0003Controller_IsPlayerInConfirmSpark, ReturnValue) == 0x000000, "Member 'EndBattleAIEB0003Controller_IsPlayerInConfirmSpark::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIEB0003Controller.OnReadySpark
// 0x0020 (0x0020 - 0x0000)
struct EndBattleAIEB0003Controller_OnReadySpark final
{
public:
	int32                                         sparkID;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                centerPos;                                         // 0x0004(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AEndBattleAIEB0003MineController*> mineAIList;                                        // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIEB0003Controller_OnReadySpark) == 0x000008, "Wrong alignment on EndBattleAIEB0003Controller_OnReadySpark");
static_assert(sizeof(EndBattleAIEB0003Controller_OnReadySpark) == 0x000020, "Wrong size on EndBattleAIEB0003Controller_OnReadySpark");
static_assert(offsetof(EndBattleAIEB0003Controller_OnReadySpark, sparkID) == 0x000000, "Member 'EndBattleAIEB0003Controller_OnReadySpark::sparkID' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0003Controller_OnReadySpark, centerPos) == 0x000004, "Member 'EndBattleAIEB0003Controller_OnReadySpark::centerPos' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0003Controller_OnReadySpark, mineAIList) == 0x000010, "Member 'EndBattleAIEB0003Controller_OnReadySpark::mineAIList' has a wrong offset!");

// Function EndGame.EndBattleAIEB0003Controller.OnRequestFlashDash
// 0x0004 (0x0004 - 0x0000)
struct EndBattleAIEB0003Controller_OnRequestFlashDash final
{
public:
	int32                                         InFlashDashCount;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIEB0003Controller_OnRequestFlashDash) == 0x000004, "Wrong alignment on EndBattleAIEB0003Controller_OnRequestFlashDash");
static_assert(sizeof(EndBattleAIEB0003Controller_OnRequestFlashDash) == 0x000004, "Wrong size on EndBattleAIEB0003Controller_OnRequestFlashDash");
static_assert(offsetof(EndBattleAIEB0003Controller_OnRequestFlashDash, InFlashDashCount) == 0x000000, "Member 'EndBattleAIEB0003Controller_OnRequestFlashDash::InFlashDashCount' has a wrong offset!");

// Function EndGame.EndBattleAIEB0003Controller.PlayEffectOnce
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAIEB0003Controller_PlayEffectOnce final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIEB0003Controller_PlayEffectOnce) == 0x000004, "Wrong alignment on EndBattleAIEB0003Controller_PlayEffectOnce");
static_assert(sizeof(EndBattleAIEB0003Controller_PlayEffectOnce) == 0x000008, "Wrong size on EndBattleAIEB0003Controller_PlayEffectOnce");
static_assert(offsetof(EndBattleAIEB0003Controller_PlayEffectOnce, InName) == 0x000000, "Member 'EndBattleAIEB0003Controller_PlayEffectOnce::InName' has a wrong offset!");

// Function EndGame.EndBattleAIEB0003Controller.SetNextFastPoint
// 0x000C (0x000C - 0x0000)
struct EndBattleAIEB0003Controller_SetNextFastPoint final
{
public:
	struct FVector                                Point;                                             // 0x0000(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIEB0003Controller_SetNextFastPoint) == 0x000004, "Wrong alignment on EndBattleAIEB0003Controller_SetNextFastPoint");
static_assert(sizeof(EndBattleAIEB0003Controller_SetNextFastPoint) == 0x00000C, "Wrong size on EndBattleAIEB0003Controller_SetNextFastPoint");
static_assert(offsetof(EndBattleAIEB0003Controller_SetNextFastPoint, Point) == 0x000000, "Member 'EndBattleAIEB0003Controller_SetNextFastPoint::Point' has a wrong offset!");

// Function EndGame.EndBattleAIEB0003Controller.SetNextFlashDashPoint
// 0x000C (0x000C - 0x0000)
struct EndBattleAIEB0003Controller_SetNextFlashDashPoint final
{
public:
	struct FVector                                Point;                                             // 0x0000(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIEB0003Controller_SetNextFlashDashPoint) == 0x000004, "Wrong alignment on EndBattleAIEB0003Controller_SetNextFlashDashPoint");
static_assert(sizeof(EndBattleAIEB0003Controller_SetNextFlashDashPoint) == 0x00000C, "Wrong size on EndBattleAIEB0003Controller_SetNextFlashDashPoint");
static_assert(offsetof(EndBattleAIEB0003Controller_SetNextFlashDashPoint, Point) == 0x000000, "Member 'EndBattleAIEB0003Controller_SetNextFlashDashPoint::Point' has a wrong offset!");

// Function EndGame.RangeSwitch2.RangeSwitch2
// 0x0020 (0x0020 - 0x0000)
struct RangeSwitch2_RangeSwitch2 final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Min1;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Max1;                                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Min2;                                              // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Max2;                                              // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ContainEqual;                                      // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FirstOnly;                                         // 0x0015(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class URangeSwitch2*                          ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RangeSwitch2_RangeSwitch2) == 0x000008, "Wrong alignment on RangeSwitch2_RangeSwitch2");
static_assert(sizeof(RangeSwitch2_RangeSwitch2) == 0x000020, "Wrong size on RangeSwitch2_RangeSwitch2");
static_assert(offsetof(RangeSwitch2_RangeSwitch2, Value) == 0x000000, "Member 'RangeSwitch2_RangeSwitch2::Value' has a wrong offset!");
static_assert(offsetof(RangeSwitch2_RangeSwitch2, Min1) == 0x000004, "Member 'RangeSwitch2_RangeSwitch2::Min1' has a wrong offset!");
static_assert(offsetof(RangeSwitch2_RangeSwitch2, Max1) == 0x000008, "Member 'RangeSwitch2_RangeSwitch2::Max1' has a wrong offset!");
static_assert(offsetof(RangeSwitch2_RangeSwitch2, Min2) == 0x00000C, "Member 'RangeSwitch2_RangeSwitch2::Min2' has a wrong offset!");
static_assert(offsetof(RangeSwitch2_RangeSwitch2, Max2) == 0x000010, "Member 'RangeSwitch2_RangeSwitch2::Max2' has a wrong offset!");
static_assert(offsetof(RangeSwitch2_RangeSwitch2, ContainEqual) == 0x000014, "Member 'RangeSwitch2_RangeSwitch2::ContainEqual' has a wrong offset!");
static_assert(offsetof(RangeSwitch2_RangeSwitch2, FirstOnly) == 0x000015, "Member 'RangeSwitch2_RangeSwitch2::FirstOnly' has a wrong offset!");
static_assert(offsetof(RangeSwitch2_RangeSwitch2, ReturnValue) == 0x000018, "Member 'RangeSwitch2_RangeSwitch2::ReturnValue' has a wrong offset!");

// Function EndGame.EndFieldCommandMenu.OnCommandCellSetup
// 0x0010 (0x0010 - 0x0000)
struct EndFieldCommandMenu_OnCommandCellSetup final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndFieldCommandMenu_OnCommandCellSetup) == 0x000008, "Wrong alignment on EndFieldCommandMenu_OnCommandCellSetup");
static_assert(sizeof(EndFieldCommandMenu_OnCommandCellSetup) == 0x000010, "Wrong size on EndFieldCommandMenu_OnCommandCellSetup");
static_assert(offsetof(EndFieldCommandMenu_OnCommandCellSetup, ItemWidget) == 0x000000, "Member 'EndFieldCommandMenu_OnCommandCellSetup::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndFieldCommandMenu_OnCommandCellSetup, ItemIndex) == 0x000008, "Member 'EndFieldCommandMenu_OnCommandCellSetup::ItemIndex' has a wrong offset!");

// Function EndGame.EndFieldCommandMenu.OnPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndFieldCommandMenu_OnPressedItem final
{
public:
	int32                                         ItemIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndFieldCommandMenu_OnPressedItem) == 0x000004, "Wrong alignment on EndFieldCommandMenu_OnPressedItem");
static_assert(sizeof(EndFieldCommandMenu_OnPressedItem) == 0x000004, "Wrong size on EndFieldCommandMenu_OnPressedItem");
static_assert(offsetof(EndFieldCommandMenu_OnPressedItem, ItemIndex) == 0x000000, "Member 'EndFieldCommandMenu_OnPressedItem::ItemIndex' has a wrong offset!");

// Function EndGame.EndBattleAIEB0002ArmController.GetArmPhase
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAIEB0002ArmController_GetArmPhase final
{
public:
	EArmPhase                                     ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIEB0002ArmController_GetArmPhase) == 0x000001, "Wrong alignment on EndBattleAIEB0002ArmController_GetArmPhase");
static_assert(sizeof(EndBattleAIEB0002ArmController_GetArmPhase) == 0x000001, "Wrong size on EndBattleAIEB0002ArmController_GetArmPhase");
static_assert(offsetof(EndBattleAIEB0002ArmController_GetArmPhase, ReturnValue) == 0x000000, "Member 'EndBattleAIEB0002ArmController_GetArmPhase::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIEB0002ArmController.IsLeftArm
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAIEB0002ArmController_IsLeftArm final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIEB0002ArmController_IsLeftArm) == 0x000001, "Wrong alignment on EndBattleAIEB0002ArmController_IsLeftArm");
static_assert(sizeof(EndBattleAIEB0002ArmController_IsLeftArm) == 0x000001, "Wrong size on EndBattleAIEB0002ArmController_IsLeftArm");
static_assert(offsetof(EndBattleAIEB0002ArmController_IsLeftArm, ReturnValue) == 0x000000, "Member 'EndBattleAIEB0002ArmController_IsLeftArm::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIEB0002ArmController.OnDetachArm
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAIEB0002ArmController_OnDetachArm final
{
public:
	bool                                          enableAI;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIEB0002ArmController_OnDetachArm) == 0x000001, "Wrong alignment on EndBattleAIEB0002ArmController_OnDetachArm");
static_assert(sizeof(EndBattleAIEB0002ArmController_OnDetachArm) == 0x000001, "Wrong size on EndBattleAIEB0002ArmController_OnDetachArm");
static_assert(offsetof(EndBattleAIEB0002ArmController_OnDetachArm, enableAI) == 0x000000, "Member 'EndBattleAIEB0002ArmController_OnDetachArm::enableAI' has a wrong offset!");

// Function EndGame.EndBattleAIEB0002ArmController.OnDockingStart
// 0x000C (0x000C - 0x0000)
struct EndBattleAIEB0002ArmController_OnDockingStart final
{
public:
	float                                         MoveSpeed;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LifeTime;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         targetRadius;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIEB0002ArmController_OnDockingStart) == 0x000004, "Wrong alignment on EndBattleAIEB0002ArmController_OnDockingStart");
static_assert(sizeof(EndBattleAIEB0002ArmController_OnDockingStart) == 0x00000C, "Wrong size on EndBattleAIEB0002ArmController_OnDockingStart");
static_assert(offsetof(EndBattleAIEB0002ArmController_OnDockingStart, MoveSpeed) == 0x000000, "Member 'EndBattleAIEB0002ArmController_OnDockingStart::MoveSpeed' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0002ArmController_OnDockingStart, LifeTime) == 0x000004, "Member 'EndBattleAIEB0002ArmController_OnDockingStart::LifeTime' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0002ArmController_OnDockingStart, targetRadius) == 0x000008, "Member 'EndBattleAIEB0002ArmController_OnDockingStart::targetRadius' has a wrong offset!");

// Function EndGame.EndBattleAIEB0002ArmController.OnDockingStartLinear
// 0x0004 (0x0004 - 0x0000)
struct EndBattleAIEB0002ArmController_OnDockingStartLinear final
{
public:
	float                                         arrivalTime;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIEB0002ArmController_OnDockingStartLinear) == 0x000004, "Wrong alignment on EndBattleAIEB0002ArmController_OnDockingStartLinear");
static_assert(sizeof(EndBattleAIEB0002ArmController_OnDockingStartLinear) == 0x000004, "Wrong size on EndBattleAIEB0002ArmController_OnDockingStartLinear");
static_assert(offsetof(EndBattleAIEB0002ArmController_OnDockingStartLinear, arrivalTime) == 0x000000, "Member 'EndBattleAIEB0002ArmController_OnDockingStartLinear::arrivalTime' has a wrong offset!");

// Function EndGame.EndBattleAIEB0002ArmController.OnEjectStart
// 0x000C (0x000C - 0x0000)
struct EndBattleAIEB0002ArmController_OnEjectStart final
{
public:
	float                                         MoveSpeed;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LifeTime;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         targetRadius;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIEB0002ArmController_OnEjectStart) == 0x000004, "Wrong alignment on EndBattleAIEB0002ArmController_OnEjectStart");
static_assert(sizeof(EndBattleAIEB0002ArmController_OnEjectStart) == 0x00000C, "Wrong size on EndBattleAIEB0002ArmController_OnEjectStart");
static_assert(offsetof(EndBattleAIEB0002ArmController_OnEjectStart, MoveSpeed) == 0x000000, "Member 'EndBattleAIEB0002ArmController_OnEjectStart::MoveSpeed' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0002ArmController_OnEjectStart, LifeTime) == 0x000004, "Member 'EndBattleAIEB0002ArmController_OnEjectStart::LifeTime' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0002ArmController_OnEjectStart, targetRadius) == 0x000008, "Member 'EndBattleAIEB0002ArmController_OnEjectStart::targetRadius' has a wrong offset!");

// Function EndGame.EndBattleAIEB0002ArmController.SetArmPhase
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAIEB0002ArmController_SetArmPhase final
{
public:
	EArmPhase                                     InPhase;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIEB0002ArmController_SetArmPhase) == 0x000001, "Wrong alignment on EndBattleAIEB0002ArmController_SetArmPhase");
static_assert(sizeof(EndBattleAIEB0002ArmController_SetArmPhase) == 0x000001, "Wrong size on EndBattleAIEB0002ArmController_SetArmPhase");
static_assert(offsetof(EndBattleAIEB0002ArmController_SetArmPhase, InPhase) == 0x000000, "Member 'EndBattleAIEB0002ArmController_SetArmPhase::InPhase' has a wrong offset!");

// Function EndGame.EndMainSaveLoadTopMenu.OnLeftMenuPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndMainSaveLoadTopMenu_OnLeftMenuPressedItem final
{
public:
	int32                                         ItemIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainSaveLoadTopMenu_OnLeftMenuPressedItem) == 0x000004, "Wrong alignment on EndMainSaveLoadTopMenu_OnLeftMenuPressedItem");
static_assert(sizeof(EndMainSaveLoadTopMenu_OnLeftMenuPressedItem) == 0x000004, "Wrong size on EndMainSaveLoadTopMenu_OnLeftMenuPressedItem");
static_assert(offsetof(EndMainSaveLoadTopMenu_OnLeftMenuPressedItem, ItemIndex) == 0x000000, "Member 'EndMainSaveLoadTopMenu_OnLeftMenuPressedItem::ItemIndex' has a wrong offset!");

// Function EndGame.EndMainSaveLoadTopMenu.OnLeftMenuSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndMainSaveLoadTopMenu_OnLeftMenuSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMainSaveLoadTopMenu_OnLeftMenuSetupItem) == 0x000008, "Wrong alignment on EndMainSaveLoadTopMenu_OnLeftMenuSetupItem");
static_assert(sizeof(EndMainSaveLoadTopMenu_OnLeftMenuSetupItem) == 0x000010, "Wrong size on EndMainSaveLoadTopMenu_OnLeftMenuSetupItem");
static_assert(offsetof(EndMainSaveLoadTopMenu_OnLeftMenuSetupItem, ItemWidget) == 0x000000, "Member 'EndMainSaveLoadTopMenu_OnLeftMenuSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndMainSaveLoadTopMenu_OnLeftMenuSetupItem, ItemIndex) == 0x000008, "Member 'EndMainSaveLoadTopMenu_OnLeftMenuSetupItem::ItemIndex' has a wrong offset!");

// Function EndGame.EndBattleAIEB0012Controller.OnEasySpawnEvent
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAIEB0012Controller_OnEasySpawnEvent final
{
public:
	class FName                                   EventName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIEB0012Controller_OnEasySpawnEvent) == 0x000004, "Wrong alignment on EndBattleAIEB0012Controller_OnEasySpawnEvent");
static_assert(sizeof(EndBattleAIEB0012Controller_OnEasySpawnEvent) == 0x000008, "Wrong size on EndBattleAIEB0012Controller_OnEasySpawnEvent");
static_assert(offsetof(EndBattleAIEB0012Controller_OnEasySpawnEvent, EventName) == 0x000000, "Member 'EndBattleAIEB0012Controller_OnEasySpawnEvent::EventName' has a wrong offset!");

// Function EndGame.EndBattleAIEB0012Controller.RequestDestroyLeftArmActor
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAIEB0012Controller_RequestDestroyLeftArmActor final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIEB0012Controller_RequestDestroyLeftArmActor) == 0x000001, "Wrong alignment on EndBattleAIEB0012Controller_RequestDestroyLeftArmActor");
static_assert(sizeof(EndBattleAIEB0012Controller_RequestDestroyLeftArmActor) == 0x000001, "Wrong size on EndBattleAIEB0012Controller_RequestDestroyLeftArmActor");
static_assert(offsetof(EndBattleAIEB0012Controller_RequestDestroyLeftArmActor, ReturnValue) == 0x000000, "Member 'EndBattleAIEB0012Controller_RequestDestroyLeftArmActor::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIEB0012Controller.RequestKillLeftArm
// 0x0002 (0x0002 - 0x0000)
struct EndBattleAIEB0012Controller_RequestKillLeftArm final
{
public:
	bool                                          forceDestroy;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIEB0012Controller_RequestKillLeftArm) == 0x000001, "Wrong alignment on EndBattleAIEB0012Controller_RequestKillLeftArm");
static_assert(sizeof(EndBattleAIEB0012Controller_RequestKillLeftArm) == 0x000002, "Wrong size on EndBattleAIEB0012Controller_RequestKillLeftArm");
static_assert(offsetof(EndBattleAIEB0012Controller_RequestKillLeftArm, forceDestroy) == 0x000000, "Member 'EndBattleAIEB0012Controller_RequestKillLeftArm::forceDestroy' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0012Controller_RequestKillLeftArm, ReturnValue) == 0x000001, "Member 'EndBattleAIEB0012Controller_RequestKillLeftArm::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIEB0012Controller.RequestRepairLeftArm
// 0x0014 (0x0014 - 0x0000)
struct EndBattleAIEB0012Controller_RequestRepairLeftArm final
{
public:
	class FName                                   charaPartsSpecName;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   meshLabelName;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAIEB0012Controller_RequestRepairLeftArm) == 0x000004, "Wrong alignment on EndBattleAIEB0012Controller_RequestRepairLeftArm");
static_assert(sizeof(EndBattleAIEB0012Controller_RequestRepairLeftArm) == 0x000014, "Wrong size on EndBattleAIEB0012Controller_RequestRepairLeftArm");
static_assert(offsetof(EndBattleAIEB0012Controller_RequestRepairLeftArm, charaPartsSpecName) == 0x000000, "Member 'EndBattleAIEB0012Controller_RequestRepairLeftArm::charaPartsSpecName' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0012Controller_RequestRepairLeftArm, meshLabelName) == 0x000008, "Member 'EndBattleAIEB0012Controller_RequestRepairLeftArm::meshLabelName' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0012Controller_RequestRepairLeftArm, ReturnValue) == 0x000010, "Member 'EndBattleAIEB0012Controller_RequestRepairLeftArm::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIEB0012Controller.RequestReplaceLeftArm
// 0x000C (0x000C - 0x0000)
struct EndBattleAIEB0012Controller_RequestReplaceLeftArm final
{
public:
	class FName                                   SocketName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAIEB0012Controller_RequestReplaceLeftArm) == 0x000004, "Wrong alignment on EndBattleAIEB0012Controller_RequestReplaceLeftArm");
static_assert(sizeof(EndBattleAIEB0012Controller_RequestReplaceLeftArm) == 0x00000C, "Wrong size on EndBattleAIEB0012Controller_RequestReplaceLeftArm");
static_assert(offsetof(EndBattleAIEB0012Controller_RequestReplaceLeftArm, SocketName) == 0x000000, "Member 'EndBattleAIEB0012Controller_RequestReplaceLeftArm::SocketName' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0012Controller_RequestReplaceLeftArm, ReturnValue) == 0x000008, "Member 'EndBattleAIEB0012Controller_RequestReplaceLeftArm::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIEB0012Controller.RequestSpawnLeftArm
// 0x0020 (0x0020 - 0x0000)
struct EndBattleAIEB0012Controller_RequestSpawnLeftArm final
{
public:
	class FName                                   CharaSpecName;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          spawnedInvisible;                                  // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          spawnedDisableCollision;                           // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndBattleEasySpawnEnableRagdollType          enableRagdollType;                                 // 0x000A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x1];                                        // 0x000B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         deadEventDelayTime;                                // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                hidePosition;                                      // 0x0010(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          recycle;                                           // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001D(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAIEB0012Controller_RequestSpawnLeftArm) == 0x000004, "Wrong alignment on EndBattleAIEB0012Controller_RequestSpawnLeftArm");
static_assert(sizeof(EndBattleAIEB0012Controller_RequestSpawnLeftArm) == 0x000020, "Wrong size on EndBattleAIEB0012Controller_RequestSpawnLeftArm");
static_assert(offsetof(EndBattleAIEB0012Controller_RequestSpawnLeftArm, CharaSpecName) == 0x000000, "Member 'EndBattleAIEB0012Controller_RequestSpawnLeftArm::CharaSpecName' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0012Controller_RequestSpawnLeftArm, spawnedInvisible) == 0x000008, "Member 'EndBattleAIEB0012Controller_RequestSpawnLeftArm::spawnedInvisible' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0012Controller_RequestSpawnLeftArm, spawnedDisableCollision) == 0x000009, "Member 'EndBattleAIEB0012Controller_RequestSpawnLeftArm::spawnedDisableCollision' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0012Controller_RequestSpawnLeftArm, enableRagdollType) == 0x00000A, "Member 'EndBattleAIEB0012Controller_RequestSpawnLeftArm::enableRagdollType' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0012Controller_RequestSpawnLeftArm, deadEventDelayTime) == 0x00000C, "Member 'EndBattleAIEB0012Controller_RequestSpawnLeftArm::deadEventDelayTime' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0012Controller_RequestSpawnLeftArm, hidePosition) == 0x000010, "Member 'EndBattleAIEB0012Controller_RequestSpawnLeftArm::hidePosition' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0012Controller_RequestSpawnLeftArm, recycle) == 0x00001C, "Member 'EndBattleAIEB0012Controller_RequestSpawnLeftArm::recycle' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0012Controller_RequestSpawnLeftArm, ReturnValue) == 0x00001D, "Member 'EndBattleAIEB0012Controller_RequestSpawnLeftArm::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIEB0012Controller.UpdateBehaviorRateFunc
// 0x000C (0x000C - 0x0000)
struct EndBattleAIEB0012Controller_UpdateBehaviorRateFunc final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         addRate;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIEB0012Controller_UpdateBehaviorRateFunc) == 0x000004, "Wrong alignment on EndBattleAIEB0012Controller_UpdateBehaviorRateFunc");
static_assert(sizeof(EndBattleAIEB0012Controller_UpdateBehaviorRateFunc) == 0x00000C, "Wrong size on EndBattleAIEB0012Controller_UpdateBehaviorRateFunc");
static_assert(offsetof(EndBattleAIEB0012Controller_UpdateBehaviorRateFunc, Name_0) == 0x000000, "Member 'EndBattleAIEB0012Controller_UpdateBehaviorRateFunc::Name_0' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0012Controller_UpdateBehaviorRateFunc, addRate) == 0x000008, "Member 'EndBattleAIEB0012Controller_UpdateBehaviorRateFunc::addRate' has a wrong offset!");

// Function EndGame.EndBattleAIEB0005Controller.BlowSunglass
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAIEB0005Controller_BlowSunglass final
{
public:
	class AEndCharacter*                          damageCauserChara;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIEB0005Controller_BlowSunglass) == 0x000008, "Wrong alignment on EndBattleAIEB0005Controller_BlowSunglass");
static_assert(sizeof(EndBattleAIEB0005Controller_BlowSunglass) == 0x000008, "Wrong size on EndBattleAIEB0005Controller_BlowSunglass");
static_assert(offsetof(EndBattleAIEB0005Controller_BlowSunglass, damageCauserChara) == 0x000000, "Member 'EndBattleAIEB0005Controller_BlowSunglass::damageCauserChara' has a wrong offset!");

// Function EndGame.EndBattleAIEB0005Controller.ChangeRideMode
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAIEB0005Controller_ChangeRideMode final
{
public:
	ERideMode                                     rideMode;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIEB0005Controller_ChangeRideMode) == 0x000001, "Wrong alignment on EndBattleAIEB0005Controller_ChangeRideMode");
static_assert(sizeof(EndBattleAIEB0005Controller_ChangeRideMode) == 0x000001, "Wrong size on EndBattleAIEB0005Controller_ChangeRideMode");
static_assert(offsetof(EndBattleAIEB0005Controller_ChangeRideMode, rideMode) == 0x000000, "Member 'EndBattleAIEB0005Controller_ChangeRideMode::rideMode' has a wrong offset!");

// Function EndGame.RangeSwitch4.RangeSwitch4
// 0x0030 (0x0030 - 0x0000)
struct RangeSwitch4_RangeSwitch4 final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Min1;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Max1;                                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Min2;                                              // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Max2;                                              // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Min3;                                              // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Max3;                                              // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Min4;                                              // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Max4;                                              // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ContainEqual;                                      // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FirstOnly;                                         // 0x0025(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26[0x2];                                       // 0x0026(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class URangeSwitch4*                          ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RangeSwitch4_RangeSwitch4) == 0x000008, "Wrong alignment on RangeSwitch4_RangeSwitch4");
static_assert(sizeof(RangeSwitch4_RangeSwitch4) == 0x000030, "Wrong size on RangeSwitch4_RangeSwitch4");
static_assert(offsetof(RangeSwitch4_RangeSwitch4, Value) == 0x000000, "Member 'RangeSwitch4_RangeSwitch4::Value' has a wrong offset!");
static_assert(offsetof(RangeSwitch4_RangeSwitch4, Min1) == 0x000004, "Member 'RangeSwitch4_RangeSwitch4::Min1' has a wrong offset!");
static_assert(offsetof(RangeSwitch4_RangeSwitch4, Max1) == 0x000008, "Member 'RangeSwitch4_RangeSwitch4::Max1' has a wrong offset!");
static_assert(offsetof(RangeSwitch4_RangeSwitch4, Min2) == 0x00000C, "Member 'RangeSwitch4_RangeSwitch4::Min2' has a wrong offset!");
static_assert(offsetof(RangeSwitch4_RangeSwitch4, Max2) == 0x000010, "Member 'RangeSwitch4_RangeSwitch4::Max2' has a wrong offset!");
static_assert(offsetof(RangeSwitch4_RangeSwitch4, Min3) == 0x000014, "Member 'RangeSwitch4_RangeSwitch4::Min3' has a wrong offset!");
static_assert(offsetof(RangeSwitch4_RangeSwitch4, Max3) == 0x000018, "Member 'RangeSwitch4_RangeSwitch4::Max3' has a wrong offset!");
static_assert(offsetof(RangeSwitch4_RangeSwitch4, Min4) == 0x00001C, "Member 'RangeSwitch4_RangeSwitch4::Min4' has a wrong offset!");
static_assert(offsetof(RangeSwitch4_RangeSwitch4, Max4) == 0x000020, "Member 'RangeSwitch4_RangeSwitch4::Max4' has a wrong offset!");
static_assert(offsetof(RangeSwitch4_RangeSwitch4, ContainEqual) == 0x000024, "Member 'RangeSwitch4_RangeSwitch4::ContainEqual' has a wrong offset!");
static_assert(offsetof(RangeSwitch4_RangeSwitch4, FirstOnly) == 0x000025, "Member 'RangeSwitch4_RangeSwitch4::FirstOnly' has a wrong offset!");
static_assert(offsetof(RangeSwitch4_RangeSwitch4, ReturnValue) == 0x000028, "Member 'RangeSwitch4_RangeSwitch4::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIEB0010Controller.OnEventEasySpawn
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAIEB0010Controller_OnEventEasySpawn final
{
public:
	class FName                                   keyword;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EventName;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIEB0010Controller_OnEventEasySpawn) == 0x000004, "Wrong alignment on EndBattleAIEB0010Controller_OnEventEasySpawn");
static_assert(sizeof(EndBattleAIEB0010Controller_OnEventEasySpawn) == 0x000010, "Wrong size on EndBattleAIEB0010Controller_OnEventEasySpawn");
static_assert(offsetof(EndBattleAIEB0010Controller_OnEventEasySpawn, keyword) == 0x000000, "Member 'EndBattleAIEB0010Controller_OnEventEasySpawn::keyword' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0010Controller_OnEventEasySpawn, EventName) == 0x000008, "Member 'EndBattleAIEB0010Controller_OnEventEasySpawn::EventName' has a wrong offset!");

// Function EndGame.EndBattleAIEB0010Controller.RequestBreakTentacle
// 0x000C (0x000C - 0x0000)
struct EndBattleAIEB0010Controller_RequestBreakTentacle final
{
public:
	class FName                                   keyword;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAIEB0010Controller_RequestBreakTentacle) == 0x000004, "Wrong alignment on EndBattleAIEB0010Controller_RequestBreakTentacle");
static_assert(sizeof(EndBattleAIEB0010Controller_RequestBreakTentacle) == 0x00000C, "Wrong size on EndBattleAIEB0010Controller_RequestBreakTentacle");
static_assert(offsetof(EndBattleAIEB0010Controller_RequestBreakTentacle, keyword) == 0x000000, "Member 'EndBattleAIEB0010Controller_RequestBreakTentacle::keyword' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0010Controller_RequestBreakTentacle, ReturnValue) == 0x000008, "Member 'EndBattleAIEB0010Controller_RequestBreakTentacle::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIEB0010Controller.RequestSpawnTentacle
// 0x0030 (0x0030 - 0x0000)
struct EndBattleAIEB0010Controller_RequestSpawnTentacle final
{
public:
	class FName                                   keyword;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CharaSpecName;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SocketName;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          spawnedInvisible;                                  // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndBattleEasySpawnEnableRagdollType          enableRagdollType;                                 // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         deadEventDelayTime;                                // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                hidePosition;                                      // 0x0020(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x002C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAIEB0010Controller_RequestSpawnTentacle) == 0x000004, "Wrong alignment on EndBattleAIEB0010Controller_RequestSpawnTentacle");
static_assert(sizeof(EndBattleAIEB0010Controller_RequestSpawnTentacle) == 0x000030, "Wrong size on EndBattleAIEB0010Controller_RequestSpawnTentacle");
static_assert(offsetof(EndBattleAIEB0010Controller_RequestSpawnTentacle, keyword) == 0x000000, "Member 'EndBattleAIEB0010Controller_RequestSpawnTentacle::keyword' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0010Controller_RequestSpawnTentacle, CharaSpecName) == 0x000008, "Member 'EndBattleAIEB0010Controller_RequestSpawnTentacle::CharaSpecName' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0010Controller_RequestSpawnTentacle, SocketName) == 0x000010, "Member 'EndBattleAIEB0010Controller_RequestSpawnTentacle::SocketName' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0010Controller_RequestSpawnTentacle, spawnedInvisible) == 0x000018, "Member 'EndBattleAIEB0010Controller_RequestSpawnTentacle::spawnedInvisible' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0010Controller_RequestSpawnTentacle, enableRagdollType) == 0x000019, "Member 'EndBattleAIEB0010Controller_RequestSpawnTentacle::enableRagdollType' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0010Controller_RequestSpawnTentacle, deadEventDelayTime) == 0x00001C, "Member 'EndBattleAIEB0010Controller_RequestSpawnTentacle::deadEventDelayTime' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0010Controller_RequestSpawnTentacle, hidePosition) == 0x000020, "Member 'EndBattleAIEB0010Controller_RequestSpawnTentacle::hidePosition' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0010Controller_RequestSpawnTentacle, ReturnValue) == 0x00002C, "Member 'EndBattleAIEB0010Controller_RequestSpawnTentacle::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIEB0010Controller.RestrictBattleFieldByDGBoss
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAIEB0010Controller_RestrictBattleFieldByDGBoss final
{
public:
	class FName                                   ExclusionID;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIEB0010Controller_RestrictBattleFieldByDGBoss) == 0x000004, "Wrong alignment on EndBattleAIEB0010Controller_RestrictBattleFieldByDGBoss");
static_assert(sizeof(EndBattleAIEB0010Controller_RestrictBattleFieldByDGBoss) == 0x000008, "Wrong size on EndBattleAIEB0010Controller_RestrictBattleFieldByDGBoss");
static_assert(offsetof(EndBattleAIEB0010Controller_RestrictBattleFieldByDGBoss, ExclusionID) == 0x000000, "Member 'EndBattleAIEB0010Controller_RestrictBattleFieldByDGBoss::ExclusionID' has a wrong offset!");

// Function EndGame.EndBattleAIEB0026Controller.OnEasySpawnEvent
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAIEB0026Controller_OnEasySpawnEvent final
{
public:
	class FName                                   EventName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIEB0026Controller_OnEasySpawnEvent) == 0x000004, "Wrong alignment on EndBattleAIEB0026Controller_OnEasySpawnEvent");
static_assert(sizeof(EndBattleAIEB0026Controller_OnEasySpawnEvent) == 0x000008, "Wrong size on EndBattleAIEB0026Controller_OnEasySpawnEvent");
static_assert(offsetof(EndBattleAIEB0026Controller_OnEasySpawnEvent, EventName) == 0x000000, "Member 'EndBattleAIEB0026Controller_OnEasySpawnEvent::EventName' has a wrong offset!");

// Function EndGame.EndBattleAIEB0026Controller.OnEventEasySpawn
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAIEB0026Controller_OnEventEasySpawn final
{
public:
	class FName                                   keyword;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EventName;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIEB0026Controller_OnEventEasySpawn) == 0x000004, "Wrong alignment on EndBattleAIEB0026Controller_OnEventEasySpawn");
static_assert(sizeof(EndBattleAIEB0026Controller_OnEventEasySpawn) == 0x000010, "Wrong size on EndBattleAIEB0026Controller_OnEventEasySpawn");
static_assert(offsetof(EndBattleAIEB0026Controller_OnEventEasySpawn, keyword) == 0x000000, "Member 'EndBattleAIEB0026Controller_OnEventEasySpawn::keyword' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0026Controller_OnEventEasySpawn, EventName) == 0x000008, "Member 'EndBattleAIEB0026Controller_OnEventEasySpawn::EventName' has a wrong offset!");

// Function EndGame.EndBattleAIEB0026Controller.RequestBreakTentacle
// 0x000C (0x000C - 0x0000)
struct EndBattleAIEB0026Controller_RequestBreakTentacle final
{
public:
	class FName                                   keyword;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAIEB0026Controller_RequestBreakTentacle) == 0x000004, "Wrong alignment on EndBattleAIEB0026Controller_RequestBreakTentacle");
static_assert(sizeof(EndBattleAIEB0026Controller_RequestBreakTentacle) == 0x00000C, "Wrong size on EndBattleAIEB0026Controller_RequestBreakTentacle");
static_assert(offsetof(EndBattleAIEB0026Controller_RequestBreakTentacle, keyword) == 0x000000, "Member 'EndBattleAIEB0026Controller_RequestBreakTentacle::keyword' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0026Controller_RequestBreakTentacle, ReturnValue) == 0x000008, "Member 'EndBattleAIEB0026Controller_RequestBreakTentacle::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIEB0026Controller.RequestKillTip
// 0x0002 (0x0002 - 0x0000)
struct EndBattleAIEB0026Controller_RequestKillTip final
{
public:
	bool                                          forceDestroy;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIEB0026Controller_RequestKillTip) == 0x000001, "Wrong alignment on EndBattleAIEB0026Controller_RequestKillTip");
static_assert(sizeof(EndBattleAIEB0026Controller_RequestKillTip) == 0x000002, "Wrong size on EndBattleAIEB0026Controller_RequestKillTip");
static_assert(offsetof(EndBattleAIEB0026Controller_RequestKillTip, forceDestroy) == 0x000000, "Member 'EndBattleAIEB0026Controller_RequestKillTip::forceDestroy' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0026Controller_RequestKillTip, ReturnValue) == 0x000001, "Member 'EndBattleAIEB0026Controller_RequestKillTip::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIEB0026Controller.RequestReplaceTip
// 0x000C (0x000C - 0x0000)
struct EndBattleAIEB0026Controller_RequestReplaceTip final
{
public:
	class FName                                   SocketName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAIEB0026Controller_RequestReplaceTip) == 0x000004, "Wrong alignment on EndBattleAIEB0026Controller_RequestReplaceTip");
static_assert(sizeof(EndBattleAIEB0026Controller_RequestReplaceTip) == 0x00000C, "Wrong size on EndBattleAIEB0026Controller_RequestReplaceTip");
static_assert(offsetof(EndBattleAIEB0026Controller_RequestReplaceTip, SocketName) == 0x000000, "Member 'EndBattleAIEB0026Controller_RequestReplaceTip::SocketName' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0026Controller_RequestReplaceTip, ReturnValue) == 0x000008, "Member 'EndBattleAIEB0026Controller_RequestReplaceTip::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIEB0026Controller.RequestSpawnTentacle
// 0x0030 (0x0030 - 0x0000)
struct EndBattleAIEB0026Controller_RequestSpawnTentacle final
{
public:
	class FName                                   keyword;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CharaSpecName;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SocketName;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          spawnedInvisible;                                  // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndBattleEasySpawnEnableRagdollType          enableRagdollType;                                 // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         deadEventDelayTime;                                // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                hidePosition;                                      // 0x0020(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x002C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAIEB0026Controller_RequestSpawnTentacle) == 0x000004, "Wrong alignment on EndBattleAIEB0026Controller_RequestSpawnTentacle");
static_assert(sizeof(EndBattleAIEB0026Controller_RequestSpawnTentacle) == 0x000030, "Wrong size on EndBattleAIEB0026Controller_RequestSpawnTentacle");
static_assert(offsetof(EndBattleAIEB0026Controller_RequestSpawnTentacle, keyword) == 0x000000, "Member 'EndBattleAIEB0026Controller_RequestSpawnTentacle::keyword' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0026Controller_RequestSpawnTentacle, CharaSpecName) == 0x000008, "Member 'EndBattleAIEB0026Controller_RequestSpawnTentacle::CharaSpecName' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0026Controller_RequestSpawnTentacle, SocketName) == 0x000010, "Member 'EndBattleAIEB0026Controller_RequestSpawnTentacle::SocketName' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0026Controller_RequestSpawnTentacle, spawnedInvisible) == 0x000018, "Member 'EndBattleAIEB0026Controller_RequestSpawnTentacle::spawnedInvisible' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0026Controller_RequestSpawnTentacle, enableRagdollType) == 0x000019, "Member 'EndBattleAIEB0026Controller_RequestSpawnTentacle::enableRagdollType' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0026Controller_RequestSpawnTentacle, deadEventDelayTime) == 0x00001C, "Member 'EndBattleAIEB0026Controller_RequestSpawnTentacle::deadEventDelayTime' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0026Controller_RequestSpawnTentacle, hidePosition) == 0x000020, "Member 'EndBattleAIEB0026Controller_RequestSpawnTentacle::hidePosition' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0026Controller_RequestSpawnTentacle, ReturnValue) == 0x00002C, "Member 'EndBattleAIEB0026Controller_RequestSpawnTentacle::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIEB0026Controller.RequestSpawnTip
// 0x0020 (0x0020 - 0x0000)
struct EndBattleAIEB0026Controller_RequestSpawnTip final
{
public:
	class FName                                   CharaSpecName;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          spawnedInvisible;                                  // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          spawnedDisableCollision;                           // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndBattleEasySpawnEnableRagdollType          enableRagdollType;                                 // 0x000A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x1];                                        // 0x000B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         destroyTimer;                                      // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                hidePosition;                                      // 0x0010(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAIEB0026Controller_RequestSpawnTip) == 0x000004, "Wrong alignment on EndBattleAIEB0026Controller_RequestSpawnTip");
static_assert(sizeof(EndBattleAIEB0026Controller_RequestSpawnTip) == 0x000020, "Wrong size on EndBattleAIEB0026Controller_RequestSpawnTip");
static_assert(offsetof(EndBattleAIEB0026Controller_RequestSpawnTip, CharaSpecName) == 0x000000, "Member 'EndBattleAIEB0026Controller_RequestSpawnTip::CharaSpecName' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0026Controller_RequestSpawnTip, spawnedInvisible) == 0x000008, "Member 'EndBattleAIEB0026Controller_RequestSpawnTip::spawnedInvisible' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0026Controller_RequestSpawnTip, spawnedDisableCollision) == 0x000009, "Member 'EndBattleAIEB0026Controller_RequestSpawnTip::spawnedDisableCollision' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0026Controller_RequestSpawnTip, enableRagdollType) == 0x00000A, "Member 'EndBattleAIEB0026Controller_RequestSpawnTip::enableRagdollType' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0026Controller_RequestSpawnTip, destroyTimer) == 0x00000C, "Member 'EndBattleAIEB0026Controller_RequestSpawnTip::destroyTimer' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0026Controller_RequestSpawnTip, hidePosition) == 0x000010, "Member 'EndBattleAIEB0026Controller_RequestSpawnTip::hidePosition' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0026Controller_RequestSpawnTip, ReturnValue) == 0x00001C, "Member 'EndBattleAIEB0026Controller_RequestSpawnTip::ReturnValue' has a wrong offset!");

// Function EndGame.EndMainMateriaChangeSelectWindow.OnEndEquipChangeEquipCellSetup
// 0x0010 (0x0010 - 0x0000)
struct EndMainMateriaChangeSelectWindow_OnEndEquipChangeEquipCellSetup final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMainMateriaChangeSelectWindow_OnEndEquipChangeEquipCellSetup) == 0x000008, "Wrong alignment on EndMainMateriaChangeSelectWindow_OnEndEquipChangeEquipCellSetup");
static_assert(sizeof(EndMainMateriaChangeSelectWindow_OnEndEquipChangeEquipCellSetup) == 0x000010, "Wrong size on EndMainMateriaChangeSelectWindow_OnEndEquipChangeEquipCellSetup");
static_assert(offsetof(EndMainMateriaChangeSelectWindow_OnEndEquipChangeEquipCellSetup, ItemWidget) == 0x000000, "Member 'EndMainMateriaChangeSelectWindow_OnEndEquipChangeEquipCellSetup::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndMainMateriaChangeSelectWindow_OnEndEquipChangeEquipCellSetup, ItemIndex) == 0x000008, "Member 'EndMainMateriaChangeSelectWindow_OnEndEquipChangeEquipCellSetup::ItemIndex' has a wrong offset!");

// Function EndGame.EndMainMateriaChangeSelectWindow.OnEndEquipChangeMateriaCellSetup
// 0x0010 (0x0010 - 0x0000)
struct EndMainMateriaChangeSelectWindow_OnEndEquipChangeMateriaCellSetup final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMainMateriaChangeSelectWindow_OnEndEquipChangeMateriaCellSetup) == 0x000008, "Wrong alignment on EndMainMateriaChangeSelectWindow_OnEndEquipChangeMateriaCellSetup");
static_assert(sizeof(EndMainMateriaChangeSelectWindow_OnEndEquipChangeMateriaCellSetup) == 0x000010, "Wrong size on EndMainMateriaChangeSelectWindow_OnEndEquipChangeMateriaCellSetup");
static_assert(offsetof(EndMainMateriaChangeSelectWindow_OnEndEquipChangeMateriaCellSetup, ItemWidget) == 0x000000, "Member 'EndMainMateriaChangeSelectWindow_OnEndEquipChangeMateriaCellSetup::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndMainMateriaChangeSelectWindow_OnEndEquipChangeMateriaCellSetup, ItemIndex) == 0x000008, "Member 'EndMainMateriaChangeSelectWindow_OnEndEquipChangeMateriaCellSetup::ItemIndex' has a wrong offset!");

// Function EndGame.EndMainMateriaChangeSelectWindow.OnEndEquipChangeWeaponCellSetup
// 0x0010 (0x0010 - 0x0000)
struct EndMainMateriaChangeSelectWindow_OnEndEquipChangeWeaponCellSetup final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMainMateriaChangeSelectWindow_OnEndEquipChangeWeaponCellSetup) == 0x000008, "Wrong alignment on EndMainMateriaChangeSelectWindow_OnEndEquipChangeWeaponCellSetup");
static_assert(sizeof(EndMainMateriaChangeSelectWindow_OnEndEquipChangeWeaponCellSetup) == 0x000010, "Wrong size on EndMainMateriaChangeSelectWindow_OnEndEquipChangeWeaponCellSetup");
static_assert(offsetof(EndMainMateriaChangeSelectWindow_OnEndEquipChangeWeaponCellSetup, ItemWidget) == 0x000000, "Member 'EndMainMateriaChangeSelectWindow_OnEndEquipChangeWeaponCellSetup::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndMainMateriaChangeSelectWindow_OnEndEquipChangeWeaponCellSetup, ItemIndex) == 0x000008, "Member 'EndMainMateriaChangeSelectWindow_OnEndEquipChangeWeaponCellSetup::ItemIndex' has a wrong offset!");

// Function EndGame.EndBattleAIEB0014Controller.GetLayoutDistanceStatus
// 0x0014 (0x0014 - 0x0000)
struct EndBattleAIEB0014Controller_GetLayoutDistanceStatus final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InMax;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InMin;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIEB0014Controller_GetLayoutDistanceStatus) == 0x000004, "Wrong alignment on EndBattleAIEB0014Controller_GetLayoutDistanceStatus");
static_assert(sizeof(EndBattleAIEB0014Controller_GetLayoutDistanceStatus) == 0x000014, "Wrong size on EndBattleAIEB0014Controller_GetLayoutDistanceStatus");
static_assert(offsetof(EndBattleAIEB0014Controller_GetLayoutDistanceStatus, InName) == 0x000000, "Member 'EndBattleAIEB0014Controller_GetLayoutDistanceStatus::InName' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0014Controller_GetLayoutDistanceStatus, InMax) == 0x000008, "Member 'EndBattleAIEB0014Controller_GetLayoutDistanceStatus::InMax' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0014Controller_GetLayoutDistanceStatus, InMin) == 0x00000C, "Member 'EndBattleAIEB0014Controller_GetLayoutDistanceStatus::InMin' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0014Controller_GetLayoutDistanceStatus, ReturnValue) == 0x000010, "Member 'EndBattleAIEB0014Controller_GetLayoutDistanceStatus::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIEB0014Controller.OnCanUseParts
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAIEB0014Controller_OnCanUseParts final
{
public:
	class FName                                   keyword;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIEB0014Controller_OnCanUseParts) == 0x000004, "Wrong alignment on EndBattleAIEB0014Controller_OnCanUseParts");
static_assert(sizeof(EndBattleAIEB0014Controller_OnCanUseParts) == 0x000008, "Wrong size on EndBattleAIEB0014Controller_OnCanUseParts");
static_assert(offsetof(EndBattleAIEB0014Controller_OnCanUseParts, keyword) == 0x000000, "Member 'EndBattleAIEB0014Controller_OnCanUseParts::keyword' has a wrong offset!");

// Function EndGame.EndBattleAIEB0014Controller.OnDiedParts
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAIEB0014Controller_OnDiedParts final
{
public:
	class FName                                   keyword;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIEB0014Controller_OnDiedParts) == 0x000004, "Wrong alignment on EndBattleAIEB0014Controller_OnDiedParts");
static_assert(sizeof(EndBattleAIEB0014Controller_OnDiedParts) == 0x000008, "Wrong size on EndBattleAIEB0014Controller_OnDiedParts");
static_assert(offsetof(EndBattleAIEB0014Controller_OnDiedParts, keyword) == 0x000000, "Member 'EndBattleAIEB0014Controller_OnDiedParts::keyword' has a wrong offset!");

// Function EndGame.EndBattleAIEB0014Controller.OnEventEasySpawn
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAIEB0014Controller_OnEventEasySpawn final
{
public:
	class FName                                   keyword;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EventName;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIEB0014Controller_OnEventEasySpawn) == 0x000004, "Wrong alignment on EndBattleAIEB0014Controller_OnEventEasySpawn");
static_assert(sizeof(EndBattleAIEB0014Controller_OnEventEasySpawn) == 0x000010, "Wrong size on EndBattleAIEB0014Controller_OnEventEasySpawn");
static_assert(offsetof(EndBattleAIEB0014Controller_OnEventEasySpawn, keyword) == 0x000000, "Member 'EndBattleAIEB0014Controller_OnEventEasySpawn::keyword' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0014Controller_OnEventEasySpawn, EventName) == 0x000008, "Member 'EndBattleAIEB0014Controller_OnEventEasySpawn::EventName' has a wrong offset!");

// Function EndGame.EndBattleAIEB0014Controller.RequestBreakTentacle
// 0x000C (0x000C - 0x0000)
struct EndBattleAIEB0014Controller_RequestBreakTentacle final
{
public:
	class FName                                   keyword;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAIEB0014Controller_RequestBreakTentacle) == 0x000004, "Wrong alignment on EndBattleAIEB0014Controller_RequestBreakTentacle");
static_assert(sizeof(EndBattleAIEB0014Controller_RequestBreakTentacle) == 0x00000C, "Wrong size on EndBattleAIEB0014Controller_RequestBreakTentacle");
static_assert(offsetof(EndBattleAIEB0014Controller_RequestBreakTentacle, keyword) == 0x000000, "Member 'EndBattleAIEB0014Controller_RequestBreakTentacle::keyword' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0014Controller_RequestBreakTentacle, ReturnValue) == 0x000008, "Member 'EndBattleAIEB0014Controller_RequestBreakTentacle::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIEB0014Controller.RequestPartsKill
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAIEB0014Controller_RequestPartsKill final
{
public:
	class FName                                   keyword;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SocketName;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIEB0014Controller_RequestPartsKill) == 0x000004, "Wrong alignment on EndBattleAIEB0014Controller_RequestPartsKill");
static_assert(sizeof(EndBattleAIEB0014Controller_RequestPartsKill) == 0x000010, "Wrong size on EndBattleAIEB0014Controller_RequestPartsKill");
static_assert(offsetof(EndBattleAIEB0014Controller_RequestPartsKill, keyword) == 0x000000, "Member 'EndBattleAIEB0014Controller_RequestPartsKill::keyword' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0014Controller_RequestPartsKill, SocketName) == 0x000008, "Member 'EndBattleAIEB0014Controller_RequestPartsKill::SocketName' has a wrong offset!");

// Function EndGame.EndBattleAIEB0014Controller.RequestPartsSpawn
// 0x000C (0x000C - 0x0000)
struct EndBattleAIEB0014Controller_RequestPartsSpawn final
{
public:
	class FName                                   keyword;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIEB0014Controller_RequestPartsSpawn) == 0x000004, "Wrong alignment on EndBattleAIEB0014Controller_RequestPartsSpawn");
static_assert(sizeof(EndBattleAIEB0014Controller_RequestPartsSpawn) == 0x00000C, "Wrong size on EndBattleAIEB0014Controller_RequestPartsSpawn");
static_assert(offsetof(EndBattleAIEB0014Controller_RequestPartsSpawn, keyword) == 0x000000, "Member 'EndBattleAIEB0014Controller_RequestPartsSpawn::keyword' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0014Controller_RequestPartsSpawn, ReturnValue) == 0x000008, "Member 'EndBattleAIEB0014Controller_RequestPartsSpawn::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIEB0014Controller.RequestSpawnTentacle
// 0x0030 (0x0030 - 0x0000)
struct EndBattleAIEB0014Controller_RequestSpawnTentacle final
{
public:
	class FName                                   keyword;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CharaSpecName;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SocketName;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          spawnedInvisible;                                  // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndBattleEasySpawnEnableRagdollType          enableRagdollType;                                 // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         deadEventDelayTime;                                // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                hidePosition;                                      // 0x0020(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x002C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAIEB0014Controller_RequestSpawnTentacle) == 0x000004, "Wrong alignment on EndBattleAIEB0014Controller_RequestSpawnTentacle");
static_assert(sizeof(EndBattleAIEB0014Controller_RequestSpawnTentacle) == 0x000030, "Wrong size on EndBattleAIEB0014Controller_RequestSpawnTentacle");
static_assert(offsetof(EndBattleAIEB0014Controller_RequestSpawnTentacle, keyword) == 0x000000, "Member 'EndBattleAIEB0014Controller_RequestSpawnTentacle::keyword' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0014Controller_RequestSpawnTentacle, CharaSpecName) == 0x000008, "Member 'EndBattleAIEB0014Controller_RequestSpawnTentacle::CharaSpecName' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0014Controller_RequestSpawnTentacle, SocketName) == 0x000010, "Member 'EndBattleAIEB0014Controller_RequestSpawnTentacle::SocketName' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0014Controller_RequestSpawnTentacle, spawnedInvisible) == 0x000018, "Member 'EndBattleAIEB0014Controller_RequestSpawnTentacle::spawnedInvisible' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0014Controller_RequestSpawnTentacle, enableRagdollType) == 0x000019, "Member 'EndBattleAIEB0014Controller_RequestSpawnTentacle::enableRagdollType' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0014Controller_RequestSpawnTentacle, deadEventDelayTime) == 0x00001C, "Member 'EndBattleAIEB0014Controller_RequestSpawnTentacle::deadEventDelayTime' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0014Controller_RequestSpawnTentacle, hidePosition) == 0x000020, "Member 'EndBattleAIEB0014Controller_RequestSpawnTentacle::hidePosition' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0014Controller_RequestSpawnTentacle, ReturnValue) == 0x00002C, "Member 'EndBattleAIEB0014Controller_RequestSpawnTentacle::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIEB0014Controller.RequestUniqueRotate
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAIEB0014Controller_RequestUniqueRotate final
{
public:
	float                                         Yaw;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         dulation;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIEB0014Controller_RequestUniqueRotate) == 0x000004, "Wrong alignment on EndBattleAIEB0014Controller_RequestUniqueRotate");
static_assert(sizeof(EndBattleAIEB0014Controller_RequestUniqueRotate) == 0x000008, "Wrong size on EndBattleAIEB0014Controller_RequestUniqueRotate");
static_assert(offsetof(EndBattleAIEB0014Controller_RequestUniqueRotate, Yaw) == 0x000000, "Member 'EndBattleAIEB0014Controller_RequestUniqueRotate::Yaw' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0014Controller_RequestUniqueRotate, dulation) == 0x000004, "Member 'EndBattleAIEB0014Controller_RequestUniqueRotate::dulation' has a wrong offset!");

// Function EndGame.EndBattleAIEB0007Controller.GetSprinkleWaterInAnglePointNames
// 0x0030 (0x0030 - 0x0000)
struct EndBattleAIEB0007Controller_GetSprinkleWaterInAnglePointNames final
{
public:
	TArray<class FName>                           nodeNames;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         rangeAngle;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         rangeDistance;                                     // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           outNames;                                          // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   outNearName;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIEB0007Controller_GetSprinkleWaterInAnglePointNames) == 0x000008, "Wrong alignment on EndBattleAIEB0007Controller_GetSprinkleWaterInAnglePointNames");
static_assert(sizeof(EndBattleAIEB0007Controller_GetSprinkleWaterInAnglePointNames) == 0x000030, "Wrong size on EndBattleAIEB0007Controller_GetSprinkleWaterInAnglePointNames");
static_assert(offsetof(EndBattleAIEB0007Controller_GetSprinkleWaterInAnglePointNames, nodeNames) == 0x000000, "Member 'EndBattleAIEB0007Controller_GetSprinkleWaterInAnglePointNames::nodeNames' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0007Controller_GetSprinkleWaterInAnglePointNames, rangeAngle) == 0x000010, "Member 'EndBattleAIEB0007Controller_GetSprinkleWaterInAnglePointNames::rangeAngle' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0007Controller_GetSprinkleWaterInAnglePointNames, rangeDistance) == 0x000014, "Member 'EndBattleAIEB0007Controller_GetSprinkleWaterInAnglePointNames::rangeDistance' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0007Controller_GetSprinkleWaterInAnglePointNames, outNames) == 0x000018, "Member 'EndBattleAIEB0007Controller_GetSprinkleWaterInAnglePointNames::outNames' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0007Controller_GetSprinkleWaterInAnglePointNames, outNearName) == 0x000028, "Member 'EndBattleAIEB0007Controller_GetSprinkleWaterInAnglePointNames::outNearName' has a wrong offset!");

// Function EndGame.EndBattleAIEB0007Controller.GetSprinkleWaterInRangePointNames
// 0x0030 (0x0030 - 0x0000)
struct EndBattleAIEB0007Controller_GetSprinkleWaterInRangePointNames final
{
public:
	TArray<class FName>                           nodeNames;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         RangeRadius;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         rangeDistance;                                     // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           outNames;                                          // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   outNearName;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIEB0007Controller_GetSprinkleWaterInRangePointNames) == 0x000008, "Wrong alignment on EndBattleAIEB0007Controller_GetSprinkleWaterInRangePointNames");
static_assert(sizeof(EndBattleAIEB0007Controller_GetSprinkleWaterInRangePointNames) == 0x000030, "Wrong size on EndBattleAIEB0007Controller_GetSprinkleWaterInRangePointNames");
static_assert(offsetof(EndBattleAIEB0007Controller_GetSprinkleWaterInRangePointNames, nodeNames) == 0x000000, "Member 'EndBattleAIEB0007Controller_GetSprinkleWaterInRangePointNames::nodeNames' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0007Controller_GetSprinkleWaterInRangePointNames, RangeRadius) == 0x000010, "Member 'EndBattleAIEB0007Controller_GetSprinkleWaterInRangePointNames::RangeRadius' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0007Controller_GetSprinkleWaterInRangePointNames, rangeDistance) == 0x000014, "Member 'EndBattleAIEB0007Controller_GetSprinkleWaterInRangePointNames::rangeDistance' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0007Controller_GetSprinkleWaterInRangePointNames, outNames) == 0x000018, "Member 'EndBattleAIEB0007Controller_GetSprinkleWaterInRangePointNames::outNames' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0007Controller_GetSprinkleWaterInRangePointNames, outNearName) == 0x000028, "Member 'EndBattleAIEB0007Controller_GetSprinkleWaterInRangePointNames::outNearName' has a wrong offset!");

// Function EndGame.EndBattleAIEB0007Controller.GetSprinkleWaterInRangeTargetCharacter
// 0x0030 (0x0030 - 0x0000)
struct EndBattleAIEB0007Controller_GetSprinkleWaterInRangeTargetCharacter final
{
public:
	class FName                                   NodeName;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<EPlayerType>                           playerTypes;                                       // 0x0008(0x0010)(ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         RangeRadius;                                       // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AEndCharacter*>                  outCharacters;                                     // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIEB0007Controller_GetSprinkleWaterInRangeTargetCharacter) == 0x000008, "Wrong alignment on EndBattleAIEB0007Controller_GetSprinkleWaterInRangeTargetCharacter");
static_assert(sizeof(EndBattleAIEB0007Controller_GetSprinkleWaterInRangeTargetCharacter) == 0x000030, "Wrong size on EndBattleAIEB0007Controller_GetSprinkleWaterInRangeTargetCharacter");
static_assert(offsetof(EndBattleAIEB0007Controller_GetSprinkleWaterInRangeTargetCharacter, NodeName) == 0x000000, "Member 'EndBattleAIEB0007Controller_GetSprinkleWaterInRangeTargetCharacter::NodeName' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0007Controller_GetSprinkleWaterInRangeTargetCharacter, playerTypes) == 0x000008, "Member 'EndBattleAIEB0007Controller_GetSprinkleWaterInRangeTargetCharacter::playerTypes' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0007Controller_GetSprinkleWaterInRangeTargetCharacter, RangeRadius) == 0x000018, "Member 'EndBattleAIEB0007Controller_GetSprinkleWaterInRangeTargetCharacter::RangeRadius' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0007Controller_GetSprinkleWaterInRangeTargetCharacter, outCharacters) == 0x000020, "Member 'EndBattleAIEB0007Controller_GetSprinkleWaterInRangeTargetCharacter::outCharacters' has a wrong offset!");

// Function EndGame.EndBattleAIEB0007Controller.RequestSpawnBrokenTail
// 0x0020 (0x0020 - 0x0000)
struct EndBattleAIEB0007Controller_RequestSpawnBrokenTail final
{
public:
	class FName                                   CharaSpecName;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                hidePosition;                                      // 0x0008(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          spawnedInvisible;                                  // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SocketName;                                        // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIEB0007Controller_RequestSpawnBrokenTail) == 0x000004, "Wrong alignment on EndBattleAIEB0007Controller_RequestSpawnBrokenTail");
static_assert(sizeof(EndBattleAIEB0007Controller_RequestSpawnBrokenTail) == 0x000020, "Wrong size on EndBattleAIEB0007Controller_RequestSpawnBrokenTail");
static_assert(offsetof(EndBattleAIEB0007Controller_RequestSpawnBrokenTail, CharaSpecName) == 0x000000, "Member 'EndBattleAIEB0007Controller_RequestSpawnBrokenTail::CharaSpecName' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0007Controller_RequestSpawnBrokenTail, hidePosition) == 0x000008, "Member 'EndBattleAIEB0007Controller_RequestSpawnBrokenTail::hidePosition' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0007Controller_RequestSpawnBrokenTail, spawnedInvisible) == 0x000014, "Member 'EndBattleAIEB0007Controller_RequestSpawnBrokenTail::spawnedInvisible' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0007Controller_RequestSpawnBrokenTail, SocketName) == 0x000018, "Member 'EndBattleAIEB0007Controller_RequestSpawnBrokenTail::SocketName' has a wrong offset!");

// Function EndGame.EndBattleAIEB0007Controller.ToGraviticJump
// 0x0034 (0x0034 - 0x0000)
struct EndBattleAIEB0007Controller_ToGraviticJump final
{
public:
	struct FVector                                landingLocation;                                   // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Height;                                            // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PeakBias;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         turningDuration;                                   // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                UpVector;                                          // 0x0018(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                forwardVector;                                     // 0x0024(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bToTerrain;                                        // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAIEB0007Controller_ToGraviticJump) == 0x000004, "Wrong alignment on EndBattleAIEB0007Controller_ToGraviticJump");
static_assert(sizeof(EndBattleAIEB0007Controller_ToGraviticJump) == 0x000034, "Wrong size on EndBattleAIEB0007Controller_ToGraviticJump");
static_assert(offsetof(EndBattleAIEB0007Controller_ToGraviticJump, landingLocation) == 0x000000, "Member 'EndBattleAIEB0007Controller_ToGraviticJump::landingLocation' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0007Controller_ToGraviticJump, Height) == 0x00000C, "Member 'EndBattleAIEB0007Controller_ToGraviticJump::Height' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0007Controller_ToGraviticJump, PeakBias) == 0x000010, "Member 'EndBattleAIEB0007Controller_ToGraviticJump::PeakBias' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0007Controller_ToGraviticJump, turningDuration) == 0x000014, "Member 'EndBattleAIEB0007Controller_ToGraviticJump::turningDuration' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0007Controller_ToGraviticJump, UpVector) == 0x000018, "Member 'EndBattleAIEB0007Controller_ToGraviticJump::UpVector' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0007Controller_ToGraviticJump, forwardVector) == 0x000024, "Member 'EndBattleAIEB0007Controller_ToGraviticJump::forwardVector' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0007Controller_ToGraviticJump, bToTerrain) == 0x000030, "Member 'EndBattleAIEB0007Controller_ToGraviticJump::bToTerrain' has a wrong offset!");

// Function EndGame.EndBattleAILineWarpController.OnEventLineWarp
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAILineWarpController_OnEventLineWarp final
{
public:
	class FName                                   Message;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAILineWarpController_OnEventLineWarp) == 0x000004, "Wrong alignment on EndBattleAILineWarpController_OnEventLineWarp");
static_assert(sizeof(EndBattleAILineWarpController_OnEventLineWarp) == 0x000008, "Wrong size on EndBattleAILineWarpController_OnEventLineWarp");
static_assert(offsetof(EndBattleAILineWarpController_OnEventLineWarp, Message) == 0x000000, "Member 'EndBattleAILineWarpController_OnEventLineWarp::Message' has a wrong offset!");

// Function EndGame.EndBattleAILineWarpController.RequestLineWarp
// 0x006C (0x006C - 0x0000)
struct EndBattleAILineWarpController_RequestLineWarp final
{
public:
	ELineWarpType                                 InLineWarpType;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InDivisionNum;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InStartMotion;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InLoopMotion;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InEndMotion;                                       // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InWaitTime;                                        // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InEndLocation;                                     // 0x0024(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InRandomOffsetRange;                               // 0x0030(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InNearDistance;                                    // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InLeaveDistance;                                   // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InPointWaitTime;                                   // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InTrailVelocityPower;                              // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InHeightOffsetTable;                               // 0x004C(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELineWarpCalcPattern                          InCalcPattern;                                     // 0x0058(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                InPatternParameter;                                // 0x005C(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0068(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAILineWarpController_RequestLineWarp) == 0x000004, "Wrong alignment on EndBattleAILineWarpController_RequestLineWarp");
static_assert(sizeof(EndBattleAILineWarpController_RequestLineWarp) == 0x00006C, "Wrong size on EndBattleAILineWarpController_RequestLineWarp");
static_assert(offsetof(EndBattleAILineWarpController_RequestLineWarp, InLineWarpType) == 0x000000, "Member 'EndBattleAILineWarpController_RequestLineWarp::InLineWarpType' has a wrong offset!");
static_assert(offsetof(EndBattleAILineWarpController_RequestLineWarp, InDivisionNum) == 0x000004, "Member 'EndBattleAILineWarpController_RequestLineWarp::InDivisionNum' has a wrong offset!");
static_assert(offsetof(EndBattleAILineWarpController_RequestLineWarp, InStartMotion) == 0x000008, "Member 'EndBattleAILineWarpController_RequestLineWarp::InStartMotion' has a wrong offset!");
static_assert(offsetof(EndBattleAILineWarpController_RequestLineWarp, InLoopMotion) == 0x000010, "Member 'EndBattleAILineWarpController_RequestLineWarp::InLoopMotion' has a wrong offset!");
static_assert(offsetof(EndBattleAILineWarpController_RequestLineWarp, InEndMotion) == 0x000018, "Member 'EndBattleAILineWarpController_RequestLineWarp::InEndMotion' has a wrong offset!");
static_assert(offsetof(EndBattleAILineWarpController_RequestLineWarp, InWaitTime) == 0x000020, "Member 'EndBattleAILineWarpController_RequestLineWarp::InWaitTime' has a wrong offset!");
static_assert(offsetof(EndBattleAILineWarpController_RequestLineWarp, InEndLocation) == 0x000024, "Member 'EndBattleAILineWarpController_RequestLineWarp::InEndLocation' has a wrong offset!");
static_assert(offsetof(EndBattleAILineWarpController_RequestLineWarp, InRandomOffsetRange) == 0x000030, "Member 'EndBattleAILineWarpController_RequestLineWarp::InRandomOffsetRange' has a wrong offset!");
static_assert(offsetof(EndBattleAILineWarpController_RequestLineWarp, InNearDistance) == 0x00003C, "Member 'EndBattleAILineWarpController_RequestLineWarp::InNearDistance' has a wrong offset!");
static_assert(offsetof(EndBattleAILineWarpController_RequestLineWarp, InLeaveDistance) == 0x000040, "Member 'EndBattleAILineWarpController_RequestLineWarp::InLeaveDistance' has a wrong offset!");
static_assert(offsetof(EndBattleAILineWarpController_RequestLineWarp, InPointWaitTime) == 0x000044, "Member 'EndBattleAILineWarpController_RequestLineWarp::InPointWaitTime' has a wrong offset!");
static_assert(offsetof(EndBattleAILineWarpController_RequestLineWarp, InTrailVelocityPower) == 0x000048, "Member 'EndBattleAILineWarpController_RequestLineWarp::InTrailVelocityPower' has a wrong offset!");
static_assert(offsetof(EndBattleAILineWarpController_RequestLineWarp, InHeightOffsetTable) == 0x00004C, "Member 'EndBattleAILineWarpController_RequestLineWarp::InHeightOffsetTable' has a wrong offset!");
static_assert(offsetof(EndBattleAILineWarpController_RequestLineWarp, InCalcPattern) == 0x000058, "Member 'EndBattleAILineWarpController_RequestLineWarp::InCalcPattern' has a wrong offset!");
static_assert(offsetof(EndBattleAILineWarpController_RequestLineWarp, InPatternParameter) == 0x00005C, "Member 'EndBattleAILineWarpController_RequestLineWarp::InPatternParameter' has a wrong offset!");
static_assert(offsetof(EndBattleAILineWarpController_RequestLineWarp, ReturnValue) == 0x000068, "Member 'EndBattleAILineWarpController_RequestLineWarp::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIEB1005Controller.GetFastDashGotoPosition
// 0x0014 (0x0014 - 0x0000)
struct EndBattleAIEB1005Controller_GetFastDashGotoPosition final
{
public:
	EPlayerType                                   InPlayerType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFastDashGoToPositionType                     InPositionType;                                    // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFastDashGoToDistanceType                     InDistanceType;                                    // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InDirYaw;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0008(0x000C)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIEB1005Controller_GetFastDashGotoPosition) == 0x000004, "Wrong alignment on EndBattleAIEB1005Controller_GetFastDashGotoPosition");
static_assert(sizeof(EndBattleAIEB1005Controller_GetFastDashGotoPosition) == 0x000014, "Wrong size on EndBattleAIEB1005Controller_GetFastDashGotoPosition");
static_assert(offsetof(EndBattleAIEB1005Controller_GetFastDashGotoPosition, InPlayerType) == 0x000000, "Member 'EndBattleAIEB1005Controller_GetFastDashGotoPosition::InPlayerType' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB1005Controller_GetFastDashGotoPosition, InPositionType) == 0x000001, "Member 'EndBattleAIEB1005Controller_GetFastDashGotoPosition::InPositionType' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB1005Controller_GetFastDashGotoPosition, InDistanceType) == 0x000002, "Member 'EndBattleAIEB1005Controller_GetFastDashGotoPosition::InDistanceType' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB1005Controller_GetFastDashGotoPosition, InDirYaw) == 0x000004, "Member 'EndBattleAIEB1005Controller_GetFastDashGotoPosition::InDirYaw' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB1005Controller_GetFastDashGotoPosition, ReturnValue) == 0x000008, "Member 'EndBattleAIEB1005Controller_GetFastDashGotoPosition::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIEB1005Controller.OnEventFastDash
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAIEB1005Controller_OnEventFastDash final
{
public:
	class FName                                   InEventName;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIEB1005Controller_OnEventFastDash) == 0x000004, "Wrong alignment on EndBattleAIEB1005Controller_OnEventFastDash");
static_assert(sizeof(EndBattleAIEB1005Controller_OnEventFastDash) == 0x000008, "Wrong size on EndBattleAIEB1005Controller_OnEventFastDash");
static_assert(offsetof(EndBattleAIEB1005Controller_OnEventFastDash, InEventName) == 0x000000, "Member 'EndBattleAIEB1005Controller_OnEventFastDash::InEventName' has a wrong offset!");

// Function EndGame.EndBattleAIEB1005Controller.OverwriteGoalPositionFastDash
// 0x0014 (0x0014 - 0x0000)
struct EndBattleAIEB1005Controller_OverwriteGoalPositionFastDash final
{
public:
	class FName                                   InKeyword;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InGoalPosition;                                    // 0x0008(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIEB1005Controller_OverwriteGoalPositionFastDash) == 0x000004, "Wrong alignment on EndBattleAIEB1005Controller_OverwriteGoalPositionFastDash");
static_assert(sizeof(EndBattleAIEB1005Controller_OverwriteGoalPositionFastDash) == 0x000014, "Wrong size on EndBattleAIEB1005Controller_OverwriteGoalPositionFastDash");
static_assert(offsetof(EndBattleAIEB1005Controller_OverwriteGoalPositionFastDash, InKeyword) == 0x000000, "Member 'EndBattleAIEB1005Controller_OverwriteGoalPositionFastDash::InKeyword' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB1005Controller_OverwriteGoalPositionFastDash, InGoalPosition) == 0x000008, "Member 'EndBattleAIEB1005Controller_OverwriteGoalPositionFastDash::InGoalPosition' has a wrong offset!");

// Function EndGame.EndBattleAIEB1005Controller.RegisterFastDash
// 0x005C (0x005C - 0x0000)
struct EndBattleAIEB1005Controller_RegisterFastDash final
{
public:
	class FName                                   InKeyword;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InStartAnimation;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InLoopAnimation;                                   // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InEndAnimation;                                    // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InVailableDistance;                                // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InEventNameCompleted;                              // 0x0024(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InEventNameSuspended;                              // 0x002C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InEventNameTimeOver;                               // 0x0034(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InEventNameHitWall;                                // 0x003C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InEventNameMissing;                                // 0x0044(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InEventNameArrival;                                // 0x004C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InEventNameNear;                                   // 0x0054(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIEB1005Controller_RegisterFastDash) == 0x000004, "Wrong alignment on EndBattleAIEB1005Controller_RegisterFastDash");
static_assert(sizeof(EndBattleAIEB1005Controller_RegisterFastDash) == 0x00005C, "Wrong size on EndBattleAIEB1005Controller_RegisterFastDash");
static_assert(offsetof(EndBattleAIEB1005Controller_RegisterFastDash, InKeyword) == 0x000000, "Member 'EndBattleAIEB1005Controller_RegisterFastDash::InKeyword' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB1005Controller_RegisterFastDash, InStartAnimation) == 0x000008, "Member 'EndBattleAIEB1005Controller_RegisterFastDash::InStartAnimation' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB1005Controller_RegisterFastDash, InLoopAnimation) == 0x000010, "Member 'EndBattleAIEB1005Controller_RegisterFastDash::InLoopAnimation' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB1005Controller_RegisterFastDash, InEndAnimation) == 0x000018, "Member 'EndBattleAIEB1005Controller_RegisterFastDash::InEndAnimation' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB1005Controller_RegisterFastDash, InVailableDistance) == 0x000020, "Member 'EndBattleAIEB1005Controller_RegisterFastDash::InVailableDistance' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB1005Controller_RegisterFastDash, InEventNameCompleted) == 0x000024, "Member 'EndBattleAIEB1005Controller_RegisterFastDash::InEventNameCompleted' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB1005Controller_RegisterFastDash, InEventNameSuspended) == 0x00002C, "Member 'EndBattleAIEB1005Controller_RegisterFastDash::InEventNameSuspended' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB1005Controller_RegisterFastDash, InEventNameTimeOver) == 0x000034, "Member 'EndBattleAIEB1005Controller_RegisterFastDash::InEventNameTimeOver' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB1005Controller_RegisterFastDash, InEventNameHitWall) == 0x00003C, "Member 'EndBattleAIEB1005Controller_RegisterFastDash::InEventNameHitWall' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB1005Controller_RegisterFastDash, InEventNameMissing) == 0x000044, "Member 'EndBattleAIEB1005Controller_RegisterFastDash::InEventNameMissing' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB1005Controller_RegisterFastDash, InEventNameArrival) == 0x00004C, "Member 'EndBattleAIEB1005Controller_RegisterFastDash::InEventNameArrival' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB1005Controller_RegisterFastDash, InEventNameNear) == 0x000054, "Member 'EndBattleAIEB1005Controller_RegisterFastDash::InEventNameNear' has a wrong offset!");

// Function EndGame.EndBattleAIEB1005Controller.RegisterFastDashEffect
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAIEB1005Controller_RegisterFastDashEffect final
{
public:
	class FName                                   InCharaSpecName;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InEffectFastDashMove;                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIEB1005Controller_RegisterFastDashEffect) == 0x000004, "Wrong alignment on EndBattleAIEB1005Controller_RegisterFastDashEffect");
static_assert(sizeof(EndBattleAIEB1005Controller_RegisterFastDashEffect) == 0x000010, "Wrong size on EndBattleAIEB1005Controller_RegisterFastDashEffect");
static_assert(offsetof(EndBattleAIEB1005Controller_RegisterFastDashEffect, InCharaSpecName) == 0x000000, "Member 'EndBattleAIEB1005Controller_RegisterFastDashEffect::InCharaSpecName' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB1005Controller_RegisterFastDashEffect, InEffectFastDashMove) == 0x000008, "Member 'EndBattleAIEB1005Controller_RegisterFastDashEffect::InEffectFastDashMove' has a wrong offset!");

// Function EndGame.EndBattleAIEB1005Controller.RegisterFastDashGotoPosition
// 0x000C (0x000C - 0x0000)
struct EndBattleAIEB1005Controller_RegisterFastDashGotoPosition final
{
public:
	struct FVector                                InDistance;                                        // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIEB1005Controller_RegisterFastDashGotoPosition) == 0x000004, "Wrong alignment on EndBattleAIEB1005Controller_RegisterFastDashGotoPosition");
static_assert(sizeof(EndBattleAIEB1005Controller_RegisterFastDashGotoPosition) == 0x00000C, "Wrong size on EndBattleAIEB1005Controller_RegisterFastDashGotoPosition");
static_assert(offsetof(EndBattleAIEB1005Controller_RegisterFastDashGotoPosition, InDistance) == 0x000000, "Member 'EndBattleAIEB1005Controller_RegisterFastDashGotoPosition::InDistance' has a wrong offset!");

// Function EndGame.EndBattleAIEB1005Controller.RequestReserveActionFastDash
// 0x0030 (0x0030 - 0x0000)
struct EndBattleAIEB1005Controller_RequestReserveActionFastDash final
{
public:
	class FName                                   InKeyword;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InGoalPosition;                                    // 0x0008(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InFastMoveSpeed;                                   // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InMissingDistance;                                 // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InMarginDistance;                                  // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InLimitTime;                                       // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InMoveFriction;                                    // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InUseStartFrontRotate;                             // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InUseDeceleration;                                 // 0x0029(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InUpdateGoalPosition;                              // 0x002A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InDrawTargetPoint;                                 // 0x002B(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x002C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAIEB1005Controller_RequestReserveActionFastDash) == 0x000004, "Wrong alignment on EndBattleAIEB1005Controller_RequestReserveActionFastDash");
static_assert(sizeof(EndBattleAIEB1005Controller_RequestReserveActionFastDash) == 0x000030, "Wrong size on EndBattleAIEB1005Controller_RequestReserveActionFastDash");
static_assert(offsetof(EndBattleAIEB1005Controller_RequestReserveActionFastDash, InKeyword) == 0x000000, "Member 'EndBattleAIEB1005Controller_RequestReserveActionFastDash::InKeyword' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB1005Controller_RequestReserveActionFastDash, InGoalPosition) == 0x000008, "Member 'EndBattleAIEB1005Controller_RequestReserveActionFastDash::InGoalPosition' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB1005Controller_RequestReserveActionFastDash, InFastMoveSpeed) == 0x000014, "Member 'EndBattleAIEB1005Controller_RequestReserveActionFastDash::InFastMoveSpeed' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB1005Controller_RequestReserveActionFastDash, InMissingDistance) == 0x000018, "Member 'EndBattleAIEB1005Controller_RequestReserveActionFastDash::InMissingDistance' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB1005Controller_RequestReserveActionFastDash, InMarginDistance) == 0x00001C, "Member 'EndBattleAIEB1005Controller_RequestReserveActionFastDash::InMarginDistance' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB1005Controller_RequestReserveActionFastDash, InLimitTime) == 0x000020, "Member 'EndBattleAIEB1005Controller_RequestReserveActionFastDash::InLimitTime' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB1005Controller_RequestReserveActionFastDash, InMoveFriction) == 0x000024, "Member 'EndBattleAIEB1005Controller_RequestReserveActionFastDash::InMoveFriction' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB1005Controller_RequestReserveActionFastDash, InUseStartFrontRotate) == 0x000028, "Member 'EndBattleAIEB1005Controller_RequestReserveActionFastDash::InUseStartFrontRotate' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB1005Controller_RequestReserveActionFastDash, InUseDeceleration) == 0x000029, "Member 'EndBattleAIEB1005Controller_RequestReserveActionFastDash::InUseDeceleration' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB1005Controller_RequestReserveActionFastDash, InUpdateGoalPosition) == 0x00002A, "Member 'EndBattleAIEB1005Controller_RequestReserveActionFastDash::InUpdateGoalPosition' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB1005Controller_RequestReserveActionFastDash, InDrawTargetPoint) == 0x00002B, "Member 'EndBattleAIEB1005Controller_RequestReserveActionFastDash::InDrawTargetPoint' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB1005Controller_RequestReserveActionFastDash, ReturnValue) == 0x00002C, "Member 'EndBattleAIEB1005Controller_RequestReserveActionFastDash::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIEB1004Controller.CompareAbyssOverAbilityCount
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAIEB1004Controller_CompareAbyssOverAbilityCount final
{
public:
	int32                                         compareCount;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAIEB1004Controller_CompareAbyssOverAbilityCount) == 0x000004, "Wrong alignment on EndBattleAIEB1004Controller_CompareAbyssOverAbilityCount");
static_assert(sizeof(EndBattleAIEB1004Controller_CompareAbyssOverAbilityCount) == 0x000008, "Wrong size on EndBattleAIEB1004Controller_CompareAbyssOverAbilityCount");
static_assert(offsetof(EndBattleAIEB1004Controller_CompareAbyssOverAbilityCount, compareCount) == 0x000000, "Member 'EndBattleAIEB1004Controller_CompareAbyssOverAbilityCount::compareCount' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB1004Controller_CompareAbyssOverAbilityCount, ReturnValue) == 0x000004, "Member 'EndBattleAIEB1004Controller_CompareAbyssOverAbilityCount::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIEB1004Controller.GetAbyssAbilityCount
// 0x0004 (0x0004 - 0x0000)
struct EndBattleAIEB1004Controller_GetAbyssAbilityCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIEB1004Controller_GetAbyssAbilityCount) == 0x000004, "Wrong alignment on EndBattleAIEB1004Controller_GetAbyssAbilityCount");
static_assert(sizeof(EndBattleAIEB1004Controller_GetAbyssAbilityCount) == 0x000004, "Wrong size on EndBattleAIEB1004Controller_GetAbyssAbilityCount");
static_assert(offsetof(EndBattleAIEB1004Controller_GetAbyssAbilityCount, ReturnValue) == 0x000000, "Member 'EndBattleAIEB1004Controller_GetAbyssAbilityCount::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIEB1004Controller.GetAbyssElapsedTime
// 0x0004 (0x0004 - 0x0000)
struct EndBattleAIEB1004Controller_GetAbyssElapsedTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIEB1004Controller_GetAbyssElapsedTime) == 0x000004, "Wrong alignment on EndBattleAIEB1004Controller_GetAbyssElapsedTime");
static_assert(sizeof(EndBattleAIEB1004Controller_GetAbyssElapsedTime) == 0x000004, "Wrong size on EndBattleAIEB1004Controller_GetAbyssElapsedTime");
static_assert(offsetof(EndBattleAIEB1004Controller_GetAbyssElapsedTime, ReturnValue) == 0x000000, "Member 'EndBattleAIEB1004Controller_GetAbyssElapsedTime::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIEB1004Controller.GetFastDashGotoPosition
// 0x0014 (0x0014 - 0x0000)
struct EndBattleAIEB1004Controller_GetFastDashGotoPosition final
{
public:
	EPlayerType                                   InPlayerType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFastDashGoToPositionType                     InPositionType;                                    // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFastDashGoToDistanceType                     InDistanceType;                                    // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InDirYaw;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0008(0x000C)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIEB1004Controller_GetFastDashGotoPosition) == 0x000004, "Wrong alignment on EndBattleAIEB1004Controller_GetFastDashGotoPosition");
static_assert(sizeof(EndBattleAIEB1004Controller_GetFastDashGotoPosition) == 0x000014, "Wrong size on EndBattleAIEB1004Controller_GetFastDashGotoPosition");
static_assert(offsetof(EndBattleAIEB1004Controller_GetFastDashGotoPosition, InPlayerType) == 0x000000, "Member 'EndBattleAIEB1004Controller_GetFastDashGotoPosition::InPlayerType' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB1004Controller_GetFastDashGotoPosition, InPositionType) == 0x000001, "Member 'EndBattleAIEB1004Controller_GetFastDashGotoPosition::InPositionType' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB1004Controller_GetFastDashGotoPosition, InDistanceType) == 0x000002, "Member 'EndBattleAIEB1004Controller_GetFastDashGotoPosition::InDistanceType' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB1004Controller_GetFastDashGotoPosition, InDirYaw) == 0x000004, "Member 'EndBattleAIEB1004Controller_GetFastDashGotoPosition::InDirYaw' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB1004Controller_GetFastDashGotoPosition, ReturnValue) == 0x000008, "Member 'EndBattleAIEB1004Controller_GetFastDashGotoPosition::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIEB1004Controller.GetTotalDamage
// 0x0004 (0x0004 - 0x0000)
struct EndBattleAIEB1004Controller_GetTotalDamage final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIEB1004Controller_GetTotalDamage) == 0x000004, "Wrong alignment on EndBattleAIEB1004Controller_GetTotalDamage");
static_assert(sizeof(EndBattleAIEB1004Controller_GetTotalDamage) == 0x000004, "Wrong size on EndBattleAIEB1004Controller_GetTotalDamage");
static_assert(offsetof(EndBattleAIEB1004Controller_GetTotalDamage, ReturnValue) == 0x000000, "Member 'EndBattleAIEB1004Controller_GetTotalDamage::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIEB1004Controller.GetTotalDamageThreshold
// 0x0004 (0x0004 - 0x0000)
struct EndBattleAIEB1004Controller_GetTotalDamageThreshold final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIEB1004Controller_GetTotalDamageThreshold) == 0x000004, "Wrong alignment on EndBattleAIEB1004Controller_GetTotalDamageThreshold");
static_assert(sizeof(EndBattleAIEB1004Controller_GetTotalDamageThreshold) == 0x000004, "Wrong size on EndBattleAIEB1004Controller_GetTotalDamageThreshold");
static_assert(offsetof(EndBattleAIEB1004Controller_GetTotalDamageThreshold, ReturnValue) == 0x000000, "Member 'EndBattleAIEB1004Controller_GetTotalDamageThreshold::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIEB1004Controller.OnEventFastDash
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAIEB1004Controller_OnEventFastDash final
{
public:
	class FName                                   InEventName;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIEB1004Controller_OnEventFastDash) == 0x000004, "Wrong alignment on EndBattleAIEB1004Controller_OnEventFastDash");
static_assert(sizeof(EndBattleAIEB1004Controller_OnEventFastDash) == 0x000008, "Wrong size on EndBattleAIEB1004Controller_OnEventFastDash");
static_assert(offsetof(EndBattleAIEB1004Controller_OnEventFastDash, InEventName) == 0x000000, "Member 'EndBattleAIEB1004Controller_OnEventFastDash::InEventName' has a wrong offset!");

// Function EndGame.EndBattleAIEB1004Controller.OverwriteGoalPositionFastDash
// 0x0014 (0x0014 - 0x0000)
struct EndBattleAIEB1004Controller_OverwriteGoalPositionFastDash final
{
public:
	class FName                                   InKeyword;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InGoalPosition;                                    // 0x0008(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIEB1004Controller_OverwriteGoalPositionFastDash) == 0x000004, "Wrong alignment on EndBattleAIEB1004Controller_OverwriteGoalPositionFastDash");
static_assert(sizeof(EndBattleAIEB1004Controller_OverwriteGoalPositionFastDash) == 0x000014, "Wrong size on EndBattleAIEB1004Controller_OverwriteGoalPositionFastDash");
static_assert(offsetof(EndBattleAIEB1004Controller_OverwriteGoalPositionFastDash, InKeyword) == 0x000000, "Member 'EndBattleAIEB1004Controller_OverwriteGoalPositionFastDash::InKeyword' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB1004Controller_OverwriteGoalPositionFastDash, InGoalPosition) == 0x000008, "Member 'EndBattleAIEB1004Controller_OverwriteGoalPositionFastDash::InGoalPosition' has a wrong offset!");

// Function EndGame.EndBattleAIEB1004Controller.RegisterFastDash
// 0x005C (0x005C - 0x0000)
struct EndBattleAIEB1004Controller_RegisterFastDash final
{
public:
	class FName                                   InKeyword;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InStartAnimation;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InLoopAnimation;                                   // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InEndAnimation;                                    // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InVailableDistance;                                // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InEventNameCompleted;                              // 0x0024(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InEventNameSuspended;                              // 0x002C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InEventNameTimeOver;                               // 0x0034(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InEventNameHitWall;                                // 0x003C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InEventNameMissing;                                // 0x0044(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InEventNameArrival;                                // 0x004C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InEventNameNear;                                   // 0x0054(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIEB1004Controller_RegisterFastDash) == 0x000004, "Wrong alignment on EndBattleAIEB1004Controller_RegisterFastDash");
static_assert(sizeof(EndBattleAIEB1004Controller_RegisterFastDash) == 0x00005C, "Wrong size on EndBattleAIEB1004Controller_RegisterFastDash");
static_assert(offsetof(EndBattleAIEB1004Controller_RegisterFastDash, InKeyword) == 0x000000, "Member 'EndBattleAIEB1004Controller_RegisterFastDash::InKeyword' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB1004Controller_RegisterFastDash, InStartAnimation) == 0x000008, "Member 'EndBattleAIEB1004Controller_RegisterFastDash::InStartAnimation' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB1004Controller_RegisterFastDash, InLoopAnimation) == 0x000010, "Member 'EndBattleAIEB1004Controller_RegisterFastDash::InLoopAnimation' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB1004Controller_RegisterFastDash, InEndAnimation) == 0x000018, "Member 'EndBattleAIEB1004Controller_RegisterFastDash::InEndAnimation' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB1004Controller_RegisterFastDash, InVailableDistance) == 0x000020, "Member 'EndBattleAIEB1004Controller_RegisterFastDash::InVailableDistance' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB1004Controller_RegisterFastDash, InEventNameCompleted) == 0x000024, "Member 'EndBattleAIEB1004Controller_RegisterFastDash::InEventNameCompleted' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB1004Controller_RegisterFastDash, InEventNameSuspended) == 0x00002C, "Member 'EndBattleAIEB1004Controller_RegisterFastDash::InEventNameSuspended' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB1004Controller_RegisterFastDash, InEventNameTimeOver) == 0x000034, "Member 'EndBattleAIEB1004Controller_RegisterFastDash::InEventNameTimeOver' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB1004Controller_RegisterFastDash, InEventNameHitWall) == 0x00003C, "Member 'EndBattleAIEB1004Controller_RegisterFastDash::InEventNameHitWall' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB1004Controller_RegisterFastDash, InEventNameMissing) == 0x000044, "Member 'EndBattleAIEB1004Controller_RegisterFastDash::InEventNameMissing' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB1004Controller_RegisterFastDash, InEventNameArrival) == 0x00004C, "Member 'EndBattleAIEB1004Controller_RegisterFastDash::InEventNameArrival' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB1004Controller_RegisterFastDash, InEventNameNear) == 0x000054, "Member 'EndBattleAIEB1004Controller_RegisterFastDash::InEventNameNear' has a wrong offset!");

// Function EndGame.EndBattleAIEB1004Controller.RegisterFastDashEffect
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAIEB1004Controller_RegisterFastDashEffect final
{
public:
	class FName                                   InCharaSpecName;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InEffectFastDashMove;                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIEB1004Controller_RegisterFastDashEffect) == 0x000004, "Wrong alignment on EndBattleAIEB1004Controller_RegisterFastDashEffect");
static_assert(sizeof(EndBattleAIEB1004Controller_RegisterFastDashEffect) == 0x000010, "Wrong size on EndBattleAIEB1004Controller_RegisterFastDashEffect");
static_assert(offsetof(EndBattleAIEB1004Controller_RegisterFastDashEffect, InCharaSpecName) == 0x000000, "Member 'EndBattleAIEB1004Controller_RegisterFastDashEffect::InCharaSpecName' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB1004Controller_RegisterFastDashEffect, InEffectFastDashMove) == 0x000008, "Member 'EndBattleAIEB1004Controller_RegisterFastDashEffect::InEffectFastDashMove' has a wrong offset!");

// Function EndGame.EndBattleAIEB1004Controller.RegisterFastDashGotoPosition
// 0x000C (0x000C - 0x0000)
struct EndBattleAIEB1004Controller_RegisterFastDashGotoPosition final
{
public:
	struct FVector                                InDistance;                                        // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIEB1004Controller_RegisterFastDashGotoPosition) == 0x000004, "Wrong alignment on EndBattleAIEB1004Controller_RegisterFastDashGotoPosition");
static_assert(sizeof(EndBattleAIEB1004Controller_RegisterFastDashGotoPosition) == 0x00000C, "Wrong size on EndBattleAIEB1004Controller_RegisterFastDashGotoPosition");
static_assert(offsetof(EndBattleAIEB1004Controller_RegisterFastDashGotoPosition, InDistance) == 0x000000, "Member 'EndBattleAIEB1004Controller_RegisterFastDashGotoPosition::InDistance' has a wrong offset!");

// Function EndGame.EndBattleAIEB1004Controller.RequestReserveActionFastDash
// 0x0030 (0x0030 - 0x0000)
struct EndBattleAIEB1004Controller_RequestReserveActionFastDash final
{
public:
	class FName                                   InKeyword;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InGoalPosition;                                    // 0x0008(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InFastMoveSpeed;                                   // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InMissingDistance;                                 // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InMarginDistance;                                  // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InLimitTime;                                       // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InMoveFriction;                                    // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InUseStartFrontRotate;                             // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InUseDeceleration;                                 // 0x0029(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InUpdateGoalPosition;                              // 0x002A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InDrawTargetPoint;                                 // 0x002B(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x002C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAIEB1004Controller_RequestReserveActionFastDash) == 0x000004, "Wrong alignment on EndBattleAIEB1004Controller_RequestReserveActionFastDash");
static_assert(sizeof(EndBattleAIEB1004Controller_RequestReserveActionFastDash) == 0x000030, "Wrong size on EndBattleAIEB1004Controller_RequestReserveActionFastDash");
static_assert(offsetof(EndBattleAIEB1004Controller_RequestReserveActionFastDash, InKeyword) == 0x000000, "Member 'EndBattleAIEB1004Controller_RequestReserveActionFastDash::InKeyword' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB1004Controller_RequestReserveActionFastDash, InGoalPosition) == 0x000008, "Member 'EndBattleAIEB1004Controller_RequestReserveActionFastDash::InGoalPosition' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB1004Controller_RequestReserveActionFastDash, InFastMoveSpeed) == 0x000014, "Member 'EndBattleAIEB1004Controller_RequestReserveActionFastDash::InFastMoveSpeed' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB1004Controller_RequestReserveActionFastDash, InMissingDistance) == 0x000018, "Member 'EndBattleAIEB1004Controller_RequestReserveActionFastDash::InMissingDistance' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB1004Controller_RequestReserveActionFastDash, InMarginDistance) == 0x00001C, "Member 'EndBattleAIEB1004Controller_RequestReserveActionFastDash::InMarginDistance' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB1004Controller_RequestReserveActionFastDash, InLimitTime) == 0x000020, "Member 'EndBattleAIEB1004Controller_RequestReserveActionFastDash::InLimitTime' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB1004Controller_RequestReserveActionFastDash, InMoveFriction) == 0x000024, "Member 'EndBattleAIEB1004Controller_RequestReserveActionFastDash::InMoveFriction' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB1004Controller_RequestReserveActionFastDash, InUseStartFrontRotate) == 0x000028, "Member 'EndBattleAIEB1004Controller_RequestReserveActionFastDash::InUseStartFrontRotate' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB1004Controller_RequestReserveActionFastDash, InUseDeceleration) == 0x000029, "Member 'EndBattleAIEB1004Controller_RequestReserveActionFastDash::InUseDeceleration' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB1004Controller_RequestReserveActionFastDash, InUpdateGoalPosition) == 0x00002A, "Member 'EndBattleAIEB1004Controller_RequestReserveActionFastDash::InUpdateGoalPosition' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB1004Controller_RequestReserveActionFastDash, InDrawTargetPoint) == 0x00002B, "Member 'EndBattleAIEB1004Controller_RequestReserveActionFastDash::InDrawTargetPoint' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB1004Controller_RequestReserveActionFastDash, ReturnValue) == 0x00002C, "Member 'EndBattleAIEB1004Controller_RequestReserveActionFastDash::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIEB1004Controller.ResetAbyssAbilityCount
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAIEB1004Controller_ResetAbyssAbilityCount final
{
public:
	bool                                          enableResetTime;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIEB1004Controller_ResetAbyssAbilityCount) == 0x000001, "Wrong alignment on EndBattleAIEB1004Controller_ResetAbyssAbilityCount");
static_assert(sizeof(EndBattleAIEB1004Controller_ResetAbyssAbilityCount) == 0x000001, "Wrong size on EndBattleAIEB1004Controller_ResetAbyssAbilityCount");
static_assert(offsetof(EndBattleAIEB1004Controller_ResetAbyssAbilityCount, enableResetTime) == 0x000000, "Member 'EndBattleAIEB1004Controller_ResetAbyssAbilityCount::enableResetTime' has a wrong offset!");

// Function EndGame.EndBattleAIEB1004Controller.SetAbyssOverTimeEvent
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAIEB1004Controller_SetAbyssOverTimeEvent final
{
public:
	float                                         InOverTime;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InKeepTimer;                                       // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAIEB1004Controller_SetAbyssOverTimeEvent) == 0x000004, "Wrong alignment on EndBattleAIEB1004Controller_SetAbyssOverTimeEvent");
static_assert(sizeof(EndBattleAIEB1004Controller_SetAbyssOverTimeEvent) == 0x000008, "Wrong size on EndBattleAIEB1004Controller_SetAbyssOverTimeEvent");
static_assert(offsetof(EndBattleAIEB1004Controller_SetAbyssOverTimeEvent, InOverTime) == 0x000000, "Member 'EndBattleAIEB1004Controller_SetAbyssOverTimeEvent::InOverTime' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB1004Controller_SetAbyssOverTimeEvent, InKeepTimer) == 0x000004, "Member 'EndBattleAIEB1004Controller_SetAbyssOverTimeEvent::InKeepTimer' has a wrong offset!");

// Function EndGame.EndBattleAIEB1004Controller.SetTotalDamage
// 0x0004 (0x0004 - 0x0000)
struct EndBattleAIEB1004Controller_SetTotalDamage final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIEB1004Controller_SetTotalDamage) == 0x000004, "Wrong alignment on EndBattleAIEB1004Controller_SetTotalDamage");
static_assert(sizeof(EndBattleAIEB1004Controller_SetTotalDamage) == 0x000004, "Wrong size on EndBattleAIEB1004Controller_SetTotalDamage");
static_assert(offsetof(EndBattleAIEB1004Controller_SetTotalDamage, Value) == 0x000000, "Member 'EndBattleAIEB1004Controller_SetTotalDamage::Value' has a wrong offset!");

// Function EndGame.EndBattleAIEB1004Controller.SetTotalDamageThreshold
// 0x0004 (0x0004 - 0x0000)
struct EndBattleAIEB1004Controller_SetTotalDamageThreshold final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIEB1004Controller_SetTotalDamageThreshold) == 0x000004, "Wrong alignment on EndBattleAIEB1004Controller_SetTotalDamageThreshold");
static_assert(sizeof(EndBattleAIEB1004Controller_SetTotalDamageThreshold) == 0x000004, "Wrong size on EndBattleAIEB1004Controller_SetTotalDamageThreshold");
static_assert(offsetof(EndBattleAIEB1004Controller_SetTotalDamageThreshold, Value) == 0x000000, "Member 'EndBattleAIEB1004Controller_SetTotalDamageThreshold::Value' has a wrong offset!");

// Function EndGame.EndProgressBar.SetFillColorAndOpacity
// 0x0010 (0x0010 - 0x0000)
struct EndProgressBar_SetFillColorAndOpacity final
{
public:
	struct FLinearColor                           InColor;                                           // 0x0000(0x0010)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndProgressBar_SetFillColorAndOpacity) == 0x000004, "Wrong alignment on EndProgressBar_SetFillColorAndOpacity");
static_assert(sizeof(EndProgressBar_SetFillColorAndOpacity) == 0x000010, "Wrong size on EndProgressBar_SetFillColorAndOpacity");
static_assert(offsetof(EndProgressBar_SetFillColorAndOpacity, InColor) == 0x000000, "Member 'EndProgressBar_SetFillColorAndOpacity::InColor' has a wrong offset!");

// Function EndGame.EndProgressBar.SetPercent
// 0x0004 (0x0004 - 0x0000)
struct EndProgressBar_SetPercent final
{
public:
	float                                         InPercent;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndProgressBar_SetPercent) == 0x000004, "Wrong alignment on EndProgressBar_SetPercent");
static_assert(sizeof(EndProgressBar_SetPercent) == 0x000004, "Wrong size on EndProgressBar_SetPercent");
static_assert(offsetof(EndProgressBar_SetPercent, InPercent) == 0x000000, "Member 'EndProgressBar_SetPercent::InPercent' has a wrong offset!");

// Function EndGame.EndProgressBar.SetPreviewColorAndOpacity
// 0x0010 (0x0010 - 0x0000)
struct EndProgressBar_SetPreviewColorAndOpacity final
{
public:
	struct FLinearColor                           InColor;                                           // 0x0000(0x0010)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndProgressBar_SetPreviewColorAndOpacity) == 0x000004, "Wrong alignment on EndProgressBar_SetPreviewColorAndOpacity");
static_assert(sizeof(EndProgressBar_SetPreviewColorAndOpacity) == 0x000010, "Wrong size on EndProgressBar_SetPreviewColorAndOpacity");
static_assert(offsetof(EndProgressBar_SetPreviewColorAndOpacity, InColor) == 0x000000, "Member 'EndProgressBar_SetPreviewColorAndOpacity::InColor' has a wrong offset!");

// Function EndGame.EndProgressBar.SetPreviewPercent
// 0x0004 (0x0004 - 0x0000)
struct EndProgressBar_SetPreviewPercent final
{
public:
	float                                         InPercent;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndProgressBar_SetPreviewPercent) == 0x000004, "Wrong alignment on EndProgressBar_SetPreviewPercent");
static_assert(sizeof(EndProgressBar_SetPreviewPercent) == 0x000004, "Wrong size on EndProgressBar_SetPreviewPercent");
static_assert(offsetof(EndProgressBar_SetPreviewPercent, InPercent) == 0x000000, "Member 'EndProgressBar_SetPreviewPercent::InPercent' has a wrong offset!");

// Function EndGame.EndBattleAIEN2101Controller.OnEasySpawnEvent
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAIEN2101Controller_OnEasySpawnEvent final
{
public:
	class FName                                   EventName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIEN2101Controller_OnEasySpawnEvent) == 0x000004, "Wrong alignment on EndBattleAIEN2101Controller_OnEasySpawnEvent");
static_assert(sizeof(EndBattleAIEN2101Controller_OnEasySpawnEvent) == 0x000008, "Wrong size on EndBattleAIEN2101Controller_OnEasySpawnEvent");
static_assert(offsetof(EndBattleAIEN2101Controller_OnEasySpawnEvent, EventName) == 0x000000, "Member 'EndBattleAIEN2101Controller_OnEasySpawnEvent::EventName' has a wrong offset!");

// Function EndGame.EndBattleAIEN2101Controller.RequestBreakRightArm
// 0x0014 (0x0014 - 0x0000)
struct EndBattleAIEN2101Controller_RequestBreakRightArm final
{
public:
	class FName                                   charaPartsSpecName;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SocketName;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAIEN2101Controller_RequestBreakRightArm) == 0x000004, "Wrong alignment on EndBattleAIEN2101Controller_RequestBreakRightArm");
static_assert(sizeof(EndBattleAIEN2101Controller_RequestBreakRightArm) == 0x000014, "Wrong size on EndBattleAIEN2101Controller_RequestBreakRightArm");
static_assert(offsetof(EndBattleAIEN2101Controller_RequestBreakRightArm, charaPartsSpecName) == 0x000000, "Member 'EndBattleAIEN2101Controller_RequestBreakRightArm::charaPartsSpecName' has a wrong offset!");
static_assert(offsetof(EndBattleAIEN2101Controller_RequestBreakRightArm, SocketName) == 0x000008, "Member 'EndBattleAIEN2101Controller_RequestBreakRightArm::SocketName' has a wrong offset!");
static_assert(offsetof(EndBattleAIEN2101Controller_RequestBreakRightArm, ReturnValue) == 0x000010, "Member 'EndBattleAIEN2101Controller_RequestBreakRightArm::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIEN2101Controller.RequestDestroyRightArmActor
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAIEN2101Controller_RequestDestroyRightArmActor final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIEN2101Controller_RequestDestroyRightArmActor) == 0x000001, "Wrong alignment on EndBattleAIEN2101Controller_RequestDestroyRightArmActor");
static_assert(sizeof(EndBattleAIEN2101Controller_RequestDestroyRightArmActor) == 0x000001, "Wrong size on EndBattleAIEN2101Controller_RequestDestroyRightArmActor");
static_assert(offsetof(EndBattleAIEN2101Controller_RequestDestroyRightArmActor, ReturnValue) == 0x000000, "Member 'EndBattleAIEN2101Controller_RequestDestroyRightArmActor::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIEN2101Controller.RequestKillRightArm
// 0x0002 (0x0002 - 0x0000)
struct EndBattleAIEN2101Controller_RequestKillRightArm final
{
public:
	bool                                          forceDestroy;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIEN2101Controller_RequestKillRightArm) == 0x000001, "Wrong alignment on EndBattleAIEN2101Controller_RequestKillRightArm");
static_assert(sizeof(EndBattleAIEN2101Controller_RequestKillRightArm) == 0x000002, "Wrong size on EndBattleAIEN2101Controller_RequestKillRightArm");
static_assert(offsetof(EndBattleAIEN2101Controller_RequestKillRightArm, forceDestroy) == 0x000000, "Member 'EndBattleAIEN2101Controller_RequestKillRightArm::forceDestroy' has a wrong offset!");
static_assert(offsetof(EndBattleAIEN2101Controller_RequestKillRightArm, ReturnValue) == 0x000001, "Member 'EndBattleAIEN2101Controller_RequestKillRightArm::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIEN2101Controller.RequestRepairRightArm
// 0x0014 (0x0014 - 0x0000)
struct EndBattleAIEN2101Controller_RequestRepairRightArm final
{
public:
	class FName                                   charaPartsSpecName;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   meshLabelName;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAIEN2101Controller_RequestRepairRightArm) == 0x000004, "Wrong alignment on EndBattleAIEN2101Controller_RequestRepairRightArm");
static_assert(sizeof(EndBattleAIEN2101Controller_RequestRepairRightArm) == 0x000014, "Wrong size on EndBattleAIEN2101Controller_RequestRepairRightArm");
static_assert(offsetof(EndBattleAIEN2101Controller_RequestRepairRightArm, charaPartsSpecName) == 0x000000, "Member 'EndBattleAIEN2101Controller_RequestRepairRightArm::charaPartsSpecName' has a wrong offset!");
static_assert(offsetof(EndBattleAIEN2101Controller_RequestRepairRightArm, meshLabelName) == 0x000008, "Member 'EndBattleAIEN2101Controller_RequestRepairRightArm::meshLabelName' has a wrong offset!");
static_assert(offsetof(EndBattleAIEN2101Controller_RequestRepairRightArm, ReturnValue) == 0x000010, "Member 'EndBattleAIEN2101Controller_RequestRepairRightArm::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIEN2101Controller.RequestReplaceRightArm
// 0x000C (0x000C - 0x0000)
struct EndBattleAIEN2101Controller_RequestReplaceRightArm final
{
public:
	class FName                                   SocketName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAIEN2101Controller_RequestReplaceRightArm) == 0x000004, "Wrong alignment on EndBattleAIEN2101Controller_RequestReplaceRightArm");
static_assert(sizeof(EndBattleAIEN2101Controller_RequestReplaceRightArm) == 0x00000C, "Wrong size on EndBattleAIEN2101Controller_RequestReplaceRightArm");
static_assert(offsetof(EndBattleAIEN2101Controller_RequestReplaceRightArm, SocketName) == 0x000000, "Member 'EndBattleAIEN2101Controller_RequestReplaceRightArm::SocketName' has a wrong offset!");
static_assert(offsetof(EndBattleAIEN2101Controller_RequestReplaceRightArm, ReturnValue) == 0x000008, "Member 'EndBattleAIEN2101Controller_RequestReplaceRightArm::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIEN2101Controller.RequestSpawnRightArm
// 0x0020 (0x0020 - 0x0000)
struct EndBattleAIEN2101Controller_RequestSpawnRightArm final
{
public:
	class FName                                   CharaSpecName;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          spawnedInvisible;                                  // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          spawnedDisableCollision;                           // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndBattleEasySpawnEnableRagdollType          enableRagdollType;                                 // 0x000A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x1];                                        // 0x000B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         deadEventDelayTime;                                // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                hidePosition;                                      // 0x0010(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          recycle;                                           // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001D(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAIEN2101Controller_RequestSpawnRightArm) == 0x000004, "Wrong alignment on EndBattleAIEN2101Controller_RequestSpawnRightArm");
static_assert(sizeof(EndBattleAIEN2101Controller_RequestSpawnRightArm) == 0x000020, "Wrong size on EndBattleAIEN2101Controller_RequestSpawnRightArm");
static_assert(offsetof(EndBattleAIEN2101Controller_RequestSpawnRightArm, CharaSpecName) == 0x000000, "Member 'EndBattleAIEN2101Controller_RequestSpawnRightArm::CharaSpecName' has a wrong offset!");
static_assert(offsetof(EndBattleAIEN2101Controller_RequestSpawnRightArm, spawnedInvisible) == 0x000008, "Member 'EndBattleAIEN2101Controller_RequestSpawnRightArm::spawnedInvisible' has a wrong offset!");
static_assert(offsetof(EndBattleAIEN2101Controller_RequestSpawnRightArm, spawnedDisableCollision) == 0x000009, "Member 'EndBattleAIEN2101Controller_RequestSpawnRightArm::spawnedDisableCollision' has a wrong offset!");
static_assert(offsetof(EndBattleAIEN2101Controller_RequestSpawnRightArm, enableRagdollType) == 0x00000A, "Member 'EndBattleAIEN2101Controller_RequestSpawnRightArm::enableRagdollType' has a wrong offset!");
static_assert(offsetof(EndBattleAIEN2101Controller_RequestSpawnRightArm, deadEventDelayTime) == 0x00000C, "Member 'EndBattleAIEN2101Controller_RequestSpawnRightArm::deadEventDelayTime' has a wrong offset!");
static_assert(offsetof(EndBattleAIEN2101Controller_RequestSpawnRightArm, hidePosition) == 0x000010, "Member 'EndBattleAIEN2101Controller_RequestSpawnRightArm::hidePosition' has a wrong offset!");
static_assert(offsetof(EndBattleAIEN2101Controller_RequestSpawnRightArm, recycle) == 0x00001C, "Member 'EndBattleAIEN2101Controller_RequestSpawnRightArm::recycle' has a wrong offset!");
static_assert(offsetof(EndBattleAIEN2101Controller_RequestSpawnRightArm, ReturnValue) == 0x00001D, "Member 'EndBattleAIEN2101Controller_RequestSpawnRightArm::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIEN2000_01Controller.IsChasing
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAIEN2000_01Controller_IsChasing final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIEN2000_01Controller_IsChasing) == 0x000001, "Wrong alignment on EndBattleAIEN2000_01Controller_IsChasing");
static_assert(sizeof(EndBattleAIEN2000_01Controller_IsChasing) == 0x000001, "Wrong size on EndBattleAIEN2000_01Controller_IsChasing");
static_assert(offsetof(EndBattleAIEN2000_01Controller_IsChasing, ReturnValue) == 0x000000, "Member 'EndBattleAIEN2000_01Controller_IsChasing::ReturnValue' has a wrong offset!");

// Function EndGame.EndEnemyReportMenu.OnAbilityListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndEnemyReportMenu_OnAbilityListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndEnemyReportMenu_OnAbilityListSetupItem) == 0x000008, "Wrong alignment on EndEnemyReportMenu_OnAbilityListSetupItem");
static_assert(sizeof(EndEnemyReportMenu_OnAbilityListSetupItem) == 0x000010, "Wrong size on EndEnemyReportMenu_OnAbilityListSetupItem");
static_assert(offsetof(EndEnemyReportMenu_OnAbilityListSetupItem, ItemWidget) == 0x000000, "Member 'EndEnemyReportMenu_OnAbilityListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndEnemyReportMenu_OnAbilityListSetupItem, CellIndex) == 0x000008, "Member 'EndEnemyReportMenu_OnAbilityListSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndEnemyReportMenu.OnActionTypeListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndEnemyReportMenu_OnActionTypeListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndEnemyReportMenu_OnActionTypeListSetupItem) == 0x000008, "Wrong alignment on EndEnemyReportMenu_OnActionTypeListSetupItem");
static_assert(sizeof(EndEnemyReportMenu_OnActionTypeListSetupItem) == 0x000010, "Wrong size on EndEnemyReportMenu_OnActionTypeListSetupItem");
static_assert(offsetof(EndEnemyReportMenu_OnActionTypeListSetupItem, ItemWidget) == 0x000000, "Member 'EndEnemyReportMenu_OnActionTypeListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndEnemyReportMenu_OnActionTypeListSetupItem, CellIndex) == 0x000008, "Member 'EndEnemyReportMenu_OnActionTypeListSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndEnemyReportMenu.OnAreaListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndEnemyReportMenu_OnAreaListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndEnemyReportMenu_OnAreaListSetupItem) == 0x000008, "Wrong alignment on EndEnemyReportMenu_OnAreaListSetupItem");
static_assert(sizeof(EndEnemyReportMenu_OnAreaListSetupItem) == 0x000010, "Wrong size on EndEnemyReportMenu_OnAreaListSetupItem");
static_assert(offsetof(EndEnemyReportMenu_OnAreaListSetupItem, ItemWidget) == 0x000000, "Member 'EndEnemyReportMenu_OnAreaListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndEnemyReportMenu_OnAreaListSetupItem, CellIndex) == 0x000008, "Member 'EndEnemyReportMenu_OnAreaListSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndEnemyReportMenu.OnBattleLogListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndEnemyReportMenu_OnBattleLogListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndEnemyReportMenu_OnBattleLogListSetupItem) == 0x000008, "Wrong alignment on EndEnemyReportMenu_OnBattleLogListSetupItem");
static_assert(sizeof(EndEnemyReportMenu_OnBattleLogListSetupItem) == 0x000010, "Wrong size on EndEnemyReportMenu_OnBattleLogListSetupItem");
static_assert(offsetof(EndEnemyReportMenu_OnBattleLogListSetupItem, ItemWidget) == 0x000000, "Member 'EndEnemyReportMenu_OnBattleLogListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndEnemyReportMenu_OnBattleLogListSetupItem, CellIndex) == 0x000008, "Member 'EndEnemyReportMenu_OnBattleLogListSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndEnemyReportMenu.OnBuffIconSetup
// 0x0010 (0x0010 - 0x0000)
struct EndEnemyReportMenu_OnBuffIconSetup final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndEnemyReportMenu_OnBuffIconSetup) == 0x000008, "Wrong alignment on EndEnemyReportMenu_OnBuffIconSetup");
static_assert(sizeof(EndEnemyReportMenu_OnBuffIconSetup) == 0x000010, "Wrong size on EndEnemyReportMenu_OnBuffIconSetup");
static_assert(offsetof(EndEnemyReportMenu_OnBuffIconSetup, ItemWidget) == 0x000000, "Member 'EndEnemyReportMenu_OnBuffIconSetup::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndEnemyReportMenu_OnBuffIconSetup, CellIndex) == 0x000008, "Member 'EndEnemyReportMenu_OnBuffIconSetup::CellIndex' has a wrong offset!");

// Function EndGame.EndEnemyReportMenu.OnDebuffIconSetup
// 0x0010 (0x0010 - 0x0000)
struct EndEnemyReportMenu_OnDebuffIconSetup final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndEnemyReportMenu_OnDebuffIconSetup) == 0x000008, "Wrong alignment on EndEnemyReportMenu_OnDebuffIconSetup");
static_assert(sizeof(EndEnemyReportMenu_OnDebuffIconSetup) == 0x000010, "Wrong size on EndEnemyReportMenu_OnDebuffIconSetup");
static_assert(offsetof(EndEnemyReportMenu_OnDebuffIconSetup, ItemWidget) == 0x000000, "Member 'EndEnemyReportMenu_OnDebuffIconSetup::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndEnemyReportMenu_OnDebuffIconSetup, CellIndex) == 0x000008, "Member 'EndEnemyReportMenu_OnDebuffIconSetup::CellIndex' has a wrong offset!");

// Function EndGame.EndEnemyReportMenu.OnDetailAreaListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndEnemyReportMenu_OnDetailAreaListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndEnemyReportMenu_OnDetailAreaListSetupItem) == 0x000008, "Wrong alignment on EndEnemyReportMenu_OnDetailAreaListSetupItem");
static_assert(sizeof(EndEnemyReportMenu_OnDetailAreaListSetupItem) == 0x000010, "Wrong size on EndEnemyReportMenu_OnDetailAreaListSetupItem");
static_assert(offsetof(EndEnemyReportMenu_OnDetailAreaListSetupItem, ItemWidget) == 0x000000, "Member 'EndEnemyReportMenu_OnDetailAreaListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndEnemyReportMenu_OnDetailAreaListSetupItem, CellIndex) == 0x000008, "Member 'EndEnemyReportMenu_OnDetailAreaListSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndEnemyReportMenu.OnDetailBattleLogListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndEnemyReportMenu_OnDetailBattleLogListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndEnemyReportMenu_OnDetailBattleLogListSetupItem) == 0x000008, "Wrong alignment on EndEnemyReportMenu_OnDetailBattleLogListSetupItem");
static_assert(sizeof(EndEnemyReportMenu_OnDetailBattleLogListSetupItem) == 0x000010, "Wrong size on EndEnemyReportMenu_OnDetailBattleLogListSetupItem");
static_assert(offsetof(EndEnemyReportMenu_OnDetailBattleLogListSetupItem, ItemWidget) == 0x000000, "Member 'EndEnemyReportMenu_OnDetailBattleLogListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndEnemyReportMenu_OnDetailBattleLogListSetupItem, CellIndex) == 0x000008, "Member 'EndEnemyReportMenu_OnDetailBattleLogListSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndEnemyReportMenu.OnDropItemListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndEnemyReportMenu_OnDropItemListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndEnemyReportMenu_OnDropItemListSetupItem) == 0x000008, "Wrong alignment on EndEnemyReportMenu_OnDropItemListSetupItem");
static_assert(sizeof(EndEnemyReportMenu_OnDropItemListSetupItem) == 0x000010, "Wrong size on EndEnemyReportMenu_OnDropItemListSetupItem");
static_assert(offsetof(EndEnemyReportMenu_OnDropItemListSetupItem, ItemWidget) == 0x000000, "Member 'EndEnemyReportMenu_OnDropItemListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndEnemyReportMenu_OnDropItemListSetupItem, CellIndex) == 0x000008, "Member 'EndEnemyReportMenu_OnDropItemListSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndEnemyReportMenu.OnEnemyListMeasureItem
// 0x000C (0x000C - 0x0000)
struct EndEnemyReportMenu_OnEnemyListMeasureItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndEnemyReportMenu_OnEnemyListMeasureItem) == 0x000004, "Wrong alignment on EndEnemyReportMenu_OnEnemyListMeasureItem");
static_assert(sizeof(EndEnemyReportMenu_OnEnemyListMeasureItem) == 0x00000C, "Wrong size on EndEnemyReportMenu_OnEnemyListMeasureItem");
static_assert(offsetof(EndEnemyReportMenu_OnEnemyListMeasureItem, CellIndex) == 0x000000, "Member 'EndEnemyReportMenu_OnEnemyListMeasureItem::CellIndex' has a wrong offset!");
static_assert(offsetof(EndEnemyReportMenu_OnEnemyListMeasureItem, ReturnValue) == 0x000004, "Member 'EndEnemyReportMenu_OnEnemyListMeasureItem::ReturnValue' has a wrong offset!");

// Function EndGame.EndEnemyReportMenu.OnEnemyListPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndEnemyReportMenu_OnEnemyListPressedItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndEnemyReportMenu_OnEnemyListPressedItem) == 0x000004, "Wrong alignment on EndEnemyReportMenu_OnEnemyListPressedItem");
static_assert(sizeof(EndEnemyReportMenu_OnEnemyListPressedItem) == 0x000004, "Wrong size on EndEnemyReportMenu_OnEnemyListPressedItem");
static_assert(offsetof(EndEnemyReportMenu_OnEnemyListPressedItem, CellIndex) == 0x000000, "Member 'EndEnemyReportMenu_OnEnemyListPressedItem::CellIndex' has a wrong offset!");

// Function EndGame.EndEnemyReportMenu.OnEnemyListSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndEnemyReportMenu_OnEnemyListSelectedIndexChanged final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndEnemyReportMenu_OnEnemyListSelectedIndexChanged) == 0x000004, "Wrong alignment on EndEnemyReportMenu_OnEnemyListSelectedIndexChanged");
static_assert(sizeof(EndEnemyReportMenu_OnEnemyListSelectedIndexChanged) == 0x000004, "Wrong size on EndEnemyReportMenu_OnEnemyListSelectedIndexChanged");
static_assert(offsetof(EndEnemyReportMenu_OnEnemyListSelectedIndexChanged, CellIndex) == 0x000000, "Member 'EndEnemyReportMenu_OnEnemyListSelectedIndexChanged::CellIndex' has a wrong offset!");

// Function EndGame.EndEnemyReportMenu.OnEnemyListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndEnemyReportMenu_OnEnemyListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndEnemyReportMenu_OnEnemyListSetupItem) == 0x000008, "Wrong alignment on EndEnemyReportMenu_OnEnemyListSetupItem");
static_assert(sizeof(EndEnemyReportMenu_OnEnemyListSetupItem) == 0x000010, "Wrong size on EndEnemyReportMenu_OnEnemyListSetupItem");
static_assert(offsetof(EndEnemyReportMenu_OnEnemyListSetupItem, ItemWidget) == 0x000000, "Member 'EndEnemyReportMenu_OnEnemyListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndEnemyReportMenu_OnEnemyListSetupItem, CellIndex) == 0x000008, "Member 'EndEnemyReportMenu_OnEnemyListSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndEnemyReportMenu.OnRareDropItemListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndEnemyReportMenu_OnRareDropItemListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndEnemyReportMenu_OnRareDropItemListSetupItem) == 0x000008, "Wrong alignment on EndEnemyReportMenu_OnRareDropItemListSetupItem");
static_assert(sizeof(EndEnemyReportMenu_OnRareDropItemListSetupItem) == 0x000010, "Wrong size on EndEnemyReportMenu_OnRareDropItemListSetupItem");
static_assert(offsetof(EndEnemyReportMenu_OnRareDropItemListSetupItem, ItemWidget) == 0x000000, "Member 'EndEnemyReportMenu_OnRareDropItemListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndEnemyReportMenu_OnRareDropItemListSetupItem, CellIndex) == 0x000008, "Member 'EndEnemyReportMenu_OnRareDropItemListSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndEnemyReportMenu.OnResistanceIconListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndEnemyReportMenu_OnResistanceIconListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndEnemyReportMenu_OnResistanceIconListSetupItem) == 0x000008, "Wrong alignment on EndEnemyReportMenu_OnResistanceIconListSetupItem");
static_assert(sizeof(EndEnemyReportMenu_OnResistanceIconListSetupItem) == 0x000010, "Wrong size on EndEnemyReportMenu_OnResistanceIconListSetupItem");
static_assert(offsetof(EndEnemyReportMenu_OnResistanceIconListSetupItem, ItemWidget) == 0x000000, "Member 'EndEnemyReportMenu_OnResistanceIconListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndEnemyReportMenu_OnResistanceIconListSetupItem, CellIndex) == 0x000008, "Member 'EndEnemyReportMenu_OnResistanceIconListSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndEnemyReportMenu.OnResistanceListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndEnemyReportMenu_OnResistanceListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndEnemyReportMenu_OnResistanceListSetupItem) == 0x000008, "Wrong alignment on EndEnemyReportMenu_OnResistanceListSetupItem");
static_assert(sizeof(EndEnemyReportMenu_OnResistanceListSetupItem) == 0x000010, "Wrong size on EndEnemyReportMenu_OnResistanceListSetupItem");
static_assert(offsetof(EndEnemyReportMenu_OnResistanceListSetupItem, ItemWidget) == 0x000000, "Member 'EndEnemyReportMenu_OnResistanceListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndEnemyReportMenu_OnResistanceListSetupItem, CellIndex) == 0x000008, "Member 'EndEnemyReportMenu_OnResistanceListSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndEnemyReportMenu.OnStealListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndEnemyReportMenu_OnStealListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndEnemyReportMenu_OnStealListSetupItem) == 0x000008, "Wrong alignment on EndEnemyReportMenu_OnStealListSetupItem");
static_assert(sizeof(EndEnemyReportMenu_OnStealListSetupItem) == 0x000010, "Wrong size on EndEnemyReportMenu_OnStealListSetupItem");
static_assert(offsetof(EndEnemyReportMenu_OnStealListSetupItem, ItemWidget) == 0x000000, "Member 'EndEnemyReportMenu_OnStealListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndEnemyReportMenu_OnStealListSetupItem, CellIndex) == 0x000008, "Member 'EndEnemyReportMenu_OnStealListSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndBattleAIEN9000Controller.AddChildSyncAction
// 0x0020 (0x0020 - 0x0000)
struct EndBattleAIEN9000Controller_AddChildSyncAction final
{
public:
	class FName                                   parentSyncActionID;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   childSyncActionID;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AEndCharacter*                          ownerChara;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AEndCharacter*                          targetChara;                                       // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIEN9000Controller_AddChildSyncAction) == 0x000008, "Wrong alignment on EndBattleAIEN9000Controller_AddChildSyncAction");
static_assert(sizeof(EndBattleAIEN9000Controller_AddChildSyncAction) == 0x000020, "Wrong size on EndBattleAIEN9000Controller_AddChildSyncAction");
static_assert(offsetof(EndBattleAIEN9000Controller_AddChildSyncAction, parentSyncActionID) == 0x000000, "Member 'EndBattleAIEN9000Controller_AddChildSyncAction::parentSyncActionID' has a wrong offset!");
static_assert(offsetof(EndBattleAIEN9000Controller_AddChildSyncAction, childSyncActionID) == 0x000008, "Member 'EndBattleAIEN9000Controller_AddChildSyncAction::childSyncActionID' has a wrong offset!");
static_assert(offsetof(EndBattleAIEN9000Controller_AddChildSyncAction, ownerChara) == 0x000010, "Member 'EndBattleAIEN9000Controller_AddChildSyncAction::ownerChara' has a wrong offset!");
static_assert(offsetof(EndBattleAIEN9000Controller_AddChildSyncAction, targetChara) == 0x000018, "Member 'EndBattleAIEN9000Controller_AddChildSyncAction::targetChara' has a wrong offset!");

// Function EndGame.EndBattleAIEN9000Controller.CreateSyncActionPlayFromLoop
// 0x0050 (0x0050 - 0x0000)
struct EndBattleAIEN9000Controller_CreateSyncActionPlayFromLoop final
{
public:
	class FName                                   parentSyncActionID;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   childSyncActionID1;                                // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   childSyncActionID2;                                // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   childSyncActionID3;                                // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   childSyncActionID4;                                // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   childOwnerCharaName1;                              // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   childOwnerCharaName2;                              // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   childOwnerCharaName3;                              // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   childOwnerCharaName4;                              // 0x0040(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TargetCharaName;                                   // 0x0048(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIEN9000Controller_CreateSyncActionPlayFromLoop) == 0x000004, "Wrong alignment on EndBattleAIEN9000Controller_CreateSyncActionPlayFromLoop");
static_assert(sizeof(EndBattleAIEN9000Controller_CreateSyncActionPlayFromLoop) == 0x000050, "Wrong size on EndBattleAIEN9000Controller_CreateSyncActionPlayFromLoop");
static_assert(offsetof(EndBattleAIEN9000Controller_CreateSyncActionPlayFromLoop, parentSyncActionID) == 0x000000, "Member 'EndBattleAIEN9000Controller_CreateSyncActionPlayFromLoop::parentSyncActionID' has a wrong offset!");
static_assert(offsetof(EndBattleAIEN9000Controller_CreateSyncActionPlayFromLoop, childSyncActionID1) == 0x000008, "Member 'EndBattleAIEN9000Controller_CreateSyncActionPlayFromLoop::childSyncActionID1' has a wrong offset!");
static_assert(offsetof(EndBattleAIEN9000Controller_CreateSyncActionPlayFromLoop, childSyncActionID2) == 0x000010, "Member 'EndBattleAIEN9000Controller_CreateSyncActionPlayFromLoop::childSyncActionID2' has a wrong offset!");
static_assert(offsetof(EndBattleAIEN9000Controller_CreateSyncActionPlayFromLoop, childSyncActionID3) == 0x000018, "Member 'EndBattleAIEN9000Controller_CreateSyncActionPlayFromLoop::childSyncActionID3' has a wrong offset!");
static_assert(offsetof(EndBattleAIEN9000Controller_CreateSyncActionPlayFromLoop, childSyncActionID4) == 0x000020, "Member 'EndBattleAIEN9000Controller_CreateSyncActionPlayFromLoop::childSyncActionID4' has a wrong offset!");
static_assert(offsetof(EndBattleAIEN9000Controller_CreateSyncActionPlayFromLoop, childOwnerCharaName1) == 0x000028, "Member 'EndBattleAIEN9000Controller_CreateSyncActionPlayFromLoop::childOwnerCharaName1' has a wrong offset!");
static_assert(offsetof(EndBattleAIEN9000Controller_CreateSyncActionPlayFromLoop, childOwnerCharaName2) == 0x000030, "Member 'EndBattleAIEN9000Controller_CreateSyncActionPlayFromLoop::childOwnerCharaName2' has a wrong offset!");
static_assert(offsetof(EndBattleAIEN9000Controller_CreateSyncActionPlayFromLoop, childOwnerCharaName3) == 0x000038, "Member 'EndBattleAIEN9000Controller_CreateSyncActionPlayFromLoop::childOwnerCharaName3' has a wrong offset!");
static_assert(offsetof(EndBattleAIEN9000Controller_CreateSyncActionPlayFromLoop, childOwnerCharaName4) == 0x000040, "Member 'EndBattleAIEN9000Controller_CreateSyncActionPlayFromLoop::childOwnerCharaName4' has a wrong offset!");
static_assert(offsetof(EndBattleAIEN9000Controller_CreateSyncActionPlayFromLoop, TargetCharaName) == 0x000048, "Member 'EndBattleAIEN9000Controller_CreateSyncActionPlayFromLoop::TargetCharaName' has a wrong offset!");

// Function EndGame.EndBattleAIEN9000Controller.DisappearChildSyncAction
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAIEN9000Controller_DisappearChildSyncAction final
{
public:
	class FName                                   parentSyncActionID;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AEndCharacter*                          parentOwnerChara;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIEN9000Controller_DisappearChildSyncAction) == 0x000008, "Wrong alignment on EndBattleAIEN9000Controller_DisappearChildSyncAction");
static_assert(sizeof(EndBattleAIEN9000Controller_DisappearChildSyncAction) == 0x000010, "Wrong size on EndBattleAIEN9000Controller_DisappearChildSyncAction");
static_assert(offsetof(EndBattleAIEN9000Controller_DisappearChildSyncAction, parentSyncActionID) == 0x000000, "Member 'EndBattleAIEN9000Controller_DisappearChildSyncAction::parentSyncActionID' has a wrong offset!");
static_assert(offsetof(EndBattleAIEN9000Controller_DisappearChildSyncAction, parentOwnerChara) == 0x000008, "Member 'EndBattleAIEN9000Controller_DisappearChildSyncAction::parentOwnerChara' has a wrong offset!");

// Function EndGame.EndBattleAIEN9000Controller.ResetEndCutSceneCorrectionHeight
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAIEN9000Controller_ResetEndCutSceneCorrectionHeight final
{
public:
	class FName                                   CharaName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIEN9000Controller_ResetEndCutSceneCorrectionHeight) == 0x000004, "Wrong alignment on EndBattleAIEN9000Controller_ResetEndCutSceneCorrectionHeight");
static_assert(sizeof(EndBattleAIEN9000Controller_ResetEndCutSceneCorrectionHeight) == 0x000008, "Wrong size on EndBattleAIEN9000Controller_ResetEndCutSceneCorrectionHeight");
static_assert(offsetof(EndBattleAIEN9000Controller_ResetEndCutSceneCorrectionHeight, CharaName) == 0x000000, "Member 'EndBattleAIEN9000Controller_ResetEndCutSceneCorrectionHeight::CharaName' has a wrong offset!");

// Function EndGame.EndBattleAIEN9000Controller.ResetEndCutSceneTransformCorrection
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAIEN9000Controller_ResetEndCutSceneTransformCorrection final
{
public:
	class FName                                   CharaName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIEN9000Controller_ResetEndCutSceneTransformCorrection) == 0x000004, "Wrong alignment on EndBattleAIEN9000Controller_ResetEndCutSceneTransformCorrection");
static_assert(sizeof(EndBattleAIEN9000Controller_ResetEndCutSceneTransformCorrection) == 0x000008, "Wrong size on EndBattleAIEN9000Controller_ResetEndCutSceneTransformCorrection");
static_assert(offsetof(EndBattleAIEN9000Controller_ResetEndCutSceneTransformCorrection, CharaName) == 0x000000, "Member 'EndBattleAIEN9000Controller_ResetEndCutSceneTransformCorrection::CharaName' has a wrong offset!");

// Function EndGame.EndBattleAIEN9000Controller.SetDisableTarget
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAIEN9000Controller_SetDisableTarget final
{
public:
	bool                                          disable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIEN9000Controller_SetDisableTarget) == 0x000001, "Wrong alignment on EndBattleAIEN9000Controller_SetDisableTarget");
static_assert(sizeof(EndBattleAIEN9000Controller_SetDisableTarget) == 0x000001, "Wrong size on EndBattleAIEN9000Controller_SetDisableTarget");
static_assert(offsetof(EndBattleAIEN9000Controller_SetDisableTarget, disable) == 0x000000, "Member 'EndBattleAIEN9000Controller_SetDisableTarget::disable' has a wrong offset!");

// Function EndGame.EndBattleAIEN9000Controller.SetLineDefence
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAIEN9000Controller_SetLineDefence final
{
public:
	bool                                          InVisible;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIEN9000Controller_SetLineDefence) == 0x000001, "Wrong alignment on EndBattleAIEN9000Controller_SetLineDefence");
static_assert(sizeof(EndBattleAIEN9000Controller_SetLineDefence) == 0x000001, "Wrong size on EndBattleAIEN9000Controller_SetLineDefence");
static_assert(offsetof(EndBattleAIEN9000Controller_SetLineDefence, InVisible) == 0x000000, "Member 'EndBattleAIEN9000Controller_SetLineDefence::InVisible' has a wrong offset!");

// Function EndGame.EndBattleAIEN9000Controller.SetLineDefencePoint
// 0x0018 (0x0018 - 0x0000)
struct EndBattleAIEN9000Controller_SetLineDefencePoint final
{
public:
	struct FVector                                PointA;                                            // 0x0000(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PointB;                                            // 0x000C(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIEN9000Controller_SetLineDefencePoint) == 0x000004, "Wrong alignment on EndBattleAIEN9000Controller_SetLineDefencePoint");
static_assert(sizeof(EndBattleAIEN9000Controller_SetLineDefencePoint) == 0x000018, "Wrong size on EndBattleAIEN9000Controller_SetLineDefencePoint");
static_assert(offsetof(EndBattleAIEN9000Controller_SetLineDefencePoint, PointA) == 0x000000, "Member 'EndBattleAIEN9000Controller_SetLineDefencePoint::PointA' has a wrong offset!");
static_assert(offsetof(EndBattleAIEN9000Controller_SetLineDefencePoint, PointB) == 0x00000C, "Member 'EndBattleAIEN9000Controller_SetLineDefencePoint::PointB' has a wrong offset!");

// Function EndGame.EndBattleAIEN2007_00Controller.OnRequestSmogDash
// 0x0004 (0x0004 - 0x0000)
struct EndBattleAIEN2007_00Controller_OnRequestSmogDash final
{
public:
	int32                                         InCount;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIEN2007_00Controller_OnRequestSmogDash) == 0x000004, "Wrong alignment on EndBattleAIEN2007_00Controller_OnRequestSmogDash");
static_assert(sizeof(EndBattleAIEN2007_00Controller_OnRequestSmogDash) == 0x000004, "Wrong size on EndBattleAIEN2007_00Controller_OnRequestSmogDash");
static_assert(offsetof(EndBattleAIEN2007_00Controller_OnRequestSmogDash, InCount) == 0x000000, "Member 'EndBattleAIEN2007_00Controller_OnRequestSmogDash::InCount' has a wrong offset!");

// Function EndGame.EndBattleAIEN2007_00Controller.SetNextSmogDash
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAIEN2007_00Controller_SetNextSmogDash final
{
public:
	float                                         InDistance;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InAngle;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIEN2007_00Controller_SetNextSmogDash) == 0x000004, "Wrong alignment on EndBattleAIEN2007_00Controller_SetNextSmogDash");
static_assert(sizeof(EndBattleAIEN2007_00Controller_SetNextSmogDash) == 0x000008, "Wrong size on EndBattleAIEN2007_00Controller_SetNextSmogDash");
static_assert(offsetof(EndBattleAIEN2007_00Controller_SetNextSmogDash, InDistance) == 0x000000, "Member 'EndBattleAIEN2007_00Controller_SetNextSmogDash::InDistance' has a wrong offset!");
static_assert(offsetof(EndBattleAIEN2007_00Controller_SetNextSmogDash, InAngle) == 0x000004, "Member 'EndBattleAIEN2007_00Controller_SetNextSmogDash::InAngle' has a wrong offset!");

// Function EndGame.EndBattleAISU0002_02Controller.SetTargetDamageSource
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAISU0002_02Controller_SetTargetDamageSource final
{
public:
	class UEndBattleDamageSourceComponent*        InDamageSource;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAISU0002_02Controller_SetTargetDamageSource) == 0x000008, "Wrong alignment on EndBattleAISU0002_02Controller_SetTargetDamageSource");
static_assert(sizeof(EndBattleAISU0002_02Controller_SetTargetDamageSource) == 0x000008, "Wrong size on EndBattleAISU0002_02Controller_SetTargetDamageSource");
static_assert(offsetof(EndBattleAISU0002_02Controller_SetTargetDamageSource, InDamageSource) == 0x000000, "Member 'EndBattleAISU0002_02Controller_SetTargetDamageSource::InDamageSource' has a wrong offset!");

// Function EndGame.EndEnvironmentPhysicsStaticMeshActor.OnComponentHit
// 0x00B0 (0x00B0 - 0x0000)
struct EndEnvironmentPhysicsStaticMeshActor_OnComponentHit final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0018(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             Hit;                                               // 0x0028(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndEnvironmentPhysicsStaticMeshActor_OnComponentHit) == 0x000008, "Wrong alignment on EndEnvironmentPhysicsStaticMeshActor_OnComponentHit");
static_assert(sizeof(EndEnvironmentPhysicsStaticMeshActor_OnComponentHit) == 0x0000B0, "Wrong size on EndEnvironmentPhysicsStaticMeshActor_OnComponentHit");
static_assert(offsetof(EndEnvironmentPhysicsStaticMeshActor_OnComponentHit, HitComponent) == 0x000000, "Member 'EndEnvironmentPhysicsStaticMeshActor_OnComponentHit::HitComponent' has a wrong offset!");
static_assert(offsetof(EndEnvironmentPhysicsStaticMeshActor_OnComponentHit, OtherActor) == 0x000008, "Member 'EndEnvironmentPhysicsStaticMeshActor_OnComponentHit::OtherActor' has a wrong offset!");
static_assert(offsetof(EndEnvironmentPhysicsStaticMeshActor_OnComponentHit, OtherComp) == 0x000010, "Member 'EndEnvironmentPhysicsStaticMeshActor_OnComponentHit::OtherComp' has a wrong offset!");
static_assert(offsetof(EndEnvironmentPhysicsStaticMeshActor_OnComponentHit, NormalImpulse) == 0x000018, "Member 'EndEnvironmentPhysicsStaticMeshActor_OnComponentHit::NormalImpulse' has a wrong offset!");
static_assert(offsetof(EndEnvironmentPhysicsStaticMeshActor_OnComponentHit, Hit) == 0x000028, "Member 'EndEnvironmentPhysicsStaticMeshActor_OnComponentHit::Hit' has a wrong offset!");

// Function EndGame.EndBattleAISononController.RequestLinkAbility
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAISononController_RequestLinkAbility final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndLinkAbilityType                           Type;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSupport;                                          // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAerial;                                           // 0x000A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDoWithoutTarget;                                  // 0x000B(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInstance;                                         // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000D(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAISononController_RequestLinkAbility) == 0x000004, "Wrong alignment on EndBattleAISononController_RequestLinkAbility");
static_assert(sizeof(EndBattleAISononController_RequestLinkAbility) == 0x000010, "Wrong size on EndBattleAISononController_RequestLinkAbility");
static_assert(offsetof(EndBattleAISononController_RequestLinkAbility, ID) == 0x000000, "Member 'EndBattleAISononController_RequestLinkAbility::ID' has a wrong offset!");
static_assert(offsetof(EndBattleAISononController_RequestLinkAbility, Type) == 0x000008, "Member 'EndBattleAISononController_RequestLinkAbility::Type' has a wrong offset!");
static_assert(offsetof(EndBattleAISononController_RequestLinkAbility, bSupport) == 0x000009, "Member 'EndBattleAISononController_RequestLinkAbility::bSupport' has a wrong offset!");
static_assert(offsetof(EndBattleAISononController_RequestLinkAbility, bAerial) == 0x00000A, "Member 'EndBattleAISononController_RequestLinkAbility::bAerial' has a wrong offset!");
static_assert(offsetof(EndBattleAISononController_RequestLinkAbility, bDoWithoutTarget) == 0x00000B, "Member 'EndBattleAISononController_RequestLinkAbility::bDoWithoutTarget' has a wrong offset!");
static_assert(offsetof(EndBattleAISononController_RequestLinkAbility, bInstance) == 0x00000C, "Member 'EndBattleAISononController_RequestLinkAbility::bInstance' has a wrong offset!");
static_assert(offsetof(EndBattleAISononController_RequestLinkAbility, ReturnValue) == 0x00000D, "Member 'EndBattleAISononController_RequestLinkAbility::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAISU0005Controller.OverrideTargetLocation
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAISU0005Controller_OverrideTargetLocation final
{
public:
	bool                                          enableOverride;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                overrideLocation;                                  // 0x0004(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAISU0005Controller_OverrideTargetLocation) == 0x000004, "Wrong alignment on EndBattleAISU0005Controller_OverrideTargetLocation");
static_assert(sizeof(EndBattleAISU0005Controller_OverrideTargetLocation) == 0x000010, "Wrong size on EndBattleAISU0005Controller_OverrideTargetLocation");
static_assert(offsetof(EndBattleAISU0005Controller_OverrideTargetLocation, enableOverride) == 0x000000, "Member 'EndBattleAISU0005Controller_OverrideTargetLocation::enableOverride' has a wrong offset!");
static_assert(offsetof(EndBattleAISU0005Controller_OverrideTargetLocation, overrideLocation) == 0x000004, "Member 'EndBattleAISU0005Controller_OverrideTargetLocation::overrideLocation' has a wrong offset!");

// Function EndGame.EndBattleAISU0005Controller.ResetAIPCOverrideCautionDistance
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAISU0005Controller_ResetAIPCOverrideCautionDistance final
{
public:
	EPlayerType                                   PlayerType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAISU0005Controller_ResetAIPCOverrideCautionDistance) == 0x000001, "Wrong alignment on EndBattleAISU0005Controller_ResetAIPCOverrideCautionDistance");
static_assert(sizeof(EndBattleAISU0005Controller_ResetAIPCOverrideCautionDistance) == 0x000001, "Wrong size on EndBattleAISU0005Controller_ResetAIPCOverrideCautionDistance");
static_assert(offsetof(EndBattleAISU0005Controller_ResetAIPCOverrideCautionDistance, PlayerType) == 0x000000, "Member 'EndBattleAISU0005Controller_ResetAIPCOverrideCautionDistance::PlayerType' has a wrong offset!");

// Function EndGame.EndBattleAISU0005Controller.SetAIPCOverrideCautionDistance
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAISU0005Controller_SetAIPCOverrideCautionDistance final
{
public:
	EPlayerType                                   PlayerType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Distance;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAISU0005Controller_SetAIPCOverrideCautionDistance) == 0x000004, "Wrong alignment on EndBattleAISU0005Controller_SetAIPCOverrideCautionDistance");
static_assert(sizeof(EndBattleAISU0005Controller_SetAIPCOverrideCautionDistance) == 0x000008, "Wrong size on EndBattleAISU0005Controller_SetAIPCOverrideCautionDistance");
static_assert(offsetof(EndBattleAISU0005Controller_SetAIPCOverrideCautionDistance, PlayerType) == 0x000000, "Member 'EndBattleAISU0005Controller_SetAIPCOverrideCautionDistance::PlayerType' has a wrong offset!");
static_assert(offsetof(EndBattleAISU0005Controller_SetAIPCOverrideCautionDistance, Distance) == 0x000004, "Member 'EndBattleAISU0005Controller_SetAIPCOverrideCautionDistance::Distance' has a wrong offset!");

// Function EndGame.EndBattleAISU0004Controller.RequestTornadoFollowLocation
// 0x0014 (0x0014 - 0x0000)
struct EndBattleAISU0004Controller_RequestTornadoFollowLocation final
{
public:
	int32                                         InIndex;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InLocation;                                        // 0x0004(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InTolerance;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAISU0004Controller_RequestTornadoFollowLocation) == 0x000004, "Wrong alignment on EndBattleAISU0004Controller_RequestTornadoFollowLocation");
static_assert(sizeof(EndBattleAISU0004Controller_RequestTornadoFollowLocation) == 0x000014, "Wrong size on EndBattleAISU0004Controller_RequestTornadoFollowLocation");
static_assert(offsetof(EndBattleAISU0004Controller_RequestTornadoFollowLocation, InIndex) == 0x000000, "Member 'EndBattleAISU0004Controller_RequestTornadoFollowLocation::InIndex' has a wrong offset!");
static_assert(offsetof(EndBattleAISU0004Controller_RequestTornadoFollowLocation, InLocation) == 0x000004, "Member 'EndBattleAISU0004Controller_RequestTornadoFollowLocation::InLocation' has a wrong offset!");
static_assert(offsetof(EndBattleAISU0004Controller_RequestTornadoFollowLocation, InTolerance) == 0x000010, "Member 'EndBattleAISU0004Controller_RequestTornadoFollowLocation::InTolerance' has a wrong offset!");

// Function EndGame.EndBattleAISU0004Controller.UpdateAirTurn
// 0x0004 (0x0004 - 0x0000)
struct EndBattleAISU0004Controller_UpdateAirTurn final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAISU0004Controller_UpdateAirTurn) == 0x000004, "Wrong alignment on EndBattleAISU0004Controller_UpdateAirTurn");
static_assert(sizeof(EndBattleAISU0004Controller_UpdateAirTurn) == 0x000004, "Wrong size on EndBattleAISU0004Controller_UpdateAirTurn");
static_assert(offsetof(EndBattleAISU0004Controller_UpdateAirTurn, DeltaTime) == 0x000000, "Member 'EndBattleAISU0004Controller_UpdateAirTurn::DeltaTime' has a wrong offset!");

// Function EndGame.EndBattleAISummonBaseController.OnChangeBattleBehavior
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAISummonBaseController_OnChangeBattleBehavior final
{
public:
	ESummonBattleBehavior                         NewBattleBehavior;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAISummonBaseController_OnChangeBattleBehavior) == 0x000001, "Wrong alignment on EndBattleAISummonBaseController_OnChangeBattleBehavior");
static_assert(sizeof(EndBattleAISummonBaseController_OnChangeBattleBehavior) == 0x000001, "Wrong size on EndBattleAISummonBaseController_OnChangeBattleBehavior");
static_assert(offsetof(EndBattleAISummonBaseController_OnChangeBattleBehavior, NewBattleBehavior) == 0x000000, "Member 'EndBattleAISummonBaseController_OnChangeBattleBehavior::NewBattleBehavior' has a wrong offset!");

// Function EndGame.EndBattleAISummonBaseController.RequestWarpTo
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAISummonBaseController_RequestWarpTo final
{
public:
	struct FVector                                WarpLocation;                                      // 0x0000(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAISummonBaseController_RequestWarpTo) == 0x000004, "Wrong alignment on EndBattleAISummonBaseController_RequestWarpTo");
static_assert(sizeof(EndBattleAISummonBaseController_RequestWarpTo) == 0x000010, "Wrong size on EndBattleAISummonBaseController_RequestWarpTo");
static_assert(offsetof(EndBattleAISummonBaseController_RequestWarpTo, WarpLocation) == 0x000000, "Member 'EndBattleAISummonBaseController_RequestWarpTo::WarpLocation' has a wrong offset!");
static_assert(offsetof(EndBattleAISummonBaseController_RequestWarpTo, ReturnValue) == 0x00000C, "Member 'EndBattleAISummonBaseController_RequestWarpTo::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAISummonBaseController.SetDrawPause
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAISummonBaseController_SetDrawPause final
{
public:
	bool                                          bFlag;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAISummonBaseController_SetDrawPause) == 0x000001, "Wrong alignment on EndBattleAISummonBaseController_SetDrawPause");
static_assert(sizeof(EndBattleAISummonBaseController_SetDrawPause) == 0x000001, "Wrong size on EndBattleAISummonBaseController_SetDrawPause");
static_assert(offsetof(EndBattleAISummonBaseController_SetDrawPause, bFlag) == 0x000000, "Member 'EndBattleAISummonBaseController_SetDrawPause::bFlag' has a wrong offset!");

// Function EndGame.EndBattleAISU0004_02Controller.IsFollowLocation
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAISU0004_02Controller_IsFollowLocation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAISU0004_02Controller_IsFollowLocation) == 0x000001, "Wrong alignment on EndBattleAISU0004_02Controller_IsFollowLocation");
static_assert(sizeof(EndBattleAISU0004_02Controller_IsFollowLocation) == 0x000001, "Wrong size on EndBattleAISU0004_02Controller_IsFollowLocation");
static_assert(offsetof(EndBattleAISU0004_02Controller_IsFollowLocation, ReturnValue) == 0x000000, "Member 'EndBattleAISU0004_02Controller_IsFollowLocation::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAISU0004_02Controller.RequestFollowLocation
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAISU0004_02Controller_RequestFollowLocation final
{
public:
	struct FVector                                InLocation;                                        // 0x0000(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InTolerance;                                       // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAISU0004_02Controller_RequestFollowLocation) == 0x000004, "Wrong alignment on EndBattleAISU0004_02Controller_RequestFollowLocation");
static_assert(sizeof(EndBattleAISU0004_02Controller_RequestFollowLocation) == 0x000010, "Wrong size on EndBattleAISU0004_02Controller_RequestFollowLocation");
static_assert(offsetof(EndBattleAISU0004_02Controller_RequestFollowLocation, InLocation) == 0x000000, "Member 'EndBattleAISU0004_02Controller_RequestFollowLocation::InLocation' has a wrong offset!");
static_assert(offsetof(EndBattleAISU0004_02Controller_RequestFollowLocation, InTolerance) == 0x00000C, "Member 'EndBattleAISU0004_02Controller_RequestFollowLocation::InTolerance' has a wrong offset!");

// Function EndGame.EndBattleAISU0004_02Controller.RequestFollowLocationFromName
// 0x000C (0x000C - 0x0000)
struct EndBattleAISU0004_02Controller_RequestFollowLocationFromName final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InTolerance;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAISU0004_02Controller_RequestFollowLocationFromName) == 0x000004, "Wrong alignment on EndBattleAISU0004_02Controller_RequestFollowLocationFromName");
static_assert(sizeof(EndBattleAISU0004_02Controller_RequestFollowLocationFromName) == 0x00000C, "Wrong size on EndBattleAISU0004_02Controller_RequestFollowLocationFromName");
static_assert(offsetof(EndBattleAISU0004_02Controller_RequestFollowLocationFromName, InName) == 0x000000, "Member 'EndBattleAISU0004_02Controller_RequestFollowLocationFromName::InName' has a wrong offset!");
static_assert(offsetof(EndBattleAISU0004_02Controller_RequestFollowLocationFromName, InTolerance) == 0x000008, "Member 'EndBattleAISU0004_02Controller_RequestFollowLocationFromName::InTolerance' has a wrong offset!");

// Function EndGame.EndSoundAPI.CallEvent
// 0x0001 (0x0001 - 0x0000)
struct EndSoundAPI_CallEvent final
{
public:
	EEndSoundLayer                                TargetLayer;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndSoundAPI_CallEvent) == 0x000001, "Wrong alignment on EndSoundAPI_CallEvent");
static_assert(sizeof(EndSoundAPI_CallEvent) == 0x000001, "Wrong size on EndSoundAPI_CallEvent");
static_assert(offsetof(EndSoundAPI_CallEvent, TargetLayer) == 0x000000, "Member 'EndSoundAPI_CallEvent::TargetLayer' has a wrong offset!");

// Function EndGame.EndSoundAPI.SetExternalParameter
// 0x000C (0x000C - 0x0000)
struct EndSoundAPI_SetExternalParameter final
{
public:
	class FName                                   ParameterName;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndSoundAPI_SetExternalParameter) == 0x000004, "Wrong alignment on EndSoundAPI_SetExternalParameter");
static_assert(sizeof(EndSoundAPI_SetExternalParameter) == 0x00000C, "Wrong size on EndSoundAPI_SetExternalParameter");
static_assert(offsetof(EndSoundAPI_SetExternalParameter, ParameterName) == 0x000000, "Member 'EndSoundAPI_SetExternalParameter::ParameterName' has a wrong offset!");
static_assert(offsetof(EndSoundAPI_SetExternalParameter, Value) == 0x000008, "Member 'EndSoundAPI_SetExternalParameter::Value' has a wrong offset!");

// Function EndGame.EndBattleAISU1000BaseController.GetLightningStrikeTargetLocation
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAISU1000BaseController_GetLightningStrikeTargetLocation final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0004(0x000C)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAISU1000BaseController_GetLightningStrikeTargetLocation) == 0x000004, "Wrong alignment on EndBattleAISU1000BaseController_GetLightningStrikeTargetLocation");
static_assert(sizeof(EndBattleAISU1000BaseController_GetLightningStrikeTargetLocation) == 0x000010, "Wrong size on EndBattleAISU1000BaseController_GetLightningStrikeTargetLocation");
static_assert(offsetof(EndBattleAISU1000BaseController_GetLightningStrikeTargetLocation, Index_0) == 0x000000, "Member 'EndBattleAISU1000BaseController_GetLightningStrikeTargetLocation::Index_0' has a wrong offset!");
static_assert(offsetof(EndBattleAISU1000BaseController_GetLightningStrikeTargetLocation, ReturnValue) == 0x000004, "Member 'EndBattleAISU1000BaseController_GetLightningStrikeTargetLocation::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAISU1000BaseController.SetHidePowerUpFX
// 0x0002 (0x0002 - 0x0000)
struct EndBattleAISU1000BaseController_SetHidePowerUpFX final
{
public:
	bool                                          bHide;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bImmediately;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAISU1000BaseController_SetHidePowerUpFX) == 0x000001, "Wrong alignment on EndBattleAISU1000BaseController_SetHidePowerUpFX");
static_assert(sizeof(EndBattleAISU1000BaseController_SetHidePowerUpFX) == 0x000002, "Wrong size on EndBattleAISU1000BaseController_SetHidePowerUpFX");
static_assert(offsetof(EndBattleAISU1000BaseController_SetHidePowerUpFX, bHide) == 0x000000, "Member 'EndBattleAISU1000BaseController_SetHidePowerUpFX::bHide' has a wrong offset!");
static_assert(offsetof(EndBattleAISU1000BaseController_SetHidePowerUpFX, bImmediately) == 0x000001, "Member 'EndBattleAISU1000BaseController_SetHidePowerUpFX::bImmediately' has a wrong offset!");

// Function EndGame.EndBattleAISU0009BaseController.CreateFlareDamage
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAISU0009BaseController_CreateFlareDamage final
{
public:
	class FName                                   ToTargetDamageID;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ToOthersDamageID;                                  // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAISU0009BaseController_CreateFlareDamage) == 0x000004, "Wrong alignment on EndBattleAISU0009BaseController_CreateFlareDamage");
static_assert(sizeof(EndBattleAISU0009BaseController_CreateFlareDamage) == 0x000010, "Wrong size on EndBattleAISU0009BaseController_CreateFlareDamage");
static_assert(offsetof(EndBattleAISU0009BaseController_CreateFlareDamage, ToTargetDamageID) == 0x000000, "Member 'EndBattleAISU0009BaseController_CreateFlareDamage::ToTargetDamageID' has a wrong offset!");
static_assert(offsetof(EndBattleAISU0009BaseController_CreateFlareDamage, ToOthersDamageID) == 0x000008, "Member 'EndBattleAISU0009BaseController_CreateFlareDamage::ToOthersDamageID' has a wrong offset!");

// Function EndGame.EndPartyAPI.CallTeleported
// 0x0018 (0x0018 - 0x0000)
struct EndPartyAPI_CallTeleported final
{
public:
	struct FVector                                NewLocation;                                       // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 InLeader;                                          // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndPartyAPI_CallTeleported) == 0x000008, "Wrong alignment on EndPartyAPI_CallTeleported");
static_assert(sizeof(EndPartyAPI_CallTeleported) == 0x000018, "Wrong size on EndPartyAPI_CallTeleported");
static_assert(offsetof(EndPartyAPI_CallTeleported, NewLocation) == 0x000000, "Member 'EndPartyAPI_CallTeleported::NewLocation' has a wrong offset!");
static_assert(offsetof(EndPartyAPI_CallTeleported, InLeader) == 0x000010, "Member 'EndPartyAPI_CallTeleported::InLeader' has a wrong offset!");

// Function EndGame.EndPartyAPI.ChangeActorToad
// 0x0001 (0x0001 - 0x0000)
struct EndPartyAPI_ChangeActorToad final
{
public:
	EPlayerType                                   Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndPartyAPI_ChangeActorToad) == 0x000001, "Wrong alignment on EndPartyAPI_ChangeActorToad");
static_assert(sizeof(EndPartyAPI_ChangeActorToad) == 0x000001, "Wrong size on EndPartyAPI_ChangeActorToad");
static_assert(offsetof(EndPartyAPI_ChangeActorToad, Type) == 0x000000, "Member 'EndPartyAPI_ChangeActorToad::Type' has a wrong offset!");

// Function EndGame.EndPartyAPI.CheckPlayerStream
// 0x0020 (0x0020 - 0x0000)
struct EndPartyAPI_CheckPlayerStream final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndPartyAPI_CheckPlayerStream) == 0x000008, "Wrong alignment on EndPartyAPI_CheckPlayerStream");
static_assert(sizeof(EndPartyAPI_CheckPlayerStream) == 0x000020, "Wrong size on EndPartyAPI_CheckPlayerStream");
static_assert(offsetof(EndPartyAPI_CheckPlayerStream, WorldContextObject) == 0x000000, "Member 'EndPartyAPI_CheckPlayerStream::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EndPartyAPI_CheckPlayerStream, LatentInfo) == 0x000008, "Member 'EndPartyAPI_CheckPlayerStream::LatentInfo' has a wrong offset!");

// Function EndGame.EndPartyAPI.GetArrivalPartyMemberCount
// 0x0004 (0x0004 - 0x0000)
struct EndPartyAPI_GetArrivalPartyMemberCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndPartyAPI_GetArrivalPartyMemberCount) == 0x000004, "Wrong alignment on EndPartyAPI_GetArrivalPartyMemberCount");
static_assert(sizeof(EndPartyAPI_GetArrivalPartyMemberCount) == 0x000004, "Wrong size on EndPartyAPI_GetArrivalPartyMemberCount");
static_assert(offsetof(EndPartyAPI_GetArrivalPartyMemberCount, ReturnValue) == 0x000000, "Member 'EndPartyAPI_GetArrivalPartyMemberCount::ReturnValue' has a wrong offset!");

// Function EndGame.EndPartyAPI.GetPartyLeader
// 0x0008 (0x0008 - 0x0000)
struct EndPartyAPI_GetPartyLeader final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndPartyAPI_GetPartyLeader) == 0x000008, "Wrong alignment on EndPartyAPI_GetPartyLeader");
static_assert(sizeof(EndPartyAPI_GetPartyLeader) == 0x000008, "Wrong size on EndPartyAPI_GetPartyLeader");
static_assert(offsetof(EndPartyAPI_GetPartyLeader, ReturnValue) == 0x000000, "Member 'EndPartyAPI_GetPartyLeader::ReturnValue' has a wrong offset!");

// Function EndGame.EndPartyAPI.GetPartyLeaderName
// 0x0008 (0x0008 - 0x0000)
struct EndPartyAPI_GetPartyLeaderName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndPartyAPI_GetPartyLeaderName) == 0x000004, "Wrong alignment on EndPartyAPI_GetPartyLeaderName");
static_assert(sizeof(EndPartyAPI_GetPartyLeaderName) == 0x000008, "Wrong size on EndPartyAPI_GetPartyLeaderName");
static_assert(offsetof(EndPartyAPI_GetPartyLeaderName, ReturnValue) == 0x000000, "Member 'EndPartyAPI_GetPartyLeaderName::ReturnValue' has a wrong offset!");

// Function EndGame.EndPartyAPI.GetPartyLeaderType
// 0x0001 (0x0001 - 0x0000)
struct EndPartyAPI_GetPartyLeaderType final
{
public:
	EPlayerType                                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndPartyAPI_GetPartyLeaderType) == 0x000001, "Wrong alignment on EndPartyAPI_GetPartyLeaderType");
static_assert(sizeof(EndPartyAPI_GetPartyLeaderType) == 0x000001, "Wrong size on EndPartyAPI_GetPartyLeaderType");
static_assert(offsetof(EndPartyAPI_GetPartyLeaderType, ReturnValue) == 0x000000, "Member 'EndPartyAPI_GetPartyLeaderType::ReturnValue' has a wrong offset!");

// Function EndGame.EndPartyAPI.GetPartyMember
// 0x0010 (0x0010 - 0x0000)
struct EndPartyAPI_GetPartyMember final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AEndCharacter*                          ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndPartyAPI_GetPartyMember) == 0x000008, "Wrong alignment on EndPartyAPI_GetPartyMember");
static_assert(sizeof(EndPartyAPI_GetPartyMember) == 0x000010, "Wrong size on EndPartyAPI_GetPartyMember");
static_assert(offsetof(EndPartyAPI_GetPartyMember, Index_0) == 0x000000, "Member 'EndPartyAPI_GetPartyMember::Index_0' has a wrong offset!");
static_assert(offsetof(EndPartyAPI_GetPartyMember, ReturnValue) == 0x000008, "Member 'EndPartyAPI_GetPartyMember::ReturnValue' has a wrong offset!");

// Function EndGame.EndPartyAPI.GetPartyMemberCount
// 0x0004 (0x0004 - 0x0000)
struct EndPartyAPI_GetPartyMemberCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndPartyAPI_GetPartyMemberCount) == 0x000004, "Wrong alignment on EndPartyAPI_GetPartyMemberCount");
static_assert(sizeof(EndPartyAPI_GetPartyMemberCount) == 0x000004, "Wrong size on EndPartyAPI_GetPartyMemberCount");
static_assert(offsetof(EndPartyAPI_GetPartyMemberCount, ReturnValue) == 0x000000, "Member 'EndPartyAPI_GetPartyMemberCount::ReturnValue' has a wrong offset!");

// Function EndGame.EndPartyAPI.GetPartyMemberCountForPartyStatus
// 0x0008 (0x0008 - 0x0000)
struct EndPartyAPI_GetPartyMemberCountForPartyStatus final
{
public:
	EPlayerStatus                                 findPlayerStatus;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndPartyAPI_GetPartyMemberCountForPartyStatus) == 0x000004, "Wrong alignment on EndPartyAPI_GetPartyMemberCountForPartyStatus");
static_assert(sizeof(EndPartyAPI_GetPartyMemberCountForPartyStatus) == 0x000008, "Wrong size on EndPartyAPI_GetPartyMemberCountForPartyStatus");
static_assert(offsetof(EndPartyAPI_GetPartyMemberCountForPartyStatus, findPlayerStatus) == 0x000000, "Member 'EndPartyAPI_GetPartyMemberCountForPartyStatus::findPlayerStatus' has a wrong offset!");
static_assert(offsetof(EndPartyAPI_GetPartyMemberCountForPartyStatus, ReturnValue) == 0x000004, "Member 'EndPartyAPI_GetPartyMemberCountForPartyStatus::ReturnValue' has a wrong offset!");

// Function EndGame.EndPartyAPI.GetPartyMembers
// 0x0010 (0x0010 - 0x0000)
struct EndPartyAPI_GetPartyMembers final
{
public:
	TArray<class AEndCharacter*>                  ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndPartyAPI_GetPartyMembers) == 0x000008, "Wrong alignment on EndPartyAPI_GetPartyMembers");
static_assert(sizeof(EndPartyAPI_GetPartyMembers) == 0x000010, "Wrong size on EndPartyAPI_GetPartyMembers");
static_assert(offsetof(EndPartyAPI_GetPartyMembers, ReturnValue) == 0x000000, "Member 'EndPartyAPI_GetPartyMembers::ReturnValue' has a wrong offset!");

// Function EndGame.EndPartyAPI.GetPartyMemberType
// 0x0008 (0x0008 - 0x0000)
struct EndPartyAPI_GetPartyMemberType final
{
public:
	int32                                         Slot;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlayerType                                   ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndPartyAPI_GetPartyMemberType) == 0x000004, "Wrong alignment on EndPartyAPI_GetPartyMemberType");
static_assert(sizeof(EndPartyAPI_GetPartyMemberType) == 0x000008, "Wrong size on EndPartyAPI_GetPartyMemberType");
static_assert(offsetof(EndPartyAPI_GetPartyMemberType, Slot) == 0x000000, "Member 'EndPartyAPI_GetPartyMemberType::Slot' has a wrong offset!");
static_assert(offsetof(EndPartyAPI_GetPartyMemberType, ReturnValue) == 0x000004, "Member 'EndPartyAPI_GetPartyMemberType::ReturnValue' has a wrong offset!");

// Function EndGame.EndPartyAPI.GetPlayerActor
// 0x0010 (0x0010 - 0x0000)
struct EndPartyAPI_GetPlayerActor final
{
public:
	EEquipmentType                                equipment;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlayerType                                   Type;                                              // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndPartyAPI_GetPlayerActor) == 0x000008, "Wrong alignment on EndPartyAPI_GetPlayerActor");
static_assert(sizeof(EndPartyAPI_GetPlayerActor) == 0x000010, "Wrong size on EndPartyAPI_GetPlayerActor");
static_assert(offsetof(EndPartyAPI_GetPlayerActor, equipment) == 0x000000, "Member 'EndPartyAPI_GetPlayerActor::equipment' has a wrong offset!");
static_assert(offsetof(EndPartyAPI_GetPlayerActor, Type) == 0x000001, "Member 'EndPartyAPI_GetPlayerActor::Type' has a wrong offset!");
static_assert(offsetof(EndPartyAPI_GetPlayerActor, ReturnValue) == 0x000008, "Member 'EndPartyAPI_GetPlayerActor::ReturnValue' has a wrong offset!");

// Function EndGame.EndPartyAPI.GetPlayerActorName
// 0x000C (0x000C - 0x0000)
struct EndPartyAPI_GetPlayerActorName final
{
public:
	EPlayerType                                   Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndPartyAPI_GetPlayerActorName) == 0x000004, "Wrong alignment on EndPartyAPI_GetPlayerActorName");
static_assert(sizeof(EndPartyAPI_GetPlayerActorName) == 0x00000C, "Wrong size on EndPartyAPI_GetPlayerActorName");
static_assert(offsetof(EndPartyAPI_GetPlayerActorName, Type) == 0x000000, "Member 'EndPartyAPI_GetPlayerActorName::Type' has a wrong offset!");
static_assert(offsetof(EndPartyAPI_GetPlayerActorName, ReturnValue) == 0x000004, "Member 'EndPartyAPI_GetPlayerActorName::ReturnValue' has a wrong offset!");

// Function EndGame.EndPartyAPI.GetPlayerActorRefreshState
// 0x0003 (0x0003 - 0x0000)
struct EndPartyAPI_GetPlayerActorRefreshState final
{
public:
	EEquipmentType                                equipment;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlayerType                                   Type;                                              // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlayerActorRefreshState                      ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndPartyAPI_GetPlayerActorRefreshState) == 0x000001, "Wrong alignment on EndPartyAPI_GetPlayerActorRefreshState");
static_assert(sizeof(EndPartyAPI_GetPlayerActorRefreshState) == 0x000003, "Wrong size on EndPartyAPI_GetPlayerActorRefreshState");
static_assert(offsetof(EndPartyAPI_GetPlayerActorRefreshState, equipment) == 0x000000, "Member 'EndPartyAPI_GetPlayerActorRefreshState::equipment' has a wrong offset!");
static_assert(offsetof(EndPartyAPI_GetPlayerActorRefreshState, Type) == 0x000001, "Member 'EndPartyAPI_GetPlayerActorRefreshState::Type' has a wrong offset!");
static_assert(offsetof(EndPartyAPI_GetPlayerActorRefreshState, ReturnValue) == 0x000002, "Member 'EndPartyAPI_GetPlayerActorRefreshState::ReturnValue' has a wrong offset!");

// Function EndGame.EndPartyAPI.GetPlayerName
// 0x000C (0x000C - 0x0000)
struct EndPartyAPI_GetPlayerName final
{
public:
	EEquipmentType                                equipment;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlayerType                                   Type;                                              // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndPartyAPI_GetPlayerName) == 0x000004, "Wrong alignment on EndPartyAPI_GetPlayerName");
static_assert(sizeof(EndPartyAPI_GetPlayerName) == 0x00000C, "Wrong size on EndPartyAPI_GetPlayerName");
static_assert(offsetof(EndPartyAPI_GetPlayerName, equipment) == 0x000000, "Member 'EndPartyAPI_GetPlayerName::equipment' has a wrong offset!");
static_assert(offsetof(EndPartyAPI_GetPlayerName, Type) == 0x000001, "Member 'EndPartyAPI_GetPlayerName::Type' has a wrong offset!");
static_assert(offsetof(EndPartyAPI_GetPlayerName, ReturnValue) == 0x000004, "Member 'EndPartyAPI_GetPlayerName::ReturnValue' has a wrong offset!");

// Function EndGame.EndPartyAPI.GetPlayerReturnActor
// 0x0010 (0x0010 - 0x0000)
struct EndPartyAPI_GetPlayerReturnActor final
{
public:
	EPlayerType                                   Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndPartyAPI_GetPlayerReturnActor) == 0x000008, "Wrong alignment on EndPartyAPI_GetPlayerReturnActor");
static_assert(sizeof(EndPartyAPI_GetPlayerReturnActor) == 0x000010, "Wrong size on EndPartyAPI_GetPlayerReturnActor");
static_assert(offsetof(EndPartyAPI_GetPlayerReturnActor, Type) == 0x000000, "Member 'EndPartyAPI_GetPlayerReturnActor::Type' has a wrong offset!");
static_assert(offsetof(EndPartyAPI_GetPlayerReturnActor, ReturnValue) == 0x000008, "Member 'EndPartyAPI_GetPlayerReturnActor::ReturnValue' has a wrong offset!");

// Function EndGame.EndPartyAPI.GetPlayerStatus
// 0x0002 (0x0002 - 0x0000)
struct EndPartyAPI_GetPlayerStatus final
{
public:
	EPlayerType                                   Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlayerStatus                                 ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndPartyAPI_GetPlayerStatus) == 0x000001, "Wrong alignment on EndPartyAPI_GetPlayerStatus");
static_assert(sizeof(EndPartyAPI_GetPlayerStatus) == 0x000002, "Wrong size on EndPartyAPI_GetPlayerStatus");
static_assert(offsetof(EndPartyAPI_GetPlayerStatus, Type) == 0x000000, "Member 'EndPartyAPI_GetPlayerStatus::Type' has a wrong offset!");
static_assert(offsetof(EndPartyAPI_GetPlayerStatus, ReturnValue) == 0x000001, "Member 'EndPartyAPI_GetPlayerStatus::ReturnValue' has a wrong offset!");

// Function EndGame.EndPartyAPI.GetPlayerToadActor
// 0x0010 (0x0010 - 0x0000)
struct EndPartyAPI_GetPlayerToadActor final
{
public:
	EPlayerType                                   Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndPartyAPI_GetPlayerToadActor) == 0x000008, "Wrong alignment on EndPartyAPI_GetPlayerToadActor");
static_assert(sizeof(EndPartyAPI_GetPlayerToadActor) == 0x000010, "Wrong size on EndPartyAPI_GetPlayerToadActor");
static_assert(offsetof(EndPartyAPI_GetPlayerToadActor, Type) == 0x000000, "Member 'EndPartyAPI_GetPlayerToadActor::Type' has a wrong offset!");
static_assert(offsetof(EndPartyAPI_GetPlayerToadActor, ReturnValue) == 0x000008, "Member 'EndPartyAPI_GetPlayerToadActor::ReturnValue' has a wrong offset!");

// Function EndGame.EndPartyAPI.InitPartyLevel
// 0x0010 (0x0010 - 0x0000)
struct EndPartyAPI_InitPartyLevel final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 InPlayerTrigger;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndPartyAPI_InitPartyLevel) == 0x000008, "Wrong alignment on EndPartyAPI_InitPartyLevel");
static_assert(sizeof(EndPartyAPI_InitPartyLevel) == 0x000010, "Wrong size on EndPartyAPI_InitPartyLevel");
static_assert(offsetof(EndPartyAPI_InitPartyLevel, WorldContextObject) == 0x000000, "Member 'EndPartyAPI_InitPartyLevel::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EndPartyAPI_InitPartyLevel, InPlayerTrigger) == 0x000008, "Member 'EndPartyAPI_InitPartyLevel::InPlayerTrigger' has a wrong offset!");

// Function EndGame.EndPartyAPI.IsCurrentCharaSpecListPreloadFinished
// 0x0001 (0x0001 - 0x0000)
struct EndPartyAPI_IsCurrentCharaSpecListPreloadFinished final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndPartyAPI_IsCurrentCharaSpecListPreloadFinished) == 0x000001, "Wrong alignment on EndPartyAPI_IsCurrentCharaSpecListPreloadFinished");
static_assert(sizeof(EndPartyAPI_IsCurrentCharaSpecListPreloadFinished) == 0x000001, "Wrong size on EndPartyAPI_IsCurrentCharaSpecListPreloadFinished");
static_assert(offsetof(EndPartyAPI_IsCurrentCharaSpecListPreloadFinished, ReturnValue) == 0x000000, "Member 'EndPartyAPI_IsCurrentCharaSpecListPreloadFinished::ReturnValue' has a wrong offset!");

// Function EndGame.EndPartyAPI.IsFinishPlayerStream
// 0x0001 (0x0001 - 0x0000)
struct EndPartyAPI_IsFinishPlayerStream final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndPartyAPI_IsFinishPlayerStream) == 0x000001, "Wrong alignment on EndPartyAPI_IsFinishPlayerStream");
static_assert(sizeof(EndPartyAPI_IsFinishPlayerStream) == 0x000001, "Wrong size on EndPartyAPI_IsFinishPlayerStream");
static_assert(offsetof(EndPartyAPI_IsFinishPlayerStream, ReturnValue) == 0x000000, "Member 'EndPartyAPI_IsFinishPlayerStream::ReturnValue' has a wrong offset!");

// Function EndGame.EndPartyAPI.IsPlayerActorRefreshState
// 0x0001 (0x0001 - 0x0000)
struct EndPartyAPI_IsPlayerActorRefreshState final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndPartyAPI_IsPlayerActorRefreshState) == 0x000001, "Wrong alignment on EndPartyAPI_IsPlayerActorRefreshState");
static_assert(sizeof(EndPartyAPI_IsPlayerActorRefreshState) == 0x000001, "Wrong size on EndPartyAPI_IsPlayerActorRefreshState");
static_assert(offsetof(EndPartyAPI_IsPlayerActorRefreshState, ReturnValue) == 0x000000, "Member 'EndPartyAPI_IsPlayerActorRefreshState::ReturnValue' has a wrong offset!");

// Function EndGame.EndPartyAPI.PreloadCurrentCharaSpecList
// 0x0020 (0x0020 - 0x0000)
struct EndPartyAPI_PreloadCurrentCharaSpecList final
{
public:
	TArray<EPlayerType>                           players;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<EEquipmentType>                        equipments;                                        // 0x0010(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndPartyAPI_PreloadCurrentCharaSpecList) == 0x000008, "Wrong alignment on EndPartyAPI_PreloadCurrentCharaSpecList");
static_assert(sizeof(EndPartyAPI_PreloadCurrentCharaSpecList) == 0x000020, "Wrong size on EndPartyAPI_PreloadCurrentCharaSpecList");
static_assert(offsetof(EndPartyAPI_PreloadCurrentCharaSpecList, players) == 0x000000, "Member 'EndPartyAPI_PreloadCurrentCharaSpecList::players' has a wrong offset!");
static_assert(offsetof(EndPartyAPI_PreloadCurrentCharaSpecList, equipments) == 0x000010, "Member 'EndPartyAPI_PreloadCurrentCharaSpecList::equipments' has a wrong offset!");

// Function EndGame.EndPartyAPI.ReturnActorToad
// 0x0001 (0x0001 - 0x0000)
struct EndPartyAPI_ReturnActorToad final
{
public:
	EPlayerType                                   Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndPartyAPI_ReturnActorToad) == 0x000001, "Wrong alignment on EndPartyAPI_ReturnActorToad");
static_assert(sizeof(EndPartyAPI_ReturnActorToad) == 0x000001, "Wrong size on EndPartyAPI_ReturnActorToad");
static_assert(offsetof(EndPartyAPI_ReturnActorToad, Type) == 0x000000, "Member 'EndPartyAPI_ReturnActorToad::Type' has a wrong offset!");

// Function EndGame.EndPartyAPI.SetPartyLeader
// 0x0010 (0x0010 - 0x0000)
struct EndPartyAPI_SetPartyLeader final
{
public:
	class AActor*                                 InLeader;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsInputTrigered;                                  // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndPartyAPI_SetPartyLeader) == 0x000008, "Wrong alignment on EndPartyAPI_SetPartyLeader");
static_assert(sizeof(EndPartyAPI_SetPartyLeader) == 0x000010, "Wrong size on EndPartyAPI_SetPartyLeader");
static_assert(offsetof(EndPartyAPI_SetPartyLeader, InLeader) == 0x000000, "Member 'EndPartyAPI_SetPartyLeader::InLeader' has a wrong offset!");
static_assert(offsetof(EndPartyAPI_SetPartyLeader, bIsInputTrigered) == 0x000008, "Member 'EndPartyAPI_SetPartyLeader::bIsInputTrigered' has a wrong offset!");

// Function EndGame.EndPartyAPI.SetPartyLeaderType
// 0x0003 (0x0003 - 0x0000)
struct EndPartyAPI_SetPartyLeaderType final
{
public:
	EPlayerType                                   InLeader;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsInputTrigered;                                  // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForce;                                            // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndPartyAPI_SetPartyLeaderType) == 0x000001, "Wrong alignment on EndPartyAPI_SetPartyLeaderType");
static_assert(sizeof(EndPartyAPI_SetPartyLeaderType) == 0x000003, "Wrong size on EndPartyAPI_SetPartyLeaderType");
static_assert(offsetof(EndPartyAPI_SetPartyLeaderType, InLeader) == 0x000000, "Member 'EndPartyAPI_SetPartyLeaderType::InLeader' has a wrong offset!");
static_assert(offsetof(EndPartyAPI_SetPartyLeaderType, bIsInputTrigered) == 0x000001, "Member 'EndPartyAPI_SetPartyLeaderType::bIsInputTrigered' has a wrong offset!");
static_assert(offsetof(EndPartyAPI_SetPartyLeaderType, bForce) == 0x000002, "Member 'EndPartyAPI_SetPartyLeaderType::bForce' has a wrong offset!");

// Function EndGame.EndPartyAPI.SetPlayerActor
// 0x0010 (0x0010 - 0x0000)
struct EndPartyAPI_SetPlayerActor final
{
public:
	EEquipmentType                                equipment;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlayerType                                   Type;                                              // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Actor;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndPartyAPI_SetPlayerActor) == 0x000008, "Wrong alignment on EndPartyAPI_SetPlayerActor");
static_assert(sizeof(EndPartyAPI_SetPlayerActor) == 0x000010, "Wrong size on EndPartyAPI_SetPlayerActor");
static_assert(offsetof(EndPartyAPI_SetPlayerActor, equipment) == 0x000000, "Member 'EndPartyAPI_SetPlayerActor::equipment' has a wrong offset!");
static_assert(offsetof(EndPartyAPI_SetPlayerActor, Type) == 0x000001, "Member 'EndPartyAPI_SetPlayerActor::Type' has a wrong offset!");
static_assert(offsetof(EndPartyAPI_SetPlayerActor, Actor) == 0x000008, "Member 'EndPartyAPI_SetPlayerActor::Actor' has a wrong offset!");

// Function EndGame.EndPartyAPI.SetPlayerName
// 0x000C (0x000C - 0x0000)
struct EndPartyAPI_SetPlayerName final
{
public:
	EEquipmentType                                equipment;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlayerType                                   Type;                                              // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Name_0;                                            // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndPartyAPI_SetPlayerName) == 0x000004, "Wrong alignment on EndPartyAPI_SetPlayerName");
static_assert(sizeof(EndPartyAPI_SetPlayerName) == 0x00000C, "Wrong size on EndPartyAPI_SetPlayerName");
static_assert(offsetof(EndPartyAPI_SetPlayerName, equipment) == 0x000000, "Member 'EndPartyAPI_SetPlayerName::equipment' has a wrong offset!");
static_assert(offsetof(EndPartyAPI_SetPlayerName, Type) == 0x000001, "Member 'EndPartyAPI_SetPlayerName::Type' has a wrong offset!");
static_assert(offsetof(EndPartyAPI_SetPlayerName, Name_0) == 0x000004, "Member 'EndPartyAPI_SetPlayerName::Name_0' has a wrong offset!");

// Function EndGame.EndPartyAPI.SetPlayerStatus
// 0x0002 (0x0002 - 0x0000)
struct EndPartyAPI_SetPlayerStatus final
{
public:
	EPlayerType                                   Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlayerStatus                                 Status;                                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndPartyAPI_SetPlayerStatus) == 0x000001, "Wrong alignment on EndPartyAPI_SetPlayerStatus");
static_assert(sizeof(EndPartyAPI_SetPlayerStatus) == 0x000002, "Wrong size on EndPartyAPI_SetPlayerStatus");
static_assert(offsetof(EndPartyAPI_SetPlayerStatus, Type) == 0x000000, "Member 'EndPartyAPI_SetPlayerStatus::Type' has a wrong offset!");
static_assert(offsetof(EndPartyAPI_SetPlayerStatus, Status) == 0x000001, "Member 'EndPartyAPI_SetPlayerStatus::Status' has a wrong offset!");

// Function EndGame.EndPartyAPI.ShouldUsePreloadCharaSpecsForPartyDebug
// 0x0001 (0x0001 - 0x0000)
struct EndPartyAPI_ShouldUsePreloadCharaSpecsForPartyDebug final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndPartyAPI_ShouldUsePreloadCharaSpecsForPartyDebug) == 0x000001, "Wrong alignment on EndPartyAPI_ShouldUsePreloadCharaSpecsForPartyDebug");
static_assert(sizeof(EndPartyAPI_ShouldUsePreloadCharaSpecsForPartyDebug) == 0x000001, "Wrong size on EndPartyAPI_ShouldUsePreloadCharaSpecsForPartyDebug");
static_assert(offsetof(EndPartyAPI_ShouldUsePreloadCharaSpecsForPartyDebug, ReturnValue) == 0x000000, "Member 'EndPartyAPI_ShouldUsePreloadCharaSpecsForPartyDebug::ReturnValue' has a wrong offset!");

// Function EndGame.EndPartyAPI.WaitLoadCache
// 0x0020 (0x0020 - 0x0000)
struct EndPartyAPI_WaitLoadCache final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndPartyAPI_WaitLoadCache) == 0x000008, "Wrong alignment on EndPartyAPI_WaitLoadCache");
static_assert(sizeof(EndPartyAPI_WaitLoadCache) == 0x000020, "Wrong size on EndPartyAPI_WaitLoadCache");
static_assert(offsetof(EndPartyAPI_WaitLoadCache, WorldContextObject) == 0x000000, "Member 'EndPartyAPI_WaitLoadCache::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EndPartyAPI_WaitLoadCache, LatentInfo) == 0x000008, "Member 'EndPartyAPI_WaitLoadCache::LatentInfo' has a wrong offset!");

// Function EndGame.EndPartyAPI.WaitPlayerStream
// 0x0020 (0x0020 - 0x0000)
struct EndPartyAPI_WaitPlayerStream final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndPartyAPI_WaitPlayerStream) == 0x000008, "Wrong alignment on EndPartyAPI_WaitPlayerStream");
static_assert(sizeof(EndPartyAPI_WaitPlayerStream) == 0x000020, "Wrong size on EndPartyAPI_WaitPlayerStream");
static_assert(offsetof(EndPartyAPI_WaitPlayerStream, WorldContextObject) == 0x000000, "Member 'EndPartyAPI_WaitPlayerStream::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EndPartyAPI_WaitPlayerStream, LatentInfo) == 0x000008, "Member 'EndPartyAPI_WaitPlayerStream::LatentInfo' has a wrong offset!");

// Function EndGame.EndBattleCameraActor.BindTargetActor
// 0x0010 (0x0010 - 0x0000)
struct EndBattleCameraActor_BindTargetActor final
{
public:
	class AActor*                                 OwnerActor_0;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 TargetActor_0;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleCameraActor_BindTargetActor) == 0x000008, "Wrong alignment on EndBattleCameraActor_BindTargetActor");
static_assert(sizeof(EndBattleCameraActor_BindTargetActor) == 0x000010, "Wrong size on EndBattleCameraActor_BindTargetActor");
static_assert(offsetof(EndBattleCameraActor_BindTargetActor, OwnerActor_0) == 0x000000, "Member 'EndBattleCameraActor_BindTargetActor::OwnerActor_0' has a wrong offset!");
static_assert(offsetof(EndBattleCameraActor_BindTargetActor, TargetActor_0) == 0x000008, "Member 'EndBattleCameraActor_BindTargetActor::TargetActor_0' has a wrong offset!");

// Function EndGame.EndCondorFortMiniGameTopWindow.OnMeasureStatusItemEnemy
// 0x000C (0x000C - 0x0000)
struct EndCondorFortMiniGameTopWindow_OnMeasureStatusItemEnemy final
{
public:
	int32                                         ItemIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCondorFortMiniGameTopWindow_OnMeasureStatusItemEnemy) == 0x000004, "Wrong alignment on EndCondorFortMiniGameTopWindow_OnMeasureStatusItemEnemy");
static_assert(sizeof(EndCondorFortMiniGameTopWindow_OnMeasureStatusItemEnemy) == 0x00000C, "Wrong size on EndCondorFortMiniGameTopWindow_OnMeasureStatusItemEnemy");
static_assert(offsetof(EndCondorFortMiniGameTopWindow_OnMeasureStatusItemEnemy, ItemIndex) == 0x000000, "Member 'EndCondorFortMiniGameTopWindow_OnMeasureStatusItemEnemy::ItemIndex' has a wrong offset!");
static_assert(offsetof(EndCondorFortMiniGameTopWindow_OnMeasureStatusItemEnemy, ReturnValue) == 0x000004, "Member 'EndCondorFortMiniGameTopWindow_OnMeasureStatusItemEnemy::ReturnValue' has a wrong offset!");

// Function EndGame.EndCondorFortMiniGameTopWindow.OnMeasureStatusItemPlayer
// 0x000C (0x000C - 0x0000)
struct EndCondorFortMiniGameTopWindow_OnMeasureStatusItemPlayer final
{
public:
	int32                                         ItemIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCondorFortMiniGameTopWindow_OnMeasureStatusItemPlayer) == 0x000004, "Wrong alignment on EndCondorFortMiniGameTopWindow_OnMeasureStatusItemPlayer");
static_assert(sizeof(EndCondorFortMiniGameTopWindow_OnMeasureStatusItemPlayer) == 0x00000C, "Wrong size on EndCondorFortMiniGameTopWindow_OnMeasureStatusItemPlayer");
static_assert(offsetof(EndCondorFortMiniGameTopWindow_OnMeasureStatusItemPlayer, ItemIndex) == 0x000000, "Member 'EndCondorFortMiniGameTopWindow_OnMeasureStatusItemPlayer::ItemIndex' has a wrong offset!");
static_assert(offsetof(EndCondorFortMiniGameTopWindow_OnMeasureStatusItemPlayer, ReturnValue) == 0x000004, "Member 'EndCondorFortMiniGameTopWindow_OnMeasureStatusItemPlayer::ReturnValue' has a wrong offset!");

// Function EndGame.EndCutAPI.GetCurrentTime
// 0x000C (0x000C - 0x0000)
struct EndCutAPI_GetCurrentTime final
{
public:
	class FName                                   LevelName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCutAPI_GetCurrentTime) == 0x000004, "Wrong alignment on EndCutAPI_GetCurrentTime");
static_assert(sizeof(EndCutAPI_GetCurrentTime) == 0x00000C, "Wrong size on EndCutAPI_GetCurrentTime");
static_assert(offsetof(EndCutAPI_GetCurrentTime, LevelName) == 0x000000, "Member 'EndCutAPI_GetCurrentTime::LevelName' has a wrong offset!");
static_assert(offsetof(EndCutAPI_GetCurrentTime, ReturnValue) == 0x000008, "Member 'EndCutAPI_GetCurrentTime::ReturnValue' has a wrong offset!");

// Function EndGame.EndCutAPI.GetTimeRange
// 0x000C (0x000C - 0x0000)
struct EndCutAPI_GetTimeRange final
{
public:
	class FName                                   LevelName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCutAPI_GetTimeRange) == 0x000004, "Wrong alignment on EndCutAPI_GetTimeRange");
static_assert(sizeof(EndCutAPI_GetTimeRange) == 0x00000C, "Wrong size on EndCutAPI_GetTimeRange");
static_assert(offsetof(EndCutAPI_GetTimeRange, LevelName) == 0x000000, "Member 'EndCutAPI_GetTimeRange::LevelName' has a wrong offset!");
static_assert(offsetof(EndCutAPI_GetTimeRange, ReturnValue) == 0x000008, "Member 'EndCutAPI_GetTimeRange::ReturnValue' has a wrong offset!");

// Function EndGame.EndCutAPI.IsActorCreated
// 0x000C (0x000C - 0x0000)
struct EndCutAPI_IsActorCreated final
{
public:
	class FName                                   LevelName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndCutAPI_IsActorCreated) == 0x000004, "Wrong alignment on EndCutAPI_IsActorCreated");
static_assert(sizeof(EndCutAPI_IsActorCreated) == 0x00000C, "Wrong size on EndCutAPI_IsActorCreated");
static_assert(offsetof(EndCutAPI_IsActorCreated, LevelName) == 0x000000, "Member 'EndCutAPI_IsActorCreated::LevelName' has a wrong offset!");
static_assert(offsetof(EndCutAPI_IsActorCreated, ReturnValue) == 0x000008, "Member 'EndCutAPI_IsActorCreated::ReturnValue' has a wrong offset!");

// Function EndGame.EndCutAPI.IsExistEvent
// 0x000C (0x000C - 0x0000)
struct EndCutAPI_IsExistEvent final
{
public:
	class FName                                   LevelName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndCutAPI_IsExistEvent) == 0x000004, "Wrong alignment on EndCutAPI_IsExistEvent");
static_assert(sizeof(EndCutAPI_IsExistEvent) == 0x00000C, "Wrong size on EndCutAPI_IsExistEvent");
static_assert(offsetof(EndCutAPI_IsExistEvent, LevelName) == 0x000000, "Member 'EndCutAPI_IsExistEvent::LevelName' has a wrong offset!");
static_assert(offsetof(EndCutAPI_IsExistEvent, ReturnValue) == 0x000008, "Member 'EndCutAPI_IsExistEvent::ReturnValue' has a wrong offset!");

// Function EndGame.EndCutAPI.IsPlayFinished
// 0x000C (0x000C - 0x0000)
struct EndCutAPI_IsPlayFinished final
{
public:
	class FName                                   LevelName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndCutAPI_IsPlayFinished) == 0x000004, "Wrong alignment on EndCutAPI_IsPlayFinished");
static_assert(sizeof(EndCutAPI_IsPlayFinished) == 0x00000C, "Wrong size on EndCutAPI_IsPlayFinished");
static_assert(offsetof(EndCutAPI_IsPlayFinished, LevelName) == 0x000000, "Member 'EndCutAPI_IsPlayFinished::LevelName' has a wrong offset!");
static_assert(offsetof(EndCutAPI_IsPlayFinished, ReturnValue) == 0x000008, "Member 'EndCutAPI_IsPlayFinished::ReturnValue' has a wrong offset!");

// Function EndGame.EndCutAPI.IsPlaying
// 0x0001 (0x0001 - 0x0000)
struct EndCutAPI_IsPlaying final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCutAPI_IsPlaying) == 0x000001, "Wrong alignment on EndCutAPI_IsPlaying");
static_assert(sizeof(EndCutAPI_IsPlaying) == 0x000001, "Wrong size on EndCutAPI_IsPlaying");
static_assert(offsetof(EndCutAPI_IsPlaying, ReturnValue) == 0x000000, "Member 'EndCutAPI_IsPlaying::ReturnValue' has a wrong offset!");

// Function EndGame.EndCutAPI.IsPlaying_TypeSpecify
// 0x0005 (0x0005 - 0x0000)
struct EndCutAPI_IsPlaying_TypeSpecify final
{
public:
	bool                                          EV;                                                // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LV;                                                // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MV;                                                // 0x0002(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          fv;                                                // 0x0003(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCutAPI_IsPlaying_TypeSpecify) == 0x000001, "Wrong alignment on EndCutAPI_IsPlaying_TypeSpecify");
static_assert(sizeof(EndCutAPI_IsPlaying_TypeSpecify) == 0x000005, "Wrong size on EndCutAPI_IsPlaying_TypeSpecify");
static_assert(offsetof(EndCutAPI_IsPlaying_TypeSpecify, EV) == 0x000000, "Member 'EndCutAPI_IsPlaying_TypeSpecify::EV' has a wrong offset!");
static_assert(offsetof(EndCutAPI_IsPlaying_TypeSpecify, LV) == 0x000001, "Member 'EndCutAPI_IsPlaying_TypeSpecify::LV' has a wrong offset!");
static_assert(offsetof(EndCutAPI_IsPlaying_TypeSpecify, MV) == 0x000002, "Member 'EndCutAPI_IsPlaying_TypeSpecify::MV' has a wrong offset!");
static_assert(offsetof(EndCutAPI_IsPlaying_TypeSpecify, fv) == 0x000003, "Member 'EndCutAPI_IsPlaying_TypeSpecify::fv' has a wrong offset!");
static_assert(offsetof(EndCutAPI_IsPlaying_TypeSpecify, ReturnValue) == 0x000004, "Member 'EndCutAPI_IsPlaying_TypeSpecify::ReturnValue' has a wrong offset!");

// Function EndGame.EndCutAPI.IsPlayReady
// 0x000C (0x000C - 0x0000)
struct EndCutAPI_IsPlayReady final
{
public:
	class FName                                   LevelName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndCutAPI_IsPlayReady) == 0x000004, "Wrong alignment on EndCutAPI_IsPlayReady");
static_assert(sizeof(EndCutAPI_IsPlayReady) == 0x00000C, "Wrong size on EndCutAPI_IsPlayReady");
static_assert(offsetof(EndCutAPI_IsPlayReady, LevelName) == 0x000000, "Member 'EndCutAPI_IsPlayReady::LevelName' has a wrong offset!");
static_assert(offsetof(EndCutAPI_IsPlayReady, ReturnValue) == 0x000008, "Member 'EndCutAPI_IsPlayReady::ReturnValue' has a wrong offset!");

// Function EndGame.EndCutAPI.IsSkipCinema
// 0x0001 (0x0001 - 0x0000)
struct EndCutAPI_IsSkipCinema final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCutAPI_IsSkipCinema) == 0x000001, "Wrong alignment on EndCutAPI_IsSkipCinema");
static_assert(sizeof(EndCutAPI_IsSkipCinema) == 0x000001, "Wrong size on EndCutAPI_IsSkipCinema");
static_assert(offsetof(EndCutAPI_IsSkipCinema, ReturnValue) == 0x000000, "Member 'EndCutAPI_IsSkipCinema::ReturnValue' has a wrong offset!");

// Function EndGame.EndCutAPI.IsSkipCinemaAtThisFrame
// 0x0001 (0x0001 - 0x0000)
struct EndCutAPI_IsSkipCinemaAtThisFrame final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCutAPI_IsSkipCinemaAtThisFrame) == 0x000001, "Wrong alignment on EndCutAPI_IsSkipCinemaAtThisFrame");
static_assert(sizeof(EndCutAPI_IsSkipCinemaAtThisFrame) == 0x000001, "Wrong size on EndCutAPI_IsSkipCinemaAtThisFrame");
static_assert(offsetof(EndCutAPI_IsSkipCinemaAtThisFrame, ReturnValue) == 0x000000, "Member 'EndCutAPI_IsSkipCinemaAtThisFrame::ReturnValue' has a wrong offset!");

// Function EndGame.EndCutAPI.IsStable
// 0x0001 (0x0001 - 0x0000)
struct EndCutAPI_IsStable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCutAPI_IsStable) == 0x000001, "Wrong alignment on EndCutAPI_IsStable");
static_assert(sizeof(EndCutAPI_IsStable) == 0x000001, "Wrong size on EndCutAPI_IsStable");
static_assert(offsetof(EndCutAPI_IsStable, ReturnValue) == 0x000000, "Member 'EndCutAPI_IsStable::ReturnValue' has a wrong offset!");

// Function EndGame.EndCutAPI.IsValidSelectWidget
// 0x0001 (0x0001 - 0x0000)
struct EndCutAPI_IsValidSelectWidget final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCutAPI_IsValidSelectWidget) == 0x000001, "Wrong alignment on EndCutAPI_IsValidSelectWidget");
static_assert(sizeof(EndCutAPI_IsValidSelectWidget) == 0x000001, "Wrong size on EndCutAPI_IsValidSelectWidget");
static_assert(offsetof(EndCutAPI_IsValidSelectWidget, ReturnValue) == 0x000000, "Member 'EndCutAPI_IsValidSelectWidget::ReturnValue' has a wrong offset!");

// Function EndGame.EndCutAPI.LoadSequenceAssets
// 0x000C (0x000C - 0x0000)
struct EndCutAPI_LoadSequenceAssets final
{
public:
	class FName                                   LevelName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Priority;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCutAPI_LoadSequenceAssets) == 0x000004, "Wrong alignment on EndCutAPI_LoadSequenceAssets");
static_assert(sizeof(EndCutAPI_LoadSequenceAssets) == 0x00000C, "Wrong size on EndCutAPI_LoadSequenceAssets");
static_assert(offsetof(EndCutAPI_LoadSequenceAssets, LevelName) == 0x000000, "Member 'EndCutAPI_LoadSequenceAssets::LevelName' has a wrong offset!");
static_assert(offsetof(EndCutAPI_LoadSequenceAssets, Priority) == 0x000008, "Member 'EndCutAPI_LoadSequenceAssets::Priority' has a wrong offset!");

// Function EndGame.EndCutAPI.PlayCutScene
// 0x0014 (0x0014 - 0x0000)
struct EndCutAPI_PlayCutScene final
{
public:
	class FName                                   LevelName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OnPlayTriggerName;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStopSkip;                                         // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndCutAPI_PlayCutScene) == 0x000004, "Wrong alignment on EndCutAPI_PlayCutScene");
static_assert(sizeof(EndCutAPI_PlayCutScene) == 0x000014, "Wrong size on EndCutAPI_PlayCutScene");
static_assert(offsetof(EndCutAPI_PlayCutScene, LevelName) == 0x000000, "Member 'EndCutAPI_PlayCutScene::LevelName' has a wrong offset!");
static_assert(offsetof(EndCutAPI_PlayCutScene, OnPlayTriggerName) == 0x000008, "Member 'EndCutAPI_PlayCutScene::OnPlayTriggerName' has a wrong offset!");
static_assert(offsetof(EndCutAPI_PlayCutScene, bStopSkip) == 0x000010, "Member 'EndCutAPI_PlayCutScene::bStopSkip' has a wrong offset!");
static_assert(offsetof(EndCutAPI_PlayCutScene, ReturnValue) == 0x000011, "Member 'EndCutAPI_PlayCutScene::ReturnValue' has a wrong offset!");

// Function EndGame.EndCutAPI.ReadyCutScene
// 0x000C (0x000C - 0x0000)
struct EndCutAPI_ReadyCutScene final
{
public:
	class FName                                   LevelName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndCutAPI_ReadyCutScene) == 0x000004, "Wrong alignment on EndCutAPI_ReadyCutScene");
static_assert(sizeof(EndCutAPI_ReadyCutScene) == 0x00000C, "Wrong size on EndCutAPI_ReadyCutScene");
static_assert(offsetof(EndCutAPI_ReadyCutScene, LevelName) == 0x000000, "Member 'EndCutAPI_ReadyCutScene::LevelName' has a wrong offset!");
static_assert(offsetof(EndCutAPI_ReadyCutScene, ReturnValue) == 0x000008, "Member 'EndCutAPI_ReadyCutScene::ReturnValue' has a wrong offset!");

// Function EndGame.EndCutAPI.RequestPlayCutScene
// 0x0008 (0x0008 - 0x0000)
struct EndCutAPI_RequestPlayCutScene final
{
public:
	class FName                                   LevelName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCutAPI_RequestPlayCutScene) == 0x000004, "Wrong alignment on EndCutAPI_RequestPlayCutScene");
static_assert(sizeof(EndCutAPI_RequestPlayCutScene) == 0x000008, "Wrong size on EndCutAPI_RequestPlayCutScene");
static_assert(offsetof(EndCutAPI_RequestPlayCutScene, LevelName) == 0x000000, "Member 'EndCutAPI_RequestPlayCutScene::LevelName' has a wrong offset!");

// Function EndGame.EndCutAPI.SetCurrentTime
// 0x000C (0x000C - 0x0000)
struct EndCutAPI_SetCurrentTime final
{
public:
	class FName                                   LevelName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InTime;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCutAPI_SetCurrentTime) == 0x000004, "Wrong alignment on EndCutAPI_SetCurrentTime");
static_assert(sizeof(EndCutAPI_SetCurrentTime) == 0x00000C, "Wrong size on EndCutAPI_SetCurrentTime");
static_assert(offsetof(EndCutAPI_SetCurrentTime, LevelName) == 0x000000, "Member 'EndCutAPI_SetCurrentTime::LevelName' has a wrong offset!");
static_assert(offsetof(EndCutAPI_SetCurrentTime, InTime) == 0x000008, "Member 'EndCutAPI_SetCurrentTime::InTime' has a wrong offset!");

// Function EndGame.EndCutAPI.SkipCinema
// 0x0001 (0x0001 - 0x0000)
struct EndCutAPI_SkipCinema final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCutAPI_SkipCinema) == 0x000001, "Wrong alignment on EndCutAPI_SkipCinema");
static_assert(sizeof(EndCutAPI_SkipCinema) == 0x000001, "Wrong size on EndCutAPI_SkipCinema");
static_assert(offsetof(EndCutAPI_SkipCinema, Enable) == 0x000000, "Member 'EndCutAPI_SkipCinema::Enable' has a wrong offset!");

// Function EndGame.EndCutAPI.UnloadSequenceAssets
// 0x0008 (0x0008 - 0x0000)
struct EndCutAPI_UnloadSequenceAssets final
{
public:
	class FName                                   LevelName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCutAPI_UnloadSequenceAssets) == 0x000004, "Wrong alignment on EndCutAPI_UnloadSequenceAssets");
static_assert(sizeof(EndCutAPI_UnloadSequenceAssets) == 0x000008, "Wrong size on EndCutAPI_UnloadSequenceAssets");
static_assert(offsetof(EndCutAPI_UnloadSequenceAssets, LevelName) == 0x000000, "Member 'EndCutAPI_UnloadSequenceAssets::LevelName' has a wrong offset!");

// Function EndGame.NumberBranch.NumberBranch
// 0x0010 (0x0010 - 0x0000)
struct NumberBranch_NumberBranch final
{
public:
	int32                                         InNumA;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InNumB;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNumberBranch*                          ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NumberBranch_NumberBranch) == 0x000008, "Wrong alignment on NumberBranch_NumberBranch");
static_assert(sizeof(NumberBranch_NumberBranch) == 0x000010, "Wrong size on NumberBranch_NumberBranch");
static_assert(offsetof(NumberBranch_NumberBranch, InNumA) == 0x000000, "Member 'NumberBranch_NumberBranch::InNumA' has a wrong offset!");
static_assert(offsetof(NumberBranch_NumberBranch, InNumB) == 0x000004, "Member 'NumberBranch_NumberBranch::InNumB' has a wrong offset!");
static_assert(offsetof(NumberBranch_NumberBranch, ReturnValue) == 0x000008, "Member 'NumberBranch_NumberBranch::ReturnValue' has a wrong offset!");

// Function EndGame.EndCameraComponent.SetFocalLength
// 0x0004 (0x0004 - 0x0000)
struct EndCameraComponent_SetFocalLength final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCameraComponent_SetFocalLength) == 0x000004, "Wrong alignment on EndCameraComponent_SetFocalLength");
static_assert(sizeof(EndCameraComponent_SetFocalLength) == 0x000004, "Wrong size on EndCameraComponent_SetFocalLength");
static_assert(offsetof(EndCameraComponent_SetFocalLength, NewValue) == 0x000000, "Member 'EndCameraComponent_SetFocalLength::NewValue' has a wrong offset!");

// Function EndGame.EndCameraComponent.SetFocusDistance
// 0x0004 (0x0004 - 0x0000)
struct EndCameraComponent_SetFocusDistance final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCameraComponent_SetFocusDistance) == 0x000004, "Wrong alignment on EndCameraComponent_SetFocusDistance");
static_assert(sizeof(EndCameraComponent_SetFocusDistance) == 0x000004, "Wrong size on EndCameraComponent_SetFocusDistance");
static_assert(offsetof(EndCameraComponent_SetFocusDistance, NewValue) == 0x000000, "Member 'EndCameraComponent_SetFocusDistance::NewValue' has a wrong offset!");

// Function EndGame.EndCameraComponent.SetHorizontalAperture
// 0x0004 (0x0004 - 0x0000)
struct EndCameraComponent_SetHorizontalAperture final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCameraComponent_SetHorizontalAperture) == 0x000004, "Wrong alignment on EndCameraComponent_SetHorizontalAperture");
static_assert(sizeof(EndCameraComponent_SetHorizontalAperture) == 0x000004, "Wrong size on EndCameraComponent_SetHorizontalAperture");
static_assert(offsetof(EndCameraComponent_SetHorizontalAperture, NewValue) == 0x000000, "Member 'EndCameraComponent_SetHorizontalAperture::NewValue' has a wrong offset!");

// Function EndGame.EndCameraComponent.SetRoll
// 0x0004 (0x0004 - 0x0000)
struct EndCameraComponent_SetRoll final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCameraComponent_SetRoll) == 0x000004, "Wrong alignment on EndCameraComponent_SetRoll");
static_assert(sizeof(EndCameraComponent_SetRoll) == 0x000004, "Wrong size on EndCameraComponent_SetRoll");
static_assert(offsetof(EndCameraComponent_SetRoll, NewValue) == 0x000000, "Member 'EndCameraComponent_SetRoll::NewValue' has a wrong offset!");

// Function EndGame.RangeSwitch3.RangeSwitch3
// 0x0028 (0x0028 - 0x0000)
struct RangeSwitch3_RangeSwitch3 final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Min1;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Max1;                                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Min2;                                              // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Max2;                                              // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Min3;                                              // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Max3;                                              // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ContainEqual;                                      // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FirstOnly;                                         // 0x001D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class URangeSwitch3*                          ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RangeSwitch3_RangeSwitch3) == 0x000008, "Wrong alignment on RangeSwitch3_RangeSwitch3");
static_assert(sizeof(RangeSwitch3_RangeSwitch3) == 0x000028, "Wrong size on RangeSwitch3_RangeSwitch3");
static_assert(offsetof(RangeSwitch3_RangeSwitch3, Value) == 0x000000, "Member 'RangeSwitch3_RangeSwitch3::Value' has a wrong offset!");
static_assert(offsetof(RangeSwitch3_RangeSwitch3, Min1) == 0x000004, "Member 'RangeSwitch3_RangeSwitch3::Min1' has a wrong offset!");
static_assert(offsetof(RangeSwitch3_RangeSwitch3, Max1) == 0x000008, "Member 'RangeSwitch3_RangeSwitch3::Max1' has a wrong offset!");
static_assert(offsetof(RangeSwitch3_RangeSwitch3, Min2) == 0x00000C, "Member 'RangeSwitch3_RangeSwitch3::Min2' has a wrong offset!");
static_assert(offsetof(RangeSwitch3_RangeSwitch3, Max2) == 0x000010, "Member 'RangeSwitch3_RangeSwitch3::Max2' has a wrong offset!");
static_assert(offsetof(RangeSwitch3_RangeSwitch3, Min3) == 0x000014, "Member 'RangeSwitch3_RangeSwitch3::Min3' has a wrong offset!");
static_assert(offsetof(RangeSwitch3_RangeSwitch3, Max3) == 0x000018, "Member 'RangeSwitch3_RangeSwitch3::Max3' has a wrong offset!");
static_assert(offsetof(RangeSwitch3_RangeSwitch3, ContainEqual) == 0x00001C, "Member 'RangeSwitch3_RangeSwitch3::ContainEqual' has a wrong offset!");
static_assert(offsetof(RangeSwitch3_RangeSwitch3, FirstOnly) == 0x00001D, "Member 'RangeSwitch3_RangeSwitch3::FirstOnly' has a wrong offset!");
static_assert(offsetof(RangeSwitch3_RangeSwitch3, ReturnValue) == 0x000020, "Member 'RangeSwitch3_RangeSwitch3::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIEB0000Controller.IsGSFly
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAIEB0000Controller_IsGSFly final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIEB0000Controller_IsGSFly) == 0x000001, "Wrong alignment on EndBattleAIEB0000Controller_IsGSFly");
static_assert(sizeof(EndBattleAIEB0000Controller_IsGSFly) == 0x000001, "Wrong size on EndBattleAIEB0000Controller_IsGSFly");
static_assert(offsetof(EndBattleAIEB0000Controller_IsGSFly, ReturnValue) == 0x000000, "Member 'EndBattleAIEB0000Controller_IsGSFly::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIEB0000Controller.IsOnFloor
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAIEB0000Controller_IsOnFloor final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIEB0000Controller_IsOnFloor) == 0x000001, "Wrong alignment on EndBattleAIEB0000Controller_IsOnFloor");
static_assert(sizeof(EndBattleAIEB0000Controller_IsOnFloor) == 0x000001, "Wrong size on EndBattleAIEB0000Controller_IsOnFloor");
static_assert(offsetof(EndBattleAIEB0000Controller_IsOnFloor, ReturnValue) == 0x000000, "Member 'EndBattleAIEB0000Controller_IsOnFloor::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIEB0000Controller.IsOnWall
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAIEB0000Controller_IsOnWall final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIEB0000Controller_IsOnWall) == 0x000001, "Wrong alignment on EndBattleAIEB0000Controller_IsOnWall");
static_assert(sizeof(EndBattleAIEB0000Controller_IsOnWall) == 0x000001, "Wrong size on EndBattleAIEB0000Controller_IsOnWall");
static_assert(offsetof(EndBattleAIEB0000Controller_IsOnWall, ReturnValue) == 0x000000, "Member 'EndBattleAIEB0000Controller_IsOnWall::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIEB0000Controller.IsTurnJump
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAIEB0000Controller_IsTurnJump final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIEB0000Controller_IsTurnJump) == 0x000001, "Wrong alignment on EndBattleAIEB0000Controller_IsTurnJump");
static_assert(sizeof(EndBattleAIEB0000Controller_IsTurnJump) == 0x000001, "Wrong size on EndBattleAIEB0000Controller_IsTurnJump");
static_assert(offsetof(EndBattleAIEB0000Controller_IsTurnJump, ReturnValue) == 0x000000, "Member 'EndBattleAIEB0000Controller_IsTurnJump::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIEB0000Controller.ReleaseWallJump
// 0x000C (0x000C - 0x0000)
struct EndBattleAIEB0000Controller_ReleaseWallJump final
{
public:
	int32                                         InID;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InTime;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InBias;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIEB0000Controller_ReleaseWallJump) == 0x000004, "Wrong alignment on EndBattleAIEB0000Controller_ReleaseWallJump");
static_assert(sizeof(EndBattleAIEB0000Controller_ReleaseWallJump) == 0x00000C, "Wrong size on EndBattleAIEB0000Controller_ReleaseWallJump");
static_assert(offsetof(EndBattleAIEB0000Controller_ReleaseWallJump, InID) == 0x000000, "Member 'EndBattleAIEB0000Controller_ReleaseWallJump::InID' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0000Controller_ReleaseWallJump, InTime) == 0x000004, "Member 'EndBattleAIEB0000Controller_ReleaseWallJump::InTime' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0000Controller_ReleaseWallJump, InBias) == 0x000008, "Member 'EndBattleAIEB0000Controller_ReleaseWallJump::InBias' has a wrong offset!");

// Function EndGame.EndBattleAIEB0000Controller.RequestWallJump
// 0x000C (0x000C - 0x0000)
struct EndBattleAIEB0000Controller_RequestWallJump final
{
public:
	int32                                         InID;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InTime;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InBias;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIEB0000Controller_RequestWallJump) == 0x000004, "Wrong alignment on EndBattleAIEB0000Controller_RequestWallJump");
static_assert(sizeof(EndBattleAIEB0000Controller_RequestWallJump) == 0x00000C, "Wrong size on EndBattleAIEB0000Controller_RequestWallJump");
static_assert(offsetof(EndBattleAIEB0000Controller_RequestWallJump, InID) == 0x000000, "Member 'EndBattleAIEB0000Controller_RequestWallJump::InID' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0000Controller_RequestWallJump, InTime) == 0x000004, "Member 'EndBattleAIEB0000Controller_RequestWallJump::InTime' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0000Controller_RequestWallJump, InBias) == 0x000008, "Member 'EndBattleAIEB0000Controller_RequestWallJump::InBias' has a wrong offset!");

// Function EndGame.EndBattleAIEB0002Controller.OnDetachArm
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAIEB0002Controller_OnDetachArm final
{
public:
	EEndBattleCharaAttachCharacterType            armType;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIEB0002Controller_OnDetachArm) == 0x000001, "Wrong alignment on EndBattleAIEB0002Controller_OnDetachArm");
static_assert(sizeof(EndBattleAIEB0002Controller_OnDetachArm) == 0x000001, "Wrong size on EndBattleAIEB0002Controller_OnDetachArm");
static_assert(offsetof(EndBattleAIEB0002Controller_OnDetachArm, armType) == 0x000000, "Member 'EndBattleAIEB0002Controller_OnDetachArm::armType' has a wrong offset!");

// Function EndGame.EndBattleAIEB0003MineController.IsPlayerInConfirmSpark
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAIEB0003MineController_IsPlayerInConfirmSpark final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIEB0003MineController_IsPlayerInConfirmSpark) == 0x000001, "Wrong alignment on EndBattleAIEB0003MineController_IsPlayerInConfirmSpark");
static_assert(sizeof(EndBattleAIEB0003MineController_IsPlayerInConfirmSpark) == 0x000001, "Wrong size on EndBattleAIEB0003MineController_IsPlayerInConfirmSpark");
static_assert(offsetof(EndBattleAIEB0003MineController_IsPlayerInConfirmSpark, ReturnValue) == 0x000000, "Member 'EndBattleAIEB0003MineController_IsPlayerInConfirmSpark::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIEB0003MineController.IsRolling
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAIEB0003MineController_IsRolling final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIEB0003MineController_IsRolling) == 0x000001, "Wrong alignment on EndBattleAIEB0003MineController_IsRolling");
static_assert(sizeof(EndBattleAIEB0003MineController_IsRolling) == 0x000001, "Wrong size on EndBattleAIEB0003MineController_IsRolling");
static_assert(offsetof(EndBattleAIEB0003MineController_IsRolling, ReturnValue) == 0x000000, "Member 'EndBattleAIEB0003MineController_IsRolling::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIEB0003MineController.OnCheckFollow
// 0x0003 (0x0003 - 0x0000)
struct EndBattleAIEB0003MineController_OnCheckFollow final
{
public:
	bool                                          OutBattleArea;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NotOwnerTrace;                                     // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NotUcpcTrace;                                      // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIEB0003MineController_OnCheckFollow) == 0x000001, "Wrong alignment on EndBattleAIEB0003MineController_OnCheckFollow");
static_assert(sizeof(EndBattleAIEB0003MineController_OnCheckFollow) == 0x000003, "Wrong size on EndBattleAIEB0003MineController_OnCheckFollow");
static_assert(offsetof(EndBattleAIEB0003MineController_OnCheckFollow, OutBattleArea) == 0x000000, "Member 'EndBattleAIEB0003MineController_OnCheckFollow::OutBattleArea' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0003MineController_OnCheckFollow, NotOwnerTrace) == 0x000001, "Member 'EndBattleAIEB0003MineController_OnCheckFollow::NotOwnerTrace' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0003MineController_OnCheckFollow, NotUcpcTrace) == 0x000002, "Member 'EndBattleAIEB0003MineController_OnCheckFollow::NotUcpcTrace' has a wrong offset!");

// Function EndGame.EndBattleAIEB0003MineController.OnReadySpark
// 0x0004 (0x0004 - 0x0000)
struct EndBattleAIEB0003MineController_OnReadySpark final
{
public:
	int32                                         sparkID;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIEB0003MineController_OnReadySpark) == 0x000004, "Wrong alignment on EndBattleAIEB0003MineController_OnReadySpark");
static_assert(sizeof(EndBattleAIEB0003MineController_OnReadySpark) == 0x000004, "Wrong size on EndBattleAIEB0003MineController_OnReadySpark");
static_assert(offsetof(EndBattleAIEB0003MineController_OnReadySpark, sparkID) == 0x000000, "Member 'EndBattleAIEB0003MineController_OnReadySpark::sparkID' has a wrong offset!");

// Function EndGame.EndBattleAIEB0003MineController.ReadySpark
// 0x0004 (0x0004 - 0x0000)
struct EndBattleAIEB0003MineController_ReadySpark final
{
public:
	int32                                         sparkID;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIEB0003MineController_ReadySpark) == 0x000004, "Wrong alignment on EndBattleAIEB0003MineController_ReadySpark");
static_assert(sizeof(EndBattleAIEB0003MineController_ReadySpark) == 0x000004, "Wrong size on EndBattleAIEB0003MineController_ReadySpark");
static_assert(offsetof(EndBattleAIEB0003MineController_ReadySpark, sparkID) == 0x000000, "Member 'EndBattleAIEB0003MineController_ReadySpark::sparkID' has a wrong offset!");

// Function EndGame.EndBattleAIEB0003MineController.SetFollow
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAIEB0003MineController_SetFollow final
{
public:
	bool                                          InFollow;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                InLocation;                                        // 0x0004(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIEB0003MineController_SetFollow) == 0x000004, "Wrong alignment on EndBattleAIEB0003MineController_SetFollow");
static_assert(sizeof(EndBattleAIEB0003MineController_SetFollow) == 0x000010, "Wrong size on EndBattleAIEB0003MineController_SetFollow");
static_assert(offsetof(EndBattleAIEB0003MineController_SetFollow, InFollow) == 0x000000, "Member 'EndBattleAIEB0003MineController_SetFollow::InFollow' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0003MineController_SetFollow, InLocation) == 0x000004, "Member 'EndBattleAIEB0003MineController_SetFollow::InLocation' has a wrong offset!");

// Function EndGame.EndBattleAIEB0003MineController.SetOverrideFollowTarget
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAIEB0003MineController_SetOverrideFollowTarget final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIEB0003MineController_SetOverrideFollowTarget) == 0x000008, "Wrong alignment on EndBattleAIEB0003MineController_SetOverrideFollowTarget");
static_assert(sizeof(EndBattleAIEB0003MineController_SetOverrideFollowTarget) == 0x000008, "Wrong size on EndBattleAIEB0003MineController_SetOverrideFollowTarget");
static_assert(offsetof(EndBattleAIEB0003MineController_SetOverrideFollowTarget, InChara) == 0x000000, "Member 'EndBattleAIEB0003MineController_SetOverrideFollowTarget::InChara' has a wrong offset!");

// Function EndGame.EndCanvasPanelSlot.SetAlignment
// 0x0008 (0x0008 - 0x0000)
struct EndCanvasPanelSlot_SetAlignment final
{
public:
	struct FVector2D                              InAlignment;                                       // 0x0000(0x0008)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCanvasPanelSlot_SetAlignment) == 0x000004, "Wrong alignment on EndCanvasPanelSlot_SetAlignment");
static_assert(sizeof(EndCanvasPanelSlot_SetAlignment) == 0x000008, "Wrong size on EndCanvasPanelSlot_SetAlignment");
static_assert(offsetof(EndCanvasPanelSlot_SetAlignment, InAlignment) == 0x000000, "Member 'EndCanvasPanelSlot_SetAlignment::InAlignment' has a wrong offset!");

// Function EndGame.EndCanvasPanelSlot.SetAnchors
// 0x0010 (0x0010 - 0x0000)
struct EndCanvasPanelSlot_SetAnchors final
{
public:
	struct FAnchors                               InAnchors;                                         // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCanvasPanelSlot_SetAnchors) == 0x000004, "Wrong alignment on EndCanvasPanelSlot_SetAnchors");
static_assert(sizeof(EndCanvasPanelSlot_SetAnchors) == 0x000010, "Wrong size on EndCanvasPanelSlot_SetAnchors");
static_assert(offsetof(EndCanvasPanelSlot_SetAnchors, InAnchors) == 0x000000, "Member 'EndCanvasPanelSlot_SetAnchors::InAnchors' has a wrong offset!");

// Function EndGame.EndCanvasPanelSlot.SetAutoSize
// 0x0001 (0x0001 - 0x0000)
struct EndCanvasPanelSlot_SetAutoSize final
{
public:
	bool                                          InbAutoSize;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCanvasPanelSlot_SetAutoSize) == 0x000001, "Wrong alignment on EndCanvasPanelSlot_SetAutoSize");
static_assert(sizeof(EndCanvasPanelSlot_SetAutoSize) == 0x000001, "Wrong size on EndCanvasPanelSlot_SetAutoSize");
static_assert(offsetof(EndCanvasPanelSlot_SetAutoSize, InbAutoSize) == 0x000000, "Member 'EndCanvasPanelSlot_SetAutoSize::InbAutoSize' has a wrong offset!");

// Function EndGame.EndCanvasPanelSlot.SetLayout
// 0x0028 (0x0028 - 0x0000)
struct EndCanvasPanelSlot_SetLayout final
{
public:
	struct FAnchorData                            InLayoutData;                                      // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCanvasPanelSlot_SetLayout) == 0x000004, "Wrong alignment on EndCanvasPanelSlot_SetLayout");
static_assert(sizeof(EndCanvasPanelSlot_SetLayout) == 0x000028, "Wrong size on EndCanvasPanelSlot_SetLayout");
static_assert(offsetof(EndCanvasPanelSlot_SetLayout, InLayoutData) == 0x000000, "Member 'EndCanvasPanelSlot_SetLayout::InLayoutData' has a wrong offset!");

// Function EndGame.EndCanvasPanelSlot.SetMaximum
// 0x0008 (0x0008 - 0x0000)
struct EndCanvasPanelSlot_SetMaximum final
{
public:
	struct FVector2D                              InMaximumAnchors;                                  // 0x0000(0x0008)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCanvasPanelSlot_SetMaximum) == 0x000004, "Wrong alignment on EndCanvasPanelSlot_SetMaximum");
static_assert(sizeof(EndCanvasPanelSlot_SetMaximum) == 0x000008, "Wrong size on EndCanvasPanelSlot_SetMaximum");
static_assert(offsetof(EndCanvasPanelSlot_SetMaximum, InMaximumAnchors) == 0x000000, "Member 'EndCanvasPanelSlot_SetMaximum::InMaximumAnchors' has a wrong offset!");

// Function EndGame.EndCanvasPanelSlot.SetMinimum
// 0x0008 (0x0008 - 0x0000)
struct EndCanvasPanelSlot_SetMinimum final
{
public:
	struct FVector2D                              InMinimumAnchors;                                  // 0x0000(0x0008)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCanvasPanelSlot_SetMinimum) == 0x000004, "Wrong alignment on EndCanvasPanelSlot_SetMinimum");
static_assert(sizeof(EndCanvasPanelSlot_SetMinimum) == 0x000008, "Wrong size on EndCanvasPanelSlot_SetMinimum");
static_assert(offsetof(EndCanvasPanelSlot_SetMinimum, InMinimumAnchors) == 0x000000, "Member 'EndCanvasPanelSlot_SetMinimum::InMinimumAnchors' has a wrong offset!");

// Function EndGame.EndCanvasPanelSlot.SetOffsets
// 0x0010 (0x0010 - 0x0000)
struct EndCanvasPanelSlot_SetOffsets final
{
public:
	struct FMargin                                InOffset;                                          // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCanvasPanelSlot_SetOffsets) == 0x000004, "Wrong alignment on EndCanvasPanelSlot_SetOffsets");
static_assert(sizeof(EndCanvasPanelSlot_SetOffsets) == 0x000010, "Wrong size on EndCanvasPanelSlot_SetOffsets");
static_assert(offsetof(EndCanvasPanelSlot_SetOffsets, InOffset) == 0x000000, "Member 'EndCanvasPanelSlot_SetOffsets::InOffset' has a wrong offset!");

// Function EndGame.EndCanvasPanelSlot.SetPosition
// 0x0008 (0x0008 - 0x0000)
struct EndCanvasPanelSlot_SetPosition final
{
public:
	struct FVector2D                              InPosition;                                        // 0x0000(0x0008)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCanvasPanelSlot_SetPosition) == 0x000004, "Wrong alignment on EndCanvasPanelSlot_SetPosition");
static_assert(sizeof(EndCanvasPanelSlot_SetPosition) == 0x000008, "Wrong size on EndCanvasPanelSlot_SetPosition");
static_assert(offsetof(EndCanvasPanelSlot_SetPosition, InPosition) == 0x000000, "Member 'EndCanvasPanelSlot_SetPosition::InPosition' has a wrong offset!");

// Function EndGame.EndCanvasPanelSlot.SetSize
// 0x0008 (0x0008 - 0x0000)
struct EndCanvasPanelSlot_SetSize final
{
public:
	struct FVector2D                              InSize;                                            // 0x0000(0x0008)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCanvasPanelSlot_SetSize) == 0x000004, "Wrong alignment on EndCanvasPanelSlot_SetSize");
static_assert(sizeof(EndCanvasPanelSlot_SetSize) == 0x000008, "Wrong size on EndCanvasPanelSlot_SetSize");
static_assert(offsetof(EndCanvasPanelSlot_SetSize, InSize) == 0x000000, "Member 'EndCanvasPanelSlot_SetSize::InSize' has a wrong offset!");

// Function EndGame.EndCanvasPanelSlot.SetXAngle
// 0x0004 (0x0004 - 0x0000)
struct EndCanvasPanelSlot_SetXAngle final
{
public:
	float                                         InYAngle;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCanvasPanelSlot_SetXAngle) == 0x000004, "Wrong alignment on EndCanvasPanelSlot_SetXAngle");
static_assert(sizeof(EndCanvasPanelSlot_SetXAngle) == 0x000004, "Wrong size on EndCanvasPanelSlot_SetXAngle");
static_assert(offsetof(EndCanvasPanelSlot_SetXAngle, InYAngle) == 0x000000, "Member 'EndCanvasPanelSlot_SetXAngle::InYAngle' has a wrong offset!");

// Function EndGame.EndCanvasPanelSlot.SetYAngle
// 0x0004 (0x0004 - 0x0000)
struct EndCanvasPanelSlot_SetYAngle final
{
public:
	float                                         InYAngle;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCanvasPanelSlot_SetYAngle) == 0x000004, "Wrong alignment on EndCanvasPanelSlot_SetYAngle");
static_assert(sizeof(EndCanvasPanelSlot_SetYAngle) == 0x000004, "Wrong size on EndCanvasPanelSlot_SetYAngle");
static_assert(offsetof(EndCanvasPanelSlot_SetYAngle, InYAngle) == 0x000000, "Member 'EndCanvasPanelSlot_SetYAngle::InYAngle' has a wrong offset!");

// Function EndGame.EndCanvasPanelSlot.SetZOrder
// 0x0004 (0x0004 - 0x0000)
struct EndCanvasPanelSlot_SetZOrder final
{
public:
	int32                                         InZOrder;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCanvasPanelSlot_SetZOrder) == 0x000004, "Wrong alignment on EndCanvasPanelSlot_SetZOrder");
static_assert(sizeof(EndCanvasPanelSlot_SetZOrder) == 0x000004, "Wrong size on EndCanvasPanelSlot_SetZOrder");
static_assert(offsetof(EndCanvasPanelSlot_SetZOrder, InZOrder) == 0x000000, "Member 'EndCanvasPanelSlot_SetZOrder::InZOrder' has a wrong offset!");

// Function EndGame.EndCanvasPanelSlot.GetAlignment
// 0x0008 (0x0008 - 0x0000)
struct EndCanvasPanelSlot_GetAlignment final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCanvasPanelSlot_GetAlignment) == 0x000004, "Wrong alignment on EndCanvasPanelSlot_GetAlignment");
static_assert(sizeof(EndCanvasPanelSlot_GetAlignment) == 0x000008, "Wrong size on EndCanvasPanelSlot_GetAlignment");
static_assert(offsetof(EndCanvasPanelSlot_GetAlignment, ReturnValue) == 0x000000, "Member 'EndCanvasPanelSlot_GetAlignment::ReturnValue' has a wrong offset!");

// Function EndGame.EndCanvasPanelSlot.GetAnchors
// 0x0010 (0x0010 - 0x0000)
struct EndCanvasPanelSlot_GetAnchors final
{
public:
	struct FAnchors                               ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCanvasPanelSlot_GetAnchors) == 0x000004, "Wrong alignment on EndCanvasPanelSlot_GetAnchors");
static_assert(sizeof(EndCanvasPanelSlot_GetAnchors) == 0x000010, "Wrong size on EndCanvasPanelSlot_GetAnchors");
static_assert(offsetof(EndCanvasPanelSlot_GetAnchors, ReturnValue) == 0x000000, "Member 'EndCanvasPanelSlot_GetAnchors::ReturnValue' has a wrong offset!");

// Function EndGame.EndCanvasPanelSlot.GetAutoSize
// 0x0001 (0x0001 - 0x0000)
struct EndCanvasPanelSlot_GetAutoSize final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCanvasPanelSlot_GetAutoSize) == 0x000001, "Wrong alignment on EndCanvasPanelSlot_GetAutoSize");
static_assert(sizeof(EndCanvasPanelSlot_GetAutoSize) == 0x000001, "Wrong size on EndCanvasPanelSlot_GetAutoSize");
static_assert(offsetof(EndCanvasPanelSlot_GetAutoSize, ReturnValue) == 0x000000, "Member 'EndCanvasPanelSlot_GetAutoSize::ReturnValue' has a wrong offset!");

// Function EndGame.EndCanvasPanelSlot.GetLayout
// 0x0028 (0x0028 - 0x0000)
struct EndCanvasPanelSlot_GetLayout final
{
public:
	struct FAnchorData                            ReturnValue;                                       // 0x0000(0x0028)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCanvasPanelSlot_GetLayout) == 0x000004, "Wrong alignment on EndCanvasPanelSlot_GetLayout");
static_assert(sizeof(EndCanvasPanelSlot_GetLayout) == 0x000028, "Wrong size on EndCanvasPanelSlot_GetLayout");
static_assert(offsetof(EndCanvasPanelSlot_GetLayout, ReturnValue) == 0x000000, "Member 'EndCanvasPanelSlot_GetLayout::ReturnValue' has a wrong offset!");

// Function EndGame.EndCanvasPanelSlot.GetOffsets
// 0x0010 (0x0010 - 0x0000)
struct EndCanvasPanelSlot_GetOffsets final
{
public:
	struct FMargin                                ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCanvasPanelSlot_GetOffsets) == 0x000004, "Wrong alignment on EndCanvasPanelSlot_GetOffsets");
static_assert(sizeof(EndCanvasPanelSlot_GetOffsets) == 0x000010, "Wrong size on EndCanvasPanelSlot_GetOffsets");
static_assert(offsetof(EndCanvasPanelSlot_GetOffsets, ReturnValue) == 0x000000, "Member 'EndCanvasPanelSlot_GetOffsets::ReturnValue' has a wrong offset!");

// Function EndGame.EndCanvasPanelSlot.GetPosition
// 0x0008 (0x0008 - 0x0000)
struct EndCanvasPanelSlot_GetPosition final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCanvasPanelSlot_GetPosition) == 0x000004, "Wrong alignment on EndCanvasPanelSlot_GetPosition");
static_assert(sizeof(EndCanvasPanelSlot_GetPosition) == 0x000008, "Wrong size on EndCanvasPanelSlot_GetPosition");
static_assert(offsetof(EndCanvasPanelSlot_GetPosition, ReturnValue) == 0x000000, "Member 'EndCanvasPanelSlot_GetPosition::ReturnValue' has a wrong offset!");

// Function EndGame.EndCanvasPanelSlot.GetSize
// 0x0008 (0x0008 - 0x0000)
struct EndCanvasPanelSlot_GetSize final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCanvasPanelSlot_GetSize) == 0x000004, "Wrong alignment on EndCanvasPanelSlot_GetSize");
static_assert(sizeof(EndCanvasPanelSlot_GetSize) == 0x000008, "Wrong size on EndCanvasPanelSlot_GetSize");
static_assert(offsetof(EndCanvasPanelSlot_GetSize, ReturnValue) == 0x000000, "Member 'EndCanvasPanelSlot_GetSize::ReturnValue' has a wrong offset!");

// Function EndGame.EndCanvasPanelSlot.GetXAngle
// 0x0004 (0x0004 - 0x0000)
struct EndCanvasPanelSlot_GetXAngle final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCanvasPanelSlot_GetXAngle) == 0x000004, "Wrong alignment on EndCanvasPanelSlot_GetXAngle");
static_assert(sizeof(EndCanvasPanelSlot_GetXAngle) == 0x000004, "Wrong size on EndCanvasPanelSlot_GetXAngle");
static_assert(offsetof(EndCanvasPanelSlot_GetXAngle, ReturnValue) == 0x000000, "Member 'EndCanvasPanelSlot_GetXAngle::ReturnValue' has a wrong offset!");

// Function EndGame.EndCanvasPanelSlot.GetYAngle
// 0x0004 (0x0004 - 0x0000)
struct EndCanvasPanelSlot_GetYAngle final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCanvasPanelSlot_GetYAngle) == 0x000004, "Wrong alignment on EndCanvasPanelSlot_GetYAngle");
static_assert(sizeof(EndCanvasPanelSlot_GetYAngle) == 0x000004, "Wrong size on EndCanvasPanelSlot_GetYAngle");
static_assert(offsetof(EndCanvasPanelSlot_GetYAngle, ReturnValue) == 0x000000, "Member 'EndCanvasPanelSlot_GetYAngle::ReturnValue' has a wrong offset!");

// Function EndGame.EndCanvasPanelSlot.GetZOrder
// 0x0004 (0x0004 - 0x0000)
struct EndCanvasPanelSlot_GetZOrder final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCanvasPanelSlot_GetZOrder) == 0x000004, "Wrong alignment on EndCanvasPanelSlot_GetZOrder");
static_assert(sizeof(EndCanvasPanelSlot_GetZOrder) == 0x000004, "Wrong size on EndCanvasPanelSlot_GetZOrder");
static_assert(offsetof(EndCanvasPanelSlot_GetZOrder, ReturnValue) == 0x000000, "Member 'EndCanvasPanelSlot_GetZOrder::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIEB0006Controller.IsHHFly
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAIEB0006Controller_IsHHFly final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIEB0006Controller_IsHHFly) == 0x000001, "Wrong alignment on EndBattleAIEB0006Controller_IsHHFly");
static_assert(sizeof(EndBattleAIEB0006Controller_IsHHFly) == 0x000001, "Wrong size on EndBattleAIEB0006Controller_IsHHFly");
static_assert(offsetof(EndBattleAIEB0006Controller_IsHHFly, ReturnValue) == 0x000000, "Member 'EndBattleAIEB0006Controller_IsHHFly::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIEB0006Controller.IsOnFloor
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAIEB0006Controller_IsOnFloor final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIEB0006Controller_IsOnFloor) == 0x000001, "Wrong alignment on EndBattleAIEB0006Controller_IsOnFloor");
static_assert(sizeof(EndBattleAIEB0006Controller_IsOnFloor) == 0x000001, "Wrong size on EndBattleAIEB0006Controller_IsOnFloor");
static_assert(offsetof(EndBattleAIEB0006Controller_IsOnFloor, ReturnValue) == 0x000000, "Member 'EndBattleAIEB0006Controller_IsOnFloor::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIEB0006Controller.IsOnWall
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAIEB0006Controller_IsOnWall final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIEB0006Controller_IsOnWall) == 0x000001, "Wrong alignment on EndBattleAIEB0006Controller_IsOnWall");
static_assert(sizeof(EndBattleAIEB0006Controller_IsOnWall) == 0x000001, "Wrong size on EndBattleAIEB0006Controller_IsOnWall");
static_assert(offsetof(EndBattleAIEB0006Controller_IsOnWall, ReturnValue) == 0x000000, "Member 'EndBattleAIEB0006Controller_IsOnWall::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIEB0006Controller.ReleaseWallJump
// 0x000C (0x000C - 0x0000)
struct EndBattleAIEB0006Controller_ReleaseWallJump final
{
public:
	int32                                         InID;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InTime;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InBias;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIEB0006Controller_ReleaseWallJump) == 0x000004, "Wrong alignment on EndBattleAIEB0006Controller_ReleaseWallJump");
static_assert(sizeof(EndBattleAIEB0006Controller_ReleaseWallJump) == 0x00000C, "Wrong size on EndBattleAIEB0006Controller_ReleaseWallJump");
static_assert(offsetof(EndBattleAIEB0006Controller_ReleaseWallJump, InID) == 0x000000, "Member 'EndBattleAIEB0006Controller_ReleaseWallJump::InID' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0006Controller_ReleaseWallJump, InTime) == 0x000004, "Member 'EndBattleAIEB0006Controller_ReleaseWallJump::InTime' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0006Controller_ReleaseWallJump, InBias) == 0x000008, "Member 'EndBattleAIEB0006Controller_ReleaseWallJump::InBias' has a wrong offset!");

// Function EndGame.EndBattleAIEB0006Controller.RequestTurnJump
// 0x000C (0x000C - 0x0000)
struct EndBattleAIEB0006Controller_RequestTurnJump final
{
public:
	struct FVector                                Target;                                            // 0x0000(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIEB0006Controller_RequestTurnJump) == 0x000004, "Wrong alignment on EndBattleAIEB0006Controller_RequestTurnJump");
static_assert(sizeof(EndBattleAIEB0006Controller_RequestTurnJump) == 0x00000C, "Wrong size on EndBattleAIEB0006Controller_RequestTurnJump");
static_assert(offsetof(EndBattleAIEB0006Controller_RequestTurnJump, Target) == 0x000000, "Member 'EndBattleAIEB0006Controller_RequestTurnJump::Target' has a wrong offset!");

// Function EndGame.EndBattleAIEB0006Controller.RequestWallJump
// 0x000C (0x000C - 0x0000)
struct EndBattleAIEB0006Controller_RequestWallJump final
{
public:
	int32                                         InID;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InTime;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InBias;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIEB0006Controller_RequestWallJump) == 0x000004, "Wrong alignment on EndBattleAIEB0006Controller_RequestWallJump");
static_assert(sizeof(EndBattleAIEB0006Controller_RequestWallJump) == 0x00000C, "Wrong size on EndBattleAIEB0006Controller_RequestWallJump");
static_assert(offsetof(EndBattleAIEB0006Controller_RequestWallJump, InID) == 0x000000, "Member 'EndBattleAIEB0006Controller_RequestWallJump::InID' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0006Controller_RequestWallJump, InTime) == 0x000004, "Member 'EndBattleAIEB0006Controller_RequestWallJump::InTime' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0006Controller_RequestWallJump, InBias) == 0x000008, "Member 'EndBattleAIEB0006Controller_RequestWallJump::InBias' has a wrong offset!");

// Function EndGame.EndBattleAIEB0009Controller.AddDisableRangePartsBarrier
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAIEB0009Controller_AddDisableRangePartsBarrier final
{
public:
	float                                         baseAngle;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         rangeAngle;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIEB0009Controller_AddDisableRangePartsBarrier) == 0x000004, "Wrong alignment on EndBattleAIEB0009Controller_AddDisableRangePartsBarrier");
static_assert(sizeof(EndBattleAIEB0009Controller_AddDisableRangePartsBarrier) == 0x000008, "Wrong size on EndBattleAIEB0009Controller_AddDisableRangePartsBarrier");
static_assert(offsetof(EndBattleAIEB0009Controller_AddDisableRangePartsBarrier, baseAngle) == 0x000000, "Member 'EndBattleAIEB0009Controller_AddDisableRangePartsBarrier::baseAngle' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0009Controller_AddDisableRangePartsBarrier, rangeAngle) == 0x000004, "Member 'EndBattleAIEB0009Controller_AddDisableRangePartsBarrier::rangeAngle' has a wrong offset!");

// Function EndGame.EndBattleAIEB0016Controller.ChangeGunMode
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAIEB0016Controller_ChangeGunMode final
{
public:
	ERufusGunMode                                 gunMode;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIEB0016Controller_ChangeGunMode) == 0x000001, "Wrong alignment on EndBattleAIEB0016Controller_ChangeGunMode");
static_assert(sizeof(EndBattleAIEB0016Controller_ChangeGunMode) == 0x000001, "Wrong size on EndBattleAIEB0016Controller_ChangeGunMode");
static_assert(offsetof(EndBattleAIEB0016Controller_ChangeGunMode, gunMode) == 0x000000, "Member 'EndBattleAIEB0016Controller_ChangeGunMode::gunMode' has a wrong offset!");

// Function EndGame.EndBattleAIEB0016Controller.CheckGunMode
// 0x0002 (0x0002 - 0x0000)
struct EndBattleAIEB0016Controller_CheckGunMode final
{
public:
	ERufusGunMode                                 gunMode;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIEB0016Controller_CheckGunMode) == 0x000001, "Wrong alignment on EndBattleAIEB0016Controller_CheckGunMode");
static_assert(sizeof(EndBattleAIEB0016Controller_CheckGunMode) == 0x000002, "Wrong size on EndBattleAIEB0016Controller_CheckGunMode");
static_assert(offsetof(EndBattleAIEB0016Controller_CheckGunMode, gunMode) == 0x000000, "Member 'EndBattleAIEB0016Controller_CheckGunMode::gunMode' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0016Controller_CheckGunMode, ReturnValue) == 0x000001, "Member 'EndBattleAIEB0016Controller_CheckGunMode::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIEB0016Controller.CheckLinkMode
// 0x0002 (0x0002 - 0x0000)
struct EndBattleAIEB0016Controller_CheckLinkMode final
{
public:
	ERufusLinkMode                                linkMode;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIEB0016Controller_CheckLinkMode) == 0x000001, "Wrong alignment on EndBattleAIEB0016Controller_CheckLinkMode");
static_assert(sizeof(EndBattleAIEB0016Controller_CheckLinkMode) == 0x000002, "Wrong size on EndBattleAIEB0016Controller_CheckLinkMode");
static_assert(offsetof(EndBattleAIEB0016Controller_CheckLinkMode, linkMode) == 0x000000, "Member 'EndBattleAIEB0016Controller_CheckLinkMode::linkMode' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0016Controller_CheckLinkMode, ReturnValue) == 0x000001, "Member 'EndBattleAIEB0016Controller_CheckLinkMode::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIEB0016Controller.GetBulletCount
// 0x0004 (0x0004 - 0x0000)
struct EndBattleAIEB0016Controller_GetBulletCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIEB0016Controller_GetBulletCount) == 0x000004, "Wrong alignment on EndBattleAIEB0016Controller_GetBulletCount");
static_assert(sizeof(EndBattleAIEB0016Controller_GetBulletCount) == 0x000004, "Wrong size on EndBattleAIEB0016Controller_GetBulletCount");
static_assert(offsetof(EndBattleAIEB0016Controller_GetBulletCount, ReturnValue) == 0x000000, "Member 'EndBattleAIEB0016Controller_GetBulletCount::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIEB0016Controller.GetGotoPosition
// 0x0014 (0x0014 - 0x0000)
struct EndBattleAIEB0016Controller_GetGotoPosition final
{
public:
	EPlayerType                                   PlayerType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERufusGoToPositionType                        positionType;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERufusGoToDistanceType                        DistanceType;                                      // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         dirYaw;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0008(0x000C)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIEB0016Controller_GetGotoPosition) == 0x000004, "Wrong alignment on EndBattleAIEB0016Controller_GetGotoPosition");
static_assert(sizeof(EndBattleAIEB0016Controller_GetGotoPosition) == 0x000014, "Wrong size on EndBattleAIEB0016Controller_GetGotoPosition");
static_assert(offsetof(EndBattleAIEB0016Controller_GetGotoPosition, PlayerType) == 0x000000, "Member 'EndBattleAIEB0016Controller_GetGotoPosition::PlayerType' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0016Controller_GetGotoPosition, positionType) == 0x000001, "Member 'EndBattleAIEB0016Controller_GetGotoPosition::positionType' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0016Controller_GetGotoPosition, DistanceType) == 0x000002, "Member 'EndBattleAIEB0016Controller_GetGotoPosition::DistanceType' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0016Controller_GetGotoPosition, dirYaw) == 0x000004, "Member 'EndBattleAIEB0016Controller_GetGotoPosition::dirYaw' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0016Controller_GetGotoPosition, ReturnValue) == 0x000008, "Member 'EndBattleAIEB0016Controller_GetGotoPosition::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIEB0016Controller.OnEventFastDash
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAIEB0016Controller_OnEventFastDash final
{
public:
	class FName                                   EventName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIEB0016Controller_OnEventFastDash) == 0x000004, "Wrong alignment on EndBattleAIEB0016Controller_OnEventFastDash");
static_assert(sizeof(EndBattleAIEB0016Controller_OnEventFastDash) == 0x000008, "Wrong size on EndBattleAIEB0016Controller_OnEventFastDash");
static_assert(offsetof(EndBattleAIEB0016Controller_OnEventFastDash, EventName) == 0x000000, "Member 'EndBattleAIEB0016Controller_OnEventFastDash::EventName' has a wrong offset!");

// Function EndGame.EndBattleAIEB0016Controller.RegisterFastDash
// 0x005C (0x005C - 0x0000)
struct EndBattleAIEB0016Controller_RegisterFastDash final
{
public:
	class FName                                   keyword;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   startAnimation;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LoopAnimation;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   endAnimation;                                      // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         vailableDistance;                                  // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   eventNameCompleted;                                // 0x0024(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   eventNameSuspended;                                // 0x002C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   eventNameTimeOver;                                 // 0x0034(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   eventNameHitWall;                                  // 0x003C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   eventNameMissing;                                  // 0x0044(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   eventNameArrival;                                  // 0x004C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   eventNameNear;                                     // 0x0054(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIEB0016Controller_RegisterFastDash) == 0x000004, "Wrong alignment on EndBattleAIEB0016Controller_RegisterFastDash");
static_assert(sizeof(EndBattleAIEB0016Controller_RegisterFastDash) == 0x00005C, "Wrong size on EndBattleAIEB0016Controller_RegisterFastDash");
static_assert(offsetof(EndBattleAIEB0016Controller_RegisterFastDash, keyword) == 0x000000, "Member 'EndBattleAIEB0016Controller_RegisterFastDash::keyword' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0016Controller_RegisterFastDash, startAnimation) == 0x000008, "Member 'EndBattleAIEB0016Controller_RegisterFastDash::startAnimation' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0016Controller_RegisterFastDash, LoopAnimation) == 0x000010, "Member 'EndBattleAIEB0016Controller_RegisterFastDash::LoopAnimation' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0016Controller_RegisterFastDash, endAnimation) == 0x000018, "Member 'EndBattleAIEB0016Controller_RegisterFastDash::endAnimation' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0016Controller_RegisterFastDash, vailableDistance) == 0x000020, "Member 'EndBattleAIEB0016Controller_RegisterFastDash::vailableDistance' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0016Controller_RegisterFastDash, eventNameCompleted) == 0x000024, "Member 'EndBattleAIEB0016Controller_RegisterFastDash::eventNameCompleted' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0016Controller_RegisterFastDash, eventNameSuspended) == 0x00002C, "Member 'EndBattleAIEB0016Controller_RegisterFastDash::eventNameSuspended' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0016Controller_RegisterFastDash, eventNameTimeOver) == 0x000034, "Member 'EndBattleAIEB0016Controller_RegisterFastDash::eventNameTimeOver' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0016Controller_RegisterFastDash, eventNameHitWall) == 0x00003C, "Member 'EndBattleAIEB0016Controller_RegisterFastDash::eventNameHitWall' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0016Controller_RegisterFastDash, eventNameMissing) == 0x000044, "Member 'EndBattleAIEB0016Controller_RegisterFastDash::eventNameMissing' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0016Controller_RegisterFastDash, eventNameArrival) == 0x00004C, "Member 'EndBattleAIEB0016Controller_RegisterFastDash::eventNameArrival' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0016Controller_RegisterFastDash, eventNameNear) == 0x000054, "Member 'EndBattleAIEB0016Controller_RegisterFastDash::eventNameNear' has a wrong offset!");

// Function EndGame.EndBattleAIEB0016Controller.RegisterFastDashEffect
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAIEB0016Controller_RegisterFastDashEffect final
{
public:
	class FName                                   CharaSpecName;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   effectFastDashMove;                                // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIEB0016Controller_RegisterFastDashEffect) == 0x000004, "Wrong alignment on EndBattleAIEB0016Controller_RegisterFastDashEffect");
static_assert(sizeof(EndBattleAIEB0016Controller_RegisterFastDashEffect) == 0x000010, "Wrong size on EndBattleAIEB0016Controller_RegisterFastDashEffect");
static_assert(offsetof(EndBattleAIEB0016Controller_RegisterFastDashEffect, CharaSpecName) == 0x000000, "Member 'EndBattleAIEB0016Controller_RegisterFastDashEffect::CharaSpecName' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0016Controller_RegisterFastDashEffect, effectFastDashMove) == 0x000008, "Member 'EndBattleAIEB0016Controller_RegisterFastDashEffect::effectFastDashMove' has a wrong offset!");

// Function EndGame.EndBattleAIEB0016Controller.RegisterGotoPosition
// 0x000C (0x000C - 0x0000)
struct EndBattleAIEB0016Controller_RegisterGotoPosition final
{
public:
	struct FVector                                Distance;                                          // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIEB0016Controller_RegisterGotoPosition) == 0x000004, "Wrong alignment on EndBattleAIEB0016Controller_RegisterGotoPosition");
static_assert(sizeof(EndBattleAIEB0016Controller_RegisterGotoPosition) == 0x00000C, "Wrong size on EndBattleAIEB0016Controller_RegisterGotoPosition");
static_assert(offsetof(EndBattleAIEB0016Controller_RegisterGotoPosition, Distance) == 0x000000, "Member 'EndBattleAIEB0016Controller_RegisterGotoPosition::Distance' has a wrong offset!");

// Function EndGame.EndBattleAIEB0016Controller.RequestReserveActionFastDash
// 0x0030 (0x0030 - 0x0000)
struct EndBattleAIEB0016Controller_RequestReserveActionFastDash final
{
public:
	class FName                                   keyword;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                goalPosition;                                      // 0x0008(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FastMoveSpeed;                                     // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         missingDistance;                                   // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         marginDistance;                                    // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         limitTime;                                         // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         moveFriction;                                      // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          useStartFrontRotate;                               // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          useDeceleration;                                   // 0x0029(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          updateGoalPosition;                                // 0x002A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          drawTargetPoint;                                   // 0x002B(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x002C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAIEB0016Controller_RequestReserveActionFastDash) == 0x000004, "Wrong alignment on EndBattleAIEB0016Controller_RequestReserveActionFastDash");
static_assert(sizeof(EndBattleAIEB0016Controller_RequestReserveActionFastDash) == 0x000030, "Wrong size on EndBattleAIEB0016Controller_RequestReserveActionFastDash");
static_assert(offsetof(EndBattleAIEB0016Controller_RequestReserveActionFastDash, keyword) == 0x000000, "Member 'EndBattleAIEB0016Controller_RequestReserveActionFastDash::keyword' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0016Controller_RequestReserveActionFastDash, goalPosition) == 0x000008, "Member 'EndBattleAIEB0016Controller_RequestReserveActionFastDash::goalPosition' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0016Controller_RequestReserveActionFastDash, FastMoveSpeed) == 0x000014, "Member 'EndBattleAIEB0016Controller_RequestReserveActionFastDash::FastMoveSpeed' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0016Controller_RequestReserveActionFastDash, missingDistance) == 0x000018, "Member 'EndBattleAIEB0016Controller_RequestReserveActionFastDash::missingDistance' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0016Controller_RequestReserveActionFastDash, marginDistance) == 0x00001C, "Member 'EndBattleAIEB0016Controller_RequestReserveActionFastDash::marginDistance' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0016Controller_RequestReserveActionFastDash, limitTime) == 0x000020, "Member 'EndBattleAIEB0016Controller_RequestReserveActionFastDash::limitTime' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0016Controller_RequestReserveActionFastDash, moveFriction) == 0x000024, "Member 'EndBattleAIEB0016Controller_RequestReserveActionFastDash::moveFriction' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0016Controller_RequestReserveActionFastDash, useStartFrontRotate) == 0x000028, "Member 'EndBattleAIEB0016Controller_RequestReserveActionFastDash::useStartFrontRotate' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0016Controller_RequestReserveActionFastDash, useDeceleration) == 0x000029, "Member 'EndBattleAIEB0016Controller_RequestReserveActionFastDash::useDeceleration' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0016Controller_RequestReserveActionFastDash, updateGoalPosition) == 0x00002A, "Member 'EndBattleAIEB0016Controller_RequestReserveActionFastDash::updateGoalPosition' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0016Controller_RequestReserveActionFastDash, drawTargetPoint) == 0x00002B, "Member 'EndBattleAIEB0016Controller_RequestReserveActionFastDash::drawTargetPoint' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0016Controller_RequestReserveActionFastDash, ReturnValue) == 0x00002C, "Member 'EndBattleAIEB0016Controller_RequestReserveActionFastDash::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIEB0016Controller.SetLinkMode
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAIEB0016Controller_SetLinkMode final
{
public:
	ERufusLinkMode                                linkMode;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIEB0016Controller_SetLinkMode) == 0x000001, "Wrong alignment on EndBattleAIEB0016Controller_SetLinkMode");
static_assert(sizeof(EndBattleAIEB0016Controller_SetLinkMode) == 0x000001, "Wrong size on EndBattleAIEB0016Controller_SetLinkMode");
static_assert(offsetof(EndBattleAIEB0016Controller_SetLinkMode, linkMode) == 0x000000, "Member 'EndBattleAIEB0016Controller_SetLinkMode::linkMode' has a wrong offset!");

// Function EndGame.EndBattleAIEB0016Controller.SetupBullet
// 0x0004 (0x0004 - 0x0000)
struct EndBattleAIEB0016Controller_SetupBullet final
{
public:
	int32                                         Count;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIEB0016Controller_SetupBullet) == 0x000004, "Wrong alignment on EndBattleAIEB0016Controller_SetupBullet");
static_assert(sizeof(EndBattleAIEB0016Controller_SetupBullet) == 0x000004, "Wrong size on EndBattleAIEB0016Controller_SetupBullet");
static_assert(offsetof(EndBattleAIEB0016Controller_SetupBullet, Count) == 0x000000, "Member 'EndBattleAIEB0016Controller_SetupBullet::Count' has a wrong offset!");

// Function EndGame.EndBattleAIEB0020Controller.OnEasySpawnEvent
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAIEB0020Controller_OnEasySpawnEvent final
{
public:
	class FName                                   keywordName;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EventName;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIEB0020Controller_OnEasySpawnEvent) == 0x000004, "Wrong alignment on EndBattleAIEB0020Controller_OnEasySpawnEvent");
static_assert(sizeof(EndBattleAIEB0020Controller_OnEasySpawnEvent) == 0x000010, "Wrong size on EndBattleAIEB0020Controller_OnEasySpawnEvent");
static_assert(offsetof(EndBattleAIEB0020Controller_OnEasySpawnEvent, keywordName) == 0x000000, "Member 'EndBattleAIEB0020Controller_OnEasySpawnEvent::keywordName' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0020Controller_OnEasySpawnEvent, EventName) == 0x000008, "Member 'EndBattleAIEB0020Controller_OnEasySpawnEvent::EventName' has a wrong offset!");

// Function EndGame.EndBattleAIEB0020Controller.RequestBreakParts
// 0x001C (0x001C - 0x0000)
struct EndBattleAIEB0020Controller_RequestBreakParts final
{
public:
	class FName                                   keyword;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   brokenAnimationName;                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          syncPlayMotion;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendInTime;                                       // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAIEB0020Controller_RequestBreakParts) == 0x000004, "Wrong alignment on EndBattleAIEB0020Controller_RequestBreakParts");
static_assert(sizeof(EndBattleAIEB0020Controller_RequestBreakParts) == 0x00001C, "Wrong size on EndBattleAIEB0020Controller_RequestBreakParts");
static_assert(offsetof(EndBattleAIEB0020Controller_RequestBreakParts, keyword) == 0x000000, "Member 'EndBattleAIEB0020Controller_RequestBreakParts::keyword' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0020Controller_RequestBreakParts, brokenAnimationName) == 0x000008, "Member 'EndBattleAIEB0020Controller_RequestBreakParts::brokenAnimationName' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0020Controller_RequestBreakParts, syncPlayMotion) == 0x000010, "Member 'EndBattleAIEB0020Controller_RequestBreakParts::syncPlayMotion' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0020Controller_RequestBreakParts, BlendInTime) == 0x000014, "Member 'EndBattleAIEB0020Controller_RequestBreakParts::BlendInTime' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0020Controller_RequestBreakParts, ReturnValue) == 0x000018, "Member 'EndBattleAIEB0020Controller_RequestBreakParts::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIEB0020Controller.RequestPraecoTurn
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAIEB0020Controller_RequestPraecoTurn final
{
public:
	float                                         InYaw;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InTime;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIEB0020Controller_RequestPraecoTurn) == 0x000004, "Wrong alignment on EndBattleAIEB0020Controller_RequestPraecoTurn");
static_assert(sizeof(EndBattleAIEB0020Controller_RequestPraecoTurn) == 0x000008, "Wrong size on EndBattleAIEB0020Controller_RequestPraecoTurn");
static_assert(offsetof(EndBattleAIEB0020Controller_RequestPraecoTurn, InYaw) == 0x000000, "Member 'EndBattleAIEB0020Controller_RequestPraecoTurn::InYaw' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0020Controller_RequestPraecoTurn, InTime) == 0x000004, "Member 'EndBattleAIEB0020Controller_RequestPraecoTurn::InTime' has a wrong offset!");

// Function EndGame.EndBattleAIEB0020Controller.RequestPraecoTurnToPoint
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAIEB0020Controller_RequestPraecoTurnToPoint final
{
public:
	struct FVector                                InLocation;                                        // 0x0000(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InTime;                                            // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIEB0020Controller_RequestPraecoTurnToPoint) == 0x000004, "Wrong alignment on EndBattleAIEB0020Controller_RequestPraecoTurnToPoint");
static_assert(sizeof(EndBattleAIEB0020Controller_RequestPraecoTurnToPoint) == 0x000010, "Wrong size on EndBattleAIEB0020Controller_RequestPraecoTurnToPoint");
static_assert(offsetof(EndBattleAIEB0020Controller_RequestPraecoTurnToPoint, InLocation) == 0x000000, "Member 'EndBattleAIEB0020Controller_RequestPraecoTurnToPoint::InLocation' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0020Controller_RequestPraecoTurnToPoint, InTime) == 0x00000C, "Member 'EndBattleAIEB0020Controller_RequestPraecoTurnToPoint::InTime' has a wrong offset!");

// Function EndGame.EndBattleAIEB0020Controller.RequestSpawnParts
// 0x001C (0x001C - 0x0000)
struct EndBattleAIEB0020Controller_RequestSpawnParts final
{
public:
	class FName                                   keyword;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CharaSpecName;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          spawnedInvisible;                                  // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          updateSpawn;                                       // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         respawnTime;                                       // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAIEB0020Controller_RequestSpawnParts) == 0x000004, "Wrong alignment on EndBattleAIEB0020Controller_RequestSpawnParts");
static_assert(sizeof(EndBattleAIEB0020Controller_RequestSpawnParts) == 0x00001C, "Wrong size on EndBattleAIEB0020Controller_RequestSpawnParts");
static_assert(offsetof(EndBattleAIEB0020Controller_RequestSpawnParts, keyword) == 0x000000, "Member 'EndBattleAIEB0020Controller_RequestSpawnParts::keyword' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0020Controller_RequestSpawnParts, CharaSpecName) == 0x000008, "Member 'EndBattleAIEB0020Controller_RequestSpawnParts::CharaSpecName' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0020Controller_RequestSpawnParts, spawnedInvisible) == 0x000010, "Member 'EndBattleAIEB0020Controller_RequestSpawnParts::spawnedInvisible' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0020Controller_RequestSpawnParts, updateSpawn) == 0x000011, "Member 'EndBattleAIEB0020Controller_RequestSpawnParts::updateSpawn' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0020Controller_RequestSpawnParts, respawnTime) == 0x000014, "Member 'EndBattleAIEB0020Controller_RequestSpawnParts::respawnTime' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0020Controller_RequestSpawnParts, ReturnValue) == 0x000018, "Member 'EndBattleAIEB0020Controller_RequestSpawnParts::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIEB0029Controller.GetGotoPosition
// 0x0018 (0x0018 - 0x0000)
struct EndBattleAIEB0029Controller_GetGotoPosition final
{
public:
	EPlayerType                                   PlayerType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPraecoMiniGoToPositionType                   positionType;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPraecoMiniGoToDistanceType                   DistanceType;                                      // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         dirYaw;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPraecoMiniGoToMode                           gotoMode;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x000C(0x000C)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIEB0029Controller_GetGotoPosition) == 0x000004, "Wrong alignment on EndBattleAIEB0029Controller_GetGotoPosition");
static_assert(sizeof(EndBattleAIEB0029Controller_GetGotoPosition) == 0x000018, "Wrong size on EndBattleAIEB0029Controller_GetGotoPosition");
static_assert(offsetof(EndBattleAIEB0029Controller_GetGotoPosition, PlayerType) == 0x000000, "Member 'EndBattleAIEB0029Controller_GetGotoPosition::PlayerType' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0029Controller_GetGotoPosition, positionType) == 0x000001, "Member 'EndBattleAIEB0029Controller_GetGotoPosition::positionType' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0029Controller_GetGotoPosition, DistanceType) == 0x000002, "Member 'EndBattleAIEB0029Controller_GetGotoPosition::DistanceType' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0029Controller_GetGotoPosition, dirYaw) == 0x000004, "Member 'EndBattleAIEB0029Controller_GetGotoPosition::dirYaw' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0029Controller_GetGotoPosition, gotoMode) == 0x000008, "Member 'EndBattleAIEB0029Controller_GetGotoPosition::gotoMode' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0029Controller_GetGotoPosition, ReturnValue) == 0x00000C, "Member 'EndBattleAIEB0029Controller_GetGotoPosition::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIEB0029Controller.OnCompleteTransAttach
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAIEB0029Controller_OnCompleteTransAttach final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIEB0029Controller_OnCompleteTransAttach) == 0x000004, "Wrong alignment on EndBattleAIEB0029Controller_OnCompleteTransAttach");
static_assert(sizeof(EndBattleAIEB0029Controller_OnCompleteTransAttach) == 0x000008, "Wrong size on EndBattleAIEB0029Controller_OnCompleteTransAttach");
static_assert(offsetof(EndBattleAIEB0029Controller_OnCompleteTransAttach, InName) == 0x000000, "Member 'EndBattleAIEB0029Controller_OnCompleteTransAttach::InName' has a wrong offset!");

// Function EndGame.EndBattleAIEB0029Controller.OnEventFastDash
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAIEB0029Controller_OnEventFastDash final
{
public:
	class FName                                   EventName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIEB0029Controller_OnEventFastDash) == 0x000004, "Wrong alignment on EndBattleAIEB0029Controller_OnEventFastDash");
static_assert(sizeof(EndBattleAIEB0029Controller_OnEventFastDash) == 0x000008, "Wrong size on EndBattleAIEB0029Controller_OnEventFastDash");
static_assert(offsetof(EndBattleAIEB0029Controller_OnEventFastDash, EventName) == 0x000000, "Member 'EndBattleAIEB0029Controller_OnEventFastDash::EventName' has a wrong offset!");

// Function EndGame.EndBattleAIEB0029Controller.RegisterFastDash
// 0x005C (0x005C - 0x0000)
struct EndBattleAIEB0029Controller_RegisterFastDash final
{
public:
	class FName                                   keyword;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   startAnimation;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LoopAnimation;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   endAnimation;                                      // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         vailableDistance;                                  // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   eventNameCompleted;                                // 0x0024(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   eventNameSuspended;                                // 0x002C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   eventNameTimeOver;                                 // 0x0034(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   eventNameHitWall;                                  // 0x003C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   eventNameMissing;                                  // 0x0044(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   eventNameArrival;                                  // 0x004C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   eventNameNear;                                     // 0x0054(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIEB0029Controller_RegisterFastDash) == 0x000004, "Wrong alignment on EndBattleAIEB0029Controller_RegisterFastDash");
static_assert(sizeof(EndBattleAIEB0029Controller_RegisterFastDash) == 0x00005C, "Wrong size on EndBattleAIEB0029Controller_RegisterFastDash");
static_assert(offsetof(EndBattleAIEB0029Controller_RegisterFastDash, keyword) == 0x000000, "Member 'EndBattleAIEB0029Controller_RegisterFastDash::keyword' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0029Controller_RegisterFastDash, startAnimation) == 0x000008, "Member 'EndBattleAIEB0029Controller_RegisterFastDash::startAnimation' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0029Controller_RegisterFastDash, LoopAnimation) == 0x000010, "Member 'EndBattleAIEB0029Controller_RegisterFastDash::LoopAnimation' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0029Controller_RegisterFastDash, endAnimation) == 0x000018, "Member 'EndBattleAIEB0029Controller_RegisterFastDash::endAnimation' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0029Controller_RegisterFastDash, vailableDistance) == 0x000020, "Member 'EndBattleAIEB0029Controller_RegisterFastDash::vailableDistance' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0029Controller_RegisterFastDash, eventNameCompleted) == 0x000024, "Member 'EndBattleAIEB0029Controller_RegisterFastDash::eventNameCompleted' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0029Controller_RegisterFastDash, eventNameSuspended) == 0x00002C, "Member 'EndBattleAIEB0029Controller_RegisterFastDash::eventNameSuspended' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0029Controller_RegisterFastDash, eventNameTimeOver) == 0x000034, "Member 'EndBattleAIEB0029Controller_RegisterFastDash::eventNameTimeOver' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0029Controller_RegisterFastDash, eventNameHitWall) == 0x00003C, "Member 'EndBattleAIEB0029Controller_RegisterFastDash::eventNameHitWall' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0029Controller_RegisterFastDash, eventNameMissing) == 0x000044, "Member 'EndBattleAIEB0029Controller_RegisterFastDash::eventNameMissing' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0029Controller_RegisterFastDash, eventNameArrival) == 0x00004C, "Member 'EndBattleAIEB0029Controller_RegisterFastDash::eventNameArrival' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0029Controller_RegisterFastDash, eventNameNear) == 0x000054, "Member 'EndBattleAIEB0029Controller_RegisterFastDash::eventNameNear' has a wrong offset!");

// Function EndGame.EndBattleAIEB0029Controller.RegisterFastDashEffect
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAIEB0029Controller_RegisterFastDashEffect final
{
public:
	class FName                                   CharaSpecName;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   effectFastDashMove;                                // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIEB0029Controller_RegisterFastDashEffect) == 0x000004, "Wrong alignment on EndBattleAIEB0029Controller_RegisterFastDashEffect");
static_assert(sizeof(EndBattleAIEB0029Controller_RegisterFastDashEffect) == 0x000010, "Wrong size on EndBattleAIEB0029Controller_RegisterFastDashEffect");
static_assert(offsetof(EndBattleAIEB0029Controller_RegisterFastDashEffect, CharaSpecName) == 0x000000, "Member 'EndBattleAIEB0029Controller_RegisterFastDashEffect::CharaSpecName' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0029Controller_RegisterFastDashEffect, effectFastDashMove) == 0x000008, "Member 'EndBattleAIEB0029Controller_RegisterFastDashEffect::effectFastDashMove' has a wrong offset!");

// Function EndGame.EndBattleAIEB0029Controller.RegisterGotoPosition
// 0x000C (0x000C - 0x0000)
struct EndBattleAIEB0029Controller_RegisterGotoPosition final
{
public:
	struct FVector                                Distance;                                          // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIEB0029Controller_RegisterGotoPosition) == 0x000004, "Wrong alignment on EndBattleAIEB0029Controller_RegisterGotoPosition");
static_assert(sizeof(EndBattleAIEB0029Controller_RegisterGotoPosition) == 0x00000C, "Wrong size on EndBattleAIEB0029Controller_RegisterGotoPosition");
static_assert(offsetof(EndBattleAIEB0029Controller_RegisterGotoPosition, Distance) == 0x000000, "Member 'EndBattleAIEB0029Controller_RegisterGotoPosition::Distance' has a wrong offset!");

// Function EndGame.EndBattleAIEB0029Controller.RequestReserveActionFastDash
// 0x0030 (0x0030 - 0x0000)
struct EndBattleAIEB0029Controller_RequestReserveActionFastDash final
{
public:
	class FName                                   keyword;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                goalPosition;                                      // 0x0008(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FastMoveSpeed;                                     // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         missingDistance;                                   // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         marginDistance;                                    // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         limitTime;                                         // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         moveFriction;                                      // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          useStartFrontRotate;                               // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          useDeceleration;                                   // 0x0029(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          updateGoalPosition;                                // 0x002A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          drawTargetPoint;                                   // 0x002B(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x002C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAIEB0029Controller_RequestReserveActionFastDash) == 0x000004, "Wrong alignment on EndBattleAIEB0029Controller_RequestReserveActionFastDash");
static_assert(sizeof(EndBattleAIEB0029Controller_RequestReserveActionFastDash) == 0x000030, "Wrong size on EndBattleAIEB0029Controller_RequestReserveActionFastDash");
static_assert(offsetof(EndBattleAIEB0029Controller_RequestReserveActionFastDash, keyword) == 0x000000, "Member 'EndBattleAIEB0029Controller_RequestReserveActionFastDash::keyword' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0029Controller_RequestReserveActionFastDash, goalPosition) == 0x000008, "Member 'EndBattleAIEB0029Controller_RequestReserveActionFastDash::goalPosition' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0029Controller_RequestReserveActionFastDash, FastMoveSpeed) == 0x000014, "Member 'EndBattleAIEB0029Controller_RequestReserveActionFastDash::FastMoveSpeed' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0029Controller_RequestReserveActionFastDash, missingDistance) == 0x000018, "Member 'EndBattleAIEB0029Controller_RequestReserveActionFastDash::missingDistance' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0029Controller_RequestReserveActionFastDash, marginDistance) == 0x00001C, "Member 'EndBattleAIEB0029Controller_RequestReserveActionFastDash::marginDistance' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0029Controller_RequestReserveActionFastDash, limitTime) == 0x000020, "Member 'EndBattleAIEB0029Controller_RequestReserveActionFastDash::limitTime' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0029Controller_RequestReserveActionFastDash, moveFriction) == 0x000024, "Member 'EndBattleAIEB0029Controller_RequestReserveActionFastDash::moveFriction' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0029Controller_RequestReserveActionFastDash, useStartFrontRotate) == 0x000028, "Member 'EndBattleAIEB0029Controller_RequestReserveActionFastDash::useStartFrontRotate' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0029Controller_RequestReserveActionFastDash, useDeceleration) == 0x000029, "Member 'EndBattleAIEB0029Controller_RequestReserveActionFastDash::useDeceleration' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0029Controller_RequestReserveActionFastDash, updateGoalPosition) == 0x00002A, "Member 'EndBattleAIEB0029Controller_RequestReserveActionFastDash::updateGoalPosition' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0029Controller_RequestReserveActionFastDash, drawTargetPoint) == 0x00002B, "Member 'EndBattleAIEB0029Controller_RequestReserveActionFastDash::drawTargetPoint' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0029Controller_RequestReserveActionFastDash, ReturnValue) == 0x00002C, "Member 'EndBattleAIEB0029Controller_RequestReserveActionFastDash::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIEB0029Controller.RequestReserveActionTransAttach
// 0x0050 (0x0050 - 0x0000)
struct EndBattleAIEB0029Controller_RequestReserveActionTransAttach final
{
public:
	class FName                                   InSocket;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             InTargetTransform;                                 // 0x0010(0x0030)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         InDuration;                                        // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InName;                                            // 0x0044(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x004C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAIEB0029Controller_RequestReserveActionTransAttach) == 0x000010, "Wrong alignment on EndBattleAIEB0029Controller_RequestReserveActionTransAttach");
static_assert(sizeof(EndBattleAIEB0029Controller_RequestReserveActionTransAttach) == 0x000050, "Wrong size on EndBattleAIEB0029Controller_RequestReserveActionTransAttach");
static_assert(offsetof(EndBattleAIEB0029Controller_RequestReserveActionTransAttach, InSocket) == 0x000000, "Member 'EndBattleAIEB0029Controller_RequestReserveActionTransAttach::InSocket' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0029Controller_RequestReserveActionTransAttach, InTargetTransform) == 0x000010, "Member 'EndBattleAIEB0029Controller_RequestReserveActionTransAttach::InTargetTransform' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0029Controller_RequestReserveActionTransAttach, InDuration) == 0x000040, "Member 'EndBattleAIEB0029Controller_RequestReserveActionTransAttach::InDuration' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0029Controller_RequestReserveActionTransAttach, InName) == 0x000044, "Member 'EndBattleAIEB0029Controller_RequestReserveActionTransAttach::InName' has a wrong offset!");
static_assert(offsetof(EndBattleAIEB0029Controller_RequestReserveActionTransAttach, ReturnValue) == 0x00004C, "Member 'EndBattleAIEB0029Controller_RequestReserveActionTransAttach::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIEB1000Controller.ActivateCameraFlavorCustomizableFieldAction
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAIEB1000Controller_ActivateCameraFlavorCustomizableFieldAction final
{
public:
	class FName                                   DatatableName;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIEB1000Controller_ActivateCameraFlavorCustomizableFieldAction) == 0x000004, "Wrong alignment on EndBattleAIEB1000Controller_ActivateCameraFlavorCustomizableFieldAction");
static_assert(sizeof(EndBattleAIEB1000Controller_ActivateCameraFlavorCustomizableFieldAction) == 0x000008, "Wrong size on EndBattleAIEB1000Controller_ActivateCameraFlavorCustomizableFieldAction");
static_assert(offsetof(EndBattleAIEB1000Controller_ActivateCameraFlavorCustomizableFieldAction, DatatableName) == 0x000000, "Member 'EndBattleAIEB1000Controller_ActivateCameraFlavorCustomizableFieldAction::DatatableName' has a wrong offset!");

// Function EndGame.EndBattleAIEN0007Controller.RestrictBattleFieldByEN0007
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAIEN0007Controller_RestrictBattleFieldByEN0007 final
{
public:
	class FName                                   ExclusionID;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIEN0007Controller_RestrictBattleFieldByEN0007) == 0x000004, "Wrong alignment on EndBattleAIEN0007Controller_RestrictBattleFieldByEN0007");
static_assert(sizeof(EndBattleAIEN0007Controller_RestrictBattleFieldByEN0007) == 0x000008, "Wrong size on EndBattleAIEN0007Controller_RestrictBattleFieldByEN0007");
static_assert(offsetof(EndBattleAIEN0007Controller_RestrictBattleFieldByEN0007, ExclusionID) == 0x000000, "Member 'EndBattleAIEN0007Controller_RestrictBattleFieldByEN0007::ExclusionID' has a wrong offset!");

// Function EndGame.EndBattleAIEN2002_02Controller.GetJumpNavVolume
// 0x0028 (0x0028 - 0x0000)
struct EndBattleAIEN2002_02Controller_GetJumpNavVolume final
{
public:
	TArray<struct FVector>                        InPoints;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 InBattleScene;                                     // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAIEN2002_02Controller_GetJumpNavVolume) == 0x000008, "Wrong alignment on EndBattleAIEN2002_02Controller_GetJumpNavVolume");
static_assert(sizeof(EndBattleAIEN2002_02Controller_GetJumpNavVolume) == 0x000028, "Wrong size on EndBattleAIEN2002_02Controller_GetJumpNavVolume");
static_assert(offsetof(EndBattleAIEN2002_02Controller_GetJumpNavVolume, InPoints) == 0x000000, "Member 'EndBattleAIEN2002_02Controller_GetJumpNavVolume::InPoints' has a wrong offset!");
static_assert(offsetof(EndBattleAIEN2002_02Controller_GetJumpNavVolume, InBattleScene) == 0x000010, "Member 'EndBattleAIEN2002_02Controller_GetJumpNavVolume::InBattleScene' has a wrong offset!");
static_assert(offsetof(EndBattleAIEN2002_02Controller_GetJumpNavVolume, ReturnValue) == 0x000020, "Member 'EndBattleAIEN2002_02Controller_GetJumpNavVolume::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAIOverlapComponent.AddVolume
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAIOverlapComponent_AddVolume final
{
public:
	class AEndNavModifierVolume*                  InVolume;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIOverlapComponent_AddVolume) == 0x000008, "Wrong alignment on EndBattleAIOverlapComponent_AddVolume");
static_assert(sizeof(EndBattleAIOverlapComponent_AddVolume) == 0x000008, "Wrong size on EndBattleAIOverlapComponent_AddVolume");
static_assert(offsetof(EndBattleAIOverlapComponent_AddVolume, InVolume) == 0x000000, "Member 'EndBattleAIOverlapComponent_AddVolume::InVolume' has a wrong offset!");

// Function EndGame.EndBattleAIOverlapComponent.SubVolume
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAIOverlapComponent_SubVolume final
{
public:
	class AEndNavModifierVolume*                  InVolume;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAIOverlapComponent_SubVolume) == 0x000008, "Wrong alignment on EndBattleAIOverlapComponent_SubVolume");
static_assert(sizeof(EndBattleAIOverlapComponent_SubVolume) == 0x000008, "Wrong size on EndBattleAIOverlapComponent_SubVolume");
static_assert(offsetof(EndBattleAIOverlapComponent_SubVolume, InVolume) == 0x000000, "Member 'EndBattleAIOverlapComponent_SubVolume::InVolume' has a wrong offset!");

// Function EndGame.EndBattleAISlu5bAerithController.ChangeAerithState
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAISlu5bAerithController_ChangeAerithState final
{
public:
	EGuestAerithState                             NewState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAISlu5bAerithController_ChangeAerithState) == 0x000001, "Wrong alignment on EndBattleAISlu5bAerithController_ChangeAerithState");
static_assert(sizeof(EndBattleAISlu5bAerithController_ChangeAerithState) == 0x000001, "Wrong size on EndBattleAISlu5bAerithController_ChangeAerithState");
static_assert(offsetof(EndBattleAISlu5bAerithController_ChangeAerithState, NewState) == 0x000000, "Member 'EndBattleAISlu5bAerithController_ChangeAerithState::NewState' has a wrong offset!");

// Function EndGame.EndBattleAISlu5bAerithController.CheckEncouragment
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAISlu5bAerithController_CheckEncouragment final
{
public:
	float                                         Probability;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaTime;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAISlu5bAerithController_CheckEncouragment) == 0x000004, "Wrong alignment on EndBattleAISlu5bAerithController_CheckEncouragment");
static_assert(sizeof(EndBattleAISlu5bAerithController_CheckEncouragment) == 0x000008, "Wrong size on EndBattleAISlu5bAerithController_CheckEncouragment");
static_assert(offsetof(EndBattleAISlu5bAerithController_CheckEncouragment, Probability) == 0x000000, "Member 'EndBattleAISlu5bAerithController_CheckEncouragment::Probability' has a wrong offset!");
static_assert(offsetof(EndBattleAISlu5bAerithController_CheckEncouragment, DeltaTime) == 0x000004, "Member 'EndBattleAISlu5bAerithController_CheckEncouragment::DeltaTime' has a wrong offset!");

// Function EndGame.EndBattleAISlu5bAerithController.CheckSelf
// 0x0004 (0x0004 - 0x0000)
struct EndBattleAISlu5bAerithController_CheckSelf final
{
public:
	float                                         SafeDistance;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAISlu5bAerithController_CheckSelf) == 0x000004, "Wrong alignment on EndBattleAISlu5bAerithController_CheckSelf");
static_assert(sizeof(EndBattleAISlu5bAerithController_CheckSelf) == 0x000004, "Wrong size on EndBattleAISlu5bAerithController_CheckSelf");
static_assert(offsetof(EndBattleAISlu5bAerithController_CheckSelf, SafeDistance) == 0x000000, "Member 'EndBattleAISlu5bAerithController_CheckSelf::SafeDistance' has a wrong offset!");

// Function EndGame.EndBattleAISlu5bAerithController.GetCurrnetState
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAISlu5bAerithController_GetCurrnetState final
{
public:
	EGuestAerithState                             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAISlu5bAerithController_GetCurrnetState) == 0x000001, "Wrong alignment on EndBattleAISlu5bAerithController_GetCurrnetState");
static_assert(sizeof(EndBattleAISlu5bAerithController_GetCurrnetState) == 0x000001, "Wrong size on EndBattleAISlu5bAerithController_GetCurrnetState");
static_assert(offsetof(EndBattleAISlu5bAerithController_GetCurrnetState, ReturnValue) == 0x000000, "Member 'EndBattleAISlu5bAerithController_GetCurrnetState::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAISlu5bAerithController.LookAtOn
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAISlu5bAerithController_LookAtOn final
{
public:
	class AEndCharacter*                          LookTarget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAISlu5bAerithController_LookAtOn) == 0x000008, "Wrong alignment on EndBattleAISlu5bAerithController_LookAtOn");
static_assert(sizeof(EndBattleAISlu5bAerithController_LookAtOn) == 0x000008, "Wrong size on EndBattleAISlu5bAerithController_LookAtOn");
static_assert(offsetof(EndBattleAISlu5bAerithController_LookAtOn, LookTarget) == 0x000000, "Member 'EndBattleAISlu5bAerithController_LookAtOn::LookTarget' has a wrong offset!");

// Function EndGame.EndBattleAISlu5bAerithController.OnUpdateGuestAerith
// 0x0004 (0x0004 - 0x0000)
struct EndBattleAISlu5bAerithController_OnUpdateGuestAerith final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAISlu5bAerithController_OnUpdateGuestAerith) == 0x000004, "Wrong alignment on EndBattleAISlu5bAerithController_OnUpdateGuestAerith");
static_assert(sizeof(EndBattleAISlu5bAerithController_OnUpdateGuestAerith) == 0x000004, "Wrong size on EndBattleAISlu5bAerithController_OnUpdateGuestAerith");
static_assert(offsetof(EndBattleAISlu5bAerithController_OnUpdateGuestAerith, DeltaTime) == 0x000000, "Member 'EndBattleAISlu5bAerithController_OnUpdateGuestAerith::DeltaTime' has a wrong offset!");

// Function EndGame.EndBattleAISU0001BaseController.SetMoogleBombHidden
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAISU0001BaseController_SetMoogleBombHidden final
{
public:
	bool                                          IsHidden;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAISU0001BaseController_SetMoogleBombHidden) == 0x000001, "Wrong alignment on EndBattleAISU0001BaseController_SetMoogleBombHidden");
static_assert(sizeof(EndBattleAISU0001BaseController_SetMoogleBombHidden) == 0x000001, "Wrong size on EndBattleAISU0001BaseController_SetMoogleBombHidden");
static_assert(offsetof(EndBattleAISU0001BaseController_SetMoogleBombHidden, IsHidden) == 0x000000, "Member 'EndBattleAISU0001BaseController_SetMoogleBombHidden::IsHidden' has a wrong offset!");

// Function EndGame.EndBattleAISU0001BaseController.SetTarget
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAISU0001BaseController_SetTarget final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAISU0001BaseController_SetTarget) == 0x000008, "Wrong alignment on EndBattleAISU0001BaseController_SetTarget");
static_assert(sizeof(EndBattleAISU0001BaseController_SetTarget) == 0x000008, "Wrong size on EndBattleAISU0001BaseController_SetTarget");
static_assert(offsetof(EndBattleAISU0001BaseController_SetTarget, InChara) == 0x000000, "Member 'EndBattleAISU0001BaseController_SetTarget::InChara' has a wrong offset!");

// Function EndGame.EndMenuViewport.SetViewLocation
// 0x000C (0x000C - 0x0000)
struct EndMenuViewport_SetViewLocation final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuViewport_SetViewLocation) == 0x000004, "Wrong alignment on EndMenuViewport_SetViewLocation");
static_assert(sizeof(EndMenuViewport_SetViewLocation) == 0x00000C, "Wrong size on EndMenuViewport_SetViewLocation");
static_assert(offsetof(EndMenuViewport_SetViewLocation, Location) == 0x000000, "Member 'EndMenuViewport_SetViewLocation::Location' has a wrong offset!");

// Function EndGame.EndMenuViewport.SetViewRotation
// 0x000C (0x000C - 0x0000)
struct EndMenuViewport_SetViewRotation final
{
public:
	struct FRotator                               Rotation;                                          // 0x0000(0x000C)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuViewport_SetViewRotation) == 0x000004, "Wrong alignment on EndMenuViewport_SetViewRotation");
static_assert(sizeof(EndMenuViewport_SetViewRotation) == 0x00000C, "Wrong size on EndMenuViewport_SetViewRotation");
static_assert(offsetof(EndMenuViewport_SetViewRotation, Rotation) == 0x000000, "Member 'EndMenuViewport_SetViewRotation::Rotation' has a wrong offset!");

// Function EndGame.EndMenuViewport.Spawn
// 0x0010 (0x0010 - 0x0000)
struct EndMenuViewport_Spawn final
{
public:
	TSubclassOf<class AActor>                     ActorClass;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuViewport_Spawn) == 0x000008, "Wrong alignment on EndMenuViewport_Spawn");
static_assert(sizeof(EndMenuViewport_Spawn) == 0x000010, "Wrong size on EndMenuViewport_Spawn");
static_assert(offsetof(EndMenuViewport_Spawn, ActorClass) == 0x000000, "Member 'EndMenuViewport_Spawn::ActorClass' has a wrong offset!");
static_assert(offsetof(EndMenuViewport_Spawn, ReturnValue) == 0x000008, "Member 'EndMenuViewport_Spawn::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuViewport.GetViewLocation
// 0x000C (0x000C - 0x0000)
struct EndMenuViewport_GetViewLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuViewport_GetViewLocation) == 0x000004, "Wrong alignment on EndMenuViewport_GetViewLocation");
static_assert(sizeof(EndMenuViewport_GetViewLocation) == 0x00000C, "Wrong size on EndMenuViewport_GetViewLocation");
static_assert(offsetof(EndMenuViewport_GetViewLocation, ReturnValue) == 0x000000, "Member 'EndMenuViewport_GetViewLocation::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuViewport.GetViewportWorld
// 0x0008 (0x0008 - 0x0000)
struct EndMenuViewport_GetViewportWorld final
{
public:
	class UWorld*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuViewport_GetViewportWorld) == 0x000008, "Wrong alignment on EndMenuViewport_GetViewportWorld");
static_assert(sizeof(EndMenuViewport_GetViewportWorld) == 0x000008, "Wrong size on EndMenuViewport_GetViewportWorld");
static_assert(offsetof(EndMenuViewport_GetViewportWorld, ReturnValue) == 0x000000, "Member 'EndMenuViewport_GetViewportWorld::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuViewport.GetViewRotation
// 0x000C (0x000C - 0x0000)
struct EndMenuViewport_GetViewRotation final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuViewport_GetViewRotation) == 0x000004, "Wrong alignment on EndMenuViewport_GetViewRotation");
static_assert(sizeof(EndMenuViewport_GetViewRotation) == 0x00000C, "Wrong size on EndMenuViewport_GetViewRotation");
static_assert(offsetof(EndMenuViewport_GetViewRotation, ReturnValue) == 0x000000, "Member 'EndMenuViewport_GetViewRotation::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAISU0002Controller.OnIfritRoar
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAISU0002Controller_OnIfritRoar final
{
public:
	class FName                                   IDamageSourceID;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAISU0002Controller_OnIfritRoar) == 0x000004, "Wrong alignment on EndBattleAISU0002Controller_OnIfritRoar");
static_assert(sizeof(EndBattleAISU0002Controller_OnIfritRoar) == 0x000008, "Wrong size on EndBattleAISU0002Controller_OnIfritRoar");
static_assert(offsetof(EndBattleAISU0002Controller_OnIfritRoar, IDamageSourceID) == 0x000000, "Member 'EndBattleAISU0002Controller_OnIfritRoar::IDamageSourceID' has a wrong offset!");

// Function EndGame.EndBattleAISU0002Controller.OnRequestShivaMove
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAISU0002Controller_OnRequestShivaMove final
{
public:
	int32                                         InMoveCount;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InContactWall;                                     // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAISU0002Controller_OnRequestShivaMove) == 0x000004, "Wrong alignment on EndBattleAISU0002Controller_OnRequestShivaMove");
static_assert(sizeof(EndBattleAISU0002Controller_OnRequestShivaMove) == 0x000008, "Wrong size on EndBattleAISU0002Controller_OnRequestShivaMove");
static_assert(offsetof(EndBattleAISU0002Controller_OnRequestShivaMove, InMoveCount) == 0x000000, "Member 'EndBattleAISU0002Controller_OnRequestShivaMove::InMoveCount' has a wrong offset!");
static_assert(offsetof(EndBattleAISU0002Controller_OnRequestShivaMove, InContactWall) == 0x000004, "Member 'EndBattleAISU0002Controller_OnRequestShivaMove::InContactWall' has a wrong offset!");

// Function EndGame.EndBattleAISU0002Controller.SetNextShivaMoveLocation
// 0x000C (0x000C - 0x0000)
struct EndBattleAISU0002Controller_SetNextShivaMoveLocation final
{
public:
	struct FVector                                InLocation;                                        // 0x0000(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAISU0002Controller_SetNextShivaMoveLocation) == 0x000004, "Wrong alignment on EndBattleAISU0002Controller_SetNextShivaMoveLocation");
static_assert(sizeof(EndBattleAISU0002Controller_SetNextShivaMoveLocation) == 0x00000C, "Wrong size on EndBattleAISU0002Controller_SetNextShivaMoveLocation");
static_assert(offsetof(EndBattleAISU0002Controller_SetNextShivaMoveLocation, InLocation) == 0x000000, "Member 'EndBattleAISU0002Controller_SetNextShivaMoveLocation::InLocation' has a wrong offset!");

// Function EndGame.EndBattleAISU0004BaseController.IsInFlyModeBattleScene
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAISU0004BaseController_IsInFlyModeBattleScene final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAISU0004BaseController_IsInFlyModeBattleScene) == 0x000001, "Wrong alignment on EndBattleAISU0004BaseController_IsInFlyModeBattleScene");
static_assert(sizeof(EndBattleAISU0004BaseController_IsInFlyModeBattleScene) == 0x000001, "Wrong size on EndBattleAISU0004BaseController_IsInFlyModeBattleScene");
static_assert(offsetof(EndBattleAISU0004BaseController_IsInFlyModeBattleScene, ReturnValue) == 0x000000, "Member 'EndBattleAISU0004BaseController_IsInFlyModeBattleScene::ReturnValue' has a wrong offset!");

// Function EndGame.EndDataTableAPI.ClearDebugFlag
// 0x0001 (0x0001 - 0x0000)
struct EndDataTableAPI_ClearDebugFlag final
{
public:
	EEndDataTableDebugFlag                        Flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndDataTableAPI_ClearDebugFlag) == 0x000001, "Wrong alignment on EndDataTableAPI_ClearDebugFlag");
static_assert(sizeof(EndDataTableAPI_ClearDebugFlag) == 0x000001, "Wrong size on EndDataTableAPI_ClearDebugFlag");
static_assert(offsetof(EndDataTableAPI_ClearDebugFlag, Flag) == 0x000000, "Member 'EndDataTableAPI_ClearDebugFlag::Flag' has a wrong offset!");

// Function EndGame.EndDataTableAPI.DebugReimportDataTable
// 0x0010 (0x0010 - 0x0000)
struct EndDataTableAPI_DebugReimportDataTable final
{
public:
	class FString                                 residentOrLocation;                                // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndDataTableAPI_DebugReimportDataTable) == 0x000008, "Wrong alignment on EndDataTableAPI_DebugReimportDataTable");
static_assert(sizeof(EndDataTableAPI_DebugReimportDataTable) == 0x000010, "Wrong size on EndDataTableAPI_DebugReimportDataTable");
static_assert(offsetof(EndDataTableAPI_DebugReimportDataTable, residentOrLocation) == 0x000000, "Member 'EndDataTableAPI_DebugReimportDataTable::residentOrLocation' has a wrong offset!");

// Function EndGame.EndDataTableAPI.GetActorNameMap
// 0x0050 (0x0050 - 0x0000)
struct EndDataTableAPI_GetActorNameMap final
{
public:
	TMap<EPlayerType, class FName>                ReturnValue;                                       // 0x0000(0x0050)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndDataTableAPI_GetActorNameMap) == 0x000008, "Wrong alignment on EndDataTableAPI_GetActorNameMap");
static_assert(sizeof(EndDataTableAPI_GetActorNameMap) == 0x000050, "Wrong size on EndDataTableAPI_GetActorNameMap");
static_assert(offsetof(EndDataTableAPI_GetActorNameMap, ReturnValue) == 0x000000, "Member 'EndDataTableAPI_GetActorNameMap::ReturnValue' has a wrong offset!");

// Function EndGame.EndDataTableAPI.GetEquipmentTypeList
// 0x0010 (0x0010 - 0x0000)
struct EndDataTableAPI_GetEquipmentTypeList final
{
public:
	TArray<EEquipmentType>                        ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndDataTableAPI_GetEquipmentTypeList) == 0x000008, "Wrong alignment on EndDataTableAPI_GetEquipmentTypeList");
static_assert(sizeof(EndDataTableAPI_GetEquipmentTypeList) == 0x000010, "Wrong size on EndDataTableAPI_GetEquipmentTypeList");
static_assert(offsetof(EndDataTableAPI_GetEquipmentTypeList, ReturnValue) == 0x000000, "Member 'EndDataTableAPI_GetEquipmentTypeList::ReturnValue' has a wrong offset!");

// Function EndGame.EndDataTableAPI.GetFieldTestLocationNameDetails
// 0x0010 (0x0010 - 0x0000)
struct EndDataTableAPI_GetFieldTestLocationNameDetails final
{
public:
	TArray<class FString>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndDataTableAPI_GetFieldTestLocationNameDetails) == 0x000008, "Wrong alignment on EndDataTableAPI_GetFieldTestLocationNameDetails");
static_assert(sizeof(EndDataTableAPI_GetFieldTestLocationNameDetails) == 0x000010, "Wrong size on EndDataTableAPI_GetFieldTestLocationNameDetails");
static_assert(offsetof(EndDataTableAPI_GetFieldTestLocationNameDetails, ReturnValue) == 0x000000, "Member 'EndDataTableAPI_GetFieldTestLocationNameDetails::ReturnValue' has a wrong offset!");

// Function EndGame.EndDataTableAPI.GetLocationDetails
// 0x0010 (0x0010 - 0x0000)
struct EndDataTableAPI_GetLocationDetails final
{
public:
	TArray<class FString>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndDataTableAPI_GetLocationDetails) == 0x000008, "Wrong alignment on EndDataTableAPI_GetLocationDetails");
static_assert(sizeof(EndDataTableAPI_GetLocationDetails) == 0x000010, "Wrong size on EndDataTableAPI_GetLocationDetails");
static_assert(offsetof(EndDataTableAPI_GetLocationDetails, ReturnValue) == 0x000000, "Member 'EndDataTableAPI_GetLocationDetails::ReturnValue' has a wrong offset!");

// Function EndGame.EndDataTableAPI.GetLocationNameDetails
// 0x0010 (0x0010 - 0x0000)
struct EndDataTableAPI_GetLocationNameDetails final
{
public:
	TArray<class FString>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndDataTableAPI_GetLocationNameDetails) == 0x000008, "Wrong alignment on EndDataTableAPI_GetLocationNameDetails");
static_assert(sizeof(EndDataTableAPI_GetLocationNameDetails) == 0x000010, "Wrong size on EndDataTableAPI_GetLocationNameDetails");
static_assert(offsetof(EndDataTableAPI_GetLocationNameDetails, ReturnValue) == 0x000000, "Member 'EndDataTableAPI_GetLocationNameDetails::ReturnValue' has a wrong offset!");

// Function EndGame.EndDataTableAPI.GetLocationNames
// 0x0010 (0x0010 - 0x0000)
struct EndDataTableAPI_GetLocationNames final
{
public:
	TArray<class FString>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndDataTableAPI_GetLocationNames) == 0x000008, "Wrong alignment on EndDataTableAPI_GetLocationNames");
static_assert(sizeof(EndDataTableAPI_GetLocationNames) == 0x000010, "Wrong size on EndDataTableAPI_GetLocationNames");
static_assert(offsetof(EndDataTableAPI_GetLocationNames, ReturnValue) == 0x000000, "Member 'EndDataTableAPI_GetLocationNames::ReturnValue' has a wrong offset!");

// Function EndGame.EndDataTableAPI.GetLocationPresetList
// 0x0020 (0x0020 - 0x0000)
struct EndDataTableAPI_GetLocationPresetList final
{
public:
	class FString                                 LocationName;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndDataTableAPI_GetLocationPresetList) == 0x000008, "Wrong alignment on EndDataTableAPI_GetLocationPresetList");
static_assert(sizeof(EndDataTableAPI_GetLocationPresetList) == 0x000020, "Wrong size on EndDataTableAPI_GetLocationPresetList");
static_assert(offsetof(EndDataTableAPI_GetLocationPresetList, LocationName) == 0x000000, "Member 'EndDataTableAPI_GetLocationPresetList::LocationName' has a wrong offset!");
static_assert(offsetof(EndDataTableAPI_GetLocationPresetList, ReturnValue) == 0x000010, "Member 'EndDataTableAPI_GetLocationPresetList::ReturnValue' has a wrong offset!");

// Function EndGame.EndDataTableAPI.GetLocationSlotList
// 0x0020 (0x0020 - 0x0000)
struct EndDataTableAPI_GetLocationSlotList final
{
public:
	class FString                                 LocationName;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndDataTableAPI_GetLocationSlotList) == 0x000008, "Wrong alignment on EndDataTableAPI_GetLocationSlotList");
static_assert(sizeof(EndDataTableAPI_GetLocationSlotList) == 0x000020, "Wrong size on EndDataTableAPI_GetLocationSlotList");
static_assert(offsetof(EndDataTableAPI_GetLocationSlotList, LocationName) == 0x000000, "Member 'EndDataTableAPI_GetLocationSlotList::LocationName' has a wrong offset!");
static_assert(offsetof(EndDataTableAPI_GetLocationSlotList, ReturnValue) == 0x000010, "Member 'EndDataTableAPI_GetLocationSlotList::ReturnValue' has a wrong offset!");

// Function EndGame.EndDataTableAPI.GetResidentParameterFloatBP
// 0x0010 (0x0010 - 0x0000)
struct EndDataTableAPI_GetResidentParameterFloatBP final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultValue;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndDataTableAPI_GetResidentParameterFloatBP) == 0x000004, "Wrong alignment on EndDataTableAPI_GetResidentParameterFloatBP");
static_assert(sizeof(EndDataTableAPI_GetResidentParameterFloatBP) == 0x000010, "Wrong size on EndDataTableAPI_GetResidentParameterFloatBP");
static_assert(offsetof(EndDataTableAPI_GetResidentParameterFloatBP, ID) == 0x000000, "Member 'EndDataTableAPI_GetResidentParameterFloatBP::ID' has a wrong offset!");
static_assert(offsetof(EndDataTableAPI_GetResidentParameterFloatBP, DefaultValue) == 0x000008, "Member 'EndDataTableAPI_GetResidentParameterFloatBP::DefaultValue' has a wrong offset!");
static_assert(offsetof(EndDataTableAPI_GetResidentParameterFloatBP, ReturnValue) == 0x00000C, "Member 'EndDataTableAPI_GetResidentParameterFloatBP::ReturnValue' has a wrong offset!");

// Function EndGame.EndDataTableAPI.GetResidentParameterIntegerBP
// 0x0010 (0x0010 - 0x0000)
struct EndDataTableAPI_GetResidentParameterIntegerBP final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DefaultValue;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndDataTableAPI_GetResidentParameterIntegerBP) == 0x000004, "Wrong alignment on EndDataTableAPI_GetResidentParameterIntegerBP");
static_assert(sizeof(EndDataTableAPI_GetResidentParameterIntegerBP) == 0x000010, "Wrong size on EndDataTableAPI_GetResidentParameterIntegerBP");
static_assert(offsetof(EndDataTableAPI_GetResidentParameterIntegerBP, ID) == 0x000000, "Member 'EndDataTableAPI_GetResidentParameterIntegerBP::ID' has a wrong offset!");
static_assert(offsetof(EndDataTableAPI_GetResidentParameterIntegerBP, DefaultValue) == 0x000008, "Member 'EndDataTableAPI_GetResidentParameterIntegerBP::DefaultValue' has a wrong offset!");
static_assert(offsetof(EndDataTableAPI_GetResidentParameterIntegerBP, ReturnValue) == 0x00000C, "Member 'EndDataTableAPI_GetResidentParameterIntegerBP::ReturnValue' has a wrong offset!");

// Function EndGame.EndDataTableAPI.GetResidentParameterNameBP
// 0x0018 (0x0018 - 0x0000)
struct EndDataTableAPI_GetResidentParameterNameBP final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DefaultValue;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndDataTableAPI_GetResidentParameterNameBP) == 0x000004, "Wrong alignment on EndDataTableAPI_GetResidentParameterNameBP");
static_assert(sizeof(EndDataTableAPI_GetResidentParameterNameBP) == 0x000018, "Wrong size on EndDataTableAPI_GetResidentParameterNameBP");
static_assert(offsetof(EndDataTableAPI_GetResidentParameterNameBP, ID) == 0x000000, "Member 'EndDataTableAPI_GetResidentParameterNameBP::ID' has a wrong offset!");
static_assert(offsetof(EndDataTableAPI_GetResidentParameterNameBP, DefaultValue) == 0x000008, "Member 'EndDataTableAPI_GetResidentParameterNameBP::DefaultValue' has a wrong offset!");
static_assert(offsetof(EndDataTableAPI_GetResidentParameterNameBP, ReturnValue) == 0x000010, "Member 'EndDataTableAPI_GetResidentParameterNameBP::ReturnValue' has a wrong offset!");

// Function EndGame.EndDataTableAPI.GetResidentParameterStringBP
// 0x0028 (0x0028 - 0x0000)
struct EndDataTableAPI_GetResidentParameterStringBP final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DefaultValue;                                      // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndDataTableAPI_GetResidentParameterStringBP) == 0x000008, "Wrong alignment on EndDataTableAPI_GetResidentParameterStringBP");
static_assert(sizeof(EndDataTableAPI_GetResidentParameterStringBP) == 0x000028, "Wrong size on EndDataTableAPI_GetResidentParameterStringBP");
static_assert(offsetof(EndDataTableAPI_GetResidentParameterStringBP, ID) == 0x000000, "Member 'EndDataTableAPI_GetResidentParameterStringBP::ID' has a wrong offset!");
static_assert(offsetof(EndDataTableAPI_GetResidentParameterStringBP, DefaultValue) == 0x000008, "Member 'EndDataTableAPI_GetResidentParameterStringBP::DefaultValue' has a wrong offset!");
static_assert(offsetof(EndDataTableAPI_GetResidentParameterStringBP, ReturnValue) == 0x000018, "Member 'EndDataTableAPI_GetResidentParameterStringBP::ReturnValue' has a wrong offset!");

// Function EndGame.EndDataTableAPI.GetTestCutSceneEnviSetNameList
// 0x0020 (0x0020 - 0x0000)
struct EndDataTableAPI_GetTestCutSceneEnviSetNameList final
{
public:
	TArray<class FString>                         CutSceneNames;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class FString>                         ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndDataTableAPI_GetTestCutSceneEnviSetNameList) == 0x000008, "Wrong alignment on EndDataTableAPI_GetTestCutSceneEnviSetNameList");
static_assert(sizeof(EndDataTableAPI_GetTestCutSceneEnviSetNameList) == 0x000020, "Wrong size on EndDataTableAPI_GetTestCutSceneEnviSetNameList");
static_assert(offsetof(EndDataTableAPI_GetTestCutSceneEnviSetNameList, CutSceneNames) == 0x000000, "Member 'EndDataTableAPI_GetTestCutSceneEnviSetNameList::CutSceneNames' has a wrong offset!");
static_assert(offsetof(EndDataTableAPI_GetTestCutSceneEnviSetNameList, ReturnValue) == 0x000010, "Member 'EndDataTableAPI_GetTestCutSceneEnviSetNameList::ReturnValue' has a wrong offset!");

// Function EndGame.EndDataTableAPI.GetTestCutSceneNameList
// 0x0020 (0x0020 - 0x0000)
struct EndDataTableAPI_GetTestCutSceneNameList final
{
public:
	class FString                                 LocationName;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndDataTableAPI_GetTestCutSceneNameList) == 0x000008, "Wrong alignment on EndDataTableAPI_GetTestCutSceneNameList");
static_assert(sizeof(EndDataTableAPI_GetTestCutSceneNameList) == 0x000020, "Wrong size on EndDataTableAPI_GetTestCutSceneNameList");
static_assert(offsetof(EndDataTableAPI_GetTestCutSceneNameList, LocationName) == 0x000000, "Member 'EndDataTableAPI_GetTestCutSceneNameList::LocationName' has a wrong offset!");
static_assert(offsetof(EndDataTableAPI_GetTestCutSceneNameList, ReturnValue) == 0x000010, "Member 'EndDataTableAPI_GetTestCutSceneNameList::ReturnValue' has a wrong offset!");

// Function EndGame.EndDataTableAPI.GetTestPlayModeSettingDataName
// 0x0010 (0x0010 - 0x0000)
struct EndDataTableAPI_GetTestPlayModeSettingDataName final
{
public:
	class FName                                   TableID;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndDataTableAPI_GetTestPlayModeSettingDataName) == 0x000004, "Wrong alignment on EndDataTableAPI_GetTestPlayModeSettingDataName");
static_assert(sizeof(EndDataTableAPI_GetTestPlayModeSettingDataName) == 0x000010, "Wrong size on EndDataTableAPI_GetTestPlayModeSettingDataName");
static_assert(offsetof(EndDataTableAPI_GetTestPlayModeSettingDataName, TableID) == 0x000000, "Member 'EndDataTableAPI_GetTestPlayModeSettingDataName::TableID' has a wrong offset!");
static_assert(offsetof(EndDataTableAPI_GetTestPlayModeSettingDataName, ReturnValue) == 0x000008, "Member 'EndDataTableAPI_GetTestPlayModeSettingDataName::ReturnValue' has a wrong offset!");

// Function EndGame.EndDataTableAPI.GetTestPlayModeSettingDataTableIds
// 0x0010 (0x0010 - 0x0000)
struct EndDataTableAPI_GetTestPlayModeSettingDataTableIds final
{
public:
	TArray<class FName>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndDataTableAPI_GetTestPlayModeSettingDataTableIds) == 0x000008, "Wrong alignment on EndDataTableAPI_GetTestPlayModeSettingDataTableIds");
static_assert(sizeof(EndDataTableAPI_GetTestPlayModeSettingDataTableIds) == 0x000010, "Wrong size on EndDataTableAPI_GetTestPlayModeSettingDataTableIds");
static_assert(offsetof(EndDataTableAPI_GetTestPlayModeSettingDataTableIds, ReturnValue) == 0x000000, "Member 'EndDataTableAPI_GetTestPlayModeSettingDataTableIds::ReturnValue' has a wrong offset!");

// Function EndGame.EndDataTableAPI.GetTestPlayModeTitleLocation
// 0x0010 (0x0010 - 0x0000)
struct EndDataTableAPI_GetTestPlayModeTitleLocation final
{
public:
	class FName                                   TableID;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndDataTableAPI_GetTestPlayModeTitleLocation) == 0x000004, "Wrong alignment on EndDataTableAPI_GetTestPlayModeTitleLocation");
static_assert(sizeof(EndDataTableAPI_GetTestPlayModeTitleLocation) == 0x000010, "Wrong size on EndDataTableAPI_GetTestPlayModeTitleLocation");
static_assert(offsetof(EndDataTableAPI_GetTestPlayModeTitleLocation, TableID) == 0x000000, "Member 'EndDataTableAPI_GetTestPlayModeTitleLocation::TableID' has a wrong offset!");
static_assert(offsetof(EndDataTableAPI_GetTestPlayModeTitleLocation, ReturnValue) == 0x000008, "Member 'EndDataTableAPI_GetTestPlayModeTitleLocation::ReturnValue' has a wrong offset!");

// Function EndGame.EndDataTableAPI.GetWeaponNameMap
// 0x0050 (0x0050 - 0x0000)
struct EndDataTableAPI_GetWeaponNameMap final
{
public:
	TMap<EPlayerType, class FName>                ReturnValue;                                       // 0x0000(0x0050)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndDataTableAPI_GetWeaponNameMap) == 0x000008, "Wrong alignment on EndDataTableAPI_GetWeaponNameMap");
static_assert(sizeof(EndDataTableAPI_GetWeaponNameMap) == 0x000050, "Wrong size on EndDataTableAPI_GetWeaponNameMap");
static_assert(offsetof(EndDataTableAPI_GetWeaponNameMap, ReturnValue) == 0x000000, "Member 'EndDataTableAPI_GetWeaponNameMap::ReturnValue' has a wrong offset!");

// Function EndGame.EndDataTableAPI.InitDataTable
// 0x0010 (0x0010 - 0x0000)
struct EndDataTableAPI_InitDataTable final
{
public:
	EDataTableType                                Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AEndAssetActor*                         Asset;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndDataTableAPI_InitDataTable) == 0x000008, "Wrong alignment on EndDataTableAPI_InitDataTable");
static_assert(sizeof(EndDataTableAPI_InitDataTable) == 0x000010, "Wrong size on EndDataTableAPI_InitDataTable");
static_assert(offsetof(EndDataTableAPI_InitDataTable, Type) == 0x000000, "Member 'EndDataTableAPI_InitDataTable::Type' has a wrong offset!");
static_assert(offsetof(EndDataTableAPI_InitDataTable, Asset) == 0x000008, "Member 'EndDataTableAPI_InitDataTable::Asset' has a wrong offset!");

// Function EndGame.EndDataTableAPI.IsDebugFlag
// 0x0002 (0x0002 - 0x0000)
struct EndDataTableAPI_IsDebugFlag final
{
public:
	EEndDataTableDebugFlag                        Flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndDataTableAPI_IsDebugFlag) == 0x000001, "Wrong alignment on EndDataTableAPI_IsDebugFlag");
static_assert(sizeof(EndDataTableAPI_IsDebugFlag) == 0x000002, "Wrong size on EndDataTableAPI_IsDebugFlag");
static_assert(offsetof(EndDataTableAPI_IsDebugFlag, Flag) == 0x000000, "Member 'EndDataTableAPI_IsDebugFlag::Flag' has a wrong offset!");
static_assert(offsetof(EndDataTableAPI_IsDebugFlag, ReturnValue) == 0x000001, "Member 'EndDataTableAPI_IsDebugFlag::ReturnValue' has a wrong offset!");

// Function EndGame.EndDataTableAPI.IsExistDataTableBP
// 0x0001 (0x0001 - 0x0000)
struct EndDataTableAPI_IsExistDataTableBP final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndDataTableAPI_IsExistDataTableBP) == 0x000001, "Wrong alignment on EndDataTableAPI_IsExistDataTableBP");
static_assert(sizeof(EndDataTableAPI_IsExistDataTableBP) == 0x000001, "Wrong size on EndDataTableAPI_IsExistDataTableBP");
static_assert(offsetof(EndDataTableAPI_IsExistDataTableBP, ReturnValue) == 0x000000, "Member 'EndDataTableAPI_IsExistDataTableBP::ReturnValue' has a wrong offset!");

// Function EndGame.EndDataTableAPI.IsExistDataTableFromTypeBP
// 0x0002 (0x0002 - 0x0000)
struct EndDataTableAPI_IsExistDataTableFromTypeBP final
{
public:
	EDataTableType                                Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndDataTableAPI_IsExistDataTableFromTypeBP) == 0x000001, "Wrong alignment on EndDataTableAPI_IsExistDataTableFromTypeBP");
static_assert(sizeof(EndDataTableAPI_IsExistDataTableFromTypeBP) == 0x000002, "Wrong size on EndDataTableAPI_IsExistDataTableFromTypeBP");
static_assert(offsetof(EndDataTableAPI_IsExistDataTableFromTypeBP, Type) == 0x000000, "Member 'EndDataTableAPI_IsExistDataTableFromTypeBP::Type' has a wrong offset!");
static_assert(offsetof(EndDataTableAPI_IsExistDataTableFromTypeBP, ReturnValue) == 0x000001, "Member 'EndDataTableAPI_IsExistDataTableFromTypeBP::ReturnValue' has a wrong offset!");

// Function EndGame.EndDataTableAPI.SetDebugFlag
// 0x0001 (0x0001 - 0x0000)
struct EndDataTableAPI_SetDebugFlag final
{
public:
	EEndDataTableDebugFlag                        Flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndDataTableAPI_SetDebugFlag) == 0x000001, "Wrong alignment on EndDataTableAPI_SetDebugFlag");
static_assert(sizeof(EndDataTableAPI_SetDebugFlag) == 0x000001, "Wrong size on EndDataTableAPI_SetDebugFlag");
static_assert(offsetof(EndDataTableAPI_SetDebugFlag, Flag) == 0x000000, "Member 'EndDataTableAPI_SetDebugFlag::Flag' has a wrong offset!");

// Function EndGame.EndDataTableAPI.UnInitDataTable
// 0x0010 (0x0010 - 0x0000)
struct EndDataTableAPI_UnInitDataTable final
{
public:
	EDataTableType                                Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AEndAssetActor*                         Asset;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndDataTableAPI_UnInitDataTable) == 0x000008, "Wrong alignment on EndDataTableAPI_UnInitDataTable");
static_assert(sizeof(EndDataTableAPI_UnInitDataTable) == 0x000010, "Wrong size on EndDataTableAPI_UnInitDataTable");
static_assert(offsetof(EndDataTableAPI_UnInitDataTable, Type) == 0x000000, "Member 'EndDataTableAPI_UnInitDataTable::Type' has a wrong offset!");
static_assert(offsetof(EndDataTableAPI_UnInitDataTable, Asset) == 0x000008, "Member 'EndDataTableAPI_UnInitDataTable::Asset' has a wrong offset!");

// Function EndGame.EndBattleAISU1000_02Controller.OnCheckFollow
// 0x0003 (0x0003 - 0x0000)
struct EndBattleAISU1000_02Controller_OnCheckFollow final
{
public:
	bool                                          OutBattleArea;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NotOwnerTrace;                                     // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NotUcpcTrace;                                      // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAISU1000_02Controller_OnCheckFollow) == 0x000001, "Wrong alignment on EndBattleAISU1000_02Controller_OnCheckFollow");
static_assert(sizeof(EndBattleAISU1000_02Controller_OnCheckFollow) == 0x000003, "Wrong size on EndBattleAISU1000_02Controller_OnCheckFollow");
static_assert(offsetof(EndBattleAISU1000_02Controller_OnCheckFollow, OutBattleArea) == 0x000000, "Member 'EndBattleAISU1000_02Controller_OnCheckFollow::OutBattleArea' has a wrong offset!");
static_assert(offsetof(EndBattleAISU1000_02Controller_OnCheckFollow, NotOwnerTrace) == 0x000001, "Member 'EndBattleAISU1000_02Controller_OnCheckFollow::NotOwnerTrace' has a wrong offset!");
static_assert(offsetof(EndBattleAISU1000_02Controller_OnCheckFollow, NotUcpcTrace) == 0x000002, "Member 'EndBattleAISU1000_02Controller_OnCheckFollow::NotUcpcTrace' has a wrong offset!");

// Function EndGame.EndBattleAISU1000_02Controller.SetFollow
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAISU1000_02Controller_SetFollow final
{
public:
	bool                                          InFollow;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                InLocation;                                        // 0x0004(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAISU1000_02Controller_SetFollow) == 0x000004, "Wrong alignment on EndBattleAISU1000_02Controller_SetFollow");
static_assert(sizeof(EndBattleAISU1000_02Controller_SetFollow) == 0x000010, "Wrong size on EndBattleAISU1000_02Controller_SetFollow");
static_assert(offsetof(EndBattleAISU1000_02Controller_SetFollow, InFollow) == 0x000000, "Member 'EndBattleAISU1000_02Controller_SetFollow::InFollow' has a wrong offset!");
static_assert(offsetof(EndBattleAISU1000_02Controller_SetFollow, InLocation) == 0x000004, "Member 'EndBattleAISU1000_02Controller_SetFollow::InLocation' has a wrong offset!");

// Function EndGame.EndBattleAISU1000_02Controller.SetOverrideFollowTarget
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAISU1000_02Controller_SetOverrideFollowTarget final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAISU1000_02Controller_SetOverrideFollowTarget) == 0x000008, "Wrong alignment on EndBattleAISU1000_02Controller_SetOverrideFollowTarget");
static_assert(sizeof(EndBattleAISU1000_02Controller_SetOverrideFollowTarget) == 0x000008, "Wrong size on EndBattleAISU1000_02Controller_SetOverrideFollowTarget");
static_assert(offsetof(EndBattleAISU1000_02Controller_SetOverrideFollowTarget, InChara) == 0x000000, "Member 'EndBattleAISU1000_02Controller_SetOverrideFollowTarget::InChara' has a wrong offset!");

// Function EndGame.EndBattleAISU1000Controller.AddPowerUpMagnitude
// 0x0004 (0x0004 - 0x0000)
struct EndBattleAISU1000Controller_AddPowerUpMagnitude final
{
public:
	float                                         Magnitude;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAISU1000Controller_AddPowerUpMagnitude) == 0x000004, "Wrong alignment on EndBattleAISU1000Controller_AddPowerUpMagnitude");
static_assert(sizeof(EndBattleAISU1000Controller_AddPowerUpMagnitude) == 0x000004, "Wrong size on EndBattleAISU1000Controller_AddPowerUpMagnitude");
static_assert(offsetof(EndBattleAISU1000Controller_AddPowerUpMagnitude, Magnitude) == 0x000000, "Member 'EndBattleAISU1000Controller_AddPowerUpMagnitude::Magnitude' has a wrong offset!");

// Function EndGame.EndBattleAISU1000Controller.SetHidePowerUpFX
// 0x0002 (0x0002 - 0x0000)
struct EndBattleAISU1000Controller_SetHidePowerUpFX final
{
public:
	bool                                          bHide;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bImmediately;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAISU1000Controller_SetHidePowerUpFX) == 0x000001, "Wrong alignment on EndBattleAISU1000Controller_SetHidePowerUpFX");
static_assert(sizeof(EndBattleAISU1000Controller_SetHidePowerUpFX) == 0x000002, "Wrong size on EndBattleAISU1000Controller_SetHidePowerUpFX");
static_assert(offsetof(EndBattleAISU1000Controller_SetHidePowerUpFX, bHide) == 0x000000, "Member 'EndBattleAISU1000Controller_SetHidePowerUpFX::bHide' has a wrong offset!");
static_assert(offsetof(EndBattleAISU1000Controller_SetHidePowerUpFX, bImmediately) == 0x000001, "Member 'EndBattleAISU1000Controller_SetHidePowerUpFX::bImmediately' has a wrong offset!");

// Function EndGame.EndBattleAISU1000Controller.SetPowerUpSpeed
// 0x0004 (0x0004 - 0x0000)
struct EndBattleAISU1000Controller_SetPowerUpSpeed final
{
public:
	float                                         Speed;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAISU1000Controller_SetPowerUpSpeed) == 0x000004, "Wrong alignment on EndBattleAISU1000Controller_SetPowerUpSpeed");
static_assert(sizeof(EndBattleAISU1000Controller_SetPowerUpSpeed) == 0x000004, "Wrong size on EndBattleAISU1000Controller_SetPowerUpSpeed");
static_assert(offsetof(EndBattleAISU1000Controller_SetPowerUpSpeed, Speed) == 0x000000, "Member 'EndBattleAISU1000Controller_SetPowerUpSpeed::Speed' has a wrong offset!");

// Function EndGame.EndBattleAISU1000Controller.GetPowerUpMagnitude
// 0x0004 (0x0004 - 0x0000)
struct EndBattleAISU1000Controller_GetPowerUpMagnitude final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAISU1000Controller_GetPowerUpMagnitude) == 0x000004, "Wrong alignment on EndBattleAISU1000Controller_GetPowerUpMagnitude");
static_assert(sizeof(EndBattleAISU1000Controller_GetPowerUpMagnitude) == 0x000004, "Wrong size on EndBattleAISU1000Controller_GetPowerUpMagnitude");
static_assert(offsetof(EndBattleAISU1000Controller_GetPowerUpMagnitude, ReturnValue) == 0x000000, "Member 'EndBattleAISU1000Controller_GetPowerUpMagnitude::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAISU1000Controller.GetPowerUpSpeed
// 0x0004 (0x0004 - 0x0000)
struct EndBattleAISU1000Controller_GetPowerUpSpeed final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAISU1000Controller_GetPowerUpSpeed) == 0x000004, "Wrong alignment on EndBattleAISU1000Controller_GetPowerUpSpeed");
static_assert(sizeof(EndBattleAISU1000Controller_GetPowerUpSpeed) == 0x000004, "Wrong size on EndBattleAISU1000Controller_GetPowerUpSpeed");
static_assert(offsetof(EndBattleAISU1000Controller_GetPowerUpSpeed, ReturnValue) == 0x000000, "Member 'EndBattleAISU1000Controller_GetPowerUpSpeed::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAISU1000Controller.IsPowerUpMax
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAISU1000Controller_IsPowerUpMax final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAISU1000Controller_IsPowerUpMax) == 0x000001, "Wrong alignment on EndBattleAISU1000Controller_IsPowerUpMax");
static_assert(sizeof(EndBattleAISU1000Controller_IsPowerUpMax) == 0x000001, "Wrong size on EndBattleAISU1000Controller_IsPowerUpMax");
static_assert(offsetof(EndBattleAISU1000Controller_IsPowerUpMax, ReturnValue) == 0x000000, "Member 'EndBattleAISU1000Controller_IsPowerUpMax::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAITown7WedgeController.IsConfronting
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAITown7WedgeController_IsConfronting final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAITown7WedgeController_IsConfronting) == 0x000001, "Wrong alignment on EndBattleAITown7WedgeController_IsConfronting");
static_assert(sizeof(EndBattleAITown7WedgeController_IsConfronting) == 0x000001, "Wrong size on EndBattleAITown7WedgeController_IsConfronting");
static_assert(offsetof(EndBattleAITown7WedgeController_IsConfronting, ReturnValue) == 0x000000, "Member 'EndBattleAITown7WedgeController_IsConfronting::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAITown7WedgeController.IsFleeing
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAITown7WedgeController_IsFleeing final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAITown7WedgeController_IsFleeing) == 0x000001, "Wrong alignment on EndBattleAITown7WedgeController_IsFleeing");
static_assert(sizeof(EndBattleAITown7WedgeController_IsFleeing) == 0x000001, "Wrong size on EndBattleAITown7WedgeController_IsFleeing");
static_assert(offsetof(EndBattleAITown7WedgeController_IsFleeing, ReturnValue) == 0x000000, "Member 'EndBattleAITown7WedgeController_IsFleeing::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAITown7WedgeController.StartConfront
// 0x0004 (0x0004 - 0x0000)
struct EndBattleAITown7WedgeController_StartConfront final
{
public:
	float                                         Distance;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAITown7WedgeController_StartConfront) == 0x000004, "Wrong alignment on EndBattleAITown7WedgeController_StartConfront");
static_assert(sizeof(EndBattleAITown7WedgeController_StartConfront) == 0x000004, "Wrong size on EndBattleAITown7WedgeController_StartConfront");
static_assert(offsetof(EndBattleAITown7WedgeController_StartConfront, Distance) == 0x000000, "Member 'EndBattleAITown7WedgeController_StartConfront::Distance' has a wrong offset!");

// Function EndGame.EndBattleAITown7WedgeController.StartFlee
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAITown7WedgeController_StartFlee final
{
public:
	TArray<class AEndCharacter*>                  Targets;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAITown7WedgeController_StartFlee) == 0x000008, "Wrong alignment on EndBattleAITown7WedgeController_StartFlee");
static_assert(sizeof(EndBattleAITown7WedgeController_StartFlee) == 0x000010, "Wrong size on EndBattleAITown7WedgeController_StartFlee");
static_assert(offsetof(EndBattleAITown7WedgeController_StartFlee, Targets) == 0x000000, "Member 'EndBattleAITown7WedgeController_StartFlee::Targets' has a wrong offset!");

// Function EndGame.EndBattleAPI.AddAttachEffect
// 0x0080 (0x0080 - 0x0000)
struct EndBattleAPI_AddAttachEffect final
{
public:
	class AEndCharacter*                          chara;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEndCharacterAttachEffectArguments     args;                                              // 0x0008(0x0078)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_AddAttachEffect) == 0x000008, "Wrong alignment on EndBattleAPI_AddAttachEffect");
static_assert(sizeof(EndBattleAPI_AddAttachEffect) == 0x000080, "Wrong size on EndBattleAPI_AddAttachEffect");
static_assert(offsetof(EndBattleAPI_AddAttachEffect, chara) == 0x000000, "Member 'EndBattleAPI_AddAttachEffect::chara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_AddAttachEffect, args) == 0x000008, "Member 'EndBattleAPI_AddAttachEffect::args' has a wrong offset!");

// Function EndGame.EndBattleAPI.AddBattleSceneCount
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_AddBattleSceneCount final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InAddCount;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_AddBattleSceneCount) == 0x000004, "Wrong alignment on EndBattleAPI_AddBattleSceneCount");
static_assert(sizeof(EndBattleAPI_AddBattleSceneCount) == 0x000010, "Wrong size on EndBattleAPI_AddBattleSceneCount");
static_assert(offsetof(EndBattleAPI_AddBattleSceneCount, InName) == 0x000000, "Member 'EndBattleAPI_AddBattleSceneCount::InName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_AddBattleSceneCount, InAddCount) == 0x000008, "Member 'EndBattleAPI_AddBattleSceneCount::InAddCount' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_AddBattleSceneCount, ReturnValue) == 0x00000C, "Member 'EndBattleAPI_AddBattleSceneCount::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.AddCollisionIgnoreActor
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_AddCollisionIgnoreActor final
{
public:
	class AEndCharacter*                          ownerChara;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   IgnoreActorName;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_AddCollisionIgnoreActor) == 0x000008, "Wrong alignment on EndBattleAPI_AddCollisionIgnoreActor");
static_assert(sizeof(EndBattleAPI_AddCollisionIgnoreActor) == 0x000010, "Wrong size on EndBattleAPI_AddCollisionIgnoreActor");
static_assert(offsetof(EndBattleAPI_AddCollisionIgnoreActor, ownerChara) == 0x000000, "Member 'EndBattleAPI_AddCollisionIgnoreActor::ownerChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_AddCollisionIgnoreActor, IgnoreActorName) == 0x000008, "Member 'EndBattleAPI_AddCollisionIgnoreActor::IgnoreActorName' has a wrong offset!");

// Function EndGame.EndBattleAPI.AddDodgeCharacter
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_AddDodgeCharacter final
{
public:
	class UEndBattleDamageSourceComponent*        InDamageSourceComponent;                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AEndCharacter*                          InDodgeChara;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_AddDodgeCharacter) == 0x000008, "Wrong alignment on EndBattleAPI_AddDodgeCharacter");
static_assert(sizeof(EndBattleAPI_AddDodgeCharacter) == 0x000010, "Wrong size on EndBattleAPI_AddDodgeCharacter");
static_assert(offsetof(EndBattleAPI_AddDodgeCharacter, InDamageSourceComponent) == 0x000000, "Member 'EndBattleAPI_AddDodgeCharacter::InDamageSourceComponent' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_AddDodgeCharacter, InDodgeChara) == 0x000008, "Member 'EndBattleAPI_AddDodgeCharacter::InDodgeChara' has a wrong offset!");

// Function EndGame.EndBattleAPI.BeginAIPCConfrontIdle
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAPI_BeginAIPCConfrontIdle final
{
public:
	EPlayerType                                   PlayerType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_BeginAIPCConfrontIdle) == 0x000001, "Wrong alignment on EndBattleAPI_BeginAIPCConfrontIdle");
static_assert(sizeof(EndBattleAPI_BeginAIPCConfrontIdle) == 0x000001, "Wrong size on EndBattleAPI_BeginAIPCConfrontIdle");
static_assert(offsetof(EndBattleAPI_BeginAIPCConfrontIdle, PlayerType) == 0x000000, "Member 'EndBattleAPI_BeginAIPCConfrontIdle::PlayerType' has a wrong offset!");

// Function EndGame.EndBattleAPI.BeginAIPCMeleeAttackMode
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAPI_BeginAIPCMeleeAttackMode final
{
public:
	EPlayerType                                   PlayerCharacter;                                   // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_BeginAIPCMeleeAttackMode) == 0x000001, "Wrong alignment on EndBattleAPI_BeginAIPCMeleeAttackMode");
static_assert(sizeof(EndBattleAPI_BeginAIPCMeleeAttackMode) == 0x000001, "Wrong size on EndBattleAPI_BeginAIPCMeleeAttackMode");
static_assert(offsetof(EndBattleAPI_BeginAIPCMeleeAttackMode, PlayerCharacter) == 0x000000, "Member 'EndBattleAPI_BeginAIPCMeleeAttackMode::PlayerCharacter' has a wrong offset!");

// Function EndGame.EndBattleAPI.CalcPartyCenterLocation
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_CalcPartyCenterLocation final
{
public:
	struct FVector                                outCenterLocation;                                 // 0x0000(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_CalcPartyCenterLocation) == 0x000004, "Wrong alignment on EndBattleAPI_CalcPartyCenterLocation");
static_assert(sizeof(EndBattleAPI_CalcPartyCenterLocation) == 0x000010, "Wrong size on EndBattleAPI_CalcPartyCenterLocation");
static_assert(offsetof(EndBattleAPI_CalcPartyCenterLocation, outCenterLocation) == 0x000000, "Member 'EndBattleAPI_CalcPartyCenterLocation::outCenterLocation' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_CalcPartyCenterLocation, ReturnValue) == 0x00000C, "Member 'EndBattleAPI_CalcPartyCenterLocation::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.CancelAIPCAbilityGuard
// 0x0018 (0x0018 - 0x0000)
struct EndBattleAPI_CancelAIPCAbilityGuard final
{
public:
	EPlayerType                                   PlayerCharacter;                                   // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AEndCharacter*                          TargetCharacter;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AbilityID;                                         // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_CancelAIPCAbilityGuard) == 0x000008, "Wrong alignment on EndBattleAPI_CancelAIPCAbilityGuard");
static_assert(sizeof(EndBattleAPI_CancelAIPCAbilityGuard) == 0x000018, "Wrong size on EndBattleAPI_CancelAIPCAbilityGuard");
static_assert(offsetof(EndBattleAPI_CancelAIPCAbilityGuard, PlayerCharacter) == 0x000000, "Member 'EndBattleAPI_CancelAIPCAbilityGuard::PlayerCharacter' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_CancelAIPCAbilityGuard, TargetCharacter) == 0x000008, "Member 'EndBattleAPI_CancelAIPCAbilityGuard::TargetCharacter' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_CancelAIPCAbilityGuard, AbilityID) == 0x000010, "Member 'EndBattleAPI_CancelAIPCAbilityGuard::AbilityID' has a wrong offset!");

// Function EndGame.EndBattleAPI.CanSyncAction
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_CanSyncAction final
{
public:
	class AEndCharacter*                          chara;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_CanSyncAction) == 0x000008, "Wrong alignment on EndBattleAPI_CanSyncAction");
static_assert(sizeof(EndBattleAPI_CanSyncAction) == 0x000010, "Wrong size on EndBattleAPI_CanSyncAction");
static_assert(offsetof(EndBattleAPI_CanSyncAction, chara) == 0x000000, "Member 'EndBattleAPI_CanSyncAction::chara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_CanSyncAction, ReturnValue) == 0x000008, "Member 'EndBattleAPI_CanSyncAction::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.ClearAIPCDefenceParam
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAPI_ClearAIPCDefenceParam final
{
public:
	EPlayerType                                   PlayerType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_ClearAIPCDefenceParam) == 0x000001, "Wrong alignment on EndBattleAPI_ClearAIPCDefenceParam");
static_assert(sizeof(EndBattleAPI_ClearAIPCDefenceParam) == 0x000001, "Wrong size on EndBattleAPI_ClearAIPCDefenceParam");
static_assert(offsetof(EndBattleAPI_ClearAIPCDefenceParam, PlayerType) == 0x000000, "Member 'EndBattleAPI_ClearAIPCDefenceParam::PlayerType' has a wrong offset!");

// Function EndGame.EndBattleAPI.CreateDamageSource
// 0x0028 (0x0028 - 0x0000)
struct EndBattleAPI_CreateDamageSource final
{
public:
	class FName                                   DamageSourceID;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AEndCharacter*                          ownerChara;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AEndCharacter*                          targetChara;                                       // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AbilityID;                                         // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideDamage;                                   // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         OverrideDamage;                                    // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_CreateDamageSource) == 0x000008, "Wrong alignment on EndBattleAPI_CreateDamageSource");
static_assert(sizeof(EndBattleAPI_CreateDamageSource) == 0x000028, "Wrong size on EndBattleAPI_CreateDamageSource");
static_assert(offsetof(EndBattleAPI_CreateDamageSource, DamageSourceID) == 0x000000, "Member 'EndBattleAPI_CreateDamageSource::DamageSourceID' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_CreateDamageSource, ownerChara) == 0x000008, "Member 'EndBattleAPI_CreateDamageSource::ownerChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_CreateDamageSource, targetChara) == 0x000010, "Member 'EndBattleAPI_CreateDamageSource::targetChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_CreateDamageSource, AbilityID) == 0x000018, "Member 'EndBattleAPI_CreateDamageSource::AbilityID' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_CreateDamageSource, bOverrideDamage) == 0x000020, "Member 'EndBattleAPI_CreateDamageSource::bOverrideDamage' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_CreateDamageSource, OverrideDamage) == 0x000024, "Member 'EndBattleAPI_CreateDamageSource::OverrideDamage' has a wrong offset!");

// Function EndGame.EndBattleAPI.CreateSyncAction
// 0x0018 (0x0018 - 0x0000)
struct EndBattleAPI_CreateSyncAction final
{
public:
	class FName                                   syncActionID;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AEndCharacter*                          ownerChara;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AEndCharacter*                          targetChara;                                       // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_CreateSyncAction) == 0x000008, "Wrong alignment on EndBattleAPI_CreateSyncAction");
static_assert(sizeof(EndBattleAPI_CreateSyncAction) == 0x000018, "Wrong size on EndBattleAPI_CreateSyncAction");
static_assert(offsetof(EndBattleAPI_CreateSyncAction, syncActionID) == 0x000000, "Member 'EndBattleAPI_CreateSyncAction::syncActionID' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_CreateSyncAction, ownerChara) == 0x000008, "Member 'EndBattleAPI_CreateSyncAction::ownerChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_CreateSyncAction, targetChara) == 0x000010, "Member 'EndBattleAPI_CreateSyncAction::targetChara' has a wrong offset!");

// Function EndGame.EndBattleAPI.CreateSyncActionOwners
// 0x0030 (0x0030 - 0x0000)
struct EndBattleAPI_CreateSyncActionOwners final
{
public:
	class FName                                   syncActionID0;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AEndCharacter*                          ownerChara0;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   syncActionID1;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AEndCharacter*                          ownerChara1;                                       // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   syncActionID2;                                     // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AEndCharacter*                          ownerChara2;                                       // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_CreateSyncActionOwners) == 0x000008, "Wrong alignment on EndBattleAPI_CreateSyncActionOwners");
static_assert(sizeof(EndBattleAPI_CreateSyncActionOwners) == 0x000030, "Wrong size on EndBattleAPI_CreateSyncActionOwners");
static_assert(offsetof(EndBattleAPI_CreateSyncActionOwners, syncActionID0) == 0x000000, "Member 'EndBattleAPI_CreateSyncActionOwners::syncActionID0' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_CreateSyncActionOwners, ownerChara0) == 0x000008, "Member 'EndBattleAPI_CreateSyncActionOwners::ownerChara0' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_CreateSyncActionOwners, syncActionID1) == 0x000010, "Member 'EndBattleAPI_CreateSyncActionOwners::syncActionID1' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_CreateSyncActionOwners, ownerChara1) == 0x000018, "Member 'EndBattleAPI_CreateSyncActionOwners::ownerChara1' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_CreateSyncActionOwners, syncActionID2) == 0x000020, "Member 'EndBattleAPI_CreateSyncActionOwners::syncActionID2' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_CreateSyncActionOwners, ownerChara2) == 0x000028, "Member 'EndBattleAPI_CreateSyncActionOwners::ownerChara2' has a wrong offset!");

// Function EndGame.EndBattleAPI.CreateSyncActionOwnersByName
// 0x0030 (0x0030 - 0x0000)
struct EndBattleAPI_CreateSyncActionOwnersByName final
{
public:
	class FName                                   syncActionID0;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ownerCharaName0;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   syncActionID1;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ownerCharaName1;                                   // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   syncActionID2;                                     // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ownerCharaName2;                                   // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_CreateSyncActionOwnersByName) == 0x000004, "Wrong alignment on EndBattleAPI_CreateSyncActionOwnersByName");
static_assert(sizeof(EndBattleAPI_CreateSyncActionOwnersByName) == 0x000030, "Wrong size on EndBattleAPI_CreateSyncActionOwnersByName");
static_assert(offsetof(EndBattleAPI_CreateSyncActionOwnersByName, syncActionID0) == 0x000000, "Member 'EndBattleAPI_CreateSyncActionOwnersByName::syncActionID0' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_CreateSyncActionOwnersByName, ownerCharaName0) == 0x000008, "Member 'EndBattleAPI_CreateSyncActionOwnersByName::ownerCharaName0' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_CreateSyncActionOwnersByName, syncActionID1) == 0x000010, "Member 'EndBattleAPI_CreateSyncActionOwnersByName::syncActionID1' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_CreateSyncActionOwnersByName, ownerCharaName1) == 0x000018, "Member 'EndBattleAPI_CreateSyncActionOwnersByName::ownerCharaName1' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_CreateSyncActionOwnersByName, syncActionID2) == 0x000020, "Member 'EndBattleAPI_CreateSyncActionOwnersByName::syncActionID2' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_CreateSyncActionOwnersByName, ownerCharaName2) == 0x000028, "Member 'EndBattleAPI_CreateSyncActionOwnersByName::ownerCharaName2' has a wrong offset!");

// Function EndGame.EndBattleAPI.DebugSetHP
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_DebugSetHP final
{
public:
	class AEndCharacter*                          chara;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HP;                                                // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_DebugSetHP) == 0x000008, "Wrong alignment on EndBattleAPI_DebugSetHP");
static_assert(sizeof(EndBattleAPI_DebugSetHP) == 0x000010, "Wrong size on EndBattleAPI_DebugSetHP");
static_assert(offsetof(EndBattleAPI_DebugSetHP, chara) == 0x000000, "Member 'EndBattleAPI_DebugSetHP::chara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_DebugSetHP, HP) == 0x000008, "Member 'EndBattleAPI_DebugSetHP::HP' has a wrong offset!");

// Function EndGame.EndBattleAPI.DecBattleSceneCount
// 0x000C (0x000C - 0x0000)
struct EndBattleAPI_DecBattleSceneCount final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_DecBattleSceneCount) == 0x000004, "Wrong alignment on EndBattleAPI_DecBattleSceneCount");
static_assert(sizeof(EndBattleAPI_DecBattleSceneCount) == 0x00000C, "Wrong size on EndBattleAPI_DecBattleSceneCount");
static_assert(offsetof(EndBattleAPI_DecBattleSceneCount, InName) == 0x000000, "Member 'EndBattleAPI_DecBattleSceneCount::InName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_DecBattleSceneCount, ReturnValue) == 0x000008, "Member 'EndBattleAPI_DecBattleSceneCount::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.DestroyDamageSource
// 0x0018 (0x0018 - 0x0000)
struct EndBattleAPI_DestroyDamageSource final
{
public:
	class FName                                   DamageSourceID;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AEndCharacter*                          OwnerCharacter;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDestroyEffect;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_DestroyDamageSource) == 0x000008, "Wrong alignment on EndBattleAPI_DestroyDamageSource");
static_assert(sizeof(EndBattleAPI_DestroyDamageSource) == 0x000018, "Wrong size on EndBattleAPI_DestroyDamageSource");
static_assert(offsetof(EndBattleAPI_DestroyDamageSource, DamageSourceID) == 0x000000, "Member 'EndBattleAPI_DestroyDamageSource::DamageSourceID' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_DestroyDamageSource, OwnerCharacter) == 0x000008, "Member 'EndBattleAPI_DestroyDamageSource::OwnerCharacter' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_DestroyDamageSource, bDestroyEffect) == 0x000010, "Member 'EndBattleAPI_DestroyDamageSource::bDestroyEffect' has a wrong offset!");

// Function EndGame.EndBattleAPI.DestroyDamageSourceAll
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAPI_DestroyDamageSourceAll final
{
public:
	bool                                          bDestroyEffect;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_DestroyDamageSourceAll) == 0x000001, "Wrong alignment on EndBattleAPI_DestroyDamageSourceAll");
static_assert(sizeof(EndBattleAPI_DestroyDamageSourceAll) == 0x000001, "Wrong size on EndBattleAPI_DestroyDamageSourceAll");
static_assert(offsetof(EndBattleAPI_DestroyDamageSourceAll, bDestroyEffect) == 0x000000, "Member 'EndBattleAPI_DestroyDamageSourceAll::bDestroyEffect' has a wrong offset!");

// Function EndGame.EndBattleAPI.DestroyDamageSourceAllCharacter
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_DestroyDamageSourceAllCharacter final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDestroyEffect;                                    // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_DestroyDamageSourceAllCharacter) == 0x000008, "Wrong alignment on EndBattleAPI_DestroyDamageSourceAllCharacter");
static_assert(sizeof(EndBattleAPI_DestroyDamageSourceAllCharacter) == 0x000010, "Wrong size on EndBattleAPI_DestroyDamageSourceAllCharacter");
static_assert(offsetof(EndBattleAPI_DestroyDamageSourceAllCharacter, Character) == 0x000000, "Member 'EndBattleAPI_DestroyDamageSourceAllCharacter::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_DestroyDamageSourceAllCharacter, bDestroyEffect) == 0x000008, "Member 'EndBattleAPI_DestroyDamageSourceAllCharacter::bDestroyEffect' has a wrong offset!");

// Function EndGame.EndBattleAPI.DisableFogControllerAPI
// 0x000C (0x000C - 0x0000)
struct EndBattleAPI_DisableFogControllerAPI final
{
public:
	class FName                                   InFogName;                                         // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_DisableFogControllerAPI) == 0x000004, "Wrong alignment on EndBattleAPI_DisableFogControllerAPI");
static_assert(sizeof(EndBattleAPI_DisableFogControllerAPI) == 0x00000C, "Wrong size on EndBattleAPI_DisableFogControllerAPI");
static_assert(offsetof(EndBattleAPI_DisableFogControllerAPI, InFogName) == 0x000000, "Member 'EndBattleAPI_DisableFogControllerAPI::InFogName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_DisableFogControllerAPI, ReturnValue) == 0x000008, "Member 'EndBattleAPI_DisableFogControllerAPI::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.DisableSelfRevive
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAPI_DisableSelfRevive final
{
public:
	EPlayerType                                   PlayerType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_DisableSelfRevive) == 0x000001, "Wrong alignment on EndBattleAPI_DisableSelfRevive");
static_assert(sizeof(EndBattleAPI_DisableSelfRevive) == 0x000001, "Wrong size on EndBattleAPI_DisableSelfRevive");
static_assert(offsetof(EndBattleAPI_DisableSelfRevive, PlayerType) == 0x000000, "Member 'EndBattleAPI_DisableSelfRevive::PlayerType' has a wrong offset!");

// Function EndGame.EndBattleAPI.DivEqualFloat
// 0x000C (0x000C - 0x0000)
struct EndBattleAPI_DivEqualFloat final
{
public:
	float                                         ValueA;                                            // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ValueB;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_DivEqualFloat) == 0x000004, "Wrong alignment on EndBattleAPI_DivEqualFloat");
static_assert(sizeof(EndBattleAPI_DivEqualFloat) == 0x00000C, "Wrong size on EndBattleAPI_DivEqualFloat");
static_assert(offsetof(EndBattleAPI_DivEqualFloat, ValueA) == 0x000000, "Member 'EndBattleAPI_DivEqualFloat::ValueA' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_DivEqualFloat, ValueB) == 0x000004, "Member 'EndBattleAPI_DivEqualFloat::ValueB' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_DivEqualFloat, ReturnValue) == 0x000008, "Member 'EndBattleAPI_DivEqualFloat::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.DivEqualInterger
// 0x000C (0x000C - 0x0000)
struct EndBattleAPI_DivEqualInterger final
{
public:
	int32                                         ValueA;                                            // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ValueB;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_DivEqualInterger) == 0x000004, "Wrong alignment on EndBattleAPI_DivEqualInterger");
static_assert(sizeof(EndBattleAPI_DivEqualInterger) == 0x00000C, "Wrong size on EndBattleAPI_DivEqualInterger");
static_assert(offsetof(EndBattleAPI_DivEqualInterger, ValueA) == 0x000000, "Member 'EndBattleAPI_DivEqualInterger::ValueA' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_DivEqualInterger, ValueB) == 0x000004, "Member 'EndBattleAPI_DivEqualInterger::ValueB' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_DivEqualInterger, ReturnValue) == 0x000008, "Member 'EndBattleAPI_DivEqualInterger::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.DodgeDirection
// 0x0004 (0x0004 - 0x0000)
struct EndBattleAPI_DodgeDirection final
{
public:
	int32                                         Group;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_DodgeDirection) == 0x000004, "Wrong alignment on EndBattleAPI_DodgeDirection");
static_assert(sizeof(EndBattleAPI_DodgeDirection) == 0x000004, "Wrong size on EndBattleAPI_DodgeDirection");
static_assert(offsetof(EndBattleAPI_DodgeDirection, Group) == 0x000000, "Member 'EndBattleAPI_DodgeDirection::Group' has a wrong offset!");

// Function EndGame.EndBattleAPI.EnableFogControllerAPI
// 0x000C (0x000C - 0x0000)
struct EndBattleAPI_EnableFogControllerAPI final
{
public:
	class FName                                   InFogName;                                         // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_EnableFogControllerAPI) == 0x000004, "Wrong alignment on EndBattleAPI_EnableFogControllerAPI");
static_assert(sizeof(EndBattleAPI_EnableFogControllerAPI) == 0x00000C, "Wrong size on EndBattleAPI_EnableFogControllerAPI");
static_assert(offsetof(EndBattleAPI_EnableFogControllerAPI, InFogName) == 0x000000, "Member 'EndBattleAPI_EnableFogControllerAPI::InFogName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_EnableFogControllerAPI, ReturnValue) == 0x000008, "Member 'EndBattleAPI_EnableFogControllerAPI::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.EnableSelfRevive
// 0x000C (0x000C - 0x0000)
struct EndBattleAPI_EnableSelfRevive final
{
public:
	EPlayerType                                   PlayerType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeForRevive;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HpRecoverRate;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_EnableSelfRevive) == 0x000004, "Wrong alignment on EndBattleAPI_EnableSelfRevive");
static_assert(sizeof(EndBattleAPI_EnableSelfRevive) == 0x00000C, "Wrong size on EndBattleAPI_EnableSelfRevive");
static_assert(offsetof(EndBattleAPI_EnableSelfRevive, PlayerType) == 0x000000, "Member 'EndBattleAPI_EnableSelfRevive::PlayerType' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_EnableSelfRevive, TimeForRevive) == 0x000004, "Member 'EndBattleAPI_EnableSelfRevive::TimeForRevive' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_EnableSelfRevive, HpRecoverRate) == 0x000008, "Member 'EndBattleAPI_EnableSelfRevive::HpRecoverRate' has a wrong offset!");

// Function EndGame.EndBattleAPI.EndAIPCConfrontIdle
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAPI_EndAIPCConfrontIdle final
{
public:
	EPlayerType                                   PlayerType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_EndAIPCConfrontIdle) == 0x000001, "Wrong alignment on EndBattleAPI_EndAIPCConfrontIdle");
static_assert(sizeof(EndBattleAPI_EndAIPCConfrontIdle) == 0x000001, "Wrong size on EndBattleAPI_EndAIPCConfrontIdle");
static_assert(offsetof(EndBattleAPI_EndAIPCConfrontIdle, PlayerType) == 0x000000, "Member 'EndBattleAPI_EndAIPCConfrontIdle::PlayerType' has a wrong offset!");

// Function EndGame.EndBattleAPI.EndAIPCMeleeAttackMode
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAPI_EndAIPCMeleeAttackMode final
{
public:
	EPlayerType                                   PlayerCharacter;                                   // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_EndAIPCMeleeAttackMode) == 0x000001, "Wrong alignment on EndBattleAPI_EndAIPCMeleeAttackMode");
static_assert(sizeof(EndBattleAPI_EndAIPCMeleeAttackMode) == 0x000001, "Wrong size on EndBattleAPI_EndAIPCMeleeAttackMode");
static_assert(offsetof(EndBattleAPI_EndAIPCMeleeAttackMode, PlayerCharacter) == 0x000000, "Member 'EndBattleAPI_EndAIPCMeleeAttackMode::PlayerCharacter' has a wrong offset!");

// Function EndGame.EndBattleAPI.ExistDamageSourceRevive
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAPI_ExistDamageSourceRevive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_ExistDamageSourceRevive) == 0x000001, "Wrong alignment on EndBattleAPI_ExistDamageSourceRevive");
static_assert(sizeof(EndBattleAPI_ExistDamageSourceRevive) == 0x000001, "Wrong size on EndBattleAPI_ExistDamageSourceRevive");
static_assert(offsetof(EndBattleAPI_ExistDamageSourceRevive, ReturnValue) == 0x000000, "Member 'EndBattleAPI_ExistDamageSourceRevive::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.FindNavVolumesInRange
// 0x0038 (0x0038 - 0x0000)
struct EndBattleAPI_FindNavVolumesInRange final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 Groups;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         angleRange;                                        // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndBattleCompareDistanceType                 Type;                                              // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          behind;                                            // 0x001D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Distance;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AEndNavModifierVolume*>          ReturnValue;                                       // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_FindNavVolumesInRange) == 0x000008, "Wrong alignment on EndBattleAPI_FindNavVolumesInRange");
static_assert(sizeof(EndBattleAPI_FindNavVolumesInRange) == 0x000038, "Wrong size on EndBattleAPI_FindNavVolumesInRange");
static_assert(offsetof(EndBattleAPI_FindNavVolumesInRange, Character) == 0x000000, "Member 'EndBattleAPI_FindNavVolumesInRange::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_FindNavVolumesInRange, Groups) == 0x000008, "Member 'EndBattleAPI_FindNavVolumesInRange::Groups' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_FindNavVolumesInRange, angleRange) == 0x000018, "Member 'EndBattleAPI_FindNavVolumesInRange::angleRange' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_FindNavVolumesInRange, Type) == 0x00001C, "Member 'EndBattleAPI_FindNavVolumesInRange::Type' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_FindNavVolumesInRange, behind) == 0x00001D, "Member 'EndBattleAPI_FindNavVolumesInRange::behind' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_FindNavVolumesInRange, Distance) == 0x000020, "Member 'EndBattleAPI_FindNavVolumesInRange::Distance' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_FindNavVolumesInRange, ReturnValue) == 0x000028, "Member 'EndBattleAPI_FindNavVolumesInRange::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.FindNavVolumesOutRange
// 0x0038 (0x0038 - 0x0000)
struct EndBattleAPI_FindNavVolumesOutRange final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 Groups;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         angleRange;                                        // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndBattleCompareDistanceType                 Type;                                              // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          behind;                                            // 0x001D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Distance;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AEndNavModifierVolume*>          ReturnValue;                                       // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_FindNavVolumesOutRange) == 0x000008, "Wrong alignment on EndBattleAPI_FindNavVolumesOutRange");
static_assert(sizeof(EndBattleAPI_FindNavVolumesOutRange) == 0x000038, "Wrong size on EndBattleAPI_FindNavVolumesOutRange");
static_assert(offsetof(EndBattleAPI_FindNavVolumesOutRange, Character) == 0x000000, "Member 'EndBattleAPI_FindNavVolumesOutRange::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_FindNavVolumesOutRange, Groups) == 0x000008, "Member 'EndBattleAPI_FindNavVolumesOutRange::Groups' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_FindNavVolumesOutRange, angleRange) == 0x000018, "Member 'EndBattleAPI_FindNavVolumesOutRange::angleRange' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_FindNavVolumesOutRange, Type) == 0x00001C, "Member 'EndBattleAPI_FindNavVolumesOutRange::Type' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_FindNavVolumesOutRange, behind) == 0x00001D, "Member 'EndBattleAPI_FindNavVolumesOutRange::behind' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_FindNavVolumesOutRange, Distance) == 0x000020, "Member 'EndBattleAPI_FindNavVolumesOutRange::Distance' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_FindNavVolumesOutRange, ReturnValue) == 0x000028, "Member 'EndBattleAPI_FindNavVolumesOutRange::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetAbilityElement
// 0x000C (0x000C - 0x0000)
struct EndBattleAPI_GetAbilityElement final
{
public:
	class FName                                   InAbilityName;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetAbilityElement) == 0x000004, "Wrong alignment on EndBattleAPI_GetAbilityElement");
static_assert(sizeof(EndBattleAPI_GetAbilityElement) == 0x00000C, "Wrong size on EndBattleAPI_GetAbilityElement");
static_assert(offsetof(EndBattleAPI_GetAbilityElement, InAbilityName) == 0x000000, "Member 'EndBattleAPI_GetAbilityElement::InAbilityName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetAbilityElement, ReturnValue) == 0x000008, "Member 'EndBattleAPI_GetAbilityElement::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetActorDirection
// 0x0020 (0x0020 - 0x0000)
struct EndBattleAPI_GetActorDirection final
{
public:
	class AActor*                                 From;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 To;                                                // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0010(0x000C)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_GetActorDirection) == 0x000008, "Wrong alignment on EndBattleAPI_GetActorDirection");
static_assert(sizeof(EndBattleAPI_GetActorDirection) == 0x000020, "Wrong size on EndBattleAPI_GetActorDirection");
static_assert(offsetof(EndBattleAPI_GetActorDirection, From) == 0x000000, "Member 'EndBattleAPI_GetActorDirection::From' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetActorDirection, To) == 0x000008, "Member 'EndBattleAPI_GetActorDirection::To' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetActorDirection, ReturnValue) == 0x000010, "Member 'EndBattleAPI_GetActorDirection::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetActorDistance
// 0x0018 (0x0018 - 0x0000)
struct EndBattleAPI_GetActorDistance final
{
public:
	class AActor*                                 From;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 To;                                                // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_GetActorDistance) == 0x000008, "Wrong alignment on EndBattleAPI_GetActorDistance");
static_assert(sizeof(EndBattleAPI_GetActorDistance) == 0x000018, "Wrong size on EndBattleAPI_GetActorDistance");
static_assert(offsetof(EndBattleAPI_GetActorDistance, From) == 0x000000, "Member 'EndBattleAPI_GetActorDistance::From' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetActorDistance, To) == 0x000008, "Member 'EndBattleAPI_GetActorDistance::To' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetActorDistance, ReturnValue) == 0x000010, "Member 'EndBattleAPI_GetActorDistance::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetActorName
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_GetActorName final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetActorName) == 0x000008, "Wrong alignment on EndBattleAPI_GetActorName");
static_assert(sizeof(EndBattleAPI_GetActorName) == 0x000010, "Wrong size on EndBattleAPI_GetActorName");
static_assert(offsetof(EndBattleAPI_GetActorName, InChara) == 0x000000, "Member 'EndBattleAPI_GetActorName::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetActorName, ReturnValue) == 0x000008, "Member 'EndBattleAPI_GetActorName::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetAIActionAbilityTableFloat
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_GetAIActionAbilityTableFloat final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndBattleAIActionAbility                     InElem;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetAIActionAbilityTableFloat) == 0x000004, "Wrong alignment on EndBattleAPI_GetAIActionAbilityTableFloat");
static_assert(sizeof(EndBattleAPI_GetAIActionAbilityTableFloat) == 0x000010, "Wrong size on EndBattleAPI_GetAIActionAbilityTableFloat");
static_assert(offsetof(EndBattleAPI_GetAIActionAbilityTableFloat, InName) == 0x000000, "Member 'EndBattleAPI_GetAIActionAbilityTableFloat::InName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetAIActionAbilityTableFloat, InElem) == 0x000008, "Member 'EndBattleAPI_GetAIActionAbilityTableFloat::InElem' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetAIActionAbilityTableFloat, ReturnValue) == 0x00000C, "Member 'EndBattleAPI_GetAIActionAbilityTableFloat::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetAIActionAbilityTableInt
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_GetAIActionAbilityTableInt final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndBattleAIActionAbility                     InElem;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetAIActionAbilityTableInt) == 0x000004, "Wrong alignment on EndBattleAPI_GetAIActionAbilityTableInt");
static_assert(sizeof(EndBattleAPI_GetAIActionAbilityTableInt) == 0x000010, "Wrong size on EndBattleAPI_GetAIActionAbilityTableInt");
static_assert(offsetof(EndBattleAPI_GetAIActionAbilityTableInt, InName) == 0x000000, "Member 'EndBattleAPI_GetAIActionAbilityTableInt::InName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetAIActionAbilityTableInt, InElem) == 0x000008, "Member 'EndBattleAPI_GetAIActionAbilityTableInt::InElem' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetAIActionAbilityTableInt, ReturnValue) == 0x00000C, "Member 'EndBattleAPI_GetAIActionAbilityTableInt::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetAIActionAbilityTableString
// 0x0020 (0x0020 - 0x0000)
struct EndBattleAPI_GetAIActionAbilityTableString final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndBattleAIActionAbility                     InElem;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetAIActionAbilityTableString) == 0x000008, "Wrong alignment on EndBattleAPI_GetAIActionAbilityTableString");
static_assert(sizeof(EndBattleAPI_GetAIActionAbilityTableString) == 0x000020, "Wrong size on EndBattleAPI_GetAIActionAbilityTableString");
static_assert(offsetof(EndBattleAPI_GetAIActionAbilityTableString, InName) == 0x000000, "Member 'EndBattleAPI_GetAIActionAbilityTableString::InName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetAIActionAbilityTableString, InElem) == 0x000008, "Member 'EndBattleAPI_GetAIActionAbilityTableString::InElem' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetAIActionAbilityTableString, ReturnValue) == 0x000010, "Member 'EndBattleAPI_GetAIActionAbilityTableString::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetAimedCountFromID
// 0x0020 (0x0020 - 0x0000)
struct EndBattleAPI_GetAimedCountFromID final
{
public:
	class AEndCharacter*                          InCharacter;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Upper;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Lower;                                             // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_GetAimedCountFromID) == 0x000008, "Wrong alignment on EndBattleAPI_GetAimedCountFromID");
static_assert(sizeof(EndBattleAPI_GetAimedCountFromID) == 0x000020, "Wrong size on EndBattleAPI_GetAimedCountFromID");
static_assert(offsetof(EndBattleAPI_GetAimedCountFromID, InCharacter) == 0x000000, "Member 'EndBattleAPI_GetAimedCountFromID::InCharacter' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetAimedCountFromID, Upper) == 0x000008, "Member 'EndBattleAPI_GetAimedCountFromID::Upper' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetAimedCountFromID, Lower) == 0x000010, "Member 'EndBattleAPI_GetAimedCountFromID::Lower' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetAimedCountFromID, ReturnValue) == 0x000018, "Member 'EndBattleAPI_GetAimedCountFromID::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetAllDamageSourceLocations
// 0x0018 (0x0018 - 0x0000)
struct EndBattleAPI_GetAllDamageSourceLocations final
{
public:
	class FName                                   InFindDamageSourceID;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetAllDamageSourceLocations) == 0x000008, "Wrong alignment on EndBattleAPI_GetAllDamageSourceLocations");
static_assert(sizeof(EndBattleAPI_GetAllDamageSourceLocations) == 0x000018, "Wrong size on EndBattleAPI_GetAllDamageSourceLocations");
static_assert(offsetof(EndBattleAPI_GetAllDamageSourceLocations, InFindDamageSourceID) == 0x000000, "Member 'EndBattleAPI_GetAllDamageSourceLocations::InFindDamageSourceID' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetAllDamageSourceLocations, ReturnValue) == 0x000008, "Member 'EndBattleAPI_GetAllDamageSourceLocations::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetAttackableCharacters
// 0x0020 (0x0020 - 0x0000)
struct EndBattleAPI_GetAttackableCharacters final
{
public:
	TArray<class AEndCharacter*>                  OutList;                                           // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class AEndCharacter*>                  InList;                                            // 0x0010(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetAttackableCharacters) == 0x000008, "Wrong alignment on EndBattleAPI_GetAttackableCharacters");
static_assert(sizeof(EndBattleAPI_GetAttackableCharacters) == 0x000020, "Wrong size on EndBattleAPI_GetAttackableCharacters");
static_assert(offsetof(EndBattleAPI_GetAttackableCharacters, OutList) == 0x000000, "Member 'EndBattleAPI_GetAttackableCharacters::OutList' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetAttackableCharacters, InList) == 0x000010, "Member 'EndBattleAPI_GetAttackableCharacters::InList' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetBattleAI
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_GetBattleAI final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AEndBattleAIController*                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetBattleAI) == 0x000008, "Wrong alignment on EndBattleAPI_GetBattleAI");
static_assert(sizeof(EndBattleAPI_GetBattleAI) == 0x000010, "Wrong size on EndBattleAPI_GetBattleAI");
static_assert(offsetof(EndBattleAPI_GetBattleAI, InChara) == 0x000000, "Member 'EndBattleAPI_GetBattleAI::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetBattleAI, ReturnValue) == 0x000008, "Member 'EndBattleAPI_GetBattleAI::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetBattleAIControllerFromID
// 0x0018 (0x0018 - 0x0000)
struct EndBattleAPI_GetBattleAIControllerFromID final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InID;                                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AEndBattleAIController*                 ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetBattleAIControllerFromID) == 0x000008, "Wrong alignment on EndBattleAPI_GetBattleAIControllerFromID");
static_assert(sizeof(EndBattleAPI_GetBattleAIControllerFromID) == 0x000018, "Wrong size on EndBattleAPI_GetBattleAIControllerFromID");
static_assert(offsetof(EndBattleAPI_GetBattleAIControllerFromID, InChara) == 0x000000, "Member 'EndBattleAPI_GetBattleAIControllerFromID::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetBattleAIControllerFromID, InID) == 0x000008, "Member 'EndBattleAPI_GetBattleAIControllerFromID::InID' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetBattleAIControllerFromID, ReturnValue) == 0x000010, "Member 'EndBattleAPI_GetBattleAIControllerFromID::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetBattleAreaDistanceFromAngle
// 0x0018 (0x0018 - 0x0000)
struct EndBattleAPI_GetBattleAreaDistanceFromAngle final
{
public:
	class AEndCharacter*                          InCharacter;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AEndCharacter*                          InTargetCharacter;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InAngle;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetBattleAreaDistanceFromAngle) == 0x000008, "Wrong alignment on EndBattleAPI_GetBattleAreaDistanceFromAngle");
static_assert(sizeof(EndBattleAPI_GetBattleAreaDistanceFromAngle) == 0x000018, "Wrong size on EndBattleAPI_GetBattleAreaDistanceFromAngle");
static_assert(offsetof(EndBattleAPI_GetBattleAreaDistanceFromAngle, InCharacter) == 0x000000, "Member 'EndBattleAPI_GetBattleAreaDistanceFromAngle::InCharacter' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetBattleAreaDistanceFromAngle, InTargetCharacter) == 0x000008, "Member 'EndBattleAPI_GetBattleAreaDistanceFromAngle::InTargetCharacter' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetBattleAreaDistanceFromAngle, InAngle) == 0x000010, "Member 'EndBattleAPI_GetBattleAreaDistanceFromAngle::InAngle' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetBattleAreaDistanceFromAngle, ReturnValue) == 0x000014, "Member 'EndBattleAPI_GetBattleAreaDistanceFromAngle::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetBattleCharaSpec_DataTableID
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_GetBattleCharaSpec_DataTableID final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetBattleCharaSpec_DataTableID) == 0x000008, "Wrong alignment on EndBattleAPI_GetBattleCharaSpec_DataTableID");
static_assert(sizeof(EndBattleAPI_GetBattleCharaSpec_DataTableID) == 0x000010, "Wrong size on EndBattleAPI_GetBattleCharaSpec_DataTableID");
static_assert(offsetof(EndBattleAPI_GetBattleCharaSpec_DataTableID, InChara) == 0x000000, "Member 'EndBattleAPI_GetBattleCharaSpec_DataTableID::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetBattleCharaSpec_DataTableID, ReturnValue) == 0x000008, "Member 'EndBattleAPI_GetBattleCharaSpec_DataTableID::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetBattleCharaSpec_WeakCondition
// 0x0018 (0x0018 - 0x0000)
struct EndBattleAPI_GetBattleCharaSpec_WeakCondition final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InIndex;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x000C(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_GetBattleCharaSpec_WeakCondition) == 0x000008, "Wrong alignment on EndBattleAPI_GetBattleCharaSpec_WeakCondition");
static_assert(sizeof(EndBattleAPI_GetBattleCharaSpec_WeakCondition) == 0x000018, "Wrong size on EndBattleAPI_GetBattleCharaSpec_WeakCondition");
static_assert(offsetof(EndBattleAPI_GetBattleCharaSpec_WeakCondition, InChara) == 0x000000, "Member 'EndBattleAPI_GetBattleCharaSpec_WeakCondition::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetBattleCharaSpec_WeakCondition, InIndex) == 0x000008, "Member 'EndBattleAPI_GetBattleCharaSpec_WeakCondition::InIndex' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetBattleCharaSpec_WeakCondition, ReturnValue) == 0x00000C, "Member 'EndBattleAPI_GetBattleCharaSpec_WeakCondition::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetBattleCountLogBoolByBP
// 0x0028 (0x0028 - 0x0000)
struct EndBattleAPI_GetBattleCountLogBoolByBP final
{
public:
	class FName                                   ownerCharaName;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndBattleCountLogType                        Type;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   TargetCharaName;                                   // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   subTypeName;                                       // 0x0014(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   battleScenId;                                      // 0x001C(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_GetBattleCountLogBoolByBP) == 0x000004, "Wrong alignment on EndBattleAPI_GetBattleCountLogBoolByBP");
static_assert(sizeof(EndBattleAPI_GetBattleCountLogBoolByBP) == 0x000028, "Wrong size on EndBattleAPI_GetBattleCountLogBoolByBP");
static_assert(offsetof(EndBattleAPI_GetBattleCountLogBoolByBP, ownerCharaName) == 0x000000, "Member 'EndBattleAPI_GetBattleCountLogBoolByBP::ownerCharaName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetBattleCountLogBoolByBP, Type) == 0x000008, "Member 'EndBattleAPI_GetBattleCountLogBoolByBP::Type' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetBattleCountLogBoolByBP, TargetCharaName) == 0x00000C, "Member 'EndBattleAPI_GetBattleCountLogBoolByBP::TargetCharaName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetBattleCountLogBoolByBP, subTypeName) == 0x000014, "Member 'EndBattleAPI_GetBattleCountLogBoolByBP::subTypeName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetBattleCountLogBoolByBP, battleScenId) == 0x00001C, "Member 'EndBattleAPI_GetBattleCountLogBoolByBP::battleScenId' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetBattleCountLogBoolByBP, ReturnValue) == 0x000024, "Member 'EndBattleAPI_GetBattleCountLogBoolByBP::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetBattleCountLogBoolForUCPCByBP
// 0x0020 (0x0020 - 0x0000)
struct EndBattleAPI_GetBattleCountLogBoolForUCPCByBP final
{
public:
	EEndBattleCountLogType                        Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   TargetCharaName;                                   // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   subTypeName;                                       // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   battleScenId;                                      // 0x0014(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_GetBattleCountLogBoolForUCPCByBP) == 0x000004, "Wrong alignment on EndBattleAPI_GetBattleCountLogBoolForUCPCByBP");
static_assert(sizeof(EndBattleAPI_GetBattleCountLogBoolForUCPCByBP) == 0x000020, "Wrong size on EndBattleAPI_GetBattleCountLogBoolForUCPCByBP");
static_assert(offsetof(EndBattleAPI_GetBattleCountLogBoolForUCPCByBP, Type) == 0x000000, "Member 'EndBattleAPI_GetBattleCountLogBoolForUCPCByBP::Type' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetBattleCountLogBoolForUCPCByBP, TargetCharaName) == 0x000004, "Member 'EndBattleAPI_GetBattleCountLogBoolForUCPCByBP::TargetCharaName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetBattleCountLogBoolForUCPCByBP, subTypeName) == 0x00000C, "Member 'EndBattleAPI_GetBattleCountLogBoolForUCPCByBP::subTypeName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetBattleCountLogBoolForUCPCByBP, battleScenId) == 0x000014, "Member 'EndBattleAPI_GetBattleCountLogBoolForUCPCByBP::battleScenId' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetBattleCountLogBoolForUCPCByBP, ReturnValue) == 0x00001C, "Member 'EndBattleAPI_GetBattleCountLogBoolForUCPCByBP::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetBattleCountLogFloatByBP
// 0x0028 (0x0028 - 0x0000)
struct EndBattleAPI_GetBattleCountLogFloatByBP final
{
public:
	class FName                                   ownerCharaName;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndBattleCountLogType                        Type;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   TargetCharaName;                                   // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   subTypeName;                                       // 0x0014(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   battleScenId;                                      // 0x001C(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0024(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetBattleCountLogFloatByBP) == 0x000004, "Wrong alignment on EndBattleAPI_GetBattleCountLogFloatByBP");
static_assert(sizeof(EndBattleAPI_GetBattleCountLogFloatByBP) == 0x000028, "Wrong size on EndBattleAPI_GetBattleCountLogFloatByBP");
static_assert(offsetof(EndBattleAPI_GetBattleCountLogFloatByBP, ownerCharaName) == 0x000000, "Member 'EndBattleAPI_GetBattleCountLogFloatByBP::ownerCharaName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetBattleCountLogFloatByBP, Type) == 0x000008, "Member 'EndBattleAPI_GetBattleCountLogFloatByBP::Type' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetBattleCountLogFloatByBP, TargetCharaName) == 0x00000C, "Member 'EndBattleAPI_GetBattleCountLogFloatByBP::TargetCharaName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetBattleCountLogFloatByBP, subTypeName) == 0x000014, "Member 'EndBattleAPI_GetBattleCountLogFloatByBP::subTypeName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetBattleCountLogFloatByBP, battleScenId) == 0x00001C, "Member 'EndBattleAPI_GetBattleCountLogFloatByBP::battleScenId' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetBattleCountLogFloatByBP, ReturnValue) == 0x000024, "Member 'EndBattleAPI_GetBattleCountLogFloatByBP::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetBattleCountLogFloatForUCPCByBP
// 0x0020 (0x0020 - 0x0000)
struct EndBattleAPI_GetBattleCountLogFloatForUCPCByBP final
{
public:
	EEndBattleCountLogType                        Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   TargetCharaName;                                   // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   subTypeName;                                       // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   battleScenId;                                      // 0x0014(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x001C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetBattleCountLogFloatForUCPCByBP) == 0x000004, "Wrong alignment on EndBattleAPI_GetBattleCountLogFloatForUCPCByBP");
static_assert(sizeof(EndBattleAPI_GetBattleCountLogFloatForUCPCByBP) == 0x000020, "Wrong size on EndBattleAPI_GetBattleCountLogFloatForUCPCByBP");
static_assert(offsetof(EndBattleAPI_GetBattleCountLogFloatForUCPCByBP, Type) == 0x000000, "Member 'EndBattleAPI_GetBattleCountLogFloatForUCPCByBP::Type' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetBattleCountLogFloatForUCPCByBP, TargetCharaName) == 0x000004, "Member 'EndBattleAPI_GetBattleCountLogFloatForUCPCByBP::TargetCharaName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetBattleCountLogFloatForUCPCByBP, subTypeName) == 0x00000C, "Member 'EndBattleAPI_GetBattleCountLogFloatForUCPCByBP::subTypeName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetBattleCountLogFloatForUCPCByBP, battleScenId) == 0x000014, "Member 'EndBattleAPI_GetBattleCountLogFloatForUCPCByBP::battleScenId' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetBattleCountLogFloatForUCPCByBP, ReturnValue) == 0x00001C, "Member 'EndBattleAPI_GetBattleCountLogFloatForUCPCByBP::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetBattleCountLogIntByBP
// 0x0028 (0x0028 - 0x0000)
struct EndBattleAPI_GetBattleCountLogIntByBP final
{
public:
	class FName                                   ownerCharaName;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndBattleCountLogType                        Type;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   TargetCharaName;                                   // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   subTypeName;                                       // 0x0014(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   battleScenId;                                      // 0x001C(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0024(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetBattleCountLogIntByBP) == 0x000004, "Wrong alignment on EndBattleAPI_GetBattleCountLogIntByBP");
static_assert(sizeof(EndBattleAPI_GetBattleCountLogIntByBP) == 0x000028, "Wrong size on EndBattleAPI_GetBattleCountLogIntByBP");
static_assert(offsetof(EndBattleAPI_GetBattleCountLogIntByBP, ownerCharaName) == 0x000000, "Member 'EndBattleAPI_GetBattleCountLogIntByBP::ownerCharaName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetBattleCountLogIntByBP, Type) == 0x000008, "Member 'EndBattleAPI_GetBattleCountLogIntByBP::Type' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetBattleCountLogIntByBP, TargetCharaName) == 0x00000C, "Member 'EndBattleAPI_GetBattleCountLogIntByBP::TargetCharaName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetBattleCountLogIntByBP, subTypeName) == 0x000014, "Member 'EndBattleAPI_GetBattleCountLogIntByBP::subTypeName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetBattleCountLogIntByBP, battleScenId) == 0x00001C, "Member 'EndBattleAPI_GetBattleCountLogIntByBP::battleScenId' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetBattleCountLogIntByBP, ReturnValue) == 0x000024, "Member 'EndBattleAPI_GetBattleCountLogIntByBP::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetBattleCountLogIntForUCPCByBP
// 0x0020 (0x0020 - 0x0000)
struct EndBattleAPI_GetBattleCountLogIntForUCPCByBP final
{
public:
	EEndBattleCountLogType                        Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   TargetCharaName;                                   // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   subTypeName;                                       // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   battleScenId;                                      // 0x0014(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x001C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetBattleCountLogIntForUCPCByBP) == 0x000004, "Wrong alignment on EndBattleAPI_GetBattleCountLogIntForUCPCByBP");
static_assert(sizeof(EndBattleAPI_GetBattleCountLogIntForUCPCByBP) == 0x000020, "Wrong size on EndBattleAPI_GetBattleCountLogIntForUCPCByBP");
static_assert(offsetof(EndBattleAPI_GetBattleCountLogIntForUCPCByBP, Type) == 0x000000, "Member 'EndBattleAPI_GetBattleCountLogIntForUCPCByBP::Type' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetBattleCountLogIntForUCPCByBP, TargetCharaName) == 0x000004, "Member 'EndBattleAPI_GetBattleCountLogIntForUCPCByBP::TargetCharaName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetBattleCountLogIntForUCPCByBP, subTypeName) == 0x00000C, "Member 'EndBattleAPI_GetBattleCountLogIntForUCPCByBP::subTypeName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetBattleCountLogIntForUCPCByBP, battleScenId) == 0x000014, "Member 'EndBattleAPI_GetBattleCountLogIntForUCPCByBP::battleScenId' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetBattleCountLogIntForUCPCByBP, ReturnValue) == 0x00001C, "Member 'EndBattleAPI_GetBattleCountLogIntForUCPCByBP::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetBattleMemberConditionList
// 0x0020 (0x0020 - 0x0000)
struct EndBattleAPI_GetBattleMemberConditionList final
{
public:
	bool                                          dead;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          sleep;                                             // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Stop;                                              // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          petrify;                                           // 0x0003(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          toad;                                              // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AEndCharacter*>                  memberList;                                        // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_GetBattleMemberConditionList) == 0x000008, "Wrong alignment on EndBattleAPI_GetBattleMemberConditionList");
static_assert(sizeof(EndBattleAPI_GetBattleMemberConditionList) == 0x000020, "Wrong size on EndBattleAPI_GetBattleMemberConditionList");
static_assert(offsetof(EndBattleAPI_GetBattleMemberConditionList, dead) == 0x000000, "Member 'EndBattleAPI_GetBattleMemberConditionList::dead' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetBattleMemberConditionList, sleep) == 0x000001, "Member 'EndBattleAPI_GetBattleMemberConditionList::sleep' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetBattleMemberConditionList, Stop) == 0x000002, "Member 'EndBattleAPI_GetBattleMemberConditionList::Stop' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetBattleMemberConditionList, petrify) == 0x000003, "Member 'EndBattleAPI_GetBattleMemberConditionList::petrify' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetBattleMemberConditionList, toad) == 0x000004, "Member 'EndBattleAPI_GetBattleMemberConditionList::toad' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetBattleMemberConditionList, memberList) == 0x000008, "Member 'EndBattleAPI_GetBattleMemberConditionList::memberList' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetBattleMemberConditionList, ReturnValue) == 0x000018, "Member 'EndBattleAPI_GetBattleMemberConditionList::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetBattleSceneCount
// 0x000C (0x000C - 0x0000)
struct EndBattleAPI_GetBattleSceneCount final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetBattleSceneCount) == 0x000004, "Wrong alignment on EndBattleAPI_GetBattleSceneCount");
static_assert(sizeof(EndBattleAPI_GetBattleSceneCount) == 0x00000C, "Wrong size on EndBattleAPI_GetBattleSceneCount");
static_assert(offsetof(EndBattleAPI_GetBattleSceneCount, InName) == 0x000000, "Member 'EndBattleAPI_GetBattleSceneCount::InName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetBattleSceneCount, ReturnValue) == 0x000008, "Member 'EndBattleAPI_GetBattleSceneCount::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetBattleSceneID
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAPI_GetBattleSceneID final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetBattleSceneID) == 0x000004, "Wrong alignment on EndBattleAPI_GetBattleSceneID");
static_assert(sizeof(EndBattleAPI_GetBattleSceneID) == 0x000008, "Wrong size on EndBattleAPI_GetBattleSceneID");
static_assert(offsetof(EndBattleAPI_GetBattleSceneID, ReturnValue) == 0x000000, "Member 'EndBattleAPI_GetBattleSceneID::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetBattleSceneIDFromChara
// 0x0018 (0x0018 - 0x0000)
struct EndBattleAPI_GetBattleSceneIDFromChara final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InParent;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ReturnValue;                                       // 0x000C(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_GetBattleSceneIDFromChara) == 0x000008, "Wrong alignment on EndBattleAPI_GetBattleSceneIDFromChara");
static_assert(sizeof(EndBattleAPI_GetBattleSceneIDFromChara) == 0x000018, "Wrong size on EndBattleAPI_GetBattleSceneIDFromChara");
static_assert(offsetof(EndBattleAPI_GetBattleSceneIDFromChara, InChara) == 0x000000, "Member 'EndBattleAPI_GetBattleSceneIDFromChara::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetBattleSceneIDFromChara, InParent) == 0x000008, "Member 'EndBattleAPI_GetBattleSceneIDFromChara::InParent' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetBattleSceneIDFromChara, ReturnValue) == 0x00000C, "Member 'EndBattleAPI_GetBattleSceneIDFromChara::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetBattleSceneSituationID
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_GetBattleSceneSituationID final
{
public:
	class FName                                   BattleSceneID;                                     // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetBattleSceneSituationID) == 0x000004, "Wrong alignment on EndBattleAPI_GetBattleSceneSituationID");
static_assert(sizeof(EndBattleAPI_GetBattleSceneSituationID) == 0x000010, "Wrong size on EndBattleAPI_GetBattleSceneSituationID");
static_assert(offsetof(EndBattleAPI_GetBattleSceneSituationID, BattleSceneID) == 0x000000, "Member 'EndBattleAPI_GetBattleSceneSituationID::BattleSceneID' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetBattleSceneSituationID, ReturnValue) == 0x000008, "Member 'EndBattleAPI_GetBattleSceneSituationID::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetBattleSceneSituationType
// 0x000C (0x000C - 0x0000)
struct EndBattleAPI_GetBattleSceneSituationType final
{
public:
	class FName                                   BattleSceneID;                                     // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndBattleSceneSituationType                  ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_GetBattleSceneSituationType) == 0x000004, "Wrong alignment on EndBattleAPI_GetBattleSceneSituationType");
static_assert(sizeof(EndBattleAPI_GetBattleSceneSituationType) == 0x00000C, "Wrong size on EndBattleAPI_GetBattleSceneSituationType");
static_assert(offsetof(EndBattleAPI_GetBattleSceneSituationType, BattleSceneID) == 0x000000, "Member 'EndBattleAPI_GetBattleSceneSituationType::BattleSceneID' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetBattleSceneSituationType, ReturnValue) == 0x000008, "Member 'EndBattleAPI_GetBattleSceneSituationType::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetCharactersFromID
// 0x0030 (0x0030 - 0x0000)
struct EndBattleAPI_GetCharactersFromID final
{
public:
	class FName                                   Upper;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Lower;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AEndCharacter*>                  OutList;                                           // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class AEndCharacter*>                  InList;                                            // 0x0020(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetCharactersFromID) == 0x000008, "Wrong alignment on EndBattleAPI_GetCharactersFromID");
static_assert(sizeof(EndBattleAPI_GetCharactersFromID) == 0x000030, "Wrong size on EndBattleAPI_GetCharactersFromID");
static_assert(offsetof(EndBattleAPI_GetCharactersFromID, Upper) == 0x000000, "Member 'EndBattleAPI_GetCharactersFromID::Upper' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetCharactersFromID, Lower) == 0x000008, "Member 'EndBattleAPI_GetCharactersFromID::Lower' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetCharactersFromID, OutList) == 0x000010, "Member 'EndBattleAPI_GetCharactersFromID::OutList' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetCharactersFromID, InList) == 0x000020, "Member 'EndBattleAPI_GetCharactersFromID::InList' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetCharaFromActorName
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_GetCharaFromActorName final
{
public:
	class FName                                   InActorName;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AEndCharacter*                          ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetCharaFromActorName) == 0x000008, "Wrong alignment on EndBattleAPI_GetCharaFromActorName");
static_assert(sizeof(EndBattleAPI_GetCharaFromActorName) == 0x000010, "Wrong size on EndBattleAPI_GetCharaFromActorName");
static_assert(offsetof(EndBattleAPI_GetCharaFromActorName, InActorName) == 0x000000, "Member 'EndBattleAPI_GetCharaFromActorName::InActorName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetCharaFromActorName, ReturnValue) == 0x000008, "Member 'EndBattleAPI_GetCharaFromActorName::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetCharaFromRaceID
// 0x0018 (0x0018 - 0x0000)
struct EndBattleAPI_GetCharaFromRaceID final
{
public:
	class FName                                   InRaceName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InID;                                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AEndCharacter*                          ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetCharaFromRaceID) == 0x000008, "Wrong alignment on EndBattleAPI_GetCharaFromRaceID");
static_assert(sizeof(EndBattleAPI_GetCharaFromRaceID) == 0x000018, "Wrong size on EndBattleAPI_GetCharaFromRaceID");
static_assert(offsetof(EndBattleAPI_GetCharaFromRaceID, InRaceName) == 0x000000, "Member 'EndBattleAPI_GetCharaFromRaceID::InRaceName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetCharaFromRaceID, InID) == 0x000008, "Member 'EndBattleAPI_GetCharaFromRaceID::InID' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetCharaFromRaceID, ReturnValue) == 0x000010, "Member 'EndBattleAPI_GetCharaFromRaceID::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetCharaHP
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_GetCharaHP final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_GetCharaHP) == 0x000008, "Wrong alignment on EndBattleAPI_GetCharaHP");
static_assert(sizeof(EndBattleAPI_GetCharaHP) == 0x000010, "Wrong size on EndBattleAPI_GetCharaHP");
static_assert(offsetof(EndBattleAPI_GetCharaHP, InChara) == 0x000000, "Member 'EndBattleAPI_GetCharaHP::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetCharaHP, ReturnValue) == 0x000008, "Member 'EndBattleAPI_GetCharaHP::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetCharaHPMax
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_GetCharaHPMax final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_GetCharaHPMax) == 0x000008, "Wrong alignment on EndBattleAPI_GetCharaHPMax");
static_assert(sizeof(EndBattleAPI_GetCharaHPMax) == 0x000010, "Wrong size on EndBattleAPI_GetCharaHPMax");
static_assert(offsetof(EndBattleAPI_GetCharaHPMax, InChara) == 0x000000, "Member 'EndBattleAPI_GetCharaHPMax::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetCharaHPMax, ReturnValue) == 0x000008, "Member 'EndBattleAPI_GetCharaHPMax::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetCharaHPP
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_GetCharaHPP final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_GetCharaHPP) == 0x000008, "Wrong alignment on EndBattleAPI_GetCharaHPP");
static_assert(sizeof(EndBattleAPI_GetCharaHPP) == 0x000010, "Wrong size on EndBattleAPI_GetCharaHPP");
static_assert(offsetof(EndBattleAPI_GetCharaHPP, InChara) == 0x000000, "Member 'EndBattleAPI_GetCharaHPP::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetCharaHPP, ReturnValue) == 0x000008, "Member 'EndBattleAPI_GetCharaHPP::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetCharaID
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_GetCharaID final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetCharaID) == 0x000008, "Wrong alignment on EndBattleAPI_GetCharaID");
static_assert(sizeof(EndBattleAPI_GetCharaID) == 0x000010, "Wrong size on EndBattleAPI_GetCharaID");
static_assert(offsetof(EndBattleAPI_GetCharaID, InChara) == 0x000000, "Member 'EndBattleAPI_GetCharaID::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetCharaID, ReturnValue) == 0x000008, "Member 'EndBattleAPI_GetCharaID::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetCommandLinkageMagnificate
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_GetCommandLinkageMagnificate final
{
public:
	class AEndCharacter*                          chara;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_GetCommandLinkageMagnificate) == 0x000008, "Wrong alignment on EndBattleAPI_GetCommandLinkageMagnificate");
static_assert(sizeof(EndBattleAPI_GetCommandLinkageMagnificate) == 0x000010, "Wrong size on EndBattleAPI_GetCommandLinkageMagnificate");
static_assert(offsetof(EndBattleAPI_GetCommandLinkageMagnificate, chara) == 0x000000, "Member 'EndBattleAPI_GetCommandLinkageMagnificate::chara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetCommandLinkageMagnificate, ReturnValue) == 0x000008, "Member 'EndBattleAPI_GetCommandLinkageMagnificate::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetCurrentAbilityID
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_GetCurrentAbilityID final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetCurrentAbilityID) == 0x000008, "Wrong alignment on EndBattleAPI_GetCurrentAbilityID");
static_assert(sizeof(EndBattleAPI_GetCurrentAbilityID) == 0x000010, "Wrong size on EndBattleAPI_GetCurrentAbilityID");
static_assert(offsetof(EndBattleAPI_GetCurrentAbilityID, InChara) == 0x000000, "Member 'EndBattleAPI_GetCurrentAbilityID::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetCurrentAbilityID, ReturnValue) == 0x000008, "Member 'EndBattleAPI_GetCurrentAbilityID::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetCurrentLocomotionState
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_GetCurrentLocomotionState final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndLocomotionState                           ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_GetCurrentLocomotionState) == 0x000008, "Wrong alignment on EndBattleAPI_GetCurrentLocomotionState");
static_assert(sizeof(EndBattleAPI_GetCurrentLocomotionState) == 0x000010, "Wrong size on EndBattleAPI_GetCurrentLocomotionState");
static_assert(offsetof(EndBattleAPI_GetCurrentLocomotionState, InChara) == 0x000000, "Member 'EndBattleAPI_GetCurrentLocomotionState::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetCurrentLocomotionState, ReturnValue) == 0x000008, "Member 'EndBattleAPI_GetCurrentLocomotionState::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetDamageSourceCount
// 0x000C (0x000C - 0x0000)
struct EndBattleAPI_GetDamageSourceCount final
{
public:
	class FName                                   InDamageSourceID;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetDamageSourceCount) == 0x000004, "Wrong alignment on EndBattleAPI_GetDamageSourceCount");
static_assert(sizeof(EndBattleAPI_GetDamageSourceCount) == 0x00000C, "Wrong size on EndBattleAPI_GetDamageSourceCount");
static_assert(offsetof(EndBattleAPI_GetDamageSourceCount, InDamageSourceID) == 0x000000, "Member 'EndBattleAPI_GetDamageSourceCount::InDamageSourceID' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetDamageSourceCount, ReturnValue) == 0x000008, "Member 'EndBattleAPI_GetDamageSourceCount::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetDamageSourceInfo
// 0x0024 (0x0024 - 0x0000)
struct EndBattleAPI_GetDamageSourceInfo final
{
public:
	class FName                                   InAbilityName;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutTarget;                                         // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutTargetParty;                                    // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutCut;                                            // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutProperty;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutCollision;                                      // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OutDisableFinish;                                  // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OutCreateDelay;                                    // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetDamageSourceInfo) == 0x000004, "Wrong alignment on EndBattleAPI_GetDamageSourceInfo");
static_assert(sizeof(EndBattleAPI_GetDamageSourceInfo) == 0x000024, "Wrong size on EndBattleAPI_GetDamageSourceInfo");
static_assert(offsetof(EndBattleAPI_GetDamageSourceInfo, InAbilityName) == 0x000000, "Member 'EndBattleAPI_GetDamageSourceInfo::InAbilityName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetDamageSourceInfo, OutTarget) == 0x000008, "Member 'EndBattleAPI_GetDamageSourceInfo::OutTarget' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetDamageSourceInfo, OutTargetParty) == 0x00000C, "Member 'EndBattleAPI_GetDamageSourceInfo::OutTargetParty' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetDamageSourceInfo, OutCut) == 0x000010, "Member 'EndBattleAPI_GetDamageSourceInfo::OutCut' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetDamageSourceInfo, OutProperty) == 0x000014, "Member 'EndBattleAPI_GetDamageSourceInfo::OutProperty' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetDamageSourceInfo, OutCollision) == 0x000018, "Member 'EndBattleAPI_GetDamageSourceInfo::OutCollision' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetDamageSourceInfo, OutDisableFinish) == 0x00001C, "Member 'EndBattleAPI_GetDamageSourceInfo::OutDisableFinish' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetDamageSourceInfo, OutCreateDelay) == 0x000020, "Member 'EndBattleAPI_GetDamageSourceInfo::OutCreateDelay' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetDamageSourceInfoFromDamage
// 0x0024 (0x0024 - 0x0000)
struct EndBattleAPI_GetDamageSourceInfoFromDamage final
{
public:
	class FName                                   InDamageSourceID;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutTarget;                                         // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutTargetParty;                                    // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutCut;                                            // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutProperty;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutCollision;                                      // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OutDisableFinish;                                  // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OutCreateDelay;                                    // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetDamageSourceInfoFromDamage) == 0x000004, "Wrong alignment on EndBattleAPI_GetDamageSourceInfoFromDamage");
static_assert(sizeof(EndBattleAPI_GetDamageSourceInfoFromDamage) == 0x000024, "Wrong size on EndBattleAPI_GetDamageSourceInfoFromDamage");
static_assert(offsetof(EndBattleAPI_GetDamageSourceInfoFromDamage, InDamageSourceID) == 0x000000, "Member 'EndBattleAPI_GetDamageSourceInfoFromDamage::InDamageSourceID' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetDamageSourceInfoFromDamage, OutTarget) == 0x000008, "Member 'EndBattleAPI_GetDamageSourceInfoFromDamage::OutTarget' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetDamageSourceInfoFromDamage, OutTargetParty) == 0x00000C, "Member 'EndBattleAPI_GetDamageSourceInfoFromDamage::OutTargetParty' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetDamageSourceInfoFromDamage, OutCut) == 0x000010, "Member 'EndBattleAPI_GetDamageSourceInfoFromDamage::OutCut' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetDamageSourceInfoFromDamage, OutProperty) == 0x000014, "Member 'EndBattleAPI_GetDamageSourceInfoFromDamage::OutProperty' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetDamageSourceInfoFromDamage, OutCollision) == 0x000018, "Member 'EndBattleAPI_GetDamageSourceInfoFromDamage::OutCollision' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetDamageSourceInfoFromDamage, OutDisableFinish) == 0x00001C, "Member 'EndBattleAPI_GetDamageSourceInfoFromDamage::OutDisableFinish' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetDamageSourceInfoFromDamage, OutCreateDelay) == 0x000020, "Member 'EndBattleAPI_GetDamageSourceInfoFromDamage::OutCreateDelay' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetDummyEnemies
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_GetDummyEnemies final
{
public:
	TArray<class AEndCharacter*>                  ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetDummyEnemies) == 0x000008, "Wrong alignment on EndBattleAPI_GetDummyEnemies");
static_assert(sizeof(EndBattleAPI_GetDummyEnemies) == 0x000010, "Wrong size on EndBattleAPI_GetDummyEnemies");
static_assert(offsetof(EndBattleAPI_GetDummyEnemies, ReturnValue) == 0x000000, "Member 'EndBattleAPI_GetDummyEnemies::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetDummyNPCsFromID
// 0x0020 (0x0020 - 0x0000)
struct EndBattleAPI_GetDummyNPCsFromID final
{
public:
	class FName                                   Upper;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Lower;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AEndCharacter*>                  ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetDummyNPCsFromID) == 0x000008, "Wrong alignment on EndBattleAPI_GetDummyNPCsFromID");
static_assert(sizeof(EndBattleAPI_GetDummyNPCsFromID) == 0x000020, "Wrong size on EndBattleAPI_GetDummyNPCsFromID");
static_assert(offsetof(EndBattleAPI_GetDummyNPCsFromID, Upper) == 0x000000, "Member 'EndBattleAPI_GetDummyNPCsFromID::Upper' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetDummyNPCsFromID, Lower) == 0x000008, "Member 'EndBattleAPI_GetDummyNPCsFromID::Lower' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetDummyNPCsFromID, ReturnValue) == 0x000010, "Member 'EndBattleAPI_GetDummyNPCsFromID::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetDummyPartyMembers
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_GetDummyPartyMembers final
{
public:
	TArray<class AEndCharacter*>                  ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetDummyPartyMembers) == 0x000008, "Wrong alignment on EndBattleAPI_GetDummyPartyMembers");
static_assert(sizeof(EndBattleAPI_GetDummyPartyMembers) == 0x000010, "Wrong size on EndBattleAPI_GetDummyPartyMembers");
static_assert(offsetof(EndBattleAPI_GetDummyPartyMembers, ReturnValue) == 0x000000, "Member 'EndBattleAPI_GetDummyPartyMembers::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetEncountBattleSceneIDs
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_GetEncountBattleSceneIDs final
{
public:
	TArray<class FName>                           ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetEncountBattleSceneIDs) == 0x000008, "Wrong alignment on EndBattleAPI_GetEncountBattleSceneIDs");
static_assert(sizeof(EndBattleAPI_GetEncountBattleSceneIDs) == 0x000010, "Wrong size on EndBattleAPI_GetEncountBattleSceneIDs");
static_assert(offsetof(EndBattleAPI_GetEncountBattleSceneIDs, ReturnValue) == 0x000000, "Member 'EndBattleAPI_GetEncountBattleSceneIDs::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetEnemyMemberCount
// 0x000C (0x000C - 0x0000)
struct EndBattleAPI_GetEnemyMemberCount final
{
public:
	class FName                                   ContainRaceID;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetEnemyMemberCount) == 0x000004, "Wrong alignment on EndBattleAPI_GetEnemyMemberCount");
static_assert(sizeof(EndBattleAPI_GetEnemyMemberCount) == 0x00000C, "Wrong size on EndBattleAPI_GetEnemyMemberCount");
static_assert(offsetof(EndBattleAPI_GetEnemyMemberCount, ContainRaceID) == 0x000000, "Member 'EndBattleAPI_GetEnemyMemberCount::ContainRaceID' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetEnemyMemberCount, ReturnValue) == 0x000008, "Member 'EndBattleAPI_GetEnemyMemberCount::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetEnemyMemberCountFromID
// 0x0018 (0x0018 - 0x0000)
struct EndBattleAPI_GetEnemyMemberCountFromID final
{
public:
	class FName                                   Upper;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Lower;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Flip;                                              // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRemoveDummy;                                      // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetEnemyMemberCountFromID) == 0x000004, "Wrong alignment on EndBattleAPI_GetEnemyMemberCountFromID");
static_assert(sizeof(EndBattleAPI_GetEnemyMemberCountFromID) == 0x000018, "Wrong size on EndBattleAPI_GetEnemyMemberCountFromID");
static_assert(offsetof(EndBattleAPI_GetEnemyMemberCountFromID, Upper) == 0x000000, "Member 'EndBattleAPI_GetEnemyMemberCountFromID::Upper' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetEnemyMemberCountFromID, Lower) == 0x000008, "Member 'EndBattleAPI_GetEnemyMemberCountFromID::Lower' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetEnemyMemberCountFromID, Flip) == 0x000010, "Member 'EndBattleAPI_GetEnemyMemberCountFromID::Flip' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetEnemyMemberCountFromID, bRemoveDummy) == 0x000011, "Member 'EndBattleAPI_GetEnemyMemberCountFromID::bRemoveDummy' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetEnemyMemberCountFromID, ReturnValue) == 0x000014, "Member 'EndBattleAPI_GetEnemyMemberCountFromID::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetEnemyMemberFromIDWithIndex
// 0x0020 (0x0020 - 0x0000)
struct EndBattleAPI_GetEnemyMemberFromIDWithIndex final
{
public:
	class FName                                   Upper;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Lower;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InIndex;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AEndCharacter*                          ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetEnemyMemberFromIDWithIndex) == 0x000008, "Wrong alignment on EndBattleAPI_GetEnemyMemberFromIDWithIndex");
static_assert(sizeof(EndBattleAPI_GetEnemyMemberFromIDWithIndex) == 0x000020, "Wrong size on EndBattleAPI_GetEnemyMemberFromIDWithIndex");
static_assert(offsetof(EndBattleAPI_GetEnemyMemberFromIDWithIndex, Upper) == 0x000000, "Member 'EndBattleAPI_GetEnemyMemberFromIDWithIndex::Upper' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetEnemyMemberFromIDWithIndex, Lower) == 0x000008, "Member 'EndBattleAPI_GetEnemyMemberFromIDWithIndex::Lower' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetEnemyMemberFromIDWithIndex, InIndex) == 0x000010, "Member 'EndBattleAPI_GetEnemyMemberFromIDWithIndex::InIndex' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetEnemyMemberFromIDWithIndex, ReturnValue) == 0x000018, "Member 'EndBattleAPI_GetEnemyMemberFromIDWithIndex::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetEnemyMembers
// 0x0020 (0x0020 - 0x0000)
struct EndBattleAPI_GetEnemyMembers final
{
public:
	class FName                                   ContainRaceID;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Flip;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AEndCharacter*>                  ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetEnemyMembers) == 0x000008, "Wrong alignment on EndBattleAPI_GetEnemyMembers");
static_assert(sizeof(EndBattleAPI_GetEnemyMembers) == 0x000020, "Wrong size on EndBattleAPI_GetEnemyMembers");
static_assert(offsetof(EndBattleAPI_GetEnemyMembers, ContainRaceID) == 0x000000, "Member 'EndBattleAPI_GetEnemyMembers::ContainRaceID' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetEnemyMembers, Flip) == 0x000008, "Member 'EndBattleAPI_GetEnemyMembers::Flip' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetEnemyMembers, ReturnValue) == 0x000010, "Member 'EndBattleAPI_GetEnemyMembers::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetEnemyMembersFromID
// 0x0028 (0x0028 - 0x0000)
struct EndBattleAPI_GetEnemyMembersFromID final
{
public:
	class FName                                   Upper;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Lower;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Flip;                                              // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AEndCharacter*>                  ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetEnemyMembersFromID) == 0x000008, "Wrong alignment on EndBattleAPI_GetEnemyMembersFromID");
static_assert(sizeof(EndBattleAPI_GetEnemyMembersFromID) == 0x000028, "Wrong size on EndBattleAPI_GetEnemyMembersFromID");
static_assert(offsetof(EndBattleAPI_GetEnemyMembersFromID, Upper) == 0x000000, "Member 'EndBattleAPI_GetEnemyMembersFromID::Upper' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetEnemyMembersFromID, Lower) == 0x000008, "Member 'EndBattleAPI_GetEnemyMembersFromID::Lower' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetEnemyMembersFromID, Flip) == 0x000010, "Member 'EndBattleAPI_GetEnemyMembersFromID::Flip' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetEnemyMembersFromID, ReturnValue) == 0x000018, "Member 'EndBattleAPI_GetEnemyMembersFromID::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetEnemyMembersRef
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_GetEnemyMembersRef final
{
public:
	TArray<class AEndCharacter*>                  Out;                                               // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetEnemyMembersRef) == 0x000008, "Wrong alignment on EndBattleAPI_GetEnemyMembersRef");
static_assert(sizeof(EndBattleAPI_GetEnemyMembersRef) == 0x000010, "Wrong size on EndBattleAPI_GetEnemyMembersRef");
static_assert(offsetof(EndBattleAPI_GetEnemyMembersRef, Out) == 0x000000, "Member 'EndBattleAPI_GetEnemyMembersRef::Out' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetExpectationCountInCapsuleArea
// 0x0020 (0x0020 - 0x0000)
struct EndBattleAPI_GetExpectationCountInCapsuleArea final
{
public:
	class AEndCharacter*                          InCharacter;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndAiBattleTargetType                        targetType;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CapsuleRadius;                                     // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CapsuleLength;                                     // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FowardVectorRotateAngle;                           // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_GetExpectationCountInCapsuleArea) == 0x000008, "Wrong alignment on EndBattleAPI_GetExpectationCountInCapsuleArea");
static_assert(sizeof(EndBattleAPI_GetExpectationCountInCapsuleArea) == 0x000020, "Wrong size on EndBattleAPI_GetExpectationCountInCapsuleArea");
static_assert(offsetof(EndBattleAPI_GetExpectationCountInCapsuleArea, InCharacter) == 0x000000, "Member 'EndBattleAPI_GetExpectationCountInCapsuleArea::InCharacter' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetExpectationCountInCapsuleArea, targetType) == 0x000008, "Member 'EndBattleAPI_GetExpectationCountInCapsuleArea::targetType' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetExpectationCountInCapsuleArea, CapsuleRadius) == 0x00000C, "Member 'EndBattleAPI_GetExpectationCountInCapsuleArea::CapsuleRadius' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetExpectationCountInCapsuleArea, CapsuleLength) == 0x000010, "Member 'EndBattleAPI_GetExpectationCountInCapsuleArea::CapsuleLength' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetExpectationCountInCapsuleArea, FowardVectorRotateAngle) == 0x000014, "Member 'EndBattleAPI_GetExpectationCountInCapsuleArea::FowardVectorRotateAngle' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetExpectationCountInCapsuleArea, ReturnValue) == 0x000018, "Member 'EndBattleAPI_GetExpectationCountInCapsuleArea::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetExpectationCountInCapsuleAreaByLocation
// 0x0028 (0x0028 - 0x0000)
struct EndBattleAPI_GetExpectationCountInCapsuleAreaByLocation final
{
public:
	class AEndCharacter*                          InCharacter;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndAiBattleTargetType                        targetType;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CapsuleRadius;                                     // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CapsuleLength;                                     // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetLocation;                                    // 0x0014(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FowardVectorRotateAngle;                           // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0024(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetExpectationCountInCapsuleAreaByLocation) == 0x000008, "Wrong alignment on EndBattleAPI_GetExpectationCountInCapsuleAreaByLocation");
static_assert(sizeof(EndBattleAPI_GetExpectationCountInCapsuleAreaByLocation) == 0x000028, "Wrong size on EndBattleAPI_GetExpectationCountInCapsuleAreaByLocation");
static_assert(offsetof(EndBattleAPI_GetExpectationCountInCapsuleAreaByLocation, InCharacter) == 0x000000, "Member 'EndBattleAPI_GetExpectationCountInCapsuleAreaByLocation::InCharacter' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetExpectationCountInCapsuleAreaByLocation, targetType) == 0x000008, "Member 'EndBattleAPI_GetExpectationCountInCapsuleAreaByLocation::targetType' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetExpectationCountInCapsuleAreaByLocation, CapsuleRadius) == 0x00000C, "Member 'EndBattleAPI_GetExpectationCountInCapsuleAreaByLocation::CapsuleRadius' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetExpectationCountInCapsuleAreaByLocation, CapsuleLength) == 0x000010, "Member 'EndBattleAPI_GetExpectationCountInCapsuleAreaByLocation::CapsuleLength' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetExpectationCountInCapsuleAreaByLocation, TargetLocation) == 0x000014, "Member 'EndBattleAPI_GetExpectationCountInCapsuleAreaByLocation::TargetLocation' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetExpectationCountInCapsuleAreaByLocation, FowardVectorRotateAngle) == 0x000020, "Member 'EndBattleAPI_GetExpectationCountInCapsuleAreaByLocation::FowardVectorRotateAngle' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetExpectationCountInCapsuleAreaByLocation, ReturnValue) == 0x000024, "Member 'EndBattleAPI_GetExpectationCountInCapsuleAreaByLocation::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetExpectationCountInConeArea
// 0x0020 (0x0020 - 0x0000)
struct EndBattleAPI_GetExpectationCountInConeArea final
{
public:
	class AEndCharacter*                          InCharacter;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndAiBattleTargetType                        targetType;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ConeRadius;                                        // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ConeAngle;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FowardVectorRotateAngle;                           // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_GetExpectationCountInConeArea) == 0x000008, "Wrong alignment on EndBattleAPI_GetExpectationCountInConeArea");
static_assert(sizeof(EndBattleAPI_GetExpectationCountInConeArea) == 0x000020, "Wrong size on EndBattleAPI_GetExpectationCountInConeArea");
static_assert(offsetof(EndBattleAPI_GetExpectationCountInConeArea, InCharacter) == 0x000000, "Member 'EndBattleAPI_GetExpectationCountInConeArea::InCharacter' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetExpectationCountInConeArea, targetType) == 0x000008, "Member 'EndBattleAPI_GetExpectationCountInConeArea::targetType' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetExpectationCountInConeArea, ConeRadius) == 0x00000C, "Member 'EndBattleAPI_GetExpectationCountInConeArea::ConeRadius' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetExpectationCountInConeArea, ConeAngle) == 0x000010, "Member 'EndBattleAPI_GetExpectationCountInConeArea::ConeAngle' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetExpectationCountInConeArea, FowardVectorRotateAngle) == 0x000014, "Member 'EndBattleAPI_GetExpectationCountInConeArea::FowardVectorRotateAngle' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetExpectationCountInConeArea, ReturnValue) == 0x000018, "Member 'EndBattleAPI_GetExpectationCountInConeArea::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetExpectationCountInConeAreaByLocation
// 0x0028 (0x0028 - 0x0000)
struct EndBattleAPI_GetExpectationCountInConeAreaByLocation final
{
public:
	class AEndCharacter*                          InCharacter;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndAiBattleTargetType                        targetType;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ConeRadius;                                        // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ConeAngle;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetLocation;                                    // 0x0014(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FowardVectorRotateAngle;                           // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0024(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetExpectationCountInConeAreaByLocation) == 0x000008, "Wrong alignment on EndBattleAPI_GetExpectationCountInConeAreaByLocation");
static_assert(sizeof(EndBattleAPI_GetExpectationCountInConeAreaByLocation) == 0x000028, "Wrong size on EndBattleAPI_GetExpectationCountInConeAreaByLocation");
static_assert(offsetof(EndBattleAPI_GetExpectationCountInConeAreaByLocation, InCharacter) == 0x000000, "Member 'EndBattleAPI_GetExpectationCountInConeAreaByLocation::InCharacter' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetExpectationCountInConeAreaByLocation, targetType) == 0x000008, "Member 'EndBattleAPI_GetExpectationCountInConeAreaByLocation::targetType' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetExpectationCountInConeAreaByLocation, ConeRadius) == 0x00000C, "Member 'EndBattleAPI_GetExpectationCountInConeAreaByLocation::ConeRadius' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetExpectationCountInConeAreaByLocation, ConeAngle) == 0x000010, "Member 'EndBattleAPI_GetExpectationCountInConeAreaByLocation::ConeAngle' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetExpectationCountInConeAreaByLocation, TargetLocation) == 0x000014, "Member 'EndBattleAPI_GetExpectationCountInConeAreaByLocation::TargetLocation' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetExpectationCountInConeAreaByLocation, FowardVectorRotateAngle) == 0x000020, "Member 'EndBattleAPI_GetExpectationCountInConeAreaByLocation::FowardVectorRotateAngle' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetExpectationCountInConeAreaByLocation, ReturnValue) == 0x000024, "Member 'EndBattleAPI_GetExpectationCountInConeAreaByLocation::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetFarestActor
// 0x0030 (0x0030 - 0x0000)
struct EndBattleAPI_GetFarestActor final
{
public:
	class AActor*                                 outActor;                                          // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 baseActor;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         compareActorList;                                  // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         ignoreActorList;                                   // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetFarestActor) == 0x000008, "Wrong alignment on EndBattleAPI_GetFarestActor");
static_assert(sizeof(EndBattleAPI_GetFarestActor) == 0x000030, "Wrong size on EndBattleAPI_GetFarestActor");
static_assert(offsetof(EndBattleAPI_GetFarestActor, outActor) == 0x000000, "Member 'EndBattleAPI_GetFarestActor::outActor' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetFarestActor, baseActor) == 0x000008, "Member 'EndBattleAPI_GetFarestActor::baseActor' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetFarestActor, compareActorList) == 0x000010, "Member 'EndBattleAPI_GetFarestActor::compareActorList' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetFarestActor, ignoreActorList) == 0x000020, "Member 'EndBattleAPI_GetFarestActor::ignoreActorList' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetFarestCharacter
// 0x0028 (0x0028 - 0x0000)
struct EndBattleAPI_GetFarestCharacter final
{
public:
	struct FVector                                InLocation;                                        // 0x0000(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AEndCharacter*>                  InList;                                            // 0x0010(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class AEndCharacter*                          ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetFarestCharacter) == 0x000008, "Wrong alignment on EndBattleAPI_GetFarestCharacter");
static_assert(sizeof(EndBattleAPI_GetFarestCharacter) == 0x000028, "Wrong size on EndBattleAPI_GetFarestCharacter");
static_assert(offsetof(EndBattleAPI_GetFarestCharacter, InLocation) == 0x000000, "Member 'EndBattleAPI_GetFarestCharacter::InLocation' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetFarestCharacter, InList) == 0x000010, "Member 'EndBattleAPI_GetFarestCharacter::InList' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetFarestCharacter, ReturnValue) == 0x000020, "Member 'EndBattleAPI_GetFarestCharacter::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetGuardTime
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_GetGuardTime final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_GetGuardTime) == 0x000008, "Wrong alignment on EndBattleAPI_GetGuardTime");
static_assert(sizeof(EndBattleAPI_GetGuardTime) == 0x000010, "Wrong size on EndBattleAPI_GetGuardTime");
static_assert(offsetof(EndBattleAPI_GetGuardTime, InChara) == 0x000000, "Member 'EndBattleAPI_GetGuardTime::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetGuardTime, ReturnValue) == 0x000008, "Member 'EndBattleAPI_GetGuardTime::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetHiddenBreakable
// 0x000C (0x000C - 0x0000)
struct EndBattleAPI_GetHiddenBreakable final
{
public:
	class FName                                   BreakableID;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_GetHiddenBreakable) == 0x000004, "Wrong alignment on EndBattleAPI_GetHiddenBreakable");
static_assert(sizeof(EndBattleAPI_GetHiddenBreakable) == 0x00000C, "Wrong size on EndBattleAPI_GetHiddenBreakable");
static_assert(offsetof(EndBattleAPI_GetHiddenBreakable, BreakableID) == 0x000000, "Member 'EndBattleAPI_GetHiddenBreakable::BreakableID' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetHiddenBreakable, ReturnValue) == 0x000008, "Member 'EndBattleAPI_GetHiddenBreakable::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetHighestPriorityBattleCharaCategory
// 0x000C (0x000C - 0x0000)
struct EndBattleAPI_GetHighestPriorityBattleCharaCategory final
{
public:
	class FName                                   BattleSceneID;                                     // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndBattleCharaCategoryType                   ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_GetHighestPriorityBattleCharaCategory) == 0x000004, "Wrong alignment on EndBattleAPI_GetHighestPriorityBattleCharaCategory");
static_assert(sizeof(EndBattleAPI_GetHighestPriorityBattleCharaCategory) == 0x00000C, "Wrong size on EndBattleAPI_GetHighestPriorityBattleCharaCategory");
static_assert(offsetof(EndBattleAPI_GetHighestPriorityBattleCharaCategory, BattleSceneID) == 0x000000, "Member 'EndBattleAPI_GetHighestPriorityBattleCharaCategory::BattleSceneID' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetHighestPriorityBattleCharaCategory, ReturnValue) == 0x000008, "Member 'EndBattleAPI_GetHighestPriorityBattleCharaCategory::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetKeep
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_GetKeep final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_GetKeep) == 0x000008, "Wrong alignment on EndBattleAPI_GetKeep");
static_assert(sizeof(EndBattleAPI_GetKeep) == 0x000010, "Wrong size on EndBattleAPI_GetKeep");
static_assert(offsetof(EndBattleAPI_GetKeep, InChara) == 0x000000, "Member 'EndBattleAPI_GetKeep::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetKeep, ReturnValue) == 0x000008, "Member 'EndBattleAPI_GetKeep::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetLayoutTransform
// 0x0040 (0x0040 - 0x0000)
struct EndBattleAPI_GetLayoutTransform final
{
public:
	class FName                                   NodeName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ReturnValue;                                       // 0x0010(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetLayoutTransform) == 0x000010, "Wrong alignment on EndBattleAPI_GetLayoutTransform");
static_assert(sizeof(EndBattleAPI_GetLayoutTransform) == 0x000040, "Wrong size on EndBattleAPI_GetLayoutTransform");
static_assert(offsetof(EndBattleAPI_GetLayoutTransform, NodeName) == 0x000000, "Member 'EndBattleAPI_GetLayoutTransform::NodeName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetLayoutTransform, ReturnValue) == 0x000010, "Member 'EndBattleAPI_GetLayoutTransform::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetMagicDefense
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_GetMagicDefense final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_GetMagicDefense) == 0x000008, "Wrong alignment on EndBattleAPI_GetMagicDefense");
static_assert(sizeof(EndBattleAPI_GetMagicDefense) == 0x000010, "Wrong size on EndBattleAPI_GetMagicDefense");
static_assert(offsetof(EndBattleAPI_GetMagicDefense, InChara) == 0x000000, "Member 'EndBattleAPI_GetMagicDefense::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetMagicDefense, ReturnValue) == 0x000008, "Member 'EndBattleAPI_GetMagicDefense::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetMateriaParam
// 0x0028 (0x0028 - 0x0000)
struct EndBattleAPI_GetMateriaParam final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWeapon;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Slot;                                              // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEndBattleAIMateriaParam               Param;                                             // 0x0010(0x0014)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_GetMateriaParam) == 0x000008, "Wrong alignment on EndBattleAPI_GetMateriaParam");
static_assert(sizeof(EndBattleAPI_GetMateriaParam) == 0x000028, "Wrong size on EndBattleAPI_GetMateriaParam");
static_assert(offsetof(EndBattleAPI_GetMateriaParam, InChara) == 0x000000, "Member 'EndBattleAPI_GetMateriaParam::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetMateriaParam, bWeapon) == 0x000008, "Member 'EndBattleAPI_GetMateriaParam::bWeapon' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetMateriaParam, Slot) == 0x00000C, "Member 'EndBattleAPI_GetMateriaParam::Slot' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetMateriaParam, Param) == 0x000010, "Member 'EndBattleAPI_GetMateriaParam::Param' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetMateriaParam, ReturnValue) == 0x000024, "Member 'EndBattleAPI_GetMateriaParam::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetMotionList
// 0x0018 (0x0018 - 0x0000)
struct EndBattleAPI_GetMotionList final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetMotionList) == 0x000008, "Wrong alignment on EndBattleAPI_GetMotionList");
static_assert(sizeof(EndBattleAPI_GetMotionList) == 0x000018, "Wrong size on EndBattleAPI_GetMotionList");
static_assert(offsetof(EndBattleAPI_GetMotionList, InChara) == 0x000000, "Member 'EndBattleAPI_GetMotionList::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetMotionList, ReturnValue) == 0x000008, "Member 'EndBattleAPI_GetMotionList::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetNavVolumeFromAngle
// 0x0020 (0x0020 - 0x0000)
struct EndBattleAPI_GetNavVolumeFromAngle final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InAngleRange;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndBattleCompareDistanceType                 InType;                                            // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InGroup;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InBehind;                                          // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AEndNavModifierVolume*                  ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetNavVolumeFromAngle) == 0x000008, "Wrong alignment on EndBattleAPI_GetNavVolumeFromAngle");
static_assert(sizeof(EndBattleAPI_GetNavVolumeFromAngle) == 0x000020, "Wrong size on EndBattleAPI_GetNavVolumeFromAngle");
static_assert(offsetof(EndBattleAPI_GetNavVolumeFromAngle, InChara) == 0x000000, "Member 'EndBattleAPI_GetNavVolumeFromAngle::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetNavVolumeFromAngle, InAngleRange) == 0x000008, "Member 'EndBattleAPI_GetNavVolumeFromAngle::InAngleRange' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetNavVolumeFromAngle, InType) == 0x00000C, "Member 'EndBattleAPI_GetNavVolumeFromAngle::InType' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetNavVolumeFromAngle, InGroup) == 0x000010, "Member 'EndBattleAPI_GetNavVolumeFromAngle::InGroup' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetNavVolumeFromAngle, InBehind) == 0x000014, "Member 'EndBattleAPI_GetNavVolumeFromAngle::InBehind' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetNavVolumeFromAngle, ReturnValue) == 0x000018, "Member 'EndBattleAPI_GetNavVolumeFromAngle::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetNavVolumeFromType
// 0x0020 (0x0020 - 0x0000)
struct EndBattleAPI_GetNavVolumeFromType final
{
public:
	class FName                                   InBattleSceneID;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EModifierVolumeType                           InType;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AEndNavModifierVolume*>          ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetNavVolumeFromType) == 0x000008, "Wrong alignment on EndBattleAPI_GetNavVolumeFromType");
static_assert(sizeof(EndBattleAPI_GetNavVolumeFromType) == 0x000020, "Wrong size on EndBattleAPI_GetNavVolumeFromType");
static_assert(offsetof(EndBattleAPI_GetNavVolumeFromType, InBattleSceneID) == 0x000000, "Member 'EndBattleAPI_GetNavVolumeFromType::InBattleSceneID' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetNavVolumeFromType, InType) == 0x000008, "Member 'EndBattleAPI_GetNavVolumeFromType::InType' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetNavVolumeFromType, ReturnValue) == 0x000010, "Member 'EndBattleAPI_GetNavVolumeFromType::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetNearestActor
// 0x0030 (0x0030 - 0x0000)
struct EndBattleAPI_GetNearestActor final
{
public:
	class AActor*                                 outActor;                                          // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 baseActor;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         compareActorList;                                  // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         ignoreActorList;                                   // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetNearestActor) == 0x000008, "Wrong alignment on EndBattleAPI_GetNearestActor");
static_assert(sizeof(EndBattleAPI_GetNearestActor) == 0x000030, "Wrong size on EndBattleAPI_GetNearestActor");
static_assert(offsetof(EndBattleAPI_GetNearestActor, outActor) == 0x000000, "Member 'EndBattleAPI_GetNearestActor::outActor' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetNearestActor, baseActor) == 0x000008, "Member 'EndBattleAPI_GetNearestActor::baseActor' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetNearestActor, compareActorList) == 0x000010, "Member 'EndBattleAPI_GetNearestActor::compareActorList' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetNearestActor, ignoreActorList) == 0x000020, "Member 'EndBattleAPI_GetNearestActor::ignoreActorList' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetNearestCharacter
// 0x0028 (0x0028 - 0x0000)
struct EndBattleAPI_GetNearestCharacter final
{
public:
	struct FVector                                InLocation;                                        // 0x0000(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AEndCharacter*>                  InList;                                            // 0x0010(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class AEndCharacter*                          ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetNearestCharacter) == 0x000008, "Wrong alignment on EndBattleAPI_GetNearestCharacter");
static_assert(sizeof(EndBattleAPI_GetNearestCharacter) == 0x000028, "Wrong size on EndBattleAPI_GetNearestCharacter");
static_assert(offsetof(EndBattleAPI_GetNearestCharacter, InLocation) == 0x000000, "Member 'EndBattleAPI_GetNearestCharacter::InLocation' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetNearestCharacter, InList) == 0x000010, "Member 'EndBattleAPI_GetNearestCharacter::InList' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetNearestCharacter, ReturnValue) == 0x000020, "Member 'EndBattleAPI_GetNearestCharacter::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetNearestOwnVolume
// 0x0020 (0x0020 - 0x0000)
struct EndBattleAPI_GetNearestOwnVolume final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InLocation;                                        // 0x0008(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0014(0x000C)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetNearestOwnVolume) == 0x000008, "Wrong alignment on EndBattleAPI_GetNearestOwnVolume");
static_assert(sizeof(EndBattleAPI_GetNearestOwnVolume) == 0x000020, "Wrong size on EndBattleAPI_GetNearestOwnVolume");
static_assert(offsetof(EndBattleAPI_GetNearestOwnVolume, InChara) == 0x000000, "Member 'EndBattleAPI_GetNearestOwnVolume::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetNearestOwnVolume, InLocation) == 0x000008, "Member 'EndBattleAPI_GetNearestOwnVolume::InLocation' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetNearestOwnVolume, ReturnValue) == 0x000014, "Member 'EndBattleAPI_GetNearestOwnVolume::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetNearestOwnVolumeWithExtent
// 0x0030 (0x0030 - 0x0000)
struct EndBattleAPI_GetNearestOwnVolumeWithExtent final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InLocation;                                        // 0x0008(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InExtent;                                          // 0x0014(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0020(0x000C)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_GetNearestOwnVolumeWithExtent) == 0x000008, "Wrong alignment on EndBattleAPI_GetNearestOwnVolumeWithExtent");
static_assert(sizeof(EndBattleAPI_GetNearestOwnVolumeWithExtent) == 0x000030, "Wrong size on EndBattleAPI_GetNearestOwnVolumeWithExtent");
static_assert(offsetof(EndBattleAPI_GetNearestOwnVolumeWithExtent, InChara) == 0x000000, "Member 'EndBattleAPI_GetNearestOwnVolumeWithExtent::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetNearestOwnVolumeWithExtent, InLocation) == 0x000008, "Member 'EndBattleAPI_GetNearestOwnVolumeWithExtent::InLocation' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetNearestOwnVolumeWithExtent, InExtent) == 0x000014, "Member 'EndBattleAPI_GetNearestOwnVolumeWithExtent::InExtent' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetNearestOwnVolumeWithExtent, ReturnValue) == 0x000020, "Member 'EndBattleAPI_GetNearestOwnVolumeWithExtent::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetNearestPhisics
// 0x0020 (0x0020 - 0x0000)
struct EndBattleAPI_GetNearestPhisics final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InName;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InContain;                                         // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetNearestPhisics) == 0x000008, "Wrong alignment on EndBattleAPI_GetNearestPhisics");
static_assert(sizeof(EndBattleAPI_GetNearestPhisics) == 0x000020, "Wrong size on EndBattleAPI_GetNearestPhisics");
static_assert(offsetof(EndBattleAPI_GetNearestPhisics, InChara) == 0x000000, "Member 'EndBattleAPI_GetNearestPhisics::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetNearestPhisics, InName) == 0x000008, "Member 'EndBattleAPI_GetNearestPhisics::InName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetNearestPhisics, InContain) == 0x000010, "Member 'EndBattleAPI_GetNearestPhisics::InContain' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetNearestPhisics, ReturnValue) == 0x000018, "Member 'EndBattleAPI_GetNearestPhisics::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetNearestPhisicsFromActorName
// 0x0020 (0x0020 - 0x0000)
struct EndBattleAPI_GetNearestPhisicsFromActorName final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InName;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InContain;                                         // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetNearestPhisicsFromActorName) == 0x000008, "Wrong alignment on EndBattleAPI_GetNearestPhisicsFromActorName");
static_assert(sizeof(EndBattleAPI_GetNearestPhisicsFromActorName) == 0x000020, "Wrong size on EndBattleAPI_GetNearestPhisicsFromActorName");
static_assert(offsetof(EndBattleAPI_GetNearestPhisicsFromActorName, InChara) == 0x000000, "Member 'EndBattleAPI_GetNearestPhisicsFromActorName::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetNearestPhisicsFromActorName, InName) == 0x000008, "Member 'EndBattleAPI_GetNearestPhisicsFromActorName::InName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetNearestPhisicsFromActorName, InContain) == 0x000010, "Member 'EndBattleAPI_GetNearestPhisicsFromActorName::InContain' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetNearestPhisicsFromActorName, ReturnValue) == 0x000018, "Member 'EndBattleAPI_GetNearestPhisicsFromActorName::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetNearestPhisicsInVolume
// 0x0028 (0x0028 - 0x0000)
struct EndBattleAPI_GetNearestPhisicsInVolume final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InVolumeName;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InName;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InContain;                                         // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InPossetion;                                       // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetNearestPhisicsInVolume) == 0x000008, "Wrong alignment on EndBattleAPI_GetNearestPhisicsInVolume");
static_assert(sizeof(EndBattleAPI_GetNearestPhisicsInVolume) == 0x000028, "Wrong size on EndBattleAPI_GetNearestPhisicsInVolume");
static_assert(offsetof(EndBattleAPI_GetNearestPhisicsInVolume, InChara) == 0x000000, "Member 'EndBattleAPI_GetNearestPhisicsInVolume::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetNearestPhisicsInVolume, InVolumeName) == 0x000008, "Member 'EndBattleAPI_GetNearestPhisicsInVolume::InVolumeName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetNearestPhisicsInVolume, InName) == 0x000010, "Member 'EndBattleAPI_GetNearestPhisicsInVolume::InName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetNearestPhisicsInVolume, InContain) == 0x000018, "Member 'EndBattleAPI_GetNearestPhisicsInVolume::InContain' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetNearestPhisicsInVolume, InPossetion) == 0x000019, "Member 'EndBattleAPI_GetNearestPhisicsInVolume::InPossetion' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetNearestPhisicsInVolume, ReturnValue) == 0x000020, "Member 'EndBattleAPI_GetNearestPhisicsInVolume::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetNearestPhysicsInVolumeFromLocation
// 0x0030 (0x0030 - 0x0000)
struct EndBattleAPI_GetNearestPhysicsInVolumeFromLocation final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InVolumeName;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LocationName;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InName;                                            // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InContain;                                         // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InPossetion;                                       // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InCanPosettion;                                    // 0x0022(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23[0x5];                                       // 0x0023(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetNearestPhysicsInVolumeFromLocation) == 0x000008, "Wrong alignment on EndBattleAPI_GetNearestPhysicsInVolumeFromLocation");
static_assert(sizeof(EndBattleAPI_GetNearestPhysicsInVolumeFromLocation) == 0x000030, "Wrong size on EndBattleAPI_GetNearestPhysicsInVolumeFromLocation");
static_assert(offsetof(EndBattleAPI_GetNearestPhysicsInVolumeFromLocation, InChara) == 0x000000, "Member 'EndBattleAPI_GetNearestPhysicsInVolumeFromLocation::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetNearestPhysicsInVolumeFromLocation, InVolumeName) == 0x000008, "Member 'EndBattleAPI_GetNearestPhysicsInVolumeFromLocation::InVolumeName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetNearestPhysicsInVolumeFromLocation, LocationName) == 0x000010, "Member 'EndBattleAPI_GetNearestPhysicsInVolumeFromLocation::LocationName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetNearestPhysicsInVolumeFromLocation, InName) == 0x000018, "Member 'EndBattleAPI_GetNearestPhysicsInVolumeFromLocation::InName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetNearestPhysicsInVolumeFromLocation, InContain) == 0x000020, "Member 'EndBattleAPI_GetNearestPhysicsInVolumeFromLocation::InContain' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetNearestPhysicsInVolumeFromLocation, InPossetion) == 0x000021, "Member 'EndBattleAPI_GetNearestPhysicsInVolumeFromLocation::InPossetion' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetNearestPhysicsInVolumeFromLocation, InCanPosettion) == 0x000022, "Member 'EndBattleAPI_GetNearestPhysicsInVolumeFromLocation::InCanPosettion' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetNearestPhysicsInVolumeFromLocation, ReturnValue) == 0x000028, "Member 'EndBattleAPI_GetNearestPhysicsInVolumeFromLocation::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetNearestRangePartyCharacter
// 0x0018 (0x0018 - 0x0000)
struct EndBattleAPI_GetNearestRangePartyCharacter final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Range;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ZVisible;                                          // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AEndCharacter*                          ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetNearestRangePartyCharacter) == 0x000008, "Wrong alignment on EndBattleAPI_GetNearestRangePartyCharacter");
static_assert(sizeof(EndBattleAPI_GetNearestRangePartyCharacter) == 0x000018, "Wrong size on EndBattleAPI_GetNearestRangePartyCharacter");
static_assert(offsetof(EndBattleAPI_GetNearestRangePartyCharacter, InChara) == 0x000000, "Member 'EndBattleAPI_GetNearestRangePartyCharacter::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetNearestRangePartyCharacter, Range) == 0x000008, "Member 'EndBattleAPI_GetNearestRangePartyCharacter::Range' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetNearestRangePartyCharacter, ZVisible) == 0x00000C, "Member 'EndBattleAPI_GetNearestRangePartyCharacter::ZVisible' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetNearestRangePartyCharacter, ReturnValue) == 0x000010, "Member 'EndBattleAPI_GetNearestRangePartyCharacter::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetObstractDistance
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_GetObstractDistance final
{
public:
	class AEndCharacter*                          chara;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_GetObstractDistance) == 0x000008, "Wrong alignment on EndBattleAPI_GetObstractDistance");
static_assert(sizeof(EndBattleAPI_GetObstractDistance) == 0x000010, "Wrong size on EndBattleAPI_GetObstractDistance");
static_assert(offsetof(EndBattleAPI_GetObstractDistance, chara) == 0x000000, "Member 'EndBattleAPI_GetObstractDistance::chara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetObstractDistance, ReturnValue) == 0x000008, "Member 'EndBattleAPI_GetObstractDistance::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetObstractDistanceAvarage
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_GetObstractDistanceAvarage final
{
public:
	class AEndCharacter*                          chara;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_GetObstractDistanceAvarage) == 0x000008, "Wrong alignment on EndBattleAPI_GetObstractDistanceAvarage");
static_assert(sizeof(EndBattleAPI_GetObstractDistanceAvarage) == 0x000010, "Wrong size on EndBattleAPI_GetObstractDistanceAvarage");
static_assert(offsetof(EndBattleAPI_GetObstractDistanceAvarage, chara) == 0x000000, "Member 'EndBattleAPI_GetObstractDistanceAvarage::chara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetObstractDistanceAvarage, ReturnValue) == 0x000008, "Member 'EndBattleAPI_GetObstractDistanceAvarage::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetObstractDistanceFromAngle
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_GetObstractDistanceFromAngle final
{
public:
	class AEndCharacter*                          chara;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetObstractDistanceFromAngle) == 0x000008, "Wrong alignment on EndBattleAPI_GetObstractDistanceFromAngle");
static_assert(sizeof(EndBattleAPI_GetObstractDistanceFromAngle) == 0x000010, "Wrong size on EndBattleAPI_GetObstractDistanceFromAngle");
static_assert(offsetof(EndBattleAPI_GetObstractDistanceFromAngle, chara) == 0x000000, "Member 'EndBattleAPI_GetObstractDistanceFromAngle::chara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetObstractDistanceFromAngle, Angle) == 0x000008, "Member 'EndBattleAPI_GetObstractDistanceFromAngle::Angle' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetObstractDistanceFromAngle, ReturnValue) == 0x00000C, "Member 'EndBattleAPI_GetObstractDistanceFromAngle::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetOffsetTransform
// 0x0070 (0x0070 - 0x0000)
struct EndBattleAPI_GetOffsetTransform final
{
public:
	struct FTransform                             Transform;                                         // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Offset;                                            // 0x0030(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGetOffsetTransform                           RotationType;                                      // 0x003C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ReturnValue;                                       // 0x0040(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetOffsetTransform) == 0x000010, "Wrong alignment on EndBattleAPI_GetOffsetTransform");
static_assert(sizeof(EndBattleAPI_GetOffsetTransform) == 0x000070, "Wrong size on EndBattleAPI_GetOffsetTransform");
static_assert(offsetof(EndBattleAPI_GetOffsetTransform, Transform) == 0x000000, "Member 'EndBattleAPI_GetOffsetTransform::Transform' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetOffsetTransform, Offset) == 0x000030, "Member 'EndBattleAPI_GetOffsetTransform::Offset' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetOffsetTransform, RotationType) == 0x00003C, "Member 'EndBattleAPI_GetOffsetTransform::RotationType' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetOffsetTransform, ReturnValue) == 0x000040, "Member 'EndBattleAPI_GetOffsetTransform::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetOverlapVolumes
// 0x0018 (0x0018 - 0x0000)
struct EndBattleAPI_GetOverlapVolumes final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AEndNavModifierVolume*>          ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetOverlapVolumes) == 0x000008, "Wrong alignment on EndBattleAPI_GetOverlapVolumes");
static_assert(sizeof(EndBattleAPI_GetOverlapVolumes) == 0x000018, "Wrong size on EndBattleAPI_GetOverlapVolumes");
static_assert(offsetof(EndBattleAPI_GetOverlapVolumes, InChara) == 0x000000, "Member 'EndBattleAPI_GetOverlapVolumes::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetOverlapVolumes, ReturnValue) == 0x000008, "Member 'EndBattleAPI_GetOverlapVolumes::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetPartyMembersIgnoreDead
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_GetPartyMembersIgnoreDead final
{
public:
	TArray<class AEndCharacter*>                  ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetPartyMembersIgnoreDead) == 0x000008, "Wrong alignment on EndBattleAPI_GetPartyMembersIgnoreDead");
static_assert(sizeof(EndBattleAPI_GetPartyMembersIgnoreDead) == 0x000010, "Wrong size on EndBattleAPI_GetPartyMembersIgnoreDead");
static_assert(offsetof(EndBattleAPI_GetPartyMembersIgnoreDead, ReturnValue) == 0x000000, "Member 'EndBattleAPI_GetPartyMembersIgnoreDead::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetPhisics
// 0x0020 (0x0020 - 0x0000)
struct EndBattleAPI_GetPhisics final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InContain;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetPhisics) == 0x000008, "Wrong alignment on EndBattleAPI_GetPhisics");
static_assert(sizeof(EndBattleAPI_GetPhisics) == 0x000020, "Wrong size on EndBattleAPI_GetPhisics");
static_assert(offsetof(EndBattleAPI_GetPhisics, InName) == 0x000000, "Member 'EndBattleAPI_GetPhisics::InName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetPhisics, InContain) == 0x000008, "Member 'EndBattleAPI_GetPhisics::InContain' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetPhisics, ReturnValue) == 0x000010, "Member 'EndBattleAPI_GetPhisics::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetPhisicsFromActorName
// 0x0020 (0x0020 - 0x0000)
struct EndBattleAPI_GetPhisicsFromActorName final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InContain;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetPhisicsFromActorName) == 0x000008, "Wrong alignment on EndBattleAPI_GetPhisicsFromActorName");
static_assert(sizeof(EndBattleAPI_GetPhisicsFromActorName) == 0x000020, "Wrong size on EndBattleAPI_GetPhisicsFromActorName");
static_assert(offsetof(EndBattleAPI_GetPhisicsFromActorName, InName) == 0x000000, "Member 'EndBattleAPI_GetPhisicsFromActorName::InName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetPhisicsFromActorName, InContain) == 0x000008, "Member 'EndBattleAPI_GetPhisicsFromActorName::InContain' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetPhisicsFromActorName, ReturnValue) == 0x000010, "Member 'EndBattleAPI_GetPhisicsFromActorName::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetPhisicsInVolume
// 0x0028 (0x0028 - 0x0000)
struct EndBattleAPI_GetPhisicsInVolume final
{
public:
	class FName                                   InVolumeName;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InName;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InContain;                                         // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InPossetion;                                       // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetPhisicsInVolume) == 0x000008, "Wrong alignment on EndBattleAPI_GetPhisicsInVolume");
static_assert(sizeof(EndBattleAPI_GetPhisicsInVolume) == 0x000028, "Wrong size on EndBattleAPI_GetPhisicsInVolume");
static_assert(offsetof(EndBattleAPI_GetPhisicsInVolume, InVolumeName) == 0x000000, "Member 'EndBattleAPI_GetPhisicsInVolume::InVolumeName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetPhisicsInVolume, InName) == 0x000008, "Member 'EndBattleAPI_GetPhisicsInVolume::InName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetPhisicsInVolume, InContain) == 0x000010, "Member 'EndBattleAPI_GetPhisicsInVolume::InContain' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetPhisicsInVolume, InPossetion) == 0x000011, "Member 'EndBattleAPI_GetPhisicsInVolume::InPossetion' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetPhisicsInVolume, ReturnValue) == 0x000018, "Member 'EndBattleAPI_GetPhisicsInVolume::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetPhysicsDefense
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_GetPhysicsDefense final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_GetPhysicsDefense) == 0x000008, "Wrong alignment on EndBattleAPI_GetPhysicsDefense");
static_assert(sizeof(EndBattleAPI_GetPhysicsDefense) == 0x000010, "Wrong size on EndBattleAPI_GetPhysicsDefense");
static_assert(offsetof(EndBattleAPI_GetPhysicsDefense, InChara) == 0x000000, "Member 'EndBattleAPI_GetPhysicsDefense::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetPhysicsDefense, ReturnValue) == 0x000008, "Member 'EndBattleAPI_GetPhysicsDefense::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetPhysicsFromLocation
// 0x0018 (0x0018 - 0x0000)
struct EndBattleAPI_GetPhysicsFromLocation final
{
public:
	class FName                                   LocationName;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AEndEnvironmentPhysicsStaticMeshActor*> ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetPhysicsFromLocation) == 0x000008, "Wrong alignment on EndBattleAPI_GetPhysicsFromLocation");
static_assert(sizeof(EndBattleAPI_GetPhysicsFromLocation) == 0x000018, "Wrong size on EndBattleAPI_GetPhysicsFromLocation");
static_assert(offsetof(EndBattleAPI_GetPhysicsFromLocation, LocationName) == 0x000000, "Member 'EndBattleAPI_GetPhysicsFromLocation::LocationName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetPhysicsFromLocation, ReturnValue) == 0x000008, "Member 'EndBattleAPI_GetPhysicsFromLocation::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetPhysicsInVolumeFromLocation
// 0x0030 (0x0030 - 0x0000)
struct EndBattleAPI_GetPhysicsInVolumeFromLocation final
{
public:
	class FName                                   InVolumeName;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LocationName;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InName;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InContain;                                         // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InPossetion;                                       // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InCanPosettion;                                    // 0x001A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B[0x5];                                       // 0x001B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetPhysicsInVolumeFromLocation) == 0x000008, "Wrong alignment on EndBattleAPI_GetPhysicsInVolumeFromLocation");
static_assert(sizeof(EndBattleAPI_GetPhysicsInVolumeFromLocation) == 0x000030, "Wrong size on EndBattleAPI_GetPhysicsInVolumeFromLocation");
static_assert(offsetof(EndBattleAPI_GetPhysicsInVolumeFromLocation, InVolumeName) == 0x000000, "Member 'EndBattleAPI_GetPhysicsInVolumeFromLocation::InVolumeName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetPhysicsInVolumeFromLocation, LocationName) == 0x000008, "Member 'EndBattleAPI_GetPhysicsInVolumeFromLocation::LocationName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetPhysicsInVolumeFromLocation, InName) == 0x000010, "Member 'EndBattleAPI_GetPhysicsInVolumeFromLocation::InName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetPhysicsInVolumeFromLocation, InContain) == 0x000018, "Member 'EndBattleAPI_GetPhysicsInVolumeFromLocation::InContain' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetPhysicsInVolumeFromLocation, InPossetion) == 0x000019, "Member 'EndBattleAPI_GetPhysicsInVolumeFromLocation::InPossetion' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetPhysicsInVolumeFromLocation, InCanPosettion) == 0x00001A, "Member 'EndBattleAPI_GetPhysicsInVolumeFromLocation::InCanPosettion' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetPhysicsInVolumeFromLocation, ReturnValue) == 0x000020, "Member 'EndBattleAPI_GetPhysicsInVolumeFromLocation::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetPlayerCharacter
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_GetPlayerCharacter final
{
public:
	EPlayerType                                   Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AEndCharacter*                          ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetPlayerCharacter) == 0x000008, "Wrong alignment on EndBattleAPI_GetPlayerCharacter");
static_assert(sizeof(EndBattleAPI_GetPlayerCharacter) == 0x000010, "Wrong size on EndBattleAPI_GetPlayerCharacter");
static_assert(offsetof(EndBattleAPI_GetPlayerCharacter, Type) == 0x000000, "Member 'EndBattleAPI_GetPlayerCharacter::Type' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetPlayerCharacter, ReturnValue) == 0x000008, "Member 'EndBattleAPI_GetPlayerCharacter::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetPlayerType
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_GetPlayerType final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlayerType                                   ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_GetPlayerType) == 0x000008, "Wrong alignment on EndBattleAPI_GetPlayerType");
static_assert(sizeof(EndBattleAPI_GetPlayerType) == 0x000010, "Wrong size on EndBattleAPI_GetPlayerType");
static_assert(offsetof(EndBattleAPI_GetPlayerType, InChara) == 0x000000, "Member 'EndBattleAPI_GetPlayerType::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetPlayerType, ReturnValue) == 0x000008, "Member 'EndBattleAPI_GetPlayerType::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetPlayingExtraActionSequenceNames
// 0x0018 (0x0018 - 0x0000)
struct EndBattleAPI_GetPlayingExtraActionSequenceNames final
{
public:
	TArray<class FName>                           outNames;                                          // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	class AEndCharacter*                          InChara;                                           // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetPlayingExtraActionSequenceNames) == 0x000008, "Wrong alignment on EndBattleAPI_GetPlayingExtraActionSequenceNames");
static_assert(sizeof(EndBattleAPI_GetPlayingExtraActionSequenceNames) == 0x000018, "Wrong size on EndBattleAPI_GetPlayingExtraActionSequenceNames");
static_assert(offsetof(EndBattleAPI_GetPlayingExtraActionSequenceNames, outNames) == 0x000000, "Member 'EndBattleAPI_GetPlayingExtraActionSequenceNames::outNames' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetPlayingExtraActionSequenceNames, InChara) == 0x000010, "Member 'EndBattleAPI_GetPlayingExtraActionSequenceNames::InChara' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetRaceID
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_GetRaceID final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_GetRaceID) == 0x000008, "Wrong alignment on EndBattleAPI_GetRaceID");
static_assert(sizeof(EndBattleAPI_GetRaceID) == 0x000010, "Wrong size on EndBattleAPI_GetRaceID");
static_assert(offsetof(EndBattleAPI_GetRaceID, InChara) == 0x000000, "Member 'EndBattleAPI_GetRaceID::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetRaceID, ReturnValue) == 0x000008, "Member 'EndBattleAPI_GetRaceID::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetRaceName
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_GetRaceName final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetRaceName) == 0x000008, "Wrong alignment on EndBattleAPI_GetRaceName");
static_assert(sizeof(EndBattleAPI_GetRaceName) == 0x000010, "Wrong size on EndBattleAPI_GetRaceName");
static_assert(offsetof(EndBattleAPI_GetRaceName, InChara) == 0x000000, "Member 'EndBattleAPI_GetRaceName::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetRaceName, ReturnValue) == 0x000008, "Member 'EndBattleAPI_GetRaceName::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetReplaceDamageSourceID
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_GetReplaceDamageSourceID final
{
public:
	class FName                                   InAbilityName;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetReplaceDamageSourceID) == 0x000004, "Wrong alignment on EndBattleAPI_GetReplaceDamageSourceID");
static_assert(sizeof(EndBattleAPI_GetReplaceDamageSourceID) == 0x000010, "Wrong size on EndBattleAPI_GetReplaceDamageSourceID");
static_assert(offsetof(EndBattleAPI_GetReplaceDamageSourceID, InAbilityName) == 0x000000, "Member 'EndBattleAPI_GetReplaceDamageSourceID::InAbilityName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetReplaceDamageSourceID, ReturnValue) == 0x000008, "Member 'EndBattleAPI_GetReplaceDamageSourceID::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetResistanceElement
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_GetResistanceElement final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InType;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetResistanceElement) == 0x000008, "Wrong alignment on EndBattleAPI_GetResistanceElement");
static_assert(sizeof(EndBattleAPI_GetResistanceElement) == 0x000010, "Wrong size on EndBattleAPI_GetResistanceElement");
static_assert(offsetof(EndBattleAPI_GetResistanceElement, InChara) == 0x000000, "Member 'EndBattleAPI_GetResistanceElement::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetResistanceElement, InType) == 0x000008, "Member 'EndBattleAPI_GetResistanceElement::InType' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetResistanceElement, ReturnValue) == 0x00000C, "Member 'EndBattleAPI_GetResistanceElement::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetSocketTransform
// 0x0040 (0x0040 - 0x0000)
struct EndBattleAPI_GetSocketTransform final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InSocketName;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             ReturnValue;                                       // 0x0010(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetSocketTransform) == 0x000010, "Wrong alignment on EndBattleAPI_GetSocketTransform");
static_assert(sizeof(EndBattleAPI_GetSocketTransform) == 0x000040, "Wrong size on EndBattleAPI_GetSocketTransform");
static_assert(offsetof(EndBattleAPI_GetSocketTransform, InChara) == 0x000000, "Member 'EndBattleAPI_GetSocketTransform::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetSocketTransform, InSocketName) == 0x000008, "Member 'EndBattleAPI_GetSocketTransform::InSocketName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetSocketTransform, ReturnValue) == 0x000010, "Member 'EndBattleAPI_GetSocketTransform::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetSpendATBBarTotal
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_GetSpendATBBarTotal final
{
public:
	class AEndCharacter*                          EndCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_GetSpendATBBarTotal) == 0x000008, "Wrong alignment on EndBattleAPI_GetSpendATBBarTotal");
static_assert(sizeof(EndBattleAPI_GetSpendATBBarTotal) == 0x000010, "Wrong size on EndBattleAPI_GetSpendATBBarTotal");
static_assert(offsetof(EndBattleAPI_GetSpendATBBarTotal, EndCharacter) == 0x000000, "Member 'EndBattleAPI_GetSpendATBBarTotal::EndCharacter' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetSpendATBBarTotal, ReturnValue) == 0x000008, "Member 'EndBattleAPI_GetSpendATBBarTotal::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetStoryFlagConditionNum
// 0x0020 (0x0020 - 0x0000)
struct EndBattleAPI_GetStoryFlagConditionNum final
{
public:
	TArray<class FName>                           storyFlagNames;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          Condition;                                         // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         initializeNum;                                     // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_GetStoryFlagConditionNum) == 0x000008, "Wrong alignment on EndBattleAPI_GetStoryFlagConditionNum");
static_assert(sizeof(EndBattleAPI_GetStoryFlagConditionNum) == 0x000020, "Wrong size on EndBattleAPI_GetStoryFlagConditionNum");
static_assert(offsetof(EndBattleAPI_GetStoryFlagConditionNum, storyFlagNames) == 0x000000, "Member 'EndBattleAPI_GetStoryFlagConditionNum::storyFlagNames' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetStoryFlagConditionNum, Condition) == 0x000010, "Member 'EndBattleAPI_GetStoryFlagConditionNum::Condition' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetStoryFlagConditionNum, initializeNum) == 0x000014, "Member 'EndBattleAPI_GetStoryFlagConditionNum::initializeNum' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetStoryFlagConditionNum, ReturnValue) == 0x000018, "Member 'EndBattleAPI_GetStoryFlagConditionNum::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetSummom
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_GetSummom final
{
public:
	EEndBattleSummonType                          Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AEndCharacter*                          ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetSummom) == 0x000008, "Wrong alignment on EndBattleAPI_GetSummom");
static_assert(sizeof(EndBattleAPI_GetSummom) == 0x000010, "Wrong size on EndBattleAPI_GetSummom");
static_assert(offsetof(EndBattleAPI_GetSummom, Type) == 0x000000, "Member 'EndBattleAPI_GetSummom::Type' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetSummom, ReturnValue) == 0x000008, "Member 'EndBattleAPI_GetSummom::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetSummonAvilableTime
// 0x0004 (0x0004 - 0x0000)
struct EndBattleAPI_GetSummonAvilableTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetSummonAvilableTime) == 0x000004, "Wrong alignment on EndBattleAPI_GetSummonAvilableTime");
static_assert(sizeof(EndBattleAPI_GetSummonAvilableTime) == 0x000004, "Wrong size on EndBattleAPI_GetSummonAvilableTime");
static_assert(offsetof(EndBattleAPI_GetSummonAvilableTime, ReturnValue) == 0x000000, "Member 'EndBattleAPI_GetSummonAvilableTime::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetSummonMaster
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_GetSummonMaster final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AEndCharacter*                          ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetSummonMaster) == 0x000008, "Wrong alignment on EndBattleAPI_GetSummonMaster");
static_assert(sizeof(EndBattleAPI_GetSummonMaster) == 0x000010, "Wrong size on EndBattleAPI_GetSummonMaster");
static_assert(offsetof(EndBattleAPI_GetSummonMaster, InChara) == 0x000000, "Member 'EndBattleAPI_GetSummonMaster::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetSummonMaster, ReturnValue) == 0x000008, "Member 'EndBattleAPI_GetSummonMaster::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetSyncActionID
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_GetSyncActionID final
{
public:
	class AEndCharacter*                          chara;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetSyncActionID) == 0x000008, "Wrong alignment on EndBattleAPI_GetSyncActionID");
static_assert(sizeof(EndBattleAPI_GetSyncActionID) == 0x000010, "Wrong size on EndBattleAPI_GetSyncActionID");
static_assert(offsetof(EndBattleAPI_GetSyncActionID, chara) == 0x000000, "Member 'EndBattleAPI_GetSyncActionID::chara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetSyncActionID, ReturnValue) == 0x000008, "Member 'EndBattleAPI_GetSyncActionID::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetTakeActionCount
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_GetTakeActionCount final
{
public:
	class AEndCharacter*                          InCharacter;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_GetTakeActionCount) == 0x000008, "Wrong alignment on EndBattleAPI_GetTakeActionCount");
static_assert(sizeof(EndBattleAPI_GetTakeActionCount) == 0x000010, "Wrong size on EndBattleAPI_GetTakeActionCount");
static_assert(offsetof(EndBattleAPI_GetTakeActionCount, InCharacter) == 0x000000, "Member 'EndBattleAPI_GetTakeActionCount::InCharacter' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetTakeActionCount, ReturnValue) == 0x000008, "Member 'EndBattleAPI_GetTakeActionCount::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetTakeRequestActionCount
// 0x0018 (0x0018 - 0x0000)
struct EndBattleAPI_GetTakeRequestActionCount final
{
public:
	class AEndCharacter*                          InCharacter;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InName;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InIgnoreBind;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetTakeRequestActionCount) == 0x000008, "Wrong alignment on EndBattleAPI_GetTakeRequestActionCount");
static_assert(sizeof(EndBattleAPI_GetTakeRequestActionCount) == 0x000018, "Wrong size on EndBattleAPI_GetTakeRequestActionCount");
static_assert(offsetof(EndBattleAPI_GetTakeRequestActionCount, InCharacter) == 0x000000, "Member 'EndBattleAPI_GetTakeRequestActionCount::InCharacter' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetTakeRequestActionCount, InName) == 0x000008, "Member 'EndBattleAPI_GetTakeRequestActionCount::InName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetTakeRequestActionCount, InIgnoreBind) == 0x000010, "Member 'EndBattleAPI_GetTakeRequestActionCount::InIgnoreBind' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetTakeRequestActionCount, ReturnValue) == 0x000014, "Member 'EndBattleAPI_GetTakeRequestActionCount::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetTakeRequestActionCountContainedName
// 0x0018 (0x0018 - 0x0000)
struct EndBattleAPI_GetTakeRequestActionCountContainedName final
{
public:
	class AEndCharacter*                          InCharacter;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InName;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InIgnoreBind;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetTakeRequestActionCountContainedName) == 0x000008, "Wrong alignment on EndBattleAPI_GetTakeRequestActionCountContainedName");
static_assert(sizeof(EndBattleAPI_GetTakeRequestActionCountContainedName) == 0x000018, "Wrong size on EndBattleAPI_GetTakeRequestActionCountContainedName");
static_assert(offsetof(EndBattleAPI_GetTakeRequestActionCountContainedName, InCharacter) == 0x000000, "Member 'EndBattleAPI_GetTakeRequestActionCountContainedName::InCharacter' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetTakeRequestActionCountContainedName, InName) == 0x000008, "Member 'EndBattleAPI_GetTakeRequestActionCountContainedName::InName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetTakeRequestActionCountContainedName, InIgnoreBind) == 0x000010, "Member 'EndBattleAPI_GetTakeRequestActionCountContainedName::InIgnoreBind' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetTakeRequestActionCountContainedName, ReturnValue) == 0x000014, "Member 'EndBattleAPI_GetTakeRequestActionCountContainedName::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetTakeRequestActionCountContainedNameFromID
// 0x0028 (0x0028 - 0x0000)
struct EndBattleAPI_GetTakeRequestActionCountContainedNameFromID final
{
public:
	class AEndCharacter*                          InCharacter;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InName;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Upper;                                             // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Lower;                                             // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InIgnoreBind;                                      // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0024(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetTakeRequestActionCountContainedNameFromID) == 0x000008, "Wrong alignment on EndBattleAPI_GetTakeRequestActionCountContainedNameFromID");
static_assert(sizeof(EndBattleAPI_GetTakeRequestActionCountContainedNameFromID) == 0x000028, "Wrong size on EndBattleAPI_GetTakeRequestActionCountContainedNameFromID");
static_assert(offsetof(EndBattleAPI_GetTakeRequestActionCountContainedNameFromID, InCharacter) == 0x000000, "Member 'EndBattleAPI_GetTakeRequestActionCountContainedNameFromID::InCharacter' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetTakeRequestActionCountContainedNameFromID, InName) == 0x000008, "Member 'EndBattleAPI_GetTakeRequestActionCountContainedNameFromID::InName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetTakeRequestActionCountContainedNameFromID, Upper) == 0x000010, "Member 'EndBattleAPI_GetTakeRequestActionCountContainedNameFromID::Upper' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetTakeRequestActionCountContainedNameFromID, Lower) == 0x000018, "Member 'EndBattleAPI_GetTakeRequestActionCountContainedNameFromID::Lower' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetTakeRequestActionCountContainedNameFromID, InIgnoreBind) == 0x000020, "Member 'EndBattleAPI_GetTakeRequestActionCountContainedNameFromID::InIgnoreBind' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetTakeRequestActionCountContainedNameFromID, ReturnValue) == 0x000024, "Member 'EndBattleAPI_GetTakeRequestActionCountContainedNameFromID::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetTotalWaveCount
// 0x000C (0x000C - 0x0000)
struct EndBattleAPI_GetTotalWaveCount final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetTotalWaveCount) == 0x000004, "Wrong alignment on EndBattleAPI_GetTotalWaveCount");
static_assert(sizeof(EndBattleAPI_GetTotalWaveCount) == 0x00000C, "Wrong size on EndBattleAPI_GetTotalWaveCount");
static_assert(offsetof(EndBattleAPI_GetTotalWaveCount, InName) == 0x000000, "Member 'EndBattleAPI_GetTotalWaveCount::InName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetTotalWaveCount, ReturnValue) == 0x000008, "Member 'EndBattleAPI_GetTotalWaveCount::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetVectorRange
// 0x0024 (0x0024 - 0x0000)
struct EndBattleAPI_GetVectorRange final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Z;                                                 // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IgnoreX;                                           // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IgnoreY;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IgnoreZ;                                           // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0018(0x000C)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetVectorRange) == 0x000004, "Wrong alignment on EndBattleAPI_GetVectorRange");
static_assert(sizeof(EndBattleAPI_GetVectorRange) == 0x000024, "Wrong size on EndBattleAPI_GetVectorRange");
static_assert(offsetof(EndBattleAPI_GetVectorRange, X) == 0x000000, "Member 'EndBattleAPI_GetVectorRange::X' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetVectorRange, Y) == 0x000004, "Member 'EndBattleAPI_GetVectorRange::Y' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetVectorRange, Z) == 0x000008, "Member 'EndBattleAPI_GetVectorRange::Z' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetVectorRange, IgnoreX) == 0x00000C, "Member 'EndBattleAPI_GetVectorRange::IgnoreX' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetVectorRange, IgnoreY) == 0x000010, "Member 'EndBattleAPI_GetVectorRange::IgnoreY' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetVectorRange, IgnoreZ) == 0x000014, "Member 'EndBattleAPI_GetVectorRange::IgnoreZ' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetVectorRange, ReturnValue) == 0x000018, "Member 'EndBattleAPI_GetVectorRange::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetWaveCount
// 0x000C (0x000C - 0x0000)
struct EndBattleAPI_GetWaveCount final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetWaveCount) == 0x000004, "Wrong alignment on EndBattleAPI_GetWaveCount");
static_assert(sizeof(EndBattleAPI_GetWaveCount) == 0x00000C, "Wrong size on EndBattleAPI_GetWaveCount");
static_assert(offsetof(EndBattleAPI_GetWaveCount, InName) == 0x000000, "Member 'EndBattleAPI_GetWaveCount::InName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetWaveCount, ReturnValue) == 0x000008, "Member 'EndBattleAPI_GetWaveCount::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.GetWorldLocationAngle
// 0x001C (0x001C - 0x0000)
struct EndBattleAPI_GetWorldLocationAngle final
{
public:
	struct FVector                                BaseLocation;                                      // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetLocation;                                    // 0x000C(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_GetWorldLocationAngle) == 0x000004, "Wrong alignment on EndBattleAPI_GetWorldLocationAngle");
static_assert(sizeof(EndBattleAPI_GetWorldLocationAngle) == 0x00001C, "Wrong size on EndBattleAPI_GetWorldLocationAngle");
static_assert(offsetof(EndBattleAPI_GetWorldLocationAngle, BaseLocation) == 0x000000, "Member 'EndBattleAPI_GetWorldLocationAngle::BaseLocation' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetWorldLocationAngle, TargetLocation) == 0x00000C, "Member 'EndBattleAPI_GetWorldLocationAngle::TargetLocation' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_GetWorldLocationAngle, ReturnValue) == 0x000018, "Member 'EndBattleAPI_GetWorldLocationAngle::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.HasAbilityElement
// 0x000C (0x000C - 0x0000)
struct EndBattleAPI_HasAbilityElement final
{
public:
	class FName                                   InAbilityName;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndBattleAttributeType                       InType;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_HasAbilityElement) == 0x000004, "Wrong alignment on EndBattleAPI_HasAbilityElement");
static_assert(sizeof(EndBattleAPI_HasAbilityElement) == 0x00000C, "Wrong size on EndBattleAPI_HasAbilityElement");
static_assert(offsetof(EndBattleAPI_HasAbilityElement, InAbilityName) == 0x000000, "Member 'EndBattleAPI_HasAbilityElement::InAbilityName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_HasAbilityElement, InType) == 0x000008, "Member 'EndBattleAPI_HasAbilityElement::InType' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_HasAbilityElement, ReturnValue) == 0x000009, "Member 'EndBattleAPI_HasAbilityElement::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.HasDamageSource
// 0x0018 (0x0018 - 0x0000)
struct EndBattleAPI_HasDamageSource final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InDamageSourceID;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_HasDamageSource) == 0x000008, "Wrong alignment on EndBattleAPI_HasDamageSource");
static_assert(sizeof(EndBattleAPI_HasDamageSource) == 0x000018, "Wrong size on EndBattleAPI_HasDamageSource");
static_assert(offsetof(EndBattleAPI_HasDamageSource, InChara) == 0x000000, "Member 'EndBattleAPI_HasDamageSource::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_HasDamageSource, InDamageSourceID) == 0x000008, "Member 'EndBattleAPI_HasDamageSource::InDamageSourceID' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_HasDamageSource, ReturnValue) == 0x000010, "Member 'EndBattleAPI_HasDamageSource::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.HasSpecialStatusChangeType
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_HasSpecialStatusChangeType final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndBattleSpecialStatusChangeType             InType;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_HasSpecialStatusChangeType) == 0x000008, "Wrong alignment on EndBattleAPI_HasSpecialStatusChangeType");
static_assert(sizeof(EndBattleAPI_HasSpecialStatusChangeType) == 0x000010, "Wrong size on EndBattleAPI_HasSpecialStatusChangeType");
static_assert(offsetof(EndBattleAPI_HasSpecialStatusChangeType, InChara) == 0x000000, "Member 'EndBattleAPI_HasSpecialStatusChangeType::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_HasSpecialStatusChangeType, InType) == 0x000008, "Member 'EndBattleAPI_HasSpecialStatusChangeType::InType' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_HasSpecialStatusChangeType, ReturnValue) == 0x000009, "Member 'EndBattleAPI_HasSpecialStatusChangeType::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.HasStatusChange
// 0x0003 (0x0003 - 0x0000)
struct EndBattleAPI_HasStatusChange final
{
public:
	EPlayerType                                   PlayerType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndBattleStatusChangeType                    statusTypeype;                                     // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_HasStatusChange) == 0x000001, "Wrong alignment on EndBattleAPI_HasStatusChange");
static_assert(sizeof(EndBattleAPI_HasStatusChange) == 0x000003, "Wrong size on EndBattleAPI_HasStatusChange");
static_assert(offsetof(EndBattleAPI_HasStatusChange, PlayerType) == 0x000000, "Member 'EndBattleAPI_HasStatusChange::PlayerType' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_HasStatusChange, statusTypeype) == 0x000001, "Member 'EndBattleAPI_HasStatusChange::statusTypeype' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_HasStatusChange, ReturnValue) == 0x000002, "Member 'EndBattleAPI_HasStatusChange::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.HasStatusChangeFromChara
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_HasStatusChangeFromChara final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndBattleStatusChangeType                    statusTypeype;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_HasStatusChangeFromChara) == 0x000008, "Wrong alignment on EndBattleAPI_HasStatusChangeFromChara");
static_assert(sizeof(EndBattleAPI_HasStatusChangeFromChara) == 0x000010, "Wrong size on EndBattleAPI_HasStatusChangeFromChara");
static_assert(offsetof(EndBattleAPI_HasStatusChangeFromChara, InChara) == 0x000000, "Member 'EndBattleAPI_HasStatusChangeFromChara::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_HasStatusChangeFromChara, statusTypeype) == 0x000008, "Member 'EndBattleAPI_HasStatusChangeFromChara::statusTypeype' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_HasStatusChangeFromChara, ReturnValue) == 0x000009, "Member 'EndBattleAPI_HasStatusChangeFromChara::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.HidePhysics
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAPI_HidePhysics final
{
public:
	class FName                                   ActorName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_HidePhysics) == 0x000004, "Wrong alignment on EndBattleAPI_HidePhysics");
static_assert(sizeof(EndBattleAPI_HidePhysics) == 0x000008, "Wrong size on EndBattleAPI_HidePhysics");
static_assert(offsetof(EndBattleAPI_HidePhysics, ActorName) == 0x000000, "Member 'EndBattleAPI_HidePhysics::ActorName' has a wrong offset!");

// Function EndGame.EndBattleAPI.IncBattleSceneCount
// 0x000C (0x000C - 0x0000)
struct EndBattleAPI_IncBattleSceneCount final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_IncBattleSceneCount) == 0x000004, "Wrong alignment on EndBattleAPI_IncBattleSceneCount");
static_assert(sizeof(EndBattleAPI_IncBattleSceneCount) == 0x00000C, "Wrong size on EndBattleAPI_IncBattleSceneCount");
static_assert(offsetof(EndBattleAPI_IncBattleSceneCount, InName) == 0x000000, "Member 'EndBattleAPI_IncBattleSceneCount::InName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IncBattleSceneCount, ReturnValue) == 0x000008, "Member 'EndBattleAPI_IncBattleSceneCount::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.IsAbility
// 0x000C (0x000C - 0x0000)
struct EndBattleAPI_IsAbility final
{
public:
	class FName                                   InAbilityName;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_IsAbility) == 0x000004, "Wrong alignment on EndBattleAPI_IsAbility");
static_assert(sizeof(EndBattleAPI_IsAbility) == 0x00000C, "Wrong size on EndBattleAPI_IsAbility");
static_assert(offsetof(EndBattleAPI_IsAbility, InAbilityName) == 0x000000, "Member 'EndBattleAPI_IsAbility::InAbilityName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsAbility, ReturnValue) == 0x000008, "Member 'EndBattleAPI_IsAbility::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.IsAdditiveDamagePlaying
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_IsAdditiveDamagePlaying final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_IsAdditiveDamagePlaying) == 0x000008, "Wrong alignment on EndBattleAPI_IsAdditiveDamagePlaying");
static_assert(sizeof(EndBattleAPI_IsAdditiveDamagePlaying) == 0x000010, "Wrong size on EndBattleAPI_IsAdditiveDamagePlaying");
static_assert(offsetof(EndBattleAPI_IsAdditiveDamagePlaying, InChara) == 0x000000, "Member 'EndBattleAPI_IsAdditiveDamagePlaying::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsAdditiveDamagePlaying, ReturnValue) == 0x000008, "Member 'EndBattleAPI_IsAdditiveDamagePlaying::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.IsAerialNormalAttack
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_IsAerialNormalAttack final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_IsAerialNormalAttack) == 0x000008, "Wrong alignment on EndBattleAPI_IsAerialNormalAttack");
static_assert(sizeof(EndBattleAPI_IsAerialNormalAttack) == 0x000010, "Wrong size on EndBattleAPI_IsAerialNormalAttack");
static_assert(offsetof(EndBattleAPI_IsAerialNormalAttack, InChara) == 0x000000, "Member 'EndBattleAPI_IsAerialNormalAttack::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsAerialNormalAttack, ReturnValue) == 0x000008, "Member 'EndBattleAPI_IsAerialNormalAttack::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.IsAIPC
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_IsAIPC final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_IsAIPC) == 0x000008, "Wrong alignment on EndBattleAPI_IsAIPC");
static_assert(sizeof(EndBattleAPI_IsAIPC) == 0x000010, "Wrong size on EndBattleAPI_IsAIPC");
static_assert(offsetof(EndBattleAPI_IsAIPC, InChara) == 0x000000, "Member 'EndBattleAPI_IsAIPC::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsAIPC, ReturnValue) == 0x000008, "Member 'EndBattleAPI_IsAIPC::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.IsAIPCRangedWeaponEquipped
// 0x0002 (0x0002 - 0x0000)
struct EndBattleAPI_IsAIPCRangedWeaponEquipped final
{
public:
	EPlayerType                                   PlayerCharacter;                                   // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_IsAIPCRangedWeaponEquipped) == 0x000001, "Wrong alignment on EndBattleAPI_IsAIPCRangedWeaponEquipped");
static_assert(sizeof(EndBattleAPI_IsAIPCRangedWeaponEquipped) == 0x000002, "Wrong size on EndBattleAPI_IsAIPCRangedWeaponEquipped");
static_assert(offsetof(EndBattleAPI_IsAIPCRangedWeaponEquipped, PlayerCharacter) == 0x000000, "Member 'EndBattleAPI_IsAIPCRangedWeaponEquipped::PlayerCharacter' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsAIPCRangedWeaponEquipped, ReturnValue) == 0x000001, "Member 'EndBattleAPI_IsAIPCRangedWeaponEquipped::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.IsBurst
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_IsBurst final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_IsBurst) == 0x000008, "Wrong alignment on EndBattleAPI_IsBurst");
static_assert(sizeof(EndBattleAPI_IsBurst) == 0x000010, "Wrong size on EndBattleAPI_IsBurst");
static_assert(offsetof(EndBattleAPI_IsBurst, InChara) == 0x000000, "Member 'EndBattleAPI_IsBurst::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsBurst, ReturnValue) == 0x000008, "Member 'EndBattleAPI_IsBurst::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.IsCharacterValid
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_IsCharacterValid final
{
public:
	class AEndCharacter*                          InCharacter;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_IsCharacterValid) == 0x000008, "Wrong alignment on EndBattleAPI_IsCharacterValid");
static_assert(sizeof(EndBattleAPI_IsCharacterValid) == 0x000010, "Wrong size on EndBattleAPI_IsCharacterValid");
static_assert(offsetof(EndBattleAPI_IsCharacterValid, InCharacter) == 0x000000, "Member 'EndBattleAPI_IsCharacterValid::InCharacter' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsCharacterValid, ReturnValue) == 0x000008, "Member 'EndBattleAPI_IsCharacterValid::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.IsCharacterValidBranch
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_IsCharacterValidBranch final
{
public:
	class AEndCharacter*                          InCharacter;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndAIBranchBit                               OutSignal;                                         // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_IsCharacterValidBranch) == 0x000008, "Wrong alignment on EndBattleAPI_IsCharacterValidBranch");
static_assert(sizeof(EndBattleAPI_IsCharacterValidBranch) == 0x000010, "Wrong size on EndBattleAPI_IsCharacterValidBranch");
static_assert(offsetof(EndBattleAPI_IsCharacterValidBranch, InCharacter) == 0x000000, "Member 'EndBattleAPI_IsCharacterValidBranch::InCharacter' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsCharacterValidBranch, OutSignal) == 0x000008, "Member 'EndBattleAPI_IsCharacterValidBranch::OutSignal' has a wrong offset!");

// Function EndGame.EndBattleAPI.IsCharaHPP
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_IsCharaHPP final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Percent;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndAiMathCmp                                 cmp;                                               // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000D(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_IsCharaHPP) == 0x000008, "Wrong alignment on EndBattleAPI_IsCharaHPP");
static_assert(sizeof(EndBattleAPI_IsCharaHPP) == 0x000010, "Wrong size on EndBattleAPI_IsCharaHPP");
static_assert(offsetof(EndBattleAPI_IsCharaHPP, InChara) == 0x000000, "Member 'EndBattleAPI_IsCharaHPP::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsCharaHPP, Percent) == 0x000008, "Member 'EndBattleAPI_IsCharaHPP::Percent' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsCharaHPP, cmp) == 0x00000C, "Member 'EndBattleAPI_IsCharaHPP::cmp' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsCharaHPP, ReturnValue) == 0x00000D, "Member 'EndBattleAPI_IsCharaHPP::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.IsCharaID
// 0x0020 (0x0020 - 0x0000)
struct EndBattleAPI_IsCharaID final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Upper;                                             // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Lower;                                             // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_IsCharaID) == 0x000008, "Wrong alignment on EndBattleAPI_IsCharaID");
static_assert(sizeof(EndBattleAPI_IsCharaID) == 0x000020, "Wrong size on EndBattleAPI_IsCharaID");
static_assert(offsetof(EndBattleAPI_IsCharaID, InChara) == 0x000000, "Member 'EndBattleAPI_IsCharaID::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsCharaID, Upper) == 0x000008, "Member 'EndBattleAPI_IsCharaID::Upper' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsCharaID, Lower) == 0x000010, "Member 'EndBattleAPI_IsCharaID::Lower' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsCharaID, ReturnValue) == 0x000018, "Member 'EndBattleAPI_IsCharaID::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.IsCheckBattleSceneFlag
// 0x0002 (0x0002 - 0x0000)
struct EndBattleAPI_IsCheckBattleSceneFlag final
{
public:
	EEndAiBattleSceneFlag                         InType;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_IsCheckBattleSceneFlag) == 0x000001, "Wrong alignment on EndBattleAPI_IsCheckBattleSceneFlag");
static_assert(sizeof(EndBattleAPI_IsCheckBattleSceneFlag) == 0x000002, "Wrong size on EndBattleAPI_IsCheckBattleSceneFlag");
static_assert(offsetof(EndBattleAPI_IsCheckBattleSceneFlag, InType) == 0x000000, "Member 'EndBattleAPI_IsCheckBattleSceneFlag::InType' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsCheckBattleSceneFlag, ReturnValue) == 0x000001, "Member 'EndBattleAPI_IsCheckBattleSceneFlag::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.IsCloudOffensiveMode
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAPI_IsCloudOffensiveMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_IsCloudOffensiveMode) == 0x000001, "Wrong alignment on EndBattleAPI_IsCloudOffensiveMode");
static_assert(sizeof(EndBattleAPI_IsCloudOffensiveMode) == 0x000001, "Wrong size on EndBattleAPI_IsCloudOffensiveMode");
static_assert(offsetof(EndBattleAPI_IsCloudOffensiveMode, ReturnValue) == 0x000000, "Member 'EndBattleAPI_IsCloudOffensiveMode::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.IsContainedMotionList
// 0x0018 (0x0018 - 0x0000)
struct EndBattleAPI_IsContainedMotionList final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InMot1;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_IsContainedMotionList) == 0x000008, "Wrong alignment on EndBattleAPI_IsContainedMotionList");
static_assert(sizeof(EndBattleAPI_IsContainedMotionList) == 0x000018, "Wrong size on EndBattleAPI_IsContainedMotionList");
static_assert(offsetof(EndBattleAPI_IsContainedMotionList, InChara) == 0x000000, "Member 'EndBattleAPI_IsContainedMotionList::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsContainedMotionList, InMot1) == 0x000008, "Member 'EndBattleAPI_IsContainedMotionList::InMot1' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsContainedMotionList, ReturnValue) == 0x000010, "Member 'EndBattleAPI_IsContainedMotionList::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.IsContainedMotionList2
// 0x0020 (0x0020 - 0x0000)
struct EndBattleAPI_IsContainedMotionList2 final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InMot1;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InMot2;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_IsContainedMotionList2) == 0x000008, "Wrong alignment on EndBattleAPI_IsContainedMotionList2");
static_assert(sizeof(EndBattleAPI_IsContainedMotionList2) == 0x000020, "Wrong size on EndBattleAPI_IsContainedMotionList2");
static_assert(offsetof(EndBattleAPI_IsContainedMotionList2, InChara) == 0x000000, "Member 'EndBattleAPI_IsContainedMotionList2::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsContainedMotionList2, InMot1) == 0x000008, "Member 'EndBattleAPI_IsContainedMotionList2::InMot1' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsContainedMotionList2, InMot2) == 0x000010, "Member 'EndBattleAPI_IsContainedMotionList2::InMot2' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsContainedMotionList2, ReturnValue) == 0x000018, "Member 'EndBattleAPI_IsContainedMotionList2::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.IsContainedMotionList3
// 0x0028 (0x0028 - 0x0000)
struct EndBattleAPI_IsContainedMotionList3 final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InMot1;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InMot2;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InMot3;                                            // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_IsContainedMotionList3) == 0x000008, "Wrong alignment on EndBattleAPI_IsContainedMotionList3");
static_assert(sizeof(EndBattleAPI_IsContainedMotionList3) == 0x000028, "Wrong size on EndBattleAPI_IsContainedMotionList3");
static_assert(offsetof(EndBattleAPI_IsContainedMotionList3, InChara) == 0x000000, "Member 'EndBattleAPI_IsContainedMotionList3::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsContainedMotionList3, InMot1) == 0x000008, "Member 'EndBattleAPI_IsContainedMotionList3::InMot1' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsContainedMotionList3, InMot2) == 0x000010, "Member 'EndBattleAPI_IsContainedMotionList3::InMot2' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsContainedMotionList3, InMot3) == 0x000018, "Member 'EndBattleAPI_IsContainedMotionList3::InMot3' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsContainedMotionList3, ReturnValue) == 0x000020, "Member 'EndBattleAPI_IsContainedMotionList3::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.IsContainedMotionList4
// 0x0030 (0x0030 - 0x0000)
struct EndBattleAPI_IsContainedMotionList4 final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InMot1;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InMot2;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InMot3;                                            // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InMot4;                                            // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_IsContainedMotionList4) == 0x000008, "Wrong alignment on EndBattleAPI_IsContainedMotionList4");
static_assert(sizeof(EndBattleAPI_IsContainedMotionList4) == 0x000030, "Wrong size on EndBattleAPI_IsContainedMotionList4");
static_assert(offsetof(EndBattleAPI_IsContainedMotionList4, InChara) == 0x000000, "Member 'EndBattleAPI_IsContainedMotionList4::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsContainedMotionList4, InMot1) == 0x000008, "Member 'EndBattleAPI_IsContainedMotionList4::InMot1' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsContainedMotionList4, InMot2) == 0x000010, "Member 'EndBattleAPI_IsContainedMotionList4::InMot2' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsContainedMotionList4, InMot3) == 0x000018, "Member 'EndBattleAPI_IsContainedMotionList4::InMot3' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsContainedMotionList4, InMot4) == 0x000020, "Member 'EndBattleAPI_IsContainedMotionList4::InMot4' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsContainedMotionList4, ReturnValue) == 0x000028, "Member 'EndBattleAPI_IsContainedMotionList4::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.IsContainedMotionList5
// 0x0038 (0x0038 - 0x0000)
struct EndBattleAPI_IsContainedMotionList5 final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InMot1;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InMot2;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InMot3;                                            // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InMot4;                                            // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InMot5;                                            // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_IsContainedMotionList5) == 0x000008, "Wrong alignment on EndBattleAPI_IsContainedMotionList5");
static_assert(sizeof(EndBattleAPI_IsContainedMotionList5) == 0x000038, "Wrong size on EndBattleAPI_IsContainedMotionList5");
static_assert(offsetof(EndBattleAPI_IsContainedMotionList5, InChara) == 0x000000, "Member 'EndBattleAPI_IsContainedMotionList5::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsContainedMotionList5, InMot1) == 0x000008, "Member 'EndBattleAPI_IsContainedMotionList5::InMot1' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsContainedMotionList5, InMot2) == 0x000010, "Member 'EndBattleAPI_IsContainedMotionList5::InMot2' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsContainedMotionList5, InMot3) == 0x000018, "Member 'EndBattleAPI_IsContainedMotionList5::InMot3' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsContainedMotionList5, InMot4) == 0x000020, "Member 'EndBattleAPI_IsContainedMotionList5::InMot4' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsContainedMotionList5, InMot5) == 0x000028, "Member 'EndBattleAPI_IsContainedMotionList5::InMot5' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsContainedMotionList5, ReturnValue) == 0x000030, "Member 'EndBattleAPI_IsContainedMotionList5::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.IsContainedMotionListArray
// 0x0020 (0x0020 - 0x0000)
struct EndBattleAPI_IsContainedMotionListArray final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           InMot;                                             // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_IsContainedMotionListArray) == 0x000008, "Wrong alignment on EndBattleAPI_IsContainedMotionListArray");
static_assert(sizeof(EndBattleAPI_IsContainedMotionListArray) == 0x000020, "Wrong size on EndBattleAPI_IsContainedMotionListArray");
static_assert(offsetof(EndBattleAPI_IsContainedMotionListArray, InChara) == 0x000000, "Member 'EndBattleAPI_IsContainedMotionListArray::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsContainedMotionListArray, InMot) == 0x000008, "Member 'EndBattleAPI_IsContainedMotionListArray::InMot' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsContainedMotionListArray, ReturnValue) == 0x000018, "Member 'EndBattleAPI_IsContainedMotionListArray::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.IsDamage
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_IsDamage final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_IsDamage) == 0x000008, "Wrong alignment on EndBattleAPI_IsDamage");
static_assert(sizeof(EndBattleAPI_IsDamage) == 0x000010, "Wrong size on EndBattleAPI_IsDamage");
static_assert(offsetof(EndBattleAPI_IsDamage, InChara) == 0x000000, "Member 'EndBattleAPI_IsDamage::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsDamage, ReturnValue) == 0x000008, "Member 'EndBattleAPI_IsDamage::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.IsDamageSourceFlagDisableFinish
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAPI_IsDamageSourceFlagDisableFinish final
{
public:
	int32                                         Flag;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_IsDamageSourceFlagDisableFinish) == 0x000004, "Wrong alignment on EndBattleAPI_IsDamageSourceFlagDisableFinish");
static_assert(sizeof(EndBattleAPI_IsDamageSourceFlagDisableFinish) == 0x000008, "Wrong size on EndBattleAPI_IsDamageSourceFlagDisableFinish");
static_assert(offsetof(EndBattleAPI_IsDamageSourceFlagDisableFinish, Flag) == 0x000000, "Member 'EndBattleAPI_IsDamageSourceFlagDisableFinish::Flag' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsDamageSourceFlagDisableFinish, ReturnValue) == 0x000004, "Member 'EndBattleAPI_IsDamageSourceFlagDisableFinish::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.IsDisableTarget
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_IsDisableTarget final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_IsDisableTarget) == 0x000008, "Wrong alignment on EndBattleAPI_IsDisableTarget");
static_assert(sizeof(EndBattleAPI_IsDisableTarget) == 0x000010, "Wrong size on EndBattleAPI_IsDisableTarget");
static_assert(offsetof(EndBattleAPI_IsDisableTarget, InChara) == 0x000000, "Member 'EndBattleAPI_IsDisableTarget::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsDisableTarget, ReturnValue) == 0x000008, "Member 'EndBattleAPI_IsDisableTarget::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.IsDodge
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_IsDodge final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_IsDodge) == 0x000008, "Wrong alignment on EndBattleAPI_IsDodge");
static_assert(sizeof(EndBattleAPI_IsDodge) == 0x000010, "Wrong size on EndBattleAPI_IsDodge");
static_assert(offsetof(EndBattleAPI_IsDodge, InChara) == 0x000000, "Member 'EndBattleAPI_IsDodge::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsDodge, ReturnValue) == 0x000008, "Member 'EndBattleAPI_IsDodge::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.IsDodgeInvincible
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_IsDodgeInvincible final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_IsDodgeInvincible) == 0x000008, "Wrong alignment on EndBattleAPI_IsDodgeInvincible");
static_assert(sizeof(EndBattleAPI_IsDodgeInvincible) == 0x000010, "Wrong size on EndBattleAPI_IsDodgeInvincible");
static_assert(offsetof(EndBattleAPI_IsDodgeInvincible, InChara) == 0x000000, "Member 'EndBattleAPI_IsDodgeInvincible::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsDodgeInvincible, ReturnValue) == 0x000008, "Member 'EndBattleAPI_IsDodgeInvincible::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.IsDodgeResetUniqueAbility
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_IsDodgeResetUniqueAbility final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_IsDodgeResetUniqueAbility) == 0x000008, "Wrong alignment on EndBattleAPI_IsDodgeResetUniqueAbility");
static_assert(sizeof(EndBattleAPI_IsDodgeResetUniqueAbility) == 0x000010, "Wrong size on EndBattleAPI_IsDodgeResetUniqueAbility");
static_assert(offsetof(EndBattleAPI_IsDodgeResetUniqueAbility, InChara) == 0x000000, "Member 'EndBattleAPI_IsDodgeResetUniqueAbility::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsDodgeResetUniqueAbility, ReturnValue) == 0x000008, "Member 'EndBattleAPI_IsDodgeResetUniqueAbility::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.IsDummyPartyMember
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_IsDummyPartyMember final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_IsDummyPartyMember) == 0x000008, "Wrong alignment on EndBattleAPI_IsDummyPartyMember");
static_assert(sizeof(EndBattleAPI_IsDummyPartyMember) == 0x000010, "Wrong size on EndBattleAPI_IsDummyPartyMember");
static_assert(offsetof(EndBattleAPI_IsDummyPartyMember, InChara) == 0x000000, "Member 'EndBattleAPI_IsDummyPartyMember::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsDummyPartyMember, ReturnValue) == 0x000008, "Member 'EndBattleAPI_IsDummyPartyMember::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.IsEntryNavVolumeArea
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_IsEntryNavVolumeArea final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EModifierVolumeType                           InType;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_IsEntryNavVolumeArea) == 0x000008, "Wrong alignment on EndBattleAPI_IsEntryNavVolumeArea");
static_assert(sizeof(EndBattleAPI_IsEntryNavVolumeArea) == 0x000010, "Wrong size on EndBattleAPI_IsEntryNavVolumeArea");
static_assert(offsetof(EndBattleAPI_IsEntryNavVolumeArea, InChara) == 0x000000, "Member 'EndBattleAPI_IsEntryNavVolumeArea::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsEntryNavVolumeArea, InType) == 0x000008, "Member 'EndBattleAPI_IsEntryNavVolumeArea::InType' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsEntryNavVolumeArea, ReturnValue) == 0x000009, "Member 'EndBattleAPI_IsEntryNavVolumeArea::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.IsExistCurrentAerialVolume
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAPI_IsExistCurrentAerialVolume final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_IsExistCurrentAerialVolume) == 0x000001, "Wrong alignment on EndBattleAPI_IsExistCurrentAerialVolume");
static_assert(sizeof(EndBattleAPI_IsExistCurrentAerialVolume) == 0x000001, "Wrong size on EndBattleAPI_IsExistCurrentAerialVolume");
static_assert(offsetof(EndBattleAPI_IsExistCurrentAerialVolume, ReturnValue) == 0x000000, "Member 'EndBattleAPI_IsExistCurrentAerialVolume::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.IsFillLimitPlayer
// 0x000C (0x000C - 0x0000)
struct EndBattleAPI_IsFillLimitPlayer final
{
public:
	class FName                                   PlayerCharaName;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_IsFillLimitPlayer) == 0x000004, "Wrong alignment on EndBattleAPI_IsFillLimitPlayer");
static_assert(sizeof(EndBattleAPI_IsFillLimitPlayer) == 0x00000C, "Wrong size on EndBattleAPI_IsFillLimitPlayer");
static_assert(offsetof(EndBattleAPI_IsFillLimitPlayer, PlayerCharaName) == 0x000000, "Member 'EndBattleAPI_IsFillLimitPlayer::PlayerCharaName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsFillLimitPlayer, ReturnValue) == 0x000008, "Member 'EndBattleAPI_IsFillLimitPlayer::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.IsGuard
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_IsGuard final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_IsGuard) == 0x000008, "Wrong alignment on EndBattleAPI_IsGuard");
static_assert(sizeof(EndBattleAPI_IsGuard) == 0x000010, "Wrong size on EndBattleAPI_IsGuard");
static_assert(offsetof(EndBattleAPI_IsGuard, InChara) == 0x000000, "Member 'EndBattleAPI_IsGuard::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsGuard, ReturnValue) == 0x000008, "Member 'EndBattleAPI_IsGuard::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.IsInAIPCDangerWarning
// 0x0002 (0x0002 - 0x0000)
struct EndBattleAPI_IsInAIPCDangerWarning final
{
public:
	EPlayerType                                   PlayerCharacter;                                   // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_IsInAIPCDangerWarning) == 0x000001, "Wrong alignment on EndBattleAPI_IsInAIPCDangerWarning");
static_assert(sizeof(EndBattleAPI_IsInAIPCDangerWarning) == 0x000002, "Wrong size on EndBattleAPI_IsInAIPCDangerWarning");
static_assert(offsetof(EndBattleAPI_IsInAIPCDangerWarning, PlayerCharacter) == 0x000000, "Member 'EndBattleAPI_IsInAIPCDangerWarning::PlayerCharacter' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsInAIPCDangerWarning, ReturnValue) == 0x000001, "Member 'EndBattleAPI_IsInAIPCDangerWarning::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.IsInFanRange
// 0x0028 (0x0028 - 0x0000)
struct EndBattleAPI_IsInFanRange final
{
public:
	class AEndCharacter*                          OwnerCharacter;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         baseYaw;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         angleRange;                                        // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RadiusMin;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RadiusMax;                                         // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                targetPosition;                                    // 0x0018(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_IsInFanRange) == 0x000008, "Wrong alignment on EndBattleAPI_IsInFanRange");
static_assert(sizeof(EndBattleAPI_IsInFanRange) == 0x000028, "Wrong size on EndBattleAPI_IsInFanRange");
static_assert(offsetof(EndBattleAPI_IsInFanRange, OwnerCharacter) == 0x000000, "Member 'EndBattleAPI_IsInFanRange::OwnerCharacter' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsInFanRange, baseYaw) == 0x000008, "Member 'EndBattleAPI_IsInFanRange::baseYaw' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsInFanRange, angleRange) == 0x00000C, "Member 'EndBattleAPI_IsInFanRange::angleRange' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsInFanRange, RadiusMin) == 0x000010, "Member 'EndBattleAPI_IsInFanRange::RadiusMin' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsInFanRange, RadiusMax) == 0x000014, "Member 'EndBattleAPI_IsInFanRange::RadiusMax' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsInFanRange, targetPosition) == 0x000018, "Member 'EndBattleAPI_IsInFanRange::targetPosition' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsInFanRange, ReturnValue) == 0x000024, "Member 'EndBattleAPI_IsInFanRange::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.IsInScreen
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_IsInScreen final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_IsInScreen) == 0x000008, "Wrong alignment on EndBattleAPI_IsInScreen");
static_assert(sizeof(EndBattleAPI_IsInScreen) == 0x000010, "Wrong size on EndBattleAPI_IsInScreen");
static_assert(offsetof(EndBattleAPI_IsInScreen, Actor) == 0x000000, "Member 'EndBattleAPI_IsInScreen::Actor' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsInScreen, ReturnValue) == 0x000008, "Member 'EndBattleAPI_IsInScreen::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.IsInSummonCutScene
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAPI_IsInSummonCutScene final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_IsInSummonCutScene) == 0x000001, "Wrong alignment on EndBattleAPI_IsInSummonCutScene");
static_assert(sizeof(EndBattleAPI_IsInSummonCutScene) == 0x000001, "Wrong size on EndBattleAPI_IsInSummonCutScene");
static_assert(offsetof(EndBattleAPI_IsInSummonCutScene, ReturnValue) == 0x000000, "Member 'EndBattleAPI_IsInSummonCutScene::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.IsInSyncAction
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_IsInSyncAction final
{
public:
	class AEndCharacter*                          chara;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_IsInSyncAction) == 0x000008, "Wrong alignment on EndBattleAPI_IsInSyncAction");
static_assert(sizeof(EndBattleAPI_IsInSyncAction) == 0x000010, "Wrong size on EndBattleAPI_IsInSyncAction");
static_assert(offsetof(EndBattleAPI_IsInSyncAction, chara) == 0x000000, "Member 'EndBattleAPI_IsInSyncAction::chara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsInSyncAction, ReturnValue) == 0x000008, "Member 'EndBattleAPI_IsInSyncAction::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.IsItem
// 0x000C (0x000C - 0x0000)
struct EndBattleAPI_IsItem final
{
public:
	class FName                                   InAbilityName;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_IsItem) == 0x000004, "Wrong alignment on EndBattleAPI_IsItem");
static_assert(sizeof(EndBattleAPI_IsItem) == 0x00000C, "Wrong size on EndBattleAPI_IsItem");
static_assert(offsetof(EndBattleAPI_IsItem, InAbilityName) == 0x000000, "Member 'EndBattleAPI_IsItem::InAbilityName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsItem, ReturnValue) == 0x000008, "Member 'EndBattleAPI_IsItem::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.IsLaunchActionPlaying
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_IsLaunchActionPlaying final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_IsLaunchActionPlaying) == 0x000008, "Wrong alignment on EndBattleAPI_IsLaunchActionPlaying");
static_assert(sizeof(EndBattleAPI_IsLaunchActionPlaying) == 0x000010, "Wrong size on EndBattleAPI_IsLaunchActionPlaying");
static_assert(offsetof(EndBattleAPI_IsLaunchActionPlaying, InChara) == 0x000000, "Member 'EndBattleAPI_IsLaunchActionPlaying::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsLaunchActionPlaying, ReturnValue) == 0x000008, "Member 'EndBattleAPI_IsLaunchActionPlaying::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.IsLimit
// 0x000C (0x000C - 0x0000)
struct EndBattleAPI_IsLimit final
{
public:
	class FName                                   InAbilityName;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_IsLimit) == 0x000004, "Wrong alignment on EndBattleAPI_IsLimit");
static_assert(sizeof(EndBattleAPI_IsLimit) == 0x00000C, "Wrong size on EndBattleAPI_IsLimit");
static_assert(offsetof(EndBattleAPI_IsLimit, InAbilityName) == 0x000000, "Member 'EndBattleAPI_IsLimit::InAbilityName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsLimit, ReturnValue) == 0x000008, "Member 'EndBattleAPI_IsLimit::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.IsMagic
// 0x000C (0x000C - 0x0000)
struct EndBattleAPI_IsMagic final
{
public:
	class FName                                   InAbilityName;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_IsMagic) == 0x000004, "Wrong alignment on EndBattleAPI_IsMagic");
static_assert(sizeof(EndBattleAPI_IsMagic) == 0x00000C, "Wrong size on EndBattleAPI_IsMagic");
static_assert(offsetof(EndBattleAPI_IsMagic, InAbilityName) == 0x000000, "Member 'EndBattleAPI_IsMagic::InAbilityName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsMagic, ReturnValue) == 0x000008, "Member 'EndBattleAPI_IsMagic::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.IsNormal
// 0x000C (0x000C - 0x0000)
struct EndBattleAPI_IsNormal final
{
public:
	class FName                                   InAbilityName;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_IsNormal) == 0x000004, "Wrong alignment on EndBattleAPI_IsNormal");
static_assert(sizeof(EndBattleAPI_IsNormal) == 0x00000C, "Wrong size on EndBattleAPI_IsNormal");
static_assert(offsetof(EndBattleAPI_IsNormal, InAbilityName) == 0x000000, "Member 'EndBattleAPI_IsNormal::InAbilityName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsNormal, ReturnValue) == 0x000008, "Member 'EndBattleAPI_IsNormal::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.IsOverlapCharaFromName
// 0x0018 (0x0018 - 0x0000)
struct EndBattleAPI_IsOverlapCharaFromName final
{
public:
	class FName                                   InVolumeName;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AEndCharacter*                          InChara;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_IsOverlapCharaFromName) == 0x000008, "Wrong alignment on EndBattleAPI_IsOverlapCharaFromName");
static_assert(sizeof(EndBattleAPI_IsOverlapCharaFromName) == 0x000018, "Wrong size on EndBattleAPI_IsOverlapCharaFromName");
static_assert(offsetof(EndBattleAPI_IsOverlapCharaFromName, InVolumeName) == 0x000000, "Member 'EndBattleAPI_IsOverlapCharaFromName::InVolumeName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsOverlapCharaFromName, InChara) == 0x000008, "Member 'EndBattleAPI_IsOverlapCharaFromName::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsOverlapCharaFromName, ReturnValue) == 0x000010, "Member 'EndBattleAPI_IsOverlapCharaFromName::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.IsOverlapPoint
// 0x0018 (0x0018 - 0x0000)
struct EndBattleAPI_IsOverlapPoint final
{
public:
	class AEndNavModifierVolume*                  InVolume;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InPoint;                                           // 0x0008(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_IsOverlapPoint) == 0x000008, "Wrong alignment on EndBattleAPI_IsOverlapPoint");
static_assert(sizeof(EndBattleAPI_IsOverlapPoint) == 0x000018, "Wrong size on EndBattleAPI_IsOverlapPoint");
static_assert(offsetof(EndBattleAPI_IsOverlapPoint, InVolume) == 0x000000, "Member 'EndBattleAPI_IsOverlapPoint::InVolume' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsOverlapPoint, InPoint) == 0x000008, "Member 'EndBattleAPI_IsOverlapPoint::InPoint' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsOverlapPoint, ReturnValue) == 0x000014, "Member 'EndBattleAPI_IsOverlapPoint::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.IsPartyPinch
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAPI_IsPartyPinch final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_IsPartyPinch) == 0x000001, "Wrong alignment on EndBattleAPI_IsPartyPinch");
static_assert(sizeof(EndBattleAPI_IsPartyPinch) == 0x000001, "Wrong size on EndBattleAPI_IsPartyPinch");
static_assert(offsetof(EndBattleAPI_IsPartyPinch, ReturnValue) == 0x000000, "Member 'EndBattleAPI_IsPartyPinch::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.IsPlayer
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_IsPlayer final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_IsPlayer) == 0x000008, "Wrong alignment on EndBattleAPI_IsPlayer");
static_assert(sizeof(EndBattleAPI_IsPlayer) == 0x000010, "Wrong size on EndBattleAPI_IsPlayer");
static_assert(offsetof(EndBattleAPI_IsPlayer, InChara) == 0x000000, "Member 'EndBattleAPI_IsPlayer::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsPlayer, ReturnValue) == 0x000008, "Member 'EndBattleAPI_IsPlayer::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.IsPlayerCharacterValid
// 0x0002 (0x0002 - 0x0000)
struct EndBattleAPI_IsPlayerCharacterValid final
{
public:
	EPlayerType                                   Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_IsPlayerCharacterValid) == 0x000001, "Wrong alignment on EndBattleAPI_IsPlayerCharacterValid");
static_assert(sizeof(EndBattleAPI_IsPlayerCharacterValid) == 0x000002, "Wrong size on EndBattleAPI_IsPlayerCharacterValid");
static_assert(offsetof(EndBattleAPI_IsPlayerCharacterValid, Type) == 0x000000, "Member 'EndBattleAPI_IsPlayerCharacterValid::Type' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsPlayerCharacterValid, ReturnValue) == 0x000001, "Member 'EndBattleAPI_IsPlayerCharacterValid::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.IsPlayerPinch
// 0x0002 (0x0002 - 0x0000)
struct EndBattleAPI_IsPlayerPinch final
{
public:
	EPlayerType                                   PlayerType;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_IsPlayerPinch) == 0x000001, "Wrong alignment on EndBattleAPI_IsPlayerPinch");
static_assert(sizeof(EndBattleAPI_IsPlayerPinch) == 0x000002, "Wrong size on EndBattleAPI_IsPlayerPinch");
static_assert(offsetof(EndBattleAPI_IsPlayerPinch, PlayerType) == 0x000000, "Member 'EndBattleAPI_IsPlayerPinch::PlayerType' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsPlayerPinch, ReturnValue) == 0x000001, "Member 'EndBattleAPI_IsPlayerPinch::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.IsRaceID
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_IsRaceID final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InID;                                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_IsRaceID) == 0x000008, "Wrong alignment on EndBattleAPI_IsRaceID");
static_assert(sizeof(EndBattleAPI_IsRaceID) == 0x000010, "Wrong size on EndBattleAPI_IsRaceID");
static_assert(offsetof(EndBattleAPI_IsRaceID, InChara) == 0x000000, "Member 'EndBattleAPI_IsRaceID::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsRaceID, InID) == 0x000008, "Member 'EndBattleAPI_IsRaceID::InID' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsRaceID, ReturnValue) == 0x00000C, "Member 'EndBattleAPI_IsRaceID::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.IsRequestWaveData
// 0x000C (0x000C - 0x0000)
struct EndBattleAPI_IsRequestWaveData final
{
public:
	class FName                                   BattleSceneID;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_IsRequestWaveData) == 0x000004, "Wrong alignment on EndBattleAPI_IsRequestWaveData");
static_assert(sizeof(EndBattleAPI_IsRequestWaveData) == 0x00000C, "Wrong size on EndBattleAPI_IsRequestWaveData");
static_assert(offsetof(EndBattleAPI_IsRequestWaveData, BattleSceneID) == 0x000000, "Member 'EndBattleAPI_IsRequestWaveData::BattleSceneID' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsRequestWaveData, ReturnValue) == 0x000008, "Member 'EndBattleAPI_IsRequestWaveData::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.IsRewardEnable
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_IsRewardEnable final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndBattleRewardType                          InType;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_IsRewardEnable) == 0x000008, "Wrong alignment on EndBattleAPI_IsRewardEnable");
static_assert(sizeof(EndBattleAPI_IsRewardEnable) == 0x000010, "Wrong size on EndBattleAPI_IsRewardEnable");
static_assert(offsetof(EndBattleAPI_IsRewardEnable, InChara) == 0x000000, "Member 'EndBattleAPI_IsRewardEnable::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsRewardEnable, InType) == 0x000008, "Member 'EndBattleAPI_IsRewardEnable::InType' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsRewardEnable, ReturnValue) == 0x000009, "Member 'EndBattleAPI_IsRewardEnable::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.IsSummon
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_IsSummon final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_IsSummon) == 0x000008, "Wrong alignment on EndBattleAPI_IsSummon");
static_assert(sizeof(EndBattleAPI_IsSummon) == 0x000010, "Wrong size on EndBattleAPI_IsSummon");
static_assert(offsetof(EndBattleAPI_IsSummon, InChara) == 0x000000, "Member 'EndBattleAPI_IsSummon::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsSummon, ReturnValue) == 0x000008, "Member 'EndBattleAPI_IsSummon::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.IsSummonGaugeZero
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAPI_IsSummonGaugeZero final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_IsSummonGaugeZero) == 0x000001, "Wrong alignment on EndBattleAPI_IsSummonGaugeZero");
static_assert(sizeof(EndBattleAPI_IsSummonGaugeZero) == 0x000001, "Wrong size on EndBattleAPI_IsSummonGaugeZero");
static_assert(offsetof(EndBattleAPI_IsSummonGaugeZero, ReturnValue) == 0x000000, "Member 'EndBattleAPI_IsSummonGaugeZero::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.IsUniqueAbility
// 0x000C (0x000C - 0x0000)
struct EndBattleAPI_IsUniqueAbility final
{
public:
	class FName                                   AbilityID;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_IsUniqueAbility) == 0x000004, "Wrong alignment on EndBattleAPI_IsUniqueAbility");
static_assert(sizeof(EndBattleAPI_IsUniqueAbility) == 0x00000C, "Wrong size on EndBattleAPI_IsUniqueAbility");
static_assert(offsetof(EndBattleAPI_IsUniqueAbility, AbilityID) == 0x000000, "Member 'EndBattleAPI_IsUniqueAbility::AbilityID' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsUniqueAbility, ReturnValue) == 0x000008, "Member 'EndBattleAPI_IsUniqueAbility::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.IsWithinCharaEQS
// 0x0018 (0x0018 - 0x0000)
struct EndBattleAPI_IsWithinCharaEQS final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InPoint;                                           // 0x0008(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_IsWithinCharaEQS) == 0x000008, "Wrong alignment on EndBattleAPI_IsWithinCharaEQS");
static_assert(sizeof(EndBattleAPI_IsWithinCharaEQS) == 0x000018, "Wrong size on EndBattleAPI_IsWithinCharaEQS");
static_assert(offsetof(EndBattleAPI_IsWithinCharaEQS, InChara) == 0x000000, "Member 'EndBattleAPI_IsWithinCharaEQS::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsWithinCharaEQS, InPoint) == 0x000008, "Member 'EndBattleAPI_IsWithinCharaEQS::InPoint' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_IsWithinCharaEQS, ReturnValue) == 0x000014, "Member 'EndBattleAPI_IsWithinCharaEQS::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.MinusEqualFloat
// 0x000C (0x000C - 0x0000)
struct EndBattleAPI_MinusEqualFloat final
{
public:
	float                                         ValueA;                                            // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ValueB;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_MinusEqualFloat) == 0x000004, "Wrong alignment on EndBattleAPI_MinusEqualFloat");
static_assert(sizeof(EndBattleAPI_MinusEqualFloat) == 0x00000C, "Wrong size on EndBattleAPI_MinusEqualFloat");
static_assert(offsetof(EndBattleAPI_MinusEqualFloat, ValueA) == 0x000000, "Member 'EndBattleAPI_MinusEqualFloat::ValueA' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_MinusEqualFloat, ValueB) == 0x000004, "Member 'EndBattleAPI_MinusEqualFloat::ValueB' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_MinusEqualFloat, ReturnValue) == 0x000008, "Member 'EndBattleAPI_MinusEqualFloat::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.MinusEqualInterger
// 0x000C (0x000C - 0x0000)
struct EndBattleAPI_MinusEqualInterger final
{
public:
	int32                                         ValueA;                                            // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ValueB;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_MinusEqualInterger) == 0x000004, "Wrong alignment on EndBattleAPI_MinusEqualInterger");
static_assert(sizeof(EndBattleAPI_MinusEqualInterger) == 0x00000C, "Wrong size on EndBattleAPI_MinusEqualInterger");
static_assert(offsetof(EndBattleAPI_MinusEqualInterger, ValueA) == 0x000000, "Member 'EndBattleAPI_MinusEqualInterger::ValueA' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_MinusEqualInterger, ValueB) == 0x000004, "Member 'EndBattleAPI_MinusEqualInterger::ValueB' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_MinusEqualInterger, ReturnValue) == 0x000008, "Member 'EndBattleAPI_MinusEqualInterger::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.MulEqualFloat
// 0x000C (0x000C - 0x0000)
struct EndBattleAPI_MulEqualFloat final
{
public:
	float                                         ValueA;                                            // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ValueB;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_MulEqualFloat) == 0x000004, "Wrong alignment on EndBattleAPI_MulEqualFloat");
static_assert(sizeof(EndBattleAPI_MulEqualFloat) == 0x00000C, "Wrong size on EndBattleAPI_MulEqualFloat");
static_assert(offsetof(EndBattleAPI_MulEqualFloat, ValueA) == 0x000000, "Member 'EndBattleAPI_MulEqualFloat::ValueA' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_MulEqualFloat, ValueB) == 0x000004, "Member 'EndBattleAPI_MulEqualFloat::ValueB' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_MulEqualFloat, ReturnValue) == 0x000008, "Member 'EndBattleAPI_MulEqualFloat::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.MulEqualInterger
// 0x000C (0x000C - 0x0000)
struct EndBattleAPI_MulEqualInterger final
{
public:
	int32                                         ValueA;                                            // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ValueB;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_MulEqualInterger) == 0x000004, "Wrong alignment on EndBattleAPI_MulEqualInterger");
static_assert(sizeof(EndBattleAPI_MulEqualInterger) == 0x00000C, "Wrong size on EndBattleAPI_MulEqualInterger");
static_assert(offsetof(EndBattleAPI_MulEqualInterger, ValueA) == 0x000000, "Member 'EndBattleAPI_MulEqualInterger::ValueA' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_MulEqualInterger, ValueB) == 0x000004, "Member 'EndBattleAPI_MulEqualInterger::ValueB' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_MulEqualInterger, ReturnValue) == 0x000008, "Member 'EndBattleAPI_MulEqualInterger::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.NotifyHGFireWallToAIPC
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAPI_NotifyHGFireWallToAIPC final
{
public:
	bool                                          onoff;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_NotifyHGFireWallToAIPC) == 0x000001, "Wrong alignment on EndBattleAPI_NotifyHGFireWallToAIPC");
static_assert(sizeof(EndBattleAPI_NotifyHGFireWallToAIPC) == 0x000001, "Wrong size on EndBattleAPI_NotifyHGFireWallToAIPC");
static_assert(offsetof(EndBattleAPI_NotifyHGFireWallToAIPC, onoff) == 0x000000, "Member 'EndBattleAPI_NotifyHGFireWallToAIPC::onoff' has a wrong offset!");

// Function EndGame.EndBattleAPI.OnSeparateBodyAndRootForAIPC
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_OnSeparateBodyAndRootForAIPC final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          onoff;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_OnSeparateBodyAndRootForAIPC) == 0x000008, "Wrong alignment on EndBattleAPI_OnSeparateBodyAndRootForAIPC");
static_assert(sizeof(EndBattleAPI_OnSeparateBodyAndRootForAIPC) == 0x000010, "Wrong size on EndBattleAPI_OnSeparateBodyAndRootForAIPC");
static_assert(offsetof(EndBattleAPI_OnSeparateBodyAndRootForAIPC, Character) == 0x000000, "Member 'EndBattleAPI_OnSeparateBodyAndRootForAIPC::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_OnSeparateBodyAndRootForAIPC, onoff) == 0x000008, "Member 'EndBattleAPI_OnSeparateBodyAndRootForAIPC::onoff' has a wrong offset!");

// Function EndGame.EndBattleAPI.OverrideAIPCLeader
// 0x0002 (0x0002 - 0x0000)
struct EndBattleAPI_OverrideAIPCLeader final
{
public:
	EPlayerType                                   PlayerCharacter;                                   // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlayerType                                   NewLeader;                                         // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_OverrideAIPCLeader) == 0x000001, "Wrong alignment on EndBattleAPI_OverrideAIPCLeader");
static_assert(sizeof(EndBattleAPI_OverrideAIPCLeader) == 0x000002, "Wrong size on EndBattleAPI_OverrideAIPCLeader");
static_assert(offsetof(EndBattleAPI_OverrideAIPCLeader, PlayerCharacter) == 0x000000, "Member 'EndBattleAPI_OverrideAIPCLeader::PlayerCharacter' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_OverrideAIPCLeader, NewLeader) == 0x000001, "Member 'EndBattleAPI_OverrideAIPCLeader::NewLeader' has a wrong offset!");

// Function EndGame.EndBattleAPI.OverrideSummonCaptureTimeLimit
// 0x0004 (0x0004 - 0x0000)
struct EndBattleAPI_OverrideSummonCaptureTimeLimit final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_OverrideSummonCaptureTimeLimit) == 0x000004, "Wrong alignment on EndBattleAPI_OverrideSummonCaptureTimeLimit");
static_assert(sizeof(EndBattleAPI_OverrideSummonCaptureTimeLimit) == 0x000004, "Wrong size on EndBattleAPI_OverrideSummonCaptureTimeLimit");
static_assert(offsetof(EndBattleAPI_OverrideSummonCaptureTimeLimit, Time) == 0x000000, "Member 'EndBattleAPI_OverrideSummonCaptureTimeLimit::Time' has a wrong offset!");

// Function EndGame.EndBattleAPI.OverrideSummonCutSceneReturnLocation
// 0x0040 (0x0040 - 0x0000)
struct EndBattleAPI_OverrideSummonCutSceneReturnLocation final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0010(0x0030)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_OverrideSummonCutSceneReturnLocation) == 0x000010, "Wrong alignment on EndBattleAPI_OverrideSummonCutSceneReturnLocation");
static_assert(sizeof(EndBattleAPI_OverrideSummonCutSceneReturnLocation) == 0x000040, "Wrong size on EndBattleAPI_OverrideSummonCutSceneReturnLocation");
static_assert(offsetof(EndBattleAPI_OverrideSummonCutSceneReturnLocation, Character) == 0x000000, "Member 'EndBattleAPI_OverrideSummonCutSceneReturnLocation::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_OverrideSummonCutSceneReturnLocation, Transform) == 0x000010, "Member 'EndBattleAPI_OverrideSummonCutSceneReturnLocation::Transform' has a wrong offset!");

// Function EndGame.EndBattleAPI.OverrideSummonPointToIncreaseOneSecond
// 0x0004 (0x0004 - 0x0000)
struct EndBattleAPI_OverrideSummonPointToIncreaseOneSecond final
{
public:
	float                                         Point;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_OverrideSummonPointToIncreaseOneSecond) == 0x000004, "Wrong alignment on EndBattleAPI_OverrideSummonPointToIncreaseOneSecond");
static_assert(sizeof(EndBattleAPI_OverrideSummonPointToIncreaseOneSecond) == 0x000004, "Wrong size on EndBattleAPI_OverrideSummonPointToIncreaseOneSecond");
static_assert(offsetof(EndBattleAPI_OverrideSummonPointToIncreaseOneSecond, Point) == 0x000000, "Member 'EndBattleAPI_OverrideSummonPointToIncreaseOneSecond::Point' has a wrong offset!");

// Function EndGame.EndBattleAPI.PlayBattleCameraSequence
// 0x0020 (0x0020 - 0x0000)
struct EndBattleAPI_PlayBattleCameraSequence final
{
public:
	class FName                                   CameraSequenceID;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AEndCharacter*                          ownerChara;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AEndCharacter*                          HasResourceChara;                                  // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_PlayBattleCameraSequence) == 0x000008, "Wrong alignment on EndBattleAPI_PlayBattleCameraSequence");
static_assert(sizeof(EndBattleAPI_PlayBattleCameraSequence) == 0x000020, "Wrong size on EndBattleAPI_PlayBattleCameraSequence");
static_assert(offsetof(EndBattleAPI_PlayBattleCameraSequence, CameraSequenceID) == 0x000000, "Member 'EndBattleAPI_PlayBattleCameraSequence::CameraSequenceID' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_PlayBattleCameraSequence, ownerChara) == 0x000008, "Member 'EndBattleAPI_PlayBattleCameraSequence::ownerChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_PlayBattleCameraSequence, HasResourceChara) == 0x000010, "Member 'EndBattleAPI_PlayBattleCameraSequence::HasResourceChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_PlayBattleCameraSequence, ReturnValue) == 0x000018, "Member 'EndBattleAPI_PlayBattleCameraSequence::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.PlayBreakableDestructionAnim
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAPI_PlayBreakableDestructionAnim final
{
public:
	class FName                                   BreakableID;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_PlayBreakableDestructionAnim) == 0x000004, "Wrong alignment on EndBattleAPI_PlayBreakableDestructionAnim");
static_assert(sizeof(EndBattleAPI_PlayBreakableDestructionAnim) == 0x000008, "Wrong size on EndBattleAPI_PlayBreakableDestructionAnim");
static_assert(offsetof(EndBattleAPI_PlayBreakableDestructionAnim, BreakableID) == 0x000000, "Member 'EndBattleAPI_PlayBreakableDestructionAnim::BreakableID' has a wrong offset!");

// Function EndGame.EndBattleAPI.PlayEffect
// 0x0028 (0x0028 - 0x0000)
struct EndBattleAPI_PlayEffect final
{
public:
	int32                                         CategoryType;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ResourceName;                                      // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 AttachActor;                                       // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttachSocketName;                                  // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_PlayEffect) == 0x000008, "Wrong alignment on EndBattleAPI_PlayEffect");
static_assert(sizeof(EndBattleAPI_PlayEffect) == 0x000028, "Wrong size on EndBattleAPI_PlayEffect");
static_assert(offsetof(EndBattleAPI_PlayEffect, CategoryType) == 0x000000, "Member 'EndBattleAPI_PlayEffect::CategoryType' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_PlayEffect, ResourceName) == 0x000004, "Member 'EndBattleAPI_PlayEffect::ResourceName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_PlayEffect, AttachActor) == 0x000010, "Member 'EndBattleAPI_PlayEffect::AttachActor' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_PlayEffect, AttachSocketName) == 0x000018, "Member 'EndBattleAPI_PlayEffect::AttachSocketName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_PlayEffect, ReturnValue) == 0x000020, "Member 'EndBattleAPI_PlayEffect::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.PlusEqualFloat
// 0x000C (0x000C - 0x0000)
struct EndBattleAPI_PlusEqualFloat final
{
public:
	float                                         ValueA;                                            // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ValueB;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_PlusEqualFloat) == 0x000004, "Wrong alignment on EndBattleAPI_PlusEqualFloat");
static_assert(sizeof(EndBattleAPI_PlusEqualFloat) == 0x00000C, "Wrong size on EndBattleAPI_PlusEqualFloat");
static_assert(offsetof(EndBattleAPI_PlusEqualFloat, ValueA) == 0x000000, "Member 'EndBattleAPI_PlusEqualFloat::ValueA' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_PlusEqualFloat, ValueB) == 0x000004, "Member 'EndBattleAPI_PlusEqualFloat::ValueB' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_PlusEqualFloat, ReturnValue) == 0x000008, "Member 'EndBattleAPI_PlusEqualFloat::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.PlusEqualInterger
// 0x000C (0x000C - 0x0000)
struct EndBattleAPI_PlusEqualInterger final
{
public:
	int32                                         ValueA;                                            // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ValueB;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_PlusEqualInterger) == 0x000004, "Wrong alignment on EndBattleAPI_PlusEqualInterger");
static_assert(sizeof(EndBattleAPI_PlusEqualInterger) == 0x00000C, "Wrong size on EndBattleAPI_PlusEqualInterger");
static_assert(offsetof(EndBattleAPI_PlusEqualInterger, ValueA) == 0x000000, "Member 'EndBattleAPI_PlusEqualInterger::ValueA' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_PlusEqualInterger, ValueB) == 0x000004, "Member 'EndBattleAPI_PlusEqualInterger::ValueB' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_PlusEqualInterger, ReturnValue) == 0x000008, "Member 'EndBattleAPI_PlusEqualInterger::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.RangeSwitch2
// 0x0018 (0x0018 - 0x0000)
struct EndBattleAPI_RangeSwitch2 final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Min1;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Max1;                                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Min2;                                              // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Max2;                                              // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bContainEqual;                                     // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndAIBranch2Other                            OutSignal;                                         // 0x0015(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_RangeSwitch2) == 0x000004, "Wrong alignment on EndBattleAPI_RangeSwitch2");
static_assert(sizeof(EndBattleAPI_RangeSwitch2) == 0x000018, "Wrong size on EndBattleAPI_RangeSwitch2");
static_assert(offsetof(EndBattleAPI_RangeSwitch2, Value) == 0x000000, "Member 'EndBattleAPI_RangeSwitch2::Value' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RangeSwitch2, Min1) == 0x000004, "Member 'EndBattleAPI_RangeSwitch2::Min1' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RangeSwitch2, Max1) == 0x000008, "Member 'EndBattleAPI_RangeSwitch2::Max1' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RangeSwitch2, Min2) == 0x00000C, "Member 'EndBattleAPI_RangeSwitch2::Min2' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RangeSwitch2, Max2) == 0x000010, "Member 'EndBattleAPI_RangeSwitch2::Max2' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RangeSwitch2, bContainEqual) == 0x000014, "Member 'EndBattleAPI_RangeSwitch2::bContainEqual' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RangeSwitch2, OutSignal) == 0x000015, "Member 'EndBattleAPI_RangeSwitch2::OutSignal' has a wrong offset!");

// Function EndGame.EndBattleAPI.RangeSwitch3
// 0x0020 (0x0020 - 0x0000)
struct EndBattleAPI_RangeSwitch3 final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Min1;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Max1;                                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Min2;                                              // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Max2;                                              // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Min3;                                              // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Max3;                                              // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bContainEqual;                                     // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndAIBranch3Other                            OutSignal;                                         // 0x001D(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_RangeSwitch3) == 0x000004, "Wrong alignment on EndBattleAPI_RangeSwitch3");
static_assert(sizeof(EndBattleAPI_RangeSwitch3) == 0x000020, "Wrong size on EndBattleAPI_RangeSwitch3");
static_assert(offsetof(EndBattleAPI_RangeSwitch3, Value) == 0x000000, "Member 'EndBattleAPI_RangeSwitch3::Value' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RangeSwitch3, Min1) == 0x000004, "Member 'EndBattleAPI_RangeSwitch3::Min1' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RangeSwitch3, Max1) == 0x000008, "Member 'EndBattleAPI_RangeSwitch3::Max1' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RangeSwitch3, Min2) == 0x00000C, "Member 'EndBattleAPI_RangeSwitch3::Min2' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RangeSwitch3, Max2) == 0x000010, "Member 'EndBattleAPI_RangeSwitch3::Max2' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RangeSwitch3, Min3) == 0x000014, "Member 'EndBattleAPI_RangeSwitch3::Min3' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RangeSwitch3, Max3) == 0x000018, "Member 'EndBattleAPI_RangeSwitch3::Max3' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RangeSwitch3, bContainEqual) == 0x00001C, "Member 'EndBattleAPI_RangeSwitch3::bContainEqual' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RangeSwitch3, OutSignal) == 0x00001D, "Member 'EndBattleAPI_RangeSwitch3::OutSignal' has a wrong offset!");

// Function EndGame.EndBattleAPI.RangeSwitch4
// 0x0028 (0x0028 - 0x0000)
struct EndBattleAPI_RangeSwitch4 final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Min1;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Max1;                                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Min2;                                              // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Max2;                                              // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Min3;                                              // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Max3;                                              // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Min4;                                              // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Max4;                                              // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bContainEqual;                                     // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndAIBranch4Other                            OutSignal;                                         // 0x0025(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26[0x2];                                       // 0x0026(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_RangeSwitch4) == 0x000004, "Wrong alignment on EndBattleAPI_RangeSwitch4");
static_assert(sizeof(EndBattleAPI_RangeSwitch4) == 0x000028, "Wrong size on EndBattleAPI_RangeSwitch4");
static_assert(offsetof(EndBattleAPI_RangeSwitch4, Value) == 0x000000, "Member 'EndBattleAPI_RangeSwitch4::Value' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RangeSwitch4, Min1) == 0x000004, "Member 'EndBattleAPI_RangeSwitch4::Min1' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RangeSwitch4, Max1) == 0x000008, "Member 'EndBattleAPI_RangeSwitch4::Max1' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RangeSwitch4, Min2) == 0x00000C, "Member 'EndBattleAPI_RangeSwitch4::Min2' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RangeSwitch4, Max2) == 0x000010, "Member 'EndBattleAPI_RangeSwitch4::Max2' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RangeSwitch4, Min3) == 0x000014, "Member 'EndBattleAPI_RangeSwitch4::Min3' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RangeSwitch4, Max3) == 0x000018, "Member 'EndBattleAPI_RangeSwitch4::Max3' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RangeSwitch4, Min4) == 0x00001C, "Member 'EndBattleAPI_RangeSwitch4::Min4' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RangeSwitch4, Max4) == 0x000020, "Member 'EndBattleAPI_RangeSwitch4::Max4' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RangeSwitch4, bContainEqual) == 0x000024, "Member 'EndBattleAPI_RangeSwitch4::bContainEqual' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RangeSwitch4, OutSignal) == 0x000025, "Member 'EndBattleAPI_RangeSwitch4::OutSignal' has a wrong offset!");

// Function EndGame.EndBattleAPI.RatioBranch2
// 0x000C (0x000C - 0x0000)
struct EndBattleAPI_RatioBranch2 final
{
public:
	int32                                         Case1;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Case2;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndAIBranch2                                 OutSignal;                                         // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_RatioBranch2) == 0x000004, "Wrong alignment on EndBattleAPI_RatioBranch2");
static_assert(sizeof(EndBattleAPI_RatioBranch2) == 0x00000C, "Wrong size on EndBattleAPI_RatioBranch2");
static_assert(offsetof(EndBattleAPI_RatioBranch2, Case1) == 0x000000, "Member 'EndBattleAPI_RatioBranch2::Case1' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RatioBranch2, Case2) == 0x000004, "Member 'EndBattleAPI_RatioBranch2::Case2' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RatioBranch2, OutSignal) == 0x000008, "Member 'EndBattleAPI_RatioBranch2::OutSignal' has a wrong offset!");

// Function EndGame.EndBattleAPI.RatioBranch3
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_RatioBranch3 final
{
public:
	int32                                         Case1;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Case2;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Case3;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndAIBranch3                                 OutSignal;                                         // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_RatioBranch3) == 0x000004, "Wrong alignment on EndBattleAPI_RatioBranch3");
static_assert(sizeof(EndBattleAPI_RatioBranch3) == 0x000010, "Wrong size on EndBattleAPI_RatioBranch3");
static_assert(offsetof(EndBattleAPI_RatioBranch3, Case1) == 0x000000, "Member 'EndBattleAPI_RatioBranch3::Case1' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RatioBranch3, Case2) == 0x000004, "Member 'EndBattleAPI_RatioBranch3::Case2' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RatioBranch3, Case3) == 0x000008, "Member 'EndBattleAPI_RatioBranch3::Case3' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RatioBranch3, OutSignal) == 0x00000C, "Member 'EndBattleAPI_RatioBranch3::OutSignal' has a wrong offset!");

// Function EndGame.EndBattleAPI.RatioBranch4
// 0x0014 (0x0014 - 0x0000)
struct EndBattleAPI_RatioBranch4 final
{
public:
	int32                                         Case1;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Case2;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Case3;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Case4;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndAIBranch4                                 OutSignal;                                         // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_RatioBranch4) == 0x000004, "Wrong alignment on EndBattleAPI_RatioBranch4");
static_assert(sizeof(EndBattleAPI_RatioBranch4) == 0x000014, "Wrong size on EndBattleAPI_RatioBranch4");
static_assert(offsetof(EndBattleAPI_RatioBranch4, Case1) == 0x000000, "Member 'EndBattleAPI_RatioBranch4::Case1' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RatioBranch4, Case2) == 0x000004, "Member 'EndBattleAPI_RatioBranch4::Case2' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RatioBranch4, Case3) == 0x000008, "Member 'EndBattleAPI_RatioBranch4::Case3' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RatioBranch4, Case4) == 0x00000C, "Member 'EndBattleAPI_RatioBranch4::Case4' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RatioBranch4, OutSignal) == 0x000010, "Member 'EndBattleAPI_RatioBranch4::OutSignal' has a wrong offset!");

// Function EndGame.EndBattleAPI.RatioBranch5
// 0x0018 (0x0018 - 0x0000)
struct EndBattleAPI_RatioBranch5 final
{
public:
	int32                                         Case1;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Case2;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Case3;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Case4;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Case5;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndAIBranch5                                 OutSignal;                                         // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_RatioBranch5) == 0x000004, "Wrong alignment on EndBattleAPI_RatioBranch5");
static_assert(sizeof(EndBattleAPI_RatioBranch5) == 0x000018, "Wrong size on EndBattleAPI_RatioBranch5");
static_assert(offsetof(EndBattleAPI_RatioBranch5, Case1) == 0x000000, "Member 'EndBattleAPI_RatioBranch5::Case1' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RatioBranch5, Case2) == 0x000004, "Member 'EndBattleAPI_RatioBranch5::Case2' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RatioBranch5, Case3) == 0x000008, "Member 'EndBattleAPI_RatioBranch5::Case3' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RatioBranch5, Case4) == 0x00000C, "Member 'EndBattleAPI_RatioBranch5::Case4' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RatioBranch5, Case5) == 0x000010, "Member 'EndBattleAPI_RatioBranch5::Case5' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RatioBranch5, OutSignal) == 0x000014, "Member 'EndBattleAPI_RatioBranch5::OutSignal' has a wrong offset!");

// Function EndGame.EndBattleAPI.RatioBranch6
// 0x001C (0x001C - 0x0000)
struct EndBattleAPI_RatioBranch6 final
{
public:
	int32                                         Case1;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Case2;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Case3;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Case4;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Case5;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Case6;                                             // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndAIBranch6                                 OutSignal;                                         // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_RatioBranch6) == 0x000004, "Wrong alignment on EndBattleAPI_RatioBranch6");
static_assert(sizeof(EndBattleAPI_RatioBranch6) == 0x00001C, "Wrong size on EndBattleAPI_RatioBranch6");
static_assert(offsetof(EndBattleAPI_RatioBranch6, Case1) == 0x000000, "Member 'EndBattleAPI_RatioBranch6::Case1' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RatioBranch6, Case2) == 0x000004, "Member 'EndBattleAPI_RatioBranch6::Case2' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RatioBranch6, Case3) == 0x000008, "Member 'EndBattleAPI_RatioBranch6::Case3' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RatioBranch6, Case4) == 0x00000C, "Member 'EndBattleAPI_RatioBranch6::Case4' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RatioBranch6, Case5) == 0x000010, "Member 'EndBattleAPI_RatioBranch6::Case5' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RatioBranch6, Case6) == 0x000014, "Member 'EndBattleAPI_RatioBranch6::Case6' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RatioBranch6, OutSignal) == 0x000018, "Member 'EndBattleAPI_RatioBranch6::OutSignal' has a wrong offset!");

// Function EndGame.EndBattleAPI.RatioBranch7
// 0x0020 (0x0020 - 0x0000)
struct EndBattleAPI_RatioBranch7 final
{
public:
	int32                                         Case1;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Case2;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Case3;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Case4;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Case5;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Case6;                                             // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Case7;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndAIBranch7                                 OutSignal;                                         // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_RatioBranch7) == 0x000004, "Wrong alignment on EndBattleAPI_RatioBranch7");
static_assert(sizeof(EndBattleAPI_RatioBranch7) == 0x000020, "Wrong size on EndBattleAPI_RatioBranch7");
static_assert(offsetof(EndBattleAPI_RatioBranch7, Case1) == 0x000000, "Member 'EndBattleAPI_RatioBranch7::Case1' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RatioBranch7, Case2) == 0x000004, "Member 'EndBattleAPI_RatioBranch7::Case2' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RatioBranch7, Case3) == 0x000008, "Member 'EndBattleAPI_RatioBranch7::Case3' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RatioBranch7, Case4) == 0x00000C, "Member 'EndBattleAPI_RatioBranch7::Case4' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RatioBranch7, Case5) == 0x000010, "Member 'EndBattleAPI_RatioBranch7::Case5' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RatioBranch7, Case6) == 0x000014, "Member 'EndBattleAPI_RatioBranch7::Case6' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RatioBranch7, Case7) == 0x000018, "Member 'EndBattleAPI_RatioBranch7::Case7' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RatioBranch7, OutSignal) == 0x00001C, "Member 'EndBattleAPI_RatioBranch7::OutSignal' has a wrong offset!");

// Function EndGame.EndBattleAPI.RatioBranch8
// 0x0024 (0x0024 - 0x0000)
struct EndBattleAPI_RatioBranch8 final
{
public:
	int32                                         Case1;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Case2;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Case3;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Case4;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Case5;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Case6;                                             // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Case7;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Case8;                                             // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndAIBranch8                                 OutSignal;                                         // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_RatioBranch8) == 0x000004, "Wrong alignment on EndBattleAPI_RatioBranch8");
static_assert(sizeof(EndBattleAPI_RatioBranch8) == 0x000024, "Wrong size on EndBattleAPI_RatioBranch8");
static_assert(offsetof(EndBattleAPI_RatioBranch8, Case1) == 0x000000, "Member 'EndBattleAPI_RatioBranch8::Case1' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RatioBranch8, Case2) == 0x000004, "Member 'EndBattleAPI_RatioBranch8::Case2' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RatioBranch8, Case3) == 0x000008, "Member 'EndBattleAPI_RatioBranch8::Case3' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RatioBranch8, Case4) == 0x00000C, "Member 'EndBattleAPI_RatioBranch8::Case4' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RatioBranch8, Case5) == 0x000010, "Member 'EndBattleAPI_RatioBranch8::Case5' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RatioBranch8, Case6) == 0x000014, "Member 'EndBattleAPI_RatioBranch8::Case6' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RatioBranch8, Case7) == 0x000018, "Member 'EndBattleAPI_RatioBranch8::Case7' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RatioBranch8, Case8) == 0x00001C, "Member 'EndBattleAPI_RatioBranch8::Case8' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RatioBranch8, OutSignal) == 0x000020, "Member 'EndBattleAPI_RatioBranch8::OutSignal' has a wrong offset!");

// Function EndGame.EndBattleAPI.RaycastSphereWallFromChara
// 0x00A8 (0x00A8 - 0x0000)
struct EndBattleAPI_RaycastSphereWallFromChara final
{
public:
	class AEndCharacter*                          InCharacter;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InOffsetYaw;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InCastRange;                                       // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InRadius;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OutHit;                                            // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OutDistance;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             OutParam;                                          // 0x0020(0x0088)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_RaycastSphereWallFromChara) == 0x000008, "Wrong alignment on EndBattleAPI_RaycastSphereWallFromChara");
static_assert(sizeof(EndBattleAPI_RaycastSphereWallFromChara) == 0x0000A8, "Wrong size on EndBattleAPI_RaycastSphereWallFromChara");
static_assert(offsetof(EndBattleAPI_RaycastSphereWallFromChara, InCharacter) == 0x000000, "Member 'EndBattleAPI_RaycastSphereWallFromChara::InCharacter' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RaycastSphereWallFromChara, InOffsetYaw) == 0x000008, "Member 'EndBattleAPI_RaycastSphereWallFromChara::InOffsetYaw' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RaycastSphereWallFromChara, InCastRange) == 0x00000C, "Member 'EndBattleAPI_RaycastSphereWallFromChara::InCastRange' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RaycastSphereWallFromChara, InRadius) == 0x000010, "Member 'EndBattleAPI_RaycastSphereWallFromChara::InRadius' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RaycastSphereWallFromChara, OutHit) == 0x000014, "Member 'EndBattleAPI_RaycastSphereWallFromChara::OutHit' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RaycastSphereWallFromChara, OutDistance) == 0x000018, "Member 'EndBattleAPI_RaycastSphereWallFromChara::OutDistance' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RaycastSphereWallFromChara, OutParam) == 0x000020, "Member 'EndBattleAPI_RaycastSphereWallFromChara::OutParam' has a wrong offset!");

// Function EndGame.EndBattleAPI.RaycastWallFromChara
// 0x00A0 (0x00A0 - 0x0000)
struct EndBattleAPI_RaycastWallFromChara final
{
public:
	class AEndCharacter*                          InCharacter;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InOffsetYaw;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InCastRange;                                       // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OutHit;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OutDistance;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             OutParam;                                          // 0x0018(0x0088)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_RaycastWallFromChara) == 0x000008, "Wrong alignment on EndBattleAPI_RaycastWallFromChara");
static_assert(sizeof(EndBattleAPI_RaycastWallFromChara) == 0x0000A0, "Wrong size on EndBattleAPI_RaycastWallFromChara");
static_assert(offsetof(EndBattleAPI_RaycastWallFromChara, InCharacter) == 0x000000, "Member 'EndBattleAPI_RaycastWallFromChara::InCharacter' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RaycastWallFromChara, InOffsetYaw) == 0x000008, "Member 'EndBattleAPI_RaycastWallFromChara::InOffsetYaw' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RaycastWallFromChara, InCastRange) == 0x00000C, "Member 'EndBattleAPI_RaycastWallFromChara::InCastRange' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RaycastWallFromChara, OutHit) == 0x000010, "Member 'EndBattleAPI_RaycastWallFromChara::OutHit' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RaycastWallFromChara, OutDistance) == 0x000014, "Member 'EndBattleAPI_RaycastWallFromChara::OutDistance' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RaycastWallFromChara, OutParam) == 0x000018, "Member 'EndBattleAPI_RaycastWallFromChara::OutParam' has a wrong offset!");

// Function EndGame.EndBattleAPI.RemoveAttachEffect
// 0x0020 (0x0020 - 0x0000)
struct EndBattleAPI_RemoveAttachEffect final
{
public:
	class AEndCharacter*                          chara;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttachSocketName;                                  // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ResourceName;                                      // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDestroy;                                          // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_RemoveAttachEffect) == 0x000008, "Wrong alignment on EndBattleAPI_RemoveAttachEffect");
static_assert(sizeof(EndBattleAPI_RemoveAttachEffect) == 0x000020, "Wrong size on EndBattleAPI_RemoveAttachEffect");
static_assert(offsetof(EndBattleAPI_RemoveAttachEffect, chara) == 0x000000, "Member 'EndBattleAPI_RemoveAttachEffect::chara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RemoveAttachEffect, AttachSocketName) == 0x000008, "Member 'EndBattleAPI_RemoveAttachEffect::AttachSocketName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RemoveAttachEffect, ResourceName) == 0x000010, "Member 'EndBattleAPI_RemoveAttachEffect::ResourceName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RemoveAttachEffect, bDestroy) == 0x000018, "Member 'EndBattleAPI_RemoveAttachEffect::bDestroy' has a wrong offset!");

// Function EndGame.EndBattleAPI.RemoveCollisionIgnoreActor
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_RemoveCollisionIgnoreActor final
{
public:
	class AEndCharacter*                          ownerChara;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   IgnoreActorName;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_RemoveCollisionIgnoreActor) == 0x000008, "Wrong alignment on EndBattleAPI_RemoveCollisionIgnoreActor");
static_assert(sizeof(EndBattleAPI_RemoveCollisionIgnoreActor) == 0x000010, "Wrong size on EndBattleAPI_RemoveCollisionIgnoreActor");
static_assert(offsetof(EndBattleAPI_RemoveCollisionIgnoreActor, ownerChara) == 0x000000, "Member 'EndBattleAPI_RemoveCollisionIgnoreActor::ownerChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RemoveCollisionIgnoreActor, IgnoreActorName) == 0x000008, "Member 'EndBattleAPI_RemoveCollisionIgnoreActor::IgnoreActorName' has a wrong offset!");

// Function EndGame.EndBattleAPI.RemoveFreeAct
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAPI_RemoveFreeAct final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_RemoveFreeAct) == 0x000004, "Wrong alignment on EndBattleAPI_RemoveFreeAct");
static_assert(sizeof(EndBattleAPI_RemoveFreeAct) == 0x000008, "Wrong size on EndBattleAPI_RemoveFreeAct");
static_assert(offsetof(EndBattleAPI_RemoveFreeAct, InName) == 0x000000, "Member 'EndBattleAPI_RemoveFreeAct::InName' has a wrong offset!");

// Function EndGame.EndBattleAPI.RemoveSpecialStatusChangeType
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_RemoveSpecialStatusChangeType final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndBattleSpecialStatusChangeType             InType;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_RemoveSpecialStatusChangeType) == 0x000008, "Wrong alignment on EndBattleAPI_RemoveSpecialStatusChangeType");
static_assert(sizeof(EndBattleAPI_RemoveSpecialStatusChangeType) == 0x000010, "Wrong size on EndBattleAPI_RemoveSpecialStatusChangeType");
static_assert(offsetof(EndBattleAPI_RemoveSpecialStatusChangeType, InChara) == 0x000000, "Member 'EndBattleAPI_RemoveSpecialStatusChangeType::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RemoveSpecialStatusChangeType, InType) == 0x000008, "Member 'EndBattleAPI_RemoveSpecialStatusChangeType::InType' has a wrong offset!");

// Function EndGame.EndBattleAPI.RemoveStatusChange
// 0x0002 (0x0002 - 0x0000)
struct EndBattleAPI_RemoveStatusChange final
{
public:
	EPlayerType                                   PlayerType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndBattleStatusChangeType                    statusTypeype;                                     // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_RemoveStatusChange) == 0x000001, "Wrong alignment on EndBattleAPI_RemoveStatusChange");
static_assert(sizeof(EndBattleAPI_RemoveStatusChange) == 0x000002, "Wrong size on EndBattleAPI_RemoveStatusChange");
static_assert(offsetof(EndBattleAPI_RemoveStatusChange, PlayerType) == 0x000000, "Member 'EndBattleAPI_RemoveStatusChange::PlayerType' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RemoveStatusChange, statusTypeype) == 0x000001, "Member 'EndBattleAPI_RemoveStatusChange::statusTypeype' has a wrong offset!");

// Function EndGame.EndBattleAPI.RequestAIPCAbility
// 0x0020 (0x0020 - 0x0000)
struct EndBattleAPI_RequestAIPCAbility final
{
public:
	EPlayerType                                   PlayerType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   AbilityID;                                         // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 TargetActor;                                       // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_RequestAIPCAbility) == 0x000008, "Wrong alignment on EndBattleAPI_RequestAIPCAbility");
static_assert(sizeof(EndBattleAPI_RequestAIPCAbility) == 0x000020, "Wrong size on EndBattleAPI_RequestAIPCAbility");
static_assert(offsetof(EndBattleAPI_RequestAIPCAbility, PlayerType) == 0x000000, "Member 'EndBattleAPI_RequestAIPCAbility::PlayerType' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RequestAIPCAbility, AbilityID) == 0x000004, "Member 'EndBattleAPI_RequestAIPCAbility::AbilityID' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RequestAIPCAbility, TargetActor) == 0x000010, "Member 'EndBattleAPI_RequestAIPCAbility::TargetActor' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RequestAIPCAbility, ReturnValue) == 0x000018, "Member 'EndBattleAPI_RequestAIPCAbility::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.RequestAIPCExecuteAbility
// 0x0018 (0x0018 - 0x0000)
struct EndBattleAPI_RequestAIPCExecuteAbility final
{
public:
	class AEndCharacter*                          TargetCharacter;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AbilityID;                                         // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlayerType                                   PlayerCharacter;                                   // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_RequestAIPCExecuteAbility) == 0x000008, "Wrong alignment on EndBattleAPI_RequestAIPCExecuteAbility");
static_assert(sizeof(EndBattleAPI_RequestAIPCExecuteAbility) == 0x000018, "Wrong size on EndBattleAPI_RequestAIPCExecuteAbility");
static_assert(offsetof(EndBattleAPI_RequestAIPCExecuteAbility, TargetCharacter) == 0x000000, "Member 'EndBattleAPI_RequestAIPCExecuteAbility::TargetCharacter' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RequestAIPCExecuteAbility, AbilityID) == 0x000008, "Member 'EndBattleAPI_RequestAIPCExecuteAbility::AbilityID' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RequestAIPCExecuteAbility, PlayerCharacter) == 0x000010, "Member 'EndBattleAPI_RequestAIPCExecuteAbility::PlayerCharacter' has a wrong offset!");

// Function EndGame.EndBattleAPI.RequestFreeActMotion
// 0x0020 (0x0020 - 0x0000)
struct EndBattleAPI_RequestFreeActMotion final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AEndCharacter*                          InChara;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InMotionName;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InLoop;                                            // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_RequestFreeActMotion) == 0x000008, "Wrong alignment on EndBattleAPI_RequestFreeActMotion");
static_assert(sizeof(EndBattleAPI_RequestFreeActMotion) == 0x000020, "Wrong size on EndBattleAPI_RequestFreeActMotion");
static_assert(offsetof(EndBattleAPI_RequestFreeActMotion, InName) == 0x000000, "Member 'EndBattleAPI_RequestFreeActMotion::InName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RequestFreeActMotion, InChara) == 0x000008, "Member 'EndBattleAPI_RequestFreeActMotion::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RequestFreeActMotion, InMotionName) == 0x000010, "Member 'EndBattleAPI_RequestFreeActMotion::InMotionName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RequestFreeActMotion, InLoop) == 0x000018, "Member 'EndBattleAPI_RequestFreeActMotion::InLoop' has a wrong offset!");

// Function EndGame.EndBattleAPI.RequestFreeActMotionEnd
// 0x0018 (0x0018 - 0x0000)
struct EndBattleAPI_RequestFreeActMotionEnd final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AEndCharacter*                          InChara;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InEndName;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_RequestFreeActMotionEnd) == 0x000008, "Wrong alignment on EndBattleAPI_RequestFreeActMotionEnd");
static_assert(sizeof(EndBattleAPI_RequestFreeActMotionEnd) == 0x000018, "Wrong size on EndBattleAPI_RequestFreeActMotionEnd");
static_assert(offsetof(EndBattleAPI_RequestFreeActMotionEnd, InName) == 0x000000, "Member 'EndBattleAPI_RequestFreeActMotionEnd::InName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RequestFreeActMotionEnd, InChara) == 0x000008, "Member 'EndBattleAPI_RequestFreeActMotionEnd::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RequestFreeActMotionEnd, InEndName) == 0x000010, "Member 'EndBattleAPI_RequestFreeActMotionEnd::InEndName' has a wrong offset!");

// Function EndGame.EndBattleAPI.RequestFreeActMove
// 0x0028 (0x0028 - 0x0000)
struct EndBattleAPI_RequestFreeActMove final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AEndCharacter*                          InChara;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InLocation;                                        // 0x0010(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ToleranceWalkRadius;                               // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ToleranceGoalRadius;                               // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InDash;                                            // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_RequestFreeActMove) == 0x000008, "Wrong alignment on EndBattleAPI_RequestFreeActMove");
static_assert(sizeof(EndBattleAPI_RequestFreeActMove) == 0x000028, "Wrong size on EndBattleAPI_RequestFreeActMove");
static_assert(offsetof(EndBattleAPI_RequestFreeActMove, InName) == 0x000000, "Member 'EndBattleAPI_RequestFreeActMove::InName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RequestFreeActMove, InChara) == 0x000008, "Member 'EndBattleAPI_RequestFreeActMove::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RequestFreeActMove, InLocation) == 0x000010, "Member 'EndBattleAPI_RequestFreeActMove::InLocation' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RequestFreeActMove, ToleranceWalkRadius) == 0x00001C, "Member 'EndBattleAPI_RequestFreeActMove::ToleranceWalkRadius' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RequestFreeActMove, ToleranceGoalRadius) == 0x000020, "Member 'EndBattleAPI_RequestFreeActMove::ToleranceGoalRadius' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RequestFreeActMove, InDash) == 0x000024, "Member 'EndBattleAPI_RequestFreeActMove::InDash' has a wrong offset!");

// Function EndGame.EndBattleAPI.RequestFreeActMoves
// 0x0030 (0x0030 - 0x0000)
struct EndBattleAPI_RequestFreeActMoves final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AEndCharacter*                          InChara;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        InLocations;                                       // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         ToleranceWalkRadius;                               // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ToleranceGoalRadius;                               // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InDash;                                            // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_RequestFreeActMoves) == 0x000008, "Wrong alignment on EndBattleAPI_RequestFreeActMoves");
static_assert(sizeof(EndBattleAPI_RequestFreeActMoves) == 0x000030, "Wrong size on EndBattleAPI_RequestFreeActMoves");
static_assert(offsetof(EndBattleAPI_RequestFreeActMoves, InName) == 0x000000, "Member 'EndBattleAPI_RequestFreeActMoves::InName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RequestFreeActMoves, InChara) == 0x000008, "Member 'EndBattleAPI_RequestFreeActMoves::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RequestFreeActMoves, InLocations) == 0x000010, "Member 'EndBattleAPI_RequestFreeActMoves::InLocations' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RequestFreeActMoves, ToleranceWalkRadius) == 0x000020, "Member 'EndBattleAPI_RequestFreeActMoves::ToleranceWalkRadius' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RequestFreeActMoves, ToleranceGoalRadius) == 0x000024, "Member 'EndBattleAPI_RequestFreeActMoves::ToleranceGoalRadius' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RequestFreeActMoves, InDash) == 0x000028, "Member 'EndBattleAPI_RequestFreeActMoves::InDash' has a wrong offset!");

// Function EndGame.EndBattleAPI.RequestFreeActTurn
// 0x0018 (0x0018 - 0x0000)
struct EndBattleAPI_RequestFreeActTurn final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AEndCharacter*                          InChara;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InYaw;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ToleranceYaw;                                      // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_RequestFreeActTurn) == 0x000008, "Wrong alignment on EndBattleAPI_RequestFreeActTurn");
static_assert(sizeof(EndBattleAPI_RequestFreeActTurn) == 0x000018, "Wrong size on EndBattleAPI_RequestFreeActTurn");
static_assert(offsetof(EndBattleAPI_RequestFreeActTurn, InName) == 0x000000, "Member 'EndBattleAPI_RequestFreeActTurn::InName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RequestFreeActTurn, InChara) == 0x000008, "Member 'EndBattleAPI_RequestFreeActTurn::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RequestFreeActTurn, InYaw) == 0x000010, "Member 'EndBattleAPI_RequestFreeActTurn::InYaw' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RequestFreeActTurn, ToleranceYaw) == 0x000014, "Member 'EndBattleAPI_RequestFreeActTurn::ToleranceYaw' has a wrong offset!");

// Function EndGame.EndBattleAPI.RequestFreeActWarp
// 0x0020 (0x0020 - 0x0000)
struct EndBattleAPI_RequestFreeActWarp final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AEndCharacter*                          InChara;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InLocation;                                        // 0x0010(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InYaw;                                             // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_RequestFreeActWarp) == 0x000008, "Wrong alignment on EndBattleAPI_RequestFreeActWarp");
static_assert(sizeof(EndBattleAPI_RequestFreeActWarp) == 0x000020, "Wrong size on EndBattleAPI_RequestFreeActWarp");
static_assert(offsetof(EndBattleAPI_RequestFreeActWarp, InName) == 0x000000, "Member 'EndBattleAPI_RequestFreeActWarp::InName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RequestFreeActWarp, InChara) == 0x000008, "Member 'EndBattleAPI_RequestFreeActWarp::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RequestFreeActWarp, InLocation) == 0x000010, "Member 'EndBattleAPI_RequestFreeActWarp::InLocation' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RequestFreeActWarp, InYaw) == 0x00001C, "Member 'EndBattleAPI_RequestFreeActWarp::InYaw' has a wrong offset!");

// Function EndGame.EndBattleAPI.RequestSyncActionEnd
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_RequestSyncActionEnd final
{
public:
	class AEndCharacter*                          chara;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndBattleSyncActionEndType                   Type;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_RequestSyncActionEnd) == 0x000008, "Wrong alignment on EndBattleAPI_RequestSyncActionEnd");
static_assert(sizeof(EndBattleAPI_RequestSyncActionEnd) == 0x000010, "Wrong size on EndBattleAPI_RequestSyncActionEnd");
static_assert(offsetof(EndBattleAPI_RequestSyncActionEnd, chara) == 0x000000, "Member 'EndBattleAPI_RequestSyncActionEnd::chara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RequestSyncActionEnd, Type) == 0x000008, "Member 'EndBattleAPI_RequestSyncActionEnd::Type' has a wrong offset!");

// Function EndGame.EndBattleAPI.RequestWaveBattleScene
// 0x0038 (0x0038 - 0x0000)
struct EndBattleAPI_RequestWaveBattleScene final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   baseBattleSceneId;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AEndCharacter*                          causerChara;                                       // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EndWaveBattleSceneType                        Type;                                              // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         IntegerArgument00;                                 // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IntegerArgument01;                                 // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IntegerArgument02;                                 // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IntegerArgument03;                                 // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x002C(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_RequestWaveBattleScene) == 0x000008, "Wrong alignment on EndBattleAPI_RequestWaveBattleScene");
static_assert(sizeof(EndBattleAPI_RequestWaveBattleScene) == 0x000038, "Wrong size on EndBattleAPI_RequestWaveBattleScene");
static_assert(offsetof(EndBattleAPI_RequestWaveBattleScene, WorldContextObject) == 0x000000, "Member 'EndBattleAPI_RequestWaveBattleScene::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RequestWaveBattleScene, baseBattleSceneId) == 0x000008, "Member 'EndBattleAPI_RequestWaveBattleScene::baseBattleSceneId' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RequestWaveBattleScene, causerChara) == 0x000010, "Member 'EndBattleAPI_RequestWaveBattleScene::causerChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RequestWaveBattleScene, Type) == 0x000018, "Member 'EndBattleAPI_RequestWaveBattleScene::Type' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RequestWaveBattleScene, IntegerArgument00) == 0x00001C, "Member 'EndBattleAPI_RequestWaveBattleScene::IntegerArgument00' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RequestWaveBattleScene, IntegerArgument01) == 0x000020, "Member 'EndBattleAPI_RequestWaveBattleScene::IntegerArgument01' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RequestWaveBattleScene, IntegerArgument02) == 0x000024, "Member 'EndBattleAPI_RequestWaveBattleScene::IntegerArgument02' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RequestWaveBattleScene, IntegerArgument03) == 0x000028, "Member 'EndBattleAPI_RequestWaveBattleScene::IntegerArgument03' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RequestWaveBattleScene, ReturnValue) == 0x00002C, "Member 'EndBattleAPI_RequestWaveBattleScene::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.RequestWaveBattleSceneWithPopTransform
// 0x0048 (0x0048 - 0x0000)
struct EndBattleAPI_RequestWaveBattleSceneWithPopTransform final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   baseBattleSceneId;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AEndCharacter*                          causerChara;                                       // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EndWaveBattleSceneType                        Type;                                              // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         IntegerArgument00;                                 // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IntegerArgument01;                                 // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IntegerArgument02;                                 // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IntegerArgument03;                                 // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTransform>                     popTransforms;                                     // 0x0030(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_RequestWaveBattleSceneWithPopTransform) == 0x000008, "Wrong alignment on EndBattleAPI_RequestWaveBattleSceneWithPopTransform");
static_assert(sizeof(EndBattleAPI_RequestWaveBattleSceneWithPopTransform) == 0x000048, "Wrong size on EndBattleAPI_RequestWaveBattleSceneWithPopTransform");
static_assert(offsetof(EndBattleAPI_RequestWaveBattleSceneWithPopTransform, WorldContextObject) == 0x000000, "Member 'EndBattleAPI_RequestWaveBattleSceneWithPopTransform::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RequestWaveBattleSceneWithPopTransform, baseBattleSceneId) == 0x000008, "Member 'EndBattleAPI_RequestWaveBattleSceneWithPopTransform::baseBattleSceneId' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RequestWaveBattleSceneWithPopTransform, causerChara) == 0x000010, "Member 'EndBattleAPI_RequestWaveBattleSceneWithPopTransform::causerChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RequestWaveBattleSceneWithPopTransform, Type) == 0x000018, "Member 'EndBattleAPI_RequestWaveBattleSceneWithPopTransform::Type' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RequestWaveBattleSceneWithPopTransform, IntegerArgument00) == 0x00001C, "Member 'EndBattleAPI_RequestWaveBattleSceneWithPopTransform::IntegerArgument00' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RequestWaveBattleSceneWithPopTransform, IntegerArgument01) == 0x000020, "Member 'EndBattleAPI_RequestWaveBattleSceneWithPopTransform::IntegerArgument01' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RequestWaveBattleSceneWithPopTransform, IntegerArgument02) == 0x000024, "Member 'EndBattleAPI_RequestWaveBattleSceneWithPopTransform::IntegerArgument02' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RequestWaveBattleSceneWithPopTransform, IntegerArgument03) == 0x000028, "Member 'EndBattleAPI_RequestWaveBattleSceneWithPopTransform::IntegerArgument03' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RequestWaveBattleSceneWithPopTransform, popTransforms) == 0x000030, "Member 'EndBattleAPI_RequestWaveBattleSceneWithPopTransform::popTransforms' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_RequestWaveBattleSceneWithPopTransform, ReturnValue) == 0x000040, "Member 'EndBattleAPI_RequestWaveBattleSceneWithPopTransform::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.ResetActiveBattleAIController
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAPI_ResetActiveBattleAIController final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_ResetActiveBattleAIController) == 0x000008, "Wrong alignment on EndBattleAPI_ResetActiveBattleAIController");
static_assert(sizeof(EndBattleAPI_ResetActiveBattleAIController) == 0x000008, "Wrong size on EndBattleAPI_ResetActiveBattleAIController");
static_assert(offsetof(EndBattleAPI_ResetActiveBattleAIController, InChara) == 0x000000, "Member 'EndBattleAPI_ResetActiveBattleAIController::InChara' has a wrong offset!");

// Function EndGame.EndBattleAPI.ResetAIPCCombatArea
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAPI_ResetAIPCCombatArea final
{
public:
	EPlayerType                                   PlayerCharacter;                                   // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_ResetAIPCCombatArea) == 0x000001, "Wrong alignment on EndBattleAPI_ResetAIPCCombatArea");
static_assert(sizeof(EndBattleAPI_ResetAIPCCombatArea) == 0x000001, "Wrong size on EndBattleAPI_ResetAIPCCombatArea");
static_assert(offsetof(EndBattleAPI_ResetAIPCCombatArea, PlayerCharacter) == 0x000000, "Member 'EndBattleAPI_ResetAIPCCombatArea::PlayerCharacter' has a wrong offset!");

// Function EndGame.EndBattleAPI.ResetAIPCExcludeTarget
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAPI_ResetAIPCExcludeTarget final
{
public:
	EPlayerType                                   PlayerType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_ResetAIPCExcludeTarget) == 0x000001, "Wrong alignment on EndBattleAPI_ResetAIPCExcludeTarget");
static_assert(sizeof(EndBattleAPI_ResetAIPCExcludeTarget) == 0x000001, "Wrong size on EndBattleAPI_ResetAIPCExcludeTarget");
static_assert(offsetof(EndBattleAPI_ResetAIPCExcludeTarget, PlayerType) == 0x000000, "Member 'EndBattleAPI_ResetAIPCExcludeTarget::PlayerType' has a wrong offset!");

// Function EndGame.EndBattleAPI.ResetAIPCTargetChoosingParam
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAPI_ResetAIPCTargetChoosingParam final
{
public:
	EPlayerType                                   PlayerCharacter;                                   // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_ResetAIPCTargetChoosingParam) == 0x000001, "Wrong alignment on EndBattleAPI_ResetAIPCTargetChoosingParam");
static_assert(sizeof(EndBattleAPI_ResetAIPCTargetChoosingParam) == 0x000001, "Wrong size on EndBattleAPI_ResetAIPCTargetChoosingParam");
static_assert(offsetof(EndBattleAPI_ResetAIPCTargetChoosingParam, PlayerCharacter) == 0x000000, "Member 'EndBattleAPI_ResetAIPCTargetChoosingParam::PlayerCharacter' has a wrong offset!");

// Function EndGame.EndBattleAPI.ResetAIPCTargetDirect
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAPI_ResetAIPCTargetDirect final
{
public:
	EPlayerType                                   PlayerCharacter;                                   // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_ResetAIPCTargetDirect) == 0x000001, "Wrong alignment on EndBattleAPI_ResetAIPCTargetDirect");
static_assert(sizeof(EndBattleAPI_ResetAIPCTargetDirect) == 0x000001, "Wrong size on EndBattleAPI_ResetAIPCTargetDirect");
static_assert(offsetof(EndBattleAPI_ResetAIPCTargetDirect, PlayerCharacter) == 0x000000, "Member 'EndBattleAPI_ResetAIPCTargetDirect::PlayerCharacter' has a wrong offset!");

// Function EndGame.EndBattleAPI.ResetCharacterMovementMode
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAPI_ResetCharacterMovementMode final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_ResetCharacterMovementMode) == 0x000008, "Wrong alignment on EndBattleAPI_ResetCharacterMovementMode");
static_assert(sizeof(EndBattleAPI_ResetCharacterMovementMode) == 0x000008, "Wrong size on EndBattleAPI_ResetCharacterMovementMode");
static_assert(offsetof(EndBattleAPI_ResetCharacterMovementMode, InChara) == 0x000000, "Member 'EndBattleAPI_ResetCharacterMovementMode::InChara' has a wrong offset!");

// Function EndGame.EndBattleAPI.ResetFreeActFromChara
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAPI_ResetFreeActFromChara final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_ResetFreeActFromChara) == 0x000008, "Wrong alignment on EndBattleAPI_ResetFreeActFromChara");
static_assert(sizeof(EndBattleAPI_ResetFreeActFromChara) == 0x000008, "Wrong size on EndBattleAPI_ResetFreeActFromChara");
static_assert(offsetof(EndBattleAPI_ResetFreeActFromChara, InChara) == 0x000000, "Member 'EndBattleAPI_ResetFreeActFromChara::InChara' has a wrong offset!");

// Function EndGame.EndBattleAPI.ResetSummonCutSceneReturnLocation
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAPI_ResetSummonCutSceneReturnLocation final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_ResetSummonCutSceneReturnLocation) == 0x000008, "Wrong alignment on EndBattleAPI_ResetSummonCutSceneReturnLocation");
static_assert(sizeof(EndBattleAPI_ResetSummonCutSceneReturnLocation) == 0x000008, "Wrong size on EndBattleAPI_ResetSummonCutSceneReturnLocation");
static_assert(offsetof(EndBattleAPI_ResetSummonCutSceneReturnLocation, Character) == 0x000000, "Member 'EndBattleAPI_ResetSummonCutSceneReturnLocation::Character' has a wrong offset!");

// Function EndGame.EndBattleAPI.SendBattleMessage
// 0x0018 (0x0018 - 0x0000)
struct EndBattleAPI_SendBattleMessage final
{
public:
	EBattleMessageTarget                          InTarget;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 InMessage;                                         // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_SendBattleMessage) == 0x000008, "Wrong alignment on EndBattleAPI_SendBattleMessage");
static_assert(sizeof(EndBattleAPI_SendBattleMessage) == 0x000018, "Wrong size on EndBattleAPI_SendBattleMessage");
static_assert(offsetof(EndBattleAPI_SendBattleMessage, InTarget) == 0x000000, "Member 'EndBattleAPI_SendBattleMessage::InTarget' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SendBattleMessage, InMessage) == 0x000008, "Member 'EndBattleAPI_SendBattleMessage::InMessage' has a wrong offset!");

// Function EndGame.EndBattleAPI.SendDangerWarning
// 0x0038 (0x0038 - 0x0000)
struct EndBattleAPI_SendDangerWarning final
{
public:
	class AEndCharacter*                          Instigator;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndBattleAIDangerAreaType                    DangerAreaType;                                    // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CenterLocation;                                    // 0x000C(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Direction;                                         // 0x0018(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Length;                                            // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Width;                                             // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_SendDangerWarning) == 0x000008, "Wrong alignment on EndBattleAPI_SendDangerWarning");
static_assert(sizeof(EndBattleAPI_SendDangerWarning) == 0x000038, "Wrong size on EndBattleAPI_SendDangerWarning");
static_assert(offsetof(EndBattleAPI_SendDangerWarning, Instigator) == 0x000000, "Member 'EndBattleAPI_SendDangerWarning::Instigator' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SendDangerWarning, DangerAreaType) == 0x000008, "Member 'EndBattleAPI_SendDangerWarning::DangerAreaType' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SendDangerWarning, CenterLocation) == 0x00000C, "Member 'EndBattleAPI_SendDangerWarning::CenterLocation' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SendDangerWarning, Direction) == 0x000018, "Member 'EndBattleAPI_SendDangerWarning::Direction' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SendDangerWarning, Radius) == 0x000024, "Member 'EndBattleAPI_SendDangerWarning::Radius' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SendDangerWarning, Length) == 0x000028, "Member 'EndBattleAPI_SendDangerWarning::Length' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SendDangerWarning, Width) == 0x00002C, "Member 'EndBattleAPI_SendDangerWarning::Width' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SendDangerWarning, Duration) == 0x000030, "Member 'EndBattleAPI_SendDangerWarning::Duration' has a wrong offset!");

// Function EndGame.EndBattleAPI.SendDangerWarningMultipleShape
// 0x0030 (0x0030 - 0x0000)
struct EndBattleAPI_SendDangerWarningMultipleShape final
{
public:
	struct FEndBattleAIDangerWarningParam         DangerWarning;                                     // 0x0000(0x0030)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_SendDangerWarningMultipleShape) == 0x000008, "Wrong alignment on EndBattleAPI_SendDangerWarningMultipleShape");
static_assert(sizeof(EndBattleAPI_SendDangerWarningMultipleShape) == 0x000030, "Wrong size on EndBattleAPI_SendDangerWarningMultipleShape");
static_assert(offsetof(EndBattleAPI_SendDangerWarningMultipleShape, DangerWarning) == 0x000000, "Member 'EndBattleAPI_SendDangerWarningMultipleShape::DangerWarning' has a wrong offset!");

// Function EndGame.EndBattleAPI.SendDangerWarningStaticVolume
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_SendDangerWarningStaticVolume final
{
public:
	class AEndCharacter*                          Instigator;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GroupID;                                           // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_SendDangerWarningStaticVolume) == 0x000008, "Wrong alignment on EndBattleAPI_SendDangerWarningStaticVolume");
static_assert(sizeof(EndBattleAPI_SendDangerWarningStaticVolume) == 0x000010, "Wrong size on EndBattleAPI_SendDangerWarningStaticVolume");
static_assert(offsetof(EndBattleAPI_SendDangerWarningStaticVolume, Instigator) == 0x000000, "Member 'EndBattleAPI_SendDangerWarningStaticVolume::Instigator' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SendDangerWarningStaticVolume, Duration) == 0x000008, "Member 'EndBattleAPI_SendDangerWarningStaticVolume::Duration' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SendDangerWarningStaticVolume, GroupID) == 0x00000C, "Member 'EndBattleAPI_SendDangerWarningStaticVolume::GroupID' has a wrong offset!");

// Function EndGame.EndBattleAPI.SendMetaMessage
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_SendMetaMessage final
{
public:
	class FString                                 InMessage;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_SendMetaMessage) == 0x000008, "Wrong alignment on EndBattleAPI_SendMetaMessage");
static_assert(sizeof(EndBattleAPI_SendMetaMessage) == 0x000010, "Wrong size on EndBattleAPI_SendMetaMessage");
static_assert(offsetof(EndBattleAPI_SendMetaMessage, InMessage) == 0x000000, "Member 'EndBattleAPI_SendMetaMessage::InMessage' has a wrong offset!");

// Function EndGame.EndBattleAPI.SendMetaMessageAboutCharacter
// 0x0018 (0x0018 - 0x0000)
struct EndBattleAPI_SendMetaMessageAboutCharacter final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InMessage;                                         // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_SendMetaMessageAboutCharacter) == 0x000008, "Wrong alignment on EndBattleAPI_SendMetaMessageAboutCharacter");
static_assert(sizeof(EndBattleAPI_SendMetaMessageAboutCharacter) == 0x000018, "Wrong size on EndBattleAPI_SendMetaMessageAboutCharacter");
static_assert(offsetof(EndBattleAPI_SendMetaMessageAboutCharacter, InChara) == 0x000000, "Member 'EndBattleAPI_SendMetaMessageAboutCharacter::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SendMetaMessageAboutCharacter, InMessage) == 0x000008, "Member 'EndBattleAPI_SendMetaMessageAboutCharacter::InMessage' has a wrong offset!");

// Function EndGame.EndBattleAPI.SendMetaMessageToChara
// 0x0020 (0x0020 - 0x0000)
struct EndBattleAPI_SendMetaMessageToChara final
{
public:
	class AEndCharacter*                          InSend;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AEndCharacter*                          InResv;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InMessage;                                         // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_SendMetaMessageToChara) == 0x000008, "Wrong alignment on EndBattleAPI_SendMetaMessageToChara");
static_assert(sizeof(EndBattleAPI_SendMetaMessageToChara) == 0x000020, "Wrong size on EndBattleAPI_SendMetaMessageToChara");
static_assert(offsetof(EndBattleAPI_SendMetaMessageToChara, InSend) == 0x000000, "Member 'EndBattleAPI_SendMetaMessageToChara::InSend' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SendMetaMessageToChara, InResv) == 0x000008, "Member 'EndBattleAPI_SendMetaMessageToChara::InResv' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SendMetaMessageToChara, InMessage) == 0x000010, "Member 'EndBattleAPI_SendMetaMessageToChara::InMessage' has a wrong offset!");

// Function EndGame.EndBattleAPI.SendSystemMessage
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_SendSystemMessage final
{
public:
	class FString                                 InMessage;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_SendSystemMessage) == 0x000008, "Wrong alignment on EndBattleAPI_SendSystemMessage");
static_assert(sizeof(EndBattleAPI_SendSystemMessage) == 0x000010, "Wrong size on EndBattleAPI_SendSystemMessage");
static_assert(offsetof(EndBattleAPI_SendSystemMessage, InMessage) == 0x000000, "Member 'EndBattleAPI_SendSystemMessage::InMessage' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetActiveBattleAIController
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_SetActiveBattleAIController final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AEndBattleAIController*                 BattleAIController;                                // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_SetActiveBattleAIController) == 0x000008, "Wrong alignment on EndBattleAPI_SetActiveBattleAIController");
static_assert(sizeof(EndBattleAPI_SetActiveBattleAIController) == 0x000010, "Wrong size on EndBattleAPI_SetActiveBattleAIController");
static_assert(offsetof(EndBattleAPI_SetActiveBattleAIController, InChara) == 0x000000, "Member 'EndBattleAPI_SetActiveBattleAIController::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetActiveBattleAIController, BattleAIController) == 0x000008, "Member 'EndBattleAPI_SetActiveBattleAIController::BattleAIController' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetActiveBattleAIControllerFromID
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_SetActiveBattleAIControllerFromID final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InID;                                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_SetActiveBattleAIControllerFromID) == 0x000008, "Wrong alignment on EndBattleAPI_SetActiveBattleAIControllerFromID");
static_assert(sizeof(EndBattleAPI_SetActiveBattleAIControllerFromID) == 0x000010, "Wrong size on EndBattleAPI_SetActiveBattleAIControllerFromID");
static_assert(offsetof(EndBattleAPI_SetActiveBattleAIControllerFromID, InChara) == 0x000000, "Member 'EndBattleAPI_SetActiveBattleAIControllerFromID::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetActiveBattleAIControllerFromID, InID) == 0x000008, "Member 'EndBattleAPI_SetActiveBattleAIControllerFromID::InID' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetActorLocationAndRotationToRoot
// 0x0020 (0x0020 - 0x0000)
struct EndBattleAPI_SetActorLocationAndRotationToRoot final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NewLocation;                                       // 0x0008(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               NewRotator;                                        // 0x0014(0x000C)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_SetActorLocationAndRotationToRoot) == 0x000008, "Wrong alignment on EndBattleAPI_SetActorLocationAndRotationToRoot");
static_assert(sizeof(EndBattleAPI_SetActorLocationAndRotationToRoot) == 0x000020, "Wrong size on EndBattleAPI_SetActorLocationAndRotationToRoot");
static_assert(offsetof(EndBattleAPI_SetActorLocationAndRotationToRoot, Character) == 0x000000, "Member 'EndBattleAPI_SetActorLocationAndRotationToRoot::Character' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetActorLocationAndRotationToRoot, NewLocation) == 0x000008, "Member 'EndBattleAPI_SetActorLocationAndRotationToRoot::NewLocation' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetActorLocationAndRotationToRoot, NewRotator) == 0x000014, "Member 'EndBattleAPI_SetActorLocationAndRotationToRoot::NewRotator' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetActorPause
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_SetActorPause final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTickPause;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDrawPause;                                        // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_SetActorPause) == 0x000008, "Wrong alignment on EndBattleAPI_SetActorPause");
static_assert(sizeof(EndBattleAPI_SetActorPause) == 0x000010, "Wrong size on EndBattleAPI_SetActorPause");
static_assert(offsetof(EndBattleAPI_SetActorPause, Actor) == 0x000000, "Member 'EndBattleAPI_SetActorPause::Actor' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetActorPause, bTickPause) == 0x000008, "Member 'EndBattleAPI_SetActorPause::bTickPause' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetActorPause, bDrawPause) == 0x000009, "Member 'EndBattleAPI_SetActorPause::bDrawPause' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetAIPCCombatDistanceOffset
// 0x000C (0x000C - 0x0000)
struct EndBattleAPI_SetAIPCCombatDistanceOffset final
{
public:
	EPlayerType                                   PlayerCharacter;                                   // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Offset;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AlsoAbilityOffset;                                 // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_SetAIPCCombatDistanceOffset) == 0x000004, "Wrong alignment on EndBattleAPI_SetAIPCCombatDistanceOffset");
static_assert(sizeof(EndBattleAPI_SetAIPCCombatDistanceOffset) == 0x00000C, "Wrong size on EndBattleAPI_SetAIPCCombatDistanceOffset");
static_assert(offsetof(EndBattleAPI_SetAIPCCombatDistanceOffset, PlayerCharacter) == 0x000000, "Member 'EndBattleAPI_SetAIPCCombatDistanceOffset::PlayerCharacter' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetAIPCCombatDistanceOffset, Offset) == 0x000004, "Member 'EndBattleAPI_SetAIPCCombatDistanceOffset::Offset' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetAIPCCombatDistanceOffset, AlsoAbilityOffset) == 0x000008, "Member 'EndBattleAPI_SetAIPCCombatDistanceOffset::AlsoAbilityOffset' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetAIPCDefenceActor
// 0x0018 (0x0018 - 0x0000)
struct EndBattleAPI_SetAIPCDefenceActor final
{
public:
	EPlayerType                                   PlayerType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 TargetActor;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDistance;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BestDistance;                                      // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_SetAIPCDefenceActor) == 0x000008, "Wrong alignment on EndBattleAPI_SetAIPCDefenceActor");
static_assert(sizeof(EndBattleAPI_SetAIPCDefenceActor) == 0x000018, "Wrong size on EndBattleAPI_SetAIPCDefenceActor");
static_assert(offsetof(EndBattleAPI_SetAIPCDefenceActor, PlayerType) == 0x000000, "Member 'EndBattleAPI_SetAIPCDefenceActor::PlayerType' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetAIPCDefenceActor, TargetActor) == 0x000008, "Member 'EndBattleAPI_SetAIPCDefenceActor::TargetActor' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetAIPCDefenceActor, MaxDistance) == 0x000010, "Member 'EndBattleAPI_SetAIPCDefenceActor::MaxDistance' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetAIPCDefenceActor, BestDistance) == 0x000014, "Member 'EndBattleAPI_SetAIPCDefenceActor::BestDistance' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetAIPCDefenceLocation
// 0x0018 (0x0018 - 0x0000)
struct EndBattleAPI_SetAIPCDefenceLocation final
{
public:
	EPlayerType                                   PlayerType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                TargetLocation;                                    // 0x0004(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDistance;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BestDistance;                                      // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_SetAIPCDefenceLocation) == 0x000004, "Wrong alignment on EndBattleAPI_SetAIPCDefenceLocation");
static_assert(sizeof(EndBattleAPI_SetAIPCDefenceLocation) == 0x000018, "Wrong size on EndBattleAPI_SetAIPCDefenceLocation");
static_assert(offsetof(EndBattleAPI_SetAIPCDefenceLocation, PlayerType) == 0x000000, "Member 'EndBattleAPI_SetAIPCDefenceLocation::PlayerType' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetAIPCDefenceLocation, TargetLocation) == 0x000004, "Member 'EndBattleAPI_SetAIPCDefenceLocation::TargetLocation' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetAIPCDefenceLocation, MaxDistance) == 0x000010, "Member 'EndBattleAPI_SetAIPCDefenceLocation::MaxDistance' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetAIPCDefenceLocation, BestDistance) == 0x000014, "Member 'EndBattleAPI_SetAIPCDefenceLocation::BestDistance' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetAIPCExcludeTarget
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_SetAIPCExcludeTarget final
{
public:
	EPlayerType                                   PlayerType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AEndCharacter*                          TargetCharacter;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_SetAIPCExcludeTarget) == 0x000008, "Wrong alignment on EndBattleAPI_SetAIPCExcludeTarget");
static_assert(sizeof(EndBattleAPI_SetAIPCExcludeTarget) == 0x000010, "Wrong size on EndBattleAPI_SetAIPCExcludeTarget");
static_assert(offsetof(EndBattleAPI_SetAIPCExcludeTarget, PlayerType) == 0x000000, "Member 'EndBattleAPI_SetAIPCExcludeTarget::PlayerType' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetAIPCExcludeTarget, TargetCharacter) == 0x000008, "Member 'EndBattleAPI_SetAIPCExcludeTarget::TargetCharacter' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetAIPCFleeTargets
// 0x0018 (0x0018 - 0x0000)
struct EndBattleAPI_SetAIPCFleeTargets final
{
public:
	class AEndCharacter*                          PlayerCharacter;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AEndCharacter*>                  FleeTargets;                                       // 0x0008(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_SetAIPCFleeTargets) == 0x000008, "Wrong alignment on EndBattleAPI_SetAIPCFleeTargets");
static_assert(sizeof(EndBattleAPI_SetAIPCFleeTargets) == 0x000018, "Wrong size on EndBattleAPI_SetAIPCFleeTargets");
static_assert(offsetof(EndBattleAPI_SetAIPCFleeTargets, PlayerCharacter) == 0x000000, "Member 'EndBattleAPI_SetAIPCFleeTargets::PlayerCharacter' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetAIPCFleeTargets, FleeTargets) == 0x000008, "Member 'EndBattleAPI_SetAIPCFleeTargets::FleeTargets' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetAIPCTakeCover
// 0x0018 (0x0018 - 0x0000)
struct EndBattleAPI_SetAIPCTakeCover final
{
public:
	EPlayerType                                   PlayerCharacter;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Flag;                                              // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AEndCharacter*                          CoverTarget;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CoverTargetPartsID;                                // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_SetAIPCTakeCover) == 0x000008, "Wrong alignment on EndBattleAPI_SetAIPCTakeCover");
static_assert(sizeof(EndBattleAPI_SetAIPCTakeCover) == 0x000018, "Wrong size on EndBattleAPI_SetAIPCTakeCover");
static_assert(offsetof(EndBattleAPI_SetAIPCTakeCover, PlayerCharacter) == 0x000000, "Member 'EndBattleAPI_SetAIPCTakeCover::PlayerCharacter' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetAIPCTakeCover, Flag) == 0x000001, "Member 'EndBattleAPI_SetAIPCTakeCover::Flag' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetAIPCTakeCover, CoverTarget) == 0x000008, "Member 'EndBattleAPI_SetAIPCTakeCover::CoverTarget' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetAIPCTakeCover, CoverTargetPartsID) == 0x000010, "Member 'EndBattleAPI_SetAIPCTakeCover::CoverTargetPartsID' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetAIPCTargetChoosingParam
// 0x0030 (0x0030 - 0x0000)
struct EndBattleAPI_SetAIPCTargetChoosingParam final
{
public:
	EPlayerType                                   PlayerCharacter;                                   // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<ETargetChoosingTag>                    PriorityTagList;                                   // 0x0008(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	ETargetChoosingSort                           SortMethod;                                        // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AEndCharacter*>                  AssignedTargets;                                   // 0x0020(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_SetAIPCTargetChoosingParam) == 0x000008, "Wrong alignment on EndBattleAPI_SetAIPCTargetChoosingParam");
static_assert(sizeof(EndBattleAPI_SetAIPCTargetChoosingParam) == 0x000030, "Wrong size on EndBattleAPI_SetAIPCTargetChoosingParam");
static_assert(offsetof(EndBattleAPI_SetAIPCTargetChoosingParam, PlayerCharacter) == 0x000000, "Member 'EndBattleAPI_SetAIPCTargetChoosingParam::PlayerCharacter' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetAIPCTargetChoosingParam, PriorityTagList) == 0x000008, "Member 'EndBattleAPI_SetAIPCTargetChoosingParam::PriorityTagList' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetAIPCTargetChoosingParam, SortMethod) == 0x000018, "Member 'EndBattleAPI_SetAIPCTargetChoosingParam::SortMethod' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetAIPCTargetChoosingParam, AssignedTargets) == 0x000020, "Member 'EndBattleAPI_SetAIPCTargetChoosingParam::AssignedTargets' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetAIPCTargetDirect
// 0x0020 (0x0020 - 0x0000)
struct EndBattleAPI_SetAIPCTargetDirect final
{
public:
	EPlayerType                                   PlayerCharacter;                                   // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AEndCharacter*                          TargetCharacter;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   partsID;                                           // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetOverrideTime;                                // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_SetAIPCTargetDirect) == 0x000008, "Wrong alignment on EndBattleAPI_SetAIPCTargetDirect");
static_assert(sizeof(EndBattleAPI_SetAIPCTargetDirect) == 0x000020, "Wrong size on EndBattleAPI_SetAIPCTargetDirect");
static_assert(offsetof(EndBattleAPI_SetAIPCTargetDirect, PlayerCharacter) == 0x000000, "Member 'EndBattleAPI_SetAIPCTargetDirect::PlayerCharacter' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetAIPCTargetDirect, TargetCharacter) == 0x000008, "Member 'EndBattleAPI_SetAIPCTargetDirect::TargetCharacter' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetAIPCTargetDirect, partsID) == 0x000010, "Member 'EndBattleAPI_SetAIPCTargetDirect::partsID' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetAIPCTargetDirect, TargetOverrideTime) == 0x000018, "Member 'EndBattleAPI_SetAIPCTargetDirect::TargetOverrideTime' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetAIPCTargetDirectMultipleParts
// 0x0020 (0x0020 - 0x0000)
struct EndBattleAPI_SetAIPCTargetDirectMultipleParts final
{
public:
	EPlayerType                                   PlayerCharacter;                                   // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AEndCharacter*                          TargetCharacter;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           PartsIDList;                                       // 0x0010(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_SetAIPCTargetDirectMultipleParts) == 0x000008, "Wrong alignment on EndBattleAPI_SetAIPCTargetDirectMultipleParts");
static_assert(sizeof(EndBattleAPI_SetAIPCTargetDirectMultipleParts) == 0x000020, "Wrong size on EndBattleAPI_SetAIPCTargetDirectMultipleParts");
static_assert(offsetof(EndBattleAPI_SetAIPCTargetDirectMultipleParts, PlayerCharacter) == 0x000000, "Member 'EndBattleAPI_SetAIPCTargetDirectMultipleParts::PlayerCharacter' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetAIPCTargetDirectMultipleParts, TargetCharacter) == 0x000008, "Member 'EndBattleAPI_SetAIPCTargetDirectMultipleParts::TargetCharacter' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetAIPCTargetDirectMultipleParts, PartsIDList) == 0x000010, "Member 'EndBattleAPI_SetAIPCTargetDirectMultipleParts::PartsIDList' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetAIPCToSafeArea
// 0x0002 (0x0002 - 0x0000)
struct EndBattleAPI_SetAIPCToSafeArea final
{
public:
	EPlayerType                                   PlayerCharacter;                                   // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Flag;                                              // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_SetAIPCToSafeArea) == 0x000001, "Wrong alignment on EndBattleAPI_SetAIPCToSafeArea");
static_assert(sizeof(EndBattleAPI_SetAIPCToSafeArea) == 0x000002, "Wrong size on EndBattleAPI_SetAIPCToSafeArea");
static_assert(offsetof(EndBattleAPI_SetAIPCToSafeArea, PlayerCharacter) == 0x000000, "Member 'EndBattleAPI_SetAIPCToSafeArea::PlayerCharacter' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetAIPCToSafeArea, Flag) == 0x000001, "Member 'EndBattleAPI_SetAIPCToSafeArea::Flag' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetATB
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAPI_SetATB final
{
public:
	EPlayerType                                   PlayerType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Value;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_SetATB) == 0x000004, "Wrong alignment on EndBattleAPI_SetATB");
static_assert(sizeof(EndBattleAPI_SetATB) == 0x000008, "Wrong size on EndBattleAPI_SetATB");
static_assert(offsetof(EndBattleAPI_SetATB, PlayerType) == 0x000000, "Member 'EndBattleAPI_SetATB::PlayerType' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetATB, Value) == 0x000004, "Member 'EndBattleAPI_SetATB::Value' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetATBAll
// 0x0004 (0x0004 - 0x0000)
struct EndBattleAPI_SetATBAll final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_SetATBAll) == 0x000004, "Wrong alignment on EndBattleAPI_SetATBAll");
static_assert(sizeof(EndBattleAPI_SetATBAll) == 0x000004, "Wrong size on EndBattleAPI_SetATBAll");
static_assert(offsetof(EndBattleAPI_SetATBAll, Value) == 0x000000, "Member 'EndBattleAPI_SetATBAll::Value' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetBattleSafeTransform
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_SetBattleSafeTransform final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnable;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_SetBattleSafeTransform) == 0x000008, "Wrong alignment on EndBattleAPI_SetBattleSafeTransform");
static_assert(sizeof(EndBattleAPI_SetBattleSafeTransform) == 0x000010, "Wrong size on EndBattleAPI_SetBattleSafeTransform");
static_assert(offsetof(EndBattleAPI_SetBattleSafeTransform, InChara) == 0x000000, "Member 'EndBattleAPI_SetBattleSafeTransform::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetBattleSafeTransform, bEnable) == 0x000008, "Member 'EndBattleAPI_SetBattleSafeTransform::bEnable' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetBattleSceneCount
// 0x000C (0x000C - 0x0000)
struct EndBattleAPI_SetBattleSceneCount final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InCount;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_SetBattleSceneCount) == 0x000004, "Wrong alignment on EndBattleAPI_SetBattleSceneCount");
static_assert(sizeof(EndBattleAPI_SetBattleSceneCount) == 0x00000C, "Wrong size on EndBattleAPI_SetBattleSceneCount");
static_assert(offsetof(EndBattleAPI_SetBattleSceneCount, InName) == 0x000000, "Member 'EndBattleAPI_SetBattleSceneCount::InName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetBattleSceneCount, InCount) == 0x000008, "Member 'EndBattleAPI_SetBattleSceneCount::InCount' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetBattleSceneCountLifeCycle
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_SetBattleSceneCountLifeCycle final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndBattleSceneCountLifeCycleType             InType;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InValue;                                           // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_SetBattleSceneCountLifeCycle) == 0x000004, "Wrong alignment on EndBattleAPI_SetBattleSceneCountLifeCycle");
static_assert(sizeof(EndBattleAPI_SetBattleSceneCountLifeCycle) == 0x000010, "Wrong size on EndBattleAPI_SetBattleSceneCountLifeCycle");
static_assert(offsetof(EndBattleAPI_SetBattleSceneCountLifeCycle, InName) == 0x000000, "Member 'EndBattleAPI_SetBattleSceneCountLifeCycle::InName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetBattleSceneCountLifeCycle, InType) == 0x000008, "Member 'EndBattleAPI_SetBattleSceneCountLifeCycle::InType' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetBattleSceneCountLifeCycle, InValue) == 0x00000C, "Member 'EndBattleAPI_SetBattleSceneCountLifeCycle::InValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetCharacterMovementMode
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_SetCharacterMovementMode final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMovable;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHitWall;                                          // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHitObject;                                        // 0x000A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFitFloor;                                         // 0x000B(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMaxWeight;                                        // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_SetCharacterMovementMode) == 0x000008, "Wrong alignment on EndBattleAPI_SetCharacterMovementMode");
static_assert(sizeof(EndBattleAPI_SetCharacterMovementMode) == 0x000010, "Wrong size on EndBattleAPI_SetCharacterMovementMode");
static_assert(offsetof(EndBattleAPI_SetCharacterMovementMode, InChara) == 0x000000, "Member 'EndBattleAPI_SetCharacterMovementMode::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetCharacterMovementMode, bMovable) == 0x000008, "Member 'EndBattleAPI_SetCharacterMovementMode::bMovable' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetCharacterMovementMode, bHitWall) == 0x000009, "Member 'EndBattleAPI_SetCharacterMovementMode::bHitWall' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetCharacterMovementMode, bHitObject) == 0x00000A, "Member 'EndBattleAPI_SetCharacterMovementMode::bHitObject' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetCharacterMovementMode, bFitFloor) == 0x00000B, "Member 'EndBattleAPI_SetCharacterMovementMode::bFitFloor' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetCharacterMovementMode, bMaxWeight) == 0x00000C, "Member 'EndBattleAPI_SetCharacterMovementMode::bMaxWeight' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetDisableTarget
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_SetDisableTarget final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InDisable;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          hitDamage;                                         // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TargetParts;                                       // 0x000A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          refreshTargetLock;                                 // 0x000B(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_SetDisableTarget) == 0x000008, "Wrong alignment on EndBattleAPI_SetDisableTarget");
static_assert(sizeof(EndBattleAPI_SetDisableTarget) == 0x000010, "Wrong size on EndBattleAPI_SetDisableTarget");
static_assert(offsetof(EndBattleAPI_SetDisableTarget, InChara) == 0x000000, "Member 'EndBattleAPI_SetDisableTarget::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetDisableTarget, InDisable) == 0x000008, "Member 'EndBattleAPI_SetDisableTarget::InDisable' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetDisableTarget, hitDamage) == 0x000009, "Member 'EndBattleAPI_SetDisableTarget::hitDamage' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetDisableTarget, TargetParts) == 0x00000A, "Member 'EndBattleAPI_SetDisableTarget::TargetParts' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetDisableTarget, refreshTargetLock) == 0x00000B, "Member 'EndBattleAPI_SetDisableTarget::refreshTargetLock' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetDisplayEnemyStatusCharacter
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAPI_SetDisplayEnemyStatusCharacter final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_SetDisplayEnemyStatusCharacter) == 0x000008, "Wrong alignment on EndBattleAPI_SetDisplayEnemyStatusCharacter");
static_assert(sizeof(EndBattleAPI_SetDisplayEnemyStatusCharacter) == 0x000008, "Wrong size on EndBattleAPI_SetDisplayEnemyStatusCharacter");
static_assert(offsetof(EndBattleAPI_SetDisplayEnemyStatusCharacter, Character) == 0x000000, "Member 'EndBattleAPI_SetDisplayEnemyStatusCharacter::Character' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetDrawDangerArea
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAPI_SetDrawDangerArea final
{
public:
	bool                                          Flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_SetDrawDangerArea) == 0x000001, "Wrong alignment on EndBattleAPI_SetDrawDangerArea");
static_assert(sizeof(EndBattleAPI_SetDrawDangerArea) == 0x000001, "Wrong size on EndBattleAPI_SetDrawDangerArea");
static_assert(offsetof(EndBattleAPI_SetDrawDangerArea, Flag) == 0x000000, "Member 'EndBattleAPI_SetDrawDangerArea::Flag' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetDrawPauseEnvironmentPhysicsActors
// 0x0018 (0x0018 - 0x0000)
struct EndBattleAPI_SetDrawPauseEnvironmentPhysicsActors final
{
public:
	TArray<class AActor*>                         objectList;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          drawPause;                                         // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          tickPause;                                         // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_SetDrawPauseEnvironmentPhysicsActors) == 0x000008, "Wrong alignment on EndBattleAPI_SetDrawPauseEnvironmentPhysicsActors");
static_assert(sizeof(EndBattleAPI_SetDrawPauseEnvironmentPhysicsActors) == 0x000018, "Wrong size on EndBattleAPI_SetDrawPauseEnvironmentPhysicsActors");
static_assert(offsetof(EndBattleAPI_SetDrawPauseEnvironmentPhysicsActors, objectList) == 0x000000, "Member 'EndBattleAPI_SetDrawPauseEnvironmentPhysicsActors::objectList' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetDrawPauseEnvironmentPhysicsActors, drawPause) == 0x000010, "Member 'EndBattleAPI_SetDrawPauseEnvironmentPhysicsActors::drawPause' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetDrawPauseEnvironmentPhysicsActors, tickPause) == 0x000011, "Member 'EndBattleAPI_SetDrawPauseEnvironmentPhysicsActors::tickPause' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetEnableEquipmentSkillFrogAlways
// 0x0002 (0x0002 - 0x0000)
struct EndBattleAPI_SetEnableEquipmentSkillFrogAlways final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          frogAfterDebuffDisable;                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_SetEnableEquipmentSkillFrogAlways) == 0x000001, "Wrong alignment on EndBattleAPI_SetEnableEquipmentSkillFrogAlways");
static_assert(sizeof(EndBattleAPI_SetEnableEquipmentSkillFrogAlways) == 0x000002, "Wrong size on EndBattleAPI_SetEnableEquipmentSkillFrogAlways");
static_assert(offsetof(EndBattleAPI_SetEnableEquipmentSkillFrogAlways, Enable) == 0x000000, "Member 'EndBattleAPI_SetEnableEquipmentSkillFrogAlways::Enable' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetEnableEquipmentSkillFrogAlways, frogAfterDebuffDisable) == 0x000001, "Member 'EndBattleAPI_SetEnableEquipmentSkillFrogAlways::frogAfterDebuffDisable' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetEnableSensorInfluence
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_SetEnableSensorInfluence final
{
public:
	EPlayerType                                   PlayerType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Enable;                                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AEndCharacter*                          causerCharacter;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_SetEnableSensorInfluence) == 0x000008, "Wrong alignment on EndBattleAPI_SetEnableSensorInfluence");
static_assert(sizeof(EndBattleAPI_SetEnableSensorInfluence) == 0x000010, "Wrong size on EndBattleAPI_SetEnableSensorInfluence");
static_assert(offsetof(EndBattleAPI_SetEnableSensorInfluence, PlayerType) == 0x000000, "Member 'EndBattleAPI_SetEnableSensorInfluence::PlayerType' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetEnableSensorInfluence, Enable) == 0x000001, "Member 'EndBattleAPI_SetEnableSensorInfluence::Enable' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetEnableSensorInfluence, causerCharacter) == 0x000008, "Member 'EndBattleAPI_SetEnableSensorInfluence::causerCharacter' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetFindTargetNoLimit
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAPI_SetFindTargetNoLimit final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_SetFindTargetNoLimit) == 0x000001, "Wrong alignment on EndBattleAPI_SetFindTargetNoLimit");
static_assert(sizeof(EndBattleAPI_SetFindTargetNoLimit) == 0x000001, "Wrong size on EndBattleAPI_SetFindTargetNoLimit");
static_assert(offsetof(EndBattleAPI_SetFindTargetNoLimit, Value) == 0x000000, "Member 'EndBattleAPI_SetFindTargetNoLimit::Value' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetForceWeakConditionPointMax
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_SetForceWeakConditionPointMax final
{
public:
	class AEndCharacter*                          TargetCharacter;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Number;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_SetForceWeakConditionPointMax) == 0x000008, "Wrong alignment on EndBattleAPI_SetForceWeakConditionPointMax");
static_assert(sizeof(EndBattleAPI_SetForceWeakConditionPointMax) == 0x000010, "Wrong size on EndBattleAPI_SetForceWeakConditionPointMax");
static_assert(offsetof(EndBattleAPI_SetForceWeakConditionPointMax, TargetCharacter) == 0x000000, "Member 'EndBattleAPI_SetForceWeakConditionPointMax::TargetCharacter' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetForceWeakConditionPointMax, Number) == 0x000008, "Member 'EndBattleAPI_SetForceWeakConditionPointMax::Number' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetForceWeakConditionPointMax, ReturnValue) == 0x00000C, "Member 'EndBattleAPI_SetForceWeakConditionPointMax::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetHiddenBreakable
// 0x0018 (0x0018 - 0x0000)
struct EndBattleAPI_SetHiddenBreakable final
{
public:
	bool                                          bHidden;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           BreakableIDs;                                      // 0x0008(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_SetHiddenBreakable) == 0x000008, "Wrong alignment on EndBattleAPI_SetHiddenBreakable");
static_assert(sizeof(EndBattleAPI_SetHiddenBreakable) == 0x000018, "Wrong size on EndBattleAPI_SetHiddenBreakable");
static_assert(offsetof(EndBattleAPI_SetHiddenBreakable, bHidden) == 0x000000, "Member 'EndBattleAPI_SetHiddenBreakable::bHidden' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetHiddenBreakable, BreakableIDs) == 0x000008, "Member 'EndBattleAPI_SetHiddenBreakable::BreakableIDs' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetHiddenVolumeRelatedBreakable
// 0x0018 (0x0018 - 0x0000)
struct EndBattleAPI_SetHiddenVolumeRelatedBreakable final
{
public:
	EEndBattleBreakableRelationVolumeType         VolumeType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHidden;                                           // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           BreakableIDs;                                      // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_SetHiddenVolumeRelatedBreakable) == 0x000008, "Wrong alignment on EndBattleAPI_SetHiddenVolumeRelatedBreakable");
static_assert(sizeof(EndBattleAPI_SetHiddenVolumeRelatedBreakable) == 0x000018, "Wrong size on EndBattleAPI_SetHiddenVolumeRelatedBreakable");
static_assert(offsetof(EndBattleAPI_SetHiddenVolumeRelatedBreakable, VolumeType) == 0x000000, "Member 'EndBattleAPI_SetHiddenVolumeRelatedBreakable::VolumeType' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetHiddenVolumeRelatedBreakable, bHidden) == 0x000001, "Member 'EndBattleAPI_SetHiddenVolumeRelatedBreakable::bHidden' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetHiddenVolumeRelatedBreakable, BreakableIDs) == 0x000008, "Member 'EndBattleAPI_SetHiddenVolumeRelatedBreakable::BreakableIDs' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetImmotality
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_SetImmotality final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InImmotality;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_SetImmotality) == 0x000008, "Wrong alignment on EndBattleAPI_SetImmotality");
static_assert(sizeof(EndBattleAPI_SetImmotality) == 0x000010, "Wrong size on EndBattleAPI_SetImmotality");
static_assert(offsetof(EndBattleAPI_SetImmotality, InChara) == 0x000000, "Member 'EndBattleAPI_SetImmotality::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetImmotality, InImmotality) == 0x000008, "Member 'EndBattleAPI_SetImmotality::InImmotality' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetNoCheckDyningFilterTifaFlag
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAPI_SetNoCheckDyningFilterTifaFlag final
{
public:
	bool                                          Flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_SetNoCheckDyningFilterTifaFlag) == 0x000001, "Wrong alignment on EndBattleAPI_SetNoCheckDyningFilterTifaFlag");
static_assert(sizeof(EndBattleAPI_SetNoCheckDyningFilterTifaFlag) == 0x000001, "Wrong size on EndBattleAPI_SetNoCheckDyningFilterTifaFlag");
static_assert(offsetof(EndBattleAPI_SetNoCheckDyningFilterTifaFlag, Flag) == 0x000000, "Member 'EndBattleAPI_SetNoCheckDyningFilterTifaFlag::Flag' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetOverrideTextLabelID
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_SetOverrideTextLabelID final
{
public:
	class AEndCharacter*                          InCharacter;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InOverrideTextLabelID;                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_SetOverrideTextLabelID) == 0x000008, "Wrong alignment on EndBattleAPI_SetOverrideTextLabelID");
static_assert(sizeof(EndBattleAPI_SetOverrideTextLabelID) == 0x000010, "Wrong size on EndBattleAPI_SetOverrideTextLabelID");
static_assert(offsetof(EndBattleAPI_SetOverrideTextLabelID, InCharacter) == 0x000000, "Member 'EndBattleAPI_SetOverrideTextLabelID::InCharacter' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetOverrideTextLabelID, InOverrideTextLabelID) == 0x000008, "Member 'EndBattleAPI_SetOverrideTextLabelID::InOverrideTextLabelID' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetPartyLeader
// 0x0003 (0x0003 - 0x0000)
struct EndBattleAPI_SetPartyLeader final
{
public:
	EPlayerType                                   Player;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsInputTrigered;                                  // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_SetPartyLeader) == 0x000001, "Wrong alignment on EndBattleAPI_SetPartyLeader");
static_assert(sizeof(EndBattleAPI_SetPartyLeader) == 0x000003, "Wrong size on EndBattleAPI_SetPartyLeader");
static_assert(offsetof(EndBattleAPI_SetPartyLeader, Player) == 0x000000, "Member 'EndBattleAPI_SetPartyLeader::Player' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetPartyLeader, bIsInputTrigered) == 0x000001, "Member 'EndBattleAPI_SetPartyLeader::bIsInputTrigered' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetPartyLeader, ReturnValue) == 0x000002, "Member 'EndBattleAPI_SetPartyLeader::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetRedXIIIAbilityExclusionTarget
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAPI_SetRedXIIIAbilityExclusionTarget final
{
public:
	class AEndCharacter*                          TargetCharacter;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_SetRedXIIIAbilityExclusionTarget) == 0x000008, "Wrong alignment on EndBattleAPI_SetRedXIIIAbilityExclusionTarget");
static_assert(sizeof(EndBattleAPI_SetRedXIIIAbilityExclusionTarget) == 0x000008, "Wrong size on EndBattleAPI_SetRedXIIIAbilityExclusionTarget");
static_assert(offsetof(EndBattleAPI_SetRedXIIIAbilityExclusionTarget, TargetCharacter) == 0x000000, "Member 'EndBattleAPI_SetRedXIIIAbilityExclusionTarget::TargetCharacter' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetRewardEnable
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_SetRewardEnable final
{
public:
	class AEndCharacter*                          InChara;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndBattleRewardType                          InType;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnable;                                           // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_SetRewardEnable) == 0x000008, "Wrong alignment on EndBattleAPI_SetRewardEnable");
static_assert(sizeof(EndBattleAPI_SetRewardEnable) == 0x000010, "Wrong size on EndBattleAPI_SetRewardEnable");
static_assert(offsetof(EndBattleAPI_SetRewardEnable, InChara) == 0x000000, "Member 'EndBattleAPI_SetRewardEnable::InChara' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetRewardEnable, InType) == 0x000008, "Member 'EndBattleAPI_SetRewardEnable::InType' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetRewardEnable, bEnable) == 0x000009, "Member 'EndBattleAPI_SetRewardEnable::bEnable' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetStoryFlagCondition
// 0x000C (0x000C - 0x0000)
struct EndBattleAPI_SetStoryFlagCondition final
{
public:
	class FName                                   storyFlagNames;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Condition;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_SetStoryFlagCondition) == 0x000004, "Wrong alignment on EndBattleAPI_SetStoryFlagCondition");
static_assert(sizeof(EndBattleAPI_SetStoryFlagCondition) == 0x00000C, "Wrong size on EndBattleAPI_SetStoryFlagCondition");
static_assert(offsetof(EndBattleAPI_SetStoryFlagCondition, storyFlagNames) == 0x000000, "Member 'EndBattleAPI_SetStoryFlagCondition::storyFlagNames' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_SetStoryFlagCondition, Condition) == 0x000008, "Member 'EndBattleAPI_SetStoryFlagCondition::Condition' has a wrong offset!");

// Function EndGame.EndBattleAPI.SetSummonInBossCutScene
// 0x0001 (0x0001 - 0x0000)
struct EndBattleAPI_SetSummonInBossCutScene final
{
public:
	bool                                          bFlag;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_SetSummonInBossCutScene) == 0x000001, "Wrong alignment on EndBattleAPI_SetSummonInBossCutScene");
static_assert(sizeof(EndBattleAPI_SetSummonInBossCutScene) == 0x000001, "Wrong size on EndBattleAPI_SetSummonInBossCutScene");
static_assert(offsetof(EndBattleAPI_SetSummonInBossCutScene, bFlag) == 0x000000, "Member 'EndBattleAPI_SetSummonInBossCutScene::bFlag' has a wrong offset!");

// Function EndGame.EndBattleAPI.ShowPhysics
// 0x000C (0x000C - 0x0000)
struct EndBattleAPI_ShowPhysics final
{
public:
	class FName                                   ActorName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSimulatePhysics;                                  // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_ShowPhysics) == 0x000004, "Wrong alignment on EndBattleAPI_ShowPhysics");
static_assert(sizeof(EndBattleAPI_ShowPhysics) == 0x00000C, "Wrong size on EndBattleAPI_ShowPhysics");
static_assert(offsetof(EndBattleAPI_ShowPhysics, ActorName) == 0x000000, "Member 'EndBattleAPI_ShowPhysics::ActorName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_ShowPhysics, bSimulatePhysics) == 0x000008, "Member 'EndBattleAPI_ShowPhysics::bSimulatePhysics' has a wrong offset!");

// Function EndGame.EndBattleAPI.ShowWaveBattleScene
// 0x0018 (0x0018 - 0x0000)
struct EndBattleAPI_ShowWaveBattleScene final
{
public:
	class FName                                   BattleSceneID;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FTransform>                     enemyPopTransforms;                                // 0x0008(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_ShowWaveBattleScene) == 0x000008, "Wrong alignment on EndBattleAPI_ShowWaveBattleScene");
static_assert(sizeof(EndBattleAPI_ShowWaveBattleScene) == 0x000018, "Wrong size on EndBattleAPI_ShowWaveBattleScene");
static_assert(offsetof(EndBattleAPI_ShowWaveBattleScene, BattleSceneID) == 0x000000, "Member 'EndBattleAPI_ShowWaveBattleScene::BattleSceneID' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_ShowWaveBattleScene, enemyPopTransforms) == 0x000008, "Member 'EndBattleAPI_ShowWaveBattleScene::enemyPopTransforms' has a wrong offset!");

// Function EndGame.EndBattleAPI.ShowWaveBattleSceneNoPopTransform
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAPI_ShowWaveBattleSceneNoPopTransform final
{
public:
	class FName                                   BattleSceneID;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_ShowWaveBattleSceneNoPopTransform) == 0x000004, "Wrong alignment on EndBattleAPI_ShowWaveBattleSceneNoPopTransform");
static_assert(sizeof(EndBattleAPI_ShowWaveBattleSceneNoPopTransform) == 0x000008, "Wrong size on EndBattleAPI_ShowWaveBattleSceneNoPopTransform");
static_assert(offsetof(EndBattleAPI_ShowWaveBattleSceneNoPopTransform, BattleSceneID) == 0x000000, "Member 'EndBattleAPI_ShowWaveBattleSceneNoPopTransform::BattleSceneID' has a wrong offset!");

// Function EndGame.EndBattleAPI.SkipFadeCharaPopActor
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAPI_SkipFadeCharaPopActor final
{
public:
	class FName                                   ActorName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_SkipFadeCharaPopActor) == 0x000004, "Wrong alignment on EndBattleAPI_SkipFadeCharaPopActor");
static_assert(sizeof(EndBattleAPI_SkipFadeCharaPopActor) == 0x000008, "Wrong size on EndBattleAPI_SkipFadeCharaPopActor");
static_assert(offsetof(EndBattleAPI_SkipFadeCharaPopActor, ActorName) == 0x000000, "Member 'EndBattleAPI_SkipFadeCharaPopActor::ActorName' has a wrong offset!");

// Function EndGame.EndBattleAPI.StartEnvironmentPhysFieldForce
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAPI_StartEnvironmentPhysFieldForce final
{
public:
	class FName                                   GroupName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_StartEnvironmentPhysFieldForce) == 0x000004, "Wrong alignment on EndBattleAPI_StartEnvironmentPhysFieldForce");
static_assert(sizeof(EndBattleAPI_StartEnvironmentPhysFieldForce) == 0x000008, "Wrong size on EndBattleAPI_StartEnvironmentPhysFieldForce");
static_assert(offsetof(EndBattleAPI_StartEnvironmentPhysFieldForce, GroupName) == 0x000000, "Member 'EndBattleAPI_StartEnvironmentPhysFieldForce::GroupName' has a wrong offset!");

// Function EndGame.EndBattleAPI.StopBattleCameraSequence
// 0x0004 (0x0004 - 0x0000)
struct EndBattleAPI_StopBattleCameraSequence final
{
public:
	int32                                         sequenceActorUID;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_StopBattleCameraSequence) == 0x000004, "Wrong alignment on EndBattleAPI_StopBattleCameraSequence");
static_assert(sizeof(EndBattleAPI_StopBattleCameraSequence) == 0x000004, "Wrong size on EndBattleAPI_StopBattleCameraSequence");
static_assert(offsetof(EndBattleAPI_StopBattleCameraSequence, sequenceActorUID) == 0x000000, "Member 'EndBattleAPI_StopBattleCameraSequence::sequenceActorUID' has a wrong offset!");

// Function EndGame.EndBattleAPI.StopEnvironmentPhysFieldForce
// 0x0008 (0x0008 - 0x0000)
struct EndBattleAPI_StopEnvironmentPhysFieldForce final
{
public:
	class FName                                   GroupName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_StopEnvironmentPhysFieldForce) == 0x000004, "Wrong alignment on EndBattleAPI_StopEnvironmentPhysFieldForce");
static_assert(sizeof(EndBattleAPI_StopEnvironmentPhysFieldForce) == 0x000008, "Wrong size on EndBattleAPI_StopEnvironmentPhysFieldForce");
static_assert(offsetof(EndBattleAPI_StopEnvironmentPhysFieldForce, GroupName) == 0x000000, "Member 'EndBattleAPI_StopEnvironmentPhysFieldForce::GroupName' has a wrong offset!");

// Function EndGame.EndBattleAPI.StopLoopEffect
// 0x0004 (0x0004 - 0x0000)
struct EndBattleAPI_StopLoopEffect final
{
public:
	int32                                         EffectHandle;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_StopLoopEffect) == 0x000004, "Wrong alignment on EndBattleAPI_StopLoopEffect");
static_assert(sizeof(EndBattleAPI_StopLoopEffect) == 0x000004, "Wrong size on EndBattleAPI_StopLoopEffect");
static_assert(offsetof(EndBattleAPI_StopLoopEffect, EffectHandle) == 0x000000, "Member 'EndBattleAPI_StopLoopEffect::EffectHandle' has a wrong offset!");

// Function EndGame.EndBattleAPI.TryLayoutTransform
// 0x000C (0x000C - 0x0000)
struct EndBattleAPI_TryLayoutTransform final
{
public:
	class FName                                   NodeName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_TryLayoutTransform) == 0x000004, "Wrong alignment on EndBattleAPI_TryLayoutTransform");
static_assert(sizeof(EndBattleAPI_TryLayoutTransform) == 0x00000C, "Wrong size on EndBattleAPI_TryLayoutTransform");
static_assert(offsetof(EndBattleAPI_TryLayoutTransform, NodeName) == 0x000000, "Member 'EndBattleAPI_TryLayoutTransform::NodeName' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_TryLayoutTransform, ReturnValue) == 0x000008, "Member 'EndBattleAPI_TryLayoutTransform::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.TrySetAIPCCombatArea
// 0x000C (0x000C - 0x0000)
struct EndBattleAPI_TrySetAIPCCombatArea final
{
public:
	EPlayerType                                   PlayerCharacter;                                   // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         GroupID;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleAPI_TrySetAIPCCombatArea) == 0x000004, "Wrong alignment on EndBattleAPI_TrySetAIPCCombatArea");
static_assert(sizeof(EndBattleAPI_TrySetAIPCCombatArea) == 0x00000C, "Wrong size on EndBattleAPI_TrySetAIPCCombatArea");
static_assert(offsetof(EndBattleAPI_TrySetAIPCCombatArea, PlayerCharacter) == 0x000000, "Member 'EndBattleAPI_TrySetAIPCCombatArea::PlayerCharacter' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_TrySetAIPCCombatArea, GroupID) == 0x000004, "Member 'EndBattleAPI_TrySetAIPCCombatArea::GroupID' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_TrySetAIPCCombatArea, ReturnValue) == 0x000008, "Member 'EndBattleAPI_TrySetAIPCCombatArea::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.VecToPitch
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_VecToPitch final
{
public:
	struct FVector                                InVec;                                             // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_VecToPitch) == 0x000004, "Wrong alignment on EndBattleAPI_VecToPitch");
static_assert(sizeof(EndBattleAPI_VecToPitch) == 0x000010, "Wrong size on EndBattleAPI_VecToPitch");
static_assert(offsetof(EndBattleAPI_VecToPitch, InVec) == 0x000000, "Member 'EndBattleAPI_VecToPitch::InVec' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_VecToPitch, ReturnValue) == 0x00000C, "Member 'EndBattleAPI_VecToPitch::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleAPI.VecToYaw
// 0x0010 (0x0010 - 0x0000)
struct EndBattleAPI_VecToYaw final
{
public:
	struct FVector                                InVec;                                             // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleAPI_VecToYaw) == 0x000004, "Wrong alignment on EndBattleAPI_VecToYaw");
static_assert(sizeof(EndBattleAPI_VecToYaw) == 0x000010, "Wrong size on EndBattleAPI_VecToYaw");
static_assert(offsetof(EndBattleAPI_VecToYaw, InVec) == 0x000000, "Member 'EndBattleAPI_VecToYaw::InVec' has a wrong offset!");
static_assert(offsetof(EndBattleAPI_VecToYaw, ReturnValue) == 0x00000C, "Member 'EndBattleAPI_VecToYaw::ReturnValue' has a wrong offset!");

// Function EndGame.EndSkeletalMeshActor.PlayEmissiveColorAnimation
// 0x0028 (0x0028 - 0x0000)
struct EndSkeletalMeshActor_PlayEmissiveColorAnimation final
{
public:
	class FName                                   RequestID;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ColorPaletteId;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndEmissiveModifierType                      ModifierType;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndEmissiveCurveType                         CurveType;                                         // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLoop;                                             // 0x0012(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13[0x1];                                       // 0x0013(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Duration;                                          // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendInTime;                                       // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendOutTime;                                      // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartOffset;                                       // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndOffset;                                         // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndSkeletalMeshActor_PlayEmissiveColorAnimation) == 0x000004, "Wrong alignment on EndSkeletalMeshActor_PlayEmissiveColorAnimation");
static_assert(sizeof(EndSkeletalMeshActor_PlayEmissiveColorAnimation) == 0x000028, "Wrong size on EndSkeletalMeshActor_PlayEmissiveColorAnimation");
static_assert(offsetof(EndSkeletalMeshActor_PlayEmissiveColorAnimation, RequestID) == 0x000000, "Member 'EndSkeletalMeshActor_PlayEmissiveColorAnimation::RequestID' has a wrong offset!");
static_assert(offsetof(EndSkeletalMeshActor_PlayEmissiveColorAnimation, ColorPaletteId) == 0x000008, "Member 'EndSkeletalMeshActor_PlayEmissiveColorAnimation::ColorPaletteId' has a wrong offset!");
static_assert(offsetof(EndSkeletalMeshActor_PlayEmissiveColorAnimation, ModifierType) == 0x000010, "Member 'EndSkeletalMeshActor_PlayEmissiveColorAnimation::ModifierType' has a wrong offset!");
static_assert(offsetof(EndSkeletalMeshActor_PlayEmissiveColorAnimation, CurveType) == 0x000011, "Member 'EndSkeletalMeshActor_PlayEmissiveColorAnimation::CurveType' has a wrong offset!");
static_assert(offsetof(EndSkeletalMeshActor_PlayEmissiveColorAnimation, bLoop) == 0x000012, "Member 'EndSkeletalMeshActor_PlayEmissiveColorAnimation::bLoop' has a wrong offset!");
static_assert(offsetof(EndSkeletalMeshActor_PlayEmissiveColorAnimation, Duration) == 0x000014, "Member 'EndSkeletalMeshActor_PlayEmissiveColorAnimation::Duration' has a wrong offset!");
static_assert(offsetof(EndSkeletalMeshActor_PlayEmissiveColorAnimation, BlendInTime) == 0x000018, "Member 'EndSkeletalMeshActor_PlayEmissiveColorAnimation::BlendInTime' has a wrong offset!");
static_assert(offsetof(EndSkeletalMeshActor_PlayEmissiveColorAnimation, BlendOutTime) == 0x00001C, "Member 'EndSkeletalMeshActor_PlayEmissiveColorAnimation::BlendOutTime' has a wrong offset!");
static_assert(offsetof(EndSkeletalMeshActor_PlayEmissiveColorAnimation, StartOffset) == 0x000020, "Member 'EndSkeletalMeshActor_PlayEmissiveColorAnimation::StartOffset' has a wrong offset!");
static_assert(offsetof(EndSkeletalMeshActor_PlayEmissiveColorAnimation, EndOffset) == 0x000024, "Member 'EndSkeletalMeshActor_PlayEmissiveColorAnimation::EndOffset' has a wrong offset!");

// Function EndGame.EndSkeletalMeshActor.SetDirectEmissiveColor
// 0x000C (0x000C - 0x0000)
struct EndSkeletalMeshActor_SetDirectEmissiveColor final
{
public:
	class FName                                   ColorPaletteId;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IntensityBias;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndSkeletalMeshActor_SetDirectEmissiveColor) == 0x000004, "Wrong alignment on EndSkeletalMeshActor_SetDirectEmissiveColor");
static_assert(sizeof(EndSkeletalMeshActor_SetDirectEmissiveColor) == 0x00000C, "Wrong size on EndSkeletalMeshActor_SetDirectEmissiveColor");
static_assert(offsetof(EndSkeletalMeshActor_SetDirectEmissiveColor, ColorPaletteId) == 0x000000, "Member 'EndSkeletalMeshActor_SetDirectEmissiveColor::ColorPaletteId' has a wrong offset!");
static_assert(offsetof(EndSkeletalMeshActor_SetDirectEmissiveColor, IntensityBias) == 0x000008, "Member 'EndSkeletalMeshActor_SetDirectEmissiveColor::IntensityBias' has a wrong offset!");

// Function EndGame.EndSkeletalMeshActor.StopEmissiveColorAnimation
// 0x0008 (0x0008 - 0x0000)
struct EndSkeletalMeshActor_StopEmissiveColorAnimation final
{
public:
	class FName                                   RequestID;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndSkeletalMeshActor_StopEmissiveColorAnimation) == 0x000004, "Wrong alignment on EndSkeletalMeshActor_StopEmissiveColorAnimation");
static_assert(sizeof(EndSkeletalMeshActor_StopEmissiveColorAnimation) == 0x000008, "Wrong size on EndSkeletalMeshActor_StopEmissiveColorAnimation");
static_assert(offsetof(EndSkeletalMeshActor_StopEmissiveColorAnimation, RequestID) == 0x000000, "Member 'EndSkeletalMeshActor_StopEmissiveColorAnimation::RequestID' has a wrong offset!");

// Function EndGame.EndWireReelActor.SetWireState
// 0x0001 (0x0001 - 0x0000)
struct EndWireReelActor_SetWireState final
{
public:
	EEndWireReelState                             InState;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndWireReelActor_SetWireState) == 0x000001, "Wrong alignment on EndWireReelActor_SetWireState");
static_assert(sizeof(EndWireReelActor_SetWireState) == 0x000001, "Wrong size on EndWireReelActor_SetWireState");
static_assert(offsetof(EndWireReelActor_SetWireState, InState) == 0x000000, "Member 'EndWireReelActor_SetWireState::InState' has a wrong offset!");

// Function EndGame.EndBattleDamageSourceComponentLaser.OnBindEffectFinished
// 0x0008 (0x0008 - 0x0000)
struct EndBattleDamageSourceComponentLaser_OnBindEffectFinished final
{
public:
	class UParticleSystemComponent*               finishedComponent;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleDamageSourceComponentLaser_OnBindEffectFinished) == 0x000008, "Wrong alignment on EndBattleDamageSourceComponentLaser_OnBindEffectFinished");
static_assert(sizeof(EndBattleDamageSourceComponentLaser_OnBindEffectFinished) == 0x000008, "Wrong size on EndBattleDamageSourceComponentLaser_OnBindEffectFinished");
static_assert(offsetof(EndBattleDamageSourceComponentLaser_OnBindEffectFinished, finishedComponent) == 0x000000, "Member 'EndBattleDamageSourceComponentLaser_OnBindEffectFinished::finishedComponent' has a wrong offset!");

// Function EndGame.EndBattleMenu.OnCommandCellSetup
// 0x0010 (0x0010 - 0x0000)
struct EndBattleMenu_OnCommandCellSetup final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleMenu_OnCommandCellSetup) == 0x000008, "Wrong alignment on EndBattleMenu_OnCommandCellSetup");
static_assert(sizeof(EndBattleMenu_OnCommandCellSetup) == 0x000010, "Wrong size on EndBattleMenu_OnCommandCellSetup");
static_assert(offsetof(EndBattleMenu_OnCommandCellSetup, ItemWidget) == 0x000000, "Member 'EndBattleMenu_OnCommandCellSetup::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndBattleMenu_OnCommandCellSetup, ItemIndex) == 0x000008, "Member 'EndBattleMenu_OnCommandCellSetup::ItemIndex' has a wrong offset!");

// Function EndGame.EndBattleMenu.OnPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndBattleMenu_OnPressedItem final
{
public:
	int32                                         ItemIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleMenu_OnPressedItem) == 0x000004, "Wrong alignment on EndBattleMenu_OnPressedItem");
static_assert(sizeof(EndBattleMenu_OnPressedItem) == 0x000004, "Wrong size on EndBattleMenu_OnPressedItem");
static_assert(offsetof(EndBattleMenu_OnPressedItem, ItemIndex) == 0x000000, "Member 'EndBattleMenu_OnPressedItem::ItemIndex' has a wrong offset!");

// Function EndGame.EndCircle.GetDynamicMaterial
// 0x0008 (0x0008 - 0x0000)
struct EndCircle_GetDynamicMaterial final
{
public:
	class UMaterialInstanceDynamic*               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCircle_GetDynamicMaterial) == 0x000008, "Wrong alignment on EndCircle_GetDynamicMaterial");
static_assert(sizeof(EndCircle_GetDynamicMaterial) == 0x000008, "Wrong size on EndCircle_GetDynamicMaterial");
static_assert(offsetof(EndCircle_GetDynamicMaterial, ReturnValue) == 0x000000, "Member 'EndCircle_GetDynamicMaterial::ReturnValue' has a wrong offset!");

// Function EndGame.EndCircle.SetBlendMode
// 0x0001 (0x0001 - 0x0000)
struct EndCircle_SetBlendMode final
{
public:
	EBlendMode                                    InBlendMode;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCircle_SetBlendMode) == 0x000001, "Wrong alignment on EndCircle_SetBlendMode");
static_assert(sizeof(EndCircle_SetBlendMode) == 0x000001, "Wrong size on EndCircle_SetBlendMode");
static_assert(offsetof(EndCircle_SetBlendMode, InBlendMode) == 0x000000, "Member 'EndCircle_SetBlendMode::InBlendMode' has a wrong offset!");

// Function EndGame.EndCircle.SetBrush
// 0x0078 (0x0078 - 0x0000)
struct EndCircle_SetBrush final
{
public:
	struct FSlateBrush                            InBrush;                                           // 0x0000(0x0078)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCircle_SetBrush) == 0x000008, "Wrong alignment on EndCircle_SetBrush");
static_assert(sizeof(EndCircle_SetBrush) == 0x000078, "Wrong size on EndCircle_SetBrush");
static_assert(offsetof(EndCircle_SetBrush, InBrush) == 0x000000, "Member 'EndCircle_SetBrush::InBrush' has a wrong offset!");

// Function EndGame.EndCircle.SetBrushFromAsset
// 0x0008 (0x0008 - 0x0000)
struct EndCircle_SetBrushFromAsset final
{
public:
	class USlateBrushAsset*                       Asset;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCircle_SetBrushFromAsset) == 0x000008, "Wrong alignment on EndCircle_SetBrushFromAsset");
static_assert(sizeof(EndCircle_SetBrushFromAsset) == 0x000008, "Wrong size on EndCircle_SetBrushFromAsset");
static_assert(offsetof(EndCircle_SetBrushFromAsset, Asset) == 0x000000, "Member 'EndCircle_SetBrushFromAsset::Asset' has a wrong offset!");

// Function EndGame.EndCircle.SetBrushFromMaterial
// 0x0008 (0x0008 - 0x0000)
struct EndCircle_SetBrushFromMaterial final
{
public:
	class UMaterialInterface*                     Material;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCircle_SetBrushFromMaterial) == 0x000008, "Wrong alignment on EndCircle_SetBrushFromMaterial");
static_assert(sizeof(EndCircle_SetBrushFromMaterial) == 0x000008, "Wrong size on EndCircle_SetBrushFromMaterial");
static_assert(offsetof(EndCircle_SetBrushFromMaterial, Material) == 0x000000, "Member 'EndCircle_SetBrushFromMaterial::Material' has a wrong offset!");

// Function EndGame.EndCircle.SetBrushFromTexture
// 0x0010 (0x0010 - 0x0000)
struct EndCircle_SetBrushFromTexture final
{
public:
	class UTexture2D*                             Texture;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMatchSize;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndCircle_SetBrushFromTexture) == 0x000008, "Wrong alignment on EndCircle_SetBrushFromTexture");
static_assert(sizeof(EndCircle_SetBrushFromTexture) == 0x000010, "Wrong size on EndCircle_SetBrushFromTexture");
static_assert(offsetof(EndCircle_SetBrushFromTexture, Texture) == 0x000000, "Member 'EndCircle_SetBrushFromTexture::Texture' has a wrong offset!");
static_assert(offsetof(EndCircle_SetBrushFromTexture, bMatchSize) == 0x000008, "Member 'EndCircle_SetBrushFromTexture::bMatchSize' has a wrong offset!");

// Function EndGame.EndCircle.SetBrushFromTextureDynamic
// 0x0010 (0x0010 - 0x0000)
struct EndCircle_SetBrushFromTextureDynamic final
{
public:
	class UTexture2DDynamic*                      Texture;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMatchSize;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndCircle_SetBrushFromTextureDynamic) == 0x000008, "Wrong alignment on EndCircle_SetBrushFromTextureDynamic");
static_assert(sizeof(EndCircle_SetBrushFromTextureDynamic) == 0x000010, "Wrong size on EndCircle_SetBrushFromTextureDynamic");
static_assert(offsetof(EndCircle_SetBrushFromTextureDynamic, Texture) == 0x000000, "Member 'EndCircle_SetBrushFromTextureDynamic::Texture' has a wrong offset!");
static_assert(offsetof(EndCircle_SetBrushFromTextureDynamic, bMatchSize) == 0x000008, "Member 'EndCircle_SetBrushFromTextureDynamic::bMatchSize' has a wrong offset!");

// Function EndGame.EndCircle.SetColorAndOpacity
// 0x0010 (0x0010 - 0x0000)
struct EndCircle_SetColorAndOpacity final
{
public:
	struct FLinearColor                           InColorAndOpacity;                                 // 0x0000(0x0010)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCircle_SetColorAndOpacity) == 0x000004, "Wrong alignment on EndCircle_SetColorAndOpacity");
static_assert(sizeof(EndCircle_SetColorAndOpacity) == 0x000010, "Wrong size on EndCircle_SetColorAndOpacity");
static_assert(offsetof(EndCircle_SetColorAndOpacity, InColorAndOpacity) == 0x000000, "Member 'EndCircle_SetColorAndOpacity::InColorAndOpacity' has a wrong offset!");

// Function EndGame.EndCircle.SetEndAngle
// 0x0004 (0x0004 - 0x0000)
struct EndCircle_SetEndAngle final
{
public:
	float                                         InAngle;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCircle_SetEndAngle) == 0x000004, "Wrong alignment on EndCircle_SetEndAngle");
static_assert(sizeof(EndCircle_SetEndAngle) == 0x000004, "Wrong size on EndCircle_SetEndAngle");
static_assert(offsetof(EndCircle_SetEndAngle, InAngle) == 0x000000, "Member 'EndCircle_SetEndAngle::InAngle' has a wrong offset!");

// Function EndGame.EndCircle.SetNumSides
// 0x0004 (0x0004 - 0x0000)
struct EndCircle_SetNumSides final
{
public:
	int32                                         InNumSides;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCircle_SetNumSides) == 0x000004, "Wrong alignment on EndCircle_SetNumSides");
static_assert(sizeof(EndCircle_SetNumSides) == 0x000004, "Wrong size on EndCircle_SetNumSides");
static_assert(offsetof(EndCircle_SetNumSides, InNumSides) == 0x000000, "Member 'EndCircle_SetNumSides::InNumSides' has a wrong offset!");

// Function EndGame.EndCircle.SetOpacity
// 0x0004 (0x0004 - 0x0000)
struct EndCircle_SetOpacity final
{
public:
	float                                         InOpacity;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCircle_SetOpacity) == 0x000004, "Wrong alignment on EndCircle_SetOpacity");
static_assert(sizeof(EndCircle_SetOpacity) == 0x000004, "Wrong size on EndCircle_SetOpacity");
static_assert(offsetof(EndCircle_SetOpacity, InOpacity) == 0x000000, "Member 'EndCircle_SetOpacity::InOpacity' has a wrong offset!");

// Function EndGame.EndCircle.SetRadius
// 0x0004 (0x0004 - 0x0000)
struct EndCircle_SetRadius final
{
public:
	float                                         InRadius;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCircle_SetRadius) == 0x000004, "Wrong alignment on EndCircle_SetRadius");
static_assert(sizeof(EndCircle_SetRadius) == 0x000004, "Wrong size on EndCircle_SetRadius");
static_assert(offsetof(EndCircle_SetRadius, InRadius) == 0x000000, "Member 'EndCircle_SetRadius::InRadius' has a wrong offset!");

// Function EndGame.EndCircle.SetStartAngle
// 0x0004 (0x0004 - 0x0000)
struct EndCircle_SetStartAngle final
{
public:
	float                                         InAngle;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCircle_SetStartAngle) == 0x000004, "Wrong alignment on EndCircle_SetStartAngle");
static_assert(sizeof(EndCircle_SetStartAngle) == 0x000004, "Wrong size on EndCircle_SetStartAngle");
static_assert(offsetof(EndCircle_SetStartAngle, InAngle) == 0x000000, "Member 'EndCircle_SetStartAngle::InAngle' has a wrong offset!");

// Function EndGame.EndStartMenu.OnListMenuPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndStartMenu_OnListMenuPressedItem final
{
public:
	int32                                         ItemIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndStartMenu_OnListMenuPressedItem) == 0x000004, "Wrong alignment on EndStartMenu_OnListMenuPressedItem");
static_assert(sizeof(EndStartMenu_OnListMenuPressedItem) == 0x000004, "Wrong size on EndStartMenu_OnListMenuPressedItem");
static_assert(offsetof(EndStartMenu_OnListMenuPressedItem, ItemIndex) == 0x000000, "Member 'EndStartMenu_OnListMenuPressedItem::ItemIndex' has a wrong offset!");

// Function EndGame.EndStartMenu.OnListMenuSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndStartMenu_OnListMenuSelectedIndexChanged final
{
public:
	int32                                         ItemIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndStartMenu_OnListMenuSelectedIndexChanged) == 0x000004, "Wrong alignment on EndStartMenu_OnListMenuSelectedIndexChanged");
static_assert(sizeof(EndStartMenu_OnListMenuSelectedIndexChanged) == 0x000004, "Wrong size on EndStartMenu_OnListMenuSelectedIndexChanged");
static_assert(offsetof(EndStartMenu_OnListMenuSelectedIndexChanged, ItemIndex) == 0x000000, "Member 'EndStartMenu_OnListMenuSelectedIndexChanged::ItemIndex' has a wrong offset!");

// Function EndGame.EndStartMenu.OnListMenuSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndStartMenu_OnListMenuSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndStartMenu_OnListMenuSetupItem) == 0x000008, "Wrong alignment on EndStartMenu_OnListMenuSetupItem");
static_assert(sizeof(EndStartMenu_OnListMenuSetupItem) == 0x000010, "Wrong size on EndStartMenu_OnListMenuSetupItem");
static_assert(offsetof(EndStartMenu_OnListMenuSetupItem, ItemWidget) == 0x000000, "Member 'EndStartMenu_OnListMenuSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndStartMenu_OnListMenuSetupItem, ItemIndex) == 0x000008, "Member 'EndStartMenu_OnListMenuSetupItem::ItemIndex' has a wrong offset!");

// Function EndGame.EndStartMenu.OnSaveDataClicked
// 0x0008 (0x0008 - 0x0000)
struct EndStartMenu_OnSaveDataClicked final
{
public:
	class UUserWidget*                            Cell;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndStartMenu_OnSaveDataClicked) == 0x000008, "Wrong alignment on EndStartMenu_OnSaveDataClicked");
static_assert(sizeof(EndStartMenu_OnSaveDataClicked) == 0x000008, "Wrong size on EndStartMenu_OnSaveDataClicked");
static_assert(offsetof(EndStartMenu_OnSaveDataClicked, Cell) == 0x000000, "Member 'EndStartMenu_OnSaveDataClicked::Cell' has a wrong offset!");

// Function EndGame.EndStartMenu.OnSaveDataPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndStartMenu_OnSaveDataPressedItem final
{
public:
	int32                                         ItemIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndStartMenu_OnSaveDataPressedItem) == 0x000004, "Wrong alignment on EndStartMenu_OnSaveDataPressedItem");
static_assert(sizeof(EndStartMenu_OnSaveDataPressedItem) == 0x000004, "Wrong size on EndStartMenu_OnSaveDataPressedItem");
static_assert(offsetof(EndStartMenu_OnSaveDataPressedItem, ItemIndex) == 0x000000, "Member 'EndStartMenu_OnSaveDataPressedItem::ItemIndex' has a wrong offset!");

// Function EndGame.EndStartMenu.OnSaveDataSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndStartMenu_OnSaveDataSelectedIndexChanged final
{
public:
	int32                                         ItemIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndStartMenu_OnSaveDataSelectedIndexChanged) == 0x000004, "Wrong alignment on EndStartMenu_OnSaveDataSelectedIndexChanged");
static_assert(sizeof(EndStartMenu_OnSaveDataSelectedIndexChanged) == 0x000004, "Wrong size on EndStartMenu_OnSaveDataSelectedIndexChanged");
static_assert(offsetof(EndStartMenu_OnSaveDataSelectedIndexChanged, ItemIndex) == 0x000000, "Member 'EndStartMenu_OnSaveDataSelectedIndexChanged::ItemIndex' has a wrong offset!");

// Function EndGame.EndStartMenu.OnSaveDataSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndStartMenu_OnSaveDataSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndStartMenu_OnSaveDataSetupItem) == 0x000008, "Wrong alignment on EndStartMenu_OnSaveDataSetupItem");
static_assert(sizeof(EndStartMenu_OnSaveDataSetupItem) == 0x000010, "Wrong size on EndStartMenu_OnSaveDataSetupItem");
static_assert(offsetof(EndStartMenu_OnSaveDataSetupItem, ItemWidget) == 0x000000, "Member 'EndStartMenu_OnSaveDataSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndStartMenu_OnSaveDataSetupItem, ItemIndex) == 0x000008, "Member 'EndStartMenu_OnSaveDataSetupItem::ItemIndex' has a wrong offset!");

// Function EndGame.EndBattleScene_btsc_mako1_110.OnAddMagicThunderHitCountForBarrierGS
// 0x000C (0x000C - 0x0000)
struct EndBattleScene_btsc_mako1_110_OnAddMagicThunderHitCountForBarrierGS final
{
public:
	class FName                                   CauserCharaName;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleScene_btsc_mako1_110_OnAddMagicThunderHitCountForBarrierGS) == 0x000004, "Wrong alignment on EndBattleScene_btsc_mako1_110_OnAddMagicThunderHitCountForBarrierGS");
static_assert(sizeof(EndBattleScene_btsc_mako1_110_OnAddMagicThunderHitCountForBarrierGS) == 0x00000C, "Wrong size on EndBattleScene_btsc_mako1_110_OnAddMagicThunderHitCountForBarrierGS");
static_assert(offsetof(EndBattleScene_btsc_mako1_110_OnAddMagicThunderHitCountForBarrierGS, CauserCharaName) == 0x000000, "Member 'EndBattleScene_btsc_mako1_110_OnAddMagicThunderHitCountForBarrierGS::CauserCharaName' has a wrong offset!");
static_assert(offsetof(EndBattleScene_btsc_mako1_110_OnAddMagicThunderHitCountForBarrierGS, Count) == 0x000008, "Member 'EndBattleScene_btsc_mako1_110_OnAddMagicThunderHitCountForBarrierGS::Count' has a wrong offset!");

// Function EndGame.EndBattleScene_btsc_mako1_110.OnAddNormalAttackHitCountForBarrierGS
// 0x000C (0x000C - 0x0000)
struct EndBattleScene_btsc_mako1_110_OnAddNormalAttackHitCountForBarrierGS final
{
public:
	class FName                                   CauserCharaName;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleScene_btsc_mako1_110_OnAddNormalAttackHitCountForBarrierGS) == 0x000004, "Wrong alignment on EndBattleScene_btsc_mako1_110_OnAddNormalAttackHitCountForBarrierGS");
static_assert(sizeof(EndBattleScene_btsc_mako1_110_OnAddNormalAttackHitCountForBarrierGS) == 0x00000C, "Wrong size on EndBattleScene_btsc_mako1_110_OnAddNormalAttackHitCountForBarrierGS");
static_assert(offsetof(EndBattleScene_btsc_mako1_110_OnAddNormalAttackHitCountForBarrierGS, CauserCharaName) == 0x000000, "Member 'EndBattleScene_btsc_mako1_110_OnAddNormalAttackHitCountForBarrierGS::CauserCharaName' has a wrong offset!");
static_assert(offsetof(EndBattleScene_btsc_mako1_110_OnAddNormalAttackHitCountForBarrierGS, Count) == 0x000008, "Member 'EndBattleScene_btsc_mako1_110_OnAddNormalAttackHitCountForBarrierGS::Count' has a wrong offset!");

// Function EndGame.EndBattleScene_btsc_sbil0_90_boss020.IsReadySetPlay
// 0x0001 (0x0001 - 0x0000)
struct EndBattleScene_btsc_sbil0_90_boss020_IsReadySetPlay final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleScene_btsc_sbil0_90_boss020_IsReadySetPlay) == 0x000001, "Wrong alignment on EndBattleScene_btsc_sbil0_90_boss020_IsReadySetPlay");
static_assert(sizeof(EndBattleScene_btsc_sbil0_90_boss020_IsReadySetPlay) == 0x000001, "Wrong size on EndBattleScene_btsc_sbil0_90_boss020_IsReadySetPlay");
static_assert(offsetof(EndBattleScene_btsc_sbil0_90_boss020_IsReadySetPlay, ReturnValue) == 0x000000, "Member 'EndBattleScene_btsc_sbil0_90_boss020_IsReadySetPlay::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleScene_btsc_sbil0_90_boss020.KeepRelativePositionWarp
// 0x0030 (0x0030 - 0x0000)
struct EndBattleScene_btsc_sbil0_90_boss020_KeepRelativePositionWarp final
{
public:
	class AEndCharacter*                          BaseCharacter;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                BaseLocation;                                      // 0x0008(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               BaseRotation;                                      // 0x0014(0x000C)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	TArray<class AEndCharacter*>                  Characters;                                        // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleScene_btsc_sbil0_90_boss020_KeepRelativePositionWarp) == 0x000008, "Wrong alignment on EndBattleScene_btsc_sbil0_90_boss020_KeepRelativePositionWarp");
static_assert(sizeof(EndBattleScene_btsc_sbil0_90_boss020_KeepRelativePositionWarp) == 0x000030, "Wrong size on EndBattleScene_btsc_sbil0_90_boss020_KeepRelativePositionWarp");
static_assert(offsetof(EndBattleScene_btsc_sbil0_90_boss020_KeepRelativePositionWarp, BaseCharacter) == 0x000000, "Member 'EndBattleScene_btsc_sbil0_90_boss020_KeepRelativePositionWarp::BaseCharacter' has a wrong offset!");
static_assert(offsetof(EndBattleScene_btsc_sbil0_90_boss020_KeepRelativePositionWarp, BaseLocation) == 0x000008, "Member 'EndBattleScene_btsc_sbil0_90_boss020_KeepRelativePositionWarp::BaseLocation' has a wrong offset!");
static_assert(offsetof(EndBattleScene_btsc_sbil0_90_boss020_KeepRelativePositionWarp, BaseRotation) == 0x000014, "Member 'EndBattleScene_btsc_sbil0_90_boss020_KeepRelativePositionWarp::BaseRotation' has a wrong offset!");
static_assert(offsetof(EndBattleScene_btsc_sbil0_90_boss020_KeepRelativePositionWarp, Characters) == 0x000020, "Member 'EndBattleScene_btsc_sbil0_90_boss020_KeepRelativePositionWarp::Characters' has a wrong offset!");

// Function EndGame.EndBattleScene_btsc_sbil0_90_boss020.LockSetPlayHeight
// 0x0004 (0x0004 - 0x0000)
struct EndBattleScene_btsc_sbil0_90_boss020_LockSetPlayHeight final
{
public:
	float                                         Height;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleScene_btsc_sbil0_90_boss020_LockSetPlayHeight) == 0x000004, "Wrong alignment on EndBattleScene_btsc_sbil0_90_boss020_LockSetPlayHeight");
static_assert(sizeof(EndBattleScene_btsc_sbil0_90_boss020_LockSetPlayHeight) == 0x000004, "Wrong size on EndBattleScene_btsc_sbil0_90_boss020_LockSetPlayHeight");
static_assert(offsetof(EndBattleScene_btsc_sbil0_90_boss020_LockSetPlayHeight, Height) == 0x000000, "Member 'EndBattleScene_btsc_sbil0_90_boss020_LockSetPlayHeight::Height' has a wrong offset!");

// Function EndGame.EndBattleScene_btsc_sbil0_90_boss020.ResetForceLookAt
// 0x0008 (0x0008 - 0x0000)
struct EndBattleScene_btsc_sbil0_90_boss020_ResetForceLookAt final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleScene_btsc_sbil0_90_boss020_ResetForceLookAt) == 0x000008, "Wrong alignment on EndBattleScene_btsc_sbil0_90_boss020_ResetForceLookAt");
static_assert(sizeof(EndBattleScene_btsc_sbil0_90_boss020_ResetForceLookAt) == 0x000008, "Wrong size on EndBattleScene_btsc_sbil0_90_boss020_ResetForceLookAt");
static_assert(offsetof(EndBattleScene_btsc_sbil0_90_boss020_ResetForceLookAt, Character) == 0x000000, "Member 'EndBattleScene_btsc_sbil0_90_boss020_ResetForceLookAt::Character' has a wrong offset!");

// Function EndGame.EndBattleScene_btsc_sbil0_90_boss020.SetBattleAbilityRotateStateLocation
// 0x0018 (0x0018 - 0x0000)
struct EndBattleScene_btsc_sbil0_90_boss020_SetBattleAbilityRotateStateLocation final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleScene_btsc_sbil0_90_boss020_SetBattleAbilityRotateStateLocation) == 0x000008, "Wrong alignment on EndBattleScene_btsc_sbil0_90_boss020_SetBattleAbilityRotateStateLocation");
static_assert(sizeof(EndBattleScene_btsc_sbil0_90_boss020_SetBattleAbilityRotateStateLocation) == 0x000018, "Wrong size on EndBattleScene_btsc_sbil0_90_boss020_SetBattleAbilityRotateStateLocation");
static_assert(offsetof(EndBattleScene_btsc_sbil0_90_boss020_SetBattleAbilityRotateStateLocation, Character) == 0x000000, "Member 'EndBattleScene_btsc_sbil0_90_boss020_SetBattleAbilityRotateStateLocation::Character' has a wrong offset!");
static_assert(offsetof(EndBattleScene_btsc_sbil0_90_boss020_SetBattleAbilityRotateStateLocation, Location) == 0x000008, "Member 'EndBattleScene_btsc_sbil0_90_boss020_SetBattleAbilityRotateStateLocation::Location' has a wrong offset!");

// Function EndGame.EndBattleScene_btsc_sbil0_90_boss020.SetBattleAbilityRotateStatePointName
// 0x0010 (0x0010 - 0x0000)
struct EndBattleScene_btsc_sbil0_90_boss020_SetBattleAbilityRotateStatePointName final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RotatePointName;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleScene_btsc_sbil0_90_boss020_SetBattleAbilityRotateStatePointName) == 0x000008, "Wrong alignment on EndBattleScene_btsc_sbil0_90_boss020_SetBattleAbilityRotateStatePointName");
static_assert(sizeof(EndBattleScene_btsc_sbil0_90_boss020_SetBattleAbilityRotateStatePointName) == 0x000010, "Wrong size on EndBattleScene_btsc_sbil0_90_boss020_SetBattleAbilityRotateStatePointName");
static_assert(offsetof(EndBattleScene_btsc_sbil0_90_boss020_SetBattleAbilityRotateStatePointName, Character) == 0x000000, "Member 'EndBattleScene_btsc_sbil0_90_boss020_SetBattleAbilityRotateStatePointName::Character' has a wrong offset!");
static_assert(offsetof(EndBattleScene_btsc_sbil0_90_boss020_SetBattleAbilityRotateStatePointName, RotatePointName) == 0x000008, "Member 'EndBattleScene_btsc_sbil0_90_boss020_SetBattleAbilityRotateStatePointName::RotatePointName' has a wrong offset!");

// Function EndGame.EndBattleScene_btsc_sbil0_90_boss020.SetForceLookAt
// 0x0010 (0x0010 - 0x0000)
struct EndBattleScene_btsc_sbil0_90_boss020_SetForceLookAt final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AEndCharacter*                          TargetCharacter;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleScene_btsc_sbil0_90_boss020_SetForceLookAt) == 0x000008, "Wrong alignment on EndBattleScene_btsc_sbil0_90_boss020_SetForceLookAt");
static_assert(sizeof(EndBattleScene_btsc_sbil0_90_boss020_SetForceLookAt) == 0x000010, "Wrong size on EndBattleScene_btsc_sbil0_90_boss020_SetForceLookAt");
static_assert(offsetof(EndBattleScene_btsc_sbil0_90_boss020_SetForceLookAt, Character) == 0x000000, "Member 'EndBattleScene_btsc_sbil0_90_boss020_SetForceLookAt::Character' has a wrong offset!");
static_assert(offsetof(EndBattleScene_btsc_sbil0_90_boss020_SetForceLookAt, TargetCharacter) == 0x000008, "Member 'EndBattleScene_btsc_sbil0_90_boss020_SetForceLookAt::TargetCharacter' has a wrong offset!");

// Function EndGame.EndBattleScene_btsc_sbil0_90_boss020.SetOverrideAerialAttackFallSequence
// 0x0020 (0x0020 - 0x0000)
struct EndBattleScene_btsc_sbil0_90_boss020_SetOverrideAerialAttackFallSequence final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FallSequeceName;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LandSequenceName;                                  // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MotionOwnerCharaSpecId;                            // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleScene_btsc_sbil0_90_boss020_SetOverrideAerialAttackFallSequence) == 0x000008, "Wrong alignment on EndBattleScene_btsc_sbil0_90_boss020_SetOverrideAerialAttackFallSequence");
static_assert(sizeof(EndBattleScene_btsc_sbil0_90_boss020_SetOverrideAerialAttackFallSequence) == 0x000020, "Wrong size on EndBattleScene_btsc_sbil0_90_boss020_SetOverrideAerialAttackFallSequence");
static_assert(offsetof(EndBattleScene_btsc_sbil0_90_boss020_SetOverrideAerialAttackFallSequence, Character) == 0x000000, "Member 'EndBattleScene_btsc_sbil0_90_boss020_SetOverrideAerialAttackFallSequence::Character' has a wrong offset!");
static_assert(offsetof(EndBattleScene_btsc_sbil0_90_boss020_SetOverrideAerialAttackFallSequence, FallSequeceName) == 0x000008, "Member 'EndBattleScene_btsc_sbil0_90_boss020_SetOverrideAerialAttackFallSequence::FallSequeceName' has a wrong offset!");
static_assert(offsetof(EndBattleScene_btsc_sbil0_90_boss020_SetOverrideAerialAttackFallSequence, LandSequenceName) == 0x000010, "Member 'EndBattleScene_btsc_sbil0_90_boss020_SetOverrideAerialAttackFallSequence::LandSequenceName' has a wrong offset!");
static_assert(offsetof(EndBattleScene_btsc_sbil0_90_boss020_SetOverrideAerialAttackFallSequence, MotionOwnerCharaSpecId) == 0x000018, "Member 'EndBattleScene_btsc_sbil0_90_boss020_SetOverrideAerialAttackFallSequence::MotionOwnerCharaSpecId' has a wrong offset!");

// Function EndGame.EndBattleScene_btsc_sbil0_90_boss020.StartSetPlay
// 0x0010 (0x0010 - 0x0000)
struct EndBattleScene_btsc_sbil0_90_boss020_StartSetPlay final
{
public:
	TArray<class AEndCharacter*>                  Characters;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleScene_btsc_sbil0_90_boss020_StartSetPlay) == 0x000008, "Wrong alignment on EndBattleScene_btsc_sbil0_90_boss020_StartSetPlay");
static_assert(sizeof(EndBattleScene_btsc_sbil0_90_boss020_StartSetPlay) == 0x000010, "Wrong size on EndBattleScene_btsc_sbil0_90_boss020_StartSetPlay");
static_assert(offsetof(EndBattleScene_btsc_sbil0_90_boss020_StartSetPlay, Characters) == 0x000000, "Member 'EndBattleScene_btsc_sbil0_90_boss020_StartSetPlay::Characters' has a wrong offset!");

// Function EndGame.EndBattleScene_btsc_sbil0_90_boss020.StartSetPlayWithErrorCheck
// 0x0018 (0x0018 - 0x0000)
struct EndBattleScene_btsc_sbil0_90_boss020_StartSetPlayWithErrorCheck final
{
public:
	TArray<class AEndCharacter*>                  Characters;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	ESetPlayStartSetPlay                          OutSignal;                                         // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleScene_btsc_sbil0_90_boss020_StartSetPlayWithErrorCheck) == 0x000008, "Wrong alignment on EndBattleScene_btsc_sbil0_90_boss020_StartSetPlayWithErrorCheck");
static_assert(sizeof(EndBattleScene_btsc_sbil0_90_boss020_StartSetPlayWithErrorCheck) == 0x000018, "Wrong size on EndBattleScene_btsc_sbil0_90_boss020_StartSetPlayWithErrorCheck");
static_assert(offsetof(EndBattleScene_btsc_sbil0_90_boss020_StartSetPlayWithErrorCheck, Characters) == 0x000000, "Member 'EndBattleScene_btsc_sbil0_90_boss020_StartSetPlayWithErrorCheck::Characters' has a wrong offset!");
static_assert(offsetof(EndBattleScene_btsc_sbil0_90_boss020_StartSetPlayWithErrorCheck, OutSignal) == 0x000010, "Member 'EndBattleScene_btsc_sbil0_90_boss020_StartSetPlayWithErrorCheck::OutSignal' has a wrong offset!");

// Function EndGame.EndBattleScene_btsc_sbil0_90_boss020.SuspendAll
// 0x0008 (0x0008 - 0x0000)
struct EndBattleScene_btsc_sbil0_90_boss020_SuspendAll final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleScene_btsc_sbil0_90_boss020_SuspendAll) == 0x000008, "Wrong alignment on EndBattleScene_btsc_sbil0_90_boss020_SuspendAll");
static_assert(sizeof(EndBattleScene_btsc_sbil0_90_boss020_SuspendAll) == 0x000008, "Wrong size on EndBattleScene_btsc_sbil0_90_boss020_SuspendAll");
static_assert(offsetof(EndBattleScene_btsc_sbil0_90_boss020_SuspendAll, Character) == 0x000000, "Member 'EndBattleScene_btsc_sbil0_90_boss020_SuspendAll::Character' has a wrong offset!");

// Function EndGame.EndBattleScene_btsc_sbil0_90_boss020.AerialAttackJump
// 0x0058 (0x0058 - 0x0000)
struct EndBattleScene_btsc_sbil0_90_boss020_AerialAttackJump final
{
public:
	class FName                                   StartMotionName;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LoopMotionName;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NextAbilityID;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AEndCharacter*                          Executor;                                          // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AEndCharacter*                          Target;                                            // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JumpTime;                                          // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Timeout;                                           // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MotionOwnerCharaSpecId;                            // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0038(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	ESetPlayAerialAttackJump                      OutSignal;                                         // 0x0050(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleScene_btsc_sbil0_90_boss020_AerialAttackJump) == 0x000008, "Wrong alignment on EndBattleScene_btsc_sbil0_90_boss020_AerialAttackJump");
static_assert(sizeof(EndBattleScene_btsc_sbil0_90_boss020_AerialAttackJump) == 0x000058, "Wrong size on EndBattleScene_btsc_sbil0_90_boss020_AerialAttackJump");
static_assert(offsetof(EndBattleScene_btsc_sbil0_90_boss020_AerialAttackJump, StartMotionName) == 0x000000, "Member 'EndBattleScene_btsc_sbil0_90_boss020_AerialAttackJump::StartMotionName' has a wrong offset!");
static_assert(offsetof(EndBattleScene_btsc_sbil0_90_boss020_AerialAttackJump, LoopMotionName) == 0x000008, "Member 'EndBattleScene_btsc_sbil0_90_boss020_AerialAttackJump::LoopMotionName' has a wrong offset!");
static_assert(offsetof(EndBattleScene_btsc_sbil0_90_boss020_AerialAttackJump, NextAbilityID) == 0x000010, "Member 'EndBattleScene_btsc_sbil0_90_boss020_AerialAttackJump::NextAbilityID' has a wrong offset!");
static_assert(offsetof(EndBattleScene_btsc_sbil0_90_boss020_AerialAttackJump, Executor) == 0x000018, "Member 'EndBattleScene_btsc_sbil0_90_boss020_AerialAttackJump::Executor' has a wrong offset!");
static_assert(offsetof(EndBattleScene_btsc_sbil0_90_boss020_AerialAttackJump, Target) == 0x000020, "Member 'EndBattleScene_btsc_sbil0_90_boss020_AerialAttackJump::Target' has a wrong offset!");
static_assert(offsetof(EndBattleScene_btsc_sbil0_90_boss020_AerialAttackJump, JumpTime) == 0x000028, "Member 'EndBattleScene_btsc_sbil0_90_boss020_AerialAttackJump::JumpTime' has a wrong offset!");
static_assert(offsetof(EndBattleScene_btsc_sbil0_90_boss020_AerialAttackJump, Timeout) == 0x00002C, "Member 'EndBattleScene_btsc_sbil0_90_boss020_AerialAttackJump::Timeout' has a wrong offset!");
static_assert(offsetof(EndBattleScene_btsc_sbil0_90_boss020_AerialAttackJump, MotionOwnerCharaSpecId) == 0x000030, "Member 'EndBattleScene_btsc_sbil0_90_boss020_AerialAttackJump::MotionOwnerCharaSpecId' has a wrong offset!");
static_assert(offsetof(EndBattleScene_btsc_sbil0_90_boss020_AerialAttackJump, LatentInfo) == 0x000038, "Member 'EndBattleScene_btsc_sbil0_90_boss020_AerialAttackJump::LatentInfo' has a wrong offset!");
static_assert(offsetof(EndBattleScene_btsc_sbil0_90_boss020_AerialAttackJump, OutSignal) == 0x000050, "Member 'EndBattleScene_btsc_sbil0_90_boss020_AerialAttackJump::OutSignal' has a wrong offset!");

// Function EndGame.EndBattleScene_btsc_sbil0_90_boss020.FallAction
// 0x0048 (0x0048 - 0x0000)
struct EndBattleScene_btsc_sbil0_90_boss020_FallAction final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GravityScale;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FallSequenceName;                                  // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LandSequenceName;                                  // 0x0014(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MotionOwnerCharaSpecId;                            // 0x001C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0028(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	ESetPlayFallAction                            OutSignal;                                         // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleScene_btsc_sbil0_90_boss020_FallAction) == 0x000008, "Wrong alignment on EndBattleScene_btsc_sbil0_90_boss020_FallAction");
static_assert(sizeof(EndBattleScene_btsc_sbil0_90_boss020_FallAction) == 0x000048, "Wrong size on EndBattleScene_btsc_sbil0_90_boss020_FallAction");
static_assert(offsetof(EndBattleScene_btsc_sbil0_90_boss020_FallAction, Character) == 0x000000, "Member 'EndBattleScene_btsc_sbil0_90_boss020_FallAction::Character' has a wrong offset!");
static_assert(offsetof(EndBattleScene_btsc_sbil0_90_boss020_FallAction, GravityScale) == 0x000008, "Member 'EndBattleScene_btsc_sbil0_90_boss020_FallAction::GravityScale' has a wrong offset!");
static_assert(offsetof(EndBattleScene_btsc_sbil0_90_boss020_FallAction, FallSequenceName) == 0x00000C, "Member 'EndBattleScene_btsc_sbil0_90_boss020_FallAction::FallSequenceName' has a wrong offset!");
static_assert(offsetof(EndBattleScene_btsc_sbil0_90_boss020_FallAction, LandSequenceName) == 0x000014, "Member 'EndBattleScene_btsc_sbil0_90_boss020_FallAction::LandSequenceName' has a wrong offset!");
static_assert(offsetof(EndBattleScene_btsc_sbil0_90_boss020_FallAction, MotionOwnerCharaSpecId) == 0x00001C, "Member 'EndBattleScene_btsc_sbil0_90_boss020_FallAction::MotionOwnerCharaSpecId' has a wrong offset!");
static_assert(offsetof(EndBattleScene_btsc_sbil0_90_boss020_FallAction, LatentInfo) == 0x000028, "Member 'EndBattleScene_btsc_sbil0_90_boss020_FallAction::LatentInfo' has a wrong offset!");
static_assert(offsetof(EndBattleScene_btsc_sbil0_90_boss020_FallAction, OutSignal) == 0x000040, "Member 'EndBattleScene_btsc_sbil0_90_boss020_FallAction::OutSignal' has a wrong offset!");

// Function EndGame.EndBattleScene_btsc_sbil0_90_boss020.ForceChangeIdleAction
// 0x0028 (0x0028 - 0x0000)
struct EndBattleScene_btsc_sbil0_90_boss020_ForceChangeIdleAction final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	ESetPlayForceChangeIdleAction                 OutSignal;                                         // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleScene_btsc_sbil0_90_boss020_ForceChangeIdleAction) == 0x000008, "Wrong alignment on EndBattleScene_btsc_sbil0_90_boss020_ForceChangeIdleAction");
static_assert(sizeof(EndBattleScene_btsc_sbil0_90_boss020_ForceChangeIdleAction) == 0x000028, "Wrong size on EndBattleScene_btsc_sbil0_90_boss020_ForceChangeIdleAction");
static_assert(offsetof(EndBattleScene_btsc_sbil0_90_boss020_ForceChangeIdleAction, Character) == 0x000000, "Member 'EndBattleScene_btsc_sbil0_90_boss020_ForceChangeIdleAction::Character' has a wrong offset!");
static_assert(offsetof(EndBattleScene_btsc_sbil0_90_boss020_ForceChangeIdleAction, LatentInfo) == 0x000008, "Member 'EndBattleScene_btsc_sbil0_90_boss020_ForceChangeIdleAction::LatentInfo' has a wrong offset!");
static_assert(offsetof(EndBattleScene_btsc_sbil0_90_boss020_ForceChangeIdleAction, OutSignal) == 0x000020, "Member 'EndBattleScene_btsc_sbil0_90_boss020_ForceChangeIdleAction::OutSignal' has a wrong offset!");

// Function EndGame.EndBattleScene_btsc_sbil0_90_boss020.GraviticJump
// 0x0070 (0x0070 - 0x0000)
struct EndBattleScene_btsc_sbil0_90_boss020_GraviticJump final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                landingLocation;                                   // 0x0008(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Height;                                            // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PeakBias;                                          // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         turningDuration;                                   // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LandingForward;                                    // 0x0020(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BeginSequenceName;                                 // 0x002C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LoopSequenceName;                                  // 0x0034(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EndSequenceName;                                   // 0x003C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MotionOwnerCharaSpecId;                            // 0x0044(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0050(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	ESetPlayGraviticJump                          OutSignal;                                         // 0x0068(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleScene_btsc_sbil0_90_boss020_GraviticJump) == 0x000008, "Wrong alignment on EndBattleScene_btsc_sbil0_90_boss020_GraviticJump");
static_assert(sizeof(EndBattleScene_btsc_sbil0_90_boss020_GraviticJump) == 0x000070, "Wrong size on EndBattleScene_btsc_sbil0_90_boss020_GraviticJump");
static_assert(offsetof(EndBattleScene_btsc_sbil0_90_boss020_GraviticJump, Character) == 0x000000, "Member 'EndBattleScene_btsc_sbil0_90_boss020_GraviticJump::Character' has a wrong offset!");
static_assert(offsetof(EndBattleScene_btsc_sbil0_90_boss020_GraviticJump, landingLocation) == 0x000008, "Member 'EndBattleScene_btsc_sbil0_90_boss020_GraviticJump::landingLocation' has a wrong offset!");
static_assert(offsetof(EndBattleScene_btsc_sbil0_90_boss020_GraviticJump, Height) == 0x000014, "Member 'EndBattleScene_btsc_sbil0_90_boss020_GraviticJump::Height' has a wrong offset!");
static_assert(offsetof(EndBattleScene_btsc_sbil0_90_boss020_GraviticJump, PeakBias) == 0x000018, "Member 'EndBattleScene_btsc_sbil0_90_boss020_GraviticJump::PeakBias' has a wrong offset!");
static_assert(offsetof(EndBattleScene_btsc_sbil0_90_boss020_GraviticJump, turningDuration) == 0x00001C, "Member 'EndBattleScene_btsc_sbil0_90_boss020_GraviticJump::turningDuration' has a wrong offset!");
static_assert(offsetof(EndBattleScene_btsc_sbil0_90_boss020_GraviticJump, LandingForward) == 0x000020, "Member 'EndBattleScene_btsc_sbil0_90_boss020_GraviticJump::LandingForward' has a wrong offset!");
static_assert(offsetof(EndBattleScene_btsc_sbil0_90_boss020_GraviticJump, BeginSequenceName) == 0x00002C, "Member 'EndBattleScene_btsc_sbil0_90_boss020_GraviticJump::BeginSequenceName' has a wrong offset!");
static_assert(offsetof(EndBattleScene_btsc_sbil0_90_boss020_GraviticJump, LoopSequenceName) == 0x000034, "Member 'EndBattleScene_btsc_sbil0_90_boss020_GraviticJump::LoopSequenceName' has a wrong offset!");
static_assert(offsetof(EndBattleScene_btsc_sbil0_90_boss020_GraviticJump, EndSequenceName) == 0x00003C, "Member 'EndBattleScene_btsc_sbil0_90_boss020_GraviticJump::EndSequenceName' has a wrong offset!");
static_assert(offsetof(EndBattleScene_btsc_sbil0_90_boss020_GraviticJump, MotionOwnerCharaSpecId) == 0x000044, "Member 'EndBattleScene_btsc_sbil0_90_boss020_GraviticJump::MotionOwnerCharaSpecId' has a wrong offset!");
static_assert(offsetof(EndBattleScene_btsc_sbil0_90_boss020_GraviticJump, LatentInfo) == 0x000050, "Member 'EndBattleScene_btsc_sbil0_90_boss020_GraviticJump::LatentInfo' has a wrong offset!");
static_assert(offsetof(EndBattleScene_btsc_sbil0_90_boss020_GraviticJump, OutSignal) == 0x000068, "Member 'EndBattleScene_btsc_sbil0_90_boss020_GraviticJump::OutSignal' has a wrong offset!");

// Function EndGame.EndBattleScene_btsc_sbil0_90_boss020.JumpTo
// 0x0068 (0x0068 - 0x0000)
struct EndBattleScene_btsc_sbil0_90_boss020_JumpTo final
{
public:
	class AEndCharacter*                          Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetLocation;                                    // 0x0008(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               TargetRotation;                                    // 0x0014(0x000C)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StartMotionName;                                   // 0x0024(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LoopMotionName;                                    // 0x002C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OnCompleteMotionName;                              // 0x0034(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MotionOwnerCharaSpecId;                            // 0x003C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0048(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	ESetPlayJumpTo                                OutSignal;                                         // 0x0060(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleScene_btsc_sbil0_90_boss020_JumpTo) == 0x000008, "Wrong alignment on EndBattleScene_btsc_sbil0_90_boss020_JumpTo");
static_assert(sizeof(EndBattleScene_btsc_sbil0_90_boss020_JumpTo) == 0x000068, "Wrong size on EndBattleScene_btsc_sbil0_90_boss020_JumpTo");
static_assert(offsetof(EndBattleScene_btsc_sbil0_90_boss020_JumpTo, Character) == 0x000000, "Member 'EndBattleScene_btsc_sbil0_90_boss020_JumpTo::Character' has a wrong offset!");
static_assert(offsetof(EndBattleScene_btsc_sbil0_90_boss020_JumpTo, TargetLocation) == 0x000008, "Member 'EndBattleScene_btsc_sbil0_90_boss020_JumpTo::TargetLocation' has a wrong offset!");
static_assert(offsetof(EndBattleScene_btsc_sbil0_90_boss020_JumpTo, TargetRotation) == 0x000014, "Member 'EndBattleScene_btsc_sbil0_90_boss020_JumpTo::TargetRotation' has a wrong offset!");
static_assert(offsetof(EndBattleScene_btsc_sbil0_90_boss020_JumpTo, Duration) == 0x000020, "Member 'EndBattleScene_btsc_sbil0_90_boss020_JumpTo::Duration' has a wrong offset!");
static_assert(offsetof(EndBattleScene_btsc_sbil0_90_boss020_JumpTo, StartMotionName) == 0x000024, "Member 'EndBattleScene_btsc_sbil0_90_boss020_JumpTo::StartMotionName' has a wrong offset!");
static_assert(offsetof(EndBattleScene_btsc_sbil0_90_boss020_JumpTo, LoopMotionName) == 0x00002C, "Member 'EndBattleScene_btsc_sbil0_90_boss020_JumpTo::LoopMotionName' has a wrong offset!");
static_assert(offsetof(EndBattleScene_btsc_sbil0_90_boss020_JumpTo, OnCompleteMotionName) == 0x000034, "Member 'EndBattleScene_btsc_sbil0_90_boss020_JumpTo::OnCompleteMotionName' has a wrong offset!");
static_assert(offsetof(EndBattleScene_btsc_sbil0_90_boss020_JumpTo, MotionOwnerCharaSpecId) == 0x00003C, "Member 'EndBattleScene_btsc_sbil0_90_boss020_JumpTo::MotionOwnerCharaSpecId' has a wrong offset!");
static_assert(offsetof(EndBattleScene_btsc_sbil0_90_boss020_JumpTo, LatentInfo) == 0x000048, "Member 'EndBattleScene_btsc_sbil0_90_boss020_JumpTo::LatentInfo' has a wrong offset!");
static_assert(offsetof(EndBattleScene_btsc_sbil0_90_boss020_JumpTo, OutSignal) == 0x000060, "Member 'EndBattleScene_btsc_sbil0_90_boss020_JumpTo::OutSignal' has a wrong offset!");

// Function EndGame.EndBattleScene_btsc_sbil0_90_boss020.RequestUseAbility
// 0x0040 (0x0040 - 0x0000)
struct EndBattleScene_btsc_sbil0_90_boss020_RequestUseAbility final
{
public:
	class FName                                   AbilityID;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AEndCharacter*                          Executor;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AEndCharacter*                          Target;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Timeout;                                           // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ImmediatelyUseAerial;                              // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0020(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	ESetPlayUseAbility                            OutSignal;                                         // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleScene_btsc_sbil0_90_boss020_RequestUseAbility) == 0x000008, "Wrong alignment on EndBattleScene_btsc_sbil0_90_boss020_RequestUseAbility");
static_assert(sizeof(EndBattleScene_btsc_sbil0_90_boss020_RequestUseAbility) == 0x000040, "Wrong size on EndBattleScene_btsc_sbil0_90_boss020_RequestUseAbility");
static_assert(offsetof(EndBattleScene_btsc_sbil0_90_boss020_RequestUseAbility, AbilityID) == 0x000000, "Member 'EndBattleScene_btsc_sbil0_90_boss020_RequestUseAbility::AbilityID' has a wrong offset!");
static_assert(offsetof(EndBattleScene_btsc_sbil0_90_boss020_RequestUseAbility, Executor) == 0x000008, "Member 'EndBattleScene_btsc_sbil0_90_boss020_RequestUseAbility::Executor' has a wrong offset!");
static_assert(offsetof(EndBattleScene_btsc_sbil0_90_boss020_RequestUseAbility, Target) == 0x000010, "Member 'EndBattleScene_btsc_sbil0_90_boss020_RequestUseAbility::Target' has a wrong offset!");
static_assert(offsetof(EndBattleScene_btsc_sbil0_90_boss020_RequestUseAbility, Timeout) == 0x000018, "Member 'EndBattleScene_btsc_sbil0_90_boss020_RequestUseAbility::Timeout' has a wrong offset!");
static_assert(offsetof(EndBattleScene_btsc_sbil0_90_boss020_RequestUseAbility, ImmediatelyUseAerial) == 0x00001C, "Member 'EndBattleScene_btsc_sbil0_90_boss020_RequestUseAbility::ImmediatelyUseAerial' has a wrong offset!");
static_assert(offsetof(EndBattleScene_btsc_sbil0_90_boss020_RequestUseAbility, LatentInfo) == 0x000020, "Member 'EndBattleScene_btsc_sbil0_90_boss020_RequestUseAbility::LatentInfo' has a wrong offset!");
static_assert(offsetof(EndBattleScene_btsc_sbil0_90_boss020_RequestUseAbility, OutSignal) == 0x000038, "Member 'EndBattleScene_btsc_sbil0_90_boss020_RequestUseAbility::OutSignal' has a wrong offset!");

// Function EndGame.EndBattleScene_btsc_slu5b_010.ConfirmSpark
// 0x0010 (0x0010 - 0x0000)
struct EndBattleScene_btsc_slu5b_010_ConfirmSpark final
{
public:
	class AActor*                                 mineActor;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         sparkID;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleScene_btsc_slu5b_010_ConfirmSpark) == 0x000008, "Wrong alignment on EndBattleScene_btsc_slu5b_010_ConfirmSpark");
static_assert(sizeof(EndBattleScene_btsc_slu5b_010_ConfirmSpark) == 0x000010, "Wrong size on EndBattleScene_btsc_slu5b_010_ConfirmSpark");
static_assert(offsetof(EndBattleScene_btsc_slu5b_010_ConfirmSpark, mineActor) == 0x000000, "Member 'EndBattleScene_btsc_slu5b_010_ConfirmSpark::mineActor' has a wrong offset!");
static_assert(offsetof(EndBattleScene_btsc_slu5b_010_ConfirmSpark, sparkID) == 0x000008, "Member 'EndBattleScene_btsc_slu5b_010_ConfirmSpark::sparkID' has a wrong offset!");

// Function EndGame.EndBattleScene_btsc_slu5b_010.ReleaseSpark
// 0x0010 (0x0010 - 0x0000)
struct EndBattleScene_btsc_slu5b_010_ReleaseSpark final
{
public:
	class AActor*                                 mineActor;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         sparkID;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleScene_btsc_slu5b_010_ReleaseSpark) == 0x000008, "Wrong alignment on EndBattleScene_btsc_slu5b_010_ReleaseSpark");
static_assert(sizeof(EndBattleScene_btsc_slu5b_010_ReleaseSpark) == 0x000010, "Wrong size on EndBattleScene_btsc_slu5b_010_ReleaseSpark");
static_assert(offsetof(EndBattleScene_btsc_slu5b_010_ReleaseSpark, mineActor) == 0x000000, "Member 'EndBattleScene_btsc_slu5b_010_ReleaseSpark::mineActor' has a wrong offset!");
static_assert(offsetof(EndBattleScene_btsc_slu5b_010_ReleaseSpark, sparkID) == 0x000008, "Member 'EndBattleScene_btsc_slu5b_010_ReleaseSpark::sparkID' has a wrong offset!");

// Function EndGame.EndNavAPI.FindNearestNavMeshPoint
// 0x0030 (0x0030 - 0x0000)
struct EndNavAPI_FindNearestNavMeshPoint final
{
public:
	struct FVector                                TargetLocation;                                    // 0x0000(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutLocation;                                       // 0x000C(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InModifierName;                                    // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SearchRange;                                       // 0x0020(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndQueryFilterType                           FilterType;                                        // 0x002C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x002D(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2E[0x2];                                       // 0x002E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndNavAPI_FindNearestNavMeshPoint) == 0x000004, "Wrong alignment on EndNavAPI_FindNearestNavMeshPoint");
static_assert(sizeof(EndNavAPI_FindNearestNavMeshPoint) == 0x000030, "Wrong size on EndNavAPI_FindNearestNavMeshPoint");
static_assert(offsetof(EndNavAPI_FindNearestNavMeshPoint, TargetLocation) == 0x000000, "Member 'EndNavAPI_FindNearestNavMeshPoint::TargetLocation' has a wrong offset!");
static_assert(offsetof(EndNavAPI_FindNearestNavMeshPoint, OutLocation) == 0x00000C, "Member 'EndNavAPI_FindNearestNavMeshPoint::OutLocation' has a wrong offset!");
static_assert(offsetof(EndNavAPI_FindNearestNavMeshPoint, InModifierName) == 0x000018, "Member 'EndNavAPI_FindNearestNavMeshPoint::InModifierName' has a wrong offset!");
static_assert(offsetof(EndNavAPI_FindNearestNavMeshPoint, SearchRange) == 0x000020, "Member 'EndNavAPI_FindNearestNavMeshPoint::SearchRange' has a wrong offset!");
static_assert(offsetof(EndNavAPI_FindNearestNavMeshPoint, FilterType) == 0x00002C, "Member 'EndNavAPI_FindNearestNavMeshPoint::FilterType' has a wrong offset!");
static_assert(offsetof(EndNavAPI_FindNearestNavMeshPoint, ReturnValue) == 0x00002D, "Member 'EndNavAPI_FindNearestNavMeshPoint::ReturnValue' has a wrong offset!");

// Function EndGame.EndNavAPI.FindNearestNavMeshPointAgent
// 0x0050 (0x0050 - 0x0000)
struct EndNavAPI_FindNearestNavMeshPointAgent final
{
public:
	struct FVector                                TargetLocation;                                    // 0x0000(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutLocation;                                       // 0x000C(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InModifierName;                                    // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FNavAgentProperties                    InAgentProperty;                                   // 0x0020(0x0020)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SearchRange;                                       // 0x0040(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndQueryFilterType                           FilterType;                                        // 0x004C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x004D(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4E[0x2];                                       // 0x004E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndNavAPI_FindNearestNavMeshPointAgent) == 0x000008, "Wrong alignment on EndNavAPI_FindNearestNavMeshPointAgent");
static_assert(sizeof(EndNavAPI_FindNearestNavMeshPointAgent) == 0x000050, "Wrong size on EndNavAPI_FindNearestNavMeshPointAgent");
static_assert(offsetof(EndNavAPI_FindNearestNavMeshPointAgent, TargetLocation) == 0x000000, "Member 'EndNavAPI_FindNearestNavMeshPointAgent::TargetLocation' has a wrong offset!");
static_assert(offsetof(EndNavAPI_FindNearestNavMeshPointAgent, OutLocation) == 0x00000C, "Member 'EndNavAPI_FindNearestNavMeshPointAgent::OutLocation' has a wrong offset!");
static_assert(offsetof(EndNavAPI_FindNearestNavMeshPointAgent, InModifierName) == 0x000018, "Member 'EndNavAPI_FindNearestNavMeshPointAgent::InModifierName' has a wrong offset!");
static_assert(offsetof(EndNavAPI_FindNearestNavMeshPointAgent, InAgentProperty) == 0x000020, "Member 'EndNavAPI_FindNearestNavMeshPointAgent::InAgentProperty' has a wrong offset!");
static_assert(offsetof(EndNavAPI_FindNearestNavMeshPointAgent, SearchRange) == 0x000040, "Member 'EndNavAPI_FindNearestNavMeshPointAgent::SearchRange' has a wrong offset!");
static_assert(offsetof(EndNavAPI_FindNearestNavMeshPointAgent, FilterType) == 0x00004C, "Member 'EndNavAPI_FindNearestNavMeshPointAgent::FilterType' has a wrong offset!");
static_assert(offsetof(EndNavAPI_FindNearestNavMeshPointAgent, ReturnValue) == 0x00004D, "Member 'EndNavAPI_FindNearestNavMeshPointAgent::ReturnValue' has a wrong offset!");

// Function EndGame.EndNavAPI.GetAgentPropety
// 0x0028 (0x0028 - 0x0000)
struct EndNavAPI_GetAgentPropety final
{
public:
	EEndNavLayerType                              InLayerType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FNavAgentProperties                    ReturnValue;                                       // 0x0008(0x0020)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndNavAPI_GetAgentPropety) == 0x000008, "Wrong alignment on EndNavAPI_GetAgentPropety");
static_assert(sizeof(EndNavAPI_GetAgentPropety) == 0x000028, "Wrong size on EndNavAPI_GetAgentPropety");
static_assert(offsetof(EndNavAPI_GetAgentPropety, InLayerType) == 0x000000, "Member 'EndNavAPI_GetAgentPropety::InLayerType' has a wrong offset!");
static_assert(offsetof(EndNavAPI_GetAgentPropety, ReturnValue) == 0x000008, "Member 'EndNavAPI_GetAgentPropety::ReturnValue' has a wrong offset!");

// Function EndGame.EndNavAPI.GetNavModifierTransform
// 0x0040 (0x0040 - 0x0000)
struct EndNavAPI_GetNavModifierTransform final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ReturnValue;                                       // 0x0010(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndNavAPI_GetNavModifierTransform) == 0x000010, "Wrong alignment on EndNavAPI_GetNavModifierTransform");
static_assert(sizeof(EndNavAPI_GetNavModifierTransform) == 0x000040, "Wrong size on EndNavAPI_GetNavModifierTransform");
static_assert(offsetof(EndNavAPI_GetNavModifierTransform, Name_0) == 0x000000, "Member 'EndNavAPI_GetNavModifierTransform::Name_0' has a wrong offset!");
static_assert(offsetof(EndNavAPI_GetNavModifierTransform, ReturnValue) == 0x000010, "Member 'EndNavAPI_GetNavModifierTransform::ReturnValue' has a wrong offset!");

// Function EndGame.EndNavAPI.InvalidateAerialIgnoreVolume
// 0x000C (0x000C - 0x0000)
struct EndNavAPI_InvalidateAerialIgnoreVolume final
{
public:
	class FName                                   ActorName;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndNavAPI_InvalidateAerialIgnoreVolume) == 0x000004, "Wrong alignment on EndNavAPI_InvalidateAerialIgnoreVolume");
static_assert(sizeof(EndNavAPI_InvalidateAerialIgnoreVolume) == 0x00000C, "Wrong size on EndNavAPI_InvalidateAerialIgnoreVolume");
static_assert(offsetof(EndNavAPI_InvalidateAerialIgnoreVolume, ActorName) == 0x000000, "Member 'EndNavAPI_InvalidateAerialIgnoreVolume::ActorName' has a wrong offset!");
static_assert(offsetof(EndNavAPI_InvalidateAerialIgnoreVolume, ReturnValue) == 0x000008, "Member 'EndNavAPI_InvalidateAerialIgnoreVolume::ReturnValue' has a wrong offset!");

// Function EndGame.EndNavAPI.InvalidateBlockingModifierVolume
// 0x0014 (0x0014 - 0x0000)
struct EndNavAPI_InvalidateBlockingModifierVolume final
{
public:
	class FName                                   LevelName;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActorName;                                         // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndNavAPI_InvalidateBlockingModifierVolume) == 0x000004, "Wrong alignment on EndNavAPI_InvalidateBlockingModifierVolume");
static_assert(sizeof(EndNavAPI_InvalidateBlockingModifierVolume) == 0x000014, "Wrong size on EndNavAPI_InvalidateBlockingModifierVolume");
static_assert(offsetof(EndNavAPI_InvalidateBlockingModifierVolume, LevelName) == 0x000000, "Member 'EndNavAPI_InvalidateBlockingModifierVolume::LevelName' has a wrong offset!");
static_assert(offsetof(EndNavAPI_InvalidateBlockingModifierVolume, ActorName) == 0x000008, "Member 'EndNavAPI_InvalidateBlockingModifierVolume::ActorName' has a wrong offset!");
static_assert(offsetof(EndNavAPI_InvalidateBlockingModifierVolume, ReturnValue) == 0x000010, "Member 'EndNavAPI_InvalidateBlockingModifierVolume::ReturnValue' has a wrong offset!");

// Function EndGame.EndNavAPI.InvalidateFieldActionModifierVolume
// 0x000C (0x000C - 0x0000)
struct EndNavAPI_InvalidateFieldActionModifierVolume final
{
public:
	class FName                                   ActorName;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndNavAPI_InvalidateFieldActionModifierVolume) == 0x000004, "Wrong alignment on EndNavAPI_InvalidateFieldActionModifierVolume");
static_assert(sizeof(EndNavAPI_InvalidateFieldActionModifierVolume) == 0x00000C, "Wrong size on EndNavAPI_InvalidateFieldActionModifierVolume");
static_assert(offsetof(EndNavAPI_InvalidateFieldActionModifierVolume, ActorName) == 0x000000, "Member 'EndNavAPI_InvalidateFieldActionModifierVolume::ActorName' has a wrong offset!");
static_assert(offsetof(EndNavAPI_InvalidateFieldActionModifierVolume, ReturnValue) == 0x000008, "Member 'EndNavAPI_InvalidateFieldActionModifierVolume::ReturnValue' has a wrong offset!");

// Function EndGame.EndNavAPI.InvalidateNavModifierVolume
// 0x000C (0x000C - 0x0000)
struct EndNavAPI_InvalidateNavModifierVolume final
{
public:
	class FName                                   ActorName;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndNavAPI_InvalidateNavModifierVolume) == 0x000004, "Wrong alignment on EndNavAPI_InvalidateNavModifierVolume");
static_assert(sizeof(EndNavAPI_InvalidateNavModifierVolume) == 0x00000C, "Wrong size on EndNavAPI_InvalidateNavModifierVolume");
static_assert(offsetof(EndNavAPI_InvalidateNavModifierVolume, ActorName) == 0x000000, "Member 'EndNavAPI_InvalidateNavModifierVolume::ActorName' has a wrong offset!");
static_assert(offsetof(EndNavAPI_InvalidateNavModifierVolume, ReturnValue) == 0x000008, "Member 'EndNavAPI_InvalidateNavModifierVolume::ReturnValue' has a wrong offset!");

// Function EndGame.EndNavAPI.ValidateAerialIgnoreVolume
// 0x000C (0x000C - 0x0000)
struct EndNavAPI_ValidateAerialIgnoreVolume final
{
public:
	class FName                                   ActorName;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndNavAPI_ValidateAerialIgnoreVolume) == 0x000004, "Wrong alignment on EndNavAPI_ValidateAerialIgnoreVolume");
static_assert(sizeof(EndNavAPI_ValidateAerialIgnoreVolume) == 0x00000C, "Wrong size on EndNavAPI_ValidateAerialIgnoreVolume");
static_assert(offsetof(EndNavAPI_ValidateAerialIgnoreVolume, ActorName) == 0x000000, "Member 'EndNavAPI_ValidateAerialIgnoreVolume::ActorName' has a wrong offset!");
static_assert(offsetof(EndNavAPI_ValidateAerialIgnoreVolume, ReturnValue) == 0x000008, "Member 'EndNavAPI_ValidateAerialIgnoreVolume::ReturnValue' has a wrong offset!");

// Function EndGame.EndNavAPI.ValidateBlockingModifierVolume
// 0x0014 (0x0014 - 0x0000)
struct EndNavAPI_ValidateBlockingModifierVolume final
{
public:
	class FName                                   LevelName;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActorName;                                         // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndNavAPI_ValidateBlockingModifierVolume) == 0x000004, "Wrong alignment on EndNavAPI_ValidateBlockingModifierVolume");
static_assert(sizeof(EndNavAPI_ValidateBlockingModifierVolume) == 0x000014, "Wrong size on EndNavAPI_ValidateBlockingModifierVolume");
static_assert(offsetof(EndNavAPI_ValidateBlockingModifierVolume, LevelName) == 0x000000, "Member 'EndNavAPI_ValidateBlockingModifierVolume::LevelName' has a wrong offset!");
static_assert(offsetof(EndNavAPI_ValidateBlockingModifierVolume, ActorName) == 0x000008, "Member 'EndNavAPI_ValidateBlockingModifierVolume::ActorName' has a wrong offset!");
static_assert(offsetof(EndNavAPI_ValidateBlockingModifierVolume, ReturnValue) == 0x000010, "Member 'EndNavAPI_ValidateBlockingModifierVolume::ReturnValue' has a wrong offset!");

// Function EndGame.EndNavAPI.ValidateFieldActionModifierVolume
// 0x000C (0x000C - 0x0000)
struct EndNavAPI_ValidateFieldActionModifierVolume final
{
public:
	class FName                                   ActorName;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndNavAPI_ValidateFieldActionModifierVolume) == 0x000004, "Wrong alignment on EndNavAPI_ValidateFieldActionModifierVolume");
static_assert(sizeof(EndNavAPI_ValidateFieldActionModifierVolume) == 0x00000C, "Wrong size on EndNavAPI_ValidateFieldActionModifierVolume");
static_assert(offsetof(EndNavAPI_ValidateFieldActionModifierVolume, ActorName) == 0x000000, "Member 'EndNavAPI_ValidateFieldActionModifierVolume::ActorName' has a wrong offset!");
static_assert(offsetof(EndNavAPI_ValidateFieldActionModifierVolume, ReturnValue) == 0x000008, "Member 'EndNavAPI_ValidateFieldActionModifierVolume::ReturnValue' has a wrong offset!");

// Function EndGame.EndNavAPI.ValidateNavModifierVolume
// 0x000C (0x000C - 0x0000)
struct EndNavAPI_ValidateNavModifierVolume final
{
public:
	class FName                                   ActorName;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndNavAPI_ValidateNavModifierVolume) == 0x000004, "Wrong alignment on EndNavAPI_ValidateNavModifierVolume");
static_assert(sizeof(EndNavAPI_ValidateNavModifierVolume) == 0x00000C, "Wrong size on EndNavAPI_ValidateNavModifierVolume");
static_assert(offsetof(EndNavAPI_ValidateNavModifierVolume, ActorName) == 0x000000, "Member 'EndNavAPI_ValidateNavModifierVolume::ActorName' has a wrong offset!");
static_assert(offsetof(EndNavAPI_ValidateNavModifierVolume, ReturnValue) == 0x000008, "Member 'EndNavAPI_ValidateNavModifierVolume::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleTalkCharacterComponent.OnNotify
// 0x0020 (0x0020 - 0x0000)
struct EndBattleTalkCharacterComponent_OnNotify final
{
public:
	class FName                                   AnimName;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SoundName;                                         // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AEndCharacter*                          ownerChara;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleTalkCharacterComponent_OnNotify) == 0x000008, "Wrong alignment on EndBattleTalkCharacterComponent_OnNotify");
static_assert(sizeof(EndBattleTalkCharacterComponent_OnNotify) == 0x000020, "Wrong size on EndBattleTalkCharacterComponent_OnNotify");
static_assert(offsetof(EndBattleTalkCharacterComponent_OnNotify, AnimName) == 0x000000, "Member 'EndBattleTalkCharacterComponent_OnNotify::AnimName' has a wrong offset!");
static_assert(offsetof(EndBattleTalkCharacterComponent_OnNotify, SoundName) == 0x000008, "Member 'EndBattleTalkCharacterComponent_OnNotify::SoundName' has a wrong offset!");
static_assert(offsetof(EndBattleTalkCharacterComponent_OnNotify, ownerChara) == 0x000010, "Member 'EndBattleTalkCharacterComponent_OnNotify::ownerChara' has a wrong offset!");
static_assert(offsetof(EndBattleTalkCharacterComponent_OnNotify, ReturnValue) == 0x000018, "Member 'EndBattleTalkCharacterComponent_OnNotify::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleTalkCharacterComponent.OnNotifyWithAbility
// 0x0220 (0x0220 - 0x0000)
struct EndBattleTalkCharacterComponent_OnNotifyWithAbility final
{
public:
	class FName                                   AnimName;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SoundName;                                         // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AEndCharacter*                          ownerChara;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AEndCharacter*                          targetChara;                                       // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AbilityID;                                         // 0x0020(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEndDataTableBattleAbility             dataTableBattleAbility;                            // 0x0028(0x01F0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bFinishBlow;                                       // 0x0218(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0219(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21A[0x6];                                      // 0x021A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleTalkCharacterComponent_OnNotifyWithAbility) == 0x000008, "Wrong alignment on EndBattleTalkCharacterComponent_OnNotifyWithAbility");
static_assert(sizeof(EndBattleTalkCharacterComponent_OnNotifyWithAbility) == 0x000220, "Wrong size on EndBattleTalkCharacterComponent_OnNotifyWithAbility");
static_assert(offsetof(EndBattleTalkCharacterComponent_OnNotifyWithAbility, AnimName) == 0x000000, "Member 'EndBattleTalkCharacterComponent_OnNotifyWithAbility::AnimName' has a wrong offset!");
static_assert(offsetof(EndBattleTalkCharacterComponent_OnNotifyWithAbility, SoundName) == 0x000008, "Member 'EndBattleTalkCharacterComponent_OnNotifyWithAbility::SoundName' has a wrong offset!");
static_assert(offsetof(EndBattleTalkCharacterComponent_OnNotifyWithAbility, ownerChara) == 0x000010, "Member 'EndBattleTalkCharacterComponent_OnNotifyWithAbility::ownerChara' has a wrong offset!");
static_assert(offsetof(EndBattleTalkCharacterComponent_OnNotifyWithAbility, targetChara) == 0x000018, "Member 'EndBattleTalkCharacterComponent_OnNotifyWithAbility::targetChara' has a wrong offset!");
static_assert(offsetof(EndBattleTalkCharacterComponent_OnNotifyWithAbility, AbilityID) == 0x000020, "Member 'EndBattleTalkCharacterComponent_OnNotifyWithAbility::AbilityID' has a wrong offset!");
static_assert(offsetof(EndBattleTalkCharacterComponent_OnNotifyWithAbility, dataTableBattleAbility) == 0x000028, "Member 'EndBattleTalkCharacterComponent_OnNotifyWithAbility::dataTableBattleAbility' has a wrong offset!");
static_assert(offsetof(EndBattleTalkCharacterComponent_OnNotifyWithAbility, bFinishBlow) == 0x000218, "Member 'EndBattleTalkCharacterComponent_OnNotifyWithAbility::bFinishBlow' has a wrong offset!");
static_assert(offsetof(EndBattleTalkCharacterComponent_OnNotifyWithAbility, ReturnValue) == 0x000219, "Member 'EndBattleTalkCharacterComponent_OnNotifyWithAbility::ReturnValue' has a wrong offset!");

// Function EndGame.EndBattleTalkOnEndBattleActor.OnEndBattle
// 0x000C (0x000C - 0x0000)
struct EndBattleTalkOnEndBattleActor_OnEndBattle final
{
public:
	class FName                                   BattleSceneID;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EndBattleExitBattleSceneType                  BattleExitType;                                    // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBattleTalkOnEndBattleActor_OnEndBattle) == 0x000004, "Wrong alignment on EndBattleTalkOnEndBattleActor_OnEndBattle");
static_assert(sizeof(EndBattleTalkOnEndBattleActor_OnEndBattle) == 0x00000C, "Wrong size on EndBattleTalkOnEndBattleActor_OnEndBattle");
static_assert(offsetof(EndBattleTalkOnEndBattleActor_OnEndBattle, BattleSceneID) == 0x000000, "Member 'EndBattleTalkOnEndBattleActor_OnEndBattle::BattleSceneID' has a wrong offset!");
static_assert(offsetof(EndBattleTalkOnEndBattleActor_OnEndBattle, BattleExitType) == 0x000008, "Member 'EndBattleTalkOnEndBattleActor_OnEndBattle::BattleExitType' has a wrong offset!");

// Function EndGame.EndBattleTalkOnEndBattleActor.PlayVoice
// 0x0014 (0x0014 - 0x0000)
struct EndBattleTalkOnEndBattleActor_PlayVoice final
{
public:
	bool                                          bUnuseDefaultDelay;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OverrideDelayMinSeconds;                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OverrideDelayMaxSeconds;                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   VoiceSetId;                                        // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBattleTalkOnEndBattleActor_PlayVoice) == 0x000004, "Wrong alignment on EndBattleTalkOnEndBattleActor_PlayVoice");
static_assert(sizeof(EndBattleTalkOnEndBattleActor_PlayVoice) == 0x000014, "Wrong size on EndBattleTalkOnEndBattleActor_PlayVoice");
static_assert(offsetof(EndBattleTalkOnEndBattleActor_PlayVoice, bUnuseDefaultDelay) == 0x000000, "Member 'EndBattleTalkOnEndBattleActor_PlayVoice::bUnuseDefaultDelay' has a wrong offset!");
static_assert(offsetof(EndBattleTalkOnEndBattleActor_PlayVoice, OverrideDelayMinSeconds) == 0x000004, "Member 'EndBattleTalkOnEndBattleActor_PlayVoice::OverrideDelayMinSeconds' has a wrong offset!");
static_assert(offsetof(EndBattleTalkOnEndBattleActor_PlayVoice, OverrideDelayMaxSeconds) == 0x000008, "Member 'EndBattleTalkOnEndBattleActor_PlayVoice::OverrideDelayMaxSeconds' has a wrong offset!");
static_assert(offsetof(EndBattleTalkOnEndBattleActor_PlayVoice, VoiceSetId) == 0x00000C, "Member 'EndBattleTalkOnEndBattleActor_PlayVoice::VoiceSetId' has a wrong offset!");

// Function EndGame.EndPolygon.GetDynamicMaterial
// 0x0008 (0x0008 - 0x0000)
struct EndPolygon_GetDynamicMaterial final
{
public:
	class UMaterialInstanceDynamic*               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndPolygon_GetDynamicMaterial) == 0x000008, "Wrong alignment on EndPolygon_GetDynamicMaterial");
static_assert(sizeof(EndPolygon_GetDynamicMaterial) == 0x000008, "Wrong size on EndPolygon_GetDynamicMaterial");
static_assert(offsetof(EndPolygon_GetDynamicMaterial, ReturnValue) == 0x000000, "Member 'EndPolygon_GetDynamicMaterial::ReturnValue' has a wrong offset!");

// Function EndGame.EndPolygon.SetBlendMode
// 0x0001 (0x0001 - 0x0000)
struct EndPolygon_SetBlendMode final
{
public:
	EBlendMode                                    InBlendMode;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndPolygon_SetBlendMode) == 0x000001, "Wrong alignment on EndPolygon_SetBlendMode");
static_assert(sizeof(EndPolygon_SetBlendMode) == 0x000001, "Wrong size on EndPolygon_SetBlendMode");
static_assert(offsetof(EndPolygon_SetBlendMode, InBlendMode) == 0x000000, "Member 'EndPolygon_SetBlendMode::InBlendMode' has a wrong offset!");

// Function EndGame.EndPolygon.SetBrush
// 0x0078 (0x0078 - 0x0000)
struct EndPolygon_SetBrush final
{
public:
	struct FSlateBrush                            InBrush;                                           // 0x0000(0x0078)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndPolygon_SetBrush) == 0x000008, "Wrong alignment on EndPolygon_SetBrush");
static_assert(sizeof(EndPolygon_SetBrush) == 0x000078, "Wrong size on EndPolygon_SetBrush");
static_assert(offsetof(EndPolygon_SetBrush, InBrush) == 0x000000, "Member 'EndPolygon_SetBrush::InBrush' has a wrong offset!");

// Function EndGame.EndPolygon.SetBrushFromAsset
// 0x0008 (0x0008 - 0x0000)
struct EndPolygon_SetBrushFromAsset final
{
public:
	class USlateBrushAsset*                       Asset;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndPolygon_SetBrushFromAsset) == 0x000008, "Wrong alignment on EndPolygon_SetBrushFromAsset");
static_assert(sizeof(EndPolygon_SetBrushFromAsset) == 0x000008, "Wrong size on EndPolygon_SetBrushFromAsset");
static_assert(offsetof(EndPolygon_SetBrushFromAsset, Asset) == 0x000000, "Member 'EndPolygon_SetBrushFromAsset::Asset' has a wrong offset!");

// Function EndGame.EndPolygon.SetBrushFromMaterial
// 0x0008 (0x0008 - 0x0000)
struct EndPolygon_SetBrushFromMaterial final
{
public:
	class UMaterialInterface*                     Material;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndPolygon_SetBrushFromMaterial) == 0x000008, "Wrong alignment on EndPolygon_SetBrushFromMaterial");
static_assert(sizeof(EndPolygon_SetBrushFromMaterial) == 0x000008, "Wrong size on EndPolygon_SetBrushFromMaterial");
static_assert(offsetof(EndPolygon_SetBrushFromMaterial, Material) == 0x000000, "Member 'EndPolygon_SetBrushFromMaterial::Material' has a wrong offset!");

// Function EndGame.EndPolygon.SetBrushFromTexture
// 0x0010 (0x0010 - 0x0000)
struct EndPolygon_SetBrushFromTexture final
{
public:
	class UTexture2D*                             Texture;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMatchSize;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndPolygon_SetBrushFromTexture) == 0x000008, "Wrong alignment on EndPolygon_SetBrushFromTexture");
static_assert(sizeof(EndPolygon_SetBrushFromTexture) == 0x000010, "Wrong size on EndPolygon_SetBrushFromTexture");
static_assert(offsetof(EndPolygon_SetBrushFromTexture, Texture) == 0x000000, "Member 'EndPolygon_SetBrushFromTexture::Texture' has a wrong offset!");
static_assert(offsetof(EndPolygon_SetBrushFromTexture, bMatchSize) == 0x000008, "Member 'EndPolygon_SetBrushFromTexture::bMatchSize' has a wrong offset!");

// Function EndGame.EndPolygon.SetBrushFromTextureDynamic
// 0x0010 (0x0010 - 0x0000)
struct EndPolygon_SetBrushFromTextureDynamic final
{
public:
	class UTexture2DDynamic*                      Texture;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMatchSize;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndPolygon_SetBrushFromTextureDynamic) == 0x000008, "Wrong alignment on EndPolygon_SetBrushFromTextureDynamic");
static_assert(sizeof(EndPolygon_SetBrushFromTextureDynamic) == 0x000010, "Wrong size on EndPolygon_SetBrushFromTextureDynamic");
static_assert(offsetof(EndPolygon_SetBrushFromTextureDynamic, Texture) == 0x000000, "Member 'EndPolygon_SetBrushFromTextureDynamic::Texture' has a wrong offset!");
static_assert(offsetof(EndPolygon_SetBrushFromTextureDynamic, bMatchSize) == 0x000008, "Member 'EndPolygon_SetBrushFromTextureDynamic::bMatchSize' has a wrong offset!");

// Function EndGame.EndPolygon.SetColorAndOpacity
// 0x0010 (0x0010 - 0x0000)
struct EndPolygon_SetColorAndOpacity final
{
public:
	struct FLinearColor                           InColorAndOpacity;                                 // 0x0000(0x0010)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndPolygon_SetColorAndOpacity) == 0x000004, "Wrong alignment on EndPolygon_SetColorAndOpacity");
static_assert(sizeof(EndPolygon_SetColorAndOpacity) == 0x000010, "Wrong size on EndPolygon_SetColorAndOpacity");
static_assert(offsetof(EndPolygon_SetColorAndOpacity, InColorAndOpacity) == 0x000000, "Member 'EndPolygon_SetColorAndOpacity::InColorAndOpacity' has a wrong offset!");

// Function EndGame.EndPolygon.SetOpacity
// 0x0004 (0x0004 - 0x0000)
struct EndPolygon_SetOpacity final
{
public:
	float                                         InOpacity;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndPolygon_SetOpacity) == 0x000004, "Wrong alignment on EndPolygon_SetOpacity");
static_assert(sizeof(EndPolygon_SetOpacity) == 0x000004, "Wrong size on EndPolygon_SetOpacity");
static_assert(offsetof(EndPolygon_SetOpacity, InOpacity) == 0x000000, "Member 'EndPolygon_SetOpacity::InOpacity' has a wrong offset!");

// Function EndGame.EndButton.SetBackgroundColor
// 0x0010 (0x0010 - 0x0000)
struct EndButton_SetBackgroundColor final
{
public:
	struct FLinearColor                           InBackgroundColor;                                 // 0x0000(0x0010)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndButton_SetBackgroundColor) == 0x000004, "Wrong alignment on EndButton_SetBackgroundColor");
static_assert(sizeof(EndButton_SetBackgroundColor) == 0x000010, "Wrong size on EndButton_SetBackgroundColor");
static_assert(offsetof(EndButton_SetBackgroundColor, InBackgroundColor) == 0x000000, "Member 'EndButton_SetBackgroundColor::InBackgroundColor' has a wrong offset!");

// Function EndGame.EndButton.SetCanPress
// 0x0001 (0x0001 - 0x0000)
struct EndButton_SetCanPress final
{
public:
	bool                                          bInCanPress;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndButton_SetCanPress) == 0x000001, "Wrong alignment on EndButton_SetCanPress");
static_assert(sizeof(EndButton_SetCanPress) == 0x000001, "Wrong size on EndButton_SetCanPress");
static_assert(offsetof(EndButton_SetCanPress, bInCanPress) == 0x000000, "Member 'EndButton_SetCanPress::bInCanPress' has a wrong offset!");

// Function EndGame.EndButton.SetClickMethod
// 0x0001 (0x0001 - 0x0000)
struct EndButton_SetClickMethod final
{
public:
	EButtonClickMethod                            InClickMethod;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndButton_SetClickMethod) == 0x000001, "Wrong alignment on EndButton_SetClickMethod");
static_assert(sizeof(EndButton_SetClickMethod) == 0x000001, "Wrong size on EndButton_SetClickMethod");
static_assert(offsetof(EndButton_SetClickMethod, InClickMethod) == 0x000000, "Member 'EndButton_SetClickMethod::InClickMethod' has a wrong offset!");

// Function EndGame.EndButton.SetColorAndOpacity
// 0x0010 (0x0010 - 0x0000)
struct EndButton_SetColorAndOpacity final
{
public:
	struct FLinearColor                           InColorAndOpacity;                                 // 0x0000(0x0010)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndButton_SetColorAndOpacity) == 0x000004, "Wrong alignment on EndButton_SetColorAndOpacity");
static_assert(sizeof(EndButton_SetColorAndOpacity) == 0x000010, "Wrong size on EndButton_SetColorAndOpacity");
static_assert(offsetof(EndButton_SetColorAndOpacity, InColorAndOpacity) == 0x000000, "Member 'EndButton_SetColorAndOpacity::InColorAndOpacity' has a wrong offset!");

// Function EndGame.EndButton.SetForceHovered
// 0x0001 (0x0001 - 0x0000)
struct EndButton_SetForceHovered final
{
public:
	bool                                          bInHovered;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndButton_SetForceHovered) == 0x000001, "Wrong alignment on EndButton_SetForceHovered");
static_assert(sizeof(EndButton_SetForceHovered) == 0x000001, "Wrong size on EndButton_SetForceHovered");
static_assert(offsetof(EndButton_SetForceHovered, bInHovered) == 0x000000, "Member 'EndButton_SetForceHovered::bInHovered' has a wrong offset!");

// Function EndGame.EndButton.SetGuideText
// 0x0010 (0x0010 - 0x0000)
struct EndButton_SetGuideText final
{
public:
	class FString                                 InText;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndButton_SetGuideText) == 0x000008, "Wrong alignment on EndButton_SetGuideText");
static_assert(sizeof(EndButton_SetGuideText) == 0x000010, "Wrong size on EndButton_SetGuideText");
static_assert(offsetof(EndButton_SetGuideText, InText) == 0x000000, "Member 'EndButton_SetGuideText::InText' has a wrong offset!");

// Function EndGame.EndButton.SetHelpText
// 0x0010 (0x0010 - 0x0000)
struct EndButton_SetHelpText final
{
public:
	class FString                                 InText;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndButton_SetHelpText) == 0x000008, "Wrong alignment on EndButton_SetHelpText");
static_assert(sizeof(EndButton_SetHelpText) == 0x000010, "Wrong size on EndButton_SetHelpText");
static_assert(offsetof(EndButton_SetHelpText, InText) == 0x000000, "Member 'EndButton_SetHelpText::InText' has a wrong offset!");

// Function EndGame.EndButton.SetIgnoreKeyRepeat
// 0x0001 (0x0001 - 0x0000)
struct EndButton_SetIgnoreKeyRepeat final
{
public:
	bool                                          bInIgnoreKeyRepeat;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndButton_SetIgnoreKeyRepeat) == 0x000001, "Wrong alignment on EndButton_SetIgnoreKeyRepeat");
static_assert(sizeof(EndButton_SetIgnoreKeyRepeat) == 0x000001, "Wrong size on EndButton_SetIgnoreKeyRepeat");
static_assert(offsetof(EndButton_SetIgnoreKeyRepeat, bInIgnoreKeyRepeat) == 0x000000, "Member 'EndButton_SetIgnoreKeyRepeat::bInIgnoreKeyRepeat' has a wrong offset!");

// Function EndGame.EndButton.SetIsFocusable
// 0x0001 (0x0001 - 0x0000)
struct EndButton_SetIsFocusable final
{
public:
	bool                                          bInIsFocusable;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndButton_SetIsFocusable) == 0x000001, "Wrong alignment on EndButton_SetIsFocusable");
static_assert(sizeof(EndButton_SetIsFocusable) == 0x000001, "Wrong size on EndButton_SetIsFocusable");
static_assert(offsetof(EndButton_SetIsFocusable, bInIsFocusable) == 0x000000, "Member 'EndButton_SetIsFocusable::bInIsFocusable' has a wrong offset!");

// Function EndGame.EndButton.SetPressMethod
// 0x0001 (0x0001 - 0x0000)
struct EndButton_SetPressMethod final
{
public:
	EButtonPressMethod                            InPressMethod;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndButton_SetPressMethod) == 0x000001, "Wrong alignment on EndButton_SetPressMethod");
static_assert(sizeof(EndButton_SetPressMethod) == 0x000001, "Wrong size on EndButton_SetPressMethod");
static_assert(offsetof(EndButton_SetPressMethod, InPressMethod) == 0x000000, "Member 'EndButton_SetPressMethod::InPressMethod' has a wrong offset!");

// Function EndGame.EndButton.SetStyle
// 0x0238 (0x0238 - 0x0000)
struct EndButton_SetStyle final
{
public:
	struct FButtonStyle                           InStyle;                                           // 0x0000(0x0238)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndButton_SetStyle) == 0x000008, "Wrong alignment on EndButton_SetStyle");
static_assert(sizeof(EndButton_SetStyle) == 0x000238, "Wrong size on EndButton_SetStyle");
static_assert(offsetof(EndButton_SetStyle, InStyle) == 0x000000, "Member 'EndButton_SetStyle::InStyle' has a wrong offset!");

// Function EndGame.EndButton.SetTouchMethod
// 0x0001 (0x0001 - 0x0000)
struct EndButton_SetTouchMethod final
{
public:
	EButtonTouchMethod                            InTouchMethod;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndButton_SetTouchMethod) == 0x000001, "Wrong alignment on EndButton_SetTouchMethod");
static_assert(sizeof(EndButton_SetTouchMethod) == 0x000001, "Wrong size on EndButton_SetTouchMethod");
static_assert(offsetof(EndButton_SetTouchMethod, InTouchMethod) == 0x000000, "Member 'EndButton_SetTouchMethod::InTouchMethod' has a wrong offset!");

// Function EndGame.EndButton.GetCanPress
// 0x0001 (0x0001 - 0x0000)
struct EndButton_GetCanPress final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndButton_GetCanPress) == 0x000001, "Wrong alignment on EndButton_GetCanPress");
static_assert(sizeof(EndButton_GetCanPress) == 0x000001, "Wrong size on EndButton_GetCanPress");
static_assert(offsetof(EndButton_GetCanPress, ReturnValue) == 0x000000, "Member 'EndButton_GetCanPress::ReturnValue' has a wrong offset!");

// Function EndGame.EndButton.GetIgnoreKeyRepeat
// 0x0001 (0x0001 - 0x0000)
struct EndButton_GetIgnoreKeyRepeat final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndButton_GetIgnoreKeyRepeat) == 0x000001, "Wrong alignment on EndButton_GetIgnoreKeyRepeat");
static_assert(sizeof(EndButton_GetIgnoreKeyRepeat) == 0x000001, "Wrong size on EndButton_GetIgnoreKeyRepeat");
static_assert(offsetof(EndButton_GetIgnoreKeyRepeat, ReturnValue) == 0x000000, "Member 'EndButton_GetIgnoreKeyRepeat::ReturnValue' has a wrong offset!");

// Function EndGame.EndButton.GetIsFocusable
// 0x0001 (0x0001 - 0x0000)
struct EndButton_GetIsFocusable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndButton_GetIsFocusable) == 0x000001, "Wrong alignment on EndButton_GetIsFocusable");
static_assert(sizeof(EndButton_GetIsFocusable) == 0x000001, "Wrong size on EndButton_GetIsFocusable");
static_assert(offsetof(EndButton_GetIsFocusable, ReturnValue) == 0x000000, "Member 'EndButton_GetIsFocusable::ReturnValue' has a wrong offset!");

// Function EndGame.EndButton.GetIsForceHovered
// 0x0001 (0x0001 - 0x0000)
struct EndButton_GetIsForceHovered final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndButton_GetIsForceHovered) == 0x000001, "Wrong alignment on EndButton_GetIsForceHovered");
static_assert(sizeof(EndButton_GetIsForceHovered) == 0x000001, "Wrong size on EndButton_GetIsForceHovered");
static_assert(offsetof(EndButton_GetIsForceHovered, ReturnValue) == 0x000000, "Member 'EndButton_GetIsForceHovered::ReturnValue' has a wrong offset!");

// Function EndGame.EndButton.IsPressed
// 0x0001 (0x0001 - 0x0000)
struct EndButton_IsPressed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndButton_IsPressed) == 0x000001, "Wrong alignment on EndButton_IsPressed");
static_assert(sizeof(EndButton_IsPressed) == 0x000001, "Wrong size on EndButton_IsPressed");
static_assert(offsetof(EndButton_IsPressed, ReturnValue) == 0x000000, "Member 'EndButton_IsPressed::ReturnValue' has a wrong offset!");

// Function EndGame.EndBikeTriggerBoxLoccheBreakBridge.OnOverlapBegin
// 0x0010 (0x0010 - 0x0000)
struct EndBikeTriggerBoxLoccheBreakBridge_OnOverlapBegin final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBikeTriggerBoxLoccheBreakBridge_OnOverlapBegin) == 0x000008, "Wrong alignment on EndBikeTriggerBoxLoccheBreakBridge_OnOverlapBegin");
static_assert(sizeof(EndBikeTriggerBoxLoccheBreakBridge_OnOverlapBegin) == 0x000010, "Wrong size on EndBikeTriggerBoxLoccheBreakBridge_OnOverlapBegin");
static_assert(offsetof(EndBikeTriggerBoxLoccheBreakBridge_OnOverlapBegin, OverlappedActor) == 0x000000, "Member 'EndBikeTriggerBoxLoccheBreakBridge_OnOverlapBegin::OverlappedActor' has a wrong offset!");
static_assert(offsetof(EndBikeTriggerBoxLoccheBreakBridge_OnOverlapBegin, OtherActor) == 0x000008, "Member 'EndBikeTriggerBoxLoccheBreakBridge_OnOverlapBegin::OtherActor' has a wrong offset!");

// Function EndGame.EndBikeTriggerBoxLoccheBreakBridge.OnOverlapEnd
// 0x0010 (0x0010 - 0x0000)
struct EndBikeTriggerBoxLoccheBreakBridge_OnOverlapEnd final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBikeTriggerBoxLoccheBreakBridge_OnOverlapEnd) == 0x000008, "Wrong alignment on EndBikeTriggerBoxLoccheBreakBridge_OnOverlapEnd");
static_assert(sizeof(EndBikeTriggerBoxLoccheBreakBridge_OnOverlapEnd) == 0x000010, "Wrong size on EndBikeTriggerBoxLoccheBreakBridge_OnOverlapEnd");
static_assert(offsetof(EndBikeTriggerBoxLoccheBreakBridge_OnOverlapEnd, OverlappedActor) == 0x000000, "Member 'EndBikeTriggerBoxLoccheBreakBridge_OnOverlapEnd::OverlappedActor' has a wrong offset!");
static_assert(offsetof(EndBikeTriggerBoxLoccheBreakBridge_OnOverlapEnd, OtherActor) == 0x000008, "Member 'EndBikeTriggerBoxLoccheBreakBridge_OnOverlapEnd::OtherActor' has a wrong offset!");

// Function EndGame.EndBikeTriggerBoxSavePhysActor.BeginOverlap
// 0x0010 (0x0010 - 0x0000)
struct EndBikeTriggerBoxSavePhysActor_BeginOverlap final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBikeTriggerBoxSavePhysActor_BeginOverlap) == 0x000008, "Wrong alignment on EndBikeTriggerBoxSavePhysActor_BeginOverlap");
static_assert(sizeof(EndBikeTriggerBoxSavePhysActor_BeginOverlap) == 0x000010, "Wrong size on EndBikeTriggerBoxSavePhysActor_BeginOverlap");
static_assert(offsetof(EndBikeTriggerBoxSavePhysActor_BeginOverlap, OverlappedActor) == 0x000000, "Member 'EndBikeTriggerBoxSavePhysActor_BeginOverlap::OverlappedActor' has a wrong offset!");
static_assert(offsetof(EndBikeTriggerBoxSavePhysActor_BeginOverlap, OtherActor) == 0x000008, "Member 'EndBikeTriggerBoxSavePhysActor_BeginOverlap::OtherActor' has a wrong offset!");

// Function EndGame.EndBillboard.SetBlendMode
// 0x0001 (0x0001 - 0x0000)
struct EndBillboard_SetBlendMode final
{
public:
	EBlendMode                                    InBlendMode;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBillboard_SetBlendMode) == 0x000001, "Wrong alignment on EndBillboard_SetBlendMode");
static_assert(sizeof(EndBillboard_SetBlendMode) == 0x000001, "Wrong size on EndBillboard_SetBlendMode");
static_assert(offsetof(EndBillboard_SetBlendMode, InBlendMode) == 0x000000, "Member 'EndBillboard_SetBlendMode::InBlendMode' has a wrong offset!");

// Function EndGame.EndBillboard.SetColorAndOpacity
// 0x0010 (0x0010 - 0x0000)
struct EndBillboard_SetColorAndOpacity final
{
public:
	struct FLinearColor                           InColorAndOpacity;                                 // 0x0000(0x0010)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBillboard_SetColorAndOpacity) == 0x000004, "Wrong alignment on EndBillboard_SetColorAndOpacity");
static_assert(sizeof(EndBillboard_SetColorAndOpacity) == 0x000010, "Wrong size on EndBillboard_SetColorAndOpacity");
static_assert(offsetof(EndBillboard_SetColorAndOpacity, InColorAndOpacity) == 0x000000, "Member 'EndBillboard_SetColorAndOpacity::InColorAndOpacity' has a wrong offset!");

// Function EndGame.EndBillboard.SetImagePath
// 0x0020 (0x0020 - 0x0000)
struct EndBillboard_SetImagePath final
{
public:
	struct FSoftObjectPath                        InImagePath;                                       // 0x0000(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInRewind;                                         // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBillboard_SetImagePath) == 0x000008, "Wrong alignment on EndBillboard_SetImagePath");
static_assert(sizeof(EndBillboard_SetImagePath) == 0x000020, "Wrong size on EndBillboard_SetImagePath");
static_assert(offsetof(EndBillboard_SetImagePath, InImagePath) == 0x000000, "Member 'EndBillboard_SetImagePath::InImagePath' has a wrong offset!");
static_assert(offsetof(EndBillboard_SetImagePath, bInRewind) == 0x000018, "Member 'EndBillboard_SetImagePath::bInRewind' has a wrong offset!");

// Function EndGame.EndBillboard.SetOpacity
// 0x0004 (0x0004 - 0x0000)
struct EndBillboard_SetOpacity final
{
public:
	float                                         InOpacity;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBillboard_SetOpacity) == 0x000004, "Wrong alignment on EndBillboard_SetOpacity");
static_assert(sizeof(EndBillboard_SetOpacity) == 0x000004, "Wrong size on EndBillboard_SetOpacity");
static_assert(offsetof(EndBillboard_SetOpacity, InOpacity) == 0x000000, "Member 'EndBillboard_SetOpacity::InOpacity' has a wrong offset!");

// Function EndGame.EndBonamikBoxScaleGroupParamsActor.OnOverlapBegin
// 0x00A8 (0x00A8 - 0x0000)
struct EndBonamikBoxScaleGroupParamsActor_OnOverlapBegin final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBonamikBoxScaleGroupParamsActor_OnOverlapBegin) == 0x000008, "Wrong alignment on EndBonamikBoxScaleGroupParamsActor_OnOverlapBegin");
static_assert(sizeof(EndBonamikBoxScaleGroupParamsActor_OnOverlapBegin) == 0x0000A8, "Wrong size on EndBonamikBoxScaleGroupParamsActor_OnOverlapBegin");
static_assert(offsetof(EndBonamikBoxScaleGroupParamsActor_OnOverlapBegin, OverlappedComponent) == 0x000000, "Member 'EndBonamikBoxScaleGroupParamsActor_OnOverlapBegin::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(EndBonamikBoxScaleGroupParamsActor_OnOverlapBegin, OtherActor) == 0x000008, "Member 'EndBonamikBoxScaleGroupParamsActor_OnOverlapBegin::OtherActor' has a wrong offset!");
static_assert(offsetof(EndBonamikBoxScaleGroupParamsActor_OnOverlapBegin, OtherComp) == 0x000010, "Member 'EndBonamikBoxScaleGroupParamsActor_OnOverlapBegin::OtherComp' has a wrong offset!");
static_assert(offsetof(EndBonamikBoxScaleGroupParamsActor_OnOverlapBegin, OtherBodyIndex) == 0x000018, "Member 'EndBonamikBoxScaleGroupParamsActor_OnOverlapBegin::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(EndBonamikBoxScaleGroupParamsActor_OnOverlapBegin, bFromSweep) == 0x00001C, "Member 'EndBonamikBoxScaleGroupParamsActor_OnOverlapBegin::bFromSweep' has a wrong offset!");
static_assert(offsetof(EndBonamikBoxScaleGroupParamsActor_OnOverlapBegin, SweepResult) == 0x000020, "Member 'EndBonamikBoxScaleGroupParamsActor_OnOverlapBegin::SweepResult' has a wrong offset!");

// Function EndGame.EndBonamikBoxScaleGroupParamsActor.OnOverlapEnd
// 0x0020 (0x0020 - 0x0000)
struct EndBonamikBoxScaleGroupParamsActor_OnOverlapEnd final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndBonamikBoxScaleGroupParamsActor_OnOverlapEnd) == 0x000008, "Wrong alignment on EndBonamikBoxScaleGroupParamsActor_OnOverlapEnd");
static_assert(sizeof(EndBonamikBoxScaleGroupParamsActor_OnOverlapEnd) == 0x000020, "Wrong size on EndBonamikBoxScaleGroupParamsActor_OnOverlapEnd");
static_assert(offsetof(EndBonamikBoxScaleGroupParamsActor_OnOverlapEnd, OverlappedComponent) == 0x000000, "Member 'EndBonamikBoxScaleGroupParamsActor_OnOverlapEnd::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(EndBonamikBoxScaleGroupParamsActor_OnOverlapEnd, OtherActor) == 0x000008, "Member 'EndBonamikBoxScaleGroupParamsActor_OnOverlapEnd::OtherActor' has a wrong offset!");
static_assert(offsetof(EndBonamikBoxScaleGroupParamsActor_OnOverlapEnd, OtherComp) == 0x000010, "Member 'EndBonamikBoxScaleGroupParamsActor_OnOverlapEnd::OtherComp' has a wrong offset!");
static_assert(offsetof(EndBonamikBoxScaleGroupParamsActor_OnOverlapEnd, OtherBodyIndex) == 0x000018, "Member 'EndBonamikBoxScaleGroupParamsActor_OnOverlapEnd::OtherBodyIndex' has a wrong offset!");

// Function EndGame.EndBonamikBoxWindActor.IsActive
// 0x0001 (0x0001 - 0x0000)
struct EndBonamikBoxWindActor_IsActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBonamikBoxWindActor_IsActive) == 0x000001, "Wrong alignment on EndBonamikBoxWindActor_IsActive");
static_assert(sizeof(EndBonamikBoxWindActor_IsActive) == 0x000001, "Wrong size on EndBonamikBoxWindActor_IsActive");
static_assert(offsetof(EndBonamikBoxWindActor_IsActive, ReturnValue) == 0x000000, "Member 'EndBonamikBoxWindActor_IsActive::ReturnValue' has a wrong offset!");

// Function EndGame.EndBonamikBoxWindComponent.IsActive
// 0x0001 (0x0001 - 0x0000)
struct EndBonamikBoxWindComponent_IsActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndBonamikBoxWindComponent_IsActive) == 0x000001, "Wrong alignment on EndBonamikBoxWindComponent_IsActive");
static_assert(sizeof(EndBonamikBoxWindComponent_IsActive) == 0x000001, "Wrong size on EndBonamikBoxWindComponent_IsActive");
static_assert(offsetof(EndBonamikBoxWindComponent_IsActive, ReturnValue) == 0x000000, "Member 'EndBonamikBoxWindComponent_IsActive::ReturnValue' has a wrong offset!");

// Function EndGame.EndButtonSlot.SetHorizontalAlignment
// 0x0001 (0x0001 - 0x0000)
struct EndButtonSlot_SetHorizontalAlignment final
{
public:
	EHorizontalAlignment                          InHorizontalAlignment;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndButtonSlot_SetHorizontalAlignment) == 0x000001, "Wrong alignment on EndButtonSlot_SetHorizontalAlignment");
static_assert(sizeof(EndButtonSlot_SetHorizontalAlignment) == 0x000001, "Wrong size on EndButtonSlot_SetHorizontalAlignment");
static_assert(offsetof(EndButtonSlot_SetHorizontalAlignment, InHorizontalAlignment) == 0x000000, "Member 'EndButtonSlot_SetHorizontalAlignment::InHorizontalAlignment' has a wrong offset!");

// Function EndGame.EndButtonSlot.SetPadding
// 0x0010 (0x0010 - 0x0000)
struct EndButtonSlot_SetPadding final
{
public:
	struct FMargin                                InPadding;                                         // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndButtonSlot_SetPadding) == 0x000004, "Wrong alignment on EndButtonSlot_SetPadding");
static_assert(sizeof(EndButtonSlot_SetPadding) == 0x000010, "Wrong size on EndButtonSlot_SetPadding");
static_assert(offsetof(EndButtonSlot_SetPadding, InPadding) == 0x000000, "Member 'EndButtonSlot_SetPadding::InPadding' has a wrong offset!");

// Function EndGame.EndButtonSlot.SetVerticalAlignment
// 0x0001 (0x0001 - 0x0000)
struct EndButtonSlot_SetVerticalAlignment final
{
public:
	EVerticalAlignment                            InVerticalAlignment;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndButtonSlot_SetVerticalAlignment) == 0x000001, "Wrong alignment on EndButtonSlot_SetVerticalAlignment");
static_assert(sizeof(EndButtonSlot_SetVerticalAlignment) == 0x000001, "Wrong size on EndButtonSlot_SetVerticalAlignment");
static_assert(offsetof(EndButtonSlot_SetVerticalAlignment, InVerticalAlignment) == 0x000000, "Member 'EndButtonSlot_SetVerticalAlignment::InVerticalAlignment' has a wrong offset!");

// Function EndGame.EndCanvasPanel.AddChildToCanvas
// 0x0010 (0x0010 - 0x0000)
struct EndCanvasPanel_AddChildToCanvas final
{
public:
	class UWidget*                                Content;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UEndCanvasPanelSlot*                    ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCanvasPanel_AddChildToCanvas) == 0x000008, "Wrong alignment on EndCanvasPanel_AddChildToCanvas");
static_assert(sizeof(EndCanvasPanel_AddChildToCanvas) == 0x000010, "Wrong size on EndCanvasPanel_AddChildToCanvas");
static_assert(offsetof(EndCanvasPanel_AddChildToCanvas, Content) == 0x000000, "Member 'EndCanvasPanel_AddChildToCanvas::Content' has a wrong offset!");
static_assert(offsetof(EndCanvasPanel_AddChildToCanvas, ReturnValue) == 0x000008, "Member 'EndCanvasPanel_AddChildToCanvas::ReturnValue' has a wrong offset!");

// Function EndGame.EndCanvasPanel.SetContentColorAndOpacity
// 0x0010 (0x0010 - 0x0000)
struct EndCanvasPanel_SetContentColorAndOpacity final
{
public:
	struct FLinearColor                           InContentColorAndOpacity;                          // 0x0000(0x0010)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCanvasPanel_SetContentColorAndOpacity) == 0x000004, "Wrong alignment on EndCanvasPanel_SetContentColorAndOpacity");
static_assert(sizeof(EndCanvasPanel_SetContentColorAndOpacity) == 0x000010, "Wrong size on EndCanvasPanel_SetContentColorAndOpacity");
static_assert(offsetof(EndCanvasPanel_SetContentColorAndOpacity, InContentColorAndOpacity) == 0x000000, "Member 'EndCanvasPanel_SetContentColorAndOpacity::InContentColorAndOpacity' has a wrong offset!");

// Function EndGame.EndCanvasPanel.SetExplicitChildZOrder
// 0x0001 (0x0001 - 0x0000)
struct EndCanvasPanel_SetExplicitChildZOrder final
{
public:
	bool                                          bInExplicitChildZOrder;                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCanvasPanel_SetExplicitChildZOrder) == 0x000001, "Wrong alignment on EndCanvasPanel_SetExplicitChildZOrder");
static_assert(sizeof(EndCanvasPanel_SetExplicitChildZOrder) == 0x000001, "Wrong size on EndCanvasPanel_SetExplicitChildZOrder");
static_assert(offsetof(EndCanvasPanel_SetExplicitChildZOrder, bInExplicitChildZOrder) == 0x000000, "Member 'EndCanvasPanel_SetExplicitChildZOrder::bInExplicitChildZOrder' has a wrong offset!");

// Function EndGame.EndCanvasPanel.SetFieldOfView
// 0x0004 (0x0004 - 0x0000)
struct EndCanvasPanel_SetFieldOfView final
{
public:
	float                                         InFieldOfView;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCanvasPanel_SetFieldOfView) == 0x000004, "Wrong alignment on EndCanvasPanel_SetFieldOfView");
static_assert(sizeof(EndCanvasPanel_SetFieldOfView) == 0x000004, "Wrong size on EndCanvasPanel_SetFieldOfView");
static_assert(offsetof(EndCanvasPanel_SetFieldOfView, InFieldOfView) == 0x000000, "Member 'EndCanvasPanel_SetFieldOfView::InFieldOfView' has a wrong offset!");

// Function EndGame.EndCanvasPanel.SetProjectionMode
// 0x0001 (0x0001 - 0x0000)
struct EndCanvasPanel_SetProjectionMode final
{
public:
	ECameraProjectionMode                         InProjectionMode;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCanvasPanel_SetProjectionMode) == 0x000001, "Wrong alignment on EndCanvasPanel_SetProjectionMode");
static_assert(sizeof(EndCanvasPanel_SetProjectionMode) == 0x000001, "Wrong size on EndCanvasPanel_SetProjectionMode");
static_assert(offsetof(EndCanvasPanel_SetProjectionMode, InProjectionMode) == 0x000000, "Member 'EndCanvasPanel_SetProjectionMode::InProjectionMode' has a wrong offset!");

// Function EndGame.EndCategoryVolumeControlActor.GetControllerComponent
// 0x0008 (0x0008 - 0x0000)
struct EndCategoryVolumeControlActor_GetControllerComponent final
{
public:
	class UEndCategoryVolumeControlComponent*     ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCategoryVolumeControlActor_GetControllerComponent) == 0x000008, "Wrong alignment on EndCategoryVolumeControlActor_GetControllerComponent");
static_assert(sizeof(EndCategoryVolumeControlActor_GetControllerComponent) == 0x000008, "Wrong size on EndCategoryVolumeControlActor_GetControllerComponent");
static_assert(offsetof(EndCategoryVolumeControlActor_GetControllerComponent, ReturnValue) == 0x000000, "Member 'EndCategoryVolumeControlActor_GetControllerComponent::ReturnValue' has a wrong offset!");

// Function EndGame.EndCategoryVolumeControlComponent.InitializeCategoryVolume
// 0x0008 (0x0008 - 0x0000)
struct EndCategoryVolumeControlComponent_InitializeCategoryVolume final
{
public:
	class FName                                   TargetName;                                        // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCategoryVolumeControlComponent_InitializeCategoryVolume) == 0x000004, "Wrong alignment on EndCategoryVolumeControlComponent_InitializeCategoryVolume");
static_assert(sizeof(EndCategoryVolumeControlComponent_InitializeCategoryVolume) == 0x000008, "Wrong size on EndCategoryVolumeControlComponent_InitializeCategoryVolume");
static_assert(offsetof(EndCategoryVolumeControlComponent_InitializeCategoryVolume, TargetName) == 0x000000, "Member 'EndCategoryVolumeControlComponent_InitializeCategoryVolume::TargetName' has a wrong offset!");

// Function EndGame.EndChapterSelectMenu.OnChapterListPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndChapterSelectMenu_OnChapterListPressedItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndChapterSelectMenu_OnChapterListPressedItem) == 0x000004, "Wrong alignment on EndChapterSelectMenu_OnChapterListPressedItem");
static_assert(sizeof(EndChapterSelectMenu_OnChapterListPressedItem) == 0x000004, "Wrong size on EndChapterSelectMenu_OnChapterListPressedItem");
static_assert(offsetof(EndChapterSelectMenu_OnChapterListPressedItem, CellIndex) == 0x000000, "Member 'EndChapterSelectMenu_OnChapterListPressedItem::CellIndex' has a wrong offset!");

// Function EndGame.EndChapterSelectMenu.OnChapterListSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndChapterSelectMenu_OnChapterListSelectedIndexChanged final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndChapterSelectMenu_OnChapterListSelectedIndexChanged) == 0x000004, "Wrong alignment on EndChapterSelectMenu_OnChapterListSelectedIndexChanged");
static_assert(sizeof(EndChapterSelectMenu_OnChapterListSelectedIndexChanged) == 0x000004, "Wrong size on EndChapterSelectMenu_OnChapterListSelectedIndexChanged");
static_assert(offsetof(EndChapterSelectMenu_OnChapterListSelectedIndexChanged, CellIndex) == 0x000000, "Member 'EndChapterSelectMenu_OnChapterListSelectedIndexChanged::CellIndex' has a wrong offset!");

// Function EndGame.EndChapterSelectMenu.OnChapterListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndChapterSelectMenu_OnChapterListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndChapterSelectMenu_OnChapterListSetupItem) == 0x000008, "Wrong alignment on EndChapterSelectMenu_OnChapterListSetupItem");
static_assert(sizeof(EndChapterSelectMenu_OnChapterListSetupItem) == 0x000010, "Wrong size on EndChapterSelectMenu_OnChapterListSetupItem");
static_assert(offsetof(EndChapterSelectMenu_OnChapterListSetupItem, ItemWidget) == 0x000000, "Member 'EndChapterSelectMenu_OnChapterListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndChapterSelectMenu_OnChapterListSetupItem, CellIndex) == 0x000008, "Member 'EndChapterSelectMenu_OnChapterListSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndChapterSelectMenu.SetCellImage
// 0x0010 (0x0010 - 0x0000)
struct EndChapterSelectMenu_SetCellImage final
{
public:
	class UEndImage*                              Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPaperSprite*                           Sprite;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndChapterSelectMenu_SetCellImage) == 0x000008, "Wrong alignment on EndChapterSelectMenu_SetCellImage");
static_assert(sizeof(EndChapterSelectMenu_SetCellImage) == 0x000010, "Wrong size on EndChapterSelectMenu_SetCellImage");
static_assert(offsetof(EndChapterSelectMenu_SetCellImage, Widget) == 0x000000, "Member 'EndChapterSelectMenu_SetCellImage::Widget' has a wrong offset!");
static_assert(offsetof(EndChapterSelectMenu_SetCellImage, Sprite) == 0x000008, "Member 'EndChapterSelectMenu_SetCellImage::Sprite' has a wrong offset!");

// Function EndGame.EndChocoboFastTravelMenu.OnPointsListIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndChocoboFastTravelMenu_OnPointsListIndexChanged final
{
public:
	int32                                         ItemIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndChocoboFastTravelMenu_OnPointsListIndexChanged) == 0x000004, "Wrong alignment on EndChocoboFastTravelMenu_OnPointsListIndexChanged");
static_assert(sizeof(EndChocoboFastTravelMenu_OnPointsListIndexChanged) == 0x000004, "Wrong size on EndChocoboFastTravelMenu_OnPointsListIndexChanged");
static_assert(offsetof(EndChocoboFastTravelMenu_OnPointsListIndexChanged, ItemIndex) == 0x000000, "Member 'EndChocoboFastTravelMenu_OnPointsListIndexChanged::ItemIndex' has a wrong offset!");

// Function EndGame.EndChocoboFastTravelMenu.OnPointsListPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndChocoboFastTravelMenu_OnPointsListPressedItem final
{
public:
	int32                                         ItemIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndChocoboFastTravelMenu_OnPointsListPressedItem) == 0x000004, "Wrong alignment on EndChocoboFastTravelMenu_OnPointsListPressedItem");
static_assert(sizeof(EndChocoboFastTravelMenu_OnPointsListPressedItem) == 0x000004, "Wrong size on EndChocoboFastTravelMenu_OnPointsListPressedItem");
static_assert(offsetof(EndChocoboFastTravelMenu_OnPointsListPressedItem, ItemIndex) == 0x000000, "Member 'EndChocoboFastTravelMenu_OnPointsListPressedItem::ItemIndex' has a wrong offset!");

// Function EndGame.EndChocoboFastTravelMenu.OnPointsListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndChocoboFastTravelMenu_OnPointsListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndChocoboFastTravelMenu_OnPointsListSetupItem) == 0x000008, "Wrong alignment on EndChocoboFastTravelMenu_OnPointsListSetupItem");
static_assert(sizeof(EndChocoboFastTravelMenu_OnPointsListSetupItem) == 0x000010, "Wrong size on EndChocoboFastTravelMenu_OnPointsListSetupItem");
static_assert(offsetof(EndChocoboFastTravelMenu_OnPointsListSetupItem, ItemWidget) == 0x000000, "Member 'EndChocoboFastTravelMenu_OnPointsListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndChocoboFastTravelMenu_OnPointsListSetupItem, ItemIndex) == 0x000008, "Member 'EndChocoboFastTravelMenu_OnPointsListSetupItem::ItemIndex' has a wrong offset!");

// Function EndGame.EndColosseumBattleSelectWindow.OnBattleListPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndColosseumBattleSelectWindow_OnBattleListPressedItem final
{
public:
	int32                                         ItemIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndColosseumBattleSelectWindow_OnBattleListPressedItem) == 0x000004, "Wrong alignment on EndColosseumBattleSelectWindow_OnBattleListPressedItem");
static_assert(sizeof(EndColosseumBattleSelectWindow_OnBattleListPressedItem) == 0x000004, "Wrong size on EndColosseumBattleSelectWindow_OnBattleListPressedItem");
static_assert(offsetof(EndColosseumBattleSelectWindow_OnBattleListPressedItem, ItemIndex) == 0x000000, "Member 'EndColosseumBattleSelectWindow_OnBattleListPressedItem::ItemIndex' has a wrong offset!");

// Function EndGame.EndColosseumBattleSelectWindow.OnBattleListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndColosseumBattleSelectWindow_OnBattleListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndColosseumBattleSelectWindow_OnBattleListSetupItem) == 0x000008, "Wrong alignment on EndColosseumBattleSelectWindow_OnBattleListSetupItem");
static_assert(sizeof(EndColosseumBattleSelectWindow_OnBattleListSetupItem) == 0x000010, "Wrong size on EndColosseumBattleSelectWindow_OnBattleListSetupItem");
static_assert(offsetof(EndColosseumBattleSelectWindow_OnBattleListSetupItem, ItemWidget) == 0x000000, "Member 'EndColosseumBattleSelectWindow_OnBattleListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndColosseumBattleSelectWindow_OnBattleListSetupItem, ItemIndex) == 0x000008, "Member 'EndColosseumBattleSelectWindow_OnBattleListSetupItem::ItemIndex' has a wrong offset!");

// Function EndGame.EndColosseumMenu.OnBattleInfoWindowMeasureItem
// 0x000C (0x000C - 0x0000)
struct EndColosseumMenu_OnBattleInfoWindowMeasureItem final
{
public:
	int32                                         ItemIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndColosseumMenu_OnBattleInfoWindowMeasureItem) == 0x000004, "Wrong alignment on EndColosseumMenu_OnBattleInfoWindowMeasureItem");
static_assert(sizeof(EndColosseumMenu_OnBattleInfoWindowMeasureItem) == 0x00000C, "Wrong size on EndColosseumMenu_OnBattleInfoWindowMeasureItem");
static_assert(offsetof(EndColosseumMenu_OnBattleInfoWindowMeasureItem, ItemIndex) == 0x000000, "Member 'EndColosseumMenu_OnBattleInfoWindowMeasureItem::ItemIndex' has a wrong offset!");
static_assert(offsetof(EndColosseumMenu_OnBattleInfoWindowMeasureItem, ReturnValue) == 0x000004, "Member 'EndColosseumMenu_OnBattleInfoWindowMeasureItem::ReturnValue' has a wrong offset!");

// Function EndGame.EndColosseumMenu.OnBattleInfoWindowSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndColosseumMenu_OnBattleInfoWindowSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndColosseumMenu_OnBattleInfoWindowSetupItem) == 0x000008, "Wrong alignment on EndColosseumMenu_OnBattleInfoWindowSetupItem");
static_assert(sizeof(EndColosseumMenu_OnBattleInfoWindowSetupItem) == 0x000010, "Wrong size on EndColosseumMenu_OnBattleInfoWindowSetupItem");
static_assert(offsetof(EndColosseumMenu_OnBattleInfoWindowSetupItem, ItemWidget) == 0x000000, "Member 'EndColosseumMenu_OnBattleInfoWindowSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndColosseumMenu_OnBattleInfoWindowSetupItem, CellIndex) == 0x000008, "Member 'EndColosseumMenu_OnBattleInfoWindowSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndColosseumMenu.OnCharaSelectMenuPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndColosseumMenu_OnCharaSelectMenuPressedItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndColosseumMenu_OnCharaSelectMenuPressedItem) == 0x000004, "Wrong alignment on EndColosseumMenu_OnCharaSelectMenuPressedItem");
static_assert(sizeof(EndColosseumMenu_OnCharaSelectMenuPressedItem) == 0x000004, "Wrong size on EndColosseumMenu_OnCharaSelectMenuPressedItem");
static_assert(offsetof(EndColosseumMenu_OnCharaSelectMenuPressedItem, CellIndex) == 0x000000, "Member 'EndColosseumMenu_OnCharaSelectMenuPressedItem::CellIndex' has a wrong offset!");

// Function EndGame.EndColosseumMenu.OnCharaSelectMenuSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndColosseumMenu_OnCharaSelectMenuSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndColosseumMenu_OnCharaSelectMenuSetupItem) == 0x000008, "Wrong alignment on EndColosseumMenu_OnCharaSelectMenuSetupItem");
static_assert(sizeof(EndColosseumMenu_OnCharaSelectMenuSetupItem) == 0x000010, "Wrong size on EndColosseumMenu_OnCharaSelectMenuSetupItem");
static_assert(offsetof(EndColosseumMenu_OnCharaSelectMenuSetupItem, ItemWidget) == 0x000000, "Member 'EndColosseumMenu_OnCharaSelectMenuSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndColosseumMenu_OnCharaSelectMenuSetupItem, CellIndex) == 0x000008, "Member 'EndColosseumMenu_OnCharaSelectMenuSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndColosseumMenu.OnCourseMenuPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndColosseumMenu_OnCourseMenuPressedItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndColosseumMenu_OnCourseMenuPressedItem) == 0x000004, "Wrong alignment on EndColosseumMenu_OnCourseMenuPressedItem");
static_assert(sizeof(EndColosseumMenu_OnCourseMenuPressedItem) == 0x000004, "Wrong size on EndColosseumMenu_OnCourseMenuPressedItem");
static_assert(offsetof(EndColosseumMenu_OnCourseMenuPressedItem, CellIndex) == 0x000000, "Member 'EndColosseumMenu_OnCourseMenuPressedItem::CellIndex' has a wrong offset!");

// Function EndGame.EndColosseumMenu.OnCourseMenuSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndColosseumMenu_OnCourseMenuSelectedIndexChanged final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndColosseumMenu_OnCourseMenuSelectedIndexChanged) == 0x000004, "Wrong alignment on EndColosseumMenu_OnCourseMenuSelectedIndexChanged");
static_assert(sizeof(EndColosseumMenu_OnCourseMenuSelectedIndexChanged) == 0x000004, "Wrong size on EndColosseumMenu_OnCourseMenuSelectedIndexChanged");
static_assert(offsetof(EndColosseumMenu_OnCourseMenuSelectedIndexChanged, CellIndex) == 0x000000, "Member 'EndColosseumMenu_OnCourseMenuSelectedIndexChanged::CellIndex' has a wrong offset!");

// Function EndGame.EndColosseumMenu.OnCourseMenuSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndColosseumMenu_OnCourseMenuSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndColosseumMenu_OnCourseMenuSetupItem) == 0x000008, "Wrong alignment on EndColosseumMenu_OnCourseMenuSetupItem");
static_assert(sizeof(EndColosseumMenu_OnCourseMenuSetupItem) == 0x000010, "Wrong size on EndColosseumMenu_OnCourseMenuSetupItem");
static_assert(offsetof(EndColosseumMenu_OnCourseMenuSetupItem, ItemWidget) == 0x000000, "Member 'EndColosseumMenu_OnCourseMenuSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndColosseumMenu_OnCourseMenuSetupItem, CellIndex) == 0x000008, "Member 'EndColosseumMenu_OnCourseMenuSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndColosseumMenu.OnDifficultySelectMenuPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndColosseumMenu_OnDifficultySelectMenuPressedItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndColosseumMenu_OnDifficultySelectMenuPressedItem) == 0x000004, "Wrong alignment on EndColosseumMenu_OnDifficultySelectMenuPressedItem");
static_assert(sizeof(EndColosseumMenu_OnDifficultySelectMenuPressedItem) == 0x000004, "Wrong size on EndColosseumMenu_OnDifficultySelectMenuPressedItem");
static_assert(offsetof(EndColosseumMenu_OnDifficultySelectMenuPressedItem, CellIndex) == 0x000000, "Member 'EndColosseumMenu_OnDifficultySelectMenuPressedItem::CellIndex' has a wrong offset!");

// Function EndGame.EndColosseumMenu.OnDifficultySelectMenuSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndColosseumMenu_OnDifficultySelectMenuSelectedIndexChanged final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndColosseumMenu_OnDifficultySelectMenuSelectedIndexChanged) == 0x000004, "Wrong alignment on EndColosseumMenu_OnDifficultySelectMenuSelectedIndexChanged");
static_assert(sizeof(EndColosseumMenu_OnDifficultySelectMenuSelectedIndexChanged) == 0x000004, "Wrong size on EndColosseumMenu_OnDifficultySelectMenuSelectedIndexChanged");
static_assert(offsetof(EndColosseumMenu_OnDifficultySelectMenuSelectedIndexChanged, CellIndex) == 0x000000, "Member 'EndColosseumMenu_OnDifficultySelectMenuSelectedIndexChanged::CellIndex' has a wrong offset!");

// Function EndGame.EndColosseumMenu.OnDifficultySelectMenuSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndColosseumMenu_OnDifficultySelectMenuSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndColosseumMenu_OnDifficultySelectMenuSetupItem) == 0x000008, "Wrong alignment on EndColosseumMenu_OnDifficultySelectMenuSetupItem");
static_assert(sizeof(EndColosseumMenu_OnDifficultySelectMenuSetupItem) == 0x000010, "Wrong size on EndColosseumMenu_OnDifficultySelectMenuSetupItem");
static_assert(offsetof(EndColosseumMenu_OnDifficultySelectMenuSetupItem, ItemWidget) == 0x000000, "Member 'EndColosseumMenu_OnDifficultySelectMenuSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndColosseumMenu_OnDifficultySelectMenuSetupItem, CellIndex) == 0x000008, "Member 'EndColosseumMenu_OnDifficultySelectMenuSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndColosseumModeSelectWindow.OnModeListPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndColosseumModeSelectWindow_OnModeListPressedItem final
{
public:
	int32                                         ItemIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndColosseumModeSelectWindow_OnModeListPressedItem) == 0x000004, "Wrong alignment on EndColosseumModeSelectWindow_OnModeListPressedItem");
static_assert(sizeof(EndColosseumModeSelectWindow_OnModeListPressedItem) == 0x000004, "Wrong size on EndColosseumModeSelectWindow_OnModeListPressedItem");
static_assert(offsetof(EndColosseumModeSelectWindow_OnModeListPressedItem, ItemIndex) == 0x000000, "Member 'EndColosseumModeSelectWindow_OnModeListPressedItem::ItemIndex' has a wrong offset!");

// Function EndGame.EndColosseumModeSelectWindow.OnModeListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndColosseumModeSelectWindow_OnModeListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndColosseumModeSelectWindow_OnModeListSetupItem) == 0x000008, "Wrong alignment on EndColosseumModeSelectWindow_OnModeListSetupItem");
static_assert(sizeof(EndColosseumModeSelectWindow_OnModeListSetupItem) == 0x000010, "Wrong size on EndColosseumModeSelectWindow_OnModeListSetupItem");
static_assert(offsetof(EndColosseumModeSelectWindow_OnModeListSetupItem, ItemWidget) == 0x000000, "Member 'EndColosseumModeSelectWindow_OnModeListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndColosseumModeSelectWindow_OnModeListSetupItem, ItemIndex) == 0x000008, "Member 'EndColosseumModeSelectWindow_OnModeListSetupItem::ItemIndex' has a wrong offset!");

// Function EndGame.EndColosseumSupplyHandicapWindow.OnCommandListPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndColosseumSupplyHandicapWindow_OnCommandListPressedItem final
{
public:
	int32                                         ItemIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndColosseumSupplyHandicapWindow_OnCommandListPressedItem) == 0x000004, "Wrong alignment on EndColosseumSupplyHandicapWindow_OnCommandListPressedItem");
static_assert(sizeof(EndColosseumSupplyHandicapWindow_OnCommandListPressedItem) == 0x000004, "Wrong size on EndColosseumSupplyHandicapWindow_OnCommandListPressedItem");
static_assert(offsetof(EndColosseumSupplyHandicapWindow_OnCommandListPressedItem, ItemIndex) == 0x000000, "Member 'EndColosseumSupplyHandicapWindow_OnCommandListPressedItem::ItemIndex' has a wrong offset!");

// Function EndGame.EndColosseumSupplyHandicapWindow.OnCommandListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndColosseumSupplyHandicapWindow_OnCommandListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndColosseumSupplyHandicapWindow_OnCommandListSetupItem) == 0x000008, "Wrong alignment on EndColosseumSupplyHandicapWindow_OnCommandListSetupItem");
static_assert(sizeof(EndColosseumSupplyHandicapWindow_OnCommandListSetupItem) == 0x000010, "Wrong size on EndColosseumSupplyHandicapWindow_OnCommandListSetupItem");
static_assert(offsetof(EndColosseumSupplyHandicapWindow_OnCommandListSetupItem, ItemWidget) == 0x000000, "Member 'EndColosseumSupplyHandicapWindow_OnCommandListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndColosseumSupplyHandicapWindow_OnCommandListSetupItem, ItemIndex) == 0x000008, "Member 'EndColosseumSupplyHandicapWindow_OnCommandListSetupItem::ItemIndex' has a wrong offset!");

// Function EndGame.EndCommonAPI.RandomFloatInRange
// 0x000C (0x000C - 0x0000)
struct EndCommonAPI_RandomFloatInRange final
{
public:
	float                                         Min;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Max;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCommonAPI_RandomFloatInRange) == 0x000004, "Wrong alignment on EndCommonAPI_RandomFloatInRange");
static_assert(sizeof(EndCommonAPI_RandomFloatInRange) == 0x00000C, "Wrong size on EndCommonAPI_RandomFloatInRange");
static_assert(offsetof(EndCommonAPI_RandomFloatInRange, Min) == 0x000000, "Member 'EndCommonAPI_RandomFloatInRange::Min' has a wrong offset!");
static_assert(offsetof(EndCommonAPI_RandomFloatInRange, Max) == 0x000004, "Member 'EndCommonAPI_RandomFloatInRange::Max' has a wrong offset!");
static_assert(offsetof(EndCommonAPI_RandomFloatInRange, ReturnValue) == 0x000008, "Member 'EndCommonAPI_RandomFloatInRange::ReturnValue' has a wrong offset!");

// Function EndGame.EndCommonAPI.RandomIntegerInRange
// 0x000C (0x000C - 0x0000)
struct EndCommonAPI_RandomIntegerInRange final
{
public:
	int32                                         Min;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Max;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCommonAPI_RandomIntegerInRange) == 0x000004, "Wrong alignment on EndCommonAPI_RandomIntegerInRange");
static_assert(sizeof(EndCommonAPI_RandomIntegerInRange) == 0x00000C, "Wrong size on EndCommonAPI_RandomIntegerInRange");
static_assert(offsetof(EndCommonAPI_RandomIntegerInRange, Min) == 0x000000, "Member 'EndCommonAPI_RandomIntegerInRange::Min' has a wrong offset!");
static_assert(offsetof(EndCommonAPI_RandomIntegerInRange, Max) == 0x000004, "Member 'EndCommonAPI_RandomIntegerInRange::Max' has a wrong offset!");
static_assert(offsetof(EndCommonAPI_RandomIntegerInRange, ReturnValue) == 0x000008, "Member 'EndCommonAPI_RandomIntegerInRange::ReturnValue' has a wrong offset!");

// Function EndGame.EndCondorFortMiniGameBoardSelectWindow.OnMeasureItem_Guage
// 0x000C (0x000C - 0x0000)
struct EndCondorFortMiniGameBoardSelectWindow_OnMeasureItem_Guage final
{
public:
	int32                                         ItemIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCondorFortMiniGameBoardSelectWindow_OnMeasureItem_Guage) == 0x000004, "Wrong alignment on EndCondorFortMiniGameBoardSelectWindow_OnMeasureItem_Guage");
static_assert(sizeof(EndCondorFortMiniGameBoardSelectWindow_OnMeasureItem_Guage) == 0x00000C, "Wrong size on EndCondorFortMiniGameBoardSelectWindow_OnMeasureItem_Guage");
static_assert(offsetof(EndCondorFortMiniGameBoardSelectWindow_OnMeasureItem_Guage, ItemIndex) == 0x000000, "Member 'EndCondorFortMiniGameBoardSelectWindow_OnMeasureItem_Guage::ItemIndex' has a wrong offset!");
static_assert(offsetof(EndCondorFortMiniGameBoardSelectWindow_OnMeasureItem_Guage, ReturnValue) == 0x000004, "Member 'EndCondorFortMiniGameBoardSelectWindow_OnMeasureItem_Guage::ReturnValue' has a wrong offset!");

// Function EndGame.EndCondorFortMiniGameBoardSelectWindow.OnPressedItem_BoardList
// 0x0004 (0x0004 - 0x0000)
struct EndCondorFortMiniGameBoardSelectWindow_OnPressedItem_BoardList final
{
public:
	int32                                         ItemIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCondorFortMiniGameBoardSelectWindow_OnPressedItem_BoardList) == 0x000004, "Wrong alignment on EndCondorFortMiniGameBoardSelectWindow_OnPressedItem_BoardList");
static_assert(sizeof(EndCondorFortMiniGameBoardSelectWindow_OnPressedItem_BoardList) == 0x000004, "Wrong size on EndCondorFortMiniGameBoardSelectWindow_OnPressedItem_BoardList");
static_assert(offsetof(EndCondorFortMiniGameBoardSelectWindow_OnPressedItem_BoardList, ItemIndex) == 0x000000, "Member 'EndCondorFortMiniGameBoardSelectWindow_OnPressedItem_BoardList::ItemIndex' has a wrong offset!");

// Function EndGame.EndCondorFortMiniGameBoardSelectWindow.OnSetupItem_BoardList
// 0x0010 (0x0010 - 0x0000)
struct EndCondorFortMiniGameBoardSelectWindow_OnSetupItem_BoardList final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndCondorFortMiniGameBoardSelectWindow_OnSetupItem_BoardList) == 0x000008, "Wrong alignment on EndCondorFortMiniGameBoardSelectWindow_OnSetupItem_BoardList");
static_assert(sizeof(EndCondorFortMiniGameBoardSelectWindow_OnSetupItem_BoardList) == 0x000010, "Wrong size on EndCondorFortMiniGameBoardSelectWindow_OnSetupItem_BoardList");
static_assert(offsetof(EndCondorFortMiniGameBoardSelectWindow_OnSetupItem_BoardList, ItemWidget) == 0x000000, "Member 'EndCondorFortMiniGameBoardSelectWindow_OnSetupItem_BoardList::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndCondorFortMiniGameBoardSelectWindow_OnSetupItem_BoardList, ItemIndex) == 0x000008, "Member 'EndCondorFortMiniGameBoardSelectWindow_OnSetupItem_BoardList::ItemIndex' has a wrong offset!");

// Function EndGame.EndCondorFortMinigameEditMenu.OnClicked_Board
// 0x0008 (0x0008 - 0x0000)
struct EndCondorFortMinigameEditMenu_OnClicked_Board final
{
public:
	class FName                                   BoardID;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCondorFortMinigameEditMenu_OnClicked_Board) == 0x000004, "Wrong alignment on EndCondorFortMinigameEditMenu_OnClicked_Board");
static_assert(sizeof(EndCondorFortMinigameEditMenu_OnClicked_Board) == 0x000008, "Wrong size on EndCondorFortMinigameEditMenu_OnClicked_Board");
static_assert(offsetof(EndCondorFortMinigameEditMenu_OnClicked_Board, BoardID) == 0x000000, "Member 'EndCondorFortMinigameEditMenu_OnClicked_Board::BoardID' has a wrong offset!");

// Function EndGame.EndCondorFortMinigameEditMenu.OnClicked_UnitSelect
// 0x0008 (0x0008 - 0x0000)
struct EndCondorFortMinigameEditMenu_OnClicked_UnitSelect final
{
public:
	class UEndCondorFortMiniGameUnitItem*         UnitItem;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCondorFortMinigameEditMenu_OnClicked_UnitSelect) == 0x000008, "Wrong alignment on EndCondorFortMinigameEditMenu_OnClicked_UnitSelect");
static_assert(sizeof(EndCondorFortMinigameEditMenu_OnClicked_UnitSelect) == 0x000008, "Wrong size on EndCondorFortMinigameEditMenu_OnClicked_UnitSelect");
static_assert(offsetof(EndCondorFortMinigameEditMenu_OnClicked_UnitSelect, UnitItem) == 0x000000, "Member 'EndCondorFortMinigameEditMenu_OnClicked_UnitSelect::UnitItem' has a wrong offset!");

// Function EndGame.EndCondorFortMinigameEditMenu.OnClicked_UnitSwap
// 0x0008 (0x0008 - 0x0000)
struct EndCondorFortMinigameEditMenu_OnClicked_UnitSwap final
{
public:
	class UEndCondorFortMiniGameUnitItem*         UnitItem;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCondorFortMinigameEditMenu_OnClicked_UnitSwap) == 0x000008, "Wrong alignment on EndCondorFortMinigameEditMenu_OnClicked_UnitSwap");
static_assert(sizeof(EndCondorFortMinigameEditMenu_OnClicked_UnitSwap) == 0x000008, "Wrong size on EndCondorFortMinigameEditMenu_OnClicked_UnitSwap");
static_assert(offsetof(EndCondorFortMinigameEditMenu_OnClicked_UnitSwap, UnitItem) == 0x000000, "Member 'EndCondorFortMinigameEditMenu_OnClicked_UnitSwap::UnitItem' has a wrong offset!");

// Function EndGame.EndCondorFortMinigameEditMenu.OnSetup_UnitListCell
// 0x0010 (0x0010 - 0x0000)
struct EndCondorFortMinigameEditMenu_OnSetup_UnitListCell final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndCondorFortMinigameEditMenu_OnSetup_UnitListCell) == 0x000008, "Wrong alignment on EndCondorFortMinigameEditMenu_OnSetup_UnitListCell");
static_assert(sizeof(EndCondorFortMinigameEditMenu_OnSetup_UnitListCell) == 0x000010, "Wrong size on EndCondorFortMinigameEditMenu_OnSetup_UnitListCell");
static_assert(offsetof(EndCondorFortMinigameEditMenu_OnSetup_UnitListCell, ItemWidget) == 0x000000, "Member 'EndCondorFortMinigameEditMenu_OnSetup_UnitListCell::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndCondorFortMinigameEditMenu_OnSetup_UnitListCell, ItemIndex) == 0x000008, "Member 'EndCondorFortMinigameEditMenu_OnSetup_UnitListCell::ItemIndex' has a wrong offset!");

// Function EndGame.EndCondorFortMiniGameInfoWindow.OnMeasureItem_Guage
// 0x000C (0x000C - 0x0000)
struct EndCondorFortMiniGameInfoWindow_OnMeasureItem_Guage final
{
public:
	int32                                         ItemIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCondorFortMiniGameInfoWindow_OnMeasureItem_Guage) == 0x000004, "Wrong alignment on EndCondorFortMiniGameInfoWindow_OnMeasureItem_Guage");
static_assert(sizeof(EndCondorFortMiniGameInfoWindow_OnMeasureItem_Guage) == 0x00000C, "Wrong size on EndCondorFortMiniGameInfoWindow_OnMeasureItem_Guage");
static_assert(offsetof(EndCondorFortMiniGameInfoWindow_OnMeasureItem_Guage, ItemIndex) == 0x000000, "Member 'EndCondorFortMiniGameInfoWindow_OnMeasureItem_Guage::ItemIndex' has a wrong offset!");
static_assert(offsetof(EndCondorFortMiniGameInfoWindow_OnMeasureItem_Guage, ReturnValue) == 0x000004, "Member 'EndCondorFortMiniGameInfoWindow_OnMeasureItem_Guage::ReturnValue' has a wrong offset!");

// Function EndGame.EndCondorFortMiniGamePrepareWindow.OnClicked_Board
// 0x0008 (0x0008 - 0x0000)
struct EndCondorFortMiniGamePrepareWindow_OnClicked_Board final
{
public:
	class FName                                   BoardID;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCondorFortMiniGamePrepareWindow_OnClicked_Board) == 0x000004, "Wrong alignment on EndCondorFortMiniGamePrepareWindow_OnClicked_Board");
static_assert(sizeof(EndCondorFortMiniGamePrepareWindow_OnClicked_Board) == 0x000008, "Wrong size on EndCondorFortMiniGamePrepareWindow_OnClicked_Board");
static_assert(offsetof(EndCondorFortMiniGamePrepareWindow_OnClicked_Board, BoardID) == 0x000000, "Member 'EndCondorFortMiniGamePrepareWindow_OnClicked_Board::BoardID' has a wrong offset!");

// Function EndGame.EndDataBaseAPI.CheckExistSaveData
// 0x0004 (0x0004 - 0x0000)
struct EndDataBaseAPI_CheckExistSaveData final
{
public:
	int32                                         Slot;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndDataBaseAPI_CheckExistSaveData) == 0x000004, "Wrong alignment on EndDataBaseAPI_CheckExistSaveData");
static_assert(sizeof(EndDataBaseAPI_CheckExistSaveData) == 0x000004, "Wrong size on EndDataBaseAPI_CheckExistSaveData");
static_assert(offsetof(EndDataBaseAPI_CheckExistSaveData, Slot) == 0x000000, "Member 'EndDataBaseAPI_CheckExistSaveData::Slot' has a wrong offset!");

// Function EndGame.EndDataBaseAPI.DebugButtonList
// 0x0058 (0x0058 - 0x0000)
struct EndDataBaseAPI_DebugButtonList final
{
public:
	int32                                         Type;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, int32>                    ReturnValue;                                       // 0x0008(0x0050)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndDataBaseAPI_DebugButtonList) == 0x000008, "Wrong alignment on EndDataBaseAPI_DebugButtonList");
static_assert(sizeof(EndDataBaseAPI_DebugButtonList) == 0x000058, "Wrong size on EndDataBaseAPI_DebugButtonList");
static_assert(offsetof(EndDataBaseAPI_DebugButtonList, Type) == 0x000000, "Member 'EndDataBaseAPI_DebugButtonList::Type' has a wrong offset!");
static_assert(offsetof(EndDataBaseAPI_DebugButtonList, ReturnValue) == 0x000008, "Member 'EndDataBaseAPI_DebugButtonList::ReturnValue' has a wrong offset!");

// Function EndGame.EndDataBaseAPI.DebugButtonList2
// 0x0018 (0x0018 - 0x0000)
struct EndDataBaseAPI_DebugButtonList2 final
{
public:
	int32                                         Type;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndDataBaseAPI_DebugButtonList2) == 0x000008, "Wrong alignment on EndDataBaseAPI_DebugButtonList2");
static_assert(sizeof(EndDataBaseAPI_DebugButtonList2) == 0x000018, "Wrong size on EndDataBaseAPI_DebugButtonList2");
static_assert(offsetof(EndDataBaseAPI_DebugButtonList2, Type) == 0x000000, "Member 'EndDataBaseAPI_DebugButtonList2::Type' has a wrong offset!");
static_assert(offsetof(EndDataBaseAPI_DebugButtonList2, ReturnValue) == 0x000008, "Member 'EndDataBaseAPI_DebugButtonList2::ReturnValue' has a wrong offset!");

// Function EndGame.EndDataBaseAPI.DebugSetGameScenarioType
// 0x0001 (0x0001 - 0x0000)
struct EndDataBaseAPI_DebugSetGameScenarioType final
{
public:
	EEndGameScenarioType                          Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndDataBaseAPI_DebugSetGameScenarioType) == 0x000001, "Wrong alignment on EndDataBaseAPI_DebugSetGameScenarioType");
static_assert(sizeof(EndDataBaseAPI_DebugSetGameScenarioType) == 0x000001, "Wrong size on EndDataBaseAPI_DebugSetGameScenarioType");
static_assert(offsetof(EndDataBaseAPI_DebugSetGameScenarioType, Type) == 0x000000, "Member 'EndDataBaseAPI_DebugSetGameScenarioType::Type' has a wrong offset!");

// Function EndGame.EndDataBaseAPI.EnemyBook_IncrementKillCount_BP
// 0x0008 (0x0008 - 0x0000)
struct EndDataBaseAPI_EnemyBook_IncrementKillCount_BP final
{
public:
	class FName                                   enemyBookTableId;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndDataBaseAPI_EnemyBook_IncrementKillCount_BP) == 0x000004, "Wrong alignment on EndDataBaseAPI_EnemyBook_IncrementKillCount_BP");
static_assert(sizeof(EndDataBaseAPI_EnemyBook_IncrementKillCount_BP) == 0x000008, "Wrong size on EndDataBaseAPI_EnemyBook_IncrementKillCount_BP");
static_assert(offsetof(EndDataBaseAPI_EnemyBook_IncrementKillCount_BP, enemyBookTableId) == 0x000000, "Member 'EndDataBaseAPI_EnemyBook_IncrementKillCount_BP::enemyBookTableId' has a wrong offset!");

// Function EndGame.EndDataBaseAPI.GetCurrentDataSlot
// 0x0004 (0x0004 - 0x0000)
struct EndDataBaseAPI_GetCurrentDataSlot final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndDataBaseAPI_GetCurrentDataSlot) == 0x000004, "Wrong alignment on EndDataBaseAPI_GetCurrentDataSlot");
static_assert(sizeof(EndDataBaseAPI_GetCurrentDataSlot) == 0x000004, "Wrong size on EndDataBaseAPI_GetCurrentDataSlot");
static_assert(offsetof(EndDataBaseAPI_GetCurrentDataSlot, ReturnValue) == 0x000000, "Member 'EndDataBaseAPI_GetCurrentDataSlot::ReturnValue' has a wrong offset!");

// Function EndGame.EndDataBaseAPI.GetCurrentPlayerCharaSpecList
// 0x0018 (0x0018 - 0x0000)
struct EndDataBaseAPI_GetCurrentPlayerCharaSpecList final
{
public:
	EEquipmentType                                equipment;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlayerType                                   Type;                                              // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           outNameList;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndDataBaseAPI_GetCurrentPlayerCharaSpecList) == 0x000008, "Wrong alignment on EndDataBaseAPI_GetCurrentPlayerCharaSpecList");
static_assert(sizeof(EndDataBaseAPI_GetCurrentPlayerCharaSpecList) == 0x000018, "Wrong size on EndDataBaseAPI_GetCurrentPlayerCharaSpecList");
static_assert(offsetof(EndDataBaseAPI_GetCurrentPlayerCharaSpecList, equipment) == 0x000000, "Member 'EndDataBaseAPI_GetCurrentPlayerCharaSpecList::equipment' has a wrong offset!");
static_assert(offsetof(EndDataBaseAPI_GetCurrentPlayerCharaSpecList, Type) == 0x000001, "Member 'EndDataBaseAPI_GetCurrentPlayerCharaSpecList::Type' has a wrong offset!");
static_assert(offsetof(EndDataBaseAPI_GetCurrentPlayerCharaSpecList, outNameList) == 0x000008, "Member 'EndDataBaseAPI_GetCurrentPlayerCharaSpecList::outNameList' has a wrong offset!");

// Function EndGame.EndDataBaseAPI.GetDataSlotFromDataName
// 0x0018 (0x0018 - 0x0000)
struct EndDataBaseAPI_GetDataSlotFromDataName final
{
public:
	class FString                                 Name_0;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndDataBaseAPI_GetDataSlotFromDataName) == 0x000008, "Wrong alignment on EndDataBaseAPI_GetDataSlotFromDataName");
static_assert(sizeof(EndDataBaseAPI_GetDataSlotFromDataName) == 0x000018, "Wrong size on EndDataBaseAPI_GetDataSlotFromDataName");
static_assert(offsetof(EndDataBaseAPI_GetDataSlotFromDataName, Name_0) == 0x000000, "Member 'EndDataBaseAPI_GetDataSlotFromDataName::Name_0' has a wrong offset!");
static_assert(offsetof(EndDataBaseAPI_GetDataSlotFromDataName, ReturnValue) == 0x000010, "Member 'EndDataBaseAPI_GetDataSlotFromDataName::ReturnValue' has a wrong offset!");

// Function EndGame.EndDataBaseAPI.GetDefaultBattleLeaderTypeBP
// 0x0001 (0x0001 - 0x0000)
struct EndDataBaseAPI_GetDefaultBattleLeaderTypeBP final
{
public:
	EPlayerType                                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndDataBaseAPI_GetDefaultBattleLeaderTypeBP) == 0x000001, "Wrong alignment on EndDataBaseAPI_GetDefaultBattleLeaderTypeBP");
static_assert(sizeof(EndDataBaseAPI_GetDefaultBattleLeaderTypeBP) == 0x000001, "Wrong size on EndDataBaseAPI_GetDefaultBattleLeaderTypeBP");
static_assert(offsetof(EndDataBaseAPI_GetDefaultBattleLeaderTypeBP, ReturnValue) == 0x000000, "Member 'EndDataBaseAPI_GetDefaultBattleLeaderTypeBP::ReturnValue' has a wrong offset!");

// Function EndGame.EndDataBaseAPI.GetDefaultPartyLeaderTypeBP
// 0x0001 (0x0001 - 0x0000)
struct EndDataBaseAPI_GetDefaultPartyLeaderTypeBP final
{
public:
	EPlayerType                                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndDataBaseAPI_GetDefaultPartyLeaderTypeBP) == 0x000001, "Wrong alignment on EndDataBaseAPI_GetDefaultPartyLeaderTypeBP");
static_assert(sizeof(EndDataBaseAPI_GetDefaultPartyLeaderTypeBP) == 0x000001, "Wrong size on EndDataBaseAPI_GetDefaultPartyLeaderTypeBP");
static_assert(offsetof(EndDataBaseAPI_GetDefaultPartyLeaderTypeBP, ReturnValue) == 0x000000, "Member 'EndDataBaseAPI_GetDefaultPartyLeaderTypeBP::ReturnValue' has a wrong offset!");

// Function EndGame.EndDataBaseAPI.GetEmptyDataSlot
// 0x0018 (0x0018 - 0x0000)
struct EndDataBaseAPI_GetEmptyDataSlot final
{
public:
	TArray<class FString>                         saves;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndDataBaseAPI_GetEmptyDataSlot) == 0x000008, "Wrong alignment on EndDataBaseAPI_GetEmptyDataSlot");
static_assert(sizeof(EndDataBaseAPI_GetEmptyDataSlot) == 0x000018, "Wrong size on EndDataBaseAPI_GetEmptyDataSlot");
static_assert(offsetof(EndDataBaseAPI_GetEmptyDataSlot, saves) == 0x000000, "Member 'EndDataBaseAPI_GetEmptyDataSlot::saves' has a wrong offset!");
static_assert(offsetof(EndDataBaseAPI_GetEmptyDataSlot, ReturnValue) == 0x000010, "Member 'EndDataBaseAPI_GetEmptyDataSlot::ReturnValue' has a wrong offset!");

// Function EndGame.EndDataBaseAPI.GetGameScenarioType
// 0x0001 (0x0001 - 0x0000)
struct EndDataBaseAPI_GetGameScenarioType final
{
public:
	EEndGameScenarioType                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndDataBaseAPI_GetGameScenarioType) == 0x000001, "Wrong alignment on EndDataBaseAPI_GetGameScenarioType");
static_assert(sizeof(EndDataBaseAPI_GetGameScenarioType) == 0x000001, "Wrong size on EndDataBaseAPI_GetGameScenarioType");
static_assert(offsetof(EndDataBaseAPI_GetGameScenarioType, ReturnValue) == 0x000000, "Member 'EndDataBaseAPI_GetGameScenarioType::ReturnValue' has a wrong offset!");

// Function EndGame.EndDataBaseAPI.GetIOSaveLoadDataResult
// 0x0001 (0x0001 - 0x0000)
struct EndDataBaseAPI_GetIOSaveLoadDataResult final
{
public:
	EGameDataResult                               ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndDataBaseAPI_GetIOSaveLoadDataResult) == 0x000001, "Wrong alignment on EndDataBaseAPI_GetIOSaveLoadDataResult");
static_assert(sizeof(EndDataBaseAPI_GetIOSaveLoadDataResult) == 0x000001, "Wrong size on EndDataBaseAPI_GetIOSaveLoadDataResult");
static_assert(offsetof(EndDataBaseAPI_GetIOSaveLoadDataResult, ReturnValue) == 0x000000, "Member 'EndDataBaseAPI_GetIOSaveLoadDataResult::ReturnValue' has a wrong offset!");

// Function EndGame.EndDataBaseAPI.GetItemNumBP
// 0x0008 (0x0008 - 0x0000)
struct EndDataBaseAPI_GetItemNumBP final
{
public:
	int32                                         UniqueID;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndDataBaseAPI_GetItemNumBP) == 0x000004, "Wrong alignment on EndDataBaseAPI_GetItemNumBP");
static_assert(sizeof(EndDataBaseAPI_GetItemNumBP) == 0x000008, "Wrong size on EndDataBaseAPI_GetItemNumBP");
static_assert(offsetof(EndDataBaseAPI_GetItemNumBP, UniqueID) == 0x000000, "Member 'EndDataBaseAPI_GetItemNumBP::UniqueID' has a wrong offset!");
static_assert(offsetof(EndDataBaseAPI_GetItemNumBP, ReturnValue) == 0x000004, "Member 'EndDataBaseAPI_GetItemNumBP::ReturnValue' has a wrong offset!");

// Function EndGame.EndDataBaseAPI.GetLastSelectDataSlot
// 0x0004 (0x0004 - 0x0000)
struct EndDataBaseAPI_GetLastSelectDataSlot final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndDataBaseAPI_GetLastSelectDataSlot) == 0x000004, "Wrong alignment on EndDataBaseAPI_GetLastSelectDataSlot");
static_assert(sizeof(EndDataBaseAPI_GetLastSelectDataSlot) == 0x000004, "Wrong size on EndDataBaseAPI_GetLastSelectDataSlot");
static_assert(offsetof(EndDataBaseAPI_GetLastSelectDataSlot, ReturnValue) == 0x000000, "Member 'EndDataBaseAPI_GetLastSelectDataSlot::ReturnValue' has a wrong offset!");

// Function EndGame.EndDataBaseAPI.GetLocationWorkFloat
// 0x000C (0x000C - 0x0000)
struct EndDataBaseAPI_GetLocationWorkFloat final
{
public:
	class FName                                   locationWorkId;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndDataBaseAPI_GetLocationWorkFloat) == 0x000004, "Wrong alignment on EndDataBaseAPI_GetLocationWorkFloat");
static_assert(sizeof(EndDataBaseAPI_GetLocationWorkFloat) == 0x00000C, "Wrong size on EndDataBaseAPI_GetLocationWorkFloat");
static_assert(offsetof(EndDataBaseAPI_GetLocationWorkFloat, locationWorkId) == 0x000000, "Member 'EndDataBaseAPI_GetLocationWorkFloat::locationWorkId' has a wrong offset!");
static_assert(offsetof(EndDataBaseAPI_GetLocationWorkFloat, ReturnValue) == 0x000008, "Member 'EndDataBaseAPI_GetLocationWorkFloat::ReturnValue' has a wrong offset!");

// Function EndGame.EndDataBaseAPI.GetLocationWorkInteger
// 0x000C (0x000C - 0x0000)
struct EndDataBaseAPI_GetLocationWorkInteger final
{
public:
	class FName                                   locationWorkId;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndDataBaseAPI_GetLocationWorkInteger) == 0x000004, "Wrong alignment on EndDataBaseAPI_GetLocationWorkInteger");
static_assert(sizeof(EndDataBaseAPI_GetLocationWorkInteger) == 0x00000C, "Wrong size on EndDataBaseAPI_GetLocationWorkInteger");
static_assert(offsetof(EndDataBaseAPI_GetLocationWorkInteger, locationWorkId) == 0x000000, "Member 'EndDataBaseAPI_GetLocationWorkInteger::locationWorkId' has a wrong offset!");
static_assert(offsetof(EndDataBaseAPI_GetLocationWorkInteger, ReturnValue) == 0x000008, "Member 'EndDataBaseAPI_GetLocationWorkInteger::ReturnValue' has a wrong offset!");

// Function EndGame.EndDataBaseAPI.GetPlayerLevelName
// 0x000C (0x000C - 0x0000)
struct EndDataBaseAPI_GetPlayerLevelName final
{
public:
	EEquipmentType                                equipment;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlayerType                                   Type;                                              // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndDataBaseAPI_GetPlayerLevelName) == 0x000004, "Wrong alignment on EndDataBaseAPI_GetPlayerLevelName");
static_assert(sizeof(EndDataBaseAPI_GetPlayerLevelName) == 0x00000C, "Wrong size on EndDataBaseAPI_GetPlayerLevelName");
static_assert(offsetof(EndDataBaseAPI_GetPlayerLevelName, equipment) == 0x000000, "Member 'EndDataBaseAPI_GetPlayerLevelName::equipment' has a wrong offset!");
static_assert(offsetof(EndDataBaseAPI_GetPlayerLevelName, Type) == 0x000001, "Member 'EndDataBaseAPI_GetPlayerLevelName::Type' has a wrong offset!");
static_assert(offsetof(EndDataBaseAPI_GetPlayerLevelName, ReturnValue) == 0x000004, "Member 'EndDataBaseAPI_GetPlayerLevelName::ReturnValue' has a wrong offset!");

// Function EndGame.EndDataBaseAPI.GetPlayerLevelNames
// 0x0018 (0x0018 - 0x0000)
struct EndDataBaseAPI_GetPlayerLevelNames final
{
public:
	EEquipmentType                                equipment;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlayerType                                   Type;                                              // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndDataBaseAPI_GetPlayerLevelNames) == 0x000008, "Wrong alignment on EndDataBaseAPI_GetPlayerLevelNames");
static_assert(sizeof(EndDataBaseAPI_GetPlayerLevelNames) == 0x000018, "Wrong size on EndDataBaseAPI_GetPlayerLevelNames");
static_assert(offsetof(EndDataBaseAPI_GetPlayerLevelNames, equipment) == 0x000000, "Member 'EndDataBaseAPI_GetPlayerLevelNames::equipment' has a wrong offset!");
static_assert(offsetof(EndDataBaseAPI_GetPlayerLevelNames, Type) == 0x000001, "Member 'EndDataBaseAPI_GetPlayerLevelNames::Type' has a wrong offset!");
static_assert(offsetof(EndDataBaseAPI_GetPlayerLevelNames, ReturnValue) == 0x000008, "Member 'EndDataBaseAPI_GetPlayerLevelNames::ReturnValue' has a wrong offset!");

// Function EndGame.EndDataBaseAPI.GetPlayerPosition
// 0x0010 (0x0010 - 0x0000)
struct EndDataBaseAPI_GetPlayerPosition final
{
public:
	EPlayerType                                   Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x0004(0x000C)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndDataBaseAPI_GetPlayerPosition) == 0x000004, "Wrong alignment on EndDataBaseAPI_GetPlayerPosition");
static_assert(sizeof(EndDataBaseAPI_GetPlayerPosition) == 0x000010, "Wrong size on EndDataBaseAPI_GetPlayerPosition");
static_assert(offsetof(EndDataBaseAPI_GetPlayerPosition, Type) == 0x000000, "Member 'EndDataBaseAPI_GetPlayerPosition::Type' has a wrong offset!");
static_assert(offsetof(EndDataBaseAPI_GetPlayerPosition, ReturnValue) == 0x000004, "Member 'EndDataBaseAPI_GetPlayerPosition::ReturnValue' has a wrong offset!");

// Function EndGame.EndDataBaseAPI.GetPlayerRotation
// 0x0010 (0x0010 - 0x0000)
struct EndDataBaseAPI_GetPlayerRotation final
{
public:
	EPlayerType                                   Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               ReturnValue;                                       // 0x0004(0x000C)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndDataBaseAPI_GetPlayerRotation) == 0x000004, "Wrong alignment on EndDataBaseAPI_GetPlayerRotation");
static_assert(sizeof(EndDataBaseAPI_GetPlayerRotation) == 0x000010, "Wrong size on EndDataBaseAPI_GetPlayerRotation");
static_assert(offsetof(EndDataBaseAPI_GetPlayerRotation, Type) == 0x000000, "Member 'EndDataBaseAPI_GetPlayerRotation::Type' has a wrong offset!");
static_assert(offsetof(EndDataBaseAPI_GetPlayerRotation, ReturnValue) == 0x000004, "Member 'EndDataBaseAPI_GetPlayerRotation::ReturnValue' has a wrong offset!");

// Function EndGame.EndDataBaseAPI.GetPrevCharaSpecList
// 0x0018 (0x0018 - 0x0000)
struct EndDataBaseAPI_GetPrevCharaSpecList final
{
public:
	EEquipmentType                                equipment;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlayerType                                   Type;                                              // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           outNameList;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndDataBaseAPI_GetPrevCharaSpecList) == 0x000008, "Wrong alignment on EndDataBaseAPI_GetPrevCharaSpecList");
static_assert(sizeof(EndDataBaseAPI_GetPrevCharaSpecList) == 0x000018, "Wrong size on EndDataBaseAPI_GetPrevCharaSpecList");
static_assert(offsetof(EndDataBaseAPI_GetPrevCharaSpecList, equipment) == 0x000000, "Member 'EndDataBaseAPI_GetPrevCharaSpecList::equipment' has a wrong offset!");
static_assert(offsetof(EndDataBaseAPI_GetPrevCharaSpecList, Type) == 0x000001, "Member 'EndDataBaseAPI_GetPrevCharaSpecList::Type' has a wrong offset!");
static_assert(offsetof(EndDataBaseAPI_GetPrevCharaSpecList, outNameList) == 0x000008, "Member 'EndDataBaseAPI_GetPrevCharaSpecList::outNameList' has a wrong offset!");

// Function EndGame.EndDataBaseAPI.GetResidentWorkFloat
// 0x000C (0x000C - 0x0000)
struct EndDataBaseAPI_GetResidentWorkFloat final
{
public:
	class FName                                   residentWorkId;                                    // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndDataBaseAPI_GetResidentWorkFloat) == 0x000004, "Wrong alignment on EndDataBaseAPI_GetResidentWorkFloat");
static_assert(sizeof(EndDataBaseAPI_GetResidentWorkFloat) == 0x00000C, "Wrong size on EndDataBaseAPI_GetResidentWorkFloat");
static_assert(offsetof(EndDataBaseAPI_GetResidentWorkFloat, residentWorkId) == 0x000000, "Member 'EndDataBaseAPI_GetResidentWorkFloat::residentWorkId' has a wrong offset!");
static_assert(offsetof(EndDataBaseAPI_GetResidentWorkFloat, ReturnValue) == 0x000008, "Member 'EndDataBaseAPI_GetResidentWorkFloat::ReturnValue' has a wrong offset!");

// Function EndGame.EndDataBaseAPI.GetResidentWorkInteger
// 0x000C (0x000C - 0x0000)
struct EndDataBaseAPI_GetResidentWorkInteger final
{
public:
	class FName                                   residentWorkId;                                    // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndDataBaseAPI_GetResidentWorkInteger) == 0x000004, "Wrong alignment on EndDataBaseAPI_GetResidentWorkInteger");
static_assert(sizeof(EndDataBaseAPI_GetResidentWorkInteger) == 0x00000C, "Wrong size on EndDataBaseAPI_GetResidentWorkInteger");
static_assert(offsetof(EndDataBaseAPI_GetResidentWorkInteger, residentWorkId) == 0x000000, "Member 'EndDataBaseAPI_GetResidentWorkInteger::residentWorkId' has a wrong offset!");
static_assert(offsetof(EndDataBaseAPI_GetResidentWorkInteger, ReturnValue) == 0x000008, "Member 'EndDataBaseAPI_GetResidentWorkInteger::ReturnValue' has a wrong offset!");

// Function EndGame.EndDataBaseAPI.GetSaveDataList
// 0x0010 (0x0010 - 0x0000)
struct EndDataBaseAPI_GetSaveDataList final
{
public:
	TArray<class FString>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndDataBaseAPI_GetSaveDataList) == 0x000008, "Wrong alignment on EndDataBaseAPI_GetSaveDataList");
static_assert(sizeof(EndDataBaseAPI_GetSaveDataList) == 0x000010, "Wrong size on EndDataBaseAPI_GetSaveDataList");
static_assert(offsetof(EndDataBaseAPI_GetSaveDataList, ReturnValue) == 0x000000, "Member 'EndDataBaseAPI_GetSaveDataList::ReturnValue' has a wrong offset!");

// Function EndGame.EndDataBaseAPI.GetSaveLoadResult
// 0x0002 (0x0002 - 0x0000)
struct EndDataBaseAPI_GetSaveLoadResult final
{
public:
	EIOGameDataRequestLayer                       InLayer;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGameDataResult                               ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndDataBaseAPI_GetSaveLoadResult) == 0x000001, "Wrong alignment on EndDataBaseAPI_GetSaveLoadResult");
static_assert(sizeof(EndDataBaseAPI_GetSaveLoadResult) == 0x000002, "Wrong size on EndDataBaseAPI_GetSaveLoadResult");
static_assert(offsetof(EndDataBaseAPI_GetSaveLoadResult, InLayer) == 0x000000, "Member 'EndDataBaseAPI_GetSaveLoadResult::InLayer' has a wrong offset!");
static_assert(offsetof(EndDataBaseAPI_GetSaveLoadResult, ReturnValue) == 0x000001, "Member 'EndDataBaseAPI_GetSaveLoadResult::ReturnValue' has a wrong offset!");

// Function EndGame.EndDataBaseAPI.GetTestPlayModeTableID
// 0x0008 (0x0008 - 0x0000)
struct EndDataBaseAPI_GetTestPlayModeTableID final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndDataBaseAPI_GetTestPlayModeTableID) == 0x000004, "Wrong alignment on EndDataBaseAPI_GetTestPlayModeTableID");
static_assert(sizeof(EndDataBaseAPI_GetTestPlayModeTableID) == 0x000008, "Wrong size on EndDataBaseAPI_GetTestPlayModeTableID");
static_assert(offsetof(EndDataBaseAPI_GetTestPlayModeTableID, ReturnValue) == 0x000000, "Member 'EndDataBaseAPI_GetTestPlayModeTableID::ReturnValue' has a wrong offset!");

// Function EndGame.EndDataBaseAPI.GetUpdatePlayTimeFlag
// 0x0001 (0x0001 - 0x0000)
struct EndDataBaseAPI_GetUpdatePlayTimeFlag final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndDataBaseAPI_GetUpdatePlayTimeFlag) == 0x000001, "Wrong alignment on EndDataBaseAPI_GetUpdatePlayTimeFlag");
static_assert(sizeof(EndDataBaseAPI_GetUpdatePlayTimeFlag) == 0x000001, "Wrong size on EndDataBaseAPI_GetUpdatePlayTimeFlag");
static_assert(offsetof(EndDataBaseAPI_GetUpdatePlayTimeFlag, ReturnValue) == 0x000000, "Member 'EndDataBaseAPI_GetUpdatePlayTimeFlag::ReturnValue' has a wrong offset!");

// Function EndGame.EndDataBaseAPI.HasBackUpData
// 0x0001 (0x0001 - 0x0000)
struct EndDataBaseAPI_HasBackUpData final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndDataBaseAPI_HasBackUpData) == 0x000001, "Wrong alignment on EndDataBaseAPI_HasBackUpData");
static_assert(sizeof(EndDataBaseAPI_HasBackUpData) == 0x000001, "Wrong size on EndDataBaseAPI_HasBackUpData");
static_assert(offsetof(EndDataBaseAPI_HasBackUpData, ReturnValue) == 0x000000, "Member 'EndDataBaseAPI_HasBackUpData::ReturnValue' has a wrong offset!");

// Function EndGame.EndDataBaseAPI.IsClassic
// 0x0001 (0x0001 - 0x0000)
struct EndDataBaseAPI_IsClassic final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndDataBaseAPI_IsClassic) == 0x000001, "Wrong alignment on EndDataBaseAPI_IsClassic");
static_assert(sizeof(EndDataBaseAPI_IsClassic) == 0x000001, "Wrong size on EndDataBaseAPI_IsClassic");
static_assert(offsetof(EndDataBaseAPI_IsClassic, ReturnValue) == 0x000000, "Member 'EndDataBaseAPI_IsClassic::ReturnValue' has a wrong offset!");

// Function EndGame.EndDataBaseAPI.IsDataBaseFlagBP
// 0x0008 (0x0008 - 0x0000)
struct EndDataBaseAPI_IsDataBaseFlagBP final
{
public:
	int32                                         BitFlag;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndDataBaseAPI_IsDataBaseFlagBP) == 0x000004, "Wrong alignment on EndDataBaseAPI_IsDataBaseFlagBP");
static_assert(sizeof(EndDataBaseAPI_IsDataBaseFlagBP) == 0x000008, "Wrong size on EndDataBaseAPI_IsDataBaseFlagBP");
static_assert(offsetof(EndDataBaseAPI_IsDataBaseFlagBP, BitFlag) == 0x000000, "Member 'EndDataBaseAPI_IsDataBaseFlagBP::BitFlag' has a wrong offset!");
static_assert(offsetof(EndDataBaseAPI_IsDataBaseFlagBP, ReturnValue) == 0x000004, "Member 'EndDataBaseAPI_IsDataBaseFlagBP::ReturnValue' has a wrong offset!");

// Function EndGame.EndDataBaseAPI.IsDifficulty
// 0x0002 (0x0002 - 0x0000)
struct EndDataBaseAPI_IsDifficulty final
{
public:
	EDifficultyType                               Difficulty;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndDataBaseAPI_IsDifficulty) == 0x000001, "Wrong alignment on EndDataBaseAPI_IsDifficulty");
static_assert(sizeof(EndDataBaseAPI_IsDifficulty) == 0x000002, "Wrong size on EndDataBaseAPI_IsDifficulty");
static_assert(offsetof(EndDataBaseAPI_IsDifficulty, Difficulty) == 0x000000, "Member 'EndDataBaseAPI_IsDifficulty::Difficulty' has a wrong offset!");
static_assert(offsetof(EndDataBaseAPI_IsDifficulty, ReturnValue) == 0x000001, "Member 'EndDataBaseAPI_IsDifficulty::ReturnValue' has a wrong offset!");

// Function EndGame.EndDataBaseAPI.IsFinishStreamMateriaModel
// 0x0001 (0x0001 - 0x0000)
struct EndDataBaseAPI_IsFinishStreamMateriaModel final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndDataBaseAPI_IsFinishStreamMateriaModel) == 0x000001, "Wrong alignment on EndDataBaseAPI_IsFinishStreamMateriaModel");
static_assert(sizeof(EndDataBaseAPI_IsFinishStreamMateriaModel) == 0x000001, "Wrong size on EndDataBaseAPI_IsFinishStreamMateriaModel");
static_assert(offsetof(EndDataBaseAPI_IsFinishStreamMateriaModel, ReturnValue) == 0x000000, "Member 'EndDataBaseAPI_IsFinishStreamMateriaModel::ReturnValue' has a wrong offset!");

// Function EndGame.EndDataBaseAPI.IsIOSaveLoadData
// 0x0001 (0x0001 - 0x0000)
struct EndDataBaseAPI_IsIOSaveLoadData final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndDataBaseAPI_IsIOSaveLoadData) == 0x000001, "Wrong alignment on EndDataBaseAPI_IsIOSaveLoadData");
static_assert(sizeof(EndDataBaseAPI_IsIOSaveLoadData) == 0x000001, "Wrong size on EndDataBaseAPI_IsIOSaveLoadData");
static_assert(offsetof(EndDataBaseAPI_IsIOSaveLoadData, ReturnValue) == 0x000000, "Member 'EndDataBaseAPI_IsIOSaveLoadData::ReturnValue' has a wrong offset!");

// Function EndGame.EndDataBaseAPI.IsMakeCommonSaveData
// 0x0001 (0x0001 - 0x0000)
struct EndDataBaseAPI_IsMakeCommonSaveData final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndDataBaseAPI_IsMakeCommonSaveData) == 0x000001, "Wrong alignment on EndDataBaseAPI_IsMakeCommonSaveData");
static_assert(sizeof(EndDataBaseAPI_IsMakeCommonSaveData) == 0x000001, "Wrong size on EndDataBaseAPI_IsMakeCommonSaveData");
static_assert(offsetof(EndDataBaseAPI_IsMakeCommonSaveData, ReturnValue) == 0x000000, "Member 'EndDataBaseAPI_IsMakeCommonSaveData::ReturnValue' has a wrong offset!");

// Function EndGame.EndDataBaseAPI.IsMakeLocationSaveData
// 0x0001 (0x0001 - 0x0000)
struct EndDataBaseAPI_IsMakeLocationSaveData final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndDataBaseAPI_IsMakeLocationSaveData) == 0x000001, "Wrong alignment on EndDataBaseAPI_IsMakeLocationSaveData");
static_assert(sizeof(EndDataBaseAPI_IsMakeLocationSaveData) == 0x000001, "Wrong size on EndDataBaseAPI_IsMakeLocationSaveData");
static_assert(offsetof(EndDataBaseAPI_IsMakeLocationSaveData, ReturnValue) == 0x000000, "Member 'EndDataBaseAPI_IsMakeLocationSaveData::ReturnValue' has a wrong offset!");

// Function EndGame.EndDataBaseAPI.IsSaveLoadExecuting
// 0x000C (0x000C - 0x0000)
struct EndDataBaseAPI_IsSaveLoadExecuting final
{
public:
	EIOGameDataRequestLayer                       InLayer;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InRequestID;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndDataBaseAPI_IsSaveLoadExecuting) == 0x000004, "Wrong alignment on EndDataBaseAPI_IsSaveLoadExecuting");
static_assert(sizeof(EndDataBaseAPI_IsSaveLoadExecuting) == 0x00000C, "Wrong size on EndDataBaseAPI_IsSaveLoadExecuting");
static_assert(offsetof(EndDataBaseAPI_IsSaveLoadExecuting, InLayer) == 0x000000, "Member 'EndDataBaseAPI_IsSaveLoadExecuting::InLayer' has a wrong offset!");
static_assert(offsetof(EndDataBaseAPI_IsSaveLoadExecuting, InRequestID) == 0x000004, "Member 'EndDataBaseAPI_IsSaveLoadExecuting::InRequestID' has a wrong offset!");
static_assert(offsetof(EndDataBaseAPI_IsSaveLoadExecuting, ReturnValue) == 0x000008, "Member 'EndDataBaseAPI_IsSaveLoadExecuting::ReturnValue' has a wrong offset!");

// Function EndGame.EndDataBaseAPI.IsStoryFlag
// 0x000C (0x000C - 0x0000)
struct EndDataBaseAPI_IsStoryFlag final
{
public:
	class FName                                   StoryFlagID;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndDataBaseAPI_IsStoryFlag) == 0x000004, "Wrong alignment on EndDataBaseAPI_IsStoryFlag");
static_assert(sizeof(EndDataBaseAPI_IsStoryFlag) == 0x00000C, "Wrong size on EndDataBaseAPI_IsStoryFlag");
static_assert(offsetof(EndDataBaseAPI_IsStoryFlag, StoryFlagID) == 0x000000, "Member 'EndDataBaseAPI_IsStoryFlag::StoryFlagID' has a wrong offset!");
static_assert(offsetof(EndDataBaseAPI_IsStoryFlag, ReturnValue) == 0x000008, "Member 'EndDataBaseAPI_IsStoryFlag::ReturnValue' has a wrong offset!");

// Function EndGame.EndDataBaseAPI.ReflectionLocationSaveData
// 0x0001 (0x0001 - 0x0000)
struct EndDataBaseAPI_ReflectionLocationSaveData final
{
public:
	bool                                          snap;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndDataBaseAPI_ReflectionLocationSaveData) == 0x000001, "Wrong alignment on EndDataBaseAPI_ReflectionLocationSaveData");
static_assert(sizeof(EndDataBaseAPI_ReflectionLocationSaveData) == 0x000001, "Wrong size on EndDataBaseAPI_ReflectionLocationSaveData");
static_assert(offsetof(EndDataBaseAPI_ReflectionLocationSaveData, snap) == 0x000000, "Member 'EndDataBaseAPI_ReflectionLocationSaveData::snap' has a wrong offset!");

// Function EndGame.EndDataBaseAPI.ReflectionPointSaveToAutoSave
// 0x0038 (0x0038 - 0x0000)
struct EndDataBaseAPI_ReflectionPointSaveToAutoSave final
{
public:
	class FName                                   Level;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name_0;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UObject*                          WorldContextObject;                                // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0020(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndDataBaseAPI_ReflectionPointSaveToAutoSave) == 0x000008, "Wrong alignment on EndDataBaseAPI_ReflectionPointSaveToAutoSave");
static_assert(sizeof(EndDataBaseAPI_ReflectionPointSaveToAutoSave) == 0x000038, "Wrong size on EndDataBaseAPI_ReflectionPointSaveToAutoSave");
static_assert(offsetof(EndDataBaseAPI_ReflectionPointSaveToAutoSave, Level) == 0x000000, "Member 'EndDataBaseAPI_ReflectionPointSaveToAutoSave::Level' has a wrong offset!");
static_assert(offsetof(EndDataBaseAPI_ReflectionPointSaveToAutoSave, Name_0) == 0x000008, "Member 'EndDataBaseAPI_ReflectionPointSaveToAutoSave::Name_0' has a wrong offset!");
static_assert(offsetof(EndDataBaseAPI_ReflectionPointSaveToAutoSave, WorldContextObject) == 0x000018, "Member 'EndDataBaseAPI_ReflectionPointSaveToAutoSave::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EndDataBaseAPI_ReflectionPointSaveToAutoSave, LatentInfo) == 0x000020, "Member 'EndDataBaseAPI_ReflectionPointSaveToAutoSave::LatentInfo' has a wrong offset!");

// Function EndGame.EndDataBaseAPI.ReflectionResidentSaveData
// 0x0002 (0x0002 - 0x0000)
struct EndDataBaseAPI_ReflectionResidentSaveData final
{
public:
	bool                                          snap;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          backup;                                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndDataBaseAPI_ReflectionResidentSaveData) == 0x000001, "Wrong alignment on EndDataBaseAPI_ReflectionResidentSaveData");
static_assert(sizeof(EndDataBaseAPI_ReflectionResidentSaveData) == 0x000002, "Wrong size on EndDataBaseAPI_ReflectionResidentSaveData");
static_assert(offsetof(EndDataBaseAPI_ReflectionResidentSaveData, snap) == 0x000000, "Member 'EndDataBaseAPI_ReflectionResidentSaveData::snap' has a wrong offset!");
static_assert(offsetof(EndDataBaseAPI_ReflectionResidentSaveData, backup) == 0x000001, "Member 'EndDataBaseAPI_ReflectionResidentSaveData::backup' has a wrong offset!");

// Function EndGame.EndDataBaseAPI.RequestAutoSave
// 0x0020 (0x0020 - 0x0000)
struct EndDataBaseAPI_RequestAutoSave final
{
public:
	EIOGameDataRequestLayer                       InLayer;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          override_position;                                 // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                pos;                                               // 0x0004(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               rot;                                               // 0x0010(0x000C)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x001C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndDataBaseAPI_RequestAutoSave) == 0x000004, "Wrong alignment on EndDataBaseAPI_RequestAutoSave");
static_assert(sizeof(EndDataBaseAPI_RequestAutoSave) == 0x000020, "Wrong size on EndDataBaseAPI_RequestAutoSave");
static_assert(offsetof(EndDataBaseAPI_RequestAutoSave, InLayer) == 0x000000, "Member 'EndDataBaseAPI_RequestAutoSave::InLayer' has a wrong offset!");
static_assert(offsetof(EndDataBaseAPI_RequestAutoSave, override_position) == 0x000001, "Member 'EndDataBaseAPI_RequestAutoSave::override_position' has a wrong offset!");
static_assert(offsetof(EndDataBaseAPI_RequestAutoSave, pos) == 0x000004, "Member 'EndDataBaseAPI_RequestAutoSave::pos' has a wrong offset!");
static_assert(offsetof(EndDataBaseAPI_RequestAutoSave, rot) == 0x000010, "Member 'EndDataBaseAPI_RequestAutoSave::rot' has a wrong offset!");
static_assert(offsetof(EndDataBaseAPI_RequestAutoSave, ReturnValue) == 0x00001C, "Member 'EndDataBaseAPI_RequestAutoSave::ReturnValue' has a wrong offset!");

// Function EndGame.EndDataBaseAPI.RequestBackUpAutoSave
// 0x0020 (0x0020 - 0x0000)
struct EndDataBaseAPI_RequestBackUpAutoSave final
{
public:
	EIOGameDataRequestLayer                       InLayer;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          override_position;                                 // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                pos;                                               // 0x0004(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               rot;                                               // 0x0010(0x000C)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x001C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndDataBaseAPI_RequestBackUpAutoSave) == 0x000004, "Wrong alignment on EndDataBaseAPI_RequestBackUpAutoSave");
static_assert(sizeof(EndDataBaseAPI_RequestBackUpAutoSave) == 0x000020, "Wrong size on EndDataBaseAPI_RequestBackUpAutoSave");
static_assert(offsetof(EndDataBaseAPI_RequestBackUpAutoSave, InLayer) == 0x000000, "Member 'EndDataBaseAPI_RequestBackUpAutoSave::InLayer' has a wrong offset!");
static_assert(offsetof(EndDataBaseAPI_RequestBackUpAutoSave, override_position) == 0x000001, "Member 'EndDataBaseAPI_RequestBackUpAutoSave::override_position' has a wrong offset!");
static_assert(offsetof(EndDataBaseAPI_RequestBackUpAutoSave, pos) == 0x000004, "Member 'EndDataBaseAPI_RequestBackUpAutoSave::pos' has a wrong offset!");
static_assert(offsetof(EndDataBaseAPI_RequestBackUpAutoSave, rot) == 0x000010, "Member 'EndDataBaseAPI_RequestBackUpAutoSave::rot' has a wrong offset!");
static_assert(offsetof(EndDataBaseAPI_RequestBackUpAutoSave, ReturnValue) == 0x00001C, "Member 'EndDataBaseAPI_RequestBackUpAutoSave::ReturnValue' has a wrong offset!");

// Function EndGame.EndDataBaseAPI.RequestBackUpLoad
// 0x0008 (0x0008 - 0x0000)
struct EndDataBaseAPI_RequestBackUpLoad final
{
public:
	EIOGameDataRequestLayer                       InLayer;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndDataBaseAPI_RequestBackUpLoad) == 0x000004, "Wrong alignment on EndDataBaseAPI_RequestBackUpLoad");
static_assert(sizeof(EndDataBaseAPI_RequestBackUpLoad) == 0x000008, "Wrong size on EndDataBaseAPI_RequestBackUpLoad");
static_assert(offsetof(EndDataBaseAPI_RequestBackUpLoad, InLayer) == 0x000000, "Member 'EndDataBaseAPI_RequestBackUpLoad::InLayer' has a wrong offset!");
static_assert(offsetof(EndDataBaseAPI_RequestBackUpLoad, ReturnValue) == 0x000004, "Member 'EndDataBaseAPI_RequestBackUpLoad::ReturnValue' has a wrong offset!");

// Function EndGame.EndDataBaseAPI.RequestCheckExistSaveCommon
// 0x0008 (0x0008 - 0x0000)
struct EndDataBaseAPI_RequestCheckExistSaveCommon final
{
public:
	EIOGameDataRequestLayer                       InLayer;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndDataBaseAPI_RequestCheckExistSaveCommon) == 0x000004, "Wrong alignment on EndDataBaseAPI_RequestCheckExistSaveCommon");
static_assert(sizeof(EndDataBaseAPI_RequestCheckExistSaveCommon) == 0x000008, "Wrong size on EndDataBaseAPI_RequestCheckExistSaveCommon");
static_assert(offsetof(EndDataBaseAPI_RequestCheckExistSaveCommon, InLayer) == 0x000000, "Member 'EndDataBaseAPI_RequestCheckExistSaveCommon::InLayer' has a wrong offset!");
static_assert(offsetof(EndDataBaseAPI_RequestCheckExistSaveCommon, ReturnValue) == 0x000004, "Member 'EndDataBaseAPI_RequestCheckExistSaveCommon::ReturnValue' has a wrong offset!");

// Function EndGame.EndDataBaseAPI.RequestCheckExistSaveData
// 0x000C (0x000C - 0x0000)
struct EndDataBaseAPI_RequestCheckExistSaveData final
{
public:
	EIOGameDataRequestLayer                       InLayer;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Slot;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndDataBaseAPI_RequestCheckExistSaveData) == 0x000004, "Wrong alignment on EndDataBaseAPI_RequestCheckExistSaveData");
static_assert(sizeof(EndDataBaseAPI_RequestCheckExistSaveData) == 0x00000C, "Wrong size on EndDataBaseAPI_RequestCheckExistSaveData");
static_assert(offsetof(EndDataBaseAPI_RequestCheckExistSaveData, InLayer) == 0x000000, "Member 'EndDataBaseAPI_RequestCheckExistSaveData::InLayer' has a wrong offset!");
static_assert(offsetof(EndDataBaseAPI_RequestCheckExistSaveData, Slot) == 0x000004, "Member 'EndDataBaseAPI_RequestCheckExistSaveData::Slot' has a wrong offset!");
static_assert(offsetof(EndDataBaseAPI_RequestCheckExistSaveData, ReturnValue) == 0x000008, "Member 'EndDataBaseAPI_RequestCheckExistSaveData::ReturnValue' has a wrong offset!");

// Function EndGame.EndDataBaseAPI.RequestGatherExistSaveData
// 0x0008 (0x0008 - 0x0000)
struct EndDataBaseAPI_RequestGatherExistSaveData final
{
public:
	EIOGameDataRequestLayer                       InLayer;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndDataBaseAPI_RequestGatherExistSaveData) == 0x000004, "Wrong alignment on EndDataBaseAPI_RequestGatherExistSaveData");
static_assert(sizeof(EndDataBaseAPI_RequestGatherExistSaveData) == 0x000008, "Wrong size on EndDataBaseAPI_RequestGatherExistSaveData");
static_assert(offsetof(EndDataBaseAPI_RequestGatherExistSaveData, InLayer) == 0x000000, "Member 'EndDataBaseAPI_RequestGatherExistSaveData::InLayer' has a wrong offset!");
static_assert(offsetof(EndDataBaseAPI_RequestGatherExistSaveData, ReturnValue) == 0x000004, "Member 'EndDataBaseAPI_RequestGatherExistSaveData::ReturnValue' has a wrong offset!");

// Function EndGame.EndDataBaseAPI.RequestGatherExistSaveDataAtSaving
// 0x0008 (0x0008 - 0x0000)
struct EndDataBaseAPI_RequestGatherExistSaveDataAtSaving final
{
public:
	EIOGameDataRequestLayer                       InLayer;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndDataBaseAPI_RequestGatherExistSaveDataAtSaving) == 0x000004, "Wrong alignment on EndDataBaseAPI_RequestGatherExistSaveDataAtSaving");
static_assert(sizeof(EndDataBaseAPI_RequestGatherExistSaveDataAtSaving) == 0x000008, "Wrong size on EndDataBaseAPI_RequestGatherExistSaveDataAtSaving");
static_assert(offsetof(EndDataBaseAPI_RequestGatherExistSaveDataAtSaving, InLayer) == 0x000000, "Member 'EndDataBaseAPI_RequestGatherExistSaveDataAtSaving::InLayer' has a wrong offset!");
static_assert(offsetof(EndDataBaseAPI_RequestGatherExistSaveDataAtSaving, ReturnValue) == 0x000004, "Member 'EndDataBaseAPI_RequestGatherExistSaveDataAtSaving::ReturnValue' has a wrong offset!");

// Function EndGame.EndDataBaseAPI.RequestLoadCommon
// 0x0008 (0x0008 - 0x0000)
struct EndDataBaseAPI_RequestLoadCommon final
{
public:
	EIOGameDataRequestLayer                       InLayer;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndDataBaseAPI_RequestLoadCommon) == 0x000004, "Wrong alignment on EndDataBaseAPI_RequestLoadCommon");
static_assert(sizeof(EndDataBaseAPI_RequestLoadCommon) == 0x000008, "Wrong size on EndDataBaseAPI_RequestLoadCommon");
static_assert(offsetof(EndDataBaseAPI_RequestLoadCommon, InLayer) == 0x000000, "Member 'EndDataBaseAPI_RequestLoadCommon::InLayer' has a wrong offset!");
static_assert(offsetof(EndDataBaseAPI_RequestLoadCommon, ReturnValue) == 0x000004, "Member 'EndDataBaseAPI_RequestLoadCommon::ReturnValue' has a wrong offset!");

// Function EndGame.EndDataBaseAPI.RequestLoadData
// 0x0008 (0x0008 - 0x0000)
struct EndDataBaseAPI_RequestLoadData final
{
public:
	EIOGameDataRequestLayer                       InLayer;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isCarryOverPlayerParameter;                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndDataBaseAPI_RequestLoadData) == 0x000004, "Wrong alignment on EndDataBaseAPI_RequestLoadData");
static_assert(sizeof(EndDataBaseAPI_RequestLoadData) == 0x000008, "Wrong size on EndDataBaseAPI_RequestLoadData");
static_assert(offsetof(EndDataBaseAPI_RequestLoadData, InLayer) == 0x000000, "Member 'EndDataBaseAPI_RequestLoadData::InLayer' has a wrong offset!");
static_assert(offsetof(EndDataBaseAPI_RequestLoadData, isCarryOverPlayerParameter) == 0x000001, "Member 'EndDataBaseAPI_RequestLoadData::isCarryOverPlayerParameter' has a wrong offset!");
static_assert(offsetof(EndDataBaseAPI_RequestLoadData, ReturnValue) == 0x000004, "Member 'EndDataBaseAPI_RequestLoadData::ReturnValue' has a wrong offset!");

// Function EndGame.EndDataBaseAPI.RequestLoadLocation
// 0x0008 (0x0008 - 0x0000)
struct EndDataBaseAPI_RequestLoadLocation final
{
public:
	EIOGameDataRequestLayer                       InLayer;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndDataBaseAPI_RequestLoadLocation) == 0x000004, "Wrong alignment on EndDataBaseAPI_RequestLoadLocation");
static_assert(sizeof(EndDataBaseAPI_RequestLoadLocation) == 0x000008, "Wrong size on EndDataBaseAPI_RequestLoadLocation");
static_assert(offsetof(EndDataBaseAPI_RequestLoadLocation, InLayer) == 0x000000, "Member 'EndDataBaseAPI_RequestLoadLocation::InLayer' has a wrong offset!");
static_assert(offsetof(EndDataBaseAPI_RequestLoadLocation, ReturnValue) == 0x000004, "Member 'EndDataBaseAPI_RequestLoadLocation::ReturnValue' has a wrong offset!");

// Function EndGame.EndDataBaseAPI.RequestResetBackUpAutoSave
// 0x0020 (0x0020 - 0x0000)
struct EndDataBaseAPI_RequestResetBackUpAutoSave final
{
public:
	EIOGameDataRequestLayer                       InLayer;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          override_position;                                 // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                pos;                                               // 0x0004(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               rot;                                               // 0x0010(0x000C)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x001C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndDataBaseAPI_RequestResetBackUpAutoSave) == 0x000004, "Wrong alignment on EndDataBaseAPI_RequestResetBackUpAutoSave");
static_assert(sizeof(EndDataBaseAPI_RequestResetBackUpAutoSave) == 0x000020, "Wrong size on EndDataBaseAPI_RequestResetBackUpAutoSave");
static_assert(offsetof(EndDataBaseAPI_RequestResetBackUpAutoSave, InLayer) == 0x000000, "Member 'EndDataBaseAPI_RequestResetBackUpAutoSave::InLayer' has a wrong offset!");
static_assert(offsetof(EndDataBaseAPI_RequestResetBackUpAutoSave, override_position) == 0x000001, "Member 'EndDataBaseAPI_RequestResetBackUpAutoSave::override_position' has a wrong offset!");
static_assert(offsetof(EndDataBaseAPI_RequestResetBackUpAutoSave, pos) == 0x000004, "Member 'EndDataBaseAPI_RequestResetBackUpAutoSave::pos' has a wrong offset!");
static_assert(offsetof(EndDataBaseAPI_RequestResetBackUpAutoSave, rot) == 0x000010, "Member 'EndDataBaseAPI_RequestResetBackUpAutoSave::rot' has a wrong offset!");
static_assert(offsetof(EndDataBaseAPI_RequestResetBackUpAutoSave, ReturnValue) == 0x00001C, "Member 'EndDataBaseAPI_RequestResetBackUpAutoSave::ReturnValue' has a wrong offset!");

// Function EndGame.EndDataBaseAPI.RequestSaveCommon
// 0x0008 (0x0008 - 0x0000)
struct EndDataBaseAPI_RequestSaveCommon final
{
public:
	EIOGameDataRequestLayer                       InLayer;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndDataBaseAPI_RequestSaveCommon) == 0x000004, "Wrong alignment on EndDataBaseAPI_RequestSaveCommon");
static_assert(sizeof(EndDataBaseAPI_RequestSaveCommon) == 0x000008, "Wrong size on EndDataBaseAPI_RequestSaveCommon");
static_assert(offsetof(EndDataBaseAPI_RequestSaveCommon, InLayer) == 0x000000, "Member 'EndDataBaseAPI_RequestSaveCommon::InLayer' has a wrong offset!");
static_assert(offsetof(EndDataBaseAPI_RequestSaveCommon, ReturnValue) == 0x000004, "Member 'EndDataBaseAPI_RequestSaveCommon::ReturnValue' has a wrong offset!");

// Function EndGame.EndDataBaseAPI.RequestSaveData
// 0x0008 (0x0008 - 0x0000)
struct EndDataBaseAPI_RequestSaveData final
{
public:
	EIOGameDataRequestLayer                       InLayer;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ignorePreUpdateLocation;                           // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ignoreLocationSave;                                // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndDataBaseAPI_RequestSaveData) == 0x000004, "Wrong alignment on EndDataBaseAPI_RequestSaveData");
static_assert(sizeof(EndDataBaseAPI_RequestSaveData) == 0x000008, "Wrong size on EndDataBaseAPI_RequestSaveData");
static_assert(offsetof(EndDataBaseAPI_RequestSaveData, InLayer) == 0x000000, "Member 'EndDataBaseAPI_RequestSaveData::InLayer' has a wrong offset!");
static_assert(offsetof(EndDataBaseAPI_RequestSaveData, ignorePreUpdateLocation) == 0x000001, "Member 'EndDataBaseAPI_RequestSaveData::ignorePreUpdateLocation' has a wrong offset!");
static_assert(offsetof(EndDataBaseAPI_RequestSaveData, ignoreLocationSave) == 0x000002, "Member 'EndDataBaseAPI_RequestSaveData::ignoreLocationSave' has a wrong offset!");
static_assert(offsetof(EndDataBaseAPI_RequestSaveData, ReturnValue) == 0x000004, "Member 'EndDataBaseAPI_RequestSaveData::ReturnValue' has a wrong offset!");

// Function EndGame.EndDataBaseAPI.SetCurrentDataSlot
// 0x0004 (0x0004 - 0x0000)
struct EndDataBaseAPI_SetCurrentDataSlot final
{
public:
	int32                                         Slot;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndDataBaseAPI_SetCurrentDataSlot) == 0x000004, "Wrong alignment on EndDataBaseAPI_SetCurrentDataSlot");
static_assert(sizeof(EndDataBaseAPI_SetCurrentDataSlot) == 0x000004, "Wrong size on EndDataBaseAPI_SetCurrentDataSlot");
static_assert(offsetof(EndDataBaseAPI_SetCurrentDataSlot, Slot) == 0x000000, "Member 'EndDataBaseAPI_SetCurrentDataSlot::Slot' has a wrong offset!");

// Function EndGame.EndDataBaseAPI.SetCurrentPlayerCharaSpecList
// 0x0002 (0x0002 - 0x0000)
struct EndDataBaseAPI_SetCurrentPlayerCharaSpecList final
{
public:
	EEquipmentType                                equipment;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlayerType                                   Type;                                              // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndDataBaseAPI_SetCurrentPlayerCharaSpecList) == 0x000001, "Wrong alignment on EndDataBaseAPI_SetCurrentPlayerCharaSpecList");
static_assert(sizeof(EndDataBaseAPI_SetCurrentPlayerCharaSpecList) == 0x000002, "Wrong size on EndDataBaseAPI_SetCurrentPlayerCharaSpecList");
static_assert(offsetof(EndDataBaseAPI_SetCurrentPlayerCharaSpecList, equipment) == 0x000000, "Member 'EndDataBaseAPI_SetCurrentPlayerCharaSpecList::equipment' has a wrong offset!");
static_assert(offsetof(EndDataBaseAPI_SetCurrentPlayerCharaSpecList, Type) == 0x000001, "Member 'EndDataBaseAPI_SetCurrentPlayerCharaSpecList::Type' has a wrong offset!");

// Function EndGame.EndDataBaseAPI.SetDataBaseFlagBP
// 0x0008 (0x0008 - 0x0000)
struct EndDataBaseAPI_SetDataBaseFlagBP final
{
public:
	int32                                         BitFlag;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Flag;                                              // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndDataBaseAPI_SetDataBaseFlagBP) == 0x000004, "Wrong alignment on EndDataBaseAPI_SetDataBaseFlagBP");
static_assert(sizeof(EndDataBaseAPI_SetDataBaseFlagBP) == 0x000008, "Wrong size on EndDataBaseAPI_SetDataBaseFlagBP");
static_assert(offsetof(EndDataBaseAPI_SetDataBaseFlagBP, BitFlag) == 0x000000, "Member 'EndDataBaseAPI_SetDataBaseFlagBP::BitFlag' has a wrong offset!");
static_assert(offsetof(EndDataBaseAPI_SetDataBaseFlagBP, Flag) == 0x000004, "Member 'EndDataBaseAPI_SetDataBaseFlagBP::Flag' has a wrong offset!");

// Function EndGame.EndDataBaseAPI.SetDefaultBattleLeaderTypeBP
// 0x0001 (0x0001 - 0x0000)
struct EndDataBaseAPI_SetDefaultBattleLeaderTypeBP final
{
public:
	EPlayerType                                   Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndDataBaseAPI_SetDefaultBattleLeaderTypeBP) == 0x000001, "Wrong alignment on EndDataBaseAPI_SetDefaultBattleLeaderTypeBP");
static_assert(sizeof(EndDataBaseAPI_SetDefaultBattleLeaderTypeBP) == 0x000001, "Wrong size on EndDataBaseAPI_SetDefaultBattleLeaderTypeBP");
static_assert(offsetof(EndDataBaseAPI_SetDefaultBattleLeaderTypeBP, Type) == 0x000000, "Member 'EndDataBaseAPI_SetDefaultBattleLeaderTypeBP::Type' has a wrong offset!");

// Function EndGame.EndDataBaseAPI.SetDefaultPartyLeaderTypeBP
// 0x0001 (0x0001 - 0x0000)
struct EndDataBaseAPI_SetDefaultPartyLeaderTypeBP final
{
public:
	EPlayerType                                   Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndDataBaseAPI_SetDefaultPartyLeaderTypeBP) == 0x000001, "Wrong alignment on EndDataBaseAPI_SetDefaultPartyLeaderTypeBP");
static_assert(sizeof(EndDataBaseAPI_SetDefaultPartyLeaderTypeBP) == 0x000001, "Wrong size on EndDataBaseAPI_SetDefaultPartyLeaderTypeBP");
static_assert(offsetof(EndDataBaseAPI_SetDefaultPartyLeaderTypeBP, Type) == 0x000000, "Member 'EndDataBaseAPI_SetDefaultPartyLeaderTypeBP::Type' has a wrong offset!");

// Function EndGame.EndDataBaseAPI.SetLocationWorkFloat
// 0x000C (0x000C - 0x0000)
struct EndDataBaseAPI_SetLocationWorkFloat final
{
public:
	class FName                                   locationWorkId;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndDataBaseAPI_SetLocationWorkFloat) == 0x000004, "Wrong alignment on EndDataBaseAPI_SetLocationWorkFloat");
static_assert(sizeof(EndDataBaseAPI_SetLocationWorkFloat) == 0x00000C, "Wrong size on EndDataBaseAPI_SetLocationWorkFloat");
static_assert(offsetof(EndDataBaseAPI_SetLocationWorkFloat, locationWorkId) == 0x000000, "Member 'EndDataBaseAPI_SetLocationWorkFloat::locationWorkId' has a wrong offset!");
static_assert(offsetof(EndDataBaseAPI_SetLocationWorkFloat, Value) == 0x000008, "Member 'EndDataBaseAPI_SetLocationWorkFloat::Value' has a wrong offset!");

// Function EndGame.EndDataBaseAPI.SetLocationWorkInteger
// 0x000C (0x000C - 0x0000)
struct EndDataBaseAPI_SetLocationWorkInteger final
{
public:
	class FName                                   locationWorkId;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndDataBaseAPI_SetLocationWorkInteger) == 0x000004, "Wrong alignment on EndDataBaseAPI_SetLocationWorkInteger");
static_assert(sizeof(EndDataBaseAPI_SetLocationWorkInteger) == 0x00000C, "Wrong size on EndDataBaseAPI_SetLocationWorkInteger");
static_assert(offsetof(EndDataBaseAPI_SetLocationWorkInteger, locationWorkId) == 0x000000, "Member 'EndDataBaseAPI_SetLocationWorkInteger::locationWorkId' has a wrong offset!");
static_assert(offsetof(EndDataBaseAPI_SetLocationWorkInteger, Value) == 0x000008, "Member 'EndDataBaseAPI_SetLocationWorkInteger::Value' has a wrong offset!");

// Function EndGame.EndDataBaseAPI.SetPrevCharaSpecList
// 0x0018 (0x0018 - 0x0000)
struct EndDataBaseAPI_SetPrevCharaSpecList final
{
public:
	EEquipmentType                                equipment;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlayerType                                   Type;                                              // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           nameList;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndDataBaseAPI_SetPrevCharaSpecList) == 0x000008, "Wrong alignment on EndDataBaseAPI_SetPrevCharaSpecList");
static_assert(sizeof(EndDataBaseAPI_SetPrevCharaSpecList) == 0x000018, "Wrong size on EndDataBaseAPI_SetPrevCharaSpecList");
static_assert(offsetof(EndDataBaseAPI_SetPrevCharaSpecList, equipment) == 0x000000, "Member 'EndDataBaseAPI_SetPrevCharaSpecList::equipment' has a wrong offset!");
static_assert(offsetof(EndDataBaseAPI_SetPrevCharaSpecList, Type) == 0x000001, "Member 'EndDataBaseAPI_SetPrevCharaSpecList::Type' has a wrong offset!");
static_assert(offsetof(EndDataBaseAPI_SetPrevCharaSpecList, nameList) == 0x000008, "Member 'EndDataBaseAPI_SetPrevCharaSpecList::nameList' has a wrong offset!");

// Function EndGame.EndDataBaseAPI.SetResidentWorkFloat
// 0x000C (0x000C - 0x0000)
struct EndDataBaseAPI_SetResidentWorkFloat final
{
public:
	class FName                                   residentWorkId;                                    // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndDataBaseAPI_SetResidentWorkFloat) == 0x000004, "Wrong alignment on EndDataBaseAPI_SetResidentWorkFloat");
static_assert(sizeof(EndDataBaseAPI_SetResidentWorkFloat) == 0x00000C, "Wrong size on EndDataBaseAPI_SetResidentWorkFloat");
static_assert(offsetof(EndDataBaseAPI_SetResidentWorkFloat, residentWorkId) == 0x000000, "Member 'EndDataBaseAPI_SetResidentWorkFloat::residentWorkId' has a wrong offset!");
static_assert(offsetof(EndDataBaseAPI_SetResidentWorkFloat, Value) == 0x000008, "Member 'EndDataBaseAPI_SetResidentWorkFloat::Value' has a wrong offset!");

// Function EndGame.EndDataBaseAPI.SetResidentWorkInteger
// 0x000C (0x000C - 0x0000)
struct EndDataBaseAPI_SetResidentWorkInteger final
{
public:
	class FName                                   residentWorkId;                                    // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndDataBaseAPI_SetResidentWorkInteger) == 0x000004, "Wrong alignment on EndDataBaseAPI_SetResidentWorkInteger");
static_assert(sizeof(EndDataBaseAPI_SetResidentWorkInteger) == 0x00000C, "Wrong size on EndDataBaseAPI_SetResidentWorkInteger");
static_assert(offsetof(EndDataBaseAPI_SetResidentWorkInteger, residentWorkId) == 0x000000, "Member 'EndDataBaseAPI_SetResidentWorkInteger::residentWorkId' has a wrong offset!");
static_assert(offsetof(EndDataBaseAPI_SetResidentWorkInteger, Value) == 0x000008, "Member 'EndDataBaseAPI_SetResidentWorkInteger::Value' has a wrong offset!");

// Function EndGame.EndDataBaseAPI.SetStoryFlagBP
// 0x000C (0x000C - 0x0000)
struct EndDataBaseAPI_SetStoryFlagBP final
{
public:
	class FName                                   StoryFlagID;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Value;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndDataBaseAPI_SetStoryFlagBP) == 0x000004, "Wrong alignment on EndDataBaseAPI_SetStoryFlagBP");
static_assert(sizeof(EndDataBaseAPI_SetStoryFlagBP) == 0x00000C, "Wrong size on EndDataBaseAPI_SetStoryFlagBP");
static_assert(offsetof(EndDataBaseAPI_SetStoryFlagBP, StoryFlagID) == 0x000000, "Member 'EndDataBaseAPI_SetStoryFlagBP::StoryFlagID' has a wrong offset!");
static_assert(offsetof(EndDataBaseAPI_SetStoryFlagBP, Value) == 0x000008, "Member 'EndDataBaseAPI_SetStoryFlagBP::Value' has a wrong offset!");

// Function EndGame.EndDataBaseAPI.SetTestPlayModeTableID
// 0x0008 (0x0008 - 0x0000)
struct EndDataBaseAPI_SetTestPlayModeTableID final
{
public:
	class FName                                   setTableID;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndDataBaseAPI_SetTestPlayModeTableID) == 0x000004, "Wrong alignment on EndDataBaseAPI_SetTestPlayModeTableID");
static_assert(sizeof(EndDataBaseAPI_SetTestPlayModeTableID) == 0x000008, "Wrong size on EndDataBaseAPI_SetTestPlayModeTableID");
static_assert(offsetof(EndDataBaseAPI_SetTestPlayModeTableID, setTableID) == 0x000000, "Member 'EndDataBaseAPI_SetTestPlayModeTableID::setTableID' has a wrong offset!");

// Function EndGame.EndDataBaseAPI.SetupInitialParameter
// 0x0008 (0x0008 - 0x0000)
struct EndDataBaseAPI_SetupInitialParameter final
{
public:
	class FName                                   debugPartyListDataTableId;                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndDataBaseAPI_SetupInitialParameter) == 0x000004, "Wrong alignment on EndDataBaseAPI_SetupInitialParameter");
static_assert(sizeof(EndDataBaseAPI_SetupInitialParameter) == 0x000008, "Wrong size on EndDataBaseAPI_SetupInitialParameter");
static_assert(offsetof(EndDataBaseAPI_SetupInitialParameter, debugPartyListDataTableId) == 0x000000, "Member 'EndDataBaseAPI_SetupInitialParameter::debugPartyListDataTableId' has a wrong offset!");

// Function EndGame.EndDataBaseAPI.StartAutoSave
// 0x001C (0x001C - 0x0000)
struct EndDataBaseAPI_StartAutoSave final
{
public:
	bool                                          override_position;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                pos;                                               // 0x0004(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               rot;                                               // 0x0010(0x000C)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndDataBaseAPI_StartAutoSave) == 0x000004, "Wrong alignment on EndDataBaseAPI_StartAutoSave");
static_assert(sizeof(EndDataBaseAPI_StartAutoSave) == 0x00001C, "Wrong size on EndDataBaseAPI_StartAutoSave");
static_assert(offsetof(EndDataBaseAPI_StartAutoSave, override_position) == 0x000000, "Member 'EndDataBaseAPI_StartAutoSave::override_position' has a wrong offset!");
static_assert(offsetof(EndDataBaseAPI_StartAutoSave, pos) == 0x000004, "Member 'EndDataBaseAPI_StartAutoSave::pos' has a wrong offset!");
static_assert(offsetof(EndDataBaseAPI_StartAutoSave, rot) == 0x000010, "Member 'EndDataBaseAPI_StartAutoSave::rot' has a wrong offset!");

// Function EndGame.EndDataBaseAPI.StartAutoSaveForInitializedLocationData
// 0x001C (0x001C - 0x0000)
struct EndDataBaseAPI_StartAutoSaveForInitializedLocationData final
{
public:
	bool                                          override_position;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                pos;                                               // 0x0004(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               rot;                                               // 0x0010(0x000C)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndDataBaseAPI_StartAutoSaveForInitializedLocationData) == 0x000004, "Wrong alignment on EndDataBaseAPI_StartAutoSaveForInitializedLocationData");
static_assert(sizeof(EndDataBaseAPI_StartAutoSaveForInitializedLocationData) == 0x00001C, "Wrong size on EndDataBaseAPI_StartAutoSaveForInitializedLocationData");
static_assert(offsetof(EndDataBaseAPI_StartAutoSaveForInitializedLocationData, override_position) == 0x000000, "Member 'EndDataBaseAPI_StartAutoSaveForInitializedLocationData::override_position' has a wrong offset!");
static_assert(offsetof(EndDataBaseAPI_StartAutoSaveForInitializedLocationData, pos) == 0x000004, "Member 'EndDataBaseAPI_StartAutoSaveForInitializedLocationData::pos' has a wrong offset!");
static_assert(offsetof(EndDataBaseAPI_StartAutoSaveForInitializedLocationData, rot) == 0x000010, "Member 'EndDataBaseAPI_StartAutoSaveForInitializedLocationData::rot' has a wrong offset!");

// Function EndGame.EndDataBaseAPI.StartBackUpAutoSave
// 0x001C (0x001C - 0x0000)
struct EndDataBaseAPI_StartBackUpAutoSave final
{
public:
	bool                                          override_position;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                pos;                                               // 0x0004(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               rot;                                               // 0x0010(0x000C)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndDataBaseAPI_StartBackUpAutoSave) == 0x000004, "Wrong alignment on EndDataBaseAPI_StartBackUpAutoSave");
static_assert(sizeof(EndDataBaseAPI_StartBackUpAutoSave) == 0x00001C, "Wrong size on EndDataBaseAPI_StartBackUpAutoSave");
static_assert(offsetof(EndDataBaseAPI_StartBackUpAutoSave, override_position) == 0x000000, "Member 'EndDataBaseAPI_StartBackUpAutoSave::override_position' has a wrong offset!");
static_assert(offsetof(EndDataBaseAPI_StartBackUpAutoSave, pos) == 0x000004, "Member 'EndDataBaseAPI_StartBackUpAutoSave::pos' has a wrong offset!");
static_assert(offsetof(EndDataBaseAPI_StartBackUpAutoSave, rot) == 0x000010, "Member 'EndDataBaseAPI_StartBackUpAutoSave::rot' has a wrong offset!");

// Function EndGame.EndDataBaseAPI.StartLoadData
// 0x0001 (0x0001 - 0x0000)
struct EndDataBaseAPI_StartLoadData final
{
public:
	bool                                          isCarryOverPlayerParameter;                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndDataBaseAPI_StartLoadData) == 0x000001, "Wrong alignment on EndDataBaseAPI_StartLoadData");
static_assert(sizeof(EndDataBaseAPI_StartLoadData) == 0x000001, "Wrong size on EndDataBaseAPI_StartLoadData");
static_assert(offsetof(EndDataBaseAPI_StartLoadData, isCarryOverPlayerParameter) == 0x000000, "Member 'EndDataBaseAPI_StartLoadData::isCarryOverPlayerParameter' has a wrong offset!");

// Function EndGame.EndDataBaseAPI.StartResetBackUpAutoSave
// 0x001C (0x001C - 0x0000)
struct EndDataBaseAPI_StartResetBackUpAutoSave final
{
public:
	bool                                          override_position;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                pos;                                               // 0x0004(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               rot;                                               // 0x0010(0x000C)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndDataBaseAPI_StartResetBackUpAutoSave) == 0x000004, "Wrong alignment on EndDataBaseAPI_StartResetBackUpAutoSave");
static_assert(sizeof(EndDataBaseAPI_StartResetBackUpAutoSave) == 0x00001C, "Wrong size on EndDataBaseAPI_StartResetBackUpAutoSave");
static_assert(offsetof(EndDataBaseAPI_StartResetBackUpAutoSave, override_position) == 0x000000, "Member 'EndDataBaseAPI_StartResetBackUpAutoSave::override_position' has a wrong offset!");
static_assert(offsetof(EndDataBaseAPI_StartResetBackUpAutoSave, pos) == 0x000004, "Member 'EndDataBaseAPI_StartResetBackUpAutoSave::pos' has a wrong offset!");
static_assert(offsetof(EndDataBaseAPI_StartResetBackUpAutoSave, rot) == 0x000010, "Member 'EndDataBaseAPI_StartResetBackUpAutoSave::rot' has a wrong offset!");

// Function EndGame.EndDataBaseAPI.StartSaveData
// 0x0002 (0x0002 - 0x0000)
struct EndDataBaseAPI_StartSaveData final
{
public:
	bool                                          ignorePreUpdateLocation;                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ignoreLocationSave;                                // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndDataBaseAPI_StartSaveData) == 0x000001, "Wrong alignment on EndDataBaseAPI_StartSaveData");
static_assert(sizeof(EndDataBaseAPI_StartSaveData) == 0x000002, "Wrong size on EndDataBaseAPI_StartSaveData");
static_assert(offsetof(EndDataBaseAPI_StartSaveData, ignorePreUpdateLocation) == 0x000000, "Member 'EndDataBaseAPI_StartSaveData::ignorePreUpdateLocation' has a wrong offset!");
static_assert(offsetof(EndDataBaseAPI_StartSaveData, ignoreLocationSave) == 0x000001, "Member 'EndDataBaseAPI_StartSaveData::ignoreLocationSave' has a wrong offset!");

// Function EndGame.EndDataBaseAPI.StartSnapSave
// 0x001C (0x001C - 0x0000)
struct EndDataBaseAPI_StartSnapSave final
{
public:
	bool                                          override_position;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                pos;                                               // 0x0004(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               rot;                                               // 0x0010(0x000C)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndDataBaseAPI_StartSnapSave) == 0x000004, "Wrong alignment on EndDataBaseAPI_StartSnapSave");
static_assert(sizeof(EndDataBaseAPI_StartSnapSave) == 0x00001C, "Wrong size on EndDataBaseAPI_StartSnapSave");
static_assert(offsetof(EndDataBaseAPI_StartSnapSave, override_position) == 0x000000, "Member 'EndDataBaseAPI_StartSnapSave::override_position' has a wrong offset!");
static_assert(offsetof(EndDataBaseAPI_StartSnapSave, pos) == 0x000004, "Member 'EndDataBaseAPI_StartSnapSave::pos' has a wrong offset!");
static_assert(offsetof(EndDataBaseAPI_StartSnapSave, rot) == 0x000010, "Member 'EndDataBaseAPI_StartSnapSave::rot' has a wrong offset!");

// Function EndGame.EndDataBaseAPI.WaitIOSaveLoadData
// 0x0020 (0x0020 - 0x0000)
struct EndDataBaseAPI_WaitIOSaveLoadData final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndDataBaseAPI_WaitIOSaveLoadData) == 0x000008, "Wrong alignment on EndDataBaseAPI_WaitIOSaveLoadData");
static_assert(sizeof(EndDataBaseAPI_WaitIOSaveLoadData) == 0x000020, "Wrong size on EndDataBaseAPI_WaitIOSaveLoadData");
static_assert(offsetof(EndDataBaseAPI_WaitIOSaveLoadData, WorldContextObject) == 0x000000, "Member 'EndDataBaseAPI_WaitIOSaveLoadData::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EndDataBaseAPI_WaitIOSaveLoadData, LatentInfo) == 0x000008, "Member 'EndDataBaseAPI_WaitIOSaveLoadData::LatentInfo' has a wrong offset!");

// Function EndGame.EndPlayBlendSpaceActionActorInterface.OnGetCurrentBlendSpaceInput
// 0x0004 (0x0004 - 0x0000)
struct EndPlayBlendSpaceActionActorInterface_OnGetCurrentBlendSpaceInput final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndPlayBlendSpaceActionActorInterface_OnGetCurrentBlendSpaceInput) == 0x000004, "Wrong alignment on EndPlayBlendSpaceActionActorInterface_OnGetCurrentBlendSpaceInput");
static_assert(sizeof(EndPlayBlendSpaceActionActorInterface_OnGetCurrentBlendSpaceInput) == 0x000004, "Wrong size on EndPlayBlendSpaceActionActorInterface_OnGetCurrentBlendSpaceInput");
static_assert(offsetof(EndPlayBlendSpaceActionActorInterface_OnGetCurrentBlendSpaceInput, ReturnValue) == 0x000000, "Member 'EndPlayBlendSpaceActionActorInterface_OnGetCurrentBlendSpaceInput::ReturnValue' has a wrong offset!");

// Function EndGame.FA0122_AnimInstance.RequestArmHeightRate
// 0x0004 (0x0004 - 0x0000)
struct FA0122_AnimInstance_RequestArmHeightRate final
{
public:
	float                                         Rate;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FA0122_AnimInstance_RequestArmHeightRate) == 0x000004, "Wrong alignment on FA0122_AnimInstance_RequestArmHeightRate");
static_assert(sizeof(FA0122_AnimInstance_RequestArmHeightRate) == 0x000004, "Wrong size on FA0122_AnimInstance_RequestArmHeightRate");
static_assert(offsetof(FA0122_AnimInstance_RequestArmHeightRate, Rate) == 0x000000, "Member 'FA0122_AnimInstance_RequestArmHeightRate::Rate' has a wrong offset!");

// Function EndGame.FA0122_AnimInstance.RequestBasementAngle
// 0x0004 (0x0004 - 0x0000)
struct FA0122_AnimInstance_RequestBasementAngle final
{
public:
	float                                         Angle;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FA0122_AnimInstance_RequestBasementAngle) == 0x000004, "Wrong alignment on FA0122_AnimInstance_RequestBasementAngle");
static_assert(sizeof(FA0122_AnimInstance_RequestBasementAngle) == 0x000004, "Wrong size on FA0122_AnimInstance_RequestBasementAngle");
static_assert(offsetof(FA0122_AnimInstance_RequestBasementAngle, Angle) == 0x000000, "Member 'FA0122_AnimInstance_RequestBasementAngle::Angle' has a wrong offset!");

// Function EndGame.FA0122_AnimInstance.GetArmHeightRateFromHeight
// 0x0008 (0x0008 - 0x0000)
struct FA0122_AnimInstance_GetArmHeightRateFromHeight final
{
public:
	float                                         Height;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FA0122_AnimInstance_GetArmHeightRateFromHeight) == 0x000004, "Wrong alignment on FA0122_AnimInstance_GetArmHeightRateFromHeight");
static_assert(sizeof(FA0122_AnimInstance_GetArmHeightRateFromHeight) == 0x000008, "Wrong size on FA0122_AnimInstance_GetArmHeightRateFromHeight");
static_assert(offsetof(FA0122_AnimInstance_GetArmHeightRateFromHeight, Height) == 0x000000, "Member 'FA0122_AnimInstance_GetArmHeightRateFromHeight::Height' has a wrong offset!");
static_assert(offsetof(FA0122_AnimInstance_GetArmHeightRateFromHeight, ReturnValue) == 0x000004, "Member 'FA0122_AnimInstance_GetArmHeightRateFromHeight::ReturnValue' has a wrong offset!");

// Function EndGame.FA0122_AnimInstance.GetCurrentArmHeightRate
// 0x0004 (0x0004 - 0x0000)
struct FA0122_AnimInstance_GetCurrentArmHeightRate final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FA0122_AnimInstance_GetCurrentArmHeightRate) == 0x000004, "Wrong alignment on FA0122_AnimInstance_GetCurrentArmHeightRate");
static_assert(sizeof(FA0122_AnimInstance_GetCurrentArmHeightRate) == 0x000004, "Wrong size on FA0122_AnimInstance_GetCurrentArmHeightRate");
static_assert(offsetof(FA0122_AnimInstance_GetCurrentArmHeightRate, ReturnValue) == 0x000000, "Member 'FA0122_AnimInstance_GetCurrentArmHeightRate::ReturnValue' has a wrong offset!");

// Function EndGame.FA0122_AnimInstance.GetCurrentBasementAngle
// 0x0004 (0x0004 - 0x0000)
struct FA0122_AnimInstance_GetCurrentBasementAngle final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FA0122_AnimInstance_GetCurrentBasementAngle) == 0x000004, "Wrong alignment on FA0122_AnimInstance_GetCurrentBasementAngle");
static_assert(sizeof(FA0122_AnimInstance_GetCurrentBasementAngle) == 0x000004, "Wrong size on FA0122_AnimInstance_GetCurrentBasementAngle");
static_assert(offsetof(FA0122_AnimInstance_GetCurrentBasementAngle, ReturnValue) == 0x000000, "Member 'FA0122_AnimInstance_GetCurrentBasementAngle::ReturnValue' has a wrong offset!");

// Function EndGame.FA0122_AnimInstance.GetMaxArmHeight
// 0x0004 (0x0004 - 0x0000)
struct FA0122_AnimInstance_GetMaxArmHeight final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FA0122_AnimInstance_GetMaxArmHeight) == 0x000004, "Wrong alignment on FA0122_AnimInstance_GetMaxArmHeight");
static_assert(sizeof(FA0122_AnimInstance_GetMaxArmHeight) == 0x000004, "Wrong size on FA0122_AnimInstance_GetMaxArmHeight");
static_assert(offsetof(FA0122_AnimInstance_GetMaxArmHeight, ReturnValue) == 0x000000, "Member 'FA0122_AnimInstance_GetMaxArmHeight::ReturnValue' has a wrong offset!");

// Function EndGame.FA0122_AnimInstance.GetMinArmHeight
// 0x0004 (0x0004 - 0x0000)
struct FA0122_AnimInstance_GetMinArmHeight final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FA0122_AnimInstance_GetMinArmHeight) == 0x000004, "Wrong alignment on FA0122_AnimInstance_GetMinArmHeight");
static_assert(sizeof(FA0122_AnimInstance_GetMinArmHeight) == 0x000004, "Wrong size on FA0122_AnimInstance_GetMinArmHeight");
static_assert(offsetof(FA0122_AnimInstance_GetMinArmHeight, ReturnValue) == 0x000000, "Member 'FA0122_AnimInstance_GetMinArmHeight::ReturnValue' has a wrong offset!");

// Function EndGame.EndSortWindow.OnSortListPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndSortWindow_OnSortListPressedItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndSortWindow_OnSortListPressedItem) == 0x000004, "Wrong alignment on EndSortWindow_OnSortListPressedItem");
static_assert(sizeof(EndSortWindow_OnSortListPressedItem) == 0x000004, "Wrong size on EndSortWindow_OnSortListPressedItem");
static_assert(offsetof(EndSortWindow_OnSortListPressedItem, CellIndex) == 0x000000, "Member 'EndSortWindow_OnSortListPressedItem::CellIndex' has a wrong offset!");

// Function EndGame.EndSortWindow.OnSortListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndSortWindow_OnSortListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndSortWindow_OnSortListSetupItem) == 0x000008, "Wrong alignment on EndSortWindow_OnSortListSetupItem");
static_assert(sizeof(EndSortWindow_OnSortListSetupItem) == 0x000010, "Wrong size on EndSortWindow_OnSortListSetupItem");
static_assert(offsetof(EndSortWindow_OnSortListSetupItem, ItemWidget) == 0x000000, "Member 'EndSortWindow_OnSortListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndSortWindow_OnSortListSetupItem, CellIndex) == 0x000008, "Member 'EndSortWindow_OnSortListSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndMainMateriaListBoxWindow.OnCommandMateriaCellSetup
// 0x0010 (0x0010 - 0x0000)
struct EndMainMateriaListBoxWindow_OnCommandMateriaCellSetup final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMainMateriaListBoxWindow_OnCommandMateriaCellSetup) == 0x000008, "Wrong alignment on EndMainMateriaListBoxWindow_OnCommandMateriaCellSetup");
static_assert(sizeof(EndMainMateriaListBoxWindow_OnCommandMateriaCellSetup) == 0x000010, "Wrong size on EndMainMateriaListBoxWindow_OnCommandMateriaCellSetup");
static_assert(offsetof(EndMainMateriaListBoxWindow_OnCommandMateriaCellSetup, ItemWidget) == 0x000000, "Member 'EndMainMateriaListBoxWindow_OnCommandMateriaCellSetup::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndMainMateriaListBoxWindow_OnCommandMateriaCellSetup, ItemIndex) == 0x000008, "Member 'EndMainMateriaListBoxWindow_OnCommandMateriaCellSetup::ItemIndex' has a wrong offset!");

// Function EndGame.EndMainMateriaListBoxWindow.OnMateriaCellPressed
// 0x0004 (0x0004 - 0x0000)
struct EndMainMateriaListBoxWindow_OnMateriaCellPressed final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainMateriaListBoxWindow_OnMateriaCellPressed) == 0x000004, "Wrong alignment on EndMainMateriaListBoxWindow_OnMateriaCellPressed");
static_assert(sizeof(EndMainMateriaListBoxWindow_OnMateriaCellPressed) == 0x000004, "Wrong size on EndMainMateriaListBoxWindow_OnMateriaCellPressed");
static_assert(offsetof(EndMainMateriaListBoxWindow_OnMateriaCellPressed, CellIndex) == 0x000000, "Member 'EndMainMateriaListBoxWindow_OnMateriaCellPressed::CellIndex' has a wrong offset!");

// Function EndGame.EndMainMateriaListBoxWindow.OnMateriaCellSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndMainMateriaListBoxWindow_OnMateriaCellSelectedIndexChanged final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainMateriaListBoxWindow_OnMateriaCellSelectedIndexChanged) == 0x000004, "Wrong alignment on EndMainMateriaListBoxWindow_OnMateriaCellSelectedIndexChanged");
static_assert(sizeof(EndMainMateriaListBoxWindow_OnMateriaCellSelectedIndexChanged) == 0x000004, "Wrong size on EndMainMateriaListBoxWindow_OnMateriaCellSelectedIndexChanged");
static_assert(offsetof(EndMainMateriaListBoxWindow_OnMateriaCellSelectedIndexChanged, CellIndex) == 0x000000, "Member 'EndMainMateriaListBoxWindow_OnMateriaCellSelectedIndexChanged::CellIndex' has a wrong offset!");

// Function EndGame.EndMainMateriaListBoxWindow.OnSetupItemForShop
// 0x0010 (0x0010 - 0x0000)
struct EndMainMateriaListBoxWindow_OnSetupItemForShop final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMainMateriaListBoxWindow_OnSetupItemForShop) == 0x000008, "Wrong alignment on EndMainMateriaListBoxWindow_OnSetupItemForShop");
static_assert(sizeof(EndMainMateriaListBoxWindow_OnSetupItemForShop) == 0x000010, "Wrong size on EndMainMateriaListBoxWindow_OnSetupItemForShop");
static_assert(offsetof(EndMainMateriaListBoxWindow_OnSetupItemForShop, ItemWidget) == 0x000000, "Member 'EndMainMateriaListBoxWindow_OnSetupItemForShop::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndMainMateriaListBoxWindow_OnSetupItemForShop, ItemIndex) == 0x000008, "Member 'EndMainMateriaListBoxWindow_OnSetupItemForShop::ItemIndex' has a wrong offset!");

// Function EndGame.EndMainTopMenu.OnLeftMenuPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndMainTopMenu_OnLeftMenuPressedItem final
{
public:
	int32                                         ItemIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainTopMenu_OnLeftMenuPressedItem) == 0x000004, "Wrong alignment on EndMainTopMenu_OnLeftMenuPressedItem");
static_assert(sizeof(EndMainTopMenu_OnLeftMenuPressedItem) == 0x000004, "Wrong size on EndMainTopMenu_OnLeftMenuPressedItem");
static_assert(offsetof(EndMainTopMenu_OnLeftMenuPressedItem, ItemIndex) == 0x000000, "Member 'EndMainTopMenu_OnLeftMenuPressedItem::ItemIndex' has a wrong offset!");

// Function EndGame.EndMainTopMenu.OnLeftMenuSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndMainTopMenu_OnLeftMenuSelectedIndexChanged final
{
public:
	int32                                         ItemIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainTopMenu_OnLeftMenuSelectedIndexChanged) == 0x000004, "Wrong alignment on EndMainTopMenu_OnLeftMenuSelectedIndexChanged");
static_assert(sizeof(EndMainTopMenu_OnLeftMenuSelectedIndexChanged) == 0x000004, "Wrong size on EndMainTopMenu_OnLeftMenuSelectedIndexChanged");
static_assert(offsetof(EndMainTopMenu_OnLeftMenuSelectedIndexChanged, ItemIndex) == 0x000000, "Member 'EndMainTopMenu_OnLeftMenuSelectedIndexChanged::ItemIndex' has a wrong offset!");

// Function EndGame.EndMainTopMenu.OnLeftMenuSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndMainTopMenu_OnLeftMenuSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMainTopMenu_OnLeftMenuSetupItem) == 0x000008, "Wrong alignment on EndMainTopMenu_OnLeftMenuSetupItem");
static_assert(sizeof(EndMainTopMenu_OnLeftMenuSetupItem) == 0x000010, "Wrong size on EndMainTopMenu_OnLeftMenuSetupItem");
static_assert(offsetof(EndMainTopMenu_OnLeftMenuSetupItem, ItemWidget) == 0x000000, "Member 'EndMainTopMenu_OnLeftMenuSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndMainTopMenu_OnLeftMenuSetupItem, ItemIndex) == 0x000008, "Member 'EndMainTopMenu_OnLeftMenuSetupItem::ItemIndex' has a wrong offset!");

// Function EndGame.EndMainTopMenu.OnPlaySlotAnimation
// 0x0001 (0x0001 - 0x0000)
struct EndMainTopMenu_OnPlaySlotAnimation final
{
public:
	bool                                          IsShow;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainTopMenu_OnPlaySlotAnimation) == 0x000001, "Wrong alignment on EndMainTopMenu_OnPlaySlotAnimation");
static_assert(sizeof(EndMainTopMenu_OnPlaySlotAnimation) == 0x000001, "Wrong size on EndMainTopMenu_OnPlaySlotAnimation");
static_assert(offsetof(EndMainTopMenu_OnPlaySlotAnimation, IsShow) == 0x000000, "Member 'EndMainTopMenu_OnPlaySlotAnimation::IsShow' has a wrong offset!");

// Function EndGame.EndMainTopMenu.SetupPartySlot
// 0x0008 (0x0008 - 0x0000)
struct EndMainTopMenu_SetupPartySlot final
{
public:
	int32                                         SlotIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMainTopMenu_SetupPartySlot) == 0x000004, "Wrong alignment on EndMainTopMenu_SetupPartySlot");
static_assert(sizeof(EndMainTopMenu_SetupPartySlot) == 0x000008, "Wrong size on EndMainTopMenu_SetupPartySlot");
static_assert(offsetof(EndMainTopMenu_SetupPartySlot, SlotIndex) == 0x000000, "Member 'EndMainTopMenu_SetupPartySlot::SlotIndex' has a wrong offset!");
static_assert(offsetof(EndMainTopMenu_SetupPartySlot, ReturnValue) == 0x000004, "Member 'EndMainTopMenu_SetupPartySlot::ReturnValue' has a wrong offset!");

// Function EndGame.EndMessageLogs.AddMessage
// 0x0010 (0x0010 - 0x0000)
struct EndMessageLogs_AddMessage final
{
public:
	class FString                                 Message;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMessageLogs_AddMessage) == 0x000008, "Wrong alignment on EndMessageLogs_AddMessage");
static_assert(sizeof(EndMessageLogs_AddMessage) == 0x000010, "Wrong size on EndMessageLogs_AddMessage");
static_assert(offsetof(EndMessageLogs_AddMessage, Message) == 0x000000, "Member 'EndMessageLogs_AddMessage::Message' has a wrong offset!");

// Function EndGame.EndMainItemMenu.OnItemMenuIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndMainItemMenu_OnItemMenuIndexChanged final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainItemMenu_OnItemMenuIndexChanged) == 0x000004, "Wrong alignment on EndMainItemMenu_OnItemMenuIndexChanged");
static_assert(sizeof(EndMainItemMenu_OnItemMenuIndexChanged) == 0x000004, "Wrong size on EndMainItemMenu_OnItemMenuIndexChanged");
static_assert(offsetof(EndMainItemMenu_OnItemMenuIndexChanged, CellIndex) == 0x000000, "Member 'EndMainItemMenu_OnItemMenuIndexChanged::CellIndex' has a wrong offset!");

// Function EndGame.EndMainItemMenu.OnItemMenuMeasureItem
// 0x000C (0x000C - 0x0000)
struct EndMainItemMenu_OnItemMenuMeasureItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainItemMenu_OnItemMenuMeasureItem) == 0x000004, "Wrong alignment on EndMainItemMenu_OnItemMenuMeasureItem");
static_assert(sizeof(EndMainItemMenu_OnItemMenuMeasureItem) == 0x00000C, "Wrong size on EndMainItemMenu_OnItemMenuMeasureItem");
static_assert(offsetof(EndMainItemMenu_OnItemMenuMeasureItem, CellIndex) == 0x000000, "Member 'EndMainItemMenu_OnItemMenuMeasureItem::CellIndex' has a wrong offset!");
static_assert(offsetof(EndMainItemMenu_OnItemMenuMeasureItem, ReturnValue) == 0x000004, "Member 'EndMainItemMenu_OnItemMenuMeasureItem::ReturnValue' has a wrong offset!");

// Function EndGame.EndMainItemMenu.OnItemMenuPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndMainItemMenu_OnItemMenuPressedItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainItemMenu_OnItemMenuPressedItem) == 0x000004, "Wrong alignment on EndMainItemMenu_OnItemMenuPressedItem");
static_assert(sizeof(EndMainItemMenu_OnItemMenuPressedItem) == 0x000004, "Wrong size on EndMainItemMenu_OnItemMenuPressedItem");
static_assert(offsetof(EndMainItemMenu_OnItemMenuPressedItem, CellIndex) == 0x000000, "Member 'EndMainItemMenu_OnItemMenuPressedItem::CellIndex' has a wrong offset!");

// Function EndGame.EndMainItemMenu.OnItemMenuSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndMainItemMenu_OnItemMenuSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMainItemMenu_OnItemMenuSetupItem) == 0x000008, "Wrong alignment on EndMainItemMenu_OnItemMenuSetupItem");
static_assert(sizeof(EndMainItemMenu_OnItemMenuSetupItem) == 0x000010, "Wrong size on EndMainItemMenu_OnItemMenuSetupItem");
static_assert(offsetof(EndMainItemMenu_OnItemMenuSetupItem, ItemWidget) == 0x000000, "Member 'EndMainItemMenu_OnItemMenuSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndMainItemMenu_OnItemMenuSetupItem, CellIndex) == 0x000008, "Member 'EndMainItemMenu_OnItemMenuSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndMainItemMenu.OnLeftMenuIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndMainItemMenu_OnLeftMenuIndexChanged final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainItemMenu_OnLeftMenuIndexChanged) == 0x000004, "Wrong alignment on EndMainItemMenu_OnLeftMenuIndexChanged");
static_assert(sizeof(EndMainItemMenu_OnLeftMenuIndexChanged) == 0x000004, "Wrong size on EndMainItemMenu_OnLeftMenuIndexChanged");
static_assert(offsetof(EndMainItemMenu_OnLeftMenuIndexChanged, CellIndex) == 0x000000, "Member 'EndMainItemMenu_OnLeftMenuIndexChanged::CellIndex' has a wrong offset!");

// Function EndGame.EndMainItemMenu.OnLeftMenuPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndMainItemMenu_OnLeftMenuPressedItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainItemMenu_OnLeftMenuPressedItem) == 0x000004, "Wrong alignment on EndMainItemMenu_OnLeftMenuPressedItem");
static_assert(sizeof(EndMainItemMenu_OnLeftMenuPressedItem) == 0x000004, "Wrong size on EndMainItemMenu_OnLeftMenuPressedItem");
static_assert(offsetof(EndMainItemMenu_OnLeftMenuPressedItem, CellIndex) == 0x000000, "Member 'EndMainItemMenu_OnLeftMenuPressedItem::CellIndex' has a wrong offset!");

// Function EndGame.EndMainItemMenu.OnLeftMenuSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndMainItemMenu_OnLeftMenuSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMainItemMenu_OnLeftMenuSetupItem) == 0x000008, "Wrong alignment on EndMainItemMenu_OnLeftMenuSetupItem");
static_assert(sizeof(EndMainItemMenu_OnLeftMenuSetupItem) == 0x000010, "Wrong size on EndMainItemMenu_OnLeftMenuSetupItem");
static_assert(offsetof(EndMainItemMenu_OnLeftMenuSetupItem, ItemWidget) == 0x000000, "Member 'EndMainItemMenu_OnLeftMenuSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndMainItemMenu_OnLeftMenuSetupItem, CellIndex) == 0x000008, "Member 'EndMainItemMenu_OnLeftMenuSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndMainItemMenu.OnMemberMenuPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndMainItemMenu_OnMemberMenuPressedItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainItemMenu_OnMemberMenuPressedItem) == 0x000004, "Wrong alignment on EndMainItemMenu_OnMemberMenuPressedItem");
static_assert(sizeof(EndMainItemMenu_OnMemberMenuPressedItem) == 0x000004, "Wrong size on EndMainItemMenu_OnMemberMenuPressedItem");
static_assert(offsetof(EndMainItemMenu_OnMemberMenuPressedItem, CellIndex) == 0x000000, "Member 'EndMainItemMenu_OnMemberMenuPressedItem::CellIndex' has a wrong offset!");

// Function EndGame.EndMainItemMenu.OnMemberMenuSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndMainItemMenu_OnMemberMenuSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMainItemMenu_OnMemberMenuSetupItem) == 0x000008, "Wrong alignment on EndMainItemMenu_OnMemberMenuSetupItem");
static_assert(sizeof(EndMainItemMenu_OnMemberMenuSetupItem) == 0x000010, "Wrong size on EndMainItemMenu_OnMemberMenuSetupItem");
static_assert(offsetof(EndMainItemMenu_OnMemberMenuSetupItem, ItemWidget) == 0x000000, "Member 'EndMainItemMenu_OnMemberMenuSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndMainItemMenu_OnMemberMenuSetupItem, CellIndex) == 0x000008, "Member 'EndMainItemMenu_OnMemberMenuSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndDebugAPI.AddAction
// 0x0008 (0x0008 - 0x0000)
struct EndDebugAPI_AddAction final
{
public:
	class FName                                   Action;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndDebugAPI_AddAction) == 0x000004, "Wrong alignment on EndDebugAPI_AddAction");
static_assert(sizeof(EndDebugAPI_AddAction) == 0x000008, "Wrong size on EndDebugAPI_AddAction");
static_assert(offsetof(EndDebugAPI_AddAction, Action) == 0x000000, "Member 'EndDebugAPI_AddAction::Action' has a wrong offset!");

// Function EndGame.EndDebugAPI.AddSelectHistory
// 0x0010 (0x0010 - 0x0000)
struct EndDebugAPI_AddSelectHistory final
{
public:
	class FString                                 str;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndDebugAPI_AddSelectHistory) == 0x000008, "Wrong alignment on EndDebugAPI_AddSelectHistory");
static_assert(sizeof(EndDebugAPI_AddSelectHistory) == 0x000010, "Wrong size on EndDebugAPI_AddSelectHistory");
static_assert(offsetof(EndDebugAPI_AddSelectHistory, str) == 0x000000, "Member 'EndDebugAPI_AddSelectHistory::str' has a wrong offset!");

// Function EndGame.EndDebugAPI.GetCutSceneEventID
// 0x0018 (0x0018 - 0x0000)
struct EndDebugAPI_GetCutSceneEventID final
{
public:
	class FName                                   Action;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndDebugAPI_GetCutSceneEventID) == 0x000008, "Wrong alignment on EndDebugAPI_GetCutSceneEventID");
static_assert(sizeof(EndDebugAPI_GetCutSceneEventID) == 0x000018, "Wrong size on EndDebugAPI_GetCutSceneEventID");
static_assert(offsetof(EndDebugAPI_GetCutSceneEventID, Action) == 0x000000, "Member 'EndDebugAPI_GetCutSceneEventID::Action' has a wrong offset!");
static_assert(offsetof(EndDebugAPI_GetCutSceneEventID, ReturnValue) == 0x000008, "Member 'EndDebugAPI_GetCutSceneEventID::ReturnValue' has a wrong offset!");

// Function EndGame.EndDebugAPI.GetDebugState
// 0x0028 (0x0028 - 0x0000)
struct EndDebugAPI_GetDebugState final
{
public:
	class FName                                   TableID;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 defaultState;                                      // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndDebugAPI_GetDebugState) == 0x000008, "Wrong alignment on EndDebugAPI_GetDebugState");
static_assert(sizeof(EndDebugAPI_GetDebugState) == 0x000028, "Wrong size on EndDebugAPI_GetDebugState");
static_assert(offsetof(EndDebugAPI_GetDebugState, TableID) == 0x000000, "Member 'EndDebugAPI_GetDebugState::TableID' has a wrong offset!");
static_assert(offsetof(EndDebugAPI_GetDebugState, defaultState) == 0x000008, "Member 'EndDebugAPI_GetDebugState::defaultState' has a wrong offset!");
static_assert(offsetof(EndDebugAPI_GetDebugState, ReturnValue) == 0x000018, "Member 'EndDebugAPI_GetDebugState::ReturnValue' has a wrong offset!");

// Function EndGame.EndDebugAPI.GetDebugStateBool
// 0x000C (0x000C - 0x0000)
struct EndDebugAPI_GetDebugStateBool final
{
public:
	class FName                                   TableID;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          defaultBool;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndDebugAPI_GetDebugStateBool) == 0x000004, "Wrong alignment on EndDebugAPI_GetDebugStateBool");
static_assert(sizeof(EndDebugAPI_GetDebugStateBool) == 0x00000C, "Wrong size on EndDebugAPI_GetDebugStateBool");
static_assert(offsetof(EndDebugAPI_GetDebugStateBool, TableID) == 0x000000, "Member 'EndDebugAPI_GetDebugStateBool::TableID' has a wrong offset!");
static_assert(offsetof(EndDebugAPI_GetDebugStateBool, defaultBool) == 0x000008, "Member 'EndDebugAPI_GetDebugStateBool::defaultBool' has a wrong offset!");
static_assert(offsetof(EndDebugAPI_GetDebugStateBool, ReturnValue) == 0x000009, "Member 'EndDebugAPI_GetDebugStateBool::ReturnValue' has a wrong offset!");

// Function EndGame.EndDebugAPI.IsCompletedTrace
// 0x0001 (0x0001 - 0x0000)
struct EndDebugAPI_IsCompletedTrace final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndDebugAPI_IsCompletedTrace) == 0x000001, "Wrong alignment on EndDebugAPI_IsCompletedTrace");
static_assert(sizeof(EndDebugAPI_IsCompletedTrace) == 0x000001, "Wrong size on EndDebugAPI_IsCompletedTrace");
static_assert(offsetof(EndDebugAPI_IsCompletedTrace, ReturnValue) == 0x000000, "Member 'EndDebugAPI_IsCompletedTrace::ReturnValue' has a wrong offset!");

// Function EndGame.EndDebugAPI.SetControlRotation
// 0x000C (0x000C - 0x0000)
struct EndDebugAPI_SetControlRotation final
{
public:
	float                                         Pitch;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Yaw;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Roll;                                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndDebugAPI_SetControlRotation) == 0x000004, "Wrong alignment on EndDebugAPI_SetControlRotation");
static_assert(sizeof(EndDebugAPI_SetControlRotation) == 0x00000C, "Wrong size on EndDebugAPI_SetControlRotation");
static_assert(offsetof(EndDebugAPI_SetControlRotation, Pitch) == 0x000000, "Member 'EndDebugAPI_SetControlRotation::Pitch' has a wrong offset!");
static_assert(offsetof(EndDebugAPI_SetControlRotation, Yaw) == 0x000004, "Member 'EndDebugAPI_SetControlRotation::Yaw' has a wrong offset!");
static_assert(offsetof(EndDebugAPI_SetControlRotation, Roll) == 0x000008, "Member 'EndDebugAPI_SetControlRotation::Roll' has a wrong offset!");

// Function EndGame.EndDebugAPI.UpdateSelectHistory
// 0x0028 (0x0028 - 0x0000)
struct EndDebugAPI_UpdateSelectHistory final
{
public:
	TArray<class FString>                         list;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          changeOrder;                                       // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndDebugAPI_UpdateSelectHistory) == 0x000008, "Wrong alignment on EndDebugAPI_UpdateSelectHistory");
static_assert(sizeof(EndDebugAPI_UpdateSelectHistory) == 0x000028, "Wrong size on EndDebugAPI_UpdateSelectHistory");
static_assert(offsetof(EndDebugAPI_UpdateSelectHistory, list) == 0x000000, "Member 'EndDebugAPI_UpdateSelectHistory::list' has a wrong offset!");
static_assert(offsetof(EndDebugAPI_UpdateSelectHistory, changeOrder) == 0x000010, "Member 'EndDebugAPI_UpdateSelectHistory::changeOrder' has a wrong offset!");
static_assert(offsetof(EndDebugAPI_UpdateSelectHistory, ReturnValue) == 0x000018, "Member 'EndDebugAPI_UpdateSelectHistory::ReturnValue' has a wrong offset!");

// Function EndGame.EndEnvQueryComponent.GetActor
// 0x0010 (0x0010 - 0x0000)
struct EndEnvQueryComponent_GetActor final
{
public:
	EEqsType                                      Index_0;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ID;                                                // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndEnvQueryComponent_GetActor) == 0x000008, "Wrong alignment on EndEnvQueryComponent_GetActor");
static_assert(sizeof(EndEnvQueryComponent_GetActor) == 0x000010, "Wrong size on EndEnvQueryComponent_GetActor");
static_assert(offsetof(EndEnvQueryComponent_GetActor, Index_0) == 0x000000, "Member 'EndEnvQueryComponent_GetActor::Index_0' has a wrong offset!");
static_assert(offsetof(EndEnvQueryComponent_GetActor, ID) == 0x000004, "Member 'EndEnvQueryComponent_GetActor::ID' has a wrong offset!");
static_assert(offsetof(EndEnvQueryComponent_GetActor, ReturnValue) == 0x000008, "Member 'EndEnvQueryComponent_GetActor::ReturnValue' has a wrong offset!");

// Function EndGame.EndEnvQueryComponent.GetLocation
// 0x0014 (0x0014 - 0x0000)
struct EndEnvQueryComponent_GetLocation final
{
public:
	EEqsType                                      Index_0;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ID;                                                // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0008(0x000C)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndEnvQueryComponent_GetLocation) == 0x000004, "Wrong alignment on EndEnvQueryComponent_GetLocation");
static_assert(sizeof(EndEnvQueryComponent_GetLocation) == 0x000014, "Wrong size on EndEnvQueryComponent_GetLocation");
static_assert(offsetof(EndEnvQueryComponent_GetLocation, Index_0) == 0x000000, "Member 'EndEnvQueryComponent_GetLocation::Index_0' has a wrong offset!");
static_assert(offsetof(EndEnvQueryComponent_GetLocation, ID) == 0x000004, "Member 'EndEnvQueryComponent_GetLocation::ID' has a wrong offset!");
static_assert(offsetof(EndEnvQueryComponent_GetLocation, ReturnValue) == 0x000008, "Member 'EndEnvQueryComponent_GetLocation::ReturnValue' has a wrong offset!");

// Function EndGame.EndEnvQueryComponent.GetScore
// 0x000C (0x000C - 0x0000)
struct EndEnvQueryComponent_GetScore final
{
public:
	EEqsType                                      Index_0;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ID;                                                // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndEnvQueryComponent_GetScore) == 0x000004, "Wrong alignment on EndEnvQueryComponent_GetScore");
static_assert(sizeof(EndEnvQueryComponent_GetScore) == 0x00000C, "Wrong size on EndEnvQueryComponent_GetScore");
static_assert(offsetof(EndEnvQueryComponent_GetScore, Index_0) == 0x000000, "Member 'EndEnvQueryComponent_GetScore::Index_0' has a wrong offset!");
static_assert(offsetof(EndEnvQueryComponent_GetScore, ID) == 0x000004, "Member 'EndEnvQueryComponent_GetScore::ID' has a wrong offset!");
static_assert(offsetof(EndEnvQueryComponent_GetScore, ReturnValue) == 0x000008, "Member 'EndEnvQueryComponent_GetScore::ReturnValue' has a wrong offset!");

// Function EndGame.EndEnvQueryComponent.IsQueryVisible
// 0x0002 (0x0002 - 0x0000)
struct EndEnvQueryComponent_IsQueryVisible final
{
public:
	EEqsType                                      Index_0;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndEnvQueryComponent_IsQueryVisible) == 0x000001, "Wrong alignment on EndEnvQueryComponent_IsQueryVisible");
static_assert(sizeof(EndEnvQueryComponent_IsQueryVisible) == 0x000002, "Wrong size on EndEnvQueryComponent_IsQueryVisible");
static_assert(offsetof(EndEnvQueryComponent_IsQueryVisible, Index_0) == 0x000000, "Member 'EndEnvQueryComponent_IsQueryVisible::Index_0' has a wrong offset!");
static_assert(offsetof(EndEnvQueryComponent_IsQueryVisible, ReturnValue) == 0x000001, "Member 'EndEnvQueryComponent_IsQueryVisible::ReturnValue' has a wrong offset!");

// Function EndGame.EndEnvQueryComponent.RunQuery
// 0x0004 (0x0004 - 0x0000)
struct EndEnvQueryComponent_RunQuery final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndEnvQueryComponent_RunQuery) == 0x000004, "Wrong alignment on EndEnvQueryComponent_RunQuery");
static_assert(sizeof(EndEnvQueryComponent_RunQuery) == 0x000004, "Wrong size on EndEnvQueryComponent_RunQuery");
static_assert(offsetof(EndEnvQueryComponent_RunQuery, DeltaTime) == 0x000000, "Member 'EndEnvQueryComponent_RunQuery::DeltaTime' has a wrong offset!");

// Function EndGame.EndEnvQueryComponent.SetQuery
// 0x0010 (0x0010 - 0x0000)
struct EndEnvQueryComponent_SetQuery final
{
public:
	EEqsType                                      Index_0;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UEnvQuery*                              InQuery;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndEnvQueryComponent_SetQuery) == 0x000008, "Wrong alignment on EndEnvQueryComponent_SetQuery");
static_assert(sizeof(EndEnvQueryComponent_SetQuery) == 0x000010, "Wrong size on EndEnvQueryComponent_SetQuery");
static_assert(offsetof(EndEnvQueryComponent_SetQuery, Index_0) == 0x000000, "Member 'EndEnvQueryComponent_SetQuery::Index_0' has a wrong offset!");
static_assert(offsetof(EndEnvQueryComponent_SetQuery, InQuery) == 0x000008, "Member 'EndEnvQueryComponent_SetQuery::InQuery' has a wrong offset!");

// Function EndGame.EndEnvQueryComponent.SetQueryActive
// 0x0002 (0x0002 - 0x0000)
struct EndEnvQueryComponent_SetQueryActive final
{
public:
	EEqsType                                      Index_0;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Flag;                                              // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndEnvQueryComponent_SetQueryActive) == 0x000001, "Wrong alignment on EndEnvQueryComponent_SetQueryActive");
static_assert(sizeof(EndEnvQueryComponent_SetQueryActive) == 0x000002, "Wrong size on EndEnvQueryComponent_SetQueryActive");
static_assert(offsetof(EndEnvQueryComponent_SetQueryActive, Index_0) == 0x000000, "Member 'EndEnvQueryComponent_SetQueryActive::Index_0' has a wrong offset!");
static_assert(offsetof(EndEnvQueryComponent_SetQueryActive, Flag) == 0x000001, "Member 'EndEnvQueryComponent_SetQueryActive::Flag' has a wrong offset!");

// Function EndGame.EndEnvQueryComponent.SetQueryAllActive
// 0x0002 (0x0002 - 0x0000)
struct EndEnvQueryComponent_SetQueryAllActive final
{
public:
	EEqsType                                      Index_0;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Flag;                                              // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndEnvQueryComponent_SetQueryAllActive) == 0x000001, "Wrong alignment on EndEnvQueryComponent_SetQueryAllActive");
static_assert(sizeof(EndEnvQueryComponent_SetQueryAllActive) == 0x000002, "Wrong size on EndEnvQueryComponent_SetQueryAllActive");
static_assert(offsetof(EndEnvQueryComponent_SetQueryAllActive, Index_0) == 0x000000, "Member 'EndEnvQueryComponent_SetQueryAllActive::Index_0' has a wrong offset!");
static_assert(offsetof(EndEnvQueryComponent_SetQueryAllActive, Flag) == 0x000001, "Member 'EndEnvQueryComponent_SetQueryAllActive::Flag' has a wrong offset!");

// Function EndGame.EndMainWeaponUpgradeEquipMenu.OnCoreListSetupItemAerith
// 0x0010 (0x0010 - 0x0000)
struct EndMainWeaponUpgradeEquipMenu_OnCoreListSetupItemAerith final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMainWeaponUpgradeEquipMenu_OnCoreListSetupItemAerith) == 0x000008, "Wrong alignment on EndMainWeaponUpgradeEquipMenu_OnCoreListSetupItemAerith");
static_assert(sizeof(EndMainWeaponUpgradeEquipMenu_OnCoreListSetupItemAerith) == 0x000010, "Wrong size on EndMainWeaponUpgradeEquipMenu_OnCoreListSetupItemAerith");
static_assert(offsetof(EndMainWeaponUpgradeEquipMenu_OnCoreListSetupItemAerith, ItemWidget) == 0x000000, "Member 'EndMainWeaponUpgradeEquipMenu_OnCoreListSetupItemAerith::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndMainWeaponUpgradeEquipMenu_OnCoreListSetupItemAerith, CellIndex) == 0x000008, "Member 'EndMainWeaponUpgradeEquipMenu_OnCoreListSetupItemAerith::CellIndex' has a wrong offset!");

// Function EndGame.EndMainWeaponUpgradeEquipMenu.OnCoreListSetupItemBarret
// 0x0010 (0x0010 - 0x0000)
struct EndMainWeaponUpgradeEquipMenu_OnCoreListSetupItemBarret final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMainWeaponUpgradeEquipMenu_OnCoreListSetupItemBarret) == 0x000008, "Wrong alignment on EndMainWeaponUpgradeEquipMenu_OnCoreListSetupItemBarret");
static_assert(sizeof(EndMainWeaponUpgradeEquipMenu_OnCoreListSetupItemBarret) == 0x000010, "Wrong size on EndMainWeaponUpgradeEquipMenu_OnCoreListSetupItemBarret");
static_assert(offsetof(EndMainWeaponUpgradeEquipMenu_OnCoreListSetupItemBarret, ItemWidget) == 0x000000, "Member 'EndMainWeaponUpgradeEquipMenu_OnCoreListSetupItemBarret::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndMainWeaponUpgradeEquipMenu_OnCoreListSetupItemBarret, CellIndex) == 0x000008, "Member 'EndMainWeaponUpgradeEquipMenu_OnCoreListSetupItemBarret::CellIndex' has a wrong offset!");

// Function EndGame.EndMainWeaponUpgradeEquipMenu.OnCoreListSetupItemCloud
// 0x0010 (0x0010 - 0x0000)
struct EndMainWeaponUpgradeEquipMenu_OnCoreListSetupItemCloud final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMainWeaponUpgradeEquipMenu_OnCoreListSetupItemCloud) == 0x000008, "Wrong alignment on EndMainWeaponUpgradeEquipMenu_OnCoreListSetupItemCloud");
static_assert(sizeof(EndMainWeaponUpgradeEquipMenu_OnCoreListSetupItemCloud) == 0x000010, "Wrong size on EndMainWeaponUpgradeEquipMenu_OnCoreListSetupItemCloud");
static_assert(offsetof(EndMainWeaponUpgradeEquipMenu_OnCoreListSetupItemCloud, ItemWidget) == 0x000000, "Member 'EndMainWeaponUpgradeEquipMenu_OnCoreListSetupItemCloud::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndMainWeaponUpgradeEquipMenu_OnCoreListSetupItemCloud, CellIndex) == 0x000008, "Member 'EndMainWeaponUpgradeEquipMenu_OnCoreListSetupItemCloud::CellIndex' has a wrong offset!");

// Function EndGame.EndMainWeaponUpgradeEquipMenu.OnCoreListSetupItemSonon
// 0x0010 (0x0010 - 0x0000)
struct EndMainWeaponUpgradeEquipMenu_OnCoreListSetupItemSonon final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMainWeaponUpgradeEquipMenu_OnCoreListSetupItemSonon) == 0x000008, "Wrong alignment on EndMainWeaponUpgradeEquipMenu_OnCoreListSetupItemSonon");
static_assert(sizeof(EndMainWeaponUpgradeEquipMenu_OnCoreListSetupItemSonon) == 0x000010, "Wrong size on EndMainWeaponUpgradeEquipMenu_OnCoreListSetupItemSonon");
static_assert(offsetof(EndMainWeaponUpgradeEquipMenu_OnCoreListSetupItemSonon, ItemWidget) == 0x000000, "Member 'EndMainWeaponUpgradeEquipMenu_OnCoreListSetupItemSonon::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndMainWeaponUpgradeEquipMenu_OnCoreListSetupItemSonon, CellIndex) == 0x000008, "Member 'EndMainWeaponUpgradeEquipMenu_OnCoreListSetupItemSonon::CellIndex' has a wrong offset!");

// Function EndGame.EndMainWeaponUpgradeEquipMenu.OnCoreListSetupItemTifa
// 0x0010 (0x0010 - 0x0000)
struct EndMainWeaponUpgradeEquipMenu_OnCoreListSetupItemTifa final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMainWeaponUpgradeEquipMenu_OnCoreListSetupItemTifa) == 0x000008, "Wrong alignment on EndMainWeaponUpgradeEquipMenu_OnCoreListSetupItemTifa");
static_assert(sizeof(EndMainWeaponUpgradeEquipMenu_OnCoreListSetupItemTifa) == 0x000010, "Wrong size on EndMainWeaponUpgradeEquipMenu_OnCoreListSetupItemTifa");
static_assert(offsetof(EndMainWeaponUpgradeEquipMenu_OnCoreListSetupItemTifa, ItemWidget) == 0x000000, "Member 'EndMainWeaponUpgradeEquipMenu_OnCoreListSetupItemTifa::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndMainWeaponUpgradeEquipMenu_OnCoreListSetupItemTifa, CellIndex) == 0x000008, "Member 'EndMainWeaponUpgradeEquipMenu_OnCoreListSetupItemTifa::CellIndex' has a wrong offset!");

// Function EndGame.EndMainWeaponUpgradeEquipMenu.OnCoreListSetupItemYuffie
// 0x0010 (0x0010 - 0x0000)
struct EndMainWeaponUpgradeEquipMenu_OnCoreListSetupItemYuffie final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMainWeaponUpgradeEquipMenu_OnCoreListSetupItemYuffie) == 0x000008, "Wrong alignment on EndMainWeaponUpgradeEquipMenu_OnCoreListSetupItemYuffie");
static_assert(sizeof(EndMainWeaponUpgradeEquipMenu_OnCoreListSetupItemYuffie) == 0x000010, "Wrong size on EndMainWeaponUpgradeEquipMenu_OnCoreListSetupItemYuffie");
static_assert(offsetof(EndMainWeaponUpgradeEquipMenu_OnCoreListSetupItemYuffie, ItemWidget) == 0x000000, "Member 'EndMainWeaponUpgradeEquipMenu_OnCoreListSetupItemYuffie::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndMainWeaponUpgradeEquipMenu_OnCoreListSetupItemYuffie, CellIndex) == 0x000008, "Member 'EndMainWeaponUpgradeEquipMenu_OnCoreListSetupItemYuffie::CellIndex' has a wrong offset!");

// Function EndGame.EndMainWeaponUpgradeEquipMenu.OnEquipMenuPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndMainWeaponUpgradeEquipMenu_OnEquipMenuPressedItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainWeaponUpgradeEquipMenu_OnEquipMenuPressedItem) == 0x000004, "Wrong alignment on EndMainWeaponUpgradeEquipMenu_OnEquipMenuPressedItem");
static_assert(sizeof(EndMainWeaponUpgradeEquipMenu_OnEquipMenuPressedItem) == 0x000004, "Wrong size on EndMainWeaponUpgradeEquipMenu_OnEquipMenuPressedItem");
static_assert(offsetof(EndMainWeaponUpgradeEquipMenu_OnEquipMenuPressedItem, CellIndex) == 0x000000, "Member 'EndMainWeaponUpgradeEquipMenu_OnEquipMenuPressedItem::CellIndex' has a wrong offset!");

// Function EndGame.EndMainWeaponUpgradeEquipMenu.OnEquipMenuSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndMainWeaponUpgradeEquipMenu_OnEquipMenuSelectedIndexChanged final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainWeaponUpgradeEquipMenu_OnEquipMenuSelectedIndexChanged) == 0x000004, "Wrong alignment on EndMainWeaponUpgradeEquipMenu_OnEquipMenuSelectedIndexChanged");
static_assert(sizeof(EndMainWeaponUpgradeEquipMenu_OnEquipMenuSelectedIndexChanged) == 0x000004, "Wrong size on EndMainWeaponUpgradeEquipMenu_OnEquipMenuSelectedIndexChanged");
static_assert(offsetof(EndMainWeaponUpgradeEquipMenu_OnEquipMenuSelectedIndexChanged, CellIndex) == 0x000000, "Member 'EndMainWeaponUpgradeEquipMenu_OnEquipMenuSelectedIndexChanged::CellIndex' has a wrong offset!");

// Function EndGame.EndMainWeaponUpgradeEquipMenu.OnEquipMenuSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndMainWeaponUpgradeEquipMenu_OnEquipMenuSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMainWeaponUpgradeEquipMenu_OnEquipMenuSetupItem) == 0x000008, "Wrong alignment on EndMainWeaponUpgradeEquipMenu_OnEquipMenuSetupItem");
static_assert(sizeof(EndMainWeaponUpgradeEquipMenu_OnEquipMenuSetupItem) == 0x000010, "Wrong size on EndMainWeaponUpgradeEquipMenu_OnEquipMenuSetupItem");
static_assert(offsetof(EndMainWeaponUpgradeEquipMenu_OnEquipMenuSetupItem, ItemWidget) == 0x000000, "Member 'EndMainWeaponUpgradeEquipMenu_OnEquipMenuSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndMainWeaponUpgradeEquipMenu_OnEquipMenuSetupItem, CellIndex) == 0x000008, "Member 'EndMainWeaponUpgradeEquipMenu_OnEquipMenuSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndMainWeaponUpgradeEquipMenu.OnMemberMenuPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndMainWeaponUpgradeEquipMenu_OnMemberMenuPressedItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainWeaponUpgradeEquipMenu_OnMemberMenuPressedItem) == 0x000004, "Wrong alignment on EndMainWeaponUpgradeEquipMenu_OnMemberMenuPressedItem");
static_assert(sizeof(EndMainWeaponUpgradeEquipMenu_OnMemberMenuPressedItem) == 0x000004, "Wrong size on EndMainWeaponUpgradeEquipMenu_OnMemberMenuPressedItem");
static_assert(offsetof(EndMainWeaponUpgradeEquipMenu_OnMemberMenuPressedItem, CellIndex) == 0x000000, "Member 'EndMainWeaponUpgradeEquipMenu_OnMemberMenuPressedItem::CellIndex' has a wrong offset!");

// Function EndGame.EndMainWeaponUpgradeEquipMenu.OnMemberMenuSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndMainWeaponUpgradeEquipMenu_OnMemberMenuSelectedIndexChanged final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainWeaponUpgradeEquipMenu_OnMemberMenuSelectedIndexChanged) == 0x000004, "Wrong alignment on EndMainWeaponUpgradeEquipMenu_OnMemberMenuSelectedIndexChanged");
static_assert(sizeof(EndMainWeaponUpgradeEquipMenu_OnMemberMenuSelectedIndexChanged) == 0x000004, "Wrong size on EndMainWeaponUpgradeEquipMenu_OnMemberMenuSelectedIndexChanged");
static_assert(offsetof(EndMainWeaponUpgradeEquipMenu_OnMemberMenuSelectedIndexChanged, CellIndex) == 0x000000, "Member 'EndMainWeaponUpgradeEquipMenu_OnMemberMenuSelectedIndexChanged::CellIndex' has a wrong offset!");

// Function EndGame.EndMainWeaponUpgradeEquipMenu.OnMemberMenuSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndMainWeaponUpgradeEquipMenu_OnMemberMenuSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMainWeaponUpgradeEquipMenu_OnMemberMenuSetupItem) == 0x000008, "Wrong alignment on EndMainWeaponUpgradeEquipMenu_OnMemberMenuSetupItem");
static_assert(sizeof(EndMainWeaponUpgradeEquipMenu_OnMemberMenuSetupItem) == 0x000010, "Wrong size on EndMainWeaponUpgradeEquipMenu_OnMemberMenuSetupItem");
static_assert(offsetof(EndMainWeaponUpgradeEquipMenu_OnMemberMenuSetupItem, ItemWidget) == 0x000000, "Member 'EndMainWeaponUpgradeEquipMenu_OnMemberMenuSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndMainWeaponUpgradeEquipMenu_OnMemberMenuSetupItem, CellIndex) == 0x000008, "Member 'EndMainWeaponUpgradeEquipMenu_OnMemberMenuSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndMainWeaponUpgradeEquipMenu.OnSortListPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndMainWeaponUpgradeEquipMenu_OnSortListPressedItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainWeaponUpgradeEquipMenu_OnSortListPressedItem) == 0x000004, "Wrong alignment on EndMainWeaponUpgradeEquipMenu_OnSortListPressedItem");
static_assert(sizeof(EndMainWeaponUpgradeEquipMenu_OnSortListPressedItem) == 0x000004, "Wrong size on EndMainWeaponUpgradeEquipMenu_OnSortListPressedItem");
static_assert(offsetof(EndMainWeaponUpgradeEquipMenu_OnSortListPressedItem, CellIndex) == 0x000000, "Member 'EndMainWeaponUpgradeEquipMenu_OnSortListPressedItem::CellIndex' has a wrong offset!");

// Function EndGame.EndMainWeaponUpgradeEquipMenu.OnSpListPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndMainWeaponUpgradeEquipMenu_OnSpListPressedItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainWeaponUpgradeEquipMenu_OnSpListPressedItem) == 0x000004, "Wrong alignment on EndMainWeaponUpgradeEquipMenu_OnSpListPressedItem");
static_assert(sizeof(EndMainWeaponUpgradeEquipMenu_OnSpListPressedItem) == 0x000004, "Wrong size on EndMainWeaponUpgradeEquipMenu_OnSpListPressedItem");
static_assert(offsetof(EndMainWeaponUpgradeEquipMenu_OnSpListPressedItem, CellIndex) == 0x000000, "Member 'EndMainWeaponUpgradeEquipMenu_OnSpListPressedItem::CellIndex' has a wrong offset!");

// Function EndGame.EndMainWeaponUpgradeEquipMenu.OnSpListSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndMainWeaponUpgradeEquipMenu_OnSpListSelectedIndexChanged final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainWeaponUpgradeEquipMenu_OnSpListSelectedIndexChanged) == 0x000004, "Wrong alignment on EndMainWeaponUpgradeEquipMenu_OnSpListSelectedIndexChanged");
static_assert(sizeof(EndMainWeaponUpgradeEquipMenu_OnSpListSelectedIndexChanged) == 0x000004, "Wrong size on EndMainWeaponUpgradeEquipMenu_OnSpListSelectedIndexChanged");
static_assert(offsetof(EndMainWeaponUpgradeEquipMenu_OnSpListSelectedIndexChanged, CellIndex) == 0x000000, "Member 'EndMainWeaponUpgradeEquipMenu_OnSpListSelectedIndexChanged::CellIndex' has a wrong offset!");

// Function EndGame.EndMainWeaponUpgradeEquipMenu.OnSpListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndMainWeaponUpgradeEquipMenu_OnSpListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMainWeaponUpgradeEquipMenu_OnSpListSetupItem) == 0x000008, "Wrong alignment on EndMainWeaponUpgradeEquipMenu_OnSpListSetupItem");
static_assert(sizeof(EndMainWeaponUpgradeEquipMenu_OnSpListSetupItem) == 0x000010, "Wrong size on EndMainWeaponUpgradeEquipMenu_OnSpListSetupItem");
static_assert(offsetof(EndMainWeaponUpgradeEquipMenu_OnSpListSetupItem, ItemWidget) == 0x000000, "Member 'EndMainWeaponUpgradeEquipMenu_OnSpListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndMainWeaponUpgradeEquipMenu_OnSpListSetupItem, CellIndex) == 0x000008, "Member 'EndMainWeaponUpgradeEquipMenu_OnSpListSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndMainWeaponUpgradeEquipMenu.UpdateCharaImage
// 0x0018 (0x0018 - 0x0000)
struct EndMainWeaponUpgradeEquipMenu_UpdateCharaImage final
{
public:
	EPlayerType                                   PlayerType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UEndImage*                              Widget;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPaperSprite*                           Sprite;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainWeaponUpgradeEquipMenu_UpdateCharaImage) == 0x000008, "Wrong alignment on EndMainWeaponUpgradeEquipMenu_UpdateCharaImage");
static_assert(sizeof(EndMainWeaponUpgradeEquipMenu_UpdateCharaImage) == 0x000018, "Wrong size on EndMainWeaponUpgradeEquipMenu_UpdateCharaImage");
static_assert(offsetof(EndMainWeaponUpgradeEquipMenu_UpdateCharaImage, PlayerType) == 0x000000, "Member 'EndMainWeaponUpgradeEquipMenu_UpdateCharaImage::PlayerType' has a wrong offset!");
static_assert(offsetof(EndMainWeaponUpgradeEquipMenu_UpdateCharaImage, Widget) == 0x000008, "Member 'EndMainWeaponUpgradeEquipMenu_UpdateCharaImage::Widget' has a wrong offset!");
static_assert(offsetof(EndMainWeaponUpgradeEquipMenu_UpdateCharaImage, Sprite) == 0x000010, "Member 'EndMainWeaponUpgradeEquipMenu_UpdateCharaImage::Sprite' has a wrong offset!");

// Function EndGame.EndEquipmentCell.UpdateEquipStatus
// 0x0010 (0x0010 - 0x0000)
struct EndEquipmentCell_UpdateEquipStatus final
{
public:
	int32                                         Attack;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Defense;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MagicAttack;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MagicDefense;                                      // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndEquipmentCell_UpdateEquipStatus) == 0x000004, "Wrong alignment on EndEquipmentCell_UpdateEquipStatus");
static_assert(sizeof(EndEquipmentCell_UpdateEquipStatus) == 0x000010, "Wrong size on EndEquipmentCell_UpdateEquipStatus");
static_assert(offsetof(EndEquipmentCell_UpdateEquipStatus, Attack) == 0x000000, "Member 'EndEquipmentCell_UpdateEquipStatus::Attack' has a wrong offset!");
static_assert(offsetof(EndEquipmentCell_UpdateEquipStatus, Defense) == 0x000004, "Member 'EndEquipmentCell_UpdateEquipStatus::Defense' has a wrong offset!");
static_assert(offsetof(EndEquipmentCell_UpdateEquipStatus, MagicAttack) == 0x000008, "Member 'EndEquipmentCell_UpdateEquipStatus::MagicAttack' has a wrong offset!");
static_assert(offsetof(EndEquipmentCell_UpdateEquipStatus, MagicDefense) == 0x00000C, "Member 'EndEquipmentCell_UpdateEquipStatus::MagicDefense' has a wrong offset!");

// Function EndGame.EndEquipmentMateriaInfoWindow.OnCoreListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndEquipmentMateriaInfoWindow_OnCoreListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndEquipmentMateriaInfoWindow_OnCoreListSetupItem) == 0x000008, "Wrong alignment on EndEquipmentMateriaInfoWindow_OnCoreListSetupItem");
static_assert(sizeof(EndEquipmentMateriaInfoWindow_OnCoreListSetupItem) == 0x000010, "Wrong size on EndEquipmentMateriaInfoWindow_OnCoreListSetupItem");
static_assert(offsetof(EndEquipmentMateriaInfoWindow_OnCoreListSetupItem, ItemWidget) == 0x000000, "Member 'EndEquipmentMateriaInfoWindow_OnCoreListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndEquipmentMateriaInfoWindow_OnCoreListSetupItem, CellIndex) == 0x000008, "Member 'EndEquipmentMateriaInfoWindow_OnCoreListSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndEquipmentMateriaInfoWindow.OnMateriaInfoListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndEquipmentMateriaInfoWindow_OnMateriaInfoListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndEquipmentMateriaInfoWindow_OnMateriaInfoListSetupItem) == 0x000008, "Wrong alignment on EndEquipmentMateriaInfoWindow_OnMateriaInfoListSetupItem");
static_assert(sizeof(EndEquipmentMateriaInfoWindow_OnMateriaInfoListSetupItem) == 0x000010, "Wrong size on EndEquipmentMateriaInfoWindow_OnMateriaInfoListSetupItem");
static_assert(offsetof(EndEquipmentMateriaInfoWindow_OnMateriaInfoListSetupItem, ItemWidget) == 0x000000, "Member 'EndEquipmentMateriaInfoWindow_OnMateriaInfoListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndEquipmentMateriaInfoWindow_OnMateriaInfoListSetupItem, CellIndex) == 0x000008, "Member 'EndEquipmentMateriaInfoWindow_OnMateriaInfoListSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndEquipmentMateriaInfoWindow.OnMeasureInfoListSize
// 0x000C (0x000C - 0x0000)
struct EndEquipmentMateriaInfoWindow_OnMeasureInfoListSize final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndEquipmentMateriaInfoWindow_OnMeasureInfoListSize) == 0x000004, "Wrong alignment on EndEquipmentMateriaInfoWindow_OnMeasureInfoListSize");
static_assert(sizeof(EndEquipmentMateriaInfoWindow_OnMeasureInfoListSize) == 0x00000C, "Wrong size on EndEquipmentMateriaInfoWindow_OnMeasureInfoListSize");
static_assert(offsetof(EndEquipmentMateriaInfoWindow_OnMeasureInfoListSize, CellIndex) == 0x000000, "Member 'EndEquipmentMateriaInfoWindow_OnMeasureInfoListSize::CellIndex' has a wrong offset!");
static_assert(offsetof(EndEquipmentMateriaInfoWindow_OnMeasureInfoListSize, ReturnValue) == 0x000004, "Member 'EndEquipmentMateriaInfoWindow_OnMeasureInfoListSize::ReturnValue' has a wrong offset!");

// Function EndGame.EndFeelerWallExActor.Play
// 0x0004 (0x0004 - 0x0000)
struct EndFeelerWallExActor_Play final
{
public:
	float                                         BlendTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndFeelerWallExActor_Play) == 0x000004, "Wrong alignment on EndFeelerWallExActor_Play");
static_assert(sizeof(EndFeelerWallExActor_Play) == 0x000004, "Wrong size on EndFeelerWallExActor_Play");
static_assert(offsetof(EndFeelerWallExActor_Play, BlendTime) == 0x000000, "Member 'EndFeelerWallExActor_Play::BlendTime' has a wrong offset!");

// Function EndGame.EndFeelerWallExActor.Stop
// 0x0004 (0x0004 - 0x0000)
struct EndFeelerWallExActor_Stop final
{
public:
	float                                         BlendTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndFeelerWallExActor_Stop) == 0x000004, "Wrong alignment on EndFeelerWallExActor_Stop");
static_assert(sizeof(EndFeelerWallExActor_Stop) == 0x000004, "Wrong size on EndFeelerWallExActor_Stop");
static_assert(offsetof(EndFeelerWallExActor_Stop, BlendTime) == 0x000000, "Member 'EndFeelerWallExActor_Stop::BlendTime' has a wrong offset!");

// Function EndGame.EndGameMode.InitEditorGameMode
// 0x0040 (0x0040 - 0x0000)
struct EndGameMode_InitEditorGameMode final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LocationName;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          QuickStart;                                        // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   OverRideEnvName;                                   // 0x0014(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InCutName;                                         // 0x001C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0028(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndGameMode_InitEditorGameMode) == 0x000008, "Wrong alignment on EndGameMode_InitEditorGameMode");
static_assert(sizeof(EndGameMode_InitEditorGameMode) == 0x000040, "Wrong size on EndGameMode_InitEditorGameMode");
static_assert(offsetof(EndGameMode_InitEditorGameMode, WorldContextObject) == 0x000000, "Member 'EndGameMode_InitEditorGameMode::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EndGameMode_InitEditorGameMode, LocationName) == 0x000008, "Member 'EndGameMode_InitEditorGameMode::LocationName' has a wrong offset!");
static_assert(offsetof(EndGameMode_InitEditorGameMode, QuickStart) == 0x000010, "Member 'EndGameMode_InitEditorGameMode::QuickStart' has a wrong offset!");
static_assert(offsetof(EndGameMode_InitEditorGameMode, OverRideEnvName) == 0x000014, "Member 'EndGameMode_InitEditorGameMode::OverRideEnvName' has a wrong offset!");
static_assert(offsetof(EndGameMode_InitEditorGameMode, InCutName) == 0x00001C, "Member 'EndGameMode_InitEditorGameMode::InCutName' has a wrong offset!");
static_assert(offsetof(EndGameMode_InitEditorGameMode, LatentInfo) == 0x000028, "Member 'EndGameMode_InitEditorGameMode::LatentInfo' has a wrong offset!");

// Function EndGame.EndGameMode.InitEditorPreviewGameMode
// 0x0020 (0x0020 - 0x0000)
struct EndGameMode_InitEditorPreviewGameMode final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndGameMode_InitEditorPreviewGameMode) == 0x000008, "Wrong alignment on EndGameMode_InitEditorPreviewGameMode");
static_assert(sizeof(EndGameMode_InitEditorPreviewGameMode) == 0x000020, "Wrong size on EndGameMode_InitEditorPreviewGameMode");
static_assert(offsetof(EndGameMode_InitEditorPreviewGameMode, WorldContextObject) == 0x000000, "Member 'EndGameMode_InitEditorPreviewGameMode::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EndGameMode_InitEditorPreviewGameMode, LatentInfo) == 0x000008, "Member 'EndGameMode_InitEditorPreviewGameMode::LatentInfo' has a wrong offset!");

// Function EndGame.EndGameState.SendGameTrigger
// 0x0028 (0x0028 - 0x0000)
struct EndGameState_SendGameTrigger final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGameTrigger                                  Trigger;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGameState                                    toState;                                           // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0010(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndGameState_SendGameTrigger) == 0x000008, "Wrong alignment on EndGameState_SendGameTrigger");
static_assert(sizeof(EndGameState_SendGameTrigger) == 0x000028, "Wrong size on EndGameState_SendGameTrigger");
static_assert(offsetof(EndGameState_SendGameTrigger, WorldContextObject) == 0x000000, "Member 'EndGameState_SendGameTrigger::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EndGameState_SendGameTrigger, Trigger) == 0x000008, "Member 'EndGameState_SendGameTrigger::Trigger' has a wrong offset!");
static_assert(offsetof(EndGameState_SendGameTrigger, toState) == 0x000009, "Member 'EndGameState_SendGameTrigger::toState' has a wrong offset!");
static_assert(offsetof(EndGameState_SendGameTrigger, LatentInfo) == 0x000010, "Member 'EndGameState_SendGameTrigger::LatentInfo' has a wrong offset!");

// Function EndGame.EndGameState.WaitGameDifferentState
// 0x0028 (0x0028 - 0x0000)
struct EndGameState_WaitGameDifferentState final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGameState                                    toState;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0010(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndGameState_WaitGameDifferentState) == 0x000008, "Wrong alignment on EndGameState_WaitGameDifferentState");
static_assert(sizeof(EndGameState_WaitGameDifferentState) == 0x000028, "Wrong size on EndGameState_WaitGameDifferentState");
static_assert(offsetof(EndGameState_WaitGameDifferentState, WorldContextObject) == 0x000000, "Member 'EndGameState_WaitGameDifferentState::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EndGameState_WaitGameDifferentState, toState) == 0x000008, "Member 'EndGameState_WaitGameDifferentState::toState' has a wrong offset!");
static_assert(offsetof(EndGameState_WaitGameDifferentState, LatentInfo) == 0x000010, "Member 'EndGameState_WaitGameDifferentState::LatentInfo' has a wrong offset!");

// Function EndGame.EndGameState.WaitGameDifferentStateList
// 0x0030 (0x0030 - 0x0000)
struct EndGameState_WaitGameDifferentStateList final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<EGameState>                            toStateList;                                       // 0x0008(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0018(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndGameState_WaitGameDifferentStateList) == 0x000008, "Wrong alignment on EndGameState_WaitGameDifferentStateList");
static_assert(sizeof(EndGameState_WaitGameDifferentStateList) == 0x000030, "Wrong size on EndGameState_WaitGameDifferentStateList");
static_assert(offsetof(EndGameState_WaitGameDifferentStateList, WorldContextObject) == 0x000000, "Member 'EndGameState_WaitGameDifferentStateList::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EndGameState_WaitGameDifferentStateList, toStateList) == 0x000008, "Member 'EndGameState_WaitGameDifferentStateList::toStateList' has a wrong offset!");
static_assert(offsetof(EndGameState_WaitGameDifferentStateList, LatentInfo) == 0x000018, "Member 'EndGameState_WaitGameDifferentStateList::LatentInfo' has a wrong offset!");

// Function EndGame.EndGameState.WaitGameState
// 0x0028 (0x0028 - 0x0000)
struct EndGameState_WaitGameState final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGameState                                    toState;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0010(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndGameState_WaitGameState) == 0x000008, "Wrong alignment on EndGameState_WaitGameState");
static_assert(sizeof(EndGameState_WaitGameState) == 0x000028, "Wrong size on EndGameState_WaitGameState");
static_assert(offsetof(EndGameState_WaitGameState, WorldContextObject) == 0x000000, "Member 'EndGameState_WaitGameState::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EndGameState_WaitGameState, toState) == 0x000008, "Member 'EndGameState_WaitGameState::toState' has a wrong offset!");
static_assert(offsetof(EndGameState_WaitGameState, LatentInfo) == 0x000010, "Member 'EndGameState_WaitGameState::LatentInfo' has a wrong offset!");

// Function EndGame.EndGameState.ActivateLocation
// 0x0018 (0x0018 - 0x0000)
struct EndGameState_ActivateLocation final
{
public:
	class FString                                 TargetLocation;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OverRideEnvName;                                   // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndGameState_ActivateLocation) == 0x000008, "Wrong alignment on EndGameState_ActivateLocation");
static_assert(sizeof(EndGameState_ActivateLocation) == 0x000018, "Wrong size on EndGameState_ActivateLocation");
static_assert(offsetof(EndGameState_ActivateLocation, TargetLocation) == 0x000000, "Member 'EndGameState_ActivateLocation::TargetLocation' has a wrong offset!");
static_assert(offsetof(EndGameState_ActivateLocation, OverRideEnvName) == 0x000010, "Member 'EndGameState_ActivateLocation::OverRideEnvName' has a wrong offset!");

// Function EndGame.EndGameState.GetGameSpeed
// 0x0004 (0x0004 - 0x0000)
struct EndGameState_GetGameSpeed final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndGameState_GetGameSpeed) == 0x000004, "Wrong alignment on EndGameState_GetGameSpeed");
static_assert(sizeof(EndGameState_GetGameSpeed) == 0x000004, "Wrong size on EndGameState_GetGameSpeed");
static_assert(offsetof(EndGameState_GetGameSpeed, ReturnValue) == 0x000000, "Member 'EndGameState_GetGameSpeed::ReturnValue' has a wrong offset!");

// Function EndGame.EndGameState.IsGamePause
// 0x0001 (0x0001 - 0x0000)
struct EndGameState_IsGamePause final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndGameState_IsGamePause) == 0x000001, "Wrong alignment on EndGameState_IsGamePause");
static_assert(sizeof(EndGameState_IsGamePause) == 0x000001, "Wrong size on EndGameState_IsGamePause");
static_assert(offsetof(EndGameState_IsGamePause, ReturnValue) == 0x000000, "Member 'EndGameState_IsGamePause::ReturnValue' has a wrong offset!");

// Function EndGame.EndGameState.IsGameStatus
// 0x0002 (0x0002 - 0x0000)
struct EndGameState_IsGameStatus final
{
public:
	EGameStatus                                   Status;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndGameState_IsGameStatus) == 0x000001, "Wrong alignment on EndGameState_IsGameStatus");
static_assert(sizeof(EndGameState_IsGameStatus) == 0x000002, "Wrong size on EndGameState_IsGameStatus");
static_assert(offsetof(EndGameState_IsGameStatus, Status) == 0x000000, "Member 'EndGameState_IsGameStatus::Status' has a wrong offset!");
static_assert(offsetof(EndGameState_IsGameStatus, ReturnValue) == 0x000001, "Member 'EndGameState_IsGameStatus::ReturnValue' has a wrong offset!");

// Function EndGame.EndGameState.SetGameSpeed
// 0x0008 (0x0008 - 0x0000)
struct EndGameState_SetGameSpeed final
{
public:
	EGameSpeed                                    Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Speed;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndGameState_SetGameSpeed) == 0x000004, "Wrong alignment on EndGameState_SetGameSpeed");
static_assert(sizeof(EndGameState_SetGameSpeed) == 0x000008, "Wrong size on EndGameState_SetGameSpeed");
static_assert(offsetof(EndGameState_SetGameSpeed, Type) == 0x000000, "Member 'EndGameState_SetGameSpeed::Type' has a wrong offset!");
static_assert(offsetof(EndGameState_SetGameSpeed, Speed) == 0x000004, "Member 'EndGameState_SetGameSpeed::Speed' has a wrong offset!");

// Function EndGame.EndGameState.SetGameStatus
// 0x0002 (0x0002 - 0x0000)
struct EndGameState_SetGameStatus final
{
public:
	EGameStatus                                   Status;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Set;                                               // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndGameState_SetGameStatus) == 0x000001, "Wrong alignment on EndGameState_SetGameStatus");
static_assert(sizeof(EndGameState_SetGameStatus) == 0x000002, "Wrong size on EndGameState_SetGameStatus");
static_assert(offsetof(EndGameState_SetGameStatus, Status) == 0x000000, "Member 'EndGameState_SetGameStatus::Status' has a wrong offset!");
static_assert(offsetof(EndGameState_SetGameStatus, Set) == 0x000001, "Member 'EndGameState_SetGameStatus::Set' has a wrong offset!");

// Function EndGame.EndGameState.SetRequestGamePauseOn
// 0x0001 (0x0001 - 0x0000)
struct EndGameState_SetRequestGamePauseOn final
{
public:
	EGamePause                                    Pause;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndGameState_SetRequestGamePauseOn) == 0x000001, "Wrong alignment on EndGameState_SetRequestGamePauseOn");
static_assert(sizeof(EndGameState_SetRequestGamePauseOn) == 0x000001, "Wrong size on EndGameState_SetRequestGamePauseOn");
static_assert(offsetof(EndGameState_SetRequestGamePauseOn, Pause) == 0x000000, "Member 'EndGameState_SetRequestGamePauseOn::Pause' has a wrong offset!");

// Function EndGame.EndGauge.SetFillColorAndOpacity
// 0x0010 (0x0010 - 0x0000)
struct EndGauge_SetFillColorAndOpacity final
{
public:
	struct FLinearColor                           InColor;                                           // 0x0000(0x0010)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndGauge_SetFillColorAndOpacity) == 0x000004, "Wrong alignment on EndGauge_SetFillColorAndOpacity");
static_assert(sizeof(EndGauge_SetFillColorAndOpacity) == 0x000010, "Wrong size on EndGauge_SetFillColorAndOpacity");
static_assert(offsetof(EndGauge_SetFillColorAndOpacity, InColor) == 0x000000, "Member 'EndGauge_SetFillColorAndOpacity::InColor' has a wrong offset!");

// Function EndGame.EndGauge.SetFillEndColorAndOpacity
// 0x0010 (0x0010 - 0x0000)
struct EndGauge_SetFillEndColorAndOpacity final
{
public:
	struct FLinearColor                           InColor;                                           // 0x0000(0x0010)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndGauge_SetFillEndColorAndOpacity) == 0x000004, "Wrong alignment on EndGauge_SetFillEndColorAndOpacity");
static_assert(sizeof(EndGauge_SetFillEndColorAndOpacity) == 0x000010, "Wrong size on EndGauge_SetFillEndColorAndOpacity");
static_assert(offsetof(EndGauge_SetFillEndColorAndOpacity, InColor) == 0x000000, "Member 'EndGauge_SetFillEndColorAndOpacity::InColor' has a wrong offset!");

// Function EndGame.EndGauge.SetMaxValue
// 0x0004 (0x0004 - 0x0000)
struct EndGauge_SetMaxValue final
{
public:
	float                                         InMaxValue;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndGauge_SetMaxValue) == 0x000004, "Wrong alignment on EndGauge_SetMaxValue");
static_assert(sizeof(EndGauge_SetMaxValue) == 0x000004, "Wrong size on EndGauge_SetMaxValue");
static_assert(offsetof(EndGauge_SetMaxValue, InMaxValue) == 0x000000, "Member 'EndGauge_SetMaxValue::InMaxValue' has a wrong offset!");

// Function EndGame.EndGauge.SetPreviewColorAndOpacity
// 0x0010 (0x0010 - 0x0000)
struct EndGauge_SetPreviewColorAndOpacity final
{
public:
	struct FLinearColor                           InColor;                                           // 0x0000(0x0010)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndGauge_SetPreviewColorAndOpacity) == 0x000004, "Wrong alignment on EndGauge_SetPreviewColorAndOpacity");
static_assert(sizeof(EndGauge_SetPreviewColorAndOpacity) == 0x000010, "Wrong size on EndGauge_SetPreviewColorAndOpacity");
static_assert(offsetof(EndGauge_SetPreviewColorAndOpacity, InColor) == 0x000000, "Member 'EndGauge_SetPreviewColorAndOpacity::InColor' has a wrong offset!");

// Function EndGame.EndGauge.SetPreviewValue
// 0x0004 (0x0004 - 0x0000)
struct EndGauge_SetPreviewValue final
{
public:
	float                                         InPreviewValue;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndGauge_SetPreviewValue) == 0x000004, "Wrong alignment on EndGauge_SetPreviewValue");
static_assert(sizeof(EndGauge_SetPreviewValue) == 0x000004, "Wrong size on EndGauge_SetPreviewValue");
static_assert(offsetof(EndGauge_SetPreviewValue, InPreviewValue) == 0x000000, "Member 'EndGauge_SetPreviewValue::InPreviewValue' has a wrong offset!");

// Function EndGame.EndGauge.SetValue
// 0x0004 (0x0004 - 0x0000)
struct EndGauge_SetValue final
{
public:
	float                                         InValue;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndGauge_SetValue) == 0x000004, "Wrong alignment on EndGauge_SetValue");
static_assert(sizeof(EndGauge_SetValue) == 0x000004, "Wrong size on EndGauge_SetValue");
static_assert(offsetof(EndGauge_SetValue, InValue) == 0x000000, "Member 'EndGauge_SetValue::InValue' has a wrong offset!");

// Function EndGame.EndGBikeMenu.OnGBikeCellSetup
// 0x0010 (0x0010 - 0x0000)
struct EndGBikeMenu_OnGBikeCellSetup final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndGBikeMenu_OnGBikeCellSetup) == 0x000008, "Wrong alignment on EndGBikeMenu_OnGBikeCellSetup");
static_assert(sizeof(EndGBikeMenu_OnGBikeCellSetup) == 0x000010, "Wrong size on EndGBikeMenu_OnGBikeCellSetup");
static_assert(offsetof(EndGBikeMenu_OnGBikeCellSetup, ItemWidget) == 0x000000, "Member 'EndGBikeMenu_OnGBikeCellSetup::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndGBikeMenu_OnGBikeCellSetup, ItemIndex) == 0x000008, "Member 'EndGBikeMenu_OnGBikeCellSetup::ItemIndex' has a wrong offset!");

// Function EndGame.EndImage.GetDynamicMaterial
// 0x0008 (0x0008 - 0x0000)
struct EndImage_GetDynamicMaterial final
{
public:
	class UMaterialInstanceDynamic*               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndImage_GetDynamicMaterial) == 0x000008, "Wrong alignment on EndImage_GetDynamicMaterial");
static_assert(sizeof(EndImage_GetDynamicMaterial) == 0x000008, "Wrong size on EndImage_GetDynamicMaterial");
static_assert(offsetof(EndImage_GetDynamicMaterial, ReturnValue) == 0x000000, "Member 'EndImage_GetDynamicMaterial::ReturnValue' has a wrong offset!");

// Function EndGame.EndImage.SetBlendMode
// 0x0001 (0x0001 - 0x0000)
struct EndImage_SetBlendMode final
{
public:
	EBlendMode                                    InBlendMode;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndImage_SetBlendMode) == 0x000001, "Wrong alignment on EndImage_SetBlendMode");
static_assert(sizeof(EndImage_SetBlendMode) == 0x000001, "Wrong size on EndImage_SetBlendMode");
static_assert(offsetof(EndImage_SetBlendMode, InBlendMode) == 0x000000, "Member 'EndImage_SetBlendMode::InBlendMode' has a wrong offset!");

// Function EndGame.EndImage.SetBrush
// 0x0078 (0x0078 - 0x0000)
struct EndImage_SetBrush final
{
public:
	struct FSlateBrush                            InBrush;                                           // 0x0000(0x0078)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndImage_SetBrush) == 0x000008, "Wrong alignment on EndImage_SetBrush");
static_assert(sizeof(EndImage_SetBrush) == 0x000078, "Wrong size on EndImage_SetBrush");
static_assert(offsetof(EndImage_SetBrush, InBrush) == 0x000000, "Member 'EndImage_SetBrush::InBrush' has a wrong offset!");

// Function EndGame.EndImage.SetBrushFromAsset
// 0x0008 (0x0008 - 0x0000)
struct EndImage_SetBrushFromAsset final
{
public:
	class USlateBrushAsset*                       Asset;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndImage_SetBrushFromAsset) == 0x000008, "Wrong alignment on EndImage_SetBrushFromAsset");
static_assert(sizeof(EndImage_SetBrushFromAsset) == 0x000008, "Wrong size on EndImage_SetBrushFromAsset");
static_assert(offsetof(EndImage_SetBrushFromAsset, Asset) == 0x000000, "Member 'EndImage_SetBrushFromAsset::Asset' has a wrong offset!");

// Function EndGame.EndImage.SetBrushFromMaterial
// 0x0008 (0x0008 - 0x0000)
struct EndImage_SetBrushFromMaterial final
{
public:
	class UMaterialInterface*                     Material;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndImage_SetBrushFromMaterial) == 0x000008, "Wrong alignment on EndImage_SetBrushFromMaterial");
static_assert(sizeof(EndImage_SetBrushFromMaterial) == 0x000008, "Wrong size on EndImage_SetBrushFromMaterial");
static_assert(offsetof(EndImage_SetBrushFromMaterial, Material) == 0x000000, "Member 'EndImage_SetBrushFromMaterial::Material' has a wrong offset!");

// Function EndGame.EndImage.SetBrushFromTexture
// 0x0010 (0x0010 - 0x0000)
struct EndImage_SetBrushFromTexture final
{
public:
	class UTexture2D*                             Texture;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMatchSize;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndImage_SetBrushFromTexture) == 0x000008, "Wrong alignment on EndImage_SetBrushFromTexture");
static_assert(sizeof(EndImage_SetBrushFromTexture) == 0x000010, "Wrong size on EndImage_SetBrushFromTexture");
static_assert(offsetof(EndImage_SetBrushFromTexture, Texture) == 0x000000, "Member 'EndImage_SetBrushFromTexture::Texture' has a wrong offset!");
static_assert(offsetof(EndImage_SetBrushFromTexture, bMatchSize) == 0x000008, "Member 'EndImage_SetBrushFromTexture::bMatchSize' has a wrong offset!");

// Function EndGame.EndImage.SetBrushFromTextureDynamic
// 0x0010 (0x0010 - 0x0000)
struct EndImage_SetBrushFromTextureDynamic final
{
public:
	class UTexture2DDynamic*                      Texture;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMatchSize;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndImage_SetBrushFromTextureDynamic) == 0x000008, "Wrong alignment on EndImage_SetBrushFromTextureDynamic");
static_assert(sizeof(EndImage_SetBrushFromTextureDynamic) == 0x000010, "Wrong size on EndImage_SetBrushFromTextureDynamic");
static_assert(offsetof(EndImage_SetBrushFromTextureDynamic, Texture) == 0x000000, "Member 'EndImage_SetBrushFromTextureDynamic::Texture' has a wrong offset!");
static_assert(offsetof(EndImage_SetBrushFromTextureDynamic, bMatchSize) == 0x000008, "Member 'EndImage_SetBrushFromTextureDynamic::bMatchSize' has a wrong offset!");

// Function EndGame.EndImage.SetColorAndOpacity
// 0x0010 (0x0010 - 0x0000)
struct EndImage_SetColorAndOpacity final
{
public:
	struct FLinearColor                           InColorAndOpacity;                                 // 0x0000(0x0010)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndImage_SetColorAndOpacity) == 0x000004, "Wrong alignment on EndImage_SetColorAndOpacity");
static_assert(sizeof(EndImage_SetColorAndOpacity) == 0x000010, "Wrong size on EndImage_SetColorAndOpacity");
static_assert(offsetof(EndImage_SetColorAndOpacity, InColorAndOpacity) == 0x000000, "Member 'EndImage_SetColorAndOpacity::InColorAndOpacity' has a wrong offset!");

// Function EndGame.EndImage.SetOpacity
// 0x0004 (0x0004 - 0x0000)
struct EndImage_SetOpacity final
{
public:
	float                                         InOpacity;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndImage_SetOpacity) == 0x000004, "Wrong alignment on EndImage_SetOpacity");
static_assert(sizeof(EndImage_SetOpacity) == 0x000004, "Wrong size on EndImage_SetOpacity");
static_assert(offsetof(EndImage_SetOpacity, InOpacity) == 0x000000, "Member 'EndImage_SetOpacity::InOpacity' has a wrong offset!");

// Function EndGame.EndInstancedLightweightPhysicsComponent.AddPhysicsInstance
// 0x0050 (0x0050 - 0x0000)
struct EndInstancedLightweightPhysicsComponent_AddPhysicsInstance final
{
public:
	struct FTransform                             Transform;                                         // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Impulse;                                           // 0x0030(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DelayTime;                                         // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LifeTime;                                          // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0xC];                                       // 0x0044(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndInstancedLightweightPhysicsComponent_AddPhysicsInstance) == 0x000010, "Wrong alignment on EndInstancedLightweightPhysicsComponent_AddPhysicsInstance");
static_assert(sizeof(EndInstancedLightweightPhysicsComponent_AddPhysicsInstance) == 0x000050, "Wrong size on EndInstancedLightweightPhysicsComponent_AddPhysicsInstance");
static_assert(offsetof(EndInstancedLightweightPhysicsComponent_AddPhysicsInstance, Transform) == 0x000000, "Member 'EndInstancedLightweightPhysicsComponent_AddPhysicsInstance::Transform' has a wrong offset!");
static_assert(offsetof(EndInstancedLightweightPhysicsComponent_AddPhysicsInstance, Impulse) == 0x000030, "Member 'EndInstancedLightweightPhysicsComponent_AddPhysicsInstance::Impulse' has a wrong offset!");
static_assert(offsetof(EndInstancedLightweightPhysicsComponent_AddPhysicsInstance, DelayTime) == 0x00003C, "Member 'EndInstancedLightweightPhysicsComponent_AddPhysicsInstance::DelayTime' has a wrong offset!");
static_assert(offsetof(EndInstancedLightweightPhysicsComponent_AddPhysicsInstance, LifeTime) == 0x000040, "Member 'EndInstancedLightweightPhysicsComponent_AddPhysicsInstance::LifeTime' has a wrong offset!");

// Function EndGame.EndLevelLoader.CheckLoadStreamLevel
// 0x0020 (0x0020 - 0x0000)
struct EndLevelLoader_CheckLoadStreamLevel final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndLevelLoader_CheckLoadStreamLevel) == 0x000008, "Wrong alignment on EndLevelLoader_CheckLoadStreamLevel");
static_assert(sizeof(EndLevelLoader_CheckLoadStreamLevel) == 0x000020, "Wrong size on EndLevelLoader_CheckLoadStreamLevel");
static_assert(offsetof(EndLevelLoader_CheckLoadStreamLevel, WorldContextObject) == 0x000000, "Member 'EndLevelLoader_CheckLoadStreamLevel::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EndLevelLoader_CheckLoadStreamLevel, LatentInfo) == 0x000008, "Member 'EndLevelLoader_CheckLoadStreamLevel::LatentInfo' has a wrong offset!");

// Function EndGame.EndLevelLoader.CheckLoadStreamLevelSepc
// 0x0020 (0x0020 - 0x0000)
struct EndLevelLoader_CheckLoadStreamLevelSepc final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndLevelLoader_CheckLoadStreamLevelSepc) == 0x000008, "Wrong alignment on EndLevelLoader_CheckLoadStreamLevelSepc");
static_assert(sizeof(EndLevelLoader_CheckLoadStreamLevelSepc) == 0x000020, "Wrong size on EndLevelLoader_CheckLoadStreamLevelSepc");
static_assert(offsetof(EndLevelLoader_CheckLoadStreamLevelSepc, WorldContextObject) == 0x000000, "Member 'EndLevelLoader_CheckLoadStreamLevelSepc::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EndLevelLoader_CheckLoadStreamLevelSepc, LatentInfo) == 0x000008, "Member 'EndLevelLoader_CheckLoadStreamLevelSepc::LatentInfo' has a wrong offset!");

// Function EndGame.EndLevelLoader.DoLoadStreamLevelSet
// 0x0008 (0x0008 - 0x0000)
struct EndLevelLoader_DoLoadStreamLevelSet final
{
public:
	EStreamLevelSetSlot                           Slot;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndLevelLoader_DoLoadStreamLevelSet) == 0x000004, "Wrong alignment on EndLevelLoader_DoLoadStreamLevelSet");
static_assert(sizeof(EndLevelLoader_DoLoadStreamLevelSet) == 0x000008, "Wrong size on EndLevelLoader_DoLoadStreamLevelSet");
static_assert(offsetof(EndLevelLoader_DoLoadStreamLevelSet, Slot) == 0x000000, "Member 'EndLevelLoader_DoLoadStreamLevelSet::Slot' has a wrong offset!");
static_assert(offsetof(EndLevelLoader_DoLoadStreamLevelSet, ReturnValue) == 0x000004, "Member 'EndLevelLoader_DoLoadStreamLevelSet::ReturnValue' has a wrong offset!");

// Function EndGame.EndLevelLoader.FindActorFromLevel
// 0x0018 (0x0018 - 0x0000)
struct EndLevelLoader_FindActorFromLevel final
{
public:
	class FName                                   LevelName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActorName;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndLevelLoader_FindActorFromLevel) == 0x000008, "Wrong alignment on EndLevelLoader_FindActorFromLevel");
static_assert(sizeof(EndLevelLoader_FindActorFromLevel) == 0x000018, "Wrong size on EndLevelLoader_FindActorFromLevel");
static_assert(offsetof(EndLevelLoader_FindActorFromLevel, LevelName) == 0x000000, "Member 'EndLevelLoader_FindActorFromLevel::LevelName' has a wrong offset!");
static_assert(offsetof(EndLevelLoader_FindActorFromLevel, ActorName) == 0x000008, "Member 'EndLevelLoader_FindActorFromLevel::ActorName' has a wrong offset!");
static_assert(offsetof(EndLevelLoader_FindActorFromLevel, ReturnValue) == 0x000010, "Member 'EndLevelLoader_FindActorFromLevel::ReturnValue' has a wrong offset!");

// Function EndGame.EndLevelLoader.FindActorFromWorld
// 0x0010 (0x0010 - 0x0000)
struct EndLevelLoader_FindActorFromWorld final
{
public:
	class FName                                   ActorName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndLevelLoader_FindActorFromWorld) == 0x000008, "Wrong alignment on EndLevelLoader_FindActorFromWorld");
static_assert(sizeof(EndLevelLoader_FindActorFromWorld) == 0x000010, "Wrong size on EndLevelLoader_FindActorFromWorld");
static_assert(offsetof(EndLevelLoader_FindActorFromWorld, ActorName) == 0x000000, "Member 'EndLevelLoader_FindActorFromWorld::ActorName' has a wrong offset!");
static_assert(offsetof(EndLevelLoader_FindActorFromWorld, ReturnValue) == 0x000008, "Member 'EndLevelLoader_FindActorFromWorld::ReturnValue' has a wrong offset!");

// Function EndGame.EndLevelLoader.FindCharacterFromLevel
// 0x0018 (0x0018 - 0x0000)
struct EndLevelLoader_FindCharacterFromLevel final
{
public:
	class FName                                   LevelName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActorName;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AEndCharacter*                          ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndLevelLoader_FindCharacterFromLevel) == 0x000008, "Wrong alignment on EndLevelLoader_FindCharacterFromLevel");
static_assert(sizeof(EndLevelLoader_FindCharacterFromLevel) == 0x000018, "Wrong size on EndLevelLoader_FindCharacterFromLevel");
static_assert(offsetof(EndLevelLoader_FindCharacterFromLevel, LevelName) == 0x000000, "Member 'EndLevelLoader_FindCharacterFromLevel::LevelName' has a wrong offset!");
static_assert(offsetof(EndLevelLoader_FindCharacterFromLevel, ActorName) == 0x000008, "Member 'EndLevelLoader_FindCharacterFromLevel::ActorName' has a wrong offset!");
static_assert(offsetof(EndLevelLoader_FindCharacterFromLevel, ReturnValue) == 0x000010, "Member 'EndLevelLoader_FindCharacterFromLevel::ReturnValue' has a wrong offset!");

// Function EndGame.EndLevelLoader.FindCharacterFromWorld
// 0x0010 (0x0010 - 0x0000)
struct EndLevelLoader_FindCharacterFromWorld final
{
public:
	class FName                                   ActorName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AEndCharacter*                          ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndLevelLoader_FindCharacterFromWorld) == 0x000008, "Wrong alignment on EndLevelLoader_FindCharacterFromWorld");
static_assert(sizeof(EndLevelLoader_FindCharacterFromWorld) == 0x000010, "Wrong size on EndLevelLoader_FindCharacterFromWorld");
static_assert(offsetof(EndLevelLoader_FindCharacterFromWorld, ActorName) == 0x000000, "Member 'EndLevelLoader_FindCharacterFromWorld::ActorName' has a wrong offset!");
static_assert(offsetof(EndLevelLoader_FindCharacterFromWorld, ReturnValue) == 0x000008, "Member 'EndLevelLoader_FindCharacterFromWorld::ReturnValue' has a wrong offset!");

// Function EndGame.EndLevelLoader.FinishLoadStreamLevel
// 0x0008 (0x0008 - 0x0000)
struct EndLevelLoader_FinishLoadStreamLevel final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndLevelLoader_FinishLoadStreamLevel) == 0x000008, "Wrong alignment on EndLevelLoader_FinishLoadStreamLevel");
static_assert(sizeof(EndLevelLoader_FinishLoadStreamLevel) == 0x000008, "Wrong size on EndLevelLoader_FinishLoadStreamLevel");
static_assert(offsetof(EndLevelLoader_FinishLoadStreamLevel, WorldContextObject) == 0x000000, "Member 'EndLevelLoader_FinishLoadStreamLevel::WorldContextObject' has a wrong offset!");

// Function EndGame.EndLevelLoader.FinishLoadStreamLevelSet
// 0x0001 (0x0001 - 0x0000)
struct EndLevelLoader_FinishLoadStreamLevelSet final
{
public:
	EStreamLevelSetSlot                           Slot;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndLevelLoader_FinishLoadStreamLevelSet) == 0x000001, "Wrong alignment on EndLevelLoader_FinishLoadStreamLevelSet");
static_assert(sizeof(EndLevelLoader_FinishLoadStreamLevelSet) == 0x000001, "Wrong size on EndLevelLoader_FinishLoadStreamLevelSet");
static_assert(offsetof(EndLevelLoader_FinishLoadStreamLevelSet, Slot) == 0x000000, "Member 'EndLevelLoader_FinishLoadStreamLevelSet::Slot' has a wrong offset!");

// Function EndGame.EndLevelLoader.GetCacheLoadStreamHideLevelSet
// 0x0018 (0x0018 - 0x0000)
struct EndLevelLoader_GetCacheLoadStreamHideLevelSet final
{
public:
	EStreamLevelSetSlot                           Slot;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndLevelLoader_GetCacheLoadStreamHideLevelSet) == 0x000008, "Wrong alignment on EndLevelLoader_GetCacheLoadStreamHideLevelSet");
static_assert(sizeof(EndLevelLoader_GetCacheLoadStreamHideLevelSet) == 0x000018, "Wrong size on EndLevelLoader_GetCacheLoadStreamHideLevelSet");
static_assert(offsetof(EndLevelLoader_GetCacheLoadStreamHideLevelSet, Slot) == 0x000000, "Member 'EndLevelLoader_GetCacheLoadStreamHideLevelSet::Slot' has a wrong offset!");
static_assert(offsetof(EndLevelLoader_GetCacheLoadStreamHideLevelSet, ReturnValue) == 0x000008, "Member 'EndLevelLoader_GetCacheLoadStreamHideLevelSet::ReturnValue' has a wrong offset!");

// Function EndGame.EndLevelLoader.GetLoadStreamLevel
// 0x0010 (0x0010 - 0x0000)
struct EndLevelLoader_GetLoadStreamLevel final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndLevelLoader_GetLoadStreamLevel) == 0x000008, "Wrong alignment on EndLevelLoader_GetLoadStreamLevel");
static_assert(sizeof(EndLevelLoader_GetLoadStreamLevel) == 0x000010, "Wrong size on EndLevelLoader_GetLoadStreamLevel");
static_assert(offsetof(EndLevelLoader_GetLoadStreamLevel, WorldContextObject) == 0x000000, "Member 'EndLevelLoader_GetLoadStreamLevel::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EndLevelLoader_GetLoadStreamLevel, ReturnValue) == 0x000008, "Member 'EndLevelLoader_GetLoadStreamLevel::ReturnValue' has a wrong offset!");

// Function EndGame.EndLevelLoader.GetLoadStreamLevels
// 0x0020 (0x0020 - 0x0000)
struct EndLevelLoader_GetLoadStreamLevels final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          load;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndLevelLoader_GetLoadStreamLevels) == 0x000008, "Wrong alignment on EndLevelLoader_GetLoadStreamLevels");
static_assert(sizeof(EndLevelLoader_GetLoadStreamLevels) == 0x000020, "Wrong size on EndLevelLoader_GetLoadStreamLevels");
static_assert(offsetof(EndLevelLoader_GetLoadStreamLevels, WorldContextObject) == 0x000000, "Member 'EndLevelLoader_GetLoadStreamLevels::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EndLevelLoader_GetLoadStreamLevels, load) == 0x000008, "Member 'EndLevelLoader_GetLoadStreamLevels::load' has a wrong offset!");
static_assert(offsetof(EndLevelLoader_GetLoadStreamLevels, ReturnValue) == 0x000010, "Member 'EndLevelLoader_GetLoadStreamLevels::ReturnValue' has a wrong offset!");

// Function EndGame.EndLevelLoader.GetLoadStreamLevelSet
// 0x0018 (0x0018 - 0x0000)
struct EndLevelLoader_GetLoadStreamLevelSet final
{
public:
	EStreamLevelSetSlot                           Slot;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndLevelLoader_GetLoadStreamLevelSet) == 0x000008, "Wrong alignment on EndLevelLoader_GetLoadStreamLevelSet");
static_assert(sizeof(EndLevelLoader_GetLoadStreamLevelSet) == 0x000018, "Wrong size on EndLevelLoader_GetLoadStreamLevelSet");
static_assert(offsetof(EndLevelLoader_GetLoadStreamLevelSet, Slot) == 0x000000, "Member 'EndLevelLoader_GetLoadStreamLevelSet::Slot' has a wrong offset!");
static_assert(offsetof(EndLevelLoader_GetLoadStreamLevelSet, ReturnValue) == 0x000008, "Member 'EndLevelLoader_GetLoadStreamLevelSet::ReturnValue' has a wrong offset!");

// Function EndGame.EndLevelLoader.GetLoadStreamLevelSpec
// 0x0010 (0x0010 - 0x0000)
struct EndLevelLoader_GetLoadStreamLevelSpec final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndLevelLoader_GetLoadStreamLevelSpec) == 0x000008, "Wrong alignment on EndLevelLoader_GetLoadStreamLevelSpec");
static_assert(sizeof(EndLevelLoader_GetLoadStreamLevelSpec) == 0x000010, "Wrong size on EndLevelLoader_GetLoadStreamLevelSpec");
static_assert(offsetof(EndLevelLoader_GetLoadStreamLevelSpec, WorldContextObject) == 0x000000, "Member 'EndLevelLoader_GetLoadStreamLevelSpec::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EndLevelLoader_GetLoadStreamLevelSpec, ReturnValue) == 0x000008, "Member 'EndLevelLoader_GetLoadStreamLevelSpec::ReturnValue' has a wrong offset!");

// Function EndGame.EndLevelLoader.GetLoadStreamLevelSpecPriority
// 0x0010 (0x0010 - 0x0000)
struct EndLevelLoader_GetLoadStreamLevelSpecPriority final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndLevelLoader_GetLoadStreamLevelSpecPriority) == 0x000008, "Wrong alignment on EndLevelLoader_GetLoadStreamLevelSpecPriority");
static_assert(sizeof(EndLevelLoader_GetLoadStreamLevelSpecPriority) == 0x000010, "Wrong size on EndLevelLoader_GetLoadStreamLevelSpecPriority");
static_assert(offsetof(EndLevelLoader_GetLoadStreamLevelSpecPriority, WorldContextObject) == 0x000000, "Member 'EndLevelLoader_GetLoadStreamLevelSpecPriority::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EndLevelLoader_GetLoadStreamLevelSpecPriority, ReturnValue) == 0x000008, "Member 'EndLevelLoader_GetLoadStreamLevelSpecPriority::ReturnValue' has a wrong offset!");

// Function EndGame.EndLevelLoader.GetUnLoadStreamLevelSet
// 0x0018 (0x0018 - 0x0000)
struct EndLevelLoader_GetUnLoadStreamLevelSet final
{
public:
	EStreamLevelSetSlot                           Slot;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndLevelLoader_GetUnLoadStreamLevelSet) == 0x000008, "Wrong alignment on EndLevelLoader_GetUnLoadStreamLevelSet");
static_assert(sizeof(EndLevelLoader_GetUnLoadStreamLevelSet) == 0x000018, "Wrong size on EndLevelLoader_GetUnLoadStreamLevelSet");
static_assert(offsetof(EndLevelLoader_GetUnLoadStreamLevelSet, Slot) == 0x000000, "Member 'EndLevelLoader_GetUnLoadStreamLevelSet::Slot' has a wrong offset!");
static_assert(offsetof(EndLevelLoader_GetUnLoadStreamLevelSet, ReturnValue) == 0x000008, "Member 'EndLevelLoader_GetUnLoadStreamLevelSet::ReturnValue' has a wrong offset!");

// Function EndGame.EndLevelLoader.IsBoostLoading
// 0x0010 (0x0010 - 0x0000)
struct EndLevelLoader_IsBoostLoading final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndLevelLoader_IsBoostLoading) == 0x000008, "Wrong alignment on EndLevelLoader_IsBoostLoading");
static_assert(sizeof(EndLevelLoader_IsBoostLoading) == 0x000010, "Wrong size on EndLevelLoader_IsBoostLoading");
static_assert(offsetof(EndLevelLoader_IsBoostLoading, WorldContextObject) == 0x000000, "Member 'EndLevelLoader_IsBoostLoading::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EndLevelLoader_IsBoostLoading, ReturnValue) == 0x000008, "Member 'EndLevelLoader_IsBoostLoading::ReturnValue' has a wrong offset!");

// Function EndGame.EndLevelLoader.IsLoadStreamLevel
// 0x0010 (0x0010 - 0x0000)
struct EndLevelLoader_IsLoadStreamLevel final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndLevelLoader_IsLoadStreamLevel) == 0x000008, "Wrong alignment on EndLevelLoader_IsLoadStreamLevel");
static_assert(sizeof(EndLevelLoader_IsLoadStreamLevel) == 0x000010, "Wrong size on EndLevelLoader_IsLoadStreamLevel");
static_assert(offsetof(EndLevelLoader_IsLoadStreamLevel, WorldContextObject) == 0x000000, "Member 'EndLevelLoader_IsLoadStreamLevel::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EndLevelLoader_IsLoadStreamLevel, ReturnValue) == 0x000008, "Member 'EndLevelLoader_IsLoadStreamLevel::ReturnValue' has a wrong offset!");

// Function EndGame.EndLevelLoader.IsLoadStreamLevelSpec
// 0x0010 (0x0010 - 0x0000)
struct EndLevelLoader_IsLoadStreamLevelSpec final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndLevelLoader_IsLoadStreamLevelSpec) == 0x000008, "Wrong alignment on EndLevelLoader_IsLoadStreamLevelSpec");
static_assert(sizeof(EndLevelLoader_IsLoadStreamLevelSpec) == 0x000010, "Wrong size on EndLevelLoader_IsLoadStreamLevelSpec");
static_assert(offsetof(EndLevelLoader_IsLoadStreamLevelSpec, WorldContextObject) == 0x000000, "Member 'EndLevelLoader_IsLoadStreamLevelSpec::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EndLevelLoader_IsLoadStreamLevelSpec, ReturnValue) == 0x000008, "Member 'EndLevelLoader_IsLoadStreamLevelSpec::ReturnValue' has a wrong offset!");

// Function EndGame.EndLevelLoader.LoadStreamLevelGroups
// 0x0038 (0x0038 - 0x0000)
struct EndLevelLoader_LoadStreamLevelGroups final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Priority;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           LevelNames;                                        // 0x0010(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0020(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndLevelLoader_LoadStreamLevelGroups) == 0x000008, "Wrong alignment on EndLevelLoader_LoadStreamLevelGroups");
static_assert(sizeof(EndLevelLoader_LoadStreamLevelGroups) == 0x000038, "Wrong size on EndLevelLoader_LoadStreamLevelGroups");
static_assert(offsetof(EndLevelLoader_LoadStreamLevelGroups, WorldContextObject) == 0x000000, "Member 'EndLevelLoader_LoadStreamLevelGroups::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EndLevelLoader_LoadStreamLevelGroups, Priority) == 0x000008, "Member 'EndLevelLoader_LoadStreamLevelGroups::Priority' has a wrong offset!");
static_assert(offsetof(EndLevelLoader_LoadStreamLevelGroups, LevelNames) == 0x000010, "Member 'EndLevelLoader_LoadStreamLevelGroups::LevelNames' has a wrong offset!");
static_assert(offsetof(EndLevelLoader_LoadStreamLevelGroups, LatentInfo) == 0x000020, "Member 'EndLevelLoader_LoadStreamLevelGroups::LatentInfo' has a wrong offset!");

// Function EndGame.EndLevelLoader.LoadStreamLevelGroupsWithHide
// 0x0050 (0x0050 - 0x0000)
struct EndLevelLoader_LoadStreamLevelGroupsWithHide final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Priority;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           LevelNames;                                        // 0x0010(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<uint8>                                 hides;                                             // 0x0020(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	EStreamLevelSetSlot                           Slot;                                              // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0038(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndLevelLoader_LoadStreamLevelGroupsWithHide) == 0x000008, "Wrong alignment on EndLevelLoader_LoadStreamLevelGroupsWithHide");
static_assert(sizeof(EndLevelLoader_LoadStreamLevelGroupsWithHide) == 0x000050, "Wrong size on EndLevelLoader_LoadStreamLevelGroupsWithHide");
static_assert(offsetof(EndLevelLoader_LoadStreamLevelGroupsWithHide, WorldContextObject) == 0x000000, "Member 'EndLevelLoader_LoadStreamLevelGroupsWithHide::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EndLevelLoader_LoadStreamLevelGroupsWithHide, Priority) == 0x000008, "Member 'EndLevelLoader_LoadStreamLevelGroupsWithHide::Priority' has a wrong offset!");
static_assert(offsetof(EndLevelLoader_LoadStreamLevelGroupsWithHide, LevelNames) == 0x000010, "Member 'EndLevelLoader_LoadStreamLevelGroupsWithHide::LevelNames' has a wrong offset!");
static_assert(offsetof(EndLevelLoader_LoadStreamLevelGroupsWithHide, hides) == 0x000020, "Member 'EndLevelLoader_LoadStreamLevelGroupsWithHide::hides' has a wrong offset!");
static_assert(offsetof(EndLevelLoader_LoadStreamLevelGroupsWithHide, Slot) == 0x000030, "Member 'EndLevelLoader_LoadStreamLevelGroupsWithHide::Slot' has a wrong offset!");
static_assert(offsetof(EndLevelLoader_LoadStreamLevelGroupsWithHide, LatentInfo) == 0x000038, "Member 'EndLevelLoader_LoadStreamLevelGroupsWithHide::LatentInfo' has a wrong offset!");

// Function EndGame.EndLevelLoader.LoadStreamLevels
// 0x0030 (0x0030 - 0x0000)
struct EndLevelLoader_LoadStreamLevels final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           LevelNames;                                        // 0x0008(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0018(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndLevelLoader_LoadStreamLevels) == 0x000008, "Wrong alignment on EndLevelLoader_LoadStreamLevels");
static_assert(sizeof(EndLevelLoader_LoadStreamLevels) == 0x000030, "Wrong size on EndLevelLoader_LoadStreamLevels");
static_assert(offsetof(EndLevelLoader_LoadStreamLevels, WorldContextObject) == 0x000000, "Member 'EndLevelLoader_LoadStreamLevels::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EndLevelLoader_LoadStreamLevels, LevelNames) == 0x000008, "Member 'EndLevelLoader_LoadStreamLevels::LevelNames' has a wrong offset!");
static_assert(offsetof(EndLevelLoader_LoadStreamLevels, LatentInfo) == 0x000018, "Member 'EndLevelLoader_LoadStreamLevels::LatentInfo' has a wrong offset!");

// Function EndGame.EndLevelLoader.LoadStreamLevelSet
// 0x0038 (0x0038 - 0x0000)
struct EndLevelLoader_LoadStreamLevelSet final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EStreamLevelSetSlot                           Slot;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Priority;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           LevelNames;                                        // 0x0010(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0020(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndLevelLoader_LoadStreamLevelSet) == 0x000008, "Wrong alignment on EndLevelLoader_LoadStreamLevelSet");
static_assert(sizeof(EndLevelLoader_LoadStreamLevelSet) == 0x000038, "Wrong size on EndLevelLoader_LoadStreamLevelSet");
static_assert(offsetof(EndLevelLoader_LoadStreamLevelSet, WorldContextObject) == 0x000000, "Member 'EndLevelLoader_LoadStreamLevelSet::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EndLevelLoader_LoadStreamLevelSet, Slot) == 0x000008, "Member 'EndLevelLoader_LoadStreamLevelSet::Slot' has a wrong offset!");
static_assert(offsetof(EndLevelLoader_LoadStreamLevelSet, Priority) == 0x00000C, "Member 'EndLevelLoader_LoadStreamLevelSet::Priority' has a wrong offset!");
static_assert(offsetof(EndLevelLoader_LoadStreamLevelSet, LevelNames) == 0x000010, "Member 'EndLevelLoader_LoadStreamLevelSet::LevelNames' has a wrong offset!");
static_assert(offsetof(EndLevelLoader_LoadStreamLevelSet, LatentInfo) == 0x000020, "Member 'EndLevelLoader_LoadStreamLevelSet::LatentInfo' has a wrong offset!");

// Function EndGame.EndLevelLoader.LoadStreamLevelSingle
// 0x0030 (0x0030 - 0x0000)
struct EndLevelLoader_LoadStreamLevelSingle final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Priority;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LevelNames;                                        // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0018(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndLevelLoader_LoadStreamLevelSingle) == 0x000008, "Wrong alignment on EndLevelLoader_LoadStreamLevelSingle");
static_assert(sizeof(EndLevelLoader_LoadStreamLevelSingle) == 0x000030, "Wrong size on EndLevelLoader_LoadStreamLevelSingle");
static_assert(offsetof(EndLevelLoader_LoadStreamLevelSingle, WorldContextObject) == 0x000000, "Member 'EndLevelLoader_LoadStreamLevelSingle::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EndLevelLoader_LoadStreamLevelSingle, Priority) == 0x000008, "Member 'EndLevelLoader_LoadStreamLevelSingle::Priority' has a wrong offset!");
static_assert(offsetof(EndLevelLoader_LoadStreamLevelSingle, LevelNames) == 0x00000C, "Member 'EndLevelLoader_LoadStreamLevelSingle::LevelNames' has a wrong offset!");
static_assert(offsetof(EndLevelLoader_LoadStreamLevelSingle, LatentInfo) == 0x000018, "Member 'EndLevelLoader_LoadStreamLevelSingle::LatentInfo' has a wrong offset!");

// Function EndGame.EndLevelLoader.LoadStreamLevelSingleWithHide
// 0x0030 (0x0030 - 0x0000)
struct EndLevelLoader_LoadStreamLevelSingleWithHide final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Priority;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LevelNames;                                        // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         hide;                                              // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0018(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndLevelLoader_LoadStreamLevelSingleWithHide) == 0x000008, "Wrong alignment on EndLevelLoader_LoadStreamLevelSingleWithHide");
static_assert(sizeof(EndLevelLoader_LoadStreamLevelSingleWithHide) == 0x000030, "Wrong size on EndLevelLoader_LoadStreamLevelSingleWithHide");
static_assert(offsetof(EndLevelLoader_LoadStreamLevelSingleWithHide, WorldContextObject) == 0x000000, "Member 'EndLevelLoader_LoadStreamLevelSingleWithHide::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EndLevelLoader_LoadStreamLevelSingleWithHide, Priority) == 0x000008, "Member 'EndLevelLoader_LoadStreamLevelSingleWithHide::Priority' has a wrong offset!");
static_assert(offsetof(EndLevelLoader_LoadStreamLevelSingleWithHide, LevelNames) == 0x00000C, "Member 'EndLevelLoader_LoadStreamLevelSingleWithHide::LevelNames' has a wrong offset!");
static_assert(offsetof(EndLevelLoader_LoadStreamLevelSingleWithHide, hide) == 0x000014, "Member 'EndLevelLoader_LoadStreamLevelSingleWithHide::hide' has a wrong offset!");
static_assert(offsetof(EndLevelLoader_LoadStreamLevelSingleWithHide, LatentInfo) == 0x000018, "Member 'EndLevelLoader_LoadStreamLevelSingleWithHide::LatentInfo' has a wrong offset!");

// Function EndGame.EndLevelLoader.LoadStreamLevelSpec
// 0x0030 (0x0030 - 0x0000)
struct EndLevelLoader_LoadStreamLevelSpec final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Priority;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SpecName;                                          // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0018(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndLevelLoader_LoadStreamLevelSpec) == 0x000008, "Wrong alignment on EndLevelLoader_LoadStreamLevelSpec");
static_assert(sizeof(EndLevelLoader_LoadStreamLevelSpec) == 0x000030, "Wrong size on EndLevelLoader_LoadStreamLevelSpec");
static_assert(offsetof(EndLevelLoader_LoadStreamLevelSpec, WorldContextObject) == 0x000000, "Member 'EndLevelLoader_LoadStreamLevelSpec::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EndLevelLoader_LoadStreamLevelSpec, Priority) == 0x000008, "Member 'EndLevelLoader_LoadStreamLevelSpec::Priority' has a wrong offset!");
static_assert(offsetof(EndLevelLoader_LoadStreamLevelSpec, SpecName) == 0x00000C, "Member 'EndLevelLoader_LoadStreamLevelSpec::SpecName' has a wrong offset!");
static_assert(offsetof(EndLevelLoader_LoadStreamLevelSpec, LatentInfo) == 0x000018, "Member 'EndLevelLoader_LoadStreamLevelSpec::LatentInfo' has a wrong offset!");

// Function EndGame.EndLevelLoader.LoadStreamLevelSpecInternal
// 0x0030 (0x0030 - 0x0000)
struct EndLevelLoader_LoadStreamLevelSpecInternal final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Priority;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SpecName;                                          // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0018(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndLevelLoader_LoadStreamLevelSpecInternal) == 0x000008, "Wrong alignment on EndLevelLoader_LoadStreamLevelSpecInternal");
static_assert(sizeof(EndLevelLoader_LoadStreamLevelSpecInternal) == 0x000030, "Wrong size on EndLevelLoader_LoadStreamLevelSpecInternal");
static_assert(offsetof(EndLevelLoader_LoadStreamLevelSpecInternal, WorldContextObject) == 0x000000, "Member 'EndLevelLoader_LoadStreamLevelSpecInternal::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EndLevelLoader_LoadStreamLevelSpecInternal, Priority) == 0x000008, "Member 'EndLevelLoader_LoadStreamLevelSpecInternal::Priority' has a wrong offset!");
static_assert(offsetof(EndLevelLoader_LoadStreamLevelSpecInternal, SpecName) == 0x00000C, "Member 'EndLevelLoader_LoadStreamLevelSpecInternal::SpecName' has a wrong offset!");
static_assert(offsetof(EndLevelLoader_LoadStreamLevelSpecInternal, LatentInfo) == 0x000018, "Member 'EndLevelLoader_LoadStreamLevelSpecInternal::LatentInfo' has a wrong offset!");

// Function EndGame.EndLevelLoader.MakeLongLevelName
// 0x0020 (0x0020 - 0x0000)
struct EndLevelLoader_MakeLongLevelName final
{
public:
	class FString                                 ShortName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndLevelLoader_MakeLongLevelName) == 0x000008, "Wrong alignment on EndLevelLoader_MakeLongLevelName");
static_assert(sizeof(EndLevelLoader_MakeLongLevelName) == 0x000020, "Wrong size on EndLevelLoader_MakeLongLevelName");
static_assert(offsetof(EndLevelLoader_MakeLongLevelName, ShortName) == 0x000000, "Member 'EndLevelLoader_MakeLongLevelName::ShortName' has a wrong offset!");
static_assert(offsetof(EndLevelLoader_MakeLongLevelName, ReturnValue) == 0x000010, "Member 'EndLevelLoader_MakeLongLevelName::ReturnValue' has a wrong offset!");

// Function EndGame.EndLevelLoader.SetShowFrameLimitFree
// 0x0010 (0x0010 - 0x0000)
struct EndLevelLoader_SetShowFrameLimitFree final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isFree;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndLevelLoader_SetShowFrameLimitFree) == 0x000008, "Wrong alignment on EndLevelLoader_SetShowFrameLimitFree");
static_assert(sizeof(EndLevelLoader_SetShowFrameLimitFree) == 0x000010, "Wrong size on EndLevelLoader_SetShowFrameLimitFree");
static_assert(offsetof(EndLevelLoader_SetShowFrameLimitFree, WorldContextObject) == 0x000000, "Member 'EndLevelLoader_SetShowFrameLimitFree::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EndLevelLoader_SetShowFrameLimitFree, isFree) == 0x000008, "Member 'EndLevelLoader_SetShowFrameLimitFree::isFree' has a wrong offset!");

// Function EndGame.EndLevelLoader.UnloadStreamLevelGroups
// 0x0038 (0x0038 - 0x0000)
struct EndLevelLoader_UnloadStreamLevelGroups final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Priority;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           LevelNames;                                        // 0x0010(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0020(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndLevelLoader_UnloadStreamLevelGroups) == 0x000008, "Wrong alignment on EndLevelLoader_UnloadStreamLevelGroups");
static_assert(sizeof(EndLevelLoader_UnloadStreamLevelGroups) == 0x000038, "Wrong size on EndLevelLoader_UnloadStreamLevelGroups");
static_assert(offsetof(EndLevelLoader_UnloadStreamLevelGroups, WorldContextObject) == 0x000000, "Member 'EndLevelLoader_UnloadStreamLevelGroups::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EndLevelLoader_UnloadStreamLevelGroups, Priority) == 0x000008, "Member 'EndLevelLoader_UnloadStreamLevelGroups::Priority' has a wrong offset!");
static_assert(offsetof(EndLevelLoader_UnloadStreamLevelGroups, LevelNames) == 0x000010, "Member 'EndLevelLoader_UnloadStreamLevelGroups::LevelNames' has a wrong offset!");
static_assert(offsetof(EndLevelLoader_UnloadStreamLevelGroups, LatentInfo) == 0x000020, "Member 'EndLevelLoader_UnloadStreamLevelGroups::LatentInfo' has a wrong offset!");

// Function EndGame.EndLevelLoader.UnloadStreamLevels
// 0x0030 (0x0030 - 0x0000)
struct EndLevelLoader_UnloadStreamLevels final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           LevelNames;                                        // 0x0008(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0018(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndLevelLoader_UnloadStreamLevels) == 0x000008, "Wrong alignment on EndLevelLoader_UnloadStreamLevels");
static_assert(sizeof(EndLevelLoader_UnloadStreamLevels) == 0x000030, "Wrong size on EndLevelLoader_UnloadStreamLevels");
static_assert(offsetof(EndLevelLoader_UnloadStreamLevels, WorldContextObject) == 0x000000, "Member 'EndLevelLoader_UnloadStreamLevels::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EndLevelLoader_UnloadStreamLevels, LevelNames) == 0x000008, "Member 'EndLevelLoader_UnloadStreamLevels::LevelNames' has a wrong offset!");
static_assert(offsetof(EndLevelLoader_UnloadStreamLevels, LatentInfo) == 0x000018, "Member 'EndLevelLoader_UnloadStreamLevels::LatentInfo' has a wrong offset!");

// Function EndGame.EndLevelLoader.UnloadStreamLevelSingle
// 0x0030 (0x0030 - 0x0000)
struct EndLevelLoader_UnloadStreamLevelSingle final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Priority;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LevelNames;                                        // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0018(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndLevelLoader_UnloadStreamLevelSingle) == 0x000008, "Wrong alignment on EndLevelLoader_UnloadStreamLevelSingle");
static_assert(sizeof(EndLevelLoader_UnloadStreamLevelSingle) == 0x000030, "Wrong size on EndLevelLoader_UnloadStreamLevelSingle");
static_assert(offsetof(EndLevelLoader_UnloadStreamLevelSingle, WorldContextObject) == 0x000000, "Member 'EndLevelLoader_UnloadStreamLevelSingle::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EndLevelLoader_UnloadStreamLevelSingle, Priority) == 0x000008, "Member 'EndLevelLoader_UnloadStreamLevelSingle::Priority' has a wrong offset!");
static_assert(offsetof(EndLevelLoader_UnloadStreamLevelSingle, LevelNames) == 0x00000C, "Member 'EndLevelLoader_UnloadStreamLevelSingle::LevelNames' has a wrong offset!");
static_assert(offsetof(EndLevelLoader_UnloadStreamLevelSingle, LatentInfo) == 0x000018, "Member 'EndLevelLoader_UnloadStreamLevelSingle::LatentInfo' has a wrong offset!");

// Function EndGame.EndLevelLoader.UnLoadStreamLevelSpec
// 0x0030 (0x0030 - 0x0000)
struct EndLevelLoader_UnLoadStreamLevelSpec final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Priority;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SpecName;                                          // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0018(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndLevelLoader_UnLoadStreamLevelSpec) == 0x000008, "Wrong alignment on EndLevelLoader_UnLoadStreamLevelSpec");
static_assert(sizeof(EndLevelLoader_UnLoadStreamLevelSpec) == 0x000030, "Wrong size on EndLevelLoader_UnLoadStreamLevelSpec");
static_assert(offsetof(EndLevelLoader_UnLoadStreamLevelSpec, WorldContextObject) == 0x000000, "Member 'EndLevelLoader_UnLoadStreamLevelSpec::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EndLevelLoader_UnLoadStreamLevelSpec, Priority) == 0x000008, "Member 'EndLevelLoader_UnLoadStreamLevelSpec::Priority' has a wrong offset!");
static_assert(offsetof(EndLevelLoader_UnLoadStreamLevelSpec, SpecName) == 0x00000C, "Member 'EndLevelLoader_UnLoadStreamLevelSpec::SpecName' has a wrong offset!");
static_assert(offsetof(EndLevelLoader_UnLoadStreamLevelSpec, LatentInfo) == 0x000018, "Member 'EndLevelLoader_UnLoadStreamLevelSpec::LatentInfo' has a wrong offset!");

// Function EndGame.EndLevelLoader.UnLoadStreamLevelSpecInternal
// 0x0030 (0x0030 - 0x0000)
struct EndLevelLoader_UnLoadStreamLevelSpecInternal final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Priority;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SpecName;                                          // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0018(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndLevelLoader_UnLoadStreamLevelSpecInternal) == 0x000008, "Wrong alignment on EndLevelLoader_UnLoadStreamLevelSpecInternal");
static_assert(sizeof(EndLevelLoader_UnLoadStreamLevelSpecInternal) == 0x000030, "Wrong size on EndLevelLoader_UnLoadStreamLevelSpecInternal");
static_assert(offsetof(EndLevelLoader_UnLoadStreamLevelSpecInternal, WorldContextObject) == 0x000000, "Member 'EndLevelLoader_UnLoadStreamLevelSpecInternal::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EndLevelLoader_UnLoadStreamLevelSpecInternal, Priority) == 0x000008, "Member 'EndLevelLoader_UnLoadStreamLevelSpecInternal::Priority' has a wrong offset!");
static_assert(offsetof(EndLevelLoader_UnLoadStreamLevelSpecInternal, SpecName) == 0x00000C, "Member 'EndLevelLoader_UnLoadStreamLevelSpecInternal::SpecName' has a wrong offset!");
static_assert(offsetof(EndLevelLoader_UnLoadStreamLevelSpecInternal, LatentInfo) == 0x000018, "Member 'EndLevelLoader_UnLoadStreamLevelSpecInternal::LatentInfo' has a wrong offset!");

// Function EndGame.EndLevelLoader.WaitShowSlicingLevelSet
// 0x0020 (0x0020 - 0x0000)
struct EndLevelLoader_WaitShowSlicingLevelSet final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndLevelLoader_WaitShowSlicingLevelSet) == 0x000008, "Wrong alignment on EndLevelLoader_WaitShowSlicingLevelSet");
static_assert(sizeof(EndLevelLoader_WaitShowSlicingLevelSet) == 0x000020, "Wrong size on EndLevelLoader_WaitShowSlicingLevelSet");
static_assert(offsetof(EndLevelLoader_WaitShowSlicingLevelSet, WorldContextObject) == 0x000000, "Member 'EndLevelLoader_WaitShowSlicingLevelSet::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EndLevelLoader_WaitShowSlicingLevelSet, LatentInfo) == 0x000008, "Member 'EndLevelLoader_WaitShowSlicingLevelSet::LatentInfo' has a wrong offset!");

// Function EndGame.EndLevelLoader.WaitStreamLevelEmpty
// 0x0020 (0x0020 - 0x0000)
struct EndLevelLoader_WaitStreamLevelEmpty final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndLevelLoader_WaitStreamLevelEmpty) == 0x000008, "Wrong alignment on EndLevelLoader_WaitStreamLevelEmpty");
static_assert(sizeof(EndLevelLoader_WaitStreamLevelEmpty) == 0x000020, "Wrong size on EndLevelLoader_WaitStreamLevelEmpty");
static_assert(offsetof(EndLevelLoader_WaitStreamLevelEmpty, WorldContextObject) == 0x000000, "Member 'EndLevelLoader_WaitStreamLevelEmpty::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EndLevelLoader_WaitStreamLevelEmpty, LatentInfo) == 0x000008, "Member 'EndLevelLoader_WaitStreamLevelEmpty::LatentInfo' has a wrong offset!");

// Function EndGame.EndListBox.RefreshItem
// 0x0004 (0x0004 - 0x0000)
struct EndListBox_RefreshItem final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndListBox_RefreshItem) == 0x000004, "Wrong alignment on EndListBox_RefreshItem");
static_assert(sizeof(EndListBox_RefreshItem) == 0x000004, "Wrong size on EndListBox_RefreshItem");
static_assert(offsetof(EndListBox_RefreshItem, Index_0) == 0x000000, "Member 'EndListBox_RefreshItem::Index_0' has a wrong offset!");

// Function EndGame.EndListBox.SetDesiredCount
// 0x0004 (0x0004 - 0x0000)
struct EndListBox_SetDesiredCount final
{
public:
	int32                                         InDesiredCount;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndListBox_SetDesiredCount) == 0x000004, "Wrong alignment on EndListBox_SetDesiredCount");
static_assert(sizeof(EndListBox_SetDesiredCount) == 0x000004, "Wrong size on EndListBox_SetDesiredCount");
static_assert(offsetof(EndListBox_SetDesiredCount, InDesiredCount) == 0x000000, "Member 'EndListBox_SetDesiredCount::InDesiredCount' has a wrong offset!");

// Function EndGame.EndListBox.SetItemCount
// 0x0004 (0x0004 - 0x0000)
struct EndListBox_SetItemCount final
{
public:
	int32                                         InItemCount;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndListBox_SetItemCount) == 0x000004, "Wrong alignment on EndListBox_SetItemCount");
static_assert(sizeof(EndListBox_SetItemCount) == 0x000004, "Wrong size on EndListBox_SetItemCount");
static_assert(offsetof(EndListBox_SetItemCount, InItemCount) == 0x000000, "Member 'EndListBox_SetItemCount::InItemCount' has a wrong offset!");

// Function EndGame.EndListBox.SetPadding
// 0x0010 (0x0010 - 0x0000)
struct EndListBox_SetPadding final
{
public:
	struct FMargin                                InPadding;                                         // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndListBox_SetPadding) == 0x000004, "Wrong alignment on EndListBox_SetPadding");
static_assert(sizeof(EndListBox_SetPadding) == 0x000010, "Wrong size on EndListBox_SetPadding");
static_assert(offsetof(EndListBox_SetPadding, InPadding) == 0x000000, "Member 'EndListBox_SetPadding::InPadding' has a wrong offset!");

// Function EndGame.EndListBox.SetSelectedIndex
// 0x0008 (0x0008 - 0x0000)
struct EndListBox_SetSelectedIndex final
{
public:
	int32                                         UserIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SlotIndex;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndListBox_SetSelectedIndex) == 0x000004, "Wrong alignment on EndListBox_SetSelectedIndex");
static_assert(sizeof(EndListBox_SetSelectedIndex) == 0x000008, "Wrong size on EndListBox_SetSelectedIndex");
static_assert(offsetof(EndListBox_SetSelectedIndex, UserIndex) == 0x000000, "Member 'EndListBox_SetSelectedIndex::UserIndex' has a wrong offset!");
static_assert(offsetof(EndListBox_SetSelectedIndex, SlotIndex) == 0x000004, "Member 'EndListBox_SetSelectedIndex::SlotIndex' has a wrong offset!");

// Function EndGame.EndListBox.GetChildAt
// 0x0010 (0x0010 - 0x0000)
struct EndListBox_GetChildAt final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndListBox_GetChildAt) == 0x000008, "Wrong alignment on EndListBox_GetChildAt");
static_assert(sizeof(EndListBox_GetChildAt) == 0x000010, "Wrong size on EndListBox_GetChildAt");
static_assert(offsetof(EndListBox_GetChildAt, Index_0) == 0x000000, "Member 'EndListBox_GetChildAt::Index_0' has a wrong offset!");
static_assert(offsetof(EndListBox_GetChildAt, ReturnValue) == 0x000008, "Member 'EndListBox_GetChildAt::ReturnValue' has a wrong offset!");

// Function EndGame.EndListBox.GetSelectedIndex
// 0x0008 (0x0008 - 0x0000)
struct EndListBox_GetSelectedIndex final
{
public:
	int32                                         UserIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndListBox_GetSelectedIndex) == 0x000004, "Wrong alignment on EndListBox_GetSelectedIndex");
static_assert(sizeof(EndListBox_GetSelectedIndex) == 0x000008, "Wrong size on EndListBox_GetSelectedIndex");
static_assert(offsetof(EndListBox_GetSelectedIndex, UserIndex) == 0x000000, "Member 'EndListBox_GetSelectedIndex::UserIndex' has a wrong offset!");
static_assert(offsetof(EndListBox_GetSelectedIndex, ReturnValue) == 0x000004, "Member 'EndListBox_GetSelectedIndex::ReturnValue' has a wrong offset!");

// Function EndGame.EndMainBattleSettingLimitList.OnEndBattleSettingLimitListLevel
// 0x0010 (0x0010 - 0x0000)
struct EndMainBattleSettingLimitList_OnEndBattleSettingLimitListLevel final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMainBattleSettingLimitList_OnEndBattleSettingLimitListLevel) == 0x000008, "Wrong alignment on EndMainBattleSettingLimitList_OnEndBattleSettingLimitListLevel");
static_assert(sizeof(EndMainBattleSettingLimitList_OnEndBattleSettingLimitListLevel) == 0x000010, "Wrong size on EndMainBattleSettingLimitList_OnEndBattleSettingLimitListLevel");
static_assert(offsetof(EndMainBattleSettingLimitList_OnEndBattleSettingLimitListLevel, ItemWidget) == 0x000000, "Member 'EndMainBattleSettingLimitList_OnEndBattleSettingLimitListLevel::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndMainBattleSettingLimitList_OnEndBattleSettingLimitListLevel, ItemIndex) == 0x000008, "Member 'EndMainBattleSettingLimitList_OnEndBattleSettingLimitListLevel::ItemIndex' has a wrong offset!");

// Function EndGame.EndMainBattleSettingMenu.OnAbilityCellPressed
// 0x0004 (0x0004 - 0x0000)
struct EndMainBattleSettingMenu_OnAbilityCellPressed final
{
public:
	int32                                         AbilityCellIndex;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainBattleSettingMenu_OnAbilityCellPressed) == 0x000004, "Wrong alignment on EndMainBattleSettingMenu_OnAbilityCellPressed");
static_assert(sizeof(EndMainBattleSettingMenu_OnAbilityCellPressed) == 0x000004, "Wrong size on EndMainBattleSettingMenu_OnAbilityCellPressed");
static_assert(offsetof(EndMainBattleSettingMenu_OnAbilityCellPressed, AbilityCellIndex) == 0x000000, "Member 'EndMainBattleSettingMenu_OnAbilityCellPressed::AbilityCellIndex' has a wrong offset!");

// Function EndGame.EndMainBattleSettingMenu.OnAbilityCellSetup
// 0x0010 (0x0010 - 0x0000)
struct EndMainBattleSettingMenu_OnAbilityCellSetup final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMainBattleSettingMenu_OnAbilityCellSetup) == 0x000008, "Wrong alignment on EndMainBattleSettingMenu_OnAbilityCellSetup");
static_assert(sizeof(EndMainBattleSettingMenu_OnAbilityCellSetup) == 0x000010, "Wrong size on EndMainBattleSettingMenu_OnAbilityCellSetup");
static_assert(offsetof(EndMainBattleSettingMenu_OnAbilityCellSetup, ItemWidget) == 0x000000, "Member 'EndMainBattleSettingMenu_OnAbilityCellSetup::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndMainBattleSettingMenu_OnAbilityCellSetup, CellIndex) == 0x000008, "Member 'EndMainBattleSettingMenu_OnAbilityCellSetup::CellIndex' has a wrong offset!");

// Function EndGame.EndMainBattleSettingMenu.OnAbilitySelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndMainBattleSettingMenu_OnAbilitySelectedIndexChanged final
{
public:
	int32                                         AbilityCellIndex;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainBattleSettingMenu_OnAbilitySelectedIndexChanged) == 0x000004, "Wrong alignment on EndMainBattleSettingMenu_OnAbilitySelectedIndexChanged");
static_assert(sizeof(EndMainBattleSettingMenu_OnAbilitySelectedIndexChanged) == 0x000004, "Wrong size on EndMainBattleSettingMenu_OnAbilitySelectedIndexChanged");
static_assert(offsetof(EndMainBattleSettingMenu_OnAbilitySelectedIndexChanged, AbilityCellIndex) == 0x000000, "Member 'EndMainBattleSettingMenu_OnAbilitySelectedIndexChanged::AbilityCellIndex' has a wrong offset!");

// Function EndGame.EndMainBattleSettingMenu.OnCategoryCellPressed
// 0x0004 (0x0004 - 0x0000)
struct EndMainBattleSettingMenu_OnCategoryCellPressed final
{
public:
	int32                                         CommandCellIndex;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainBattleSettingMenu_OnCategoryCellPressed) == 0x000004, "Wrong alignment on EndMainBattleSettingMenu_OnCategoryCellPressed");
static_assert(sizeof(EndMainBattleSettingMenu_OnCategoryCellPressed) == 0x000004, "Wrong size on EndMainBattleSettingMenu_OnCategoryCellPressed");
static_assert(offsetof(EndMainBattleSettingMenu_OnCategoryCellPressed, CommandCellIndex) == 0x000000, "Member 'EndMainBattleSettingMenu_OnCategoryCellPressed::CommandCellIndex' has a wrong offset!");

// Function EndGame.EndMainBattleSettingMenu.OnCategoryCellSetup
// 0x0010 (0x0010 - 0x0000)
struct EndMainBattleSettingMenu_OnCategoryCellSetup final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMainBattleSettingMenu_OnCategoryCellSetup) == 0x000008, "Wrong alignment on EndMainBattleSettingMenu_OnCategoryCellSetup");
static_assert(sizeof(EndMainBattleSettingMenu_OnCategoryCellSetup) == 0x000010, "Wrong size on EndMainBattleSettingMenu_OnCategoryCellSetup");
static_assert(offsetof(EndMainBattleSettingMenu_OnCategoryCellSetup, ItemWidget) == 0x000000, "Member 'EndMainBattleSettingMenu_OnCategoryCellSetup::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndMainBattleSettingMenu_OnCategoryCellSetup, CellIndex) == 0x000008, "Member 'EndMainBattleSettingMenu_OnCategoryCellSetup::CellIndex' has a wrong offset!");

// Function EndGame.EndMainBattleSettingMenu.OnCategorySelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndMainBattleSettingMenu_OnCategorySelectedIndexChanged final
{
public:
	int32                                         CategoryCellIndex;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainBattleSettingMenu_OnCategorySelectedIndexChanged) == 0x000004, "Wrong alignment on EndMainBattleSettingMenu_OnCategorySelectedIndexChanged");
static_assert(sizeof(EndMainBattleSettingMenu_OnCategorySelectedIndexChanged) == 0x000004, "Wrong size on EndMainBattleSettingMenu_OnCategorySelectedIndexChanged");
static_assert(offsetof(EndMainBattleSettingMenu_OnCategorySelectedIndexChanged, CategoryCellIndex) == 0x000000, "Member 'EndMainBattleSettingMenu_OnCategorySelectedIndexChanged::CategoryCellIndex' has a wrong offset!");

// Function EndGame.EndMainBattleSettingMenu.OnLeftMenuPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndMainBattleSettingMenu_OnLeftMenuPressedItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainBattleSettingMenu_OnLeftMenuPressedItem) == 0x000004, "Wrong alignment on EndMainBattleSettingMenu_OnLeftMenuPressedItem");
static_assert(sizeof(EndMainBattleSettingMenu_OnLeftMenuPressedItem) == 0x000004, "Wrong size on EndMainBattleSettingMenu_OnLeftMenuPressedItem");
static_assert(offsetof(EndMainBattleSettingMenu_OnLeftMenuPressedItem, CellIndex) == 0x000000, "Member 'EndMainBattleSettingMenu_OnLeftMenuPressedItem::CellIndex' has a wrong offset!");

// Function EndGame.EndMainBattleSettingMenu.OnLeftMenuSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndMainBattleSettingMenu_OnLeftMenuSelectedIndexChanged final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainBattleSettingMenu_OnLeftMenuSelectedIndexChanged) == 0x000004, "Wrong alignment on EndMainBattleSettingMenu_OnLeftMenuSelectedIndexChanged");
static_assert(sizeof(EndMainBattleSettingMenu_OnLeftMenuSelectedIndexChanged) == 0x000004, "Wrong size on EndMainBattleSettingMenu_OnLeftMenuSelectedIndexChanged");
static_assert(offsetof(EndMainBattleSettingMenu_OnLeftMenuSelectedIndexChanged, CellIndex) == 0x000000, "Member 'EndMainBattleSettingMenu_OnLeftMenuSelectedIndexChanged::CellIndex' has a wrong offset!");

// Function EndGame.EndMainBattleSettingMenu.OnLeftMenuSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndMainBattleSettingMenu_OnLeftMenuSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMainBattleSettingMenu_OnLeftMenuSetupItem) == 0x000008, "Wrong alignment on EndMainBattleSettingMenu_OnLeftMenuSetupItem");
static_assert(sizeof(EndMainBattleSettingMenu_OnLeftMenuSetupItem) == 0x000010, "Wrong size on EndMainBattleSettingMenu_OnLeftMenuSetupItem");
static_assert(offsetof(EndMainBattleSettingMenu_OnLeftMenuSetupItem, ItemWidget) == 0x000000, "Member 'EndMainBattleSettingMenu_OnLeftMenuSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndMainBattleSettingMenu_OnLeftMenuSetupItem, CellIndex) == 0x000008, "Member 'EndMainBattleSettingMenu_OnLeftMenuSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndMainBattleSettingMenu.OnLimitCellPressed
// 0x0004 (0x0004 - 0x0000)
struct EndMainBattleSettingMenu_OnLimitCellPressed final
{
public:
	int32                                         LimitCellIndex;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainBattleSettingMenu_OnLimitCellPressed) == 0x000004, "Wrong alignment on EndMainBattleSettingMenu_OnLimitCellPressed");
static_assert(sizeof(EndMainBattleSettingMenu_OnLimitCellPressed) == 0x000004, "Wrong size on EndMainBattleSettingMenu_OnLimitCellPressed");
static_assert(offsetof(EndMainBattleSettingMenu_OnLimitCellPressed, LimitCellIndex) == 0x000000, "Member 'EndMainBattleSettingMenu_OnLimitCellPressed::LimitCellIndex' has a wrong offset!");

// Function EndGame.EndMainBattleSettingMenu.OnLimitCellSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndMainBattleSettingMenu_OnLimitCellSelectedIndexChanged final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainBattleSettingMenu_OnLimitCellSelectedIndexChanged) == 0x000004, "Wrong alignment on EndMainBattleSettingMenu_OnLimitCellSelectedIndexChanged");
static_assert(sizeof(EndMainBattleSettingMenu_OnLimitCellSelectedIndexChanged) == 0x000004, "Wrong size on EndMainBattleSettingMenu_OnLimitCellSelectedIndexChanged");
static_assert(offsetof(EndMainBattleSettingMenu_OnLimitCellSelectedIndexChanged, CellIndex) == 0x000000, "Member 'EndMainBattleSettingMenu_OnLimitCellSelectedIndexChanged::CellIndex' has a wrong offset!");

// Function EndGame.EndMainBattleSettingMenu.OnLimitCellSetup
// 0x0010 (0x0010 - 0x0000)
struct EndMainBattleSettingMenu_OnLimitCellSetup final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMainBattleSettingMenu_OnLimitCellSetup) == 0x000008, "Wrong alignment on EndMainBattleSettingMenu_OnLimitCellSetup");
static_assert(sizeof(EndMainBattleSettingMenu_OnLimitCellSetup) == 0x000010, "Wrong size on EndMainBattleSettingMenu_OnLimitCellSetup");
static_assert(offsetof(EndMainBattleSettingMenu_OnLimitCellSetup, ItemWidget) == 0x000000, "Member 'EndMainBattleSettingMenu_OnLimitCellSetup::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndMainBattleSettingMenu_OnLimitCellSetup, CellIndex) == 0x000008, "Member 'EndMainBattleSettingMenu_OnLimitCellSetup::CellIndex' has a wrong offset!");

// Function EndGame.EndMainBattleSettingMenu.OnSettingCellPressed
// 0x0004 (0x0004 - 0x0000)
struct EndMainBattleSettingMenu_OnSettingCellPressed final
{
public:
	int32                                         SettingCellIndex;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainBattleSettingMenu_OnSettingCellPressed) == 0x000004, "Wrong alignment on EndMainBattleSettingMenu_OnSettingCellPressed");
static_assert(sizeof(EndMainBattleSettingMenu_OnSettingCellPressed) == 0x000004, "Wrong size on EndMainBattleSettingMenu_OnSettingCellPressed");
static_assert(offsetof(EndMainBattleSettingMenu_OnSettingCellPressed, SettingCellIndex) == 0x000000, "Member 'EndMainBattleSettingMenu_OnSettingCellPressed::SettingCellIndex' has a wrong offset!");

// Function EndGame.EndMainBattleSettingMenu.OnSettingCellSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndMainBattleSettingMenu_OnSettingCellSelectedIndexChanged final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainBattleSettingMenu_OnSettingCellSelectedIndexChanged) == 0x000004, "Wrong alignment on EndMainBattleSettingMenu_OnSettingCellSelectedIndexChanged");
static_assert(sizeof(EndMainBattleSettingMenu_OnSettingCellSelectedIndexChanged) == 0x000004, "Wrong size on EndMainBattleSettingMenu_OnSettingCellSelectedIndexChanged");
static_assert(offsetof(EndMainBattleSettingMenu_OnSettingCellSelectedIndexChanged, CellIndex) == 0x000000, "Member 'EndMainBattleSettingMenu_OnSettingCellSelectedIndexChanged::CellIndex' has a wrong offset!");

// Function EndGame.EndMainBattleSettingMenu.OnSettingCellSetup
// 0x0010 (0x0010 - 0x0000)
struct EndMainBattleSettingMenu_OnSettingCellSetup final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMainBattleSettingMenu_OnSettingCellSetup) == 0x000008, "Wrong alignment on EndMainBattleSettingMenu_OnSettingCellSetup");
static_assert(sizeof(EndMainBattleSettingMenu_OnSettingCellSetup) == 0x000010, "Wrong size on EndMainBattleSettingMenu_OnSettingCellSetup");
static_assert(offsetof(EndMainBattleSettingMenu_OnSettingCellSetup, ItemWidget) == 0x000000, "Member 'EndMainBattleSettingMenu_OnSettingCellSetup::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndMainBattleSettingMenu_OnSettingCellSetup, CellIndex) == 0x000008, "Member 'EndMainBattleSettingMenu_OnSettingCellSetup::CellIndex' has a wrong offset!");

// Function EndGame.EndMainDlcTopMenu.OnPressedItemInternal
// 0x0004 (0x0004 - 0x0000)
struct EndMainDlcTopMenu_OnPressedItemInternal final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainDlcTopMenu_OnPressedItemInternal) == 0x000004, "Wrong alignment on EndMainDlcTopMenu_OnPressedItemInternal");
static_assert(sizeof(EndMainDlcTopMenu_OnPressedItemInternal) == 0x000004, "Wrong size on EndMainDlcTopMenu_OnPressedItemInternal");
static_assert(offsetof(EndMainDlcTopMenu_OnPressedItemInternal, CellIndex) == 0x000000, "Member 'EndMainDlcTopMenu_OnPressedItemInternal::CellIndex' has a wrong offset!");

// Function EndGame.EndMainDlcTopMenu.OnSelectedIndexChangedInternal
// 0x0004 (0x0004 - 0x0000)
struct EndMainDlcTopMenu_OnSelectedIndexChangedInternal final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainDlcTopMenu_OnSelectedIndexChangedInternal) == 0x000004, "Wrong alignment on EndMainDlcTopMenu_OnSelectedIndexChangedInternal");
static_assert(sizeof(EndMainDlcTopMenu_OnSelectedIndexChangedInternal) == 0x000004, "Wrong size on EndMainDlcTopMenu_OnSelectedIndexChangedInternal");
static_assert(offsetof(EndMainDlcTopMenu_OnSelectedIndexChangedInternal, CellIndex) == 0x000000, "Member 'EndMainDlcTopMenu_OnSelectedIndexChangedInternal::CellIndex' has a wrong offset!");

// Function EndGame.EndMainDlcTopMenu.OnSetupItemInternal
// 0x0010 (0x0010 - 0x0000)
struct EndMainDlcTopMenu_OnSetupItemInternal final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMainDlcTopMenu_OnSetupItemInternal) == 0x000008, "Wrong alignment on EndMainDlcTopMenu_OnSetupItemInternal");
static_assert(sizeof(EndMainDlcTopMenu_OnSetupItemInternal) == 0x000010, "Wrong size on EndMainDlcTopMenu_OnSetupItemInternal");
static_assert(offsetof(EndMainDlcTopMenu_OnSetupItemInternal, ItemWidget) == 0x000000, "Member 'EndMainDlcTopMenu_OnSetupItemInternal::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndMainDlcTopMenu_OnSetupItemInternal, CellIndex) == 0x000008, "Member 'EndMainDlcTopMenu_OnSetupItemInternal::CellIndex' has a wrong offset!");

// Function EndGame.EndMainEquipmentMateriaMenu.OnCharaMenuPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndMainEquipmentMateriaMenu_OnCharaMenuPressedItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainEquipmentMateriaMenu_OnCharaMenuPressedItem) == 0x000004, "Wrong alignment on EndMainEquipmentMateriaMenu_OnCharaMenuPressedItem");
static_assert(sizeof(EndMainEquipmentMateriaMenu_OnCharaMenuPressedItem) == 0x000004, "Wrong size on EndMainEquipmentMateriaMenu_OnCharaMenuPressedItem");
static_assert(offsetof(EndMainEquipmentMateriaMenu_OnCharaMenuPressedItem, CellIndex) == 0x000000, "Member 'EndMainEquipmentMateriaMenu_OnCharaMenuPressedItem::CellIndex' has a wrong offset!");

// Function EndGame.EndMainEquipmentMateriaMenu.OnCharaMenuSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndMainEquipmentMateriaMenu_OnCharaMenuSelectedIndexChanged final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainEquipmentMateriaMenu_OnCharaMenuSelectedIndexChanged) == 0x000004, "Wrong alignment on EndMainEquipmentMateriaMenu_OnCharaMenuSelectedIndexChanged");
static_assert(sizeof(EndMainEquipmentMateriaMenu_OnCharaMenuSelectedIndexChanged) == 0x000004, "Wrong size on EndMainEquipmentMateriaMenu_OnCharaMenuSelectedIndexChanged");
static_assert(offsetof(EndMainEquipmentMateriaMenu_OnCharaMenuSelectedIndexChanged, CellIndex) == 0x000000, "Member 'EndMainEquipmentMateriaMenu_OnCharaMenuSelectedIndexChanged::CellIndex' has a wrong offset!");

// Function EndGame.EndMainEquipmentMateriaMenu.OnCharaMenuSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndMainEquipmentMateriaMenu_OnCharaMenuSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMainEquipmentMateriaMenu_OnCharaMenuSetupItem) == 0x000008, "Wrong alignment on EndMainEquipmentMateriaMenu_OnCharaMenuSetupItem");
static_assert(sizeof(EndMainEquipmentMateriaMenu_OnCharaMenuSetupItem) == 0x000010, "Wrong size on EndMainEquipmentMateriaMenu_OnCharaMenuSetupItem");
static_assert(offsetof(EndMainEquipmentMateriaMenu_OnCharaMenuSetupItem, ItemWidget) == 0x000000, "Member 'EndMainEquipmentMateriaMenu_OnCharaMenuSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndMainEquipmentMateriaMenu_OnCharaMenuSetupItem, CellIndex) == 0x000008, "Member 'EndMainEquipmentMateriaMenu_OnCharaMenuSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndMainEquipmentMateriaMenu.OnEquipCategoryMenuPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndMainEquipmentMateriaMenu_OnEquipCategoryMenuPressedItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainEquipmentMateriaMenu_OnEquipCategoryMenuPressedItem) == 0x000004, "Wrong alignment on EndMainEquipmentMateriaMenu_OnEquipCategoryMenuPressedItem");
static_assert(sizeof(EndMainEquipmentMateriaMenu_OnEquipCategoryMenuPressedItem) == 0x000004, "Wrong size on EndMainEquipmentMateriaMenu_OnEquipCategoryMenuPressedItem");
static_assert(offsetof(EndMainEquipmentMateriaMenu_OnEquipCategoryMenuPressedItem, CellIndex) == 0x000000, "Member 'EndMainEquipmentMateriaMenu_OnEquipCategoryMenuPressedItem::CellIndex' has a wrong offset!");

// Function EndGame.EndMainEquipmentMateriaMenu.OnEquipCategoryMenuSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndMainEquipmentMateriaMenu_OnEquipCategoryMenuSelectedIndexChanged final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainEquipmentMateriaMenu_OnEquipCategoryMenuSelectedIndexChanged) == 0x000004, "Wrong alignment on EndMainEquipmentMateriaMenu_OnEquipCategoryMenuSelectedIndexChanged");
static_assert(sizeof(EndMainEquipmentMateriaMenu_OnEquipCategoryMenuSelectedIndexChanged) == 0x000004, "Wrong size on EndMainEquipmentMateriaMenu_OnEquipCategoryMenuSelectedIndexChanged");
static_assert(offsetof(EndMainEquipmentMateriaMenu_OnEquipCategoryMenuSelectedIndexChanged, CellIndex) == 0x000000, "Member 'EndMainEquipmentMateriaMenu_OnEquipCategoryMenuSelectedIndexChanged::CellIndex' has a wrong offset!");

// Function EndGame.EndMainEquipmentMateriaMenu.OnEquipCategoryMenuSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndMainEquipmentMateriaMenu_OnEquipCategoryMenuSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMainEquipmentMateriaMenu_OnEquipCategoryMenuSetupItem) == 0x000008, "Wrong alignment on EndMainEquipmentMateriaMenu_OnEquipCategoryMenuSetupItem");
static_assert(sizeof(EndMainEquipmentMateriaMenu_OnEquipCategoryMenuSetupItem) == 0x000010, "Wrong size on EndMainEquipmentMateriaMenu_OnEquipCategoryMenuSetupItem");
static_assert(offsetof(EndMainEquipmentMateriaMenu_OnEquipCategoryMenuSetupItem, ItemWidget) == 0x000000, "Member 'EndMainEquipmentMateriaMenu_OnEquipCategoryMenuSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndMainEquipmentMateriaMenu_OnEquipCategoryMenuSetupItem, CellIndex) == 0x000008, "Member 'EndMainEquipmentMateriaMenu_OnEquipCategoryMenuSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndMainEquipmentMateriaMenu.OnEquipMenuMeasureItem
// 0x000C (0x000C - 0x0000)
struct EndMainEquipmentMateriaMenu_OnEquipMenuMeasureItem final
{
public:
	int32                                         ItemIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainEquipmentMateriaMenu_OnEquipMenuMeasureItem) == 0x000004, "Wrong alignment on EndMainEquipmentMateriaMenu_OnEquipMenuMeasureItem");
static_assert(sizeof(EndMainEquipmentMateriaMenu_OnEquipMenuMeasureItem) == 0x00000C, "Wrong size on EndMainEquipmentMateriaMenu_OnEquipMenuMeasureItem");
static_assert(offsetof(EndMainEquipmentMateriaMenu_OnEquipMenuMeasureItem, ItemIndex) == 0x000000, "Member 'EndMainEquipmentMateriaMenu_OnEquipMenuMeasureItem::ItemIndex' has a wrong offset!");
static_assert(offsetof(EndMainEquipmentMateriaMenu_OnEquipMenuMeasureItem, ReturnValue) == 0x000004, "Member 'EndMainEquipmentMateriaMenu_OnEquipMenuMeasureItem::ReturnValue' has a wrong offset!");

// Function EndGame.EndMainEquipmentMateriaMenu.OnEquipMenuPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndMainEquipmentMateriaMenu_OnEquipMenuPressedItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainEquipmentMateriaMenu_OnEquipMenuPressedItem) == 0x000004, "Wrong alignment on EndMainEquipmentMateriaMenu_OnEquipMenuPressedItem");
static_assert(sizeof(EndMainEquipmentMateriaMenu_OnEquipMenuPressedItem) == 0x000004, "Wrong size on EndMainEquipmentMateriaMenu_OnEquipMenuPressedItem");
static_assert(offsetof(EndMainEquipmentMateriaMenu_OnEquipMenuPressedItem, CellIndex) == 0x000000, "Member 'EndMainEquipmentMateriaMenu_OnEquipMenuPressedItem::CellIndex' has a wrong offset!");

// Function EndGame.EndMainEquipmentMateriaMenu.OnEquipMenuSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndMainEquipmentMateriaMenu_OnEquipMenuSelectedIndexChanged final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainEquipmentMateriaMenu_OnEquipMenuSelectedIndexChanged) == 0x000004, "Wrong alignment on EndMainEquipmentMateriaMenu_OnEquipMenuSelectedIndexChanged");
static_assert(sizeof(EndMainEquipmentMateriaMenu_OnEquipMenuSelectedIndexChanged) == 0x000004, "Wrong size on EndMainEquipmentMateriaMenu_OnEquipMenuSelectedIndexChanged");
static_assert(offsetof(EndMainEquipmentMateriaMenu_OnEquipMenuSelectedIndexChanged, CellIndex) == 0x000000, "Member 'EndMainEquipmentMateriaMenu_OnEquipMenuSelectedIndexChanged::CellIndex' has a wrong offset!");

// Function EndGame.EndMainEquipmentMateriaMenu.OnEquipMenuSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndMainEquipmentMateriaMenu_OnEquipMenuSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMainEquipmentMateriaMenu_OnEquipMenuSetupItem) == 0x000008, "Wrong alignment on EndMainEquipmentMateriaMenu_OnEquipMenuSetupItem");
static_assert(sizeof(EndMainEquipmentMateriaMenu_OnEquipMenuSetupItem) == 0x000010, "Wrong size on EndMainEquipmentMateriaMenu_OnEquipMenuSetupItem");
static_assert(offsetof(EndMainEquipmentMateriaMenu_OnEquipMenuSetupItem, ItemWidget) == 0x000000, "Member 'EndMainEquipmentMateriaMenu_OnEquipMenuSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndMainEquipmentMateriaMenu_OnEquipMenuSetupItem, CellIndex) == 0x000008, "Member 'EndMainEquipmentMateriaMenu_OnEquipMenuSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndMainEquipmentMateriaMenu.OnMateriaMenuMeasureItem
// 0x000C (0x000C - 0x0000)
struct EndMainEquipmentMateriaMenu_OnMateriaMenuMeasureItem final
{
public:
	int32                                         ItemIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainEquipmentMateriaMenu_OnMateriaMenuMeasureItem) == 0x000004, "Wrong alignment on EndMainEquipmentMateriaMenu_OnMateriaMenuMeasureItem");
static_assert(sizeof(EndMainEquipmentMateriaMenu_OnMateriaMenuMeasureItem) == 0x00000C, "Wrong size on EndMainEquipmentMateriaMenu_OnMateriaMenuMeasureItem");
static_assert(offsetof(EndMainEquipmentMateriaMenu_OnMateriaMenuMeasureItem, ItemIndex) == 0x000000, "Member 'EndMainEquipmentMateriaMenu_OnMateriaMenuMeasureItem::ItemIndex' has a wrong offset!");
static_assert(offsetof(EndMainEquipmentMateriaMenu_OnMateriaMenuMeasureItem, ReturnValue) == 0x000004, "Member 'EndMainEquipmentMateriaMenu_OnMateriaMenuMeasureItem::ReturnValue' has a wrong offset!");

// Function EndGame.EndMainEquipmentMateriaMenu.OnMateriaMenuPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndMainEquipmentMateriaMenu_OnMateriaMenuPressedItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainEquipmentMateriaMenu_OnMateriaMenuPressedItem) == 0x000004, "Wrong alignment on EndMainEquipmentMateriaMenu_OnMateriaMenuPressedItem");
static_assert(sizeof(EndMainEquipmentMateriaMenu_OnMateriaMenuPressedItem) == 0x000004, "Wrong size on EndMainEquipmentMateriaMenu_OnMateriaMenuPressedItem");
static_assert(offsetof(EndMainEquipmentMateriaMenu_OnMateriaMenuPressedItem, CellIndex) == 0x000000, "Member 'EndMainEquipmentMateriaMenu_OnMateriaMenuPressedItem::CellIndex' has a wrong offset!");

// Function EndGame.EndMainEquipmentMateriaMenu.OnMateriaMenuSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndMainEquipmentMateriaMenu_OnMateriaMenuSelectedIndexChanged final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainEquipmentMateriaMenu_OnMateriaMenuSelectedIndexChanged) == 0x000004, "Wrong alignment on EndMainEquipmentMateriaMenu_OnMateriaMenuSelectedIndexChanged");
static_assert(sizeof(EndMainEquipmentMateriaMenu_OnMateriaMenuSelectedIndexChanged) == 0x000004, "Wrong size on EndMainEquipmentMateriaMenu_OnMateriaMenuSelectedIndexChanged");
static_assert(offsetof(EndMainEquipmentMateriaMenu_OnMateriaMenuSelectedIndexChanged, CellIndex) == 0x000000, "Member 'EndMainEquipmentMateriaMenu_OnMateriaMenuSelectedIndexChanged::CellIndex' has a wrong offset!");

// Function EndGame.EndMainEquipmentMateriaMenu.OnMateriaMenuSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndMainEquipmentMateriaMenu_OnMateriaMenuSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMainEquipmentMateriaMenu_OnMateriaMenuSetupItem) == 0x000008, "Wrong alignment on EndMainEquipmentMateriaMenu_OnMateriaMenuSetupItem");
static_assert(sizeof(EndMainEquipmentMateriaMenu_OnMateriaMenuSetupItem) == 0x000010, "Wrong size on EndMainEquipmentMateriaMenu_OnMateriaMenuSetupItem");
static_assert(offsetof(EndMainEquipmentMateriaMenu_OnMateriaMenuSetupItem, ItemWidget) == 0x000000, "Member 'EndMainEquipmentMateriaMenu_OnMateriaMenuSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndMainEquipmentMateriaMenu_OnMateriaMenuSetupItem, CellIndex) == 0x000008, "Member 'EndMainEquipmentMateriaMenu_OnMateriaMenuSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndMainEquipmentMateriaMenu.OnSortListPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndMainEquipmentMateriaMenu_OnSortListPressedItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainEquipmentMateriaMenu_OnSortListPressedItem) == 0x000004, "Wrong alignment on EndMainEquipmentMateriaMenu_OnSortListPressedItem");
static_assert(sizeof(EndMainEquipmentMateriaMenu_OnSortListPressedItem) == 0x000004, "Wrong size on EndMainEquipmentMateriaMenu_OnSortListPressedItem");
static_assert(offsetof(EndMainEquipmentMateriaMenu_OnSortListPressedItem, CellIndex) == 0x000000, "Member 'EndMainEquipmentMateriaMenu_OnSortListPressedItem::CellIndex' has a wrong offset!");

// Function EndGame.EndMainEquipmentMateriaMenu.UpdateStatusPanel
// 0x0001 (0x0001 - 0x0000)
struct EndMainEquipmentMateriaMenu_UpdateStatusPanel final
{
public:
	EPlayerType                                   PlayerType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainEquipmentMateriaMenu_UpdateStatusPanel) == 0x000001, "Wrong alignment on EndMainEquipmentMateriaMenu_UpdateStatusPanel");
static_assert(sizeof(EndMainEquipmentMateriaMenu_UpdateStatusPanel) == 0x000001, "Wrong size on EndMainEquipmentMateriaMenu_UpdateStatusPanel");
static_assert(offsetof(EndMainEquipmentMateriaMenu_UpdateStatusPanel, PlayerType) == 0x000000, "Member 'EndMainEquipmentMateriaMenu_UpdateStatusPanel::PlayerType' has a wrong offset!");

// Function EndGame.EndMainEquipmentMateriaMenu.UpdateStatusPanelWithEquipment
// 0x0010 (0x0010 - 0x0000)
struct EndMainEquipmentMateriaMenu_UpdateStatusPanelWithEquipment final
{
public:
	EPlayerType                                   PlayerType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEquipmentCategoryMain                        EquipType;                                         // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   EquipID;                                           // 0x0004(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EquipIndex;                                        // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainEquipmentMateriaMenu_UpdateStatusPanelWithEquipment) == 0x000004, "Wrong alignment on EndMainEquipmentMateriaMenu_UpdateStatusPanelWithEquipment");
static_assert(sizeof(EndMainEquipmentMateriaMenu_UpdateStatusPanelWithEquipment) == 0x000010, "Wrong size on EndMainEquipmentMateriaMenu_UpdateStatusPanelWithEquipment");
static_assert(offsetof(EndMainEquipmentMateriaMenu_UpdateStatusPanelWithEquipment, PlayerType) == 0x000000, "Member 'EndMainEquipmentMateriaMenu_UpdateStatusPanelWithEquipment::PlayerType' has a wrong offset!");
static_assert(offsetof(EndMainEquipmentMateriaMenu_UpdateStatusPanelWithEquipment, EquipType) == 0x000001, "Member 'EndMainEquipmentMateriaMenu_UpdateStatusPanelWithEquipment::EquipType' has a wrong offset!");
static_assert(offsetof(EndMainEquipmentMateriaMenu_UpdateStatusPanelWithEquipment, EquipID) == 0x000004, "Member 'EndMainEquipmentMateriaMenu_UpdateStatusPanelWithEquipment::EquipID' has a wrong offset!");
static_assert(offsetof(EndMainEquipmentMateriaMenu_UpdateStatusPanelWithEquipment, EquipIndex) == 0x00000C, "Member 'EndMainEquipmentMateriaMenu_UpdateStatusPanelWithEquipment::EquipIndex' has a wrong offset!");

// Function EndGame.EndMainEquipmentMateriaMenu.UpdateStatusPanelWithMateria
// 0x0010 (0x0010 - 0x0000)
struct EndMainEquipmentMateriaMenu_UpdateStatusPanelWithMateria final
{
public:
	EPlayerType                                   PlayerType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEquipmentCategoryMain                        EquipType;                                         // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SlotIndex;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OrigMateriaIndex;                                  // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TargetMateriaIndex;                                // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainEquipmentMateriaMenu_UpdateStatusPanelWithMateria) == 0x000004, "Wrong alignment on EndMainEquipmentMateriaMenu_UpdateStatusPanelWithMateria");
static_assert(sizeof(EndMainEquipmentMateriaMenu_UpdateStatusPanelWithMateria) == 0x000010, "Wrong size on EndMainEquipmentMateriaMenu_UpdateStatusPanelWithMateria");
static_assert(offsetof(EndMainEquipmentMateriaMenu_UpdateStatusPanelWithMateria, PlayerType) == 0x000000, "Member 'EndMainEquipmentMateriaMenu_UpdateStatusPanelWithMateria::PlayerType' has a wrong offset!");
static_assert(offsetof(EndMainEquipmentMateriaMenu_UpdateStatusPanelWithMateria, EquipType) == 0x000001, "Member 'EndMainEquipmentMateriaMenu_UpdateStatusPanelWithMateria::EquipType' has a wrong offset!");
static_assert(offsetof(EndMainEquipmentMateriaMenu_UpdateStatusPanelWithMateria, SlotIndex) == 0x000004, "Member 'EndMainEquipmentMateriaMenu_UpdateStatusPanelWithMateria::SlotIndex' has a wrong offset!");
static_assert(offsetof(EndMainEquipmentMateriaMenu_UpdateStatusPanelWithMateria, OrigMateriaIndex) == 0x000008, "Member 'EndMainEquipmentMateriaMenu_UpdateStatusPanelWithMateria::OrigMateriaIndex' has a wrong offset!");
static_assert(offsetof(EndMainEquipmentMateriaMenu_UpdateStatusPanelWithMateria, TargetMateriaIndex) == 0x00000C, "Member 'EndMainEquipmentMateriaMenu_UpdateStatusPanelWithMateria::TargetMateriaIndex' has a wrong offset!");

// Function EndGame.EndMainEquipMenu.OnCommandEquipCellSetup
// 0x0010 (0x0010 - 0x0000)
struct EndMainEquipMenu_OnCommandEquipCellSetup final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMainEquipMenu_OnCommandEquipCellSetup) == 0x000008, "Wrong alignment on EndMainEquipMenu_OnCommandEquipCellSetup");
static_assert(sizeof(EndMainEquipMenu_OnCommandEquipCellSetup) == 0x000010, "Wrong size on EndMainEquipMenu_OnCommandEquipCellSetup");
static_assert(offsetof(EndMainEquipMenu_OnCommandEquipCellSetup, ItemWidget) == 0x000000, "Member 'EndMainEquipMenu_OnCommandEquipCellSetup::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndMainEquipMenu_OnCommandEquipCellSetup, ItemIndex) == 0x000008, "Member 'EndMainEquipMenu_OnCommandEquipCellSetup::ItemIndex' has a wrong offset!");

// Function EndGame.EndMainEquipMenu.OnCommandEquipStatusCellSetup
// 0x0010 (0x0010 - 0x0000)
struct EndMainEquipMenu_OnCommandEquipStatusCellSetup final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMainEquipMenu_OnCommandEquipStatusCellSetup) == 0x000008, "Wrong alignment on EndMainEquipMenu_OnCommandEquipStatusCellSetup");
static_assert(sizeof(EndMainEquipMenu_OnCommandEquipStatusCellSetup) == 0x000010, "Wrong size on EndMainEquipMenu_OnCommandEquipStatusCellSetup");
static_assert(offsetof(EndMainEquipMenu_OnCommandEquipStatusCellSetup, ItemWidget) == 0x000000, "Member 'EndMainEquipMenu_OnCommandEquipStatusCellSetup::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndMainEquipMenu_OnCommandEquipStatusCellSetup, ItemIndex) == 0x000008, "Member 'EndMainEquipMenu_OnCommandEquipStatusCellSetup::ItemIndex' has a wrong offset!");

// Function EndGame.EndMainEquipMenu.OnCommandMemberCellSetup
// 0x0010 (0x0010 - 0x0000)
struct EndMainEquipMenu_OnCommandMemberCellSetup final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMainEquipMenu_OnCommandMemberCellSetup) == 0x000008, "Wrong alignment on EndMainEquipMenu_OnCommandMemberCellSetup");
static_assert(sizeof(EndMainEquipMenu_OnCommandMemberCellSetup) == 0x000010, "Wrong size on EndMainEquipMenu_OnCommandMemberCellSetup");
static_assert(offsetof(EndMainEquipMenu_OnCommandMemberCellSetup, ItemWidget) == 0x000000, "Member 'EndMainEquipMenu_OnCommandMemberCellSetup::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndMainEquipMenu_OnCommandMemberCellSetup, ItemIndex) == 0x000008, "Member 'EndMainEquipMenu_OnCommandMemberCellSetup::ItemIndex' has a wrong offset!");

// Function EndGame.EndMainMagicMenu.OnLeftMenuIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndMainMagicMenu_OnLeftMenuIndexChanged final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainMagicMenu_OnLeftMenuIndexChanged) == 0x000004, "Wrong alignment on EndMainMagicMenu_OnLeftMenuIndexChanged");
static_assert(sizeof(EndMainMagicMenu_OnLeftMenuIndexChanged) == 0x000004, "Wrong size on EndMainMagicMenu_OnLeftMenuIndexChanged");
static_assert(offsetof(EndMainMagicMenu_OnLeftMenuIndexChanged, CellIndex) == 0x000000, "Member 'EndMainMagicMenu_OnLeftMenuIndexChanged::CellIndex' has a wrong offset!");

// Function EndGame.EndMainMagicMenu.OnLeftMenuPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndMainMagicMenu_OnLeftMenuPressedItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainMagicMenu_OnLeftMenuPressedItem) == 0x000004, "Wrong alignment on EndMainMagicMenu_OnLeftMenuPressedItem");
static_assert(sizeof(EndMainMagicMenu_OnLeftMenuPressedItem) == 0x000004, "Wrong size on EndMainMagicMenu_OnLeftMenuPressedItem");
static_assert(offsetof(EndMainMagicMenu_OnLeftMenuPressedItem, CellIndex) == 0x000000, "Member 'EndMainMagicMenu_OnLeftMenuPressedItem::CellIndex' has a wrong offset!");

// Function EndGame.EndMainMagicMenu.OnLeftMenuSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndMainMagicMenu_OnLeftMenuSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMainMagicMenu_OnLeftMenuSetupItem) == 0x000008, "Wrong alignment on EndMainMagicMenu_OnLeftMenuSetupItem");
static_assert(sizeof(EndMainMagicMenu_OnLeftMenuSetupItem) == 0x000010, "Wrong size on EndMainMagicMenu_OnLeftMenuSetupItem");
static_assert(offsetof(EndMainMagicMenu_OnLeftMenuSetupItem, ItemWidget) == 0x000000, "Member 'EndMainMagicMenu_OnLeftMenuSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndMainMagicMenu_OnLeftMenuSetupItem, CellIndex) == 0x000008, "Member 'EndMainMagicMenu_OnLeftMenuSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndMainMagicMenu.OnMagicMenuIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndMainMagicMenu_OnMagicMenuIndexChanged final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainMagicMenu_OnMagicMenuIndexChanged) == 0x000004, "Wrong alignment on EndMainMagicMenu_OnMagicMenuIndexChanged");
static_assert(sizeof(EndMainMagicMenu_OnMagicMenuIndexChanged) == 0x000004, "Wrong size on EndMainMagicMenu_OnMagicMenuIndexChanged");
static_assert(offsetof(EndMainMagicMenu_OnMagicMenuIndexChanged, CellIndex) == 0x000000, "Member 'EndMainMagicMenu_OnMagicMenuIndexChanged::CellIndex' has a wrong offset!");

// Function EndGame.EndMainMagicMenu.OnMagicMenuPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndMainMagicMenu_OnMagicMenuPressedItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainMagicMenu_OnMagicMenuPressedItem) == 0x000004, "Wrong alignment on EndMainMagicMenu_OnMagicMenuPressedItem");
static_assert(sizeof(EndMainMagicMenu_OnMagicMenuPressedItem) == 0x000004, "Wrong size on EndMainMagicMenu_OnMagicMenuPressedItem");
static_assert(offsetof(EndMainMagicMenu_OnMagicMenuPressedItem, CellIndex) == 0x000000, "Member 'EndMainMagicMenu_OnMagicMenuPressedItem::CellIndex' has a wrong offset!");

// Function EndGame.EndMainMagicMenu.OnMagicMenuSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndMainMagicMenu_OnMagicMenuSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMainMagicMenu_OnMagicMenuSetupItem) == 0x000008, "Wrong alignment on EndMainMagicMenu_OnMagicMenuSetupItem");
static_assert(sizeof(EndMainMagicMenu_OnMagicMenuSetupItem) == 0x000010, "Wrong size on EndMainMagicMenu_OnMagicMenuSetupItem");
static_assert(offsetof(EndMainMagicMenu_OnMagicMenuSetupItem, ItemWidget) == 0x000000, "Member 'EndMainMagicMenu_OnMagicMenuSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndMainMagicMenu_OnMagicMenuSetupItem, CellIndex) == 0x000008, "Member 'EndMainMagicMenu_OnMagicMenuSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndMainManualMenu.OnLeftMenuPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndMainManualMenu_OnLeftMenuPressedItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainManualMenu_OnLeftMenuPressedItem) == 0x000004, "Wrong alignment on EndMainManualMenu_OnLeftMenuPressedItem");
static_assert(sizeof(EndMainManualMenu_OnLeftMenuPressedItem) == 0x000004, "Wrong size on EndMainManualMenu_OnLeftMenuPressedItem");
static_assert(offsetof(EndMainManualMenu_OnLeftMenuPressedItem, CellIndex) == 0x000000, "Member 'EndMainManualMenu_OnLeftMenuPressedItem::CellIndex' has a wrong offset!");

// Function EndGame.EndMainManualMenu.OnLeftMenuSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndMainManualMenu_OnLeftMenuSelectedIndexChanged final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainManualMenu_OnLeftMenuSelectedIndexChanged) == 0x000004, "Wrong alignment on EndMainManualMenu_OnLeftMenuSelectedIndexChanged");
static_assert(sizeof(EndMainManualMenu_OnLeftMenuSelectedIndexChanged) == 0x000004, "Wrong size on EndMainManualMenu_OnLeftMenuSelectedIndexChanged");
static_assert(offsetof(EndMainManualMenu_OnLeftMenuSelectedIndexChanged, CellIndex) == 0x000000, "Member 'EndMainManualMenu_OnLeftMenuSelectedIndexChanged::CellIndex' has a wrong offset!");

// Function EndGame.EndMainManualMenu.OnLeftMenuSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndMainManualMenu_OnLeftMenuSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMainManualMenu_OnLeftMenuSetupItem) == 0x000008, "Wrong alignment on EndMainManualMenu_OnLeftMenuSetupItem");
static_assert(sizeof(EndMainManualMenu_OnLeftMenuSetupItem) == 0x000010, "Wrong size on EndMainManualMenu_OnLeftMenuSetupItem");
static_assert(offsetof(EndMainManualMenu_OnLeftMenuSetupItem, ItemWidget) == 0x000000, "Member 'EndMainManualMenu_OnLeftMenuSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndMainManualMenu_OnLeftMenuSetupItem, CellIndex) == 0x000008, "Member 'EndMainManualMenu_OnLeftMenuSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndMainPlaylogList.OnLogListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndMainPlaylogList_OnLogListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMainPlaylogList_OnLogListSetupItem) == 0x000008, "Wrong alignment on EndMainPlaylogList_OnLogListSetupItem");
static_assert(sizeof(EndMainPlaylogList_OnLogListSetupItem) == 0x000010, "Wrong size on EndMainPlaylogList_OnLogListSetupItem");
static_assert(offsetof(EndMainPlaylogList_OnLogListSetupItem, ItemWidget) == 0x000000, "Member 'EndMainPlaylogList_OnLogListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndMainPlaylogList_OnLogListSetupItem, ItemIndex) == 0x000008, "Member 'EndMainPlaylogList_OnLogListSetupItem::ItemIndex' has a wrong offset!");

// Function EndGame.EndMainStatusMenu.OnLeftMenuSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndMainStatusMenu_OnLeftMenuSelectedIndexChanged final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainStatusMenu_OnLeftMenuSelectedIndexChanged) == 0x000004, "Wrong alignment on EndMainStatusMenu_OnLeftMenuSelectedIndexChanged");
static_assert(sizeof(EndMainStatusMenu_OnLeftMenuSelectedIndexChanged) == 0x000004, "Wrong size on EndMainStatusMenu_OnLeftMenuSelectedIndexChanged");
static_assert(offsetof(EndMainStatusMenu_OnLeftMenuSelectedIndexChanged, CellIndex) == 0x000000, "Member 'EndMainStatusMenu_OnLeftMenuSelectedIndexChanged::CellIndex' has a wrong offset!");

// Function EndGame.EndMainStatusMenu.OnLeftMenuSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndMainStatusMenu_OnLeftMenuSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMainStatusMenu_OnLeftMenuSetupItem) == 0x000008, "Wrong alignment on EndMainStatusMenu_OnLeftMenuSetupItem");
static_assert(sizeof(EndMainStatusMenu_OnLeftMenuSetupItem) == 0x000010, "Wrong size on EndMainStatusMenu_OnLeftMenuSetupItem");
static_assert(offsetof(EndMainStatusMenu_OnLeftMenuSetupItem, ItemWidget) == 0x000000, "Member 'EndMainStatusMenu_OnLeftMenuSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndMainStatusMenu_OnLeftMenuSetupItem, CellIndex) == 0x000008, "Member 'EndMainStatusMenu_OnLeftMenuSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndMainStatusMenu.OnMeasureAbilityItem
// 0x000C (0x000C - 0x0000)
struct EndMainStatusMenu_OnMeasureAbilityItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainStatusMenu_OnMeasureAbilityItem) == 0x000004, "Wrong alignment on EndMainStatusMenu_OnMeasureAbilityItem");
static_assert(sizeof(EndMainStatusMenu_OnMeasureAbilityItem) == 0x00000C, "Wrong size on EndMainStatusMenu_OnMeasureAbilityItem");
static_assert(offsetof(EndMainStatusMenu_OnMeasureAbilityItem, CellIndex) == 0x000000, "Member 'EndMainStatusMenu_OnMeasureAbilityItem::CellIndex' has a wrong offset!");
static_assert(offsetof(EndMainStatusMenu_OnMeasureAbilityItem, ReturnValue) == 0x000004, "Member 'EndMainStatusMenu_OnMeasureAbilityItem::ReturnValue' has a wrong offset!");

// Function EndGame.EndMainStatusMenu.OnMeasureLimitItem
// 0x000C (0x000C - 0x0000)
struct EndMainStatusMenu_OnMeasureLimitItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainStatusMenu_OnMeasureLimitItem) == 0x000004, "Wrong alignment on EndMainStatusMenu_OnMeasureLimitItem");
static_assert(sizeof(EndMainStatusMenu_OnMeasureLimitItem) == 0x00000C, "Wrong size on EndMainStatusMenu_OnMeasureLimitItem");
static_assert(offsetof(EndMainStatusMenu_OnMeasureLimitItem, CellIndex) == 0x000000, "Member 'EndMainStatusMenu_OnMeasureLimitItem::CellIndex' has a wrong offset!");
static_assert(offsetof(EndMainStatusMenu_OnMeasureLimitItem, ReturnValue) == 0x000004, "Member 'EndMainStatusMenu_OnMeasureLimitItem::ReturnValue' has a wrong offset!");

// Function EndGame.EndMainStatusMenu.OnMeasureMagicItem
// 0x000C (0x000C - 0x0000)
struct EndMainStatusMenu_OnMeasureMagicItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainStatusMenu_OnMeasureMagicItem) == 0x000004, "Wrong alignment on EndMainStatusMenu_OnMeasureMagicItem");
static_assert(sizeof(EndMainStatusMenu_OnMeasureMagicItem) == 0x00000C, "Wrong size on EndMainStatusMenu_OnMeasureMagicItem");
static_assert(offsetof(EndMainStatusMenu_OnMeasureMagicItem, CellIndex) == 0x000000, "Member 'EndMainStatusMenu_OnMeasureMagicItem::CellIndex' has a wrong offset!");
static_assert(offsetof(EndMainStatusMenu_OnMeasureMagicItem, ReturnValue) == 0x000004, "Member 'EndMainStatusMenu_OnMeasureMagicItem::ReturnValue' has a wrong offset!");

// Function EndGame.EndMainStatusMenu.OnMeasureStatusItem
// 0x000C (0x000C - 0x0000)
struct EndMainStatusMenu_OnMeasureStatusItem final
{
public:
	int32                                         ItemIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainStatusMenu_OnMeasureStatusItem) == 0x000004, "Wrong alignment on EndMainStatusMenu_OnMeasureStatusItem");
static_assert(sizeof(EndMainStatusMenu_OnMeasureStatusItem) == 0x00000C, "Wrong size on EndMainStatusMenu_OnMeasureStatusItem");
static_assert(offsetof(EndMainStatusMenu_OnMeasureStatusItem, ItemIndex) == 0x000000, "Member 'EndMainStatusMenu_OnMeasureStatusItem::ItemIndex' has a wrong offset!");
static_assert(offsetof(EndMainStatusMenu_OnMeasureStatusItem, ReturnValue) == 0x000004, "Member 'EndMainStatusMenu_OnMeasureStatusItem::ReturnValue' has a wrong offset!");

// Function EndGame.EndMainStatusMenu.OnMeasureSummonItem
// 0x000C (0x000C - 0x0000)
struct EndMainStatusMenu_OnMeasureSummonItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainStatusMenu_OnMeasureSummonItem) == 0x000004, "Wrong alignment on EndMainStatusMenu_OnMeasureSummonItem");
static_assert(sizeof(EndMainStatusMenu_OnMeasureSummonItem) == 0x00000C, "Wrong size on EndMainStatusMenu_OnMeasureSummonItem");
static_assert(offsetof(EndMainStatusMenu_OnMeasureSummonItem, CellIndex) == 0x000000, "Member 'EndMainStatusMenu_OnMeasureSummonItem::CellIndex' has a wrong offset!");
static_assert(offsetof(EndMainStatusMenu_OnMeasureSummonItem, ReturnValue) == 0x000004, "Member 'EndMainStatusMenu_OnMeasureSummonItem::ReturnValue' has a wrong offset!");

// Function EndGame.EndMainStatusMenu.OnSetupAbilityItem
// 0x0010 (0x0010 - 0x0000)
struct EndMainStatusMenu_OnSetupAbilityItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMainStatusMenu_OnSetupAbilityItem) == 0x000008, "Wrong alignment on EndMainStatusMenu_OnSetupAbilityItem");
static_assert(sizeof(EndMainStatusMenu_OnSetupAbilityItem) == 0x000010, "Wrong size on EndMainStatusMenu_OnSetupAbilityItem");
static_assert(offsetof(EndMainStatusMenu_OnSetupAbilityItem, ItemWidget) == 0x000000, "Member 'EndMainStatusMenu_OnSetupAbilityItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndMainStatusMenu_OnSetupAbilityItem, CellIndex) == 0x000008, "Member 'EndMainStatusMenu_OnSetupAbilityItem::CellIndex' has a wrong offset!");

// Function EndGame.EndMainStatusMenu.OnSetupLimitItem
// 0x0010 (0x0010 - 0x0000)
struct EndMainStatusMenu_OnSetupLimitItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMainStatusMenu_OnSetupLimitItem) == 0x000008, "Wrong alignment on EndMainStatusMenu_OnSetupLimitItem");
static_assert(sizeof(EndMainStatusMenu_OnSetupLimitItem) == 0x000010, "Wrong size on EndMainStatusMenu_OnSetupLimitItem");
static_assert(offsetof(EndMainStatusMenu_OnSetupLimitItem, ItemWidget) == 0x000000, "Member 'EndMainStatusMenu_OnSetupLimitItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndMainStatusMenu_OnSetupLimitItem, CellIndex) == 0x000008, "Member 'EndMainStatusMenu_OnSetupLimitItem::CellIndex' has a wrong offset!");

// Function EndGame.EndMainStatusMenu.OnSetupMagicItem
// 0x0010 (0x0010 - 0x0000)
struct EndMainStatusMenu_OnSetupMagicItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMainStatusMenu_OnSetupMagicItem) == 0x000008, "Wrong alignment on EndMainStatusMenu_OnSetupMagicItem");
static_assert(sizeof(EndMainStatusMenu_OnSetupMagicItem) == 0x000010, "Wrong size on EndMainStatusMenu_OnSetupMagicItem");
static_assert(offsetof(EndMainStatusMenu_OnSetupMagicItem, ItemWidget) == 0x000000, "Member 'EndMainStatusMenu_OnSetupMagicItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndMainStatusMenu_OnSetupMagicItem, CellIndex) == 0x000008, "Member 'EndMainStatusMenu_OnSetupMagicItem::CellIndex' has a wrong offset!");

// Function EndGame.EndMainStatusMenu.OnSetupStatusItem
// 0x0010 (0x0010 - 0x0000)
struct EndMainStatusMenu_OnSetupStatusItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMainStatusMenu_OnSetupStatusItem) == 0x000008, "Wrong alignment on EndMainStatusMenu_OnSetupStatusItem");
static_assert(sizeof(EndMainStatusMenu_OnSetupStatusItem) == 0x000010, "Wrong size on EndMainStatusMenu_OnSetupStatusItem");
static_assert(offsetof(EndMainStatusMenu_OnSetupStatusItem, ItemWidget) == 0x000000, "Member 'EndMainStatusMenu_OnSetupStatusItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndMainStatusMenu_OnSetupStatusItem, CellIndex) == 0x000008, "Member 'EndMainStatusMenu_OnSetupStatusItem::CellIndex' has a wrong offset!");

// Function EndGame.EndMainStatusMenu.OnSetupSummonItem
// 0x0010 (0x0010 - 0x0000)
struct EndMainStatusMenu_OnSetupSummonItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMainStatusMenu_OnSetupSummonItem) == 0x000008, "Wrong alignment on EndMainStatusMenu_OnSetupSummonItem");
static_assert(sizeof(EndMainStatusMenu_OnSetupSummonItem) == 0x000010, "Wrong size on EndMainStatusMenu_OnSetupSummonItem");
static_assert(offsetof(EndMainStatusMenu_OnSetupSummonItem, ItemWidget) == 0x000000, "Member 'EndMainStatusMenu_OnSetupSummonItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndMainStatusMenu_OnSetupSummonItem, CellIndex) == 0x000008, "Member 'EndMainStatusMenu_OnSetupSummonItem::CellIndex' has a wrong offset!");

// Function EndGame.EndMainStatusMenu.UpdateDescription
// 0x0001 (0x0001 - 0x0000)
struct EndMainStatusMenu_UpdateDescription final
{
public:
	EPlayerType                                   PlayerType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainStatusMenu_UpdateDescription) == 0x000001, "Wrong alignment on EndMainStatusMenu_UpdateDescription");
static_assert(sizeof(EndMainStatusMenu_UpdateDescription) == 0x000001, "Wrong size on EndMainStatusMenu_UpdateDescription");
static_assert(offsetof(EndMainStatusMenu_UpdateDescription, PlayerType) == 0x000000, "Member 'EndMainStatusMenu_UpdateDescription::PlayerType' has a wrong offset!");

// Function EndGame.EndMainStatusMenu.UpdateEquipmentInfo
// 0x0008 (0x0008 - 0x0000)
struct EndMainStatusMenu_UpdateEquipmentInfo final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlayerType                                   PlayerType;                                        // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMainStatusMenu_UpdateEquipmentInfo) == 0x000004, "Wrong alignment on EndMainStatusMenu_UpdateEquipmentInfo");
static_assert(sizeof(EndMainStatusMenu_UpdateEquipmentInfo) == 0x000008, "Wrong size on EndMainStatusMenu_UpdateEquipmentInfo");
static_assert(offsetof(EndMainStatusMenu_UpdateEquipmentInfo, CellIndex) == 0x000000, "Member 'EndMainStatusMenu_UpdateEquipmentInfo::CellIndex' has a wrong offset!");
static_assert(offsetof(EndMainStatusMenu_UpdateEquipmentInfo, PlayerType) == 0x000004, "Member 'EndMainStatusMenu_UpdateEquipmentInfo::PlayerType' has a wrong offset!");

// Function EndGame.EndMainStatusMenu.UpdatePlayerStatusInfo
// 0x0008 (0x0008 - 0x0000)
struct EndMainStatusMenu_UpdatePlayerStatusInfo final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlayerType                                   PlayerType;                                        // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMainStatusMenu_UpdatePlayerStatusInfo) == 0x000004, "Wrong alignment on EndMainStatusMenu_UpdatePlayerStatusInfo");
static_assert(sizeof(EndMainStatusMenu_UpdatePlayerStatusInfo) == 0x000008, "Wrong size on EndMainStatusMenu_UpdatePlayerStatusInfo");
static_assert(offsetof(EndMainStatusMenu_UpdatePlayerStatusInfo, CellIndex) == 0x000000, "Member 'EndMainStatusMenu_UpdatePlayerStatusInfo::CellIndex' has a wrong offset!");
static_assert(offsetof(EndMainStatusMenu_UpdatePlayerStatusInfo, PlayerType) == 0x000004, "Member 'EndMainStatusMenu_UpdatePlayerStatusInfo::PlayerType' has a wrong offset!");

// Function EndGame.EndMainStatusMenu.UpdateStatusPanel
// 0x0001 (0x0001 - 0x0000)
struct EndMainStatusMenu_UpdateStatusPanel final
{
public:
	EPlayerType                                   PlayerType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMainStatusMenu_UpdateStatusPanel) == 0x000001, "Wrong alignment on EndMainStatusMenu_UpdateStatusPanel");
static_assert(sizeof(EndMainStatusMenu_UpdateStatusPanel) == 0x000001, "Wrong size on EndMainStatusMenu_UpdateStatusPanel");
static_assert(offsetof(EndMainStatusMenu_UpdateStatusPanel, PlayerType) == 0x000000, "Member 'EndMainStatusMenu_UpdateStatusPanel::PlayerType' has a wrong offset!");

// Function EndGame.EndMainWeaponUpgradeMenu.OnCoreMenuSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndMainWeaponUpgradeMenu_OnCoreMenuSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMainWeaponUpgradeMenu_OnCoreMenuSetupItem) == 0x000008, "Wrong alignment on EndMainWeaponUpgradeMenu_OnCoreMenuSetupItem");
static_assert(sizeof(EndMainWeaponUpgradeMenu_OnCoreMenuSetupItem) == 0x000010, "Wrong size on EndMainWeaponUpgradeMenu_OnCoreMenuSetupItem");
static_assert(offsetof(EndMainWeaponUpgradeMenu_OnCoreMenuSetupItem, ItemWidget) == 0x000000, "Member 'EndMainWeaponUpgradeMenu_OnCoreMenuSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndMainWeaponUpgradeMenu_OnCoreMenuSetupItem, CellIndex) == 0x000008, "Member 'EndMainWeaponUpgradeMenu_OnCoreMenuSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndMainWeaponUpgradeMenu.OnSkillListMenuSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndMainWeaponUpgradeMenu_OnSkillListMenuSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMainWeaponUpgradeMenu_OnSkillListMenuSetupItem) == 0x000008, "Wrong alignment on EndMainWeaponUpgradeMenu_OnSkillListMenuSetupItem");
static_assert(sizeof(EndMainWeaponUpgradeMenu_OnSkillListMenuSetupItem) == 0x000010, "Wrong size on EndMainWeaponUpgradeMenu_OnSkillListMenuSetupItem");
static_assert(offsetof(EndMainWeaponUpgradeMenu_OnSkillListMenuSetupItem, ItemWidget) == 0x000000, "Member 'EndMainWeaponUpgradeMenu_OnSkillListMenuSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndMainWeaponUpgradeMenu_OnSkillListMenuSetupItem, CellIndex) == 0x000008, "Member 'EndMainWeaponUpgradeMenu_OnSkillListMenuSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndMenuBPAPI.BPAbsoluteToViewport
// 0x0058 (0x0058 - 0x0000)
struct EndMenuBPAPI_BPAbsoluteToViewport final
{
public:
	class UWorld*                                 World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometry                              Geometry;                                          // 0x0008(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector2D                              AbsoluteCoordinate;                                // 0x0040(0x0008)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ScreenPosition;                                    // 0x0048(0x0008)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ViewportPosition;                                  // 0x0050(0x0008)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuBPAPI_BPAbsoluteToViewport) == 0x000008, "Wrong alignment on EndMenuBPAPI_BPAbsoluteToViewport");
static_assert(sizeof(EndMenuBPAPI_BPAbsoluteToViewport) == 0x000058, "Wrong size on EndMenuBPAPI_BPAbsoluteToViewport");
static_assert(offsetof(EndMenuBPAPI_BPAbsoluteToViewport, World) == 0x000000, "Member 'EndMenuBPAPI_BPAbsoluteToViewport::World' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_BPAbsoluteToViewport, Geometry) == 0x000008, "Member 'EndMenuBPAPI_BPAbsoluteToViewport::Geometry' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_BPAbsoluteToViewport, AbsoluteCoordinate) == 0x000040, "Member 'EndMenuBPAPI_BPAbsoluteToViewport::AbsoluteCoordinate' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_BPAbsoluteToViewport, ScreenPosition) == 0x000048, "Member 'EndMenuBPAPI_BPAbsoluteToViewport::ScreenPosition' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_BPAbsoluteToViewport, ViewportPosition) == 0x000050, "Member 'EndMenuBPAPI_BPAbsoluteToViewport::ViewportPosition' has a wrong offset!");

// Function EndGame.EndMenuBPAPI.BPGetAllChapters
// 0x0010 (0x0010 - 0x0000)
struct EndMenuBPAPI_BPGetAllChapters final
{
public:
	TArray<class FName>                           ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuBPAPI_BPGetAllChapters) == 0x000008, "Wrong alignment on EndMenuBPAPI_BPGetAllChapters");
static_assert(sizeof(EndMenuBPAPI_BPGetAllChapters) == 0x000010, "Wrong size on EndMenuBPAPI_BPGetAllChapters");
static_assert(offsetof(EndMenuBPAPI_BPGetAllChapters, ReturnValue) == 0x000000, "Member 'EndMenuBPAPI_BPGetAllChapters::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuBPAPI.BPGetCurrentChapter
// 0x000C (0x000C - 0x0000)
struct EndMenuBPAPI_BPGetCurrentChapter final
{
public:
	class FName                                   ChapterID;                                         // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuBPAPI_BPGetCurrentChapter) == 0x000004, "Wrong alignment on EndMenuBPAPI_BPGetCurrentChapter");
static_assert(sizeof(EndMenuBPAPI_BPGetCurrentChapter) == 0x00000C, "Wrong size on EndMenuBPAPI_BPGetCurrentChapter");
static_assert(offsetof(EndMenuBPAPI_BPGetCurrentChapter, ChapterID) == 0x000000, "Member 'EndMenuBPAPI_BPGetCurrentChapter::ChapterID' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_BPGetCurrentChapter, ReturnValue) == 0x000008, "Member 'EndMenuBPAPI_BPGetCurrentChapter::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuBPAPI.BPGetCurrentEquipment
// 0x0280 (0x0280 - 0x0000)
struct EndMenuBPAPI_BPGetCurrentEquipment final
{
public:
	EPlayerType                                   PlayerType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEquipmentCategoryMain                        EquipType;                                         // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEndDataTableEquipment                 ReturnValue;                                       // 0x0008(0x0278)(ConstParm, Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuBPAPI_BPGetCurrentEquipment) == 0x000008, "Wrong alignment on EndMenuBPAPI_BPGetCurrentEquipment");
static_assert(sizeof(EndMenuBPAPI_BPGetCurrentEquipment) == 0x000280, "Wrong size on EndMenuBPAPI_BPGetCurrentEquipment");
static_assert(offsetof(EndMenuBPAPI_BPGetCurrentEquipment, PlayerType) == 0x000000, "Member 'EndMenuBPAPI_BPGetCurrentEquipment::PlayerType' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_BPGetCurrentEquipment, EquipType) == 0x000001, "Member 'EndMenuBPAPI_BPGetCurrentEquipment::EquipType' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_BPGetCurrentEquipment, ReturnValue) == 0x000008, "Member 'EndMenuBPAPI_BPGetCurrentEquipment::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuBPAPI.BPGetFinalPower
// 0x0010 (0x0010 - 0x0000)
struct EndMenuBPAPI_BPGetFinalPower final
{
public:
	EPlayerType                                   PlayerType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PowerValue;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndBattleDamageSourcePowerType               PowerType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuBPAPI_BPGetFinalPower) == 0x000004, "Wrong alignment on EndMenuBPAPI_BPGetFinalPower");
static_assert(sizeof(EndMenuBPAPI_BPGetFinalPower) == 0x000010, "Wrong size on EndMenuBPAPI_BPGetFinalPower");
static_assert(offsetof(EndMenuBPAPI_BPGetFinalPower, PlayerType) == 0x000000, "Member 'EndMenuBPAPI_BPGetFinalPower::PlayerType' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_BPGetFinalPower, PowerValue) == 0x000004, "Member 'EndMenuBPAPI_BPGetFinalPower::PowerValue' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_BPGetFinalPower, PowerType) == 0x000008, "Member 'EndMenuBPAPI_BPGetFinalPower::PowerType' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_BPGetFinalPower, ReturnValue) == 0x00000C, "Member 'EndMenuBPAPI_BPGetFinalPower::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuBPAPI.BPGetFirstName
// 0x0018 (0x0018 - 0x0000)
struct EndMenuBPAPI_BPGetFirstName final
{
public:
	EPlayerType                                   Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuBPAPI_BPGetFirstName) == 0x000008, "Wrong alignment on EndMenuBPAPI_BPGetFirstName");
static_assert(sizeof(EndMenuBPAPI_BPGetFirstName) == 0x000018, "Wrong size on EndMenuBPAPI_BPGetFirstName");
static_assert(offsetof(EndMenuBPAPI_BPGetFirstName, Type) == 0x000000, "Member 'EndMenuBPAPI_BPGetFirstName::Type' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_BPGetFirstName, ReturnValue) == 0x000008, "Member 'EndMenuBPAPI_BPGetFirstName::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuBPAPI.BPGetLastName
// 0x0018 (0x0018 - 0x0000)
struct EndMenuBPAPI_BPGetLastName final
{
public:
	EPlayerType                                   Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuBPAPI_BPGetLastName) == 0x000008, "Wrong alignment on EndMenuBPAPI_BPGetLastName");
static_assert(sizeof(EndMenuBPAPI_BPGetLastName) == 0x000018, "Wrong size on EndMenuBPAPI_BPGetLastName");
static_assert(offsetof(EndMenuBPAPI_BPGetLastName, Type) == 0x000000, "Member 'EndMenuBPAPI_BPGetLastName::Type' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_BPGetLastName, ReturnValue) == 0x000008, "Member 'EndMenuBPAPI_BPGetLastName::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuBPAPI.BPGetMemberName
// 0x000C (0x000C - 0x0000)
struct EndMenuBPAPI_BPGetMemberName final
{
public:
	EPlayerType                                   PlayerType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuBPAPI_BPGetMemberName) == 0x000004, "Wrong alignment on EndMenuBPAPI_BPGetMemberName");
static_assert(sizeof(EndMenuBPAPI_BPGetMemberName) == 0x00000C, "Wrong size on EndMenuBPAPI_BPGetMemberName");
static_assert(offsetof(EndMenuBPAPI_BPGetMemberName, PlayerType) == 0x000000, "Member 'EndMenuBPAPI_BPGetMemberName::PlayerType' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_BPGetMemberName, ReturnValue) == 0x000004, "Member 'EndMenuBPAPI_BPGetMemberName::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuBPAPI.BPGetPlayerDexterity
// 0x0008 (0x0008 - 0x0000)
struct EndMenuBPAPI_BPGetPlayerDexterity final
{
public:
	EPlayerType                                   Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuBPAPI_BPGetPlayerDexterity) == 0x000004, "Wrong alignment on EndMenuBPAPI_BPGetPlayerDexterity");
static_assert(sizeof(EndMenuBPAPI_BPGetPlayerDexterity) == 0x000008, "Wrong size on EndMenuBPAPI_BPGetPlayerDexterity");
static_assert(offsetof(EndMenuBPAPI_BPGetPlayerDexterity, Type) == 0x000000, "Member 'EndMenuBPAPI_BPGetPlayerDexterity::Type' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_BPGetPlayerDexterity, ReturnValue) == 0x000004, "Member 'EndMenuBPAPI_BPGetPlayerDexterity::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuBPAPI.BPGetPlayerExperience
// 0x0008 (0x0008 - 0x0000)
struct EndMenuBPAPI_BPGetPlayerExperience final
{
public:
	EPlayerType                                   Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuBPAPI_BPGetPlayerExperience) == 0x000004, "Wrong alignment on EndMenuBPAPI_BPGetPlayerExperience");
static_assert(sizeof(EndMenuBPAPI_BPGetPlayerExperience) == 0x000008, "Wrong size on EndMenuBPAPI_BPGetPlayerExperience");
static_assert(offsetof(EndMenuBPAPI_BPGetPlayerExperience, Type) == 0x000000, "Member 'EndMenuBPAPI_BPGetPlayerExperience::Type' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_BPGetPlayerExperience, ReturnValue) == 0x000004, "Member 'EndMenuBPAPI_BPGetPlayerExperience::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuBPAPI.BPGetPlayerExperienceBase
// 0x0008 (0x0008 - 0x0000)
struct EndMenuBPAPI_BPGetPlayerExperienceBase final
{
public:
	EPlayerType                                   Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuBPAPI_BPGetPlayerExperienceBase) == 0x000004, "Wrong alignment on EndMenuBPAPI_BPGetPlayerExperienceBase");
static_assert(sizeof(EndMenuBPAPI_BPGetPlayerExperienceBase) == 0x000008, "Wrong size on EndMenuBPAPI_BPGetPlayerExperienceBase");
static_assert(offsetof(EndMenuBPAPI_BPGetPlayerExperienceBase, Type) == 0x000000, "Member 'EndMenuBPAPI_BPGetPlayerExperienceBase::Type' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_BPGetPlayerExperienceBase, ReturnValue) == 0x000004, "Member 'EndMenuBPAPI_BPGetPlayerExperienceBase::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuBPAPI.BPGetPlayerExperienceNext
// 0x0008 (0x0008 - 0x0000)
struct EndMenuBPAPI_BPGetPlayerExperienceNext final
{
public:
	EPlayerType                                   Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuBPAPI_BPGetPlayerExperienceNext) == 0x000004, "Wrong alignment on EndMenuBPAPI_BPGetPlayerExperienceNext");
static_assert(sizeof(EndMenuBPAPI_BPGetPlayerExperienceNext) == 0x000008, "Wrong size on EndMenuBPAPI_BPGetPlayerExperienceNext");
static_assert(offsetof(EndMenuBPAPI_BPGetPlayerExperienceNext, Type) == 0x000000, "Member 'EndMenuBPAPI_BPGetPlayerExperienceNext::Type' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_BPGetPlayerExperienceNext, ReturnValue) == 0x000004, "Member 'EndMenuBPAPI_BPGetPlayerExperienceNext::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuBPAPI.BPGetPlayerHP
// 0x0008 (0x0008 - 0x0000)
struct EndMenuBPAPI_BPGetPlayerHP final
{
public:
	EPlayerType                                   Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuBPAPI_BPGetPlayerHP) == 0x000004, "Wrong alignment on EndMenuBPAPI_BPGetPlayerHP");
static_assert(sizeof(EndMenuBPAPI_BPGetPlayerHP) == 0x000008, "Wrong size on EndMenuBPAPI_BPGetPlayerHP");
static_assert(offsetof(EndMenuBPAPI_BPGetPlayerHP, Type) == 0x000000, "Member 'EndMenuBPAPI_BPGetPlayerHP::Type' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_BPGetPlayerHP, ReturnValue) == 0x000004, "Member 'EndMenuBPAPI_BPGetPlayerHP::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuBPAPI.BPGetPlayerHPMax
// 0x0008 (0x0008 - 0x0000)
struct EndMenuBPAPI_BPGetPlayerHPMax final
{
public:
	EPlayerType                                   Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuBPAPI_BPGetPlayerHPMax) == 0x000004, "Wrong alignment on EndMenuBPAPI_BPGetPlayerHPMax");
static_assert(sizeof(EndMenuBPAPI_BPGetPlayerHPMax) == 0x000008, "Wrong size on EndMenuBPAPI_BPGetPlayerHPMax");
static_assert(offsetof(EndMenuBPAPI_BPGetPlayerHPMax, Type) == 0x000000, "Member 'EndMenuBPAPI_BPGetPlayerHPMax::Type' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_BPGetPlayerHPMax, ReturnValue) == 0x000004, "Member 'EndMenuBPAPI_BPGetPlayerHPMax::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuBPAPI.BPGetPlayerLevel
// 0x0008 (0x0008 - 0x0000)
struct EndMenuBPAPI_BPGetPlayerLevel final
{
public:
	EPlayerType                                   Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuBPAPI_BPGetPlayerLevel) == 0x000004, "Wrong alignment on EndMenuBPAPI_BPGetPlayerLevel");
static_assert(sizeof(EndMenuBPAPI_BPGetPlayerLevel) == 0x000008, "Wrong size on EndMenuBPAPI_BPGetPlayerLevel");
static_assert(offsetof(EndMenuBPAPI_BPGetPlayerLevel, Type) == 0x000000, "Member 'EndMenuBPAPI_BPGetPlayerLevel::Type' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_BPGetPlayerLevel, ReturnValue) == 0x000004, "Member 'EndMenuBPAPI_BPGetPlayerLevel::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuBPAPI.BPGetPlayerLimit
// 0x0008 (0x0008 - 0x0000)
struct EndMenuBPAPI_BPGetPlayerLimit final
{
public:
	EPlayerType                                   Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuBPAPI_BPGetPlayerLimit) == 0x000004, "Wrong alignment on EndMenuBPAPI_BPGetPlayerLimit");
static_assert(sizeof(EndMenuBPAPI_BPGetPlayerLimit) == 0x000008, "Wrong size on EndMenuBPAPI_BPGetPlayerLimit");
static_assert(offsetof(EndMenuBPAPI_BPGetPlayerLimit, Type) == 0x000000, "Member 'EndMenuBPAPI_BPGetPlayerLimit::Type' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_BPGetPlayerLimit, ReturnValue) == 0x000004, "Member 'EndMenuBPAPI_BPGetPlayerLimit::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuBPAPI.BPGetPlayerLimitLevel
// 0x0008 (0x0008 - 0x0000)
struct EndMenuBPAPI_BPGetPlayerLimitLevel final
{
public:
	EPlayerType                                   Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuBPAPI_BPGetPlayerLimitLevel) == 0x000004, "Wrong alignment on EndMenuBPAPI_BPGetPlayerLimitLevel");
static_assert(sizeof(EndMenuBPAPI_BPGetPlayerLimitLevel) == 0x000008, "Wrong size on EndMenuBPAPI_BPGetPlayerLimitLevel");
static_assert(offsetof(EndMenuBPAPI_BPGetPlayerLimitLevel, Type) == 0x000000, "Member 'EndMenuBPAPI_BPGetPlayerLimitLevel::Type' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_BPGetPlayerLimitLevel, ReturnValue) == 0x000004, "Member 'EndMenuBPAPI_BPGetPlayerLimitLevel::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuBPAPI.BPGetPlayerLimitLevelMax
// 0x0008 (0x0008 - 0x0000)
struct EndMenuBPAPI_BPGetPlayerLimitLevelMax final
{
public:
	EPlayerType                                   Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuBPAPI_BPGetPlayerLimitLevelMax) == 0x000004, "Wrong alignment on EndMenuBPAPI_BPGetPlayerLimitLevelMax");
static_assert(sizeof(EndMenuBPAPI_BPGetPlayerLimitLevelMax) == 0x000008, "Wrong size on EndMenuBPAPI_BPGetPlayerLimitLevelMax");
static_assert(offsetof(EndMenuBPAPI_BPGetPlayerLimitLevelMax, Type) == 0x000000, "Member 'EndMenuBPAPI_BPGetPlayerLimitLevelMax::Type' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_BPGetPlayerLimitLevelMax, ReturnValue) == 0x000004, "Member 'EndMenuBPAPI_BPGetPlayerLimitLevelMax::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuBPAPI.BPGetPlayerLimitMax
// 0x0008 (0x0008 - 0x0000)
struct EndMenuBPAPI_BPGetPlayerLimitMax final
{
public:
	EPlayerType                                   Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuBPAPI_BPGetPlayerLimitMax) == 0x000004, "Wrong alignment on EndMenuBPAPI_BPGetPlayerLimitMax");
static_assert(sizeof(EndMenuBPAPI_BPGetPlayerLimitMax) == 0x000008, "Wrong size on EndMenuBPAPI_BPGetPlayerLimitMax");
static_assert(offsetof(EndMenuBPAPI_BPGetPlayerLimitMax, Type) == 0x000000, "Member 'EndMenuBPAPI_BPGetPlayerLimitMax::Type' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_BPGetPlayerLimitMax, ReturnValue) == 0x000004, "Member 'EndMenuBPAPI_BPGetPlayerLimitMax::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuBPAPI.BPGetPlayerLuck
// 0x0008 (0x0008 - 0x0000)
struct EndMenuBPAPI_BPGetPlayerLuck final
{
public:
	EPlayerType                                   Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuBPAPI_BPGetPlayerLuck) == 0x000004, "Wrong alignment on EndMenuBPAPI_BPGetPlayerLuck");
static_assert(sizeof(EndMenuBPAPI_BPGetPlayerLuck) == 0x000008, "Wrong size on EndMenuBPAPI_BPGetPlayerLuck");
static_assert(offsetof(EndMenuBPAPI_BPGetPlayerLuck, Type) == 0x000000, "Member 'EndMenuBPAPI_BPGetPlayerLuck::Type' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_BPGetPlayerLuck, ReturnValue) == 0x000004, "Member 'EndMenuBPAPI_BPGetPlayerLuck::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuBPAPI.BPGetPlayerMagic
// 0x0008 (0x0008 - 0x0000)
struct EndMenuBPAPI_BPGetPlayerMagic final
{
public:
	EPlayerType                                   Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuBPAPI_BPGetPlayerMagic) == 0x000004, "Wrong alignment on EndMenuBPAPI_BPGetPlayerMagic");
static_assert(sizeof(EndMenuBPAPI_BPGetPlayerMagic) == 0x000008, "Wrong size on EndMenuBPAPI_BPGetPlayerMagic");
static_assert(offsetof(EndMenuBPAPI_BPGetPlayerMagic, Type) == 0x000000, "Member 'EndMenuBPAPI_BPGetPlayerMagic::Type' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_BPGetPlayerMagic, ReturnValue) == 0x000004, "Member 'EndMenuBPAPI_BPGetPlayerMagic::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuBPAPI.BPGetPlayerMagicAttack
// 0x0008 (0x0008 - 0x0000)
struct EndMenuBPAPI_BPGetPlayerMagicAttack final
{
public:
	EPlayerType                                   Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuBPAPI_BPGetPlayerMagicAttack) == 0x000004, "Wrong alignment on EndMenuBPAPI_BPGetPlayerMagicAttack");
static_assert(sizeof(EndMenuBPAPI_BPGetPlayerMagicAttack) == 0x000008, "Wrong size on EndMenuBPAPI_BPGetPlayerMagicAttack");
static_assert(offsetof(EndMenuBPAPI_BPGetPlayerMagicAttack, Type) == 0x000000, "Member 'EndMenuBPAPI_BPGetPlayerMagicAttack::Type' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_BPGetPlayerMagicAttack, ReturnValue) == 0x000004, "Member 'EndMenuBPAPI_BPGetPlayerMagicAttack::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuBPAPI.BPGetPlayerMagicDefense
// 0x0008 (0x0008 - 0x0000)
struct EndMenuBPAPI_BPGetPlayerMagicDefense final
{
public:
	EPlayerType                                   Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuBPAPI_BPGetPlayerMagicDefense) == 0x000004, "Wrong alignment on EndMenuBPAPI_BPGetPlayerMagicDefense");
static_assert(sizeof(EndMenuBPAPI_BPGetPlayerMagicDefense) == 0x000008, "Wrong size on EndMenuBPAPI_BPGetPlayerMagicDefense");
static_assert(offsetof(EndMenuBPAPI_BPGetPlayerMagicDefense, Type) == 0x000000, "Member 'EndMenuBPAPI_BPGetPlayerMagicDefense::Type' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_BPGetPlayerMagicDefense, ReturnValue) == 0x000004, "Member 'EndMenuBPAPI_BPGetPlayerMagicDefense::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuBPAPI.BPGetPlayerMaxMP
// 0x0008 (0x0008 - 0x0000)
struct EndMenuBPAPI_BPGetPlayerMaxMP final
{
public:
	EPlayerType                                   Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuBPAPI_BPGetPlayerMaxMP) == 0x000004, "Wrong alignment on EndMenuBPAPI_BPGetPlayerMaxMP");
static_assert(sizeof(EndMenuBPAPI_BPGetPlayerMaxMP) == 0x000008, "Wrong size on EndMenuBPAPI_BPGetPlayerMaxMP");
static_assert(offsetof(EndMenuBPAPI_BPGetPlayerMaxMP, Type) == 0x000000, "Member 'EndMenuBPAPI_BPGetPlayerMaxMP::Type' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_BPGetPlayerMaxMP, ReturnValue) == 0x000004, "Member 'EndMenuBPAPI_BPGetPlayerMaxMP::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuBPAPI.BPGetPlayerMP
// 0x0008 (0x0008 - 0x0000)
struct EndMenuBPAPI_BPGetPlayerMP final
{
public:
	EPlayerType                                   Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuBPAPI_BPGetPlayerMP) == 0x000004, "Wrong alignment on EndMenuBPAPI_BPGetPlayerMP");
static_assert(sizeof(EndMenuBPAPI_BPGetPlayerMP) == 0x000008, "Wrong size on EndMenuBPAPI_BPGetPlayerMP");
static_assert(offsetof(EndMenuBPAPI_BPGetPlayerMP, Type) == 0x000000, "Member 'EndMenuBPAPI_BPGetPlayerMP::Type' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_BPGetPlayerMP, ReturnValue) == 0x000004, "Member 'EndMenuBPAPI_BPGetPlayerMP::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuBPAPI.BPGetPlayerPhysicsAttack
// 0x0008 (0x0008 - 0x0000)
struct EndMenuBPAPI_BPGetPlayerPhysicsAttack final
{
public:
	EPlayerType                                   Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuBPAPI_BPGetPlayerPhysicsAttack) == 0x000004, "Wrong alignment on EndMenuBPAPI_BPGetPlayerPhysicsAttack");
static_assert(sizeof(EndMenuBPAPI_BPGetPlayerPhysicsAttack) == 0x000008, "Wrong size on EndMenuBPAPI_BPGetPlayerPhysicsAttack");
static_assert(offsetof(EndMenuBPAPI_BPGetPlayerPhysicsAttack, Type) == 0x000000, "Member 'EndMenuBPAPI_BPGetPlayerPhysicsAttack::Type' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_BPGetPlayerPhysicsAttack, ReturnValue) == 0x000004, "Member 'EndMenuBPAPI_BPGetPlayerPhysicsAttack::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuBPAPI.BPGetPlayerPhysicsDefense
// 0x0008 (0x0008 - 0x0000)
struct EndMenuBPAPI_BPGetPlayerPhysicsDefense final
{
public:
	EPlayerType                                   Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuBPAPI_BPGetPlayerPhysicsDefense) == 0x000004, "Wrong alignment on EndMenuBPAPI_BPGetPlayerPhysicsDefense");
static_assert(sizeof(EndMenuBPAPI_BPGetPlayerPhysicsDefense) == 0x000008, "Wrong size on EndMenuBPAPI_BPGetPlayerPhysicsDefense");
static_assert(offsetof(EndMenuBPAPI_BPGetPlayerPhysicsDefense, Type) == 0x000000, "Member 'EndMenuBPAPI_BPGetPlayerPhysicsDefense::Type' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_BPGetPlayerPhysicsDefense, ReturnValue) == 0x000004, "Member 'EndMenuBPAPI_BPGetPlayerPhysicsDefense::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuBPAPI.BPGetPlayerSpirit
// 0x0008 (0x0008 - 0x0000)
struct EndMenuBPAPI_BPGetPlayerSpirit final
{
public:
	EPlayerType                                   Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuBPAPI_BPGetPlayerSpirit) == 0x000004, "Wrong alignment on EndMenuBPAPI_BPGetPlayerSpirit");
static_assert(sizeof(EndMenuBPAPI_BPGetPlayerSpirit) == 0x000008, "Wrong size on EndMenuBPAPI_BPGetPlayerSpirit");
static_assert(offsetof(EndMenuBPAPI_BPGetPlayerSpirit, Type) == 0x000000, "Member 'EndMenuBPAPI_BPGetPlayerSpirit::Type' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_BPGetPlayerSpirit, ReturnValue) == 0x000004, "Member 'EndMenuBPAPI_BPGetPlayerSpirit::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuBPAPI.BPGetPlayerStatus
// 0x003C (0x003C - 0x0000)
struct EndMenuBPAPI_BPGetPlayerStatus final
{
public:
	EPlayerType                                   PlayerType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEndPlayerStatus                       ReturnValue;                                       // 0x0004(0x0038)(ConstParm, Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuBPAPI_BPGetPlayerStatus) == 0x000004, "Wrong alignment on EndMenuBPAPI_BPGetPlayerStatus");
static_assert(sizeof(EndMenuBPAPI_BPGetPlayerStatus) == 0x00003C, "Wrong size on EndMenuBPAPI_BPGetPlayerStatus");
static_assert(offsetof(EndMenuBPAPI_BPGetPlayerStatus, PlayerType) == 0x000000, "Member 'EndMenuBPAPI_BPGetPlayerStatus::PlayerType' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_BPGetPlayerStatus, ReturnValue) == 0x000004, "Member 'EndMenuBPAPI_BPGetPlayerStatus::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuBPAPI.BPGetPlayerStatusWithEquipment
// 0x0048 (0x0048 - 0x0000)
struct EndMenuBPAPI_BPGetPlayerStatusWithEquipment final
{
public:
	EPlayerType                                   PlayerType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEquipmentCategoryMain                        EquipType;                                         // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   EquipID;                                           // 0x0004(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EquipmentIndexToEquip;                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEndPlayerStatus                       ReturnValue;                                       // 0x0010(0x0038)(ConstParm, Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuBPAPI_BPGetPlayerStatusWithEquipment) == 0x000004, "Wrong alignment on EndMenuBPAPI_BPGetPlayerStatusWithEquipment");
static_assert(sizeof(EndMenuBPAPI_BPGetPlayerStatusWithEquipment) == 0x000048, "Wrong size on EndMenuBPAPI_BPGetPlayerStatusWithEquipment");
static_assert(offsetof(EndMenuBPAPI_BPGetPlayerStatusWithEquipment, PlayerType) == 0x000000, "Member 'EndMenuBPAPI_BPGetPlayerStatusWithEquipment::PlayerType' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_BPGetPlayerStatusWithEquipment, EquipType) == 0x000001, "Member 'EndMenuBPAPI_BPGetPlayerStatusWithEquipment::EquipType' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_BPGetPlayerStatusWithEquipment, EquipID) == 0x000004, "Member 'EndMenuBPAPI_BPGetPlayerStatusWithEquipment::EquipID' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_BPGetPlayerStatusWithEquipment, EquipmentIndexToEquip) == 0x00000C, "Member 'EndMenuBPAPI_BPGetPlayerStatusWithEquipment::EquipmentIndexToEquip' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_BPGetPlayerStatusWithEquipment, ReturnValue) == 0x000010, "Member 'EndMenuBPAPI_BPGetPlayerStatusWithEquipment::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuBPAPI.BPGetPlayerStatusWithMateria
// 0x004C (0x004C - 0x0000)
struct EndMenuBPAPI_BPGetPlayerStatusWithMateria final
{
public:
	EPlayerType                                   PlayerType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         OrigMateriaIndex;                                  // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TargetMateriaIndex;                                // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SlotIndex;                                         // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEquipmentCategoryMain                        materiaEquipType;                                  // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEndPlayerStatus                       ReturnValue;                                       // 0x0014(0x0038)(ConstParm, Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuBPAPI_BPGetPlayerStatusWithMateria) == 0x000004, "Wrong alignment on EndMenuBPAPI_BPGetPlayerStatusWithMateria");
static_assert(sizeof(EndMenuBPAPI_BPGetPlayerStatusWithMateria) == 0x00004C, "Wrong size on EndMenuBPAPI_BPGetPlayerStatusWithMateria");
static_assert(offsetof(EndMenuBPAPI_BPGetPlayerStatusWithMateria, PlayerType) == 0x000000, "Member 'EndMenuBPAPI_BPGetPlayerStatusWithMateria::PlayerType' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_BPGetPlayerStatusWithMateria, OrigMateriaIndex) == 0x000004, "Member 'EndMenuBPAPI_BPGetPlayerStatusWithMateria::OrigMateriaIndex' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_BPGetPlayerStatusWithMateria, TargetMateriaIndex) == 0x000008, "Member 'EndMenuBPAPI_BPGetPlayerStatusWithMateria::TargetMateriaIndex' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_BPGetPlayerStatusWithMateria, SlotIndex) == 0x00000C, "Member 'EndMenuBPAPI_BPGetPlayerStatusWithMateria::SlotIndex' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_BPGetPlayerStatusWithMateria, materiaEquipType) == 0x000010, "Member 'EndMenuBPAPI_BPGetPlayerStatusWithMateria::materiaEquipType' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_BPGetPlayerStatusWithMateria, ReturnValue) == 0x000014, "Member 'EndMenuBPAPI_BPGetPlayerStatusWithMateria::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuBPAPI.BPGetPlayerStrength
// 0x0008 (0x0008 - 0x0000)
struct EndMenuBPAPI_BPGetPlayerStrength final
{
public:
	EPlayerType                                   Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuBPAPI_BPGetPlayerStrength) == 0x000004, "Wrong alignment on EndMenuBPAPI_BPGetPlayerStrength");
static_assert(sizeof(EndMenuBPAPI_BPGetPlayerStrength) == 0x000008, "Wrong size on EndMenuBPAPI_BPGetPlayerStrength");
static_assert(offsetof(EndMenuBPAPI_BPGetPlayerStrength, Type) == 0x000000, "Member 'EndMenuBPAPI_BPGetPlayerStrength::Type' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_BPGetPlayerStrength, ReturnValue) == 0x000004, "Member 'EndMenuBPAPI_BPGetPlayerStrength::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuBPAPI.BPGetPlayerVitality
// 0x0008 (0x0008 - 0x0000)
struct EndMenuBPAPI_BPGetPlayerVitality final
{
public:
	EPlayerType                                   Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuBPAPI_BPGetPlayerVitality) == 0x000004, "Wrong alignment on EndMenuBPAPI_BPGetPlayerVitality");
static_assert(sizeof(EndMenuBPAPI_BPGetPlayerVitality) == 0x000008, "Wrong size on EndMenuBPAPI_BPGetPlayerVitality");
static_assert(offsetof(EndMenuBPAPI_BPGetPlayerVitality, Type) == 0x000000, "Member 'EndMenuBPAPI_BPGetPlayerVitality::Type' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_BPGetPlayerVitality, ReturnValue) == 0x000004, "Member 'EndMenuBPAPI_BPGetPlayerVitality::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuBPAPI.BPIsCharacterDead
// 0x0002 (0x0002 - 0x0000)
struct EndMenuBPAPI_BPIsCharacterDead final
{
public:
	EPlayerType                                   PlayerType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuBPAPI_BPIsCharacterDead) == 0x000001, "Wrong alignment on EndMenuBPAPI_BPIsCharacterDead");
static_assert(sizeof(EndMenuBPAPI_BPIsCharacterDead) == 0x000002, "Wrong size on EndMenuBPAPI_BPIsCharacterDead");
static_assert(offsetof(EndMenuBPAPI_BPIsCharacterDead, PlayerType) == 0x000000, "Member 'EndMenuBPAPI_BPIsCharacterDead::PlayerType' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_BPIsCharacterDead, ReturnValue) == 0x000001, "Member 'EndMenuBPAPI_BPIsCharacterDead::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuBPAPI.BPLocalToViewport
// 0x0058 (0x0058 - 0x0000)
struct EndMenuBPAPI_BPLocalToViewport final
{
public:
	class UWorld*                                 World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometry                              Geometry;                                          // 0x0008(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector2D                              LocalCoordinate;                                   // 0x0040(0x0008)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ScreenPosition;                                    // 0x0048(0x0008)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ViewportPosition;                                  // 0x0050(0x0008)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuBPAPI_BPLocalToViewport) == 0x000008, "Wrong alignment on EndMenuBPAPI_BPLocalToViewport");
static_assert(sizeof(EndMenuBPAPI_BPLocalToViewport) == 0x000058, "Wrong size on EndMenuBPAPI_BPLocalToViewport");
static_assert(offsetof(EndMenuBPAPI_BPLocalToViewport, World) == 0x000000, "Member 'EndMenuBPAPI_BPLocalToViewport::World' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_BPLocalToViewport, Geometry) == 0x000008, "Member 'EndMenuBPAPI_BPLocalToViewport::Geometry' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_BPLocalToViewport, LocalCoordinate) == 0x000040, "Member 'EndMenuBPAPI_BPLocalToViewport::LocalCoordinate' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_BPLocalToViewport, ScreenPosition) == 0x000048, "Member 'EndMenuBPAPI_BPLocalToViewport::ScreenPosition' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_BPLocalToViewport, ViewportPosition) == 0x000050, "Member 'EndMenuBPAPI_BPLocalToViewport::ViewportPosition' has a wrong offset!");

// Function EndGame.EndMenuBPAPI.BPSetPlayerExperience
// 0x0008 (0x0008 - 0x0000)
struct EndMenuBPAPI_BPSetPlayerExperience final
{
public:
	EPlayerType                                   Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Exp;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuBPAPI_BPSetPlayerExperience) == 0x000004, "Wrong alignment on EndMenuBPAPI_BPSetPlayerExperience");
static_assert(sizeof(EndMenuBPAPI_BPSetPlayerExperience) == 0x000008, "Wrong size on EndMenuBPAPI_BPSetPlayerExperience");
static_assert(offsetof(EndMenuBPAPI_BPSetPlayerExperience, Type) == 0x000000, "Member 'EndMenuBPAPI_BPSetPlayerExperience::Type' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_BPSetPlayerExperience, Exp) == 0x000004, "Member 'EndMenuBPAPI_BPSetPlayerExperience::Exp' has a wrong offset!");

// Function EndGame.EndMenuBPAPI.BPSetPlayerHP
// 0x0008 (0x0008 - 0x0000)
struct EndMenuBPAPI_BPSetPlayerHP final
{
public:
	EPlayerType                                   Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         HP;                                                // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuBPAPI_BPSetPlayerHP) == 0x000004, "Wrong alignment on EndMenuBPAPI_BPSetPlayerHP");
static_assert(sizeof(EndMenuBPAPI_BPSetPlayerHP) == 0x000008, "Wrong size on EndMenuBPAPI_BPSetPlayerHP");
static_assert(offsetof(EndMenuBPAPI_BPSetPlayerHP, Type) == 0x000000, "Member 'EndMenuBPAPI_BPSetPlayerHP::Type' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_BPSetPlayerHP, HP) == 0x000004, "Member 'EndMenuBPAPI_BPSetPlayerHP::HP' has a wrong offset!");

// Function EndGame.EndMenuBPAPI.BPSetPlayerHPMax
// 0x0008 (0x0008 - 0x0000)
struct EndMenuBPAPI_BPSetPlayerHPMax final
{
public:
	EPlayerType                                   Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         HP;                                                // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuBPAPI_BPSetPlayerHPMax) == 0x000004, "Wrong alignment on EndMenuBPAPI_BPSetPlayerHPMax");
static_assert(sizeof(EndMenuBPAPI_BPSetPlayerHPMax) == 0x000008, "Wrong size on EndMenuBPAPI_BPSetPlayerHPMax");
static_assert(offsetof(EndMenuBPAPI_BPSetPlayerHPMax, Type) == 0x000000, "Member 'EndMenuBPAPI_BPSetPlayerHPMax::Type' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_BPSetPlayerHPMax, HP) == 0x000004, "Member 'EndMenuBPAPI_BPSetPlayerHPMax::HP' has a wrong offset!");

// Function EndGame.EndMenuBPAPI.BPSetPlayerLevel
// 0x0008 (0x0008 - 0x0000)
struct EndMenuBPAPI_BPSetPlayerLevel final
{
public:
	EPlayerType                                   Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Level;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuBPAPI_BPSetPlayerLevel) == 0x000004, "Wrong alignment on EndMenuBPAPI_BPSetPlayerLevel");
static_assert(sizeof(EndMenuBPAPI_BPSetPlayerLevel) == 0x000008, "Wrong size on EndMenuBPAPI_BPSetPlayerLevel");
static_assert(offsetof(EndMenuBPAPI_BPSetPlayerLevel, Type) == 0x000000, "Member 'EndMenuBPAPI_BPSetPlayerLevel::Type' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_BPSetPlayerLevel, Level) == 0x000004, "Member 'EndMenuBPAPI_BPSetPlayerLevel::Level' has a wrong offset!");

// Function EndGame.EndMenuBPAPI.BPSetPlayerLimit
// 0x0008 (0x0008 - 0x0000)
struct EndMenuBPAPI_BPSetPlayerLimit final
{
public:
	EPlayerType                                   Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Limit;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuBPAPI_BPSetPlayerLimit) == 0x000004, "Wrong alignment on EndMenuBPAPI_BPSetPlayerLimit");
static_assert(sizeof(EndMenuBPAPI_BPSetPlayerLimit) == 0x000008, "Wrong size on EndMenuBPAPI_BPSetPlayerLimit");
static_assert(offsetof(EndMenuBPAPI_BPSetPlayerLimit, Type) == 0x000000, "Member 'EndMenuBPAPI_BPSetPlayerLimit::Type' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_BPSetPlayerLimit, Limit) == 0x000004, "Member 'EndMenuBPAPI_BPSetPlayerLimit::Limit' has a wrong offset!");

// Function EndGame.EndMenuBPAPI.BPSetPlayerLimitLevel
// 0x0008 (0x0008 - 0x0000)
struct EndMenuBPAPI_BPSetPlayerLimitLevel final
{
public:
	EPlayerType                                   Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LimitLevel;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuBPAPI_BPSetPlayerLimitLevel) == 0x000004, "Wrong alignment on EndMenuBPAPI_BPSetPlayerLimitLevel");
static_assert(sizeof(EndMenuBPAPI_BPSetPlayerLimitLevel) == 0x000008, "Wrong size on EndMenuBPAPI_BPSetPlayerLimitLevel");
static_assert(offsetof(EndMenuBPAPI_BPSetPlayerLimitLevel, Type) == 0x000000, "Member 'EndMenuBPAPI_BPSetPlayerLimitLevel::Type' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_BPSetPlayerLimitLevel, LimitLevel) == 0x000004, "Member 'EndMenuBPAPI_BPSetPlayerLimitLevel::LimitLevel' has a wrong offset!");

// Function EndGame.EndMenuBPAPI.BPSetPlayerLimitLevelMax
// 0x0008 (0x0008 - 0x0000)
struct EndMenuBPAPI_BPSetPlayerLimitLevelMax final
{
public:
	EPlayerType                                   Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LimitLevelMax;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuBPAPI_BPSetPlayerLimitLevelMax) == 0x000004, "Wrong alignment on EndMenuBPAPI_BPSetPlayerLimitLevelMax");
static_assert(sizeof(EndMenuBPAPI_BPSetPlayerLimitLevelMax) == 0x000008, "Wrong size on EndMenuBPAPI_BPSetPlayerLimitLevelMax");
static_assert(offsetof(EndMenuBPAPI_BPSetPlayerLimitLevelMax, Type) == 0x000000, "Member 'EndMenuBPAPI_BPSetPlayerLimitLevelMax::Type' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_BPSetPlayerLimitLevelMax, LimitLevelMax) == 0x000004, "Member 'EndMenuBPAPI_BPSetPlayerLimitLevelMax::LimitLevelMax' has a wrong offset!");

// Function EndGame.EndMenuBPAPI.BPSetPlayerLimitMax
// 0x0008 (0x0008 - 0x0000)
struct EndMenuBPAPI_BPSetPlayerLimitMax final
{
public:
	EPlayerType                                   Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LimitMax;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuBPAPI_BPSetPlayerLimitMax) == 0x000004, "Wrong alignment on EndMenuBPAPI_BPSetPlayerLimitMax");
static_assert(sizeof(EndMenuBPAPI_BPSetPlayerLimitMax) == 0x000008, "Wrong size on EndMenuBPAPI_BPSetPlayerLimitMax");
static_assert(offsetof(EndMenuBPAPI_BPSetPlayerLimitMax, Type) == 0x000000, "Member 'EndMenuBPAPI_BPSetPlayerLimitMax::Type' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_BPSetPlayerLimitMax, LimitMax) == 0x000004, "Member 'EndMenuBPAPI_BPSetPlayerLimitMax::LimitMax' has a wrong offset!");

// Function EndGame.EndMenuBPAPI.BPSetPlayerMaxMP
// 0x0008 (0x0008 - 0x0000)
struct EndMenuBPAPI_BPSetPlayerMaxMP final
{
public:
	EPlayerType                                   Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxHp;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuBPAPI_BPSetPlayerMaxMP) == 0x000004, "Wrong alignment on EndMenuBPAPI_BPSetPlayerMaxMP");
static_assert(sizeof(EndMenuBPAPI_BPSetPlayerMaxMP) == 0x000008, "Wrong size on EndMenuBPAPI_BPSetPlayerMaxMP");
static_assert(offsetof(EndMenuBPAPI_BPSetPlayerMaxMP, Type) == 0x000000, "Member 'EndMenuBPAPI_BPSetPlayerMaxMP::Type' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_BPSetPlayerMaxMP, MaxHp) == 0x000004, "Member 'EndMenuBPAPI_BPSetPlayerMaxMP::MaxHp' has a wrong offset!");

// Function EndGame.EndMenuBPAPI.BPSetPlayerMP
// 0x0008 (0x0008 - 0x0000)
struct EndMenuBPAPI_BPSetPlayerMP final
{
public:
	EPlayerType                                   Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MP;                                                // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuBPAPI_BPSetPlayerMP) == 0x000004, "Wrong alignment on EndMenuBPAPI_BPSetPlayerMP");
static_assert(sizeof(EndMenuBPAPI_BPSetPlayerMP) == 0x000008, "Wrong size on EndMenuBPAPI_BPSetPlayerMP");
static_assert(offsetof(EndMenuBPAPI_BPSetPlayerMP, Type) == 0x000000, "Member 'EndMenuBPAPI_BPSetPlayerMP::Type' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_BPSetPlayerMP, MP) == 0x000004, "Member 'EndMenuBPAPI_BPSetPlayerMP::MP' has a wrong offset!");

// Function EndGame.EndMenuBPAPI.BPSetupBillboard
// 0x0010 (0x0010 - 0x0000)
struct EndMenuBPAPI_BPSetupBillboard final
{
public:
	class UUserWidget*                            TopStatus;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlayerType                                   PlayerType;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          enableReleaseSlate;                                // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMenuBPAPI_BPSetupBillboard) == 0x000008, "Wrong alignment on EndMenuBPAPI_BPSetupBillboard");
static_assert(sizeof(EndMenuBPAPI_BPSetupBillboard) == 0x000010, "Wrong size on EndMenuBPAPI_BPSetupBillboard");
static_assert(offsetof(EndMenuBPAPI_BPSetupBillboard, TopStatus) == 0x000000, "Member 'EndMenuBPAPI_BPSetupBillboard::TopStatus' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_BPSetupBillboard, PlayerType) == 0x000008, "Member 'EndMenuBPAPI_BPSetupBillboard::PlayerType' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_BPSetupBillboard, enableReleaseSlate) == 0x000009, "Member 'EndMenuBPAPI_BPSetupBillboard::enableReleaseSlate' has a wrong offset!");

// Function EndGame.EndMenuBPAPI.BPSetupLeaderLabel
// 0x0010 (0x0010 - 0x0000)
struct EndMenuBPAPI_BPSetupLeaderLabel final
{
public:
	class UUserWidget*                            TopStatus;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlayerType                                   PlayerType;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlayerType                                   LeaderType;                                        // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMenuBPAPI_BPSetupLeaderLabel) == 0x000008, "Wrong alignment on EndMenuBPAPI_BPSetupLeaderLabel");
static_assert(sizeof(EndMenuBPAPI_BPSetupLeaderLabel) == 0x000010, "Wrong size on EndMenuBPAPI_BPSetupLeaderLabel");
static_assert(offsetof(EndMenuBPAPI_BPSetupLeaderLabel, TopStatus) == 0x000000, "Member 'EndMenuBPAPI_BPSetupLeaderLabel::TopStatus' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_BPSetupLeaderLabel, PlayerType) == 0x000008, "Member 'EndMenuBPAPI_BPSetupLeaderLabel::PlayerType' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_BPSetupLeaderLabel, LeaderType) == 0x000009, "Member 'EndMenuBPAPI_BPSetupLeaderLabel::LeaderType' has a wrong offset!");

// Function EndGame.EndMenuBPAPI.BPSetupStatus
// 0x0010 (0x0010 - 0x0000)
struct EndMenuBPAPI_BPSetupStatus final
{
public:
	class UUserWidget*                            TopStatus;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlayerType                                   PlayerType;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMenuBPAPI_BPSetupStatus) == 0x000008, "Wrong alignment on EndMenuBPAPI_BPSetupStatus");
static_assert(sizeof(EndMenuBPAPI_BPSetupStatus) == 0x000010, "Wrong size on EndMenuBPAPI_BPSetupStatus");
static_assert(offsetof(EndMenuBPAPI_BPSetupStatus, TopStatus) == 0x000000, "Member 'EndMenuBPAPI_BPSetupStatus::TopStatus' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_BPSetupStatus, PlayerType) == 0x000008, "Member 'EndMenuBPAPI_BPSetupStatus::PlayerType' has a wrong offset!");

// Function EndGame.EndMenuBPAPI.BPSetupStatusPanel
// 0x0010 (0x0010 - 0x0000)
struct EndMenuBPAPI_BPSetupStatusPanel final
{
public:
	class UUserWidget*                            TopStatus;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlayerType                                   PlayerType;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlayerType                                   LeaderType;                                        // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMenuBPAPI_BPSetupStatusPanel) == 0x000008, "Wrong alignment on EndMenuBPAPI_BPSetupStatusPanel");
static_assert(sizeof(EndMenuBPAPI_BPSetupStatusPanel) == 0x000010, "Wrong size on EndMenuBPAPI_BPSetupStatusPanel");
static_assert(offsetof(EndMenuBPAPI_BPSetupStatusPanel, TopStatus) == 0x000000, "Member 'EndMenuBPAPI_BPSetupStatusPanel::TopStatus' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_BPSetupStatusPanel, PlayerType) == 0x000008, "Member 'EndMenuBPAPI_BPSetupStatusPanel::PlayerType' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_BPSetupStatusPanel, LeaderType) == 0x000009, "Member 'EndMenuBPAPI_BPSetupStatusPanel::LeaderType' has a wrong offset!");

// Function EndGame.EndMenuBPAPI.BPViewportToAbsolute
// 0x0050 (0x0050 - 0x0000)
struct EndMenuBPAPI_BPViewportToAbsolute final
{
public:
	class UWorld*                                 World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometry                              Geometry;                                          // 0x0008(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector2D                              ViewportPosition;                                  // 0x0040(0x0008)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              AbsoluteCoordinate;                                // 0x0048(0x0008)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuBPAPI_BPViewportToAbsolute) == 0x000008, "Wrong alignment on EndMenuBPAPI_BPViewportToAbsolute");
static_assert(sizeof(EndMenuBPAPI_BPViewportToAbsolute) == 0x000050, "Wrong size on EndMenuBPAPI_BPViewportToAbsolute");
static_assert(offsetof(EndMenuBPAPI_BPViewportToAbsolute, World) == 0x000000, "Member 'EndMenuBPAPI_BPViewportToAbsolute::World' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_BPViewportToAbsolute, Geometry) == 0x000008, "Member 'EndMenuBPAPI_BPViewportToAbsolute::Geometry' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_BPViewportToAbsolute, ViewportPosition) == 0x000040, "Member 'EndMenuBPAPI_BPViewportToAbsolute::ViewportPosition' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_BPViewportToAbsolute, AbsoluteCoordinate) == 0x000048, "Member 'EndMenuBPAPI_BPViewportToAbsolute::AbsoluteCoordinate' has a wrong offset!");

// Function EndGame.EndMenuBPAPI.BPViewportToLocal
// 0x0050 (0x0050 - 0x0000)
struct EndMenuBPAPI_BPViewportToLocal final
{
public:
	class UWorld*                                 World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometry                              Geometry;                                          // 0x0008(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector2D                              ViewportPosition;                                  // 0x0040(0x0008)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              LocalCoordinate;                                   // 0x0048(0x0008)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuBPAPI_BPViewportToLocal) == 0x000008, "Wrong alignment on EndMenuBPAPI_BPViewportToLocal");
static_assert(sizeof(EndMenuBPAPI_BPViewportToLocal) == 0x000050, "Wrong size on EndMenuBPAPI_BPViewportToLocal");
static_assert(offsetof(EndMenuBPAPI_BPViewportToLocal, World) == 0x000000, "Member 'EndMenuBPAPI_BPViewportToLocal::World' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_BPViewportToLocal, Geometry) == 0x000008, "Member 'EndMenuBPAPI_BPViewportToLocal::Geometry' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_BPViewportToLocal, ViewportPosition) == 0x000040, "Member 'EndMenuBPAPI_BPViewportToLocal::ViewportPosition' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_BPViewportToLocal, LocalCoordinate) == 0x000048, "Member 'EndMenuBPAPI_BPViewportToLocal::LocalCoordinate' has a wrong offset!");

// Function EndGame.EndMenuBPAPI.ResetLinkedMateria
// 0x0010 (0x0010 - 0x0000)
struct EndMenuBPAPI_ResetLinkedMateria final
{
public:
	TArray<class UEndMainMateriaListBoxWindow*>   MateriaLists;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuBPAPI_ResetLinkedMateria) == 0x000008, "Wrong alignment on EndMenuBPAPI_ResetLinkedMateria");
static_assert(sizeof(EndMenuBPAPI_ResetLinkedMateria) == 0x000010, "Wrong size on EndMenuBPAPI_ResetLinkedMateria");
static_assert(offsetof(EndMenuBPAPI_ResetLinkedMateria, MateriaLists) == 0x000000, "Member 'EndMenuBPAPI_ResetLinkedMateria::MateriaLists' has a wrong offset!");

// Function EndGame.EndMenuBPAPI.SetIgnoreListRepeatKey
// 0x0010 (0x0010 - 0x0000)
struct EndMenuBPAPI_SetIgnoreListRepeatKey final
{
public:
	const class UEndListBox*                      Widget;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ButtonName;                                        // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuBPAPI_SetIgnoreListRepeatKey) == 0x000008, "Wrong alignment on EndMenuBPAPI_SetIgnoreListRepeatKey");
static_assert(sizeof(EndMenuBPAPI_SetIgnoreListRepeatKey) == 0x000010, "Wrong size on EndMenuBPAPI_SetIgnoreListRepeatKey");
static_assert(offsetof(EndMenuBPAPI_SetIgnoreListRepeatKey, Widget) == 0x000000, "Member 'EndMenuBPAPI_SetIgnoreListRepeatKey::Widget' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_SetIgnoreListRepeatKey, ButtonName) == 0x000008, "Member 'EndMenuBPAPI_SetIgnoreListRepeatKey::ButtonName' has a wrong offset!");

// Function EndGame.EndMenuBPAPI.SetIgnoreRepeatKey
// 0x0010 (0x0010 - 0x0000)
struct EndMenuBPAPI_SetIgnoreRepeatKey final
{
public:
	const class UEndVirtualScrollBox*             Widget;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ButtonName;                                        // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuBPAPI_SetIgnoreRepeatKey) == 0x000008, "Wrong alignment on EndMenuBPAPI_SetIgnoreRepeatKey");
static_assert(sizeof(EndMenuBPAPI_SetIgnoreRepeatKey) == 0x000010, "Wrong size on EndMenuBPAPI_SetIgnoreRepeatKey");
static_assert(offsetof(EndMenuBPAPI_SetIgnoreRepeatKey, Widget) == 0x000000, "Member 'EndMenuBPAPI_SetIgnoreRepeatKey::Widget' has a wrong offset!");
static_assert(offsetof(EndMenuBPAPI_SetIgnoreRepeatKey, ButtonName) == 0x000008, "Member 'EndMenuBPAPI_SetIgnoreRepeatKey::ButtonName' has a wrong offset!");

// Function EndGame.EndMenuBPAPI.UpdateLinkedMateria
// 0x0010 (0x0010 - 0x0000)
struct EndMenuBPAPI_UpdateLinkedMateria final
{
public:
	TArray<class UEndMainMateriaListBoxWindow*>   MateriaLists;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuBPAPI_UpdateLinkedMateria) == 0x000008, "Wrong alignment on EndMenuBPAPI_UpdateLinkedMateria");
static_assert(sizeof(EndMenuBPAPI_UpdateLinkedMateria) == 0x000010, "Wrong size on EndMenuBPAPI_UpdateLinkedMateria");
static_assert(offsetof(EndMenuBPAPI_UpdateLinkedMateria, MateriaLists) == 0x000000, "Member 'EndMenuBPAPI_UpdateLinkedMateria::MateriaLists' has a wrong offset!");

// Function EndGame.EndMenuGameOverHandler.OnCommandCellSetup
// 0x0010 (0x0010 - 0x0000)
struct EndMenuGameOverHandler_OnCommandCellSetup final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMenuGameOverHandler_OnCommandCellSetup) == 0x000008, "Wrong alignment on EndMenuGameOverHandler_OnCommandCellSetup");
static_assert(sizeof(EndMenuGameOverHandler_OnCommandCellSetup) == 0x000010, "Wrong size on EndMenuGameOverHandler_OnCommandCellSetup");
static_assert(offsetof(EndMenuGameOverHandler_OnCommandCellSetup, ItemWidget) == 0x000000, "Member 'EndMenuGameOverHandler_OnCommandCellSetup::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndMenuGameOverHandler_OnCommandCellSetup, ItemIndex) == 0x000008, "Member 'EndMenuGameOverHandler_OnCommandCellSetup::ItemIndex' has a wrong offset!");

// Function EndGame.EndMenuGameOverHandler.OnCommandClicked
// 0x0004 (0x0004 - 0x0000)
struct EndMenuGameOverHandler_OnCommandClicked final
{
public:
	int32                                         ItemIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuGameOverHandler_OnCommandClicked) == 0x000004, "Wrong alignment on EndMenuGameOverHandler_OnCommandClicked");
static_assert(sizeof(EndMenuGameOverHandler_OnCommandClicked) == 0x000004, "Wrong size on EndMenuGameOverHandler_OnCommandClicked");
static_assert(offsetof(EndMenuGameOverHandler_OnCommandClicked, ItemIndex) == 0x000000, "Member 'EndMenuGameOverHandler_OnCommandClicked::ItemIndex' has a wrong offset!");

// Function EndGame.EndMenuMateriaEquipCell.OnUpdateEquipStatus
// 0x0278 (0x0278 - 0x0000)
struct EndMenuMateriaEquipCell_OnUpdateEquipStatus final
{
public:
	struct FEndDataTableEquipment                 equipment;                                         // 0x0000(0x0278)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuMateriaEquipCell_OnUpdateEquipStatus) == 0x000008, "Wrong alignment on EndMenuMateriaEquipCell_OnUpdateEquipStatus");
static_assert(sizeof(EndMenuMateriaEquipCell_OnUpdateEquipStatus) == 0x000278, "Wrong size on EndMenuMateriaEquipCell_OnUpdateEquipStatus");
static_assert(offsetof(EndMenuMateriaEquipCell_OnUpdateEquipStatus, equipment) == 0x000000, "Member 'EndMenuMateriaEquipCell_OnUpdateEquipStatus::equipment' has a wrong offset!");

// Function EndGame.EndMenuMateriaEquipCell.OnUpdateEquipUpgradedStatus
// 0x0020 (0x0020 - 0x0000)
struct EndMenuMateriaEquipCell_OnUpdateEquipUpgradedStatus final
{
public:
	int32                                         Attack;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Defense;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MagicAttack;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MagicDefense;                                      // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AttackAdd;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DefenseAdd;                                        // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MagicAttackAdd;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MagicDefenseAdd;                                   // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuMateriaEquipCell_OnUpdateEquipUpgradedStatus) == 0x000004, "Wrong alignment on EndMenuMateriaEquipCell_OnUpdateEquipUpgradedStatus");
static_assert(sizeof(EndMenuMateriaEquipCell_OnUpdateEquipUpgradedStatus) == 0x000020, "Wrong size on EndMenuMateriaEquipCell_OnUpdateEquipUpgradedStatus");
static_assert(offsetof(EndMenuMateriaEquipCell_OnUpdateEquipUpgradedStatus, Attack) == 0x000000, "Member 'EndMenuMateriaEquipCell_OnUpdateEquipUpgradedStatus::Attack' has a wrong offset!");
static_assert(offsetof(EndMenuMateriaEquipCell_OnUpdateEquipUpgradedStatus, Defense) == 0x000004, "Member 'EndMenuMateriaEquipCell_OnUpdateEquipUpgradedStatus::Defense' has a wrong offset!");
static_assert(offsetof(EndMenuMateriaEquipCell_OnUpdateEquipUpgradedStatus, MagicAttack) == 0x000008, "Member 'EndMenuMateriaEquipCell_OnUpdateEquipUpgradedStatus::MagicAttack' has a wrong offset!");
static_assert(offsetof(EndMenuMateriaEquipCell_OnUpdateEquipUpgradedStatus, MagicDefense) == 0x00000C, "Member 'EndMenuMateriaEquipCell_OnUpdateEquipUpgradedStatus::MagicDefense' has a wrong offset!");
static_assert(offsetof(EndMenuMateriaEquipCell_OnUpdateEquipUpgradedStatus, AttackAdd) == 0x000010, "Member 'EndMenuMateriaEquipCell_OnUpdateEquipUpgradedStatus::AttackAdd' has a wrong offset!");
static_assert(offsetof(EndMenuMateriaEquipCell_OnUpdateEquipUpgradedStatus, DefenseAdd) == 0x000014, "Member 'EndMenuMateriaEquipCell_OnUpdateEquipUpgradedStatus::DefenseAdd' has a wrong offset!");
static_assert(offsetof(EndMenuMateriaEquipCell_OnUpdateEquipUpgradedStatus, MagicAttackAdd) == 0x000018, "Member 'EndMenuMateriaEquipCell_OnUpdateEquipUpgradedStatus::MagicAttackAdd' has a wrong offset!");
static_assert(offsetof(EndMenuMateriaEquipCell_OnUpdateEquipUpgradedStatus, MagicDefenseAdd) == 0x00001C, "Member 'EndMenuMateriaEquipCell_OnUpdateEquipUpgradedStatus::MagicDefenseAdd' has a wrong offset!");

// Function EndGame.EndMenuMateriaEquipCell.OnUpdateMaterialStatus
// 0x0018 (0x0018 - 0x0000)
struct EndMenuMateriaEquipCell_OnUpdateMaterialStatus final
{
public:
	class FString                                 ApStr;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Percent;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndMenuMateriaEquipCell_OnUpdateMaterialStatus) == 0x000008, "Wrong alignment on EndMenuMateriaEquipCell_OnUpdateMaterialStatus");
static_assert(sizeof(EndMenuMateriaEquipCell_OnUpdateMaterialStatus) == 0x000018, "Wrong size on EndMenuMateriaEquipCell_OnUpdateMaterialStatus");
static_assert(offsetof(EndMenuMateriaEquipCell_OnUpdateMaterialStatus, ApStr) == 0x000000, "Member 'EndMenuMateriaEquipCell_OnUpdateMaterialStatus::ApStr' has a wrong offset!");
static_assert(offsetof(EndMenuMateriaEquipCell_OnUpdateMaterialStatus, Percent) == 0x000010, "Member 'EndMenuMateriaEquipCell_OnUpdateMaterialStatus::Percent' has a wrong offset!");

// Function EndGame.EndMenuMemberSelectBtn.OnChangeCharacterCell
// 0x0001 (0x0001 - 0x0000)
struct EndMenuMemberSelectBtn_OnChangeCharacterCell final
{
public:
	EPlayerType                                   PlayerType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuMemberSelectBtn_OnChangeCharacterCell) == 0x000001, "Wrong alignment on EndMenuMemberSelectBtn_OnChangeCharacterCell");
static_assert(sizeof(EndMenuMemberSelectBtn_OnChangeCharacterCell) == 0x000001, "Wrong size on EndMenuMemberSelectBtn_OnChangeCharacterCell");
static_assert(offsetof(EndMenuMemberSelectBtn_OnChangeCharacterCell, PlayerType) == 0x000000, "Member 'EndMenuMemberSelectBtn_OnChangeCharacterCell::PlayerType' has a wrong offset!");

// Function EndGame.EndMenuMemberSelectBtn.OnSetupCharacterCell
// 0x0001 (0x0001 - 0x0000)
struct EndMenuMemberSelectBtn_OnSetupCharacterCell final
{
public:
	EPlayerType                                   PlayerType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuMemberSelectBtn_OnSetupCharacterCell) == 0x000001, "Wrong alignment on EndMenuMemberSelectBtn_OnSetupCharacterCell");
static_assert(sizeof(EndMenuMemberSelectBtn_OnSetupCharacterCell) == 0x000001, "Wrong size on EndMenuMemberSelectBtn_OnSetupCharacterCell");
static_assert(offsetof(EndMenuMemberSelectBtn_OnSetupCharacterCell, PlayerType) == 0x000000, "Member 'EndMenuMemberSelectBtn_OnSetupCharacterCell::PlayerType' has a wrong offset!");

// Function EndGame.EndMenuMemberSelectBtn.OnSetupSelectBtn
// 0x0001 (0x0001 - 0x0000)
struct EndMenuMemberSelectBtn_OnSetupSelectBtn final
{
public:
	EPlayerType                                   PlayerType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuMemberSelectBtn_OnSetupSelectBtn) == 0x000001, "Wrong alignment on EndMenuMemberSelectBtn_OnSetupSelectBtn");
static_assert(sizeof(EndMenuMemberSelectBtn_OnSetupSelectBtn) == 0x000001, "Wrong size on EndMenuMemberSelectBtn_OnSetupSelectBtn");
static_assert(offsetof(EndMenuMemberSelectBtn_OnSetupSelectBtn, PlayerType) == 0x000000, "Member 'EndMenuMemberSelectBtn_OnSetupSelectBtn::PlayerType' has a wrong offset!");

// Function EndGame.EndMenuMigration.GetTextFromTextBlock
// 0x0020 (0x0020 - 0x0000)
struct EndMenuMigration_GetTextFromTextBlock final
{
public:
	class UWidget*                                InTextBlock;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuMigration_GetTextFromTextBlock) == 0x000008, "Wrong alignment on EndMenuMigration_GetTextFromTextBlock");
static_assert(sizeof(EndMenuMigration_GetTextFromTextBlock) == 0x000020, "Wrong size on EndMenuMigration_GetTextFromTextBlock");
static_assert(offsetof(EndMenuMigration_GetTextFromTextBlock, InTextBlock) == 0x000000, "Member 'EndMenuMigration_GetTextFromTextBlock::InTextBlock' has a wrong offset!");
static_assert(offsetof(EndMenuMigration_GetTextFromTextBlock, ReturnValue) == 0x000008, "Member 'EndMenuMigration_GetTextFromTextBlock::ReturnValue' has a wrong offset!");

// Function EndGame.EndMenuMigration.SetTextToTextBlock
// 0x0020 (0x0020 - 0x0000)
struct EndMenuMigration_SetTextToTextBlock final
{
public:
	class UWidget*                                InTextBlock;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   InText;                                            // 0x0008(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMenuMigration_SetTextToTextBlock) == 0x000008, "Wrong alignment on EndMenuMigration_SetTextToTextBlock");
static_assert(sizeof(EndMenuMigration_SetTextToTextBlock) == 0x000020, "Wrong size on EndMenuMigration_SetTextToTextBlock");
static_assert(offsetof(EndMenuMigration_SetTextToTextBlock, InTextBlock) == 0x000000, "Member 'EndMenuMigration_SetTextToTextBlock::InTextBlock' has a wrong offset!");
static_assert(offsetof(EndMenuMigration_SetTextToTextBlock, InText) == 0x000008, "Member 'EndMenuMigration_SetTextToTextBlock::InText' has a wrong offset!");

// Function EndGame.EndMidgarMenu.ShowLegend
// 0x0001 (0x0001 - 0x0000)
struct EndMidgarMenu_ShowLegend final
{
public:
	bool                                          Show;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndMidgarMenu_ShowLegend) == 0x000001, "Wrong alignment on EndMidgarMenu_ShowLegend");
static_assert(sizeof(EndMidgarMenu_ShowLegend) == 0x000001, "Wrong size on EndMidgarMenu_ShowLegend");
static_assert(offsetof(EndMidgarMenu_ShowLegend, Show) == 0x000000, "Member 'EndMidgarMenu_ShowLegend::Show' has a wrong offset!");

// Function EndGame.EndNaviMap.ConvertToPosition2D
// 0x0014 (0x0014 - 0x0000)
struct EndNaviMap_ConvertToPosition2D final
{
public:
	struct FVector                                InPos;                                             // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x000C(0x0008)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndNaviMap_ConvertToPosition2D) == 0x000004, "Wrong alignment on EndNaviMap_ConvertToPosition2D");
static_assert(sizeof(EndNaviMap_ConvertToPosition2D) == 0x000014, "Wrong size on EndNaviMap_ConvertToPosition2D");
static_assert(offsetof(EndNaviMap_ConvertToPosition2D, InPos) == 0x000000, "Member 'EndNaviMap_ConvertToPosition2D::InPos' has a wrong offset!");
static_assert(offsetof(EndNaviMap_ConvertToPosition2D, ReturnValue) == 0x00000C, "Member 'EndNaviMap_ConvertToPosition2D::ReturnValue' has a wrong offset!");

// Function EndGame.EndNaviMap.SetPosition3D
// 0x000C (0x000C - 0x0000)
struct EndNaviMap_SetPosition3D final
{
public:
	struct FVector                                InPos;                                             // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndNaviMap_SetPosition3D) == 0x000004, "Wrong alignment on EndNaviMap_SetPosition3D");
static_assert(sizeof(EndNaviMap_SetPosition3D) == 0x00000C, "Wrong size on EndNaviMap_SetPosition3D");
static_assert(offsetof(EndNaviMap_SetPosition3D, InPos) == 0x000000, "Member 'EndNaviMap_SetPosition3D::InPos' has a wrong offset!");

// Function EndGame.EndNaviMapIcon.SetDistance
// 0x0004 (0x0004 - 0x0000)
struct EndNaviMapIcon_SetDistance final
{
public:
	float                                         InDistance;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndNaviMapIcon_SetDistance) == 0x000004, "Wrong alignment on EndNaviMapIcon_SetDistance");
static_assert(sizeof(EndNaviMapIcon_SetDistance) == 0x000004, "Wrong size on EndNaviMapIcon_SetDistance");
static_assert(offsetof(EndNaviMapIcon_SetDistance, InDistance) == 0x000000, "Member 'EndNaviMapIcon_SetDistance::InDistance' has a wrong offset!");

// Function EndGame.EndNaviMapOctagon.ConvertToPosition2D
// 0x0014 (0x0014 - 0x0000)
struct EndNaviMapOctagon_ConvertToPosition2D final
{
public:
	struct FVector                                InPos;                                             // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x000C(0x0008)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndNaviMapOctagon_ConvertToPosition2D) == 0x000004, "Wrong alignment on EndNaviMapOctagon_ConvertToPosition2D");
static_assert(sizeof(EndNaviMapOctagon_ConvertToPosition2D) == 0x000014, "Wrong size on EndNaviMapOctagon_ConvertToPosition2D");
static_assert(offsetof(EndNaviMapOctagon_ConvertToPosition2D, InPos) == 0x000000, "Member 'EndNaviMapOctagon_ConvertToPosition2D::InPos' has a wrong offset!");
static_assert(offsetof(EndNaviMapOctagon_ConvertToPosition2D, ReturnValue) == 0x00000C, "Member 'EndNaviMapOctagon_ConvertToPosition2D::ReturnValue' has a wrong offset!");

// Function EndGame.EndNaviMapOctagon.SetPosition3D
// 0x000C (0x000C - 0x0000)
struct EndNaviMapOctagon_SetPosition3D final
{
public:
	struct FVector                                InPos;                                             // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndNaviMapOctagon_SetPosition3D) == 0x000004, "Wrong alignment on EndNaviMapOctagon_SetPosition3D");
static_assert(sizeof(EndNaviMapOctagon_SetPosition3D) == 0x00000C, "Wrong size on EndNaviMapOctagon_SetPosition3D");
static_assert(offsetof(EndNaviMapOctagon_SetPosition3D, InPos) == 0x000000, "Member 'EndNaviMapOctagon_SetPosition3D::InPos' has a wrong offset!");

// Function EndGame.EndNewOptionsMenu.OnButtonTypeListPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndNewOptionsMenu_OnButtonTypeListPressedItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndNewOptionsMenu_OnButtonTypeListPressedItem) == 0x000004, "Wrong alignment on EndNewOptionsMenu_OnButtonTypeListPressedItem");
static_assert(sizeof(EndNewOptionsMenu_OnButtonTypeListPressedItem) == 0x000004, "Wrong size on EndNewOptionsMenu_OnButtonTypeListPressedItem");
static_assert(offsetof(EndNewOptionsMenu_OnButtonTypeListPressedItem, CellIndex) == 0x000000, "Member 'EndNewOptionsMenu_OnButtonTypeListPressedItem::CellIndex' has a wrong offset!");

// Function EndGame.EndNewOptionsMenu.OnButtonTypeListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndNewOptionsMenu_OnButtonTypeListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndNewOptionsMenu_OnButtonTypeListSetupItem) == 0x000008, "Wrong alignment on EndNewOptionsMenu_OnButtonTypeListSetupItem");
static_assert(sizeof(EndNewOptionsMenu_OnButtonTypeListSetupItem) == 0x000010, "Wrong size on EndNewOptionsMenu_OnButtonTypeListSetupItem");
static_assert(offsetof(EndNewOptionsMenu_OnButtonTypeListSetupItem, ItemWidget) == 0x000000, "Member 'EndNewOptionsMenu_OnButtonTypeListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndNewOptionsMenu_OnButtonTypeListSetupItem, CellIndex) == 0x000008, "Member 'EndNewOptionsMenu_OnButtonTypeListSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndNewOptionsMenu.OnCategoryListPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndNewOptionsMenu_OnCategoryListPressedItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndNewOptionsMenu_OnCategoryListPressedItem) == 0x000004, "Wrong alignment on EndNewOptionsMenu_OnCategoryListPressedItem");
static_assert(sizeof(EndNewOptionsMenu_OnCategoryListPressedItem) == 0x000004, "Wrong size on EndNewOptionsMenu_OnCategoryListPressedItem");
static_assert(offsetof(EndNewOptionsMenu_OnCategoryListPressedItem, CellIndex) == 0x000000, "Member 'EndNewOptionsMenu_OnCategoryListPressedItem::CellIndex' has a wrong offset!");

// Function EndGame.EndNewOptionsMenu.OnCategoryListSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndNewOptionsMenu_OnCategoryListSelectedIndexChanged final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndNewOptionsMenu_OnCategoryListSelectedIndexChanged) == 0x000004, "Wrong alignment on EndNewOptionsMenu_OnCategoryListSelectedIndexChanged");
static_assert(sizeof(EndNewOptionsMenu_OnCategoryListSelectedIndexChanged) == 0x000004, "Wrong size on EndNewOptionsMenu_OnCategoryListSelectedIndexChanged");
static_assert(offsetof(EndNewOptionsMenu_OnCategoryListSelectedIndexChanged, CellIndex) == 0x000000, "Member 'EndNewOptionsMenu_OnCategoryListSelectedIndexChanged::CellIndex' has a wrong offset!");

// Function EndGame.EndNewOptionsMenu.OnCategoryListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndNewOptionsMenu_OnCategoryListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndNewOptionsMenu_OnCategoryListSetupItem) == 0x000008, "Wrong alignment on EndNewOptionsMenu_OnCategoryListSetupItem");
static_assert(sizeof(EndNewOptionsMenu_OnCategoryListSetupItem) == 0x000010, "Wrong size on EndNewOptionsMenu_OnCategoryListSetupItem");
static_assert(offsetof(EndNewOptionsMenu_OnCategoryListSetupItem, ItemWidget) == 0x000000, "Member 'EndNewOptionsMenu_OnCategoryListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndNewOptionsMenu_OnCategoryListSetupItem, CellIndex) == 0x000008, "Member 'EndNewOptionsMenu_OnCategoryListSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndNewOptionsMenu.OnControllerListPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndNewOptionsMenu_OnControllerListPressedItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndNewOptionsMenu_OnControllerListPressedItem) == 0x000004, "Wrong alignment on EndNewOptionsMenu_OnControllerListPressedItem");
static_assert(sizeof(EndNewOptionsMenu_OnControllerListPressedItem) == 0x000004, "Wrong size on EndNewOptionsMenu_OnControllerListPressedItem");
static_assert(offsetof(EndNewOptionsMenu_OnControllerListPressedItem, CellIndex) == 0x000000, "Member 'EndNewOptionsMenu_OnControllerListPressedItem::CellIndex' has a wrong offset!");

// Function EndGame.EndNewOptionsMenu.OnControllerListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndNewOptionsMenu_OnControllerListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndNewOptionsMenu_OnControllerListSetupItem) == 0x000008, "Wrong alignment on EndNewOptionsMenu_OnControllerListSetupItem");
static_assert(sizeof(EndNewOptionsMenu_OnControllerListSetupItem) == 0x000010, "Wrong size on EndNewOptionsMenu_OnControllerListSetupItem");
static_assert(offsetof(EndNewOptionsMenu_OnControllerListSetupItem, ItemWidget) == 0x000000, "Member 'EndNewOptionsMenu_OnControllerListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndNewOptionsMenu_OnControllerListSetupItem, CellIndex) == 0x000008, "Member 'EndNewOptionsMenu_OnControllerListSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndNewOptionsMenu.OnOptionListKeyboardMeasureItem
// 0x000C (0x000C - 0x0000)
struct EndNewOptionsMenu_OnOptionListKeyboardMeasureItem final
{
public:
	int32                                         ItemIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndNewOptionsMenu_OnOptionListKeyboardMeasureItem) == 0x000004, "Wrong alignment on EndNewOptionsMenu_OnOptionListKeyboardMeasureItem");
static_assert(sizeof(EndNewOptionsMenu_OnOptionListKeyboardMeasureItem) == 0x00000C, "Wrong size on EndNewOptionsMenu_OnOptionListKeyboardMeasureItem");
static_assert(offsetof(EndNewOptionsMenu_OnOptionListKeyboardMeasureItem, ItemIndex) == 0x000000, "Member 'EndNewOptionsMenu_OnOptionListKeyboardMeasureItem::ItemIndex' has a wrong offset!");
static_assert(offsetof(EndNewOptionsMenu_OnOptionListKeyboardMeasureItem, ReturnValue) == 0x000004, "Member 'EndNewOptionsMenu_OnOptionListKeyboardMeasureItem::ReturnValue' has a wrong offset!");

// Function EndGame.EndNewOptionsMenu.OnOptionListKeyboardPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndNewOptionsMenu_OnOptionListKeyboardPressedItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndNewOptionsMenu_OnOptionListKeyboardPressedItem) == 0x000004, "Wrong alignment on EndNewOptionsMenu_OnOptionListKeyboardPressedItem");
static_assert(sizeof(EndNewOptionsMenu_OnOptionListKeyboardPressedItem) == 0x000004, "Wrong size on EndNewOptionsMenu_OnOptionListKeyboardPressedItem");
static_assert(offsetof(EndNewOptionsMenu_OnOptionListKeyboardPressedItem, CellIndex) == 0x000000, "Member 'EndNewOptionsMenu_OnOptionListKeyboardPressedItem::CellIndex' has a wrong offset!");

// Function EndGame.EndNewOptionsMenu.OnOptionListKeyboardSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndNewOptionsMenu_OnOptionListKeyboardSelectedIndexChanged final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndNewOptionsMenu_OnOptionListKeyboardSelectedIndexChanged) == 0x000004, "Wrong alignment on EndNewOptionsMenu_OnOptionListKeyboardSelectedIndexChanged");
static_assert(sizeof(EndNewOptionsMenu_OnOptionListKeyboardSelectedIndexChanged) == 0x000004, "Wrong size on EndNewOptionsMenu_OnOptionListKeyboardSelectedIndexChanged");
static_assert(offsetof(EndNewOptionsMenu_OnOptionListKeyboardSelectedIndexChanged, CellIndex) == 0x000000, "Member 'EndNewOptionsMenu_OnOptionListKeyboardSelectedIndexChanged::CellIndex' has a wrong offset!");

// Function EndGame.EndNewOptionsMenu.OnOptionListKeyboardSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndNewOptionsMenu_OnOptionListKeyboardSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndNewOptionsMenu_OnOptionListKeyboardSetupItem) == 0x000008, "Wrong alignment on EndNewOptionsMenu_OnOptionListKeyboardSetupItem");
static_assert(sizeof(EndNewOptionsMenu_OnOptionListKeyboardSetupItem) == 0x000010, "Wrong size on EndNewOptionsMenu_OnOptionListKeyboardSetupItem");
static_assert(offsetof(EndNewOptionsMenu_OnOptionListKeyboardSetupItem, ItemWidget) == 0x000000, "Member 'EndNewOptionsMenu_OnOptionListKeyboardSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndNewOptionsMenu_OnOptionListKeyboardSetupItem, CellIndex) == 0x000008, "Member 'EndNewOptionsMenu_OnOptionListKeyboardSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndNewOptionsMenu.OnOptionListPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndNewOptionsMenu_OnOptionListPressedItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndNewOptionsMenu_OnOptionListPressedItem) == 0x000004, "Wrong alignment on EndNewOptionsMenu_OnOptionListPressedItem");
static_assert(sizeof(EndNewOptionsMenu_OnOptionListPressedItem) == 0x000004, "Wrong size on EndNewOptionsMenu_OnOptionListPressedItem");
static_assert(offsetof(EndNewOptionsMenu_OnOptionListPressedItem, CellIndex) == 0x000000, "Member 'EndNewOptionsMenu_OnOptionListPressedItem::CellIndex' has a wrong offset!");

// Function EndGame.EndNewOptionsMenu.OnOptionListSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndNewOptionsMenu_OnOptionListSelectedIndexChanged final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndNewOptionsMenu_OnOptionListSelectedIndexChanged) == 0x000004, "Wrong alignment on EndNewOptionsMenu_OnOptionListSelectedIndexChanged");
static_assert(sizeof(EndNewOptionsMenu_OnOptionListSelectedIndexChanged) == 0x000004, "Wrong size on EndNewOptionsMenu_OnOptionListSelectedIndexChanged");
static_assert(offsetof(EndNewOptionsMenu_OnOptionListSelectedIndexChanged, CellIndex) == 0x000000, "Member 'EndNewOptionsMenu_OnOptionListSelectedIndexChanged::CellIndex' has a wrong offset!");

// Function EndGame.EndNewOptionsMenu.OnOptionListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndNewOptionsMenu_OnOptionListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndNewOptionsMenu_OnOptionListSetupItem) == 0x000008, "Wrong alignment on EndNewOptionsMenu_OnOptionListSetupItem");
static_assert(sizeof(EndNewOptionsMenu_OnOptionListSetupItem) == 0x000010, "Wrong size on EndNewOptionsMenu_OnOptionListSetupItem");
static_assert(offsetof(EndNewOptionsMenu_OnOptionListSetupItem, ItemWidget) == 0x000000, "Member 'EndNewOptionsMenu_OnOptionListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndNewOptionsMenu_OnOptionListSetupItem, CellIndex) == 0x000008, "Member 'EndNewOptionsMenu_OnOptionListSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndNewOptionsMenu.OnSelectListPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndNewOptionsMenu_OnSelectListPressedItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndNewOptionsMenu_OnSelectListPressedItem) == 0x000004, "Wrong alignment on EndNewOptionsMenu_OnSelectListPressedItem");
static_assert(sizeof(EndNewOptionsMenu_OnSelectListPressedItem) == 0x000004, "Wrong size on EndNewOptionsMenu_OnSelectListPressedItem");
static_assert(offsetof(EndNewOptionsMenu_OnSelectListPressedItem, CellIndex) == 0x000000, "Member 'EndNewOptionsMenu_OnSelectListPressedItem::CellIndex' has a wrong offset!");

// Function EndGame.EndNewOptionsMenu.OnSelectListSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndNewOptionsMenu_OnSelectListSelectedIndexChanged final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndNewOptionsMenu_OnSelectListSelectedIndexChanged) == 0x000004, "Wrong alignment on EndNewOptionsMenu_OnSelectListSelectedIndexChanged");
static_assert(sizeof(EndNewOptionsMenu_OnSelectListSelectedIndexChanged) == 0x000004, "Wrong size on EndNewOptionsMenu_OnSelectListSelectedIndexChanged");
static_assert(offsetof(EndNewOptionsMenu_OnSelectListSelectedIndexChanged, CellIndex) == 0x000000, "Member 'EndNewOptionsMenu_OnSelectListSelectedIndexChanged::CellIndex' has a wrong offset!");

// Function EndGame.EndNewOptionsMenu.OnSelectListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndNewOptionsMenu_OnSelectListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndNewOptionsMenu_OnSelectListSetupItem) == 0x000008, "Wrong alignment on EndNewOptionsMenu_OnSelectListSetupItem");
static_assert(sizeof(EndNewOptionsMenu_OnSelectListSetupItem) == 0x000010, "Wrong size on EndNewOptionsMenu_OnSelectListSetupItem");
static_assert(offsetof(EndNewOptionsMenu_OnSelectListSetupItem, ItemWidget) == 0x000000, "Member 'EndNewOptionsMenu_OnSelectListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndNewOptionsMenu_OnSelectListSetupItem, CellIndex) == 0x000008, "Member 'EndNewOptionsMenu_OnSelectListSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndNewOptionsMenu.OnSetupGaugeItem
// 0x0010 (0x0010 - 0x0000)
struct EndNewOptionsMenu_OnSetupGaugeItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndNewOptionsMenu_OnSetupGaugeItem) == 0x000008, "Wrong alignment on EndNewOptionsMenu_OnSetupGaugeItem");
static_assert(sizeof(EndNewOptionsMenu_OnSetupGaugeItem) == 0x000010, "Wrong size on EndNewOptionsMenu_OnSetupGaugeItem");
static_assert(offsetof(EndNewOptionsMenu_OnSetupGaugeItem, ItemWidget) == 0x000000, "Member 'EndNewOptionsMenu_OnSetupGaugeItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndNewOptionsMenu_OnSetupGaugeItem, CellIndex) == 0x000008, "Member 'EndNewOptionsMenu_OnSetupGaugeItem::CellIndex' has a wrong offset!");

// Function EndGame.EndNumberLabel.SetBlendMode
// 0x0001 (0x0001 - 0x0000)
struct EndNumberLabel_SetBlendMode final
{
public:
	EBlendMode                                    InBlendMode;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndNumberLabel_SetBlendMode) == 0x000001, "Wrong alignment on EndNumberLabel_SetBlendMode");
static_assert(sizeof(EndNumberLabel_SetBlendMode) == 0x000001, "Wrong size on EndNumberLabel_SetBlendMode");
static_assert(offsetof(EndNumberLabel_SetBlendMode, InBlendMode) == 0x000000, "Member 'EndNumberLabel_SetBlendMode::InBlendMode' has a wrong offset!");

// Function EndGame.EndNumberLabel.SetColorAndOpacity
// 0x0010 (0x0010 - 0x0000)
struct EndNumberLabel_SetColorAndOpacity final
{
public:
	struct FLinearColor                           InColorAndOpacity;                                 // 0x0000(0x0010)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndNumberLabel_SetColorAndOpacity) == 0x000004, "Wrong alignment on EndNumberLabel_SetColorAndOpacity");
static_assert(sizeof(EndNumberLabel_SetColorAndOpacity) == 0x000010, "Wrong size on EndNumberLabel_SetColorAndOpacity");
static_assert(offsetof(EndNumberLabel_SetColorAndOpacity, InColorAndOpacity) == 0x000000, "Member 'EndNumberLabel_SetColorAndOpacity::InColorAndOpacity' has a wrong offset!");

// Function EndGame.EndNumberLabel.SetFontIndex
// 0x0004 (0x0004 - 0x0000)
struct EndNumberLabel_SetFontIndex final
{
public:
	int32                                         InFontIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndNumberLabel_SetFontIndex) == 0x000004, "Wrong alignment on EndNumberLabel_SetFontIndex");
static_assert(sizeof(EndNumberLabel_SetFontIndex) == 0x000004, "Wrong size on EndNumberLabel_SetFontIndex");
static_assert(offsetof(EndNumberLabel_SetFontIndex, InFontIndex) == 0x000000, "Member 'EndNumberLabel_SetFontIndex::InFontIndex' has a wrong offset!");

// Function EndGame.EndNumberLabel.SetJustification
// 0x0001 (0x0001 - 0x0000)
struct EndNumberLabel_SetJustification final
{
public:
	ETextJustify                                  InJustification;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndNumberLabel_SetJustification) == 0x000001, "Wrong alignment on EndNumberLabel_SetJustification");
static_assert(sizeof(EndNumberLabel_SetJustification) == 0x000001, "Wrong size on EndNumberLabel_SetJustification");
static_assert(offsetof(EndNumberLabel_SetJustification, InJustification) == 0x000000, "Member 'EndNumberLabel_SetJustification::InJustification' has a wrong offset!");

// Function EndGame.EndNumberLabel.SetMinDigits
// 0x0004 (0x0004 - 0x0000)
struct EndNumberLabel_SetMinDigits final
{
public:
	int32                                         InMinDigits;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndNumberLabel_SetMinDigits) == 0x000004, "Wrong alignment on EndNumberLabel_SetMinDigits");
static_assert(sizeof(EndNumberLabel_SetMinDigits) == 0x000004, "Wrong size on EndNumberLabel_SetMinDigits");
static_assert(offsetof(EndNumberLabel_SetMinDigits, InMinDigits) == 0x000000, "Member 'EndNumberLabel_SetMinDigits::InMinDigits' has a wrong offset!");

// Function EndGame.EndNumberLabel.SetOpacity
// 0x0004 (0x0004 - 0x0000)
struct EndNumberLabel_SetOpacity final
{
public:
	float                                         InOpacity;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndNumberLabel_SetOpacity) == 0x000004, "Wrong alignment on EndNumberLabel_SetOpacity");
static_assert(sizeof(EndNumberLabel_SetOpacity) == 0x000004, "Wrong size on EndNumberLabel_SetOpacity");
static_assert(offsetof(EndNumberLabel_SetOpacity, InOpacity) == 0x000000, "Member 'EndNumberLabel_SetOpacity::InOpacity' has a wrong offset!");

// Function EndGame.EndNumberLabel.SetSpacing
// 0x0004 (0x0004 - 0x0000)
struct EndNumberLabel_SetSpacing final
{
public:
	int32                                         InSpacing;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndNumberLabel_SetSpacing) == 0x000004, "Wrong alignment on EndNumberLabel_SetSpacing");
static_assert(sizeof(EndNumberLabel_SetSpacing) == 0x000004, "Wrong size on EndNumberLabel_SetSpacing");
static_assert(offsetof(EndNumberLabel_SetSpacing, InSpacing) == 0x000000, "Member 'EndNumberLabel_SetSpacing::InSpacing' has a wrong offset!");

// Function EndGame.EndNumberLabel.SetValue
// 0x0004 (0x0004 - 0x0000)
struct EndNumberLabel_SetValue final
{
public:
	int32                                         InValue;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndNumberLabel_SetValue) == 0x000004, "Wrong alignment on EndNumberLabel_SetValue");
static_assert(sizeof(EndNumberLabel_SetValue) == 0x000004, "Wrong size on EndNumberLabel_SetValue");
static_assert(offsetof(EndNumberLabel_SetValue, InValue) == 0x000000, "Member 'EndNumberLabel_SetValue::InValue' has a wrong offset!");

// Function EndGame.EndPauseMenu.OnListMenuPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndPauseMenu_OnListMenuPressedItem final
{
public:
	int32                                         ItemIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndPauseMenu_OnListMenuPressedItem) == 0x000004, "Wrong alignment on EndPauseMenu_OnListMenuPressedItem");
static_assert(sizeof(EndPauseMenu_OnListMenuPressedItem) == 0x000004, "Wrong size on EndPauseMenu_OnListMenuPressedItem");
static_assert(offsetof(EndPauseMenu_OnListMenuPressedItem, ItemIndex) == 0x000000, "Member 'EndPauseMenu_OnListMenuPressedItem::ItemIndex' has a wrong offset!");

// Function EndGame.EndPauseMenu.OnListMenuSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndPauseMenu_OnListMenuSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndPauseMenu_OnListMenuSetupItem) == 0x000008, "Wrong alignment on EndPauseMenu_OnListMenuSetupItem");
static_assert(sizeof(EndPauseMenu_OnListMenuSetupItem) == 0x000010, "Wrong size on EndPauseMenu_OnListMenuSetupItem");
static_assert(offsetof(EndPauseMenu_OnListMenuSetupItem, ItemWidget) == 0x000000, "Member 'EndPauseMenu_OnListMenuSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndPauseMenu_OnListMenuSetupItem, ItemIndex) == 0x000008, "Member 'EndPauseMenu_OnListMenuSetupItem::ItemIndex' has a wrong offset!");

// Function EndGame.EndQuickMateriaMenu.OnMateriaMenuMeasureItem
// 0x000C (0x000C - 0x0000)
struct EndQuickMateriaMenu_OnMateriaMenuMeasureItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndQuickMateriaMenu_OnMateriaMenuMeasureItem) == 0x000004, "Wrong alignment on EndQuickMateriaMenu_OnMateriaMenuMeasureItem");
static_assert(sizeof(EndQuickMateriaMenu_OnMateriaMenuMeasureItem) == 0x00000C, "Wrong size on EndQuickMateriaMenu_OnMateriaMenuMeasureItem");
static_assert(offsetof(EndQuickMateriaMenu_OnMateriaMenuMeasureItem, CellIndex) == 0x000000, "Member 'EndQuickMateriaMenu_OnMateriaMenuMeasureItem::CellIndex' has a wrong offset!");
static_assert(offsetof(EndQuickMateriaMenu_OnMateriaMenuMeasureItem, ReturnValue) == 0x000004, "Member 'EndQuickMateriaMenu_OnMateriaMenuMeasureItem::ReturnValue' has a wrong offset!");

// Function EndGame.EndQuickMateriaMenu.OnMateriaMenuPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndQuickMateriaMenu_OnMateriaMenuPressedItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndQuickMateriaMenu_OnMateriaMenuPressedItem) == 0x000004, "Wrong alignment on EndQuickMateriaMenu_OnMateriaMenuPressedItem");
static_assert(sizeof(EndQuickMateriaMenu_OnMateriaMenuPressedItem) == 0x000004, "Wrong size on EndQuickMateriaMenu_OnMateriaMenuPressedItem");
static_assert(offsetof(EndQuickMateriaMenu_OnMateriaMenuPressedItem, CellIndex) == 0x000000, "Member 'EndQuickMateriaMenu_OnMateriaMenuPressedItem::CellIndex' has a wrong offset!");

// Function EndGame.EndQuickMateriaMenu.OnMateriaMenuSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndQuickMateriaMenu_OnMateriaMenuSelectedIndexChanged final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndQuickMateriaMenu_OnMateriaMenuSelectedIndexChanged) == 0x000004, "Wrong alignment on EndQuickMateriaMenu_OnMateriaMenuSelectedIndexChanged");
static_assert(sizeof(EndQuickMateriaMenu_OnMateriaMenuSelectedIndexChanged) == 0x000004, "Wrong size on EndQuickMateriaMenu_OnMateriaMenuSelectedIndexChanged");
static_assert(offsetof(EndQuickMateriaMenu_OnMateriaMenuSelectedIndexChanged, CellIndex) == 0x000000, "Member 'EndQuickMateriaMenu_OnMateriaMenuSelectedIndexChanged::CellIndex' has a wrong offset!");

// Function EndGame.EndQuickMateriaMenu.OnMateriaMenuSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndQuickMateriaMenu_OnMateriaMenuSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndQuickMateriaMenu_OnMateriaMenuSetupItem) == 0x000008, "Wrong alignment on EndQuickMateriaMenu_OnMateriaMenuSetupItem");
static_assert(sizeof(EndQuickMateriaMenu_OnMateriaMenuSetupItem) == 0x000010, "Wrong size on EndQuickMateriaMenu_OnMateriaMenuSetupItem");
static_assert(offsetof(EndQuickMateriaMenu_OnMateriaMenuSetupItem, ItemWidget) == 0x000000, "Member 'EndQuickMateriaMenu_OnMateriaMenuSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndQuickMateriaMenu_OnMateriaMenuSetupItem, CellIndex) == 0x000008, "Member 'EndQuickMateriaMenu_OnMateriaMenuSetupItem::CellIndex' has a wrong offset!");

// Function EndGame.EndQuickMateriaMenu.OnSortListPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndQuickMateriaMenu_OnSortListPressedItem final
{
public:
	int32                                         CellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndQuickMateriaMenu_OnSortListPressedItem) == 0x000004, "Wrong alignment on EndQuickMateriaMenu_OnSortListPressedItem");
static_assert(sizeof(EndQuickMateriaMenu_OnSortListPressedItem) == 0x000004, "Wrong size on EndQuickMateriaMenu_OnSortListPressedItem");
static_assert(offsetof(EndQuickMateriaMenu_OnSortListPressedItem, CellIndex) == 0x000000, "Member 'EndQuickMateriaMenu_OnSortListPressedItem::CellIndex' has a wrong offset!");

// Function EndGame.EndRagdollSEComponent.OnHitRagdoll
// 0x00B0 (0x00B0 - 0x0000)
struct EndRagdollSEComponent_OnHitRagdoll final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0018(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             Hit;                                               // 0x0028(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndRagdollSEComponent_OnHitRagdoll) == 0x000008, "Wrong alignment on EndRagdollSEComponent_OnHitRagdoll");
static_assert(sizeof(EndRagdollSEComponent_OnHitRagdoll) == 0x0000B0, "Wrong size on EndRagdollSEComponent_OnHitRagdoll");
static_assert(offsetof(EndRagdollSEComponent_OnHitRagdoll, HitComponent) == 0x000000, "Member 'EndRagdollSEComponent_OnHitRagdoll::HitComponent' has a wrong offset!");
static_assert(offsetof(EndRagdollSEComponent_OnHitRagdoll, OtherActor) == 0x000008, "Member 'EndRagdollSEComponent_OnHitRagdoll::OtherActor' has a wrong offset!");
static_assert(offsetof(EndRagdollSEComponent_OnHitRagdoll, OtherComp) == 0x000010, "Member 'EndRagdollSEComponent_OnHitRagdoll::OtherComp' has a wrong offset!");
static_assert(offsetof(EndRagdollSEComponent_OnHitRagdoll, NormalImpulse) == 0x000018, "Member 'EndRagdollSEComponent_OnHitRagdoll::NormalImpulse' has a wrong offset!");
static_assert(offsetof(EndRagdollSEComponent_OnHitRagdoll, Hit) == 0x000028, "Member 'EndRagdollSEComponent_OnHitRagdoll::Hit' has a wrong offset!");

// Function EndGame.EndSaveDataBootMenuAPI.GatherSaveData
// 0x0038 (0x0038 - 0x0000)
struct EndSaveDataBootMenuAPI_GatherSaveData final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndGameScenarioType                          ScenarioType;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         OutSaveDataList;                                   // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0020(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndSaveDataBootMenuAPI_GatherSaveData) == 0x000008, "Wrong alignment on EndSaveDataBootMenuAPI_GatherSaveData");
static_assert(sizeof(EndSaveDataBootMenuAPI_GatherSaveData) == 0x000038, "Wrong size on EndSaveDataBootMenuAPI_GatherSaveData");
static_assert(offsetof(EndSaveDataBootMenuAPI_GatherSaveData, WorldContextObject) == 0x000000, "Member 'EndSaveDataBootMenuAPI_GatherSaveData::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EndSaveDataBootMenuAPI_GatherSaveData, ScenarioType) == 0x000008, "Member 'EndSaveDataBootMenuAPI_GatherSaveData::ScenarioType' has a wrong offset!");
static_assert(offsetof(EndSaveDataBootMenuAPI_GatherSaveData, OutSaveDataList) == 0x000010, "Member 'EndSaveDataBootMenuAPI_GatherSaveData::OutSaveDataList' has a wrong offset!");
static_assert(offsetof(EndSaveDataBootMenuAPI_GatherSaveData, LatentInfo) == 0x000020, "Member 'EndSaveDataBootMenuAPI_GatherSaveData::LatentInfo' has a wrong offset!");

// Function EndGame.EndSaveDataBootMenuAPI.GetLoadingSaveData
// 0x0001 (0x0001 - 0x0000)
struct EndSaveDataBootMenuAPI_GetLoadingSaveData final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndSaveDataBootMenuAPI_GetLoadingSaveData) == 0x000001, "Wrong alignment on EndSaveDataBootMenuAPI_GetLoadingSaveData");
static_assert(sizeof(EndSaveDataBootMenuAPI_GetLoadingSaveData) == 0x000001, "Wrong size on EndSaveDataBootMenuAPI_GetLoadingSaveData");
static_assert(offsetof(EndSaveDataBootMenuAPI_GetLoadingSaveData, ReturnValue) == 0x000000, "Member 'EndSaveDataBootMenuAPI_GetLoadingSaveData::ReturnValue' has a wrong offset!");

// Function EndGame.EndSaveDataBootMenuAPI.LoadSaveData
// 0x0038 (0x0038 - 0x0000)
struct EndSaveDataBootMenuAPI_LoadSaveData final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndGameScenarioType                          ScenarioType;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DataName;                                          // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0020(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndSaveDataBootMenuAPI_LoadSaveData) == 0x000008, "Wrong alignment on EndSaveDataBootMenuAPI_LoadSaveData");
static_assert(sizeof(EndSaveDataBootMenuAPI_LoadSaveData) == 0x000038, "Wrong size on EndSaveDataBootMenuAPI_LoadSaveData");
static_assert(offsetof(EndSaveDataBootMenuAPI_LoadSaveData, WorldContextObject) == 0x000000, "Member 'EndSaveDataBootMenuAPI_LoadSaveData::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EndSaveDataBootMenuAPI_LoadSaveData, ScenarioType) == 0x000008, "Member 'EndSaveDataBootMenuAPI_LoadSaveData::ScenarioType' has a wrong offset!");
static_assert(offsetof(EndSaveDataBootMenuAPI_LoadSaveData, DataName) == 0x000010, "Member 'EndSaveDataBootMenuAPI_LoadSaveData::DataName' has a wrong offset!");
static_assert(offsetof(EndSaveDataBootMenuAPI_LoadSaveData, LatentInfo) == 0x000020, "Member 'EndSaveDataBootMenuAPI_LoadSaveData::LatentInfo' has a wrong offset!");

// Function EndGame.EndSaveDataBootMenuAPI.SetLoadingSaveData
// 0x0001 (0x0001 - 0x0000)
struct EndSaveDataBootMenuAPI_SetLoadingSaveData final
{
public:
	bool                                          bLoading;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndSaveDataBootMenuAPI_SetLoadingSaveData) == 0x000001, "Wrong alignment on EndSaveDataBootMenuAPI_SetLoadingSaveData");
static_assert(sizeof(EndSaveDataBootMenuAPI_SetLoadingSaveData) == 0x000001, "Wrong size on EndSaveDataBootMenuAPI_SetLoadingSaveData");
static_assert(offsetof(EndSaveDataBootMenuAPI_SetLoadingSaveData, bLoading) == 0x000000, "Member 'EndSaveDataBootMenuAPI_SetLoadingSaveData::bLoading' has a wrong offset!");

// Function EndGame.EndSceneAPI.BindActor
// 0x001C (0x001C - 0x0000)
struct EndSceneAPI_BindActor final
{
public:
	class FName                                   Parent;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   child;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   socket;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWeaponSlot                                   Slot;                                              // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndSceneAPI_BindActor) == 0x000004, "Wrong alignment on EndSceneAPI_BindActor");
static_assert(sizeof(EndSceneAPI_BindActor) == 0x00001C, "Wrong size on EndSceneAPI_BindActor");
static_assert(offsetof(EndSceneAPI_BindActor, Parent) == 0x000000, "Member 'EndSceneAPI_BindActor::Parent' has a wrong offset!");
static_assert(offsetof(EndSceneAPI_BindActor, child) == 0x000008, "Member 'EndSceneAPI_BindActor::child' has a wrong offset!");
static_assert(offsetof(EndSceneAPI_BindActor, socket) == 0x000010, "Member 'EndSceneAPI_BindActor::socket' has a wrong offset!");
static_assert(offsetof(EndSceneAPI_BindActor, Slot) == 0x000018, "Member 'EndSceneAPI_BindActor::Slot' has a wrong offset!");

// Function EndGame.EndSceneAPI.CancelOverwirttenEnvironmentSet
// 0x0001 (0x0001 - 0x0000)
struct EndSceneAPI_CancelOverwirttenEnvironmentSet final
{
public:
	EEndEnvironmentSetOverritePriority            Priority;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndSceneAPI_CancelOverwirttenEnvironmentSet) == 0x000001, "Wrong alignment on EndSceneAPI_CancelOverwirttenEnvironmentSet");
static_assert(sizeof(EndSceneAPI_CancelOverwirttenEnvironmentSet) == 0x000001, "Wrong size on EndSceneAPI_CancelOverwirttenEnvironmentSet");
static_assert(offsetof(EndSceneAPI_CancelOverwirttenEnvironmentSet, Priority) == 0x000000, "Member 'EndSceneAPI_CancelOverwirttenEnvironmentSet::Priority' has a wrong offset!");

// Function EndGame.EndSceneAPI.CreateActorBP
// 0x002C (0x002C - 0x0000)
struct EndSceneAPI_CreateActorBP final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CharaSpec;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0010(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x001C(0x000C)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0028(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndSceneAPI_CreateActorBP) == 0x000004, "Wrong alignment on EndSceneAPI_CreateActorBP");
static_assert(sizeof(EndSceneAPI_CreateActorBP) == 0x00002C, "Wrong size on EndSceneAPI_CreateActorBP");
static_assert(offsetof(EndSceneAPI_CreateActorBP, Name_0) == 0x000000, "Member 'EndSceneAPI_CreateActorBP::Name_0' has a wrong offset!");
static_assert(offsetof(EndSceneAPI_CreateActorBP, CharaSpec) == 0x000008, "Member 'EndSceneAPI_CreateActorBP::CharaSpec' has a wrong offset!");
static_assert(offsetof(EndSceneAPI_CreateActorBP, Location) == 0x000010, "Member 'EndSceneAPI_CreateActorBP::Location' has a wrong offset!");
static_assert(offsetof(EndSceneAPI_CreateActorBP, Rotation) == 0x00001C, "Member 'EndSceneAPI_CreateActorBP::Rotation' has a wrong offset!");
static_assert(offsetof(EndSceneAPI_CreateActorBP, ReturnValue) == 0x000028, "Member 'EndSceneAPI_CreateActorBP::ReturnValue' has a wrong offset!");

// Function EndGame.EndSceneAPI.DestroyActorBP
// 0x000C (0x000C - 0x0000)
struct EndSceneAPI_DestroyActorBP final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndSceneAPI_DestroyActorBP) == 0x000004, "Wrong alignment on EndSceneAPI_DestroyActorBP");
static_assert(sizeof(EndSceneAPI_DestroyActorBP) == 0x00000C, "Wrong size on EndSceneAPI_DestroyActorBP");
static_assert(offsetof(EndSceneAPI_DestroyActorBP, Name_0) == 0x000000, "Member 'EndSceneAPI_DestroyActorBP::Name_0' has a wrong offset!");
static_assert(offsetof(EndSceneAPI_DestroyActorBP, ReturnValue) == 0x000008, "Member 'EndSceneAPI_DestroyActorBP::ReturnValue' has a wrong offset!");

// Function EndGame.EndSceneAPI.FollowToTargetActor
// 0x0014 (0x0014 - 0x0000)
struct EndSceneAPI_FollowToTargetActor final
{
public:
	class FName                                   TargetActorName;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FollowTargetActorName;                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndSceneAPI_FollowToTargetActor) == 0x000004, "Wrong alignment on EndSceneAPI_FollowToTargetActor");
static_assert(sizeof(EndSceneAPI_FollowToTargetActor) == 0x000014, "Wrong size on EndSceneAPI_FollowToTargetActor");
static_assert(offsetof(EndSceneAPI_FollowToTargetActor, TargetActorName) == 0x000000, "Member 'EndSceneAPI_FollowToTargetActor::TargetActorName' has a wrong offset!");
static_assert(offsetof(EndSceneAPI_FollowToTargetActor, FollowTargetActorName) == 0x000008, "Member 'EndSceneAPI_FollowToTargetActor::FollowTargetActorName' has a wrong offset!");
static_assert(offsetof(EndSceneAPI_FollowToTargetActor, ReturnValue) == 0x000010, "Member 'EndSceneAPI_FollowToTargetActor::ReturnValue' has a wrong offset!");

// Function EndGame.EndSceneAPI.GetNavFromName
// 0x0010 (0x0010 - 0x0000)
struct EndSceneAPI_GetNavFromName final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AEndNavModifierVolume*                  ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndSceneAPI_GetNavFromName) == 0x000008, "Wrong alignment on EndSceneAPI_GetNavFromName");
static_assert(sizeof(EndSceneAPI_GetNavFromName) == 0x000010, "Wrong size on EndSceneAPI_GetNavFromName");
static_assert(offsetof(EndSceneAPI_GetNavFromName, Name_0) == 0x000000, "Member 'EndSceneAPI_GetNavFromName::Name_0' has a wrong offset!");
static_assert(offsetof(EndSceneAPI_GetNavFromName, ReturnValue) == 0x000008, "Member 'EndSceneAPI_GetNavFromName::ReturnValue' has a wrong offset!");

// Function EndGame.EndSceneAPI.GetNavFromNameAndLevel
// 0x0018 (0x0018 - 0x0000)
struct EndSceneAPI_GetNavFromNameAndLevel final
{
public:
	class FName                                   Level;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name_0;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AEndNavModifierVolume*                  ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndSceneAPI_GetNavFromNameAndLevel) == 0x000008, "Wrong alignment on EndSceneAPI_GetNavFromNameAndLevel");
static_assert(sizeof(EndSceneAPI_GetNavFromNameAndLevel) == 0x000018, "Wrong size on EndSceneAPI_GetNavFromNameAndLevel");
static_assert(offsetof(EndSceneAPI_GetNavFromNameAndLevel, Level) == 0x000000, "Member 'EndSceneAPI_GetNavFromNameAndLevel::Level' has a wrong offset!");
static_assert(offsetof(EndSceneAPI_GetNavFromNameAndLevel, Name_0) == 0x000008, "Member 'EndSceneAPI_GetNavFromNameAndLevel::Name_0' has a wrong offset!");
static_assert(offsetof(EndSceneAPI_GetNavFromNameAndLevel, ReturnValue) == 0x000010, "Member 'EndSceneAPI_GetNavFromNameAndLevel::ReturnValue' has a wrong offset!");

// Function EndGame.EndSceneAPI.GetNavLocation
// 0x0014 (0x0014 - 0x0000)
struct EndSceneAPI_GetNavLocation final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0008(0x000C)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndSceneAPI_GetNavLocation) == 0x000004, "Wrong alignment on EndSceneAPI_GetNavLocation");
static_assert(sizeof(EndSceneAPI_GetNavLocation) == 0x000014, "Wrong size on EndSceneAPI_GetNavLocation");
static_assert(offsetof(EndSceneAPI_GetNavLocation, Name_0) == 0x000000, "Member 'EndSceneAPI_GetNavLocation::Name_0' has a wrong offset!");
static_assert(offsetof(EndSceneAPI_GetNavLocation, ReturnValue) == 0x000008, "Member 'EndSceneAPI_GetNavLocation::ReturnValue' has a wrong offset!");

// Function EndGame.EndSceneAPI.GetNavLocationFromLevel
// 0x001C (0x001C - 0x0000)
struct EndSceneAPI_GetNavLocationFromLevel final
{
public:
	class FName                                   Level;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name_0;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0010(0x000C)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndSceneAPI_GetNavLocationFromLevel) == 0x000004, "Wrong alignment on EndSceneAPI_GetNavLocationFromLevel");
static_assert(sizeof(EndSceneAPI_GetNavLocationFromLevel) == 0x00001C, "Wrong size on EndSceneAPI_GetNavLocationFromLevel");
static_assert(offsetof(EndSceneAPI_GetNavLocationFromLevel, Level) == 0x000000, "Member 'EndSceneAPI_GetNavLocationFromLevel::Level' has a wrong offset!");
static_assert(offsetof(EndSceneAPI_GetNavLocationFromLevel, Name_0) == 0x000008, "Member 'EndSceneAPI_GetNavLocationFromLevel::Name_0' has a wrong offset!");
static_assert(offsetof(EndSceneAPI_GetNavLocationFromLevel, ReturnValue) == 0x000010, "Member 'EndSceneAPI_GetNavLocationFromLevel::ReturnValue' has a wrong offset!");

// Function EndGame.EndSceneAPI.GetNavRotation
// 0x0014 (0x0014 - 0x0000)
struct EndSceneAPI_GetNavRotation final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               ReturnValue;                                       // 0x0008(0x000C)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndSceneAPI_GetNavRotation) == 0x000004, "Wrong alignment on EndSceneAPI_GetNavRotation");
static_assert(sizeof(EndSceneAPI_GetNavRotation) == 0x000014, "Wrong size on EndSceneAPI_GetNavRotation");
static_assert(offsetof(EndSceneAPI_GetNavRotation, Name_0) == 0x000000, "Member 'EndSceneAPI_GetNavRotation::Name_0' has a wrong offset!");
static_assert(offsetof(EndSceneAPI_GetNavRotation, ReturnValue) == 0x000008, "Member 'EndSceneAPI_GetNavRotation::ReturnValue' has a wrong offset!");

// Function EndGame.EndSceneAPI.GetNavRotationFromLevel
// 0x001C (0x001C - 0x0000)
struct EndSceneAPI_GetNavRotationFromLevel final
{
public:
	class FName                                   Level;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name_0;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               ReturnValue;                                       // 0x0010(0x000C)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndSceneAPI_GetNavRotationFromLevel) == 0x000004, "Wrong alignment on EndSceneAPI_GetNavRotationFromLevel");
static_assert(sizeof(EndSceneAPI_GetNavRotationFromLevel) == 0x00001C, "Wrong size on EndSceneAPI_GetNavRotationFromLevel");
static_assert(offsetof(EndSceneAPI_GetNavRotationFromLevel, Level) == 0x000000, "Member 'EndSceneAPI_GetNavRotationFromLevel::Level' has a wrong offset!");
static_assert(offsetof(EndSceneAPI_GetNavRotationFromLevel, Name_0) == 0x000008, "Member 'EndSceneAPI_GetNavRotationFromLevel::Name_0' has a wrong offset!");
static_assert(offsetof(EndSceneAPI_GetNavRotationFromLevel, ReturnValue) == 0x000010, "Member 'EndSceneAPI_GetNavRotationFromLevel::ReturnValue' has a wrong offset!");

// Function EndGame.EndSceneAPI.GetNavTransform
// 0x0040 (0x0040 - 0x0000)
struct EndSceneAPI_GetNavTransform final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ReturnValue;                                       // 0x0010(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndSceneAPI_GetNavTransform) == 0x000010, "Wrong alignment on EndSceneAPI_GetNavTransform");
static_assert(sizeof(EndSceneAPI_GetNavTransform) == 0x000040, "Wrong size on EndSceneAPI_GetNavTransform");
static_assert(offsetof(EndSceneAPI_GetNavTransform, Name_0) == 0x000000, "Member 'EndSceneAPI_GetNavTransform::Name_0' has a wrong offset!");
static_assert(offsetof(EndSceneAPI_GetNavTransform, ReturnValue) == 0x000010, "Member 'EndSceneAPI_GetNavTransform::ReturnValue' has a wrong offset!");

// Function EndGame.EndSceneAPI.GetNavTransformFromLevel
// 0x0040 (0x0040 - 0x0000)
struct EndSceneAPI_GetNavTransformFromLevel final
{
public:
	class FName                                   Level;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name_0;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             ReturnValue;                                       // 0x0010(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndSceneAPI_GetNavTransformFromLevel) == 0x000010, "Wrong alignment on EndSceneAPI_GetNavTransformFromLevel");
static_assert(sizeof(EndSceneAPI_GetNavTransformFromLevel) == 0x000040, "Wrong size on EndSceneAPI_GetNavTransformFromLevel");
static_assert(offsetof(EndSceneAPI_GetNavTransformFromLevel, Level) == 0x000000, "Member 'EndSceneAPI_GetNavTransformFromLevel::Level' has a wrong offset!");
static_assert(offsetof(EndSceneAPI_GetNavTransformFromLevel, Name_0) == 0x000008, "Member 'EndSceneAPI_GetNavTransformFromLevel::Name_0' has a wrong offset!");
static_assert(offsetof(EndSceneAPI_GetNavTransformFromLevel, ReturnValue) == 0x000010, "Member 'EndSceneAPI_GetNavTransformFromLevel::ReturnValue' has a wrong offset!");

// Function EndGame.EndSceneAPI.InvalidateSimpleCameraWall
// 0x000C (0x000C - 0x0000)
struct EndSceneAPI_InvalidateSimpleCameraWall final
{
public:
	class FName                                   TargetActorName;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndSceneAPI_InvalidateSimpleCameraWall) == 0x000004, "Wrong alignment on EndSceneAPI_InvalidateSimpleCameraWall");
static_assert(sizeof(EndSceneAPI_InvalidateSimpleCameraWall) == 0x00000C, "Wrong size on EndSceneAPI_InvalidateSimpleCameraWall");
static_assert(offsetof(EndSceneAPI_InvalidateSimpleCameraWall, TargetActorName) == 0x000000, "Member 'EndSceneAPI_InvalidateSimpleCameraWall::TargetActorName' has a wrong offset!");
static_assert(offsetof(EndSceneAPI_InvalidateSimpleCameraWall, ReturnValue) == 0x000008, "Member 'EndSceneAPI_InvalidateSimpleCameraWall::ReturnValue' has a wrong offset!");

// Function EndGame.EndSceneAPI.IsDrawPause
// 0x0010 (0x0010 - 0x0000)
struct EndSceneAPI_IsDrawPause final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndSceneAPI_IsDrawPause) == 0x000008, "Wrong alignment on EndSceneAPI_IsDrawPause");
static_assert(sizeof(EndSceneAPI_IsDrawPause) == 0x000010, "Wrong size on EndSceneAPI_IsDrawPause");
static_assert(offsetof(EndSceneAPI_IsDrawPause, Actor) == 0x000000, "Member 'EndSceneAPI_IsDrawPause::Actor' has a wrong offset!");
static_assert(offsetof(EndSceneAPI_IsDrawPause, ReturnValue) == 0x000008, "Member 'EndSceneAPI_IsDrawPause::ReturnValue' has a wrong offset!");

// Function EndGame.EndSceneAPI.IsStableEnvironmentSet
// 0x0001 (0x0001 - 0x0000)
struct EndSceneAPI_IsStableEnvironmentSet final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndSceneAPI_IsStableEnvironmentSet) == 0x000001, "Wrong alignment on EndSceneAPI_IsStableEnvironmentSet");
static_assert(sizeof(EndSceneAPI_IsStableEnvironmentSet) == 0x000001, "Wrong size on EndSceneAPI_IsStableEnvironmentSet");
static_assert(offsetof(EndSceneAPI_IsStableEnvironmentSet, ReturnValue) == 0x000000, "Member 'EndSceneAPI_IsStableEnvironmentSet::ReturnValue' has a wrong offset!");

// Function EndGame.EndSceneAPI.MoveToTargetPoint
// 0x0018 (0x0018 - 0x0000)
struct EndSceneAPI_MoveToTargetPoint final
{
public:
	class FName                                   TargetActorName;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetLocation;                                    // 0x0008(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndSceneAPI_MoveToTargetPoint) == 0x000004, "Wrong alignment on EndSceneAPI_MoveToTargetPoint");
static_assert(sizeof(EndSceneAPI_MoveToTargetPoint) == 0x000018, "Wrong size on EndSceneAPI_MoveToTargetPoint");
static_assert(offsetof(EndSceneAPI_MoveToTargetPoint, TargetActorName) == 0x000000, "Member 'EndSceneAPI_MoveToTargetPoint::TargetActorName' has a wrong offset!");
static_assert(offsetof(EndSceneAPI_MoveToTargetPoint, TargetLocation) == 0x000008, "Member 'EndSceneAPI_MoveToTargetPoint::TargetLocation' has a wrong offset!");
static_assert(offsetof(EndSceneAPI_MoveToTargetPoint, ReturnValue) == 0x000014, "Member 'EndSceneAPI_MoveToTargetPoint::ReturnValue' has a wrong offset!");

// Function EndGame.EndSceneAPI.SetOverwriteEnvinronment
// 0x000C (0x000C - 0x0000)
struct EndSceneAPI_SetOverwriteEnvinronment final
{
public:
	class FName                                   EnvironmentSetKeyName;                             // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndEnvironmentSetOverritePriority            Priority;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndSceneAPI_SetOverwriteEnvinronment) == 0x000004, "Wrong alignment on EndSceneAPI_SetOverwriteEnvinronment");
static_assert(sizeof(EndSceneAPI_SetOverwriteEnvinronment) == 0x00000C, "Wrong size on EndSceneAPI_SetOverwriteEnvinronment");
static_assert(offsetof(EndSceneAPI_SetOverwriteEnvinronment, EnvironmentSetKeyName) == 0x000000, "Member 'EndSceneAPI_SetOverwriteEnvinronment::EnvironmentSetKeyName' has a wrong offset!");
static_assert(offsetof(EndSceneAPI_SetOverwriteEnvinronment, Priority) == 0x000008, "Member 'EndSceneAPI_SetOverwriteEnvinronment::Priority' has a wrong offset!");

// Function EndGame.EndSceneAPI.TeleportActor
// 0x0020 (0x0020 - 0x0000)
struct EndSceneAPI_TeleportActor final
{
public:
	class FName                                   LevelName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActorName;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 TargetActor;                                       // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApplyDestRotation;                                // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0019(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndSceneAPI_TeleportActor) == 0x000008, "Wrong alignment on EndSceneAPI_TeleportActor");
static_assert(sizeof(EndSceneAPI_TeleportActor) == 0x000020, "Wrong size on EndSceneAPI_TeleportActor");
static_assert(offsetof(EndSceneAPI_TeleportActor, LevelName) == 0x000000, "Member 'EndSceneAPI_TeleportActor::LevelName' has a wrong offset!");
static_assert(offsetof(EndSceneAPI_TeleportActor, ActorName) == 0x000008, "Member 'EndSceneAPI_TeleportActor::ActorName' has a wrong offset!");
static_assert(offsetof(EndSceneAPI_TeleportActor, TargetActor) == 0x000010, "Member 'EndSceneAPI_TeleportActor::TargetActor' has a wrong offset!");
static_assert(offsetof(EndSceneAPI_TeleportActor, bApplyDestRotation) == 0x000018, "Member 'EndSceneAPI_TeleportActor::bApplyDestRotation' has a wrong offset!");
static_assert(offsetof(EndSceneAPI_TeleportActor, ReturnValue) == 0x000019, "Member 'EndSceneAPI_TeleportActor::ReturnValue' has a wrong offset!");

// Function EndGame.EndSceneAPI.UnBindActor
// 0x000C (0x000C - 0x0000)
struct EndSceneAPI_UnBindActor final
{
public:
	class FName                                   Parent;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWeaponSlot                                   Slot;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndSceneAPI_UnBindActor) == 0x000004, "Wrong alignment on EndSceneAPI_UnBindActor");
static_assert(sizeof(EndSceneAPI_UnBindActor) == 0x00000C, "Wrong size on EndSceneAPI_UnBindActor");
static_assert(offsetof(EndSceneAPI_UnBindActor, Parent) == 0x000000, "Member 'EndSceneAPI_UnBindActor::Parent' has a wrong offset!");
static_assert(offsetof(EndSceneAPI_UnBindActor, Slot) == 0x000008, "Member 'EndSceneAPI_UnBindActor::Slot' has a wrong offset!");

// Function EndGame.EndSceneAPI.ValidateSimpleCameraWall
// 0x000C (0x000C - 0x0000)
struct EndSceneAPI_ValidateSimpleCameraWall final
{
public:
	class FName                                   TargetActorName;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndSceneAPI_ValidateSimpleCameraWall) == 0x000004, "Wrong alignment on EndSceneAPI_ValidateSimpleCameraWall");
static_assert(sizeof(EndSceneAPI_ValidateSimpleCameraWall) == 0x00000C, "Wrong size on EndSceneAPI_ValidateSimpleCameraWall");
static_assert(offsetof(EndSceneAPI_ValidateSimpleCameraWall, TargetActorName) == 0x000000, "Member 'EndSceneAPI_ValidateSimpleCameraWall::TargetActorName' has a wrong offset!");
static_assert(offsetof(EndSceneAPI_ValidateSimpleCameraWall, ReturnValue) == 0x000008, "Member 'EndSceneAPI_ValidateSimpleCameraWall::ReturnValue' has a wrong offset!");

// Function EndGame.EndShopMenu.OnShopChadolyCellSetup
// 0x0010 (0x0010 - 0x0000)
struct EndShopMenu_OnShopChadolyCellSetup final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndShopMenu_OnShopChadolyCellSetup) == 0x000008, "Wrong alignment on EndShopMenu_OnShopChadolyCellSetup");
static_assert(sizeof(EndShopMenu_OnShopChadolyCellSetup) == 0x000010, "Wrong size on EndShopMenu_OnShopChadolyCellSetup");
static_assert(offsetof(EndShopMenu_OnShopChadolyCellSetup, ItemWidget) == 0x000000, "Member 'EndShopMenu_OnShopChadolyCellSetup::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndShopMenu_OnShopChadolyCellSetup, ItemIndex) == 0x000008, "Member 'EndShopMenu_OnShopChadolyCellSetup::ItemIndex' has a wrong offset!");

// Function EndGame.EndShopMenu.OnShopDefaultCellSetup
// 0x0010 (0x0010 - 0x0000)
struct EndShopMenu_OnShopDefaultCellSetup final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndShopMenu_OnShopDefaultCellSetup) == 0x000008, "Wrong alignment on EndShopMenu_OnShopDefaultCellSetup");
static_assert(sizeof(EndShopMenu_OnShopDefaultCellSetup) == 0x000010, "Wrong size on EndShopMenu_OnShopDefaultCellSetup");
static_assert(offsetof(EndShopMenu_OnShopDefaultCellSetup, ItemWidget) == 0x000000, "Member 'EndShopMenu_OnShopDefaultCellSetup::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndShopMenu_OnShopDefaultCellSetup, ItemIndex) == 0x000008, "Member 'EndShopMenu_OnShopDefaultCellSetup::ItemIndex' has a wrong offset!");

// Function EndGame.EndShopMenu.OnShopListCellSetup
// 0x0010 (0x0010 - 0x0000)
struct EndShopMenu_OnShopListCellSetup final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndShopMenu_OnShopListCellSetup) == 0x000008, "Wrong alignment on EndShopMenu_OnShopListCellSetup");
static_assert(sizeof(EndShopMenu_OnShopListCellSetup) == 0x000010, "Wrong size on EndShopMenu_OnShopListCellSetup");
static_assert(offsetof(EndShopMenu_OnShopListCellSetup, ItemWidget) == 0x000000, "Member 'EndShopMenu_OnShopListCellSetup::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndShopMenu_OnShopListCellSetup, ItemIndex) == 0x000008, "Member 'EndShopMenu_OnShopListCellSetup::ItemIndex' has a wrong offset!");

// Function EndGame.EndStoryDetailWindow.OnQuestInfoListMeasureItem
// 0x000C (0x000C - 0x0000)
struct EndStoryDetailWindow_OnQuestInfoListMeasureItem final
{
public:
	int32                                         ItemIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndStoryDetailWindow_OnQuestInfoListMeasureItem) == 0x000004, "Wrong alignment on EndStoryDetailWindow_OnQuestInfoListMeasureItem");
static_assert(sizeof(EndStoryDetailWindow_OnQuestInfoListMeasureItem) == 0x00000C, "Wrong size on EndStoryDetailWindow_OnQuestInfoListMeasureItem");
static_assert(offsetof(EndStoryDetailWindow_OnQuestInfoListMeasureItem, ItemIndex) == 0x000000, "Member 'EndStoryDetailWindow_OnQuestInfoListMeasureItem::ItemIndex' has a wrong offset!");
static_assert(offsetof(EndStoryDetailWindow_OnQuestInfoListMeasureItem, ReturnValue) == 0x000004, "Member 'EndStoryDetailWindow_OnQuestInfoListMeasureItem::ReturnValue' has a wrong offset!");

// Function EndGame.EndStoryDetailWindow.OnQuestInfoListSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndStoryDetailWindow_OnQuestInfoListSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndStoryDetailWindow_OnQuestInfoListSetupItem) == 0x000008, "Wrong alignment on EndStoryDetailWindow_OnQuestInfoListSetupItem");
static_assert(sizeof(EndStoryDetailWindow_OnQuestInfoListSetupItem) == 0x000010, "Wrong size on EndStoryDetailWindow_OnQuestInfoListSetupItem");
static_assert(offsetof(EndStoryDetailWindow_OnQuestInfoListSetupItem, ItemWidget) == 0x000000, "Member 'EndStoryDetailWindow_OnQuestInfoListSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndStoryDetailWindow_OnQuestInfoListSetupItem, ItemIndex) == 0x000008, "Member 'EndStoryDetailWindow_OnQuestInfoListSetupItem::ItemIndex' has a wrong offset!");

// Function EndGame.EndStoryMenu.OnLeftMenuPressedItem
// 0x0004 (0x0004 - 0x0000)
struct EndStoryMenu_OnLeftMenuPressedItem final
{
public:
	int32                                         ItemIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndStoryMenu_OnLeftMenuPressedItem) == 0x000004, "Wrong alignment on EndStoryMenu_OnLeftMenuPressedItem");
static_assert(sizeof(EndStoryMenu_OnLeftMenuPressedItem) == 0x000004, "Wrong size on EndStoryMenu_OnLeftMenuPressedItem");
static_assert(offsetof(EndStoryMenu_OnLeftMenuPressedItem, ItemIndex) == 0x000000, "Member 'EndStoryMenu_OnLeftMenuPressedItem::ItemIndex' has a wrong offset!");

// Function EndGame.EndStoryMenu.OnLeftMenuSelectedIndexChanged
// 0x0004 (0x0004 - 0x0000)
struct EndStoryMenu_OnLeftMenuSelectedIndexChanged final
{
public:
	int32                                         ItemIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndStoryMenu_OnLeftMenuSelectedIndexChanged) == 0x000004, "Wrong alignment on EndStoryMenu_OnLeftMenuSelectedIndexChanged");
static_assert(sizeof(EndStoryMenu_OnLeftMenuSelectedIndexChanged) == 0x000004, "Wrong size on EndStoryMenu_OnLeftMenuSelectedIndexChanged");
static_assert(offsetof(EndStoryMenu_OnLeftMenuSelectedIndexChanged, ItemIndex) == 0x000000, "Member 'EndStoryMenu_OnLeftMenuSelectedIndexChanged::ItemIndex' has a wrong offset!");

// Function EndGame.EndStoryMenu.OnLeftMenuSetupItem
// 0x0010 (0x0010 - 0x0000)
struct EndStoryMenu_OnLeftMenuSetupItem final
{
public:
	class UWidget*                                ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndStoryMenu_OnLeftMenuSetupItem) == 0x000008, "Wrong alignment on EndStoryMenu_OnLeftMenuSetupItem");
static_assert(sizeof(EndStoryMenu_OnLeftMenuSetupItem) == 0x000010, "Wrong size on EndStoryMenu_OnLeftMenuSetupItem");
static_assert(offsetof(EndStoryMenu_OnLeftMenuSetupItem, ItemWidget) == 0x000000, "Member 'EndStoryMenu_OnLeftMenuSetupItem::ItemWidget' has a wrong offset!");
static_assert(offsetof(EndStoryMenu_OnLeftMenuSetupItem, ItemIndex) == 0x000008, "Member 'EndStoryMenu_OnLeftMenuSetupItem::ItemIndex' has a wrong offset!");

// Function EndGame.EndStringScrollBox.SetColorAndOpacity
// 0x0028 (0x0028 - 0x0000)
struct EndStringScrollBox_SetColorAndOpacity final
{
public:
	struct FSlateColor                            InColorAndOpacity;                                 // 0x0000(0x0028)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndStringScrollBox_SetColorAndOpacity) == 0x000008, "Wrong alignment on EndStringScrollBox_SetColorAndOpacity");
static_assert(sizeof(EndStringScrollBox_SetColorAndOpacity) == 0x000028, "Wrong size on EndStringScrollBox_SetColorAndOpacity");
static_assert(offsetof(EndStringScrollBox_SetColorAndOpacity, InColorAndOpacity) == 0x000000, "Member 'EndStringScrollBox_SetColorAndOpacity::InColorAndOpacity' has a wrong offset!");

// Function EndGame.EndStringScrollBox.SetCullingBoundsExtension
// 0x0010 (0x0010 - 0x0000)
struct EndStringScrollBox_SetCullingBoundsExtension final
{
public:
	struct FMargin                                InCullingBoundsExtension;                          // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndStringScrollBox_SetCullingBoundsExtension) == 0x000004, "Wrong alignment on EndStringScrollBox_SetCullingBoundsExtension");
static_assert(sizeof(EndStringScrollBox_SetCullingBoundsExtension) == 0x000010, "Wrong size on EndStringScrollBox_SetCullingBoundsExtension");
static_assert(offsetof(EndStringScrollBox_SetCullingBoundsExtension, InCullingBoundsExtension) == 0x000000, "Member 'EndStringScrollBox_SetCullingBoundsExtension::InCullingBoundsExtension' has a wrong offset!");

// Function EndGame.EndStringScrollBox.SetDesiredCount
// 0x0004 (0x0004 - 0x0000)
struct EndStringScrollBox_SetDesiredCount final
{
public:
	int32                                         InDesiredCount;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndStringScrollBox_SetDesiredCount) == 0x000004, "Wrong alignment on EndStringScrollBox_SetDesiredCount");
static_assert(sizeof(EndStringScrollBox_SetDesiredCount) == 0x000004, "Wrong size on EndStringScrollBox_SetDesiredCount");
static_assert(offsetof(EndStringScrollBox_SetDesiredCount, InDesiredCount) == 0x000000, "Member 'EndStringScrollBox_SetDesiredCount::InDesiredCount' has a wrong offset!");

// Function EndGame.EndStringScrollBox.SetFont
// 0x0008 (0x0008 - 0x0000)
struct EndStringScrollBox_SetFont final
{
public:
	class UEndFont*                               InFont;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndStringScrollBox_SetFont) == 0x000008, "Wrong alignment on EndStringScrollBox_SetFont");
static_assert(sizeof(EndStringScrollBox_SetFont) == 0x000008, "Wrong size on EndStringScrollBox_SetFont");
static_assert(offsetof(EndStringScrollBox_SetFont, InFont) == 0x000000, "Member 'EndStringScrollBox_SetFont::InFont' has a wrong offset!");

// Function EndGame.EndStringScrollBox.SetOutline
// 0x0001 (0x0001 - 0x0000)
struct EndStringScrollBox_SetOutline final
{
public:
	bool                                          bInOutline;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndStringScrollBox_SetOutline) == 0x000001, "Wrong alignment on EndStringScrollBox_SetOutline");
static_assert(sizeof(EndStringScrollBox_SetOutline) == 0x000001, "Wrong size on EndStringScrollBox_SetOutline");
static_assert(offsetof(EndStringScrollBox_SetOutline, bInOutline) == 0x000000, "Member 'EndStringScrollBox_SetOutline::bInOutline' has a wrong offset!");

// Function EndGame.EndStringScrollBox.SetOutlineColorAndOpacity
// 0x0010 (0x0010 - 0x0000)
struct EndStringScrollBox_SetOutlineColorAndOpacity final
{
public:
	struct FLinearColor                           InOutlineColorAndOpacity;                          // 0x0000(0x0010)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndStringScrollBox_SetOutlineColorAndOpacity) == 0x000004, "Wrong alignment on EndStringScrollBox_SetOutlineColorAndOpacity");
static_assert(sizeof(EndStringScrollBox_SetOutlineColorAndOpacity) == 0x000010, "Wrong size on EndStringScrollBox_SetOutlineColorAndOpacity");
static_assert(offsetof(EndStringScrollBox_SetOutlineColorAndOpacity, InOutlineColorAndOpacity) == 0x000000, "Member 'EndStringScrollBox_SetOutlineColorAndOpacity::InOutlineColorAndOpacity' has a wrong offset!");

// Function EndGame.EndStringScrollBox.SetPadding
// 0x0010 (0x0010 - 0x0000)
struct EndStringScrollBox_SetPadding final
{
public:
	struct FMargin                                InPadding;                                         // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndStringScrollBox_SetPadding) == 0x000004, "Wrong alignment on EndStringScrollBox_SetPadding");
static_assert(sizeof(EndStringScrollBox_SetPadding) == 0x000010, "Wrong size on EndStringScrollBox_SetPadding");
static_assert(offsetof(EndStringScrollBox_SetPadding, InPadding) == 0x000000, "Member 'EndStringScrollBox_SetPadding::InPadding' has a wrong offset!");

// Function EndGame.EndStringScrollBox.SetScrollBarPosition
// 0x0001 (0x0001 - 0x0000)
struct EndStringScrollBox_SetScrollBarPosition final
{
public:
	EEndMenuScrollBarPosition                     InScrollBarPosition;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndStringScrollBox_SetScrollBarPosition) == 0x000001, "Wrong alignment on EndStringScrollBox_SetScrollBarPosition");
static_assert(sizeof(EndStringScrollBox_SetScrollBarPosition) == 0x000001, "Wrong size on EndStringScrollBox_SetScrollBarPosition");
static_assert(offsetof(EndStringScrollBox_SetScrollBarPosition, InScrollBarPosition) == 0x000000, "Member 'EndStringScrollBox_SetScrollBarPosition::InScrollBarPosition' has a wrong offset!");

// Function EndGame.EndStringScrollBox.SetScrollOffset
// 0x0004 (0x0004 - 0x0000)
struct EndStringScrollBox_SetScrollOffset final
{
public:
	float                                         NewScrollOffset;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndStringScrollBox_SetScrollOffset) == 0x000004, "Wrong alignment on EndStringScrollBox_SetScrollOffset");
static_assert(sizeof(EndStringScrollBox_SetScrollOffset) == 0x000004, "Wrong size on EndStringScrollBox_SetScrollOffset");
static_assert(offsetof(EndStringScrollBox_SetScrollOffset, NewScrollOffset) == 0x000000, "Member 'EndStringScrollBox_SetScrollOffset::NewScrollOffset' has a wrong offset!");

// Function EndGame.EndStringScrollBox.SetShadowColorAndOpacity
// 0x0010 (0x0010 - 0x0000)
struct EndStringScrollBox_SetShadowColorAndOpacity final
{
public:
	struct FLinearColor                           InShadowColorAndOpacity;                           // 0x0000(0x0010)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndStringScrollBox_SetShadowColorAndOpacity) == 0x000004, "Wrong alignment on EndStringScrollBox_SetShadowColorAndOpacity");
static_assert(sizeof(EndStringScrollBox_SetShadowColorAndOpacity) == 0x000010, "Wrong size on EndStringScrollBox_SetShadowColorAndOpacity");
static_assert(offsetof(EndStringScrollBox_SetShadowColorAndOpacity, InShadowColorAndOpacity) == 0x000000, "Member 'EndStringScrollBox_SetShadowColorAndOpacity::InShadowColorAndOpacity' has a wrong offset!");

// Function EndGame.EndStringScrollBox.SetShadowOffset
// 0x0008 (0x0008 - 0x0000)
struct EndStringScrollBox_SetShadowOffset final
{
public:
	struct FVector2D                              InShadowOffset;                                    // 0x0000(0x0008)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndStringScrollBox_SetShadowOffset) == 0x000004, "Wrong alignment on EndStringScrollBox_SetShadowOffset");
static_assert(sizeof(EndStringScrollBox_SetShadowOffset) == 0x000008, "Wrong size on EndStringScrollBox_SetShadowOffset");
static_assert(offsetof(EndStringScrollBox_SetShadowOffset, InShadowOffset) == 0x000000, "Member 'EndStringScrollBox_SetShadowOffset::InShadowOffset' has a wrong offset!");

// Function EndGame.EndStringScrollBox.SetText
// 0x0010 (0x0010 - 0x0000)
struct EndStringScrollBox_SetText final
{
public:
	class FString                                 InText;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndStringScrollBox_SetText) == 0x000008, "Wrong alignment on EndStringScrollBox_SetText");
static_assert(sizeof(EndStringScrollBox_SetText) == 0x000010, "Wrong size on EndStringScrollBox_SetText");
static_assert(offsetof(EndStringScrollBox_SetText, InText) == 0x000000, "Member 'EndStringScrollBox_SetText::InText' has a wrong offset!");

// Function EndGame.EndStringScrollBox.SetWrapTextAt
// 0x0004 (0x0004 - 0x0000)
struct EndStringScrollBox_SetWrapTextAt final
{
public:
	float                                         InWrapTextAt;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndStringScrollBox_SetWrapTextAt) == 0x000004, "Wrong alignment on EndStringScrollBox_SetWrapTextAt");
static_assert(sizeof(EndStringScrollBox_SetWrapTextAt) == 0x000004, "Wrong size on EndStringScrollBox_SetWrapTextAt");
static_assert(offsetof(EndStringScrollBox_SetWrapTextAt, InWrapTextAt) == 0x000000, "Member 'EndStringScrollBox_SetWrapTextAt::InWrapTextAt' has a wrong offset!");

// Function EndGame.EndStringScrollBox.GetLineCount
// 0x0004 (0x0004 - 0x0000)
struct EndStringScrollBox_GetLineCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndStringScrollBox_GetLineCount) == 0x000004, "Wrong alignment on EndStringScrollBox_GetLineCount");
static_assert(sizeof(EndStringScrollBox_GetLineCount) == 0x000004, "Wrong size on EndStringScrollBox_GetLineCount");
static_assert(offsetof(EndStringScrollBox_GetLineCount, ReturnValue) == 0x000000, "Member 'EndStringScrollBox_GetLineCount::ReturnValue' has a wrong offset!");

// Function EndGame.EndStringScrollBox.GetMaxScrollOffset
// 0x0008 (0x0008 - 0x0000)
struct EndStringScrollBox_GetMaxScrollOffset final
{
public:
	float                                         InScrollHeight;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndStringScrollBox_GetMaxScrollOffset) == 0x000004, "Wrong alignment on EndStringScrollBox_GetMaxScrollOffset");
static_assert(sizeof(EndStringScrollBox_GetMaxScrollOffset) == 0x000008, "Wrong size on EndStringScrollBox_GetMaxScrollOffset");
static_assert(offsetof(EndStringScrollBox_GetMaxScrollOffset, InScrollHeight) == 0x000000, "Member 'EndStringScrollBox_GetMaxScrollOffset::InScrollHeight' has a wrong offset!");
static_assert(offsetof(EndStringScrollBox_GetMaxScrollOffset, ReturnValue) == 0x000004, "Member 'EndStringScrollBox_GetMaxScrollOffset::ReturnValue' has a wrong offset!");

// Function EndGame.EndStringScrollBox.GetScrollBarVisibility
// 0x0001 (0x0001 - 0x0000)
struct EndStringScrollBox_GetScrollBarVisibility final
{
public:
	ESlateVisibility                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndStringScrollBox_GetScrollBarVisibility) == 0x000001, "Wrong alignment on EndStringScrollBox_GetScrollBarVisibility");
static_assert(sizeof(EndStringScrollBox_GetScrollBarVisibility) == 0x000001, "Wrong size on EndStringScrollBox_GetScrollBarVisibility");
static_assert(offsetof(EndStringScrollBox_GetScrollBarVisibility, ReturnValue) == 0x000000, "Member 'EndStringScrollBox_GetScrollBarVisibility::ReturnValue' has a wrong offset!");

// Function EndGame.EndStringScrollBox.GetScrollOffset
// 0x0004 (0x0004 - 0x0000)
struct EndStringScrollBox_GetScrollOffset final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndStringScrollBox_GetScrollOffset) == 0x000004, "Wrong alignment on EndStringScrollBox_GetScrollOffset");
static_assert(sizeof(EndStringScrollBox_GetScrollOffset) == 0x000004, "Wrong size on EndStringScrollBox_GetScrollOffset");
static_assert(offsetof(EndStringScrollBox_GetScrollOffset, ReturnValue) == 0x000000, "Member 'EndStringScrollBox_GetScrollOffset::ReturnValue' has a wrong offset!");

// Function EndGame.EndStringScrollBox.GetText
// 0x0010 (0x0010 - 0x0000)
struct EndStringScrollBox_GetText final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndStringScrollBox_GetText) == 0x000008, "Wrong alignment on EndStringScrollBox_GetText");
static_assert(sizeof(EndStringScrollBox_GetText) == 0x000010, "Wrong size on EndStringScrollBox_GetText");
static_assert(offsetof(EndStringScrollBox_GetText, ReturnValue) == 0x000000, "Member 'EndStringScrollBox_GetText::ReturnValue' has a wrong offset!");

// Function EndGame.EndSwitchableSkeletalMeshComponent.SetSkeletalMeshByIndex
// 0x0008 (0x0008 - 0x0000)
struct EndSwitchableSkeletalMeshComponent_SetSkeletalMeshByIndex final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReinitPose;                                       // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndSwitchableSkeletalMeshComponent_SetSkeletalMeshByIndex) == 0x000004, "Wrong alignment on EndSwitchableSkeletalMeshComponent_SetSkeletalMeshByIndex");
static_assert(sizeof(EndSwitchableSkeletalMeshComponent_SetSkeletalMeshByIndex) == 0x000008, "Wrong size on EndSwitchableSkeletalMeshComponent_SetSkeletalMeshByIndex");
static_assert(offsetof(EndSwitchableSkeletalMeshComponent_SetSkeletalMeshByIndex, Index_0) == 0x000000, "Member 'EndSwitchableSkeletalMeshComponent_SetSkeletalMeshByIndex::Index_0' has a wrong offset!");
static_assert(offsetof(EndSwitchableSkeletalMeshComponent_SetSkeletalMeshByIndex, bReinitPose) == 0x000004, "Member 'EndSwitchableSkeletalMeshComponent_SetSkeletalMeshByIndex::bReinitPose' has a wrong offset!");

// Function EndGame.EndSwitchableSkeletalMeshComponent.SetSkeletalMeshByLabel
// 0x000C (0x000C - 0x0000)
struct EndSwitchableSkeletalMeshComponent_SetSkeletalMeshByLabel final
{
public:
	class FName                                   Label;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReinitPose;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndSwitchableSkeletalMeshComponent_SetSkeletalMeshByLabel) == 0x000004, "Wrong alignment on EndSwitchableSkeletalMeshComponent_SetSkeletalMeshByLabel");
static_assert(sizeof(EndSwitchableSkeletalMeshComponent_SetSkeletalMeshByLabel) == 0x00000C, "Wrong size on EndSwitchableSkeletalMeshComponent_SetSkeletalMeshByLabel");
static_assert(offsetof(EndSwitchableSkeletalMeshComponent_SetSkeletalMeshByLabel, Label) == 0x000000, "Member 'EndSwitchableSkeletalMeshComponent_SetSkeletalMeshByLabel::Label' has a wrong offset!");
static_assert(offsetof(EndSwitchableSkeletalMeshComponent_SetSkeletalMeshByLabel, bReinitPose) == 0x000008, "Member 'EndSwitchableSkeletalMeshComponent_SetSkeletalMeshByLabel::bReinitPose' has a wrong offset!");

// Function EndGame.EndSystemAPI.CheckAppContents
// 0x0028 (0x0028 - 0x0000)
struct EndSystemAPI_CheckAppContents final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         taskid;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0010(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndSystemAPI_CheckAppContents) == 0x000008, "Wrong alignment on EndSystemAPI_CheckAppContents");
static_assert(sizeof(EndSystemAPI_CheckAppContents) == 0x000028, "Wrong size on EndSystemAPI_CheckAppContents");
static_assert(offsetof(EndSystemAPI_CheckAppContents, WorldContextObject) == 0x000000, "Member 'EndSystemAPI_CheckAppContents::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EndSystemAPI_CheckAppContents, taskid) == 0x000008, "Member 'EndSystemAPI_CheckAppContents::taskid' has a wrong offset!");
static_assert(offsetof(EndSystemAPI_CheckAppContents, LatentInfo) == 0x000010, "Member 'EndSystemAPI_CheckAppContents::LatentInfo' has a wrong offset!");

// Function EndGame.EndSystemAPI.GetActiveLocation
// 0x0010 (0x0010 - 0x0000)
struct EndSystemAPI_GetActiveLocation final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndSystemAPI_GetActiveLocation) == 0x000008, "Wrong alignment on EndSystemAPI_GetActiveLocation");
static_assert(sizeof(EndSystemAPI_GetActiveLocation) == 0x000010, "Wrong size on EndSystemAPI_GetActiveLocation");
static_assert(offsetof(EndSystemAPI_GetActiveLocation, ReturnValue) == 0x000000, "Member 'EndSystemAPI_GetActiveLocation::ReturnValue' has a wrong offset!");

// Function EndGame.EndSystemAPI.GetAddedAppContents
// 0x0010 (0x0010 - 0x0000)
struct EndSystemAPI_GetAddedAppContents final
{
public:
	TArray<int32>                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndSystemAPI_GetAddedAppContents) == 0x000008, "Wrong alignment on EndSystemAPI_GetAddedAppContents");
static_assert(sizeof(EndSystemAPI_GetAddedAppContents) == 0x000010, "Wrong size on EndSystemAPI_GetAddedAppContents");
static_assert(offsetof(EndSystemAPI_GetAddedAppContents, ReturnValue) == 0x000000, "Member 'EndSystemAPI_GetAddedAppContents::ReturnValue' has a wrong offset!");

// Function EndGame.EndSystemAPI.GetBuildRevisionString
// 0x0010 (0x0010 - 0x0000)
struct EndSystemAPI_GetBuildRevisionString final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndSystemAPI_GetBuildRevisionString) == 0x000008, "Wrong alignment on EndSystemAPI_GetBuildRevisionString");
static_assert(sizeof(EndSystemAPI_GetBuildRevisionString) == 0x000010, "Wrong size on EndSystemAPI_GetBuildRevisionString");
static_assert(offsetof(EndSystemAPI_GetBuildRevisionString, ReturnValue) == 0x000000, "Member 'EndSystemAPI_GetBuildRevisionString::ReturnValue' has a wrong offset!");

// Function EndGame.EndSystemAPI.GetBuildTimeString
// 0x0010 (0x0010 - 0x0000)
struct EndSystemAPI_GetBuildTimeString final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndSystemAPI_GetBuildTimeString) == 0x000008, "Wrong alignment on EndSystemAPI_GetBuildTimeString");
static_assert(sizeof(EndSystemAPI_GetBuildTimeString) == 0x000010, "Wrong size on EndSystemAPI_GetBuildTimeString");
static_assert(offsetof(EndSystemAPI_GetBuildTimeString, ReturnValue) == 0x000000, "Member 'EndSystemAPI_GetBuildTimeString::ReturnValue' has a wrong offset!");

// Function EndGame.EndSystemAPI.GetCommandLineOptionValue
// 0x0020 (0x0020 - 0x0000)
struct EndSystemAPI_GetCommandLineOptionValue final
{
public:
	class FString                                 Option;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndSystemAPI_GetCommandLineOptionValue) == 0x000008, "Wrong alignment on EndSystemAPI_GetCommandLineOptionValue");
static_assert(sizeof(EndSystemAPI_GetCommandLineOptionValue) == 0x000020, "Wrong size on EndSystemAPI_GetCommandLineOptionValue");
static_assert(offsetof(EndSystemAPI_GetCommandLineOptionValue, Option) == 0x000000, "Member 'EndSystemAPI_GetCommandLineOptionValue::Option' has a wrong offset!");
static_assert(offsetof(EndSystemAPI_GetCommandLineOptionValue, ReturnValue) == 0x000010, "Member 'EndSystemAPI_GetCommandLineOptionValue::ReturnValue' has a wrong offset!");

// Function EndGame.EndSystemAPI.GetDebugPVPreviewNameList
// 0x0018 (0x0018 - 0x0000)
struct EndSystemAPI_GetDebugPVPreviewNameList final
{
public:
	class FName                                   Level;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndSystemAPI_GetDebugPVPreviewNameList) == 0x000008, "Wrong alignment on EndSystemAPI_GetDebugPVPreviewNameList");
static_assert(sizeof(EndSystemAPI_GetDebugPVPreviewNameList) == 0x000018, "Wrong size on EndSystemAPI_GetDebugPVPreviewNameList");
static_assert(offsetof(EndSystemAPI_GetDebugPVPreviewNameList, Level) == 0x000000, "Member 'EndSystemAPI_GetDebugPVPreviewNameList::Level' has a wrong offset!");
static_assert(offsetof(EndSystemAPI_GetDebugPVPreviewNameList, ReturnValue) == 0x000008, "Member 'EndSystemAPI_GetDebugPVPreviewNameList::ReturnValue' has a wrong offset!");

// Function EndGame.EndSystemAPI.GetDebugSaveDataNameList
// 0x0018 (0x0018 - 0x0000)
struct EndSystemAPI_GetDebugSaveDataNameList final
{
public:
	class FName                                   Level;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndSystemAPI_GetDebugSaveDataNameList) == 0x000008, "Wrong alignment on EndSystemAPI_GetDebugSaveDataNameList");
static_assert(sizeof(EndSystemAPI_GetDebugSaveDataNameList) == 0x000018, "Wrong size on EndSystemAPI_GetDebugSaveDataNameList");
static_assert(offsetof(EndSystemAPI_GetDebugSaveDataNameList, Level) == 0x000000, "Member 'EndSystemAPI_GetDebugSaveDataNameList::Level' has a wrong offset!");
static_assert(offsetof(EndSystemAPI_GetDebugSaveDataNameList, ReturnValue) == 0x000008, "Member 'EndSystemAPI_GetDebugSaveDataNameList::ReturnValue' has a wrong offset!");

// Function EndGame.EndSystemAPI.GetFacialMode
// 0x0008 (0x0008 - 0x0000)
struct EndSystemAPI_GetFacialMode final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndSystemAPI_GetFacialMode) == 0x000004, "Wrong alignment on EndSystemAPI_GetFacialMode");
static_assert(sizeof(EndSystemAPI_GetFacialMode) == 0x000008, "Wrong size on EndSystemAPI_GetFacialMode");
static_assert(offsetof(EndSystemAPI_GetFacialMode, ReturnValue) == 0x000000, "Member 'EndSystemAPI_GetFacialMode::ReturnValue' has a wrong offset!");

// Function EndGame.EndSystemAPI.GetFontMode
// 0x0008 (0x0008 - 0x0000)
struct EndSystemAPI_GetFontMode final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndSystemAPI_GetFontMode) == 0x000004, "Wrong alignment on EndSystemAPI_GetFontMode");
static_assert(sizeof(EndSystemAPI_GetFontMode) == 0x000008, "Wrong size on EndSystemAPI_GetFontMode");
static_assert(offsetof(EndSystemAPI_GetFontMode, ReturnValue) == 0x000000, "Member 'EndSystemAPI_GetFontMode::ReturnValue' has a wrong offset!");

// Function EndGame.EndSystemAPI.GetInputAnalogKeyValue
// 0x0020 (0x0020 - 0x0000)
struct EndSystemAPI_GetInputAnalogKeyValue final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndSystemAPI_GetInputAnalogKeyValue) == 0x000008, "Wrong alignment on EndSystemAPI_GetInputAnalogKeyValue");
static_assert(sizeof(EndSystemAPI_GetInputAnalogKeyValue) == 0x000020, "Wrong size on EndSystemAPI_GetInputAnalogKeyValue");
static_assert(offsetof(EndSystemAPI_GetInputAnalogKeyValue, Key) == 0x000000, "Member 'EndSystemAPI_GetInputAnalogKeyValue::Key' has a wrong offset!");
static_assert(offsetof(EndSystemAPI_GetInputAnalogKeyValue, ReturnValue) == 0x000018, "Member 'EndSystemAPI_GetInputAnalogKeyValue::ReturnValue' has a wrong offset!");

// Function EndGame.EndSystemAPI.GetLanguageMode
// 0x0008 (0x0008 - 0x0000)
struct EndSystemAPI_GetLanguageMode final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndSystemAPI_GetLanguageMode) == 0x000004, "Wrong alignment on EndSystemAPI_GetLanguageMode");
static_assert(sizeof(EndSystemAPI_GetLanguageMode) == 0x000008, "Wrong size on EndSystemAPI_GetLanguageMode");
static_assert(offsetof(EndSystemAPI_GetLanguageMode, ReturnValue) == 0x000000, "Member 'EndSystemAPI_GetLanguageMode::ReturnValue' has a wrong offset!");

// Function EndGame.EndSystemAPI.GetLoadedLocation
// 0x0010 (0x0010 - 0x0000)
struct EndSystemAPI_GetLoadedLocation final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndSystemAPI_GetLoadedLocation) == 0x000008, "Wrong alignment on EndSystemAPI_GetLoadedLocation");
static_assert(sizeof(EndSystemAPI_GetLoadedLocation) == 0x000010, "Wrong size on EndSystemAPI_GetLoadedLocation");
static_assert(offsetof(EndSystemAPI_GetLoadedLocation, ReturnValue) == 0x000000, "Member 'EndSystemAPI_GetLoadedLocation::ReturnValue' has a wrong offset!");

// Function EndGame.EndSystemAPI.GetLocationIndex
// 0x0018 (0x0018 - 0x0000)
struct EndSystemAPI_GetLocationIndex final
{
public:
	class FString                                 Location;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndSystemAPI_GetLocationIndex) == 0x000008, "Wrong alignment on EndSystemAPI_GetLocationIndex");
static_assert(sizeof(EndSystemAPI_GetLocationIndex) == 0x000018, "Wrong size on EndSystemAPI_GetLocationIndex");
static_assert(offsetof(EndSystemAPI_GetLocationIndex, Location) == 0x000000, "Member 'EndSystemAPI_GetLocationIndex::Location' has a wrong offset!");
static_assert(offsetof(EndSystemAPI_GetLocationIndex, ReturnValue) == 0x000010, "Member 'EndSystemAPI_GetLocationIndex::ReturnValue' has a wrong offset!");

// Function EndGame.EndSystemAPI.GetLocationString
// 0x0018 (0x0018 - 0x0000)
struct EndSystemAPI_GetLocationString final
{
public:
	int32                                         Location;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndSystemAPI_GetLocationString) == 0x000008, "Wrong alignment on EndSystemAPI_GetLocationString");
static_assert(sizeof(EndSystemAPI_GetLocationString) == 0x000018, "Wrong size on EndSystemAPI_GetLocationString");
static_assert(offsetof(EndSystemAPI_GetLocationString, Location) == 0x000000, "Member 'EndSystemAPI_GetLocationString::Location' has a wrong offset!");
static_assert(offsetof(EndSystemAPI_GetLocationString, ReturnValue) == 0x000008, "Member 'EndSystemAPI_GetLocationString::ReturnValue' has a wrong offset!");

// Function EndGame.EndSystemAPI.GetOriginalLocation
// 0x0010 (0x0010 - 0x0000)
struct EndSystemAPI_GetOriginalLocation final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndSystemAPI_GetOriginalLocation) == 0x000008, "Wrong alignment on EndSystemAPI_GetOriginalLocation");
static_assert(sizeof(EndSystemAPI_GetOriginalLocation) == 0x000010, "Wrong size on EndSystemAPI_GetOriginalLocation");
static_assert(offsetof(EndSystemAPI_GetOriginalLocation, ReturnValue) == 0x000000, "Member 'EndSystemAPI_GetOriginalLocation::ReturnValue' has a wrong offset!");

// Function EndGame.EndSystemAPI.GetPrevActiveLocation
// 0x0010 (0x0010 - 0x0000)
struct EndSystemAPI_GetPrevActiveLocation final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndSystemAPI_GetPrevActiveLocation) == 0x000008, "Wrong alignment on EndSystemAPI_GetPrevActiveLocation");
static_assert(sizeof(EndSystemAPI_GetPrevActiveLocation) == 0x000010, "Wrong size on EndSystemAPI_GetPrevActiveLocation");
static_assert(offsetof(EndSystemAPI_GetPrevActiveLocation, ReturnValue) == 0x000000, "Member 'EndSystemAPI_GetPrevActiveLocation::ReturnValue' has a wrong offset!");

// Function EndGame.EndSystemAPI.GetReservedPVPreviewName
// 0x0008 (0x0008 - 0x0000)
struct EndSystemAPI_GetReservedPVPreviewName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndSystemAPI_GetReservedPVPreviewName) == 0x000004, "Wrong alignment on EndSystemAPI_GetReservedPVPreviewName");
static_assert(sizeof(EndSystemAPI_GetReservedPVPreviewName) == 0x000008, "Wrong size on EndSystemAPI_GetReservedPVPreviewName");
static_assert(offsetof(EndSystemAPI_GetReservedPVPreviewName, ReturnValue) == 0x000000, "Member 'EndSystemAPI_GetReservedPVPreviewName::ReturnValue' has a wrong offset!");

// Function EndGame.EndSystemAPI.GetSaveLocationIndex
// 0x0018 (0x0018 - 0x0000)
struct EndSystemAPI_GetSaveLocationIndex final
{
public:
	class FString                                 Location;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndSystemAPI_GetSaveLocationIndex) == 0x000008, "Wrong alignment on EndSystemAPI_GetSaveLocationIndex");
static_assert(sizeof(EndSystemAPI_GetSaveLocationIndex) == 0x000018, "Wrong size on EndSystemAPI_GetSaveLocationIndex");
static_assert(offsetof(EndSystemAPI_GetSaveLocationIndex, Location) == 0x000000, "Member 'EndSystemAPI_GetSaveLocationIndex::Location' has a wrong offset!");
static_assert(offsetof(EndSystemAPI_GetSaveLocationIndex, ReturnValue) == 0x000010, "Member 'EndSystemAPI_GetSaveLocationIndex::ReturnValue' has a wrong offset!");

// Function EndGame.EndSystemAPI.GetSaveLocationIndexFromCurrentLocation
// 0x0008 (0x0008 - 0x0000)
struct EndSystemAPI_GetSaveLocationIndexFromCurrentLocation final
{
public:
	int32                                         LocationID;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndSystemAPI_GetSaveLocationIndexFromCurrentLocation) == 0x000004, "Wrong alignment on EndSystemAPI_GetSaveLocationIndexFromCurrentLocation");
static_assert(sizeof(EndSystemAPI_GetSaveLocationIndexFromCurrentLocation) == 0x000008, "Wrong size on EndSystemAPI_GetSaveLocationIndexFromCurrentLocation");
static_assert(offsetof(EndSystemAPI_GetSaveLocationIndexFromCurrentLocation, LocationID) == 0x000000, "Member 'EndSystemAPI_GetSaveLocationIndexFromCurrentLocation::LocationID' has a wrong offset!");
static_assert(offsetof(EndSystemAPI_GetSaveLocationIndexFromCurrentLocation, ReturnValue) == 0x000004, "Member 'EndSystemAPI_GetSaveLocationIndexFromCurrentLocation::ReturnValue' has a wrong offset!");

// Function EndGame.EndSystemAPI.GetTaskIdBP
// 0x0018 (0x0018 - 0x0000)
struct EndSystemAPI_GetTaskIdBP final
{
public:
	class FString                                 Comment;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndSystemAPI_GetTaskIdBP) == 0x000008, "Wrong alignment on EndSystemAPI_GetTaskIdBP");
static_assert(sizeof(EndSystemAPI_GetTaskIdBP) == 0x000018, "Wrong size on EndSystemAPI_GetTaskIdBP");
static_assert(offsetof(EndSystemAPI_GetTaskIdBP, Comment) == 0x000000, "Member 'EndSystemAPI_GetTaskIdBP::Comment' has a wrong offset!");
static_assert(offsetof(EndSystemAPI_GetTaskIdBP, ReturnValue) == 0x000010, "Member 'EndSystemAPI_GetTaskIdBP::ReturnValue' has a wrong offset!");

// Function EndGame.EndSystemAPI.GetVoiceMode
// 0x0008 (0x0008 - 0x0000)
struct EndSystemAPI_GetVoiceMode final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndSystemAPI_GetVoiceMode) == 0x000004, "Wrong alignment on EndSystemAPI_GetVoiceMode");
static_assert(sizeof(EndSystemAPI_GetVoiceMode) == 0x000008, "Wrong size on EndSystemAPI_GetVoiceMode");
static_assert(offsetof(EndSystemAPI_GetVoiceMode, ReturnValue) == 0x000000, "Member 'EndSystemAPI_GetVoiceMode::ReturnValue' has a wrong offset!");

// Function EndGame.EndSystemAPI.InitAppContents
// 0x0020 (0x0020 - 0x0000)
struct EndSystemAPI_InitAppContents final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndSystemAPI_InitAppContents) == 0x000008, "Wrong alignment on EndSystemAPI_InitAppContents");
static_assert(sizeof(EndSystemAPI_InitAppContents) == 0x000020, "Wrong size on EndSystemAPI_InitAppContents");
static_assert(offsetof(EndSystemAPI_InitAppContents, WorldContextObject) == 0x000000, "Member 'EndSystemAPI_InitAppContents::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EndSystemAPI_InitAppContents, LatentInfo) == 0x000008, "Member 'EndSystemAPI_InitAppContents::LatentInfo' has a wrong offset!");

// Function EndGame.EndSystemAPI.IsAppContentsAdded
// 0x0001 (0x0001 - 0x0000)
struct EndSystemAPI_IsAppContentsAdded final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndSystemAPI_IsAppContentsAdded) == 0x000001, "Wrong alignment on EndSystemAPI_IsAppContentsAdded");
static_assert(sizeof(EndSystemAPI_IsAppContentsAdded) == 0x000001, "Wrong size on EndSystemAPI_IsAppContentsAdded");
static_assert(offsetof(EndSystemAPI_IsAppContentsAdded, ReturnValue) == 0x000000, "Member 'EndSystemAPI_IsAppContentsAdded::ReturnValue' has a wrong offset!");

// Function EndGame.EndSystemAPI.IsAppContentsChanged
// 0x0001 (0x0001 - 0x0000)
struct EndSystemAPI_IsAppContentsChanged final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndSystemAPI_IsAppContentsChanged) == 0x000001, "Wrong alignment on EndSystemAPI_IsAppContentsChanged");
static_assert(sizeof(EndSystemAPI_IsAppContentsChanged) == 0x000001, "Wrong size on EndSystemAPI_IsAppContentsChanged");
static_assert(offsetof(EndSystemAPI_IsAppContentsChanged, ReturnValue) == 0x000000, "Member 'EndSystemAPI_IsAppContentsChanged::ReturnValue' has a wrong offset!");

// Function EndGame.EndSystemAPI.IsEndGameMode
// 0x0001 (0x0001 - 0x0000)
struct EndSystemAPI_IsEndGameMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndSystemAPI_IsEndGameMode) == 0x000001, "Wrong alignment on EndSystemAPI_IsEndGameMode");
static_assert(sizeof(EndSystemAPI_IsEndGameMode) == 0x000001, "Wrong size on EndSystemAPI_IsEndGameMode");
static_assert(offsetof(EndSystemAPI_IsEndGameMode, ReturnValue) == 0x000000, "Member 'EndSystemAPI_IsEndGameMode::ReturnValue' has a wrong offset!");

// Function EndGame.EndSystemAPI.IsExistTaskIdBP
// 0x0008 (0x0008 - 0x0000)
struct EndSystemAPI_IsExistTaskIdBP final
{
public:
	int32                                         taskid;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndSystemAPI_IsExistTaskIdBP) == 0x000004, "Wrong alignment on EndSystemAPI_IsExistTaskIdBP");
static_assert(sizeof(EndSystemAPI_IsExistTaskIdBP) == 0x000008, "Wrong size on EndSystemAPI_IsExistTaskIdBP");
static_assert(offsetof(EndSystemAPI_IsExistTaskIdBP, taskid) == 0x000000, "Member 'EndSystemAPI_IsExistTaskIdBP::taskid' has a wrong offset!");
static_assert(offsetof(EndSystemAPI_IsExistTaskIdBP, ReturnValue) == 0x000004, "Member 'EndSystemAPI_IsExistTaskIdBP::ReturnValue' has a wrong offset!");

// Function EndGame.EndSystemAPI.IsGameStatus
// 0x0002 (0x0002 - 0x0000)
struct EndSystemAPI_IsGameStatus final
{
public:
	EGameStatus                                   Status;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndSystemAPI_IsGameStatus) == 0x000001, "Wrong alignment on EndSystemAPI_IsGameStatus");
static_assert(sizeof(EndSystemAPI_IsGameStatus) == 0x000002, "Wrong size on EndSystemAPI_IsGameStatus");
static_assert(offsetof(EndSystemAPI_IsGameStatus, Status) == 0x000000, "Member 'EndSystemAPI_IsGameStatus::Status' has a wrong offset!");
static_assert(offsetof(EndSystemAPI_IsGameStatus, ReturnValue) == 0x000001, "Member 'EndSystemAPI_IsGameStatus::ReturnValue' has a wrong offset!");

// Function EndGame.EndSystemAPI.IsInputKeyDown
// 0x0020 (0x0020 - 0x0000)
struct EndSystemAPI_IsInputKeyDown final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndSystemAPI_IsInputKeyDown) == 0x000008, "Wrong alignment on EndSystemAPI_IsInputKeyDown");
static_assert(sizeof(EndSystemAPI_IsInputKeyDown) == 0x000020, "Wrong size on EndSystemAPI_IsInputKeyDown");
static_assert(offsetof(EndSystemAPI_IsInputKeyDown, Key) == 0x000000, "Member 'EndSystemAPI_IsInputKeyDown::Key' has a wrong offset!");
static_assert(offsetof(EndSystemAPI_IsInputKeyDown, ReturnValue) == 0x000018, "Member 'EndSystemAPI_IsInputKeyDown::ReturnValue' has a wrong offset!");

// Function EndGame.EndSystemAPI.IsInputKeyPressed
// 0x0020 (0x0020 - 0x0000)
struct EndSystemAPI_IsInputKeyPressed final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndSystemAPI_IsInputKeyPressed) == 0x000008, "Wrong alignment on EndSystemAPI_IsInputKeyPressed");
static_assert(sizeof(EndSystemAPI_IsInputKeyPressed) == 0x000020, "Wrong size on EndSystemAPI_IsInputKeyPressed");
static_assert(offsetof(EndSystemAPI_IsInputKeyPressed, Key) == 0x000000, "Member 'EndSystemAPI_IsInputKeyPressed::Key' has a wrong offset!");
static_assert(offsetof(EndSystemAPI_IsInputKeyPressed, ReturnValue) == 0x000018, "Member 'EndSystemAPI_IsInputKeyPressed::ReturnValue' has a wrong offset!");

// Function EndGame.EndSystemAPI.IsInputKeyReleased
// 0x0020 (0x0020 - 0x0000)
struct EndSystemAPI_IsInputKeyReleased final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndSystemAPI_IsInputKeyReleased) == 0x000008, "Wrong alignment on EndSystemAPI_IsInputKeyReleased");
static_assert(sizeof(EndSystemAPI_IsInputKeyReleased) == 0x000020, "Wrong size on EndSystemAPI_IsInputKeyReleased");
static_assert(offsetof(EndSystemAPI_IsInputKeyReleased, Key) == 0x000000, "Member 'EndSystemAPI_IsInputKeyReleased::Key' has a wrong offset!");
static_assert(offsetof(EndSystemAPI_IsInputKeyReleased, ReturnValue) == 0x000018, "Member 'EndSystemAPI_IsInputKeyReleased::ReturnValue' has a wrong offset!");

// Function EndGame.EndSystemAPI.IsInputKeyRepeat
// 0x0020 (0x0020 - 0x0000)
struct EndSystemAPI_IsInputKeyRepeat final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndSystemAPI_IsInputKeyRepeat) == 0x000008, "Wrong alignment on EndSystemAPI_IsInputKeyRepeat");
static_assert(sizeof(EndSystemAPI_IsInputKeyRepeat) == 0x000020, "Wrong size on EndSystemAPI_IsInputKeyRepeat");
static_assert(offsetof(EndSystemAPI_IsInputKeyRepeat, Key) == 0x000000, "Member 'EndSystemAPI_IsInputKeyRepeat::Key' has a wrong offset!");
static_assert(offsetof(EndSystemAPI_IsInputKeyRepeat, ReturnValue) == 0x000018, "Member 'EndSystemAPI_IsInputKeyRepeat::ReturnValue' has a wrong offset!");

// Function EndGame.EndSystemAPI.IsMaster
// 0x0001 (0x0001 - 0x0000)
struct EndSystemAPI_IsMaster final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndSystemAPI_IsMaster) == 0x000001, "Wrong alignment on EndSystemAPI_IsMaster");
static_assert(sizeof(EndSystemAPI_IsMaster) == 0x000001, "Wrong size on EndSystemAPI_IsMaster");
static_assert(offsetof(EndSystemAPI_IsMaster, ReturnValue) == 0x000000, "Member 'EndSystemAPI_IsMaster::ReturnValue' has a wrong offset!");

// Function EndGame.EndSystemAPI.LoadLevelSpecBP
// 0x0010 (0x0010 - 0x0000)
struct EndSystemAPI_LoadLevelSpecBP final
{
public:
	EEndLoadLevelPriority                         Priority;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SpecName;                                          // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndSystemAPI_LoadLevelSpecBP) == 0x000004, "Wrong alignment on EndSystemAPI_LoadLevelSpecBP");
static_assert(sizeof(EndSystemAPI_LoadLevelSpecBP) == 0x000010, "Wrong size on EndSystemAPI_LoadLevelSpecBP");
static_assert(offsetof(EndSystemAPI_LoadLevelSpecBP, Priority) == 0x000000, "Member 'EndSystemAPI_LoadLevelSpecBP::Priority' has a wrong offset!");
static_assert(offsetof(EndSystemAPI_LoadLevelSpecBP, SpecName) == 0x000004, "Member 'EndSystemAPI_LoadLevelSpecBP::SpecName' has a wrong offset!");
static_assert(offsetof(EndSystemAPI_LoadLevelSpecBP, ReturnValue) == 0x00000C, "Member 'EndSystemAPI_LoadLevelSpecBP::ReturnValue' has a wrong offset!");

// Function EndGame.EndSystemAPI.ReleaseTaskIdBP
// 0x0004 (0x0004 - 0x0000)
struct EndSystemAPI_ReleaseTaskIdBP final
{
public:
	int32                                         taskid;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndSystemAPI_ReleaseTaskIdBP) == 0x000004, "Wrong alignment on EndSystemAPI_ReleaseTaskIdBP");
static_assert(sizeof(EndSystemAPI_ReleaseTaskIdBP) == 0x000004, "Wrong size on EndSystemAPI_ReleaseTaskIdBP");
static_assert(offsetof(EndSystemAPI_ReleaseTaskIdBP, taskid) == 0x000000, "Member 'EndSystemAPI_ReleaseTaskIdBP::taskid' has a wrong offset!");

// Function EndGame.EndSystemAPI.RequestActiveLocation
// 0x0010 (0x0010 - 0x0000)
struct EndSystemAPI_RequestActiveLocation final
{
public:
	class FString                                 TargetLocation;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndSystemAPI_RequestActiveLocation) == 0x000008, "Wrong alignment on EndSystemAPI_RequestActiveLocation");
static_assert(sizeof(EndSystemAPI_RequestActiveLocation) == 0x000010, "Wrong size on EndSystemAPI_RequestActiveLocation");
static_assert(offsetof(EndSystemAPI_RequestActiveLocation, TargetLocation) == 0x000000, "Member 'EndSystemAPI_RequestActiveLocation::TargetLocation' has a wrong offset!");

// Function EndGame.EndSystemAPI.SetActiveLocation
// 0x0010 (0x0010 - 0x0000)
struct EndSystemAPI_SetActiveLocation final
{
public:
	class FString                                 TargetLocation;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndSystemAPI_SetActiveLocation) == 0x000008, "Wrong alignment on EndSystemAPI_SetActiveLocation");
static_assert(sizeof(EndSystemAPI_SetActiveLocation) == 0x000010, "Wrong size on EndSystemAPI_SetActiveLocation");
static_assert(offsetof(EndSystemAPI_SetActiveLocation, TargetLocation) == 0x000000, "Member 'EndSystemAPI_SetActiveLocation::TargetLocation' has a wrong offset!");

// Function EndGame.EndSystemAPI.SetGameStatus
// 0x0002 (0x0002 - 0x0000)
struct EndSystemAPI_SetGameStatus final
{
public:
	EGameStatus                                   Status;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Set;                                               // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndSystemAPI_SetGameStatus) == 0x000001, "Wrong alignment on EndSystemAPI_SetGameStatus");
static_assert(sizeof(EndSystemAPI_SetGameStatus) == 0x000002, "Wrong size on EndSystemAPI_SetGameStatus");
static_assert(offsetof(EndSystemAPI_SetGameStatus, Status) == 0x000000, "Member 'EndSystemAPI_SetGameStatus::Status' has a wrong offset!");
static_assert(offsetof(EndSystemAPI_SetGameStatus, Set) == 0x000001, "Member 'EndSystemAPI_SetGameStatus::Set' has a wrong offset!");

// Function EndGame.EndSystemAPI.SetLoadedLocation
// 0x0010 (0x0010 - 0x0000)
struct EndSystemAPI_SetLoadedLocation final
{
public:
	class FString                                 Location;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndSystemAPI_SetLoadedLocation) == 0x000008, "Wrong alignment on EndSystemAPI_SetLoadedLocation");
static_assert(sizeof(EndSystemAPI_SetLoadedLocation) == 0x000010, "Wrong size on EndSystemAPI_SetLoadedLocation");
static_assert(offsetof(EndSystemAPI_SetLoadedLocation, Location) == 0x000000, "Member 'EndSystemAPI_SetLoadedLocation::Location' has a wrong offset!");

// Function EndGame.EndSystemAPI.SetReservedPVPreviewName
// 0x0008 (0x0008 - 0x0000)
struct EndSystemAPI_SetReservedPVPreviewName final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndSystemAPI_SetReservedPVPreviewName) == 0x000004, "Wrong alignment on EndSystemAPI_SetReservedPVPreviewName");
static_assert(sizeof(EndSystemAPI_SetReservedPVPreviewName) == 0x000008, "Wrong size on EndSystemAPI_SetReservedPVPreviewName");
static_assert(offsetof(EndSystemAPI_SetReservedPVPreviewName, Name_0) == 0x000000, "Member 'EndSystemAPI_SetReservedPVPreviewName::Name_0' has a wrong offset!");

// Function EndGame.EndSystemAPI.SetUpDebugPVPreviewFromName
// 0x0020 (0x0020 - 0x0000)
struct EndSystemAPI_SetUpDebugPVPreviewFromName final
{
public:
	class FName                                   Level;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name_0;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndSystemAPI_SetUpDebugPVPreviewFromName) == 0x000008, "Wrong alignment on EndSystemAPI_SetUpDebugPVPreviewFromName");
static_assert(sizeof(EndSystemAPI_SetUpDebugPVPreviewFromName) == 0x000020, "Wrong size on EndSystemAPI_SetUpDebugPVPreviewFromName");
static_assert(offsetof(EndSystemAPI_SetUpDebugPVPreviewFromName, Level) == 0x000000, "Member 'EndSystemAPI_SetUpDebugPVPreviewFromName::Level' has a wrong offset!");
static_assert(offsetof(EndSystemAPI_SetUpDebugPVPreviewFromName, Name_0) == 0x000008, "Member 'EndSystemAPI_SetUpDebugPVPreviewFromName::Name_0' has a wrong offset!");
static_assert(offsetof(EndSystemAPI_SetUpDebugPVPreviewFromName, ReturnValue) == 0x000018, "Member 'EndSystemAPI_SetUpDebugPVPreviewFromName::ReturnValue' has a wrong offset!");

// Function EndGame.EndSystemAPI.SetUpDebugResidentSaveDataFromName
// 0x0010 (0x0010 - 0x0000)
struct EndSystemAPI_SetUpDebugResidentSaveDataFromName final
{
public:
	class FString                                 Name_0;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndSystemAPI_SetUpDebugResidentSaveDataFromName) == 0x000008, "Wrong alignment on EndSystemAPI_SetUpDebugResidentSaveDataFromName");
static_assert(sizeof(EndSystemAPI_SetUpDebugResidentSaveDataFromName) == 0x000010, "Wrong size on EndSystemAPI_SetUpDebugResidentSaveDataFromName");
static_assert(offsetof(EndSystemAPI_SetUpDebugResidentSaveDataFromName, Name_0) == 0x000000, "Member 'EndSystemAPI_SetUpDebugResidentSaveDataFromName::Name_0' has a wrong offset!");

// Function EndGame.EndSystemAPI.SetUpDebugSaveDataFromName
// 0x0020 (0x0020 - 0x0000)
struct EndSystemAPI_SetUpDebugSaveDataFromName final
{
public:
	class FName                                   Level;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name_0;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isSetupResident;                                   // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndSystemAPI_SetUpDebugSaveDataFromName) == 0x000008, "Wrong alignment on EndSystemAPI_SetUpDebugSaveDataFromName");
static_assert(sizeof(EndSystemAPI_SetUpDebugSaveDataFromName) == 0x000020, "Wrong size on EndSystemAPI_SetUpDebugSaveDataFromName");
static_assert(offsetof(EndSystemAPI_SetUpDebugSaveDataFromName, Level) == 0x000000, "Member 'EndSystemAPI_SetUpDebugSaveDataFromName::Level' has a wrong offset!");
static_assert(offsetof(EndSystemAPI_SetUpDebugSaveDataFromName, Name_0) == 0x000008, "Member 'EndSystemAPI_SetUpDebugSaveDataFromName::Name_0' has a wrong offset!");
static_assert(offsetof(EndSystemAPI_SetUpDebugSaveDataFromName, isSetupResident) == 0x000018, "Member 'EndSystemAPI_SetUpDebugSaveDataFromName::isSetupResident' has a wrong offset!");

// Function EndGame.EndSystemAPI.UnLoadLevelSpecBP
// 0x0010 (0x0010 - 0x0000)
struct EndSystemAPI_UnLoadLevelSpecBP final
{
public:
	EEndLoadLevelPriority                         Priority;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SpecName;                                          // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndSystemAPI_UnLoadLevelSpecBP) == 0x000004, "Wrong alignment on EndSystemAPI_UnLoadLevelSpecBP");
static_assert(sizeof(EndSystemAPI_UnLoadLevelSpecBP) == 0x000010, "Wrong size on EndSystemAPI_UnLoadLevelSpecBP");
static_assert(offsetof(EndSystemAPI_UnLoadLevelSpecBP, Priority) == 0x000000, "Member 'EndSystemAPI_UnLoadLevelSpecBP::Priority' has a wrong offset!");
static_assert(offsetof(EndSystemAPI_UnLoadLevelSpecBP, SpecName) == 0x000004, "Member 'EndSystemAPI_UnLoadLevelSpecBP::SpecName' has a wrong offset!");
static_assert(offsetof(EndSystemAPI_UnLoadLevelSpecBP, ReturnValue) == 0x00000C, "Member 'EndSystemAPI_UnLoadLevelSpecBP::ReturnValue' has a wrong offset!");

// Function EndGame.EndSystemAPI.UpdateTrophy
// 0x0008 (0x0008 - 0x0000)
struct EndSystemAPI_UpdateTrophy final
{
public:
	class FName                                   trophyId;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndSystemAPI_UpdateTrophy) == 0x000004, "Wrong alignment on EndSystemAPI_UpdateTrophy");
static_assert(sizeof(EndSystemAPI_UpdateTrophy) == 0x000008, "Wrong size on EndSystemAPI_UpdateTrophy");
static_assert(offsetof(EndSystemAPI_UpdateTrophy, trophyId) == 0x000000, "Member 'EndSystemAPI_UpdateTrophy::trophyId' has a wrong offset!");

// Function EndGame.EndSystemAPI.WaitTaskId
// 0x0028 (0x0028 - 0x0000)
struct EndSystemAPI_WaitTaskId final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         taskid;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0010(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndSystemAPI_WaitTaskId) == 0x000008, "Wrong alignment on EndSystemAPI_WaitTaskId");
static_assert(sizeof(EndSystemAPI_WaitTaskId) == 0x000028, "Wrong size on EndSystemAPI_WaitTaskId");
static_assert(offsetof(EndSystemAPI_WaitTaskId, WorldContextObject) == 0x000000, "Member 'EndSystemAPI_WaitTaskId::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EndSystemAPI_WaitTaskId, taskid) == 0x000008, "Member 'EndSystemAPI_WaitTaskId::taskid' has a wrong offset!");
static_assert(offsetof(EndSystemAPI_WaitTaskId, LatentInfo) == 0x000010, "Member 'EndSystemAPI_WaitTaskId::LatentInfo' has a wrong offset!");

// Function EndGame.EndTalkAPI.DisableBattleTalkEventBox
// 0x0008 (0x0008 - 0x0000)
struct EndTalkAPI_DisableBattleTalkEventBox final
{
public:
	class FName                                   TriggerBoxName;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndTalkAPI_DisableBattleTalkEventBox) == 0x000004, "Wrong alignment on EndTalkAPI_DisableBattleTalkEventBox");
static_assert(sizeof(EndTalkAPI_DisableBattleTalkEventBox) == 0x000008, "Wrong size on EndTalkAPI_DisableBattleTalkEventBox");
static_assert(offsetof(EndTalkAPI_DisableBattleTalkEventBox, TriggerBoxName) == 0x000000, "Member 'EndTalkAPI_DisableBattleTalkEventBox::TriggerBoxName' has a wrong offset!");

// Function EndGame.EndTalkAPI.EnableBattleTalkEventBox
// 0x0008 (0x0008 - 0x0000)
struct EndTalkAPI_EnableBattleTalkEventBox final
{
public:
	class FName                                   TriggerBoxName;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndTalkAPI_EnableBattleTalkEventBox) == 0x000004, "Wrong alignment on EndTalkAPI_EnableBattleTalkEventBox");
static_assert(sizeof(EndTalkAPI_EnableBattleTalkEventBox) == 0x000008, "Wrong size on EndTalkAPI_EnableBattleTalkEventBox");
static_assert(offsetof(EndTalkAPI_EnableBattleTalkEventBox, TriggerBoxName) == 0x000000, "Member 'EndTalkAPI_EnableBattleTalkEventBox::TriggerBoxName' has a wrong offset!");

// Function EndGame.EndTalkAPI.PlayBattleTalkStateByBP
// 0x000C (0x000C - 0x0000)
struct EndTalkAPI_PlayBattleTalkStateByBP final
{
public:
	class FName                                   TalkStateId;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForced;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableToStable;                                   // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndTalkAPI_PlayBattleTalkStateByBP) == 0x000004, "Wrong alignment on EndTalkAPI_PlayBattleTalkStateByBP");
static_assert(sizeof(EndTalkAPI_PlayBattleTalkStateByBP) == 0x00000C, "Wrong size on EndTalkAPI_PlayBattleTalkStateByBP");
static_assert(offsetof(EndTalkAPI_PlayBattleTalkStateByBP, TalkStateId) == 0x000000, "Member 'EndTalkAPI_PlayBattleTalkStateByBP::TalkStateId' has a wrong offset!");
static_assert(offsetof(EndTalkAPI_PlayBattleTalkStateByBP, bForced) == 0x000008, "Member 'EndTalkAPI_PlayBattleTalkStateByBP::bForced' has a wrong offset!");
static_assert(offsetof(EndTalkAPI_PlayBattleTalkStateByBP, bEnableToStable) == 0x000009, "Member 'EndTalkAPI_PlayBattleTalkStateByBP::bEnableToStable' has a wrong offset!");

// Function EndGame.EndTalkAPI.SendBattleTalkPlayTriggerByBP
// 0x0038 (0x0038 - 0x0000)
struct EndTalkAPI_SendBattleTalkPlayTriggerByBP final
{
public:
	class FName                                   TalkPlayTriggerId;                                 // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StringArgument00;                                  // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StringArgument01;                                  // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StringArgument02;                                  // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndTalkAPI_SendBattleTalkPlayTriggerByBP) == 0x000008, "Wrong alignment on EndTalkAPI_SendBattleTalkPlayTriggerByBP");
static_assert(sizeof(EndTalkAPI_SendBattleTalkPlayTriggerByBP) == 0x000038, "Wrong size on EndTalkAPI_SendBattleTalkPlayTriggerByBP");
static_assert(offsetof(EndTalkAPI_SendBattleTalkPlayTriggerByBP, TalkPlayTriggerId) == 0x000000, "Member 'EndTalkAPI_SendBattleTalkPlayTriggerByBP::TalkPlayTriggerId' has a wrong offset!");
static_assert(offsetof(EndTalkAPI_SendBattleTalkPlayTriggerByBP, StringArgument00) == 0x000008, "Member 'EndTalkAPI_SendBattleTalkPlayTriggerByBP::StringArgument00' has a wrong offset!");
static_assert(offsetof(EndTalkAPI_SendBattleTalkPlayTriggerByBP, StringArgument01) == 0x000018, "Member 'EndTalkAPI_SendBattleTalkPlayTriggerByBP::StringArgument01' has a wrong offset!");
static_assert(offsetof(EndTalkAPI_SendBattleTalkPlayTriggerByBP, StringArgument02) == 0x000028, "Member 'EndTalkAPI_SendBattleTalkPlayTriggerByBP::StringArgument02' has a wrong offset!");

// Function EndGame.EndTextBlock.SetAllowMacro
// 0x0001 (0x0001 - 0x0000)
struct EndTextBlock_SetAllowMacro final
{
public:
	bool                                          bInAllowMacro;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndTextBlock_SetAllowMacro) == 0x000001, "Wrong alignment on EndTextBlock_SetAllowMacro");
static_assert(sizeof(EndTextBlock_SetAllowMacro) == 0x000001, "Wrong size on EndTextBlock_SetAllowMacro");
static_assert(offsetof(EndTextBlock_SetAllowMacro, bInAllowMacro) == 0x000000, "Member 'EndTextBlock_SetAllowMacro::bInAllowMacro' has a wrong offset!");

// Function EndGame.EndTextBlock.SetAutoShrinkText
// 0x0001 (0x0001 - 0x0000)
struct EndTextBlock_SetAutoShrinkText final
{
public:
	bool                                          bInAutoShrinkText;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndTextBlock_SetAutoShrinkText) == 0x000001, "Wrong alignment on EndTextBlock_SetAutoShrinkText");
static_assert(sizeof(EndTextBlock_SetAutoShrinkText) == 0x000001, "Wrong size on EndTextBlock_SetAutoShrinkText");
static_assert(offsetof(EndTextBlock_SetAutoShrinkText, bInAutoShrinkText) == 0x000000, "Member 'EndTextBlock_SetAutoShrinkText::bInAutoShrinkText' has a wrong offset!");

// Function EndGame.EndTextBlock.SetAutoUpdateButtons
// 0x0001 (0x0001 - 0x0000)
struct EndTextBlock_SetAutoUpdateButtons final
{
public:
	bool                                          bInAutoUpdateButtons;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndTextBlock_SetAutoUpdateButtons) == 0x000001, "Wrong alignment on EndTextBlock_SetAutoUpdateButtons");
static_assert(sizeof(EndTextBlock_SetAutoUpdateButtons) == 0x000001, "Wrong size on EndTextBlock_SetAutoUpdateButtons");
static_assert(offsetof(EndTextBlock_SetAutoUpdateButtons, bInAutoUpdateButtons) == 0x000000, "Member 'EndTextBlock_SetAutoUpdateButtons::bInAutoUpdateButtons' has a wrong offset!");

// Function EndGame.EndTextBlock.SetAutoWrapText
// 0x0001 (0x0001 - 0x0000)
struct EndTextBlock_SetAutoWrapText final
{
public:
	bool                                          bInAutoWrapText;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndTextBlock_SetAutoWrapText) == 0x000001, "Wrong alignment on EndTextBlock_SetAutoWrapText");
static_assert(sizeof(EndTextBlock_SetAutoWrapText) == 0x000001, "Wrong size on EndTextBlock_SetAutoWrapText");
static_assert(offsetof(EndTextBlock_SetAutoWrapText, bInAutoWrapText) == 0x000000, "Member 'EndTextBlock_SetAutoWrapText::bInAutoWrapText' has a wrong offset!");

// Function EndGame.EndTextBlock.SetBlendMode
// 0x0001 (0x0001 - 0x0000)
struct EndTextBlock_SetBlendMode final
{
public:
	EBlendMode                                    InBlendMode;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndTextBlock_SetBlendMode) == 0x000001, "Wrong alignment on EndTextBlock_SetBlendMode");
static_assert(sizeof(EndTextBlock_SetBlendMode) == 0x000001, "Wrong size on EndTextBlock_SetBlendMode");
static_assert(offsetof(EndTextBlock_SetBlendMode, InBlendMode) == 0x000000, "Member 'EndTextBlock_SetBlendMode::InBlendMode' has a wrong offset!");

// Function EndGame.EndTextBlock.SetBottomColorAndOpacity
// 0x0028 (0x0028 - 0x0000)
struct EndTextBlock_SetBottomColorAndOpacity final
{
public:
	struct FSlateColor                            InColorAndOpacity;                                 // 0x0000(0x0028)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndTextBlock_SetBottomColorAndOpacity) == 0x000008, "Wrong alignment on EndTextBlock_SetBottomColorAndOpacity");
static_assert(sizeof(EndTextBlock_SetBottomColorAndOpacity) == 0x000028, "Wrong size on EndTextBlock_SetBottomColorAndOpacity");
static_assert(offsetof(EndTextBlock_SetBottomColorAndOpacity, InColorAndOpacity) == 0x000000, "Member 'EndTextBlock_SetBottomColorAndOpacity::InColorAndOpacity' has a wrong offset!");

// Function EndGame.EndTextBlock.SetBottomOpacity
// 0x0004 (0x0004 - 0x0000)
struct EndTextBlock_SetBottomOpacity final
{
public:
	float                                         InOpacity;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndTextBlock_SetBottomOpacity) == 0x000004, "Wrong alignment on EndTextBlock_SetBottomOpacity");
static_assert(sizeof(EndTextBlock_SetBottomOpacity) == 0x000004, "Wrong size on EndTextBlock_SetBottomOpacity");
static_assert(offsetof(EndTextBlock_SetBottomOpacity, InOpacity) == 0x000000, "Member 'EndTextBlock_SetBottomOpacity::InOpacity' has a wrong offset!");

// Function EndGame.EndTextBlock.SetColorAndOpacity
// 0x0028 (0x0028 - 0x0000)
struct EndTextBlock_SetColorAndOpacity final
{
public:
	struct FSlateColor                            InColorAndOpacity;                                 // 0x0000(0x0028)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndTextBlock_SetColorAndOpacity) == 0x000008, "Wrong alignment on EndTextBlock_SetColorAndOpacity");
static_assert(sizeof(EndTextBlock_SetColorAndOpacity) == 0x000028, "Wrong size on EndTextBlock_SetColorAndOpacity");
static_assert(offsetof(EndTextBlock_SetColorAndOpacity, InColorAndOpacity) == 0x000000, "Member 'EndTextBlock_SetColorAndOpacity::InColorAndOpacity' has a wrong offset!");

// Function EndGame.EndTextBlock.SetColoredButtons
// 0x0001 (0x0001 - 0x0000)
struct EndTextBlock_SetColoredButtons final
{
public:
	bool                                          bInColoredButtons;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndTextBlock_SetColoredButtons) == 0x000001, "Wrong alignment on EndTextBlock_SetColoredButtons");
static_assert(sizeof(EndTextBlock_SetColoredButtons) == 0x000001, "Wrong size on EndTextBlock_SetColoredButtons");
static_assert(offsetof(EndTextBlock_SetColoredButtons, bInColoredButtons) == 0x000000, "Member 'EndTextBlock_SetColoredButtons::bInColoredButtons' has a wrong offset!");

// Function EndGame.EndTextBlock.SetFont
// 0x0008 (0x0008 - 0x0000)
struct EndTextBlock_SetFont final
{
public:
	class UEndFont*                               InFont;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndTextBlock_SetFont) == 0x000008, "Wrong alignment on EndTextBlock_SetFont");
static_assert(sizeof(EndTextBlock_SetFont) == 0x000008, "Wrong size on EndTextBlock_SetFont");
static_assert(offsetof(EndTextBlock_SetFont, InFont) == 0x000000, "Member 'EndTextBlock_SetFont::InFont' has a wrong offset!");

// Function EndGame.EndTextBlock.SetJustification
// 0x0001 (0x0001 - 0x0000)
struct EndTextBlock_SetJustification final
{
public:
	ETextJustify                                  InJustification;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndTextBlock_SetJustification) == 0x000001, "Wrong alignment on EndTextBlock_SetJustification");
static_assert(sizeof(EndTextBlock_SetJustification) == 0x000001, "Wrong size on EndTextBlock_SetJustification");
static_assert(offsetof(EndTextBlock_SetJustification, InJustification) == 0x000000, "Member 'EndTextBlock_SetJustification::InJustification' has a wrong offset!");

// Function EndGame.EndTextBlock.SetLeftAlignedCenter
// 0x0001 (0x0001 - 0x0000)
struct EndTextBlock_SetLeftAlignedCenter final
{
public:
	bool                                          bInLeftAlignedCenter;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndTextBlock_SetLeftAlignedCenter) == 0x000001, "Wrong alignment on EndTextBlock_SetLeftAlignedCenter");
static_assert(sizeof(EndTextBlock_SetLeftAlignedCenter) == 0x000001, "Wrong size on EndTextBlock_SetLeftAlignedCenter");
static_assert(offsetof(EndTextBlock_SetLeftAlignedCenter, bInLeftAlignedCenter) == 0x000000, "Member 'EndTextBlock_SetLeftAlignedCenter::bInLeftAlignedCenter' has a wrong offset!");

// Function EndGame.EndTextBlock.SetMinDesiredWidth
// 0x0004 (0x0004 - 0x0000)
struct EndTextBlock_SetMinDesiredWidth final
{
public:
	float                                         InMinDesiredWidth;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndTextBlock_SetMinDesiredWidth) == 0x000004, "Wrong alignment on EndTextBlock_SetMinDesiredWidth");
static_assert(sizeof(EndTextBlock_SetMinDesiredWidth) == 0x000004, "Wrong size on EndTextBlock_SetMinDesiredWidth");
static_assert(offsetof(EndTextBlock_SetMinDesiredWidth, InMinDesiredWidth) == 0x000000, "Member 'EndTextBlock_SetMinDesiredWidth::InMinDesiredWidth' has a wrong offset!");

// Function EndGame.EndTextBlock.SetOpacity
// 0x0004 (0x0004 - 0x0000)
struct EndTextBlock_SetOpacity final
{
public:
	float                                         InOpacity;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndTextBlock_SetOpacity) == 0x000004, "Wrong alignment on EndTextBlock_SetOpacity");
static_assert(sizeof(EndTextBlock_SetOpacity) == 0x000004, "Wrong size on EndTextBlock_SetOpacity");
static_assert(offsetof(EndTextBlock_SetOpacity, InOpacity) == 0x000000, "Member 'EndTextBlock_SetOpacity::InOpacity' has a wrong offset!");

// Function EndGame.EndTextBlock.SetOutline
// 0x0001 (0x0001 - 0x0000)
struct EndTextBlock_SetOutline final
{
public:
	bool                                          bInOutline;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndTextBlock_SetOutline) == 0x000001, "Wrong alignment on EndTextBlock_SetOutline");
static_assert(sizeof(EndTextBlock_SetOutline) == 0x000001, "Wrong size on EndTextBlock_SetOutline");
static_assert(offsetof(EndTextBlock_SetOutline, bInOutline) == 0x000000, "Member 'EndTextBlock_SetOutline::bInOutline' has a wrong offset!");

// Function EndGame.EndTextBlock.SetOutlineColorAndOpacity
// 0x0010 (0x0010 - 0x0000)
struct EndTextBlock_SetOutlineColorAndOpacity final
{
public:
	struct FLinearColor                           InOutlineColorAndOpacity;                          // 0x0000(0x0010)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndTextBlock_SetOutlineColorAndOpacity) == 0x000004, "Wrong alignment on EndTextBlock_SetOutlineColorAndOpacity");
static_assert(sizeof(EndTextBlock_SetOutlineColorAndOpacity) == 0x000010, "Wrong size on EndTextBlock_SetOutlineColorAndOpacity");
static_assert(offsetof(EndTextBlock_SetOutlineColorAndOpacity, InOutlineColorAndOpacity) == 0x000000, "Member 'EndTextBlock_SetOutlineColorAndOpacity::InOutlineColorAndOpacity' has a wrong offset!");

// Function EndGame.EndTextBlock.SetShadowColorAndOpacity
// 0x0010 (0x0010 - 0x0000)
struct EndTextBlock_SetShadowColorAndOpacity final
{
public:
	struct FLinearColor                           InShadowColorAndOpacity;                           // 0x0000(0x0010)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndTextBlock_SetShadowColorAndOpacity) == 0x000004, "Wrong alignment on EndTextBlock_SetShadowColorAndOpacity");
static_assert(sizeof(EndTextBlock_SetShadowColorAndOpacity) == 0x000010, "Wrong size on EndTextBlock_SetShadowColorAndOpacity");
static_assert(offsetof(EndTextBlock_SetShadowColorAndOpacity, InShadowColorAndOpacity) == 0x000000, "Member 'EndTextBlock_SetShadowColorAndOpacity::InShadowColorAndOpacity' has a wrong offset!");

// Function EndGame.EndTextBlock.SetShadowOffset
// 0x0008 (0x0008 - 0x0000)
struct EndTextBlock_SetShadowOffset final
{
public:
	struct FVector2D                              InShadowOffset;                                    // 0x0000(0x0008)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndTextBlock_SetShadowOffset) == 0x000004, "Wrong alignment on EndTextBlock_SetShadowOffset");
static_assert(sizeof(EndTextBlock_SetShadowOffset) == 0x000008, "Wrong size on EndTextBlock_SetShadowOffset");
static_assert(offsetof(EndTextBlock_SetShadowOffset, InShadowOffset) == 0x000000, "Member 'EndTextBlock_SetShadowOffset::InShadowOffset' has a wrong offset!");

// Function EndGame.EndTextBlock.SetText
// 0x0010 (0x0010 - 0x0000)
struct EndTextBlock_SetText final
{
public:
	class FString                                 InText;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndTextBlock_SetText) == 0x000008, "Wrong alignment on EndTextBlock_SetText");
static_assert(sizeof(EndTextBlock_SetText) == 0x000010, "Wrong size on EndTextBlock_SetText");
static_assert(offsetof(EndTextBlock_SetText, InText) == 0x000000, "Member 'EndTextBlock_SetText::InText' has a wrong offset!");

// Function EndGame.EndTextBlock.SetWrapTextAt
// 0x0004 (0x0004 - 0x0000)
struct EndTextBlock_SetWrapTextAt final
{
public:
	float                                         InWrapTextAt;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndTextBlock_SetWrapTextAt) == 0x000004, "Wrong alignment on EndTextBlock_SetWrapTextAt");
static_assert(sizeof(EndTextBlock_SetWrapTextAt) == 0x000004, "Wrong size on EndTextBlock_SetWrapTextAt");
static_assert(offsetof(EndTextBlock_SetWrapTextAt, InWrapTextAt) == 0x000000, "Member 'EndTextBlock_SetWrapTextAt::InWrapTextAt' has a wrong offset!");

// Function EndGame.EndTextBlock.GetText
// 0x0010 (0x0010 - 0x0000)
struct EndTextBlock_GetText final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndTextBlock_GetText) == 0x000008, "Wrong alignment on EndTextBlock_GetText");
static_assert(sizeof(EndTextBlock_GetText) == 0x000010, "Wrong size on EndTextBlock_GetText");
static_assert(offsetof(EndTextBlock_GetText, ReturnValue) == 0x000000, "Member 'EndTextBlock_GetText::ReturnValue' has a wrong offset!");

// Function EndGame.EndTiledImage.GetDynamicMaterial
// 0x0008 (0x0008 - 0x0000)
struct EndTiledImage_GetDynamicMaterial final
{
public:
	class UMaterialInstanceDynamic*               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndTiledImage_GetDynamicMaterial) == 0x000008, "Wrong alignment on EndTiledImage_GetDynamicMaterial");
static_assert(sizeof(EndTiledImage_GetDynamicMaterial) == 0x000008, "Wrong size on EndTiledImage_GetDynamicMaterial");
static_assert(offsetof(EndTiledImage_GetDynamicMaterial, ReturnValue) == 0x000000, "Member 'EndTiledImage_GetDynamicMaterial::ReturnValue' has a wrong offset!");

// Function EndGame.EndTiledImage.SetBlendMode
// 0x0001 (0x0001 - 0x0000)
struct EndTiledImage_SetBlendMode final
{
public:
	EBlendMode                                    InBlendMode;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndTiledImage_SetBlendMode) == 0x000001, "Wrong alignment on EndTiledImage_SetBlendMode");
static_assert(sizeof(EndTiledImage_SetBlendMode) == 0x000001, "Wrong size on EndTiledImage_SetBlendMode");
static_assert(offsetof(EndTiledImage_SetBlendMode, InBlendMode) == 0x000000, "Member 'EndTiledImage_SetBlendMode::InBlendMode' has a wrong offset!");

// Function EndGame.EndTiledImage.SetBrush
// 0x0078 (0x0078 - 0x0000)
struct EndTiledImage_SetBrush final
{
public:
	struct FSlateBrush                            InBrush;                                           // 0x0000(0x0078)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndTiledImage_SetBrush) == 0x000008, "Wrong alignment on EndTiledImage_SetBrush");
static_assert(sizeof(EndTiledImage_SetBrush) == 0x000078, "Wrong size on EndTiledImage_SetBrush");
static_assert(offsetof(EndTiledImage_SetBrush, InBrush) == 0x000000, "Member 'EndTiledImage_SetBrush::InBrush' has a wrong offset!");

// Function EndGame.EndTiledImage.SetBrushFromAsset
// 0x0008 (0x0008 - 0x0000)
struct EndTiledImage_SetBrushFromAsset final
{
public:
	class USlateBrushAsset*                       Asset;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndTiledImage_SetBrushFromAsset) == 0x000008, "Wrong alignment on EndTiledImage_SetBrushFromAsset");
static_assert(sizeof(EndTiledImage_SetBrushFromAsset) == 0x000008, "Wrong size on EndTiledImage_SetBrushFromAsset");
static_assert(offsetof(EndTiledImage_SetBrushFromAsset, Asset) == 0x000000, "Member 'EndTiledImage_SetBrushFromAsset::Asset' has a wrong offset!");

// Function EndGame.EndTiledImage.SetBrushFromMaterial
// 0x0008 (0x0008 - 0x0000)
struct EndTiledImage_SetBrushFromMaterial final
{
public:
	class UMaterialInterface*                     Material;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndTiledImage_SetBrushFromMaterial) == 0x000008, "Wrong alignment on EndTiledImage_SetBrushFromMaterial");
static_assert(sizeof(EndTiledImage_SetBrushFromMaterial) == 0x000008, "Wrong size on EndTiledImage_SetBrushFromMaterial");
static_assert(offsetof(EndTiledImage_SetBrushFromMaterial, Material) == 0x000000, "Member 'EndTiledImage_SetBrushFromMaterial::Material' has a wrong offset!");

// Function EndGame.EndTiledImage.SetBrushFromTexture
// 0x0010 (0x0010 - 0x0000)
struct EndTiledImage_SetBrushFromTexture final
{
public:
	class UTexture2D*                             Texture;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMatchSize;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndTiledImage_SetBrushFromTexture) == 0x000008, "Wrong alignment on EndTiledImage_SetBrushFromTexture");
static_assert(sizeof(EndTiledImage_SetBrushFromTexture) == 0x000010, "Wrong size on EndTiledImage_SetBrushFromTexture");
static_assert(offsetof(EndTiledImage_SetBrushFromTexture, Texture) == 0x000000, "Member 'EndTiledImage_SetBrushFromTexture::Texture' has a wrong offset!");
static_assert(offsetof(EndTiledImage_SetBrushFromTexture, bMatchSize) == 0x000008, "Member 'EndTiledImage_SetBrushFromTexture::bMatchSize' has a wrong offset!");

// Function EndGame.EndTiledImage.SetBrushFromTextureDynamic
// 0x0010 (0x0010 - 0x0000)
struct EndTiledImage_SetBrushFromTextureDynamic final
{
public:
	class UTexture2DDynamic*                      Texture;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMatchSize;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndTiledImage_SetBrushFromTextureDynamic) == 0x000008, "Wrong alignment on EndTiledImage_SetBrushFromTextureDynamic");
static_assert(sizeof(EndTiledImage_SetBrushFromTextureDynamic) == 0x000010, "Wrong size on EndTiledImage_SetBrushFromTextureDynamic");
static_assert(offsetof(EndTiledImage_SetBrushFromTextureDynamic, Texture) == 0x000000, "Member 'EndTiledImage_SetBrushFromTextureDynamic::Texture' has a wrong offset!");
static_assert(offsetof(EndTiledImage_SetBrushFromTextureDynamic, bMatchSize) == 0x000008, "Member 'EndTiledImage_SetBrushFromTextureDynamic::bMatchSize' has a wrong offset!");

// Function EndGame.EndTiledImage.SetColorAndOpacity
// 0x0010 (0x0010 - 0x0000)
struct EndTiledImage_SetColorAndOpacity final
{
public:
	struct FLinearColor                           InColorAndOpacity;                                 // 0x0000(0x0010)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndTiledImage_SetColorAndOpacity) == 0x000004, "Wrong alignment on EndTiledImage_SetColorAndOpacity");
static_assert(sizeof(EndTiledImage_SetColorAndOpacity) == 0x000010, "Wrong size on EndTiledImage_SetColorAndOpacity");
static_assert(offsetof(EndTiledImage_SetColorAndOpacity, InColorAndOpacity) == 0x000000, "Member 'EndTiledImage_SetColorAndOpacity::InColorAndOpacity' has a wrong offset!");

// Function EndGame.EndTiledImage.SetOpacity
// 0x0004 (0x0004 - 0x0000)
struct EndTiledImage_SetOpacity final
{
public:
	float                                         InOpacity;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndTiledImage_SetOpacity) == 0x000004, "Wrong alignment on EndTiledImage_SetOpacity");
static_assert(sizeof(EndTiledImage_SetOpacity) == 0x000004, "Wrong size on EndTiledImage_SetOpacity");
static_assert(offsetof(EndTiledImage_SetOpacity, InOpacity) == 0x000000, "Member 'EndTiledImage_SetOpacity::InOpacity' has a wrong offset!");

// Function EndGame.EndVirtualScrollBox.RefreshItem
// 0x0004 (0x0004 - 0x0000)
struct EndVirtualScrollBox_RefreshItem final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndVirtualScrollBox_RefreshItem) == 0x000004, "Wrong alignment on EndVirtualScrollBox_RefreshItem");
static_assert(sizeof(EndVirtualScrollBox_RefreshItem) == 0x000004, "Wrong size on EndVirtualScrollBox_RefreshItem");
static_assert(offsetof(EndVirtualScrollBox_RefreshItem, Index_0) == 0x000000, "Member 'EndVirtualScrollBox_RefreshItem::Index_0' has a wrong offset!");

// Function EndGame.EndVirtualScrollBox.ScrollWidgetIntoView
// 0x0010 (0x0010 - 0x0000)
struct EndVirtualScrollBox_ScrollWidgetIntoView final
{
public:
	class UWidget*                                WidgetToFind;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AnimateScroll;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndVirtualScrollBox_ScrollWidgetIntoView) == 0x000008, "Wrong alignment on EndVirtualScrollBox_ScrollWidgetIntoView");
static_assert(sizeof(EndVirtualScrollBox_ScrollWidgetIntoView) == 0x000010, "Wrong size on EndVirtualScrollBox_ScrollWidgetIntoView");
static_assert(offsetof(EndVirtualScrollBox_ScrollWidgetIntoView, WidgetToFind) == 0x000000, "Member 'EndVirtualScrollBox_ScrollWidgetIntoView::WidgetToFind' has a wrong offset!");
static_assert(offsetof(EndVirtualScrollBox_ScrollWidgetIntoView, AnimateScroll) == 0x000008, "Member 'EndVirtualScrollBox_ScrollWidgetIntoView::AnimateScroll' has a wrong offset!");

// Function EndGame.EndVirtualScrollBox.SetCullingBoundsExtension
// 0x0010 (0x0010 - 0x0000)
struct EndVirtualScrollBox_SetCullingBoundsExtension final
{
public:
	struct FMargin                                InCullingBoundsExtension;                          // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndVirtualScrollBox_SetCullingBoundsExtension) == 0x000004, "Wrong alignment on EndVirtualScrollBox_SetCullingBoundsExtension");
static_assert(sizeof(EndVirtualScrollBox_SetCullingBoundsExtension) == 0x000010, "Wrong size on EndVirtualScrollBox_SetCullingBoundsExtension");
static_assert(offsetof(EndVirtualScrollBox_SetCullingBoundsExtension, InCullingBoundsExtension) == 0x000000, "Member 'EndVirtualScrollBox_SetCullingBoundsExtension::InCullingBoundsExtension' has a wrong offset!");

// Function EndGame.EndVirtualScrollBox.SetCursorBoundsExtension
// 0x0010 (0x0010 - 0x0000)
struct EndVirtualScrollBox_SetCursorBoundsExtension final
{
public:
	struct FMargin                                InCursorBoundsExtension;                           // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndVirtualScrollBox_SetCursorBoundsExtension) == 0x000004, "Wrong alignment on EndVirtualScrollBox_SetCursorBoundsExtension");
static_assert(sizeof(EndVirtualScrollBox_SetCursorBoundsExtension) == 0x000010, "Wrong size on EndVirtualScrollBox_SetCursorBoundsExtension");
static_assert(offsetof(EndVirtualScrollBox_SetCursorBoundsExtension, InCursorBoundsExtension) == 0x000000, "Member 'EndVirtualScrollBox_SetCursorBoundsExtension::InCursorBoundsExtension' has a wrong offset!");

// Function EndGame.EndVirtualScrollBox.SetDesiredCount
// 0x0004 (0x0004 - 0x0000)
struct EndVirtualScrollBox_SetDesiredCount final
{
public:
	int32                                         InDesiredCount;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndVirtualScrollBox_SetDesiredCount) == 0x000004, "Wrong alignment on EndVirtualScrollBox_SetDesiredCount");
static_assert(sizeof(EndVirtualScrollBox_SetDesiredCount) == 0x000004, "Wrong size on EndVirtualScrollBox_SetDesiredCount");
static_assert(offsetof(EndVirtualScrollBox_SetDesiredCount, InDesiredCount) == 0x000000, "Member 'EndVirtualScrollBox_SetDesiredCount::InDesiredCount' has a wrong offset!");

// Function EndGame.EndVirtualScrollBox.SetHasVariableSizeItem
// 0x0001 (0x0001 - 0x0000)
struct EndVirtualScrollBox_SetHasVariableSizeItem final
{
public:
	bool                                          bInVariableSizeItem;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndVirtualScrollBox_SetHasVariableSizeItem) == 0x000001, "Wrong alignment on EndVirtualScrollBox_SetHasVariableSizeItem");
static_assert(sizeof(EndVirtualScrollBox_SetHasVariableSizeItem) == 0x000001, "Wrong size on EndVirtualScrollBox_SetHasVariableSizeItem");
static_assert(offsetof(EndVirtualScrollBox_SetHasVariableSizeItem, bInVariableSizeItem) == 0x000000, "Member 'EndVirtualScrollBox_SetHasVariableSizeItem::bInVariableSizeItem' has a wrong offset!");

// Function EndGame.EndVirtualScrollBox.SetItemCount
// 0x0004 (0x0004 - 0x0000)
struct EndVirtualScrollBox_SetItemCount final
{
public:
	int32                                         InItemCount;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndVirtualScrollBox_SetItemCount) == 0x000004, "Wrong alignment on EndVirtualScrollBox_SetItemCount");
static_assert(sizeof(EndVirtualScrollBox_SetItemCount) == 0x000004, "Wrong size on EndVirtualScrollBox_SetItemCount");
static_assert(offsetof(EndVirtualScrollBox_SetItemCount, InItemCount) == 0x000000, "Member 'EndVirtualScrollBox_SetItemCount::InItemCount' has a wrong offset!");

// Function EndGame.EndVirtualScrollBox.SetPadding
// 0x0010 (0x0010 - 0x0000)
struct EndVirtualScrollBox_SetPadding final
{
public:
	struct FMargin                                InPadding;                                         // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndVirtualScrollBox_SetPadding) == 0x000004, "Wrong alignment on EndVirtualScrollBox_SetPadding");
static_assert(sizeof(EndVirtualScrollBox_SetPadding) == 0x000010, "Wrong size on EndVirtualScrollBox_SetPadding");
static_assert(offsetof(EndVirtualScrollBox_SetPadding, InPadding) == 0x000000, "Member 'EndVirtualScrollBox_SetPadding::InPadding' has a wrong offset!");

// Function EndGame.EndVirtualScrollBox.SetScrollBarPosition
// 0x0001 (0x0001 - 0x0000)
struct EndVirtualScrollBox_SetScrollBarPosition final
{
public:
	EEndMenuScrollBarPosition                     InScrollBarPosition;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndVirtualScrollBox_SetScrollBarPosition) == 0x000001, "Wrong alignment on EndVirtualScrollBox_SetScrollBarPosition");
static_assert(sizeof(EndVirtualScrollBox_SetScrollBarPosition) == 0x000001, "Wrong size on EndVirtualScrollBox_SetScrollBarPosition");
static_assert(offsetof(EndVirtualScrollBox_SetScrollBarPosition, InScrollBarPosition) == 0x000000, "Member 'EndVirtualScrollBox_SetScrollBarPosition::InScrollBarPosition' has a wrong offset!");

// Function EndGame.EndVirtualScrollBox.SetScrollOffset
// 0x0004 (0x0004 - 0x0000)
struct EndVirtualScrollBox_SetScrollOffset final
{
public:
	float                                         NewScrollOffset;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndVirtualScrollBox_SetScrollOffset) == 0x000004, "Wrong alignment on EndVirtualScrollBox_SetScrollOffset");
static_assert(sizeof(EndVirtualScrollBox_SetScrollOffset) == 0x000004, "Wrong size on EndVirtualScrollBox_SetScrollOffset");
static_assert(offsetof(EndVirtualScrollBox_SetScrollOffset, NewScrollOffset) == 0x000000, "Member 'EndVirtualScrollBox_SetScrollOffset::NewScrollOffset' has a wrong offset!");

// Function EndGame.EndVirtualScrollBox.SetSelectedIndex
// 0x0018 (0x0018 - 0x0000)
struct EndVirtualScrollBox_SetSelectedIndex final
{
public:
	int32                                         UserIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SlotIndex;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InAnimateScroll;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForceCallback;                                     // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                InRootWidget;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndVirtualScrollBox_SetSelectedIndex) == 0x000008, "Wrong alignment on EndVirtualScrollBox_SetSelectedIndex");
static_assert(sizeof(EndVirtualScrollBox_SetSelectedIndex) == 0x000018, "Wrong size on EndVirtualScrollBox_SetSelectedIndex");
static_assert(offsetof(EndVirtualScrollBox_SetSelectedIndex, UserIndex) == 0x000000, "Member 'EndVirtualScrollBox_SetSelectedIndex::UserIndex' has a wrong offset!");
static_assert(offsetof(EndVirtualScrollBox_SetSelectedIndex, SlotIndex) == 0x000004, "Member 'EndVirtualScrollBox_SetSelectedIndex::SlotIndex' has a wrong offset!");
static_assert(offsetof(EndVirtualScrollBox_SetSelectedIndex, InAnimateScroll) == 0x000008, "Member 'EndVirtualScrollBox_SetSelectedIndex::InAnimateScroll' has a wrong offset!");
static_assert(offsetof(EndVirtualScrollBox_SetSelectedIndex, ForceCallback) == 0x000009, "Member 'EndVirtualScrollBox_SetSelectedIndex::ForceCallback' has a wrong offset!");
static_assert(offsetof(EndVirtualScrollBox_SetSelectedIndex, InRootWidget) == 0x000010, "Member 'EndVirtualScrollBox_SetSelectedIndex::InRootWidget' has a wrong offset!");

// Function EndGame.EndVirtualScrollBox.SetSelectedIndexWithCause
// 0x0018 (0x0018 - 0x0000)
struct EndVirtualScrollBox_SetSelectedIndexWithCause final
{
public:
	int32                                         UserIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SlotIndex;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFocusCause                                   FocusCause;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InAnimateScroll;                                   // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForceCallback;                                     // 0x000A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                InRootWidget;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndVirtualScrollBox_SetSelectedIndexWithCause) == 0x000008, "Wrong alignment on EndVirtualScrollBox_SetSelectedIndexWithCause");
static_assert(sizeof(EndVirtualScrollBox_SetSelectedIndexWithCause) == 0x000018, "Wrong size on EndVirtualScrollBox_SetSelectedIndexWithCause");
static_assert(offsetof(EndVirtualScrollBox_SetSelectedIndexWithCause, UserIndex) == 0x000000, "Member 'EndVirtualScrollBox_SetSelectedIndexWithCause::UserIndex' has a wrong offset!");
static_assert(offsetof(EndVirtualScrollBox_SetSelectedIndexWithCause, SlotIndex) == 0x000004, "Member 'EndVirtualScrollBox_SetSelectedIndexWithCause::SlotIndex' has a wrong offset!");
static_assert(offsetof(EndVirtualScrollBox_SetSelectedIndexWithCause, FocusCause) == 0x000008, "Member 'EndVirtualScrollBox_SetSelectedIndexWithCause::FocusCause' has a wrong offset!");
static_assert(offsetof(EndVirtualScrollBox_SetSelectedIndexWithCause, InAnimateScroll) == 0x000009, "Member 'EndVirtualScrollBox_SetSelectedIndexWithCause::InAnimateScroll' has a wrong offset!");
static_assert(offsetof(EndVirtualScrollBox_SetSelectedIndexWithCause, ForceCallback) == 0x00000A, "Member 'EndVirtualScrollBox_SetSelectedIndexWithCause::ForceCallback' has a wrong offset!");
static_assert(offsetof(EndVirtualScrollBox_SetSelectedIndexWithCause, InRootWidget) == 0x000010, "Member 'EndVirtualScrollBox_SetSelectedIndexWithCause::InRootWidget' has a wrong offset!");

// Function EndGame.EndVirtualScrollBox.SetSupportsKeyDown
// 0x0001 (0x0001 - 0x0000)
struct EndVirtualScrollBox_SetSupportsKeyDown final
{
public:
	bool                                          bInSupportsKeyDown;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndVirtualScrollBox_SetSupportsKeyDown) == 0x000001, "Wrong alignment on EndVirtualScrollBox_SetSupportsKeyDown");
static_assert(sizeof(EndVirtualScrollBox_SetSupportsKeyDown) == 0x000001, "Wrong size on EndVirtualScrollBox_SetSupportsKeyDown");
static_assert(offsetof(EndVirtualScrollBox_SetSupportsKeyDown, bInSupportsKeyDown) == 0x000000, "Member 'EndVirtualScrollBox_SetSupportsKeyDown::bInSupportsKeyDown' has a wrong offset!");

// Function EndGame.EndVirtualScrollBox.SetSupportsPageScroll
// 0x0001 (0x0001 - 0x0000)
struct EndVirtualScrollBox_SetSupportsPageScroll final
{
public:
	bool                                          bInSupportsPageScroll;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndVirtualScrollBox_SetSupportsPageScroll) == 0x000001, "Wrong alignment on EndVirtualScrollBox_SetSupportsPageScroll");
static_assert(sizeof(EndVirtualScrollBox_SetSupportsPageScroll) == 0x000001, "Wrong size on EndVirtualScrollBox_SetSupportsPageScroll");
static_assert(offsetof(EndVirtualScrollBox_SetSupportsPageScroll, bInSupportsPageScroll) == 0x000000, "Member 'EndVirtualScrollBox_SetSupportsPageScroll::bInSupportsPageScroll' has a wrong offset!");

// Function EndGame.EndVirtualScrollBox.GetChildAt
// 0x0010 (0x0010 - 0x0000)
struct EndVirtualScrollBox_GetChildAt final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndVirtualScrollBox_GetChildAt) == 0x000008, "Wrong alignment on EndVirtualScrollBox_GetChildAt");
static_assert(sizeof(EndVirtualScrollBox_GetChildAt) == 0x000010, "Wrong size on EndVirtualScrollBox_GetChildAt");
static_assert(offsetof(EndVirtualScrollBox_GetChildAt, Index_0) == 0x000000, "Member 'EndVirtualScrollBox_GetChildAt::Index_0' has a wrong offset!");
static_assert(offsetof(EndVirtualScrollBox_GetChildAt, ReturnValue) == 0x000008, "Member 'EndVirtualScrollBox_GetChildAt::ReturnValue' has a wrong offset!");

// Function EndGame.EndVirtualScrollBox.GetCursorWidget
// 0x0008 (0x0008 - 0x0000)
struct EndVirtualScrollBox_GetCursorWidget final
{
public:
	class UWidget*                                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndVirtualScrollBox_GetCursorWidget) == 0x000008, "Wrong alignment on EndVirtualScrollBox_GetCursorWidget");
static_assert(sizeof(EndVirtualScrollBox_GetCursorWidget) == 0x000008, "Wrong size on EndVirtualScrollBox_GetCursorWidget");
static_assert(offsetof(EndVirtualScrollBox_GetCursorWidget, ReturnValue) == 0x000000, "Member 'EndVirtualScrollBox_GetCursorWidget::ReturnValue' has a wrong offset!");

// Function EndGame.EndVirtualScrollBox.GetMaxScrollOffset
// 0x0004 (0x0004 - 0x0000)
struct EndVirtualScrollBox_GetMaxScrollOffset final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndVirtualScrollBox_GetMaxScrollOffset) == 0x000004, "Wrong alignment on EndVirtualScrollBox_GetMaxScrollOffset");
static_assert(sizeof(EndVirtualScrollBox_GetMaxScrollOffset) == 0x000004, "Wrong size on EndVirtualScrollBox_GetMaxScrollOffset");
static_assert(offsetof(EndVirtualScrollBox_GetMaxScrollOffset, ReturnValue) == 0x000000, "Member 'EndVirtualScrollBox_GetMaxScrollOffset::ReturnValue' has a wrong offset!");

// Function EndGame.EndVirtualScrollBox.GetScrollBarVisibility
// 0x0001 (0x0001 - 0x0000)
struct EndVirtualScrollBox_GetScrollBarVisibility final
{
public:
	ESlateVisibility                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndVirtualScrollBox_GetScrollBarVisibility) == 0x000001, "Wrong alignment on EndVirtualScrollBox_GetScrollBarVisibility");
static_assert(sizeof(EndVirtualScrollBox_GetScrollBarVisibility) == 0x000001, "Wrong size on EndVirtualScrollBox_GetScrollBarVisibility");
static_assert(offsetof(EndVirtualScrollBox_GetScrollBarVisibility, ReturnValue) == 0x000000, "Member 'EndVirtualScrollBox_GetScrollBarVisibility::ReturnValue' has a wrong offset!");

// Function EndGame.EndVirtualScrollBox.GetScrollOffset
// 0x0004 (0x0004 - 0x0000)
struct EndVirtualScrollBox_GetScrollOffset final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndVirtualScrollBox_GetScrollOffset) == 0x000004, "Wrong alignment on EndVirtualScrollBox_GetScrollOffset");
static_assert(sizeof(EndVirtualScrollBox_GetScrollOffset) == 0x000004, "Wrong size on EndVirtualScrollBox_GetScrollOffset");
static_assert(offsetof(EndVirtualScrollBox_GetScrollOffset, ReturnValue) == 0x000000, "Member 'EndVirtualScrollBox_GetScrollOffset::ReturnValue' has a wrong offset!");

// Function EndGame.EndVirtualScrollBox.GetSelectedIndex
// 0x0008 (0x0008 - 0x0000)
struct EndVirtualScrollBox_GetSelectedIndex final
{
public:
	int32                                         UserIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndVirtualScrollBox_GetSelectedIndex) == 0x000004, "Wrong alignment on EndVirtualScrollBox_GetSelectedIndex");
static_assert(sizeof(EndVirtualScrollBox_GetSelectedIndex) == 0x000008, "Wrong size on EndVirtualScrollBox_GetSelectedIndex");
static_assert(offsetof(EndVirtualScrollBox_GetSelectedIndex, UserIndex) == 0x000000, "Member 'EndVirtualScrollBox_GetSelectedIndex::UserIndex' has a wrong offset!");
static_assert(offsetof(EndVirtualScrollBox_GetSelectedIndex, ReturnValue) == 0x000004, "Member 'EndVirtualScrollBox_GetSelectedIndex::ReturnValue' has a wrong offset!");

}

