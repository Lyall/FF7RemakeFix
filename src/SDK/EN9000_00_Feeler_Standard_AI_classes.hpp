#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: EN9000_00_Feeler_Standard_AI

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "EndGame_structs.hpp"
#include "EndGame_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass EN9000_00_Feeler_Standard_AI.EN9000_00_Feeler_Standard_AI_C
// 0x0090 (0x2340 - 0x22B0)
class AEN9000_00_Feeler_Standard_AI_C final : public AEndBattleAIEN9000Controller
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x22B0(0x0008)(Transient, DuplicateTransient)
	class UEndAITimerComponent*                   EndAITimer_EN9000_00;                              // 0x22B8(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	int32                                         RatioCombat;                                       // 0x22C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RatioWondering;                                    // 0x22C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                MovePoint;                                         // 0x22C8(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         EnableAddWaveNum;                                  // 0x22D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ReinforceNumMax;                                   // 0x22D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         AtkThresholdATB;                                   // 0x22DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DefaultConfront;                                   // 0x22E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DefaultFrontMax;                                   // 0x22E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DefaultFrontAcc;                                   // 0x22E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RunModeConfront;                                   // 0x22EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RunModeFrontMax;                                   // 0x22F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RunModeFrontAcc;                                   // 0x22F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AtkModeConfront;                                   // 0x22F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ForceAttackCount;                                  // 0x22FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ForceAttackCountMax;                               // 0x2300(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Step0_LineDefence;                                 // 0x2304(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Step1_Default;                                     // 0x2308(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Step2_CheckWondering;                              // 0x230C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SubStep1_Wondering;                                // 0x2310(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SubStep2_Prowl;                                    // 0x2314(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SubStep3_Arround;                                  // 0x2318(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Step5_ForceAttack;                                 // 0x231C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Step6_Boids;                                       // 0x2320(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Step9_BtlFinish;                                   // 0x2324(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          StopReinforce;                                     // 0x2328(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2329[0x3];                                     // 0x2329(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CurrentStepNum;                                    // 0x232C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReadyForAtkSting;                                  // 0x2330(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2331[0x3];                                     // 0x2331(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RageStock;                                         // 0x2334(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RageBorder;                                        // 0x2338(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Btsc015_1stVortex;                                 // 0x233C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          HitSuccess_StandByGraviton;                        // 0x233D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_EN9000_00_Feeler_Standard_AI(int32 EntryPoint);
	void OnMotionMessage(class FName InMotionName, class FName InName, int32 InIntValue, float InFloatValue);
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void RetryReinforce();
	void OnDestroyDamageSource(const class FName& DamageSourceID, const struct FVector& Location);
	void SuspendGraviton();
	void OnUpdate(EEndAiBattleRole InRole, int32 InStep, float DeltaTime);
	void OnKilled(int32 Damage, class AEndCharacter* InTarget, class FName InName, bool InBind);
	void VortexSupplement();
	void OnBurstEnd(bool instant);
	void OnBurstBegin();
	void OnEntryBattleScene();
	void OrderStandByVortex();
	void OnInterceptAbility(class FName InName);
	void OnMetaEventTakeDamage(int32 Damage, class AEndCharacter* InSender, class AEndCharacter* InReceiver, class FName InName, bool InBind, bool InGuard, bool InDodge, class FName InBoneName, bool InAttributeWeak, bool InHeal);
	void OnEventRemoveWeakCondition(EEndBattleWeakConditionType ConditionType);
	void OnEventAddWeakCondition(EEndBattleWeakConditionType ConditionType);
	void ClearRagePow();
	void OnTakeDamageOnce(class AEndCharacter* InCauserChara, class FName InAbilityID, bool InAttributeWeak, EEndBattleAbilityCommandType AbilityCommandType);
	void NextOnUpdate();
	void OnMotionStateMessageBegin(class FName InMotionName, class FName InName, int32 InIntValue, float InFloatValue, float InTotalDuration);
	void OnSuspendAbility(class FName InName, EEndAiAbilitySuspendFactor InFactor, EEndAiAbilitySuspendTiming InTiming);
	void DoAtkSting01();
	void FinishVortex();
	void RushMode_AtkCling();
	void OnFinishDispacher(class FName InName);
	void ReadyToBattleFinish();
	void OnCompleteAbility(class FName InName);
	void OnGiveDamage(int32 Damage, class AEndCharacter* InTarget, class FName InName, bool InBind, bool InGuard, bool InJustGuard, bool KeepOver, bool InDodge, bool InCounter, class FName InBoneName, bool InAttributeWeak, class FName InDamageSourceID, bool InSteal, bool heal);
	void OnMetaMessage(const class FString& InMessage);
	void OnMetaMessageAboutCharacter(class AEndCharacter* InChara, const class FString& InMessage);
	void OnSyncActionChange(const class FName& syncActionID, const class FName& ChangeID, const class FName& DetachDamageSourceID);
	void LoopBreak();
	void OnDead(bool AtBurst);
	void OnFirstUpdate(EEndAiBattleRole InRole, int32 InStep);
	void OnChangeStep(int32 InStep);
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"EN9000_00_Feeler_Standard_AI_C">();
	}
	static class AEN9000_00_Feeler_Standard_AI_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AEN9000_00_Feeler_Standard_AI_C>();
	}
};
static_assert(alignof(AEN9000_00_Feeler_Standard_AI_C) == 0x000008, "Wrong alignment on AEN9000_00_Feeler_Standard_AI_C");
static_assert(sizeof(AEN9000_00_Feeler_Standard_AI_C) == 0x002340, "Wrong size on AEN9000_00_Feeler_Standard_AI_C");
static_assert(offsetof(AEN9000_00_Feeler_Standard_AI_C, UberGraphFrame) == 0x0022B0, "Member 'AEN9000_00_Feeler_Standard_AI_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AEN9000_00_Feeler_Standard_AI_C, EndAITimer_EN9000_00) == 0x0022B8, "Member 'AEN9000_00_Feeler_Standard_AI_C::EndAITimer_EN9000_00' has a wrong offset!");
static_assert(offsetof(AEN9000_00_Feeler_Standard_AI_C, RatioCombat) == 0x0022C0, "Member 'AEN9000_00_Feeler_Standard_AI_C::RatioCombat' has a wrong offset!");
static_assert(offsetof(AEN9000_00_Feeler_Standard_AI_C, RatioWondering) == 0x0022C4, "Member 'AEN9000_00_Feeler_Standard_AI_C::RatioWondering' has a wrong offset!");
static_assert(offsetof(AEN9000_00_Feeler_Standard_AI_C, MovePoint) == 0x0022C8, "Member 'AEN9000_00_Feeler_Standard_AI_C::MovePoint' has a wrong offset!");
static_assert(offsetof(AEN9000_00_Feeler_Standard_AI_C, EnableAddWaveNum) == 0x0022D4, "Member 'AEN9000_00_Feeler_Standard_AI_C::EnableAddWaveNum' has a wrong offset!");
static_assert(offsetof(AEN9000_00_Feeler_Standard_AI_C, ReinforceNumMax) == 0x0022D8, "Member 'AEN9000_00_Feeler_Standard_AI_C::ReinforceNumMax' has a wrong offset!");
static_assert(offsetof(AEN9000_00_Feeler_Standard_AI_C, AtkThresholdATB) == 0x0022DC, "Member 'AEN9000_00_Feeler_Standard_AI_C::AtkThresholdATB' has a wrong offset!");
static_assert(offsetof(AEN9000_00_Feeler_Standard_AI_C, DefaultConfront) == 0x0022E0, "Member 'AEN9000_00_Feeler_Standard_AI_C::DefaultConfront' has a wrong offset!");
static_assert(offsetof(AEN9000_00_Feeler_Standard_AI_C, DefaultFrontMax) == 0x0022E4, "Member 'AEN9000_00_Feeler_Standard_AI_C::DefaultFrontMax' has a wrong offset!");
static_assert(offsetof(AEN9000_00_Feeler_Standard_AI_C, DefaultFrontAcc) == 0x0022E8, "Member 'AEN9000_00_Feeler_Standard_AI_C::DefaultFrontAcc' has a wrong offset!");
static_assert(offsetof(AEN9000_00_Feeler_Standard_AI_C, RunModeConfront) == 0x0022EC, "Member 'AEN9000_00_Feeler_Standard_AI_C::RunModeConfront' has a wrong offset!");
static_assert(offsetof(AEN9000_00_Feeler_Standard_AI_C, RunModeFrontMax) == 0x0022F0, "Member 'AEN9000_00_Feeler_Standard_AI_C::RunModeFrontMax' has a wrong offset!");
static_assert(offsetof(AEN9000_00_Feeler_Standard_AI_C, RunModeFrontAcc) == 0x0022F4, "Member 'AEN9000_00_Feeler_Standard_AI_C::RunModeFrontAcc' has a wrong offset!");
static_assert(offsetof(AEN9000_00_Feeler_Standard_AI_C, AtkModeConfront) == 0x0022F8, "Member 'AEN9000_00_Feeler_Standard_AI_C::AtkModeConfront' has a wrong offset!");
static_assert(offsetof(AEN9000_00_Feeler_Standard_AI_C, ForceAttackCount) == 0x0022FC, "Member 'AEN9000_00_Feeler_Standard_AI_C::ForceAttackCount' has a wrong offset!");
static_assert(offsetof(AEN9000_00_Feeler_Standard_AI_C, ForceAttackCountMax) == 0x002300, "Member 'AEN9000_00_Feeler_Standard_AI_C::ForceAttackCountMax' has a wrong offset!");
static_assert(offsetof(AEN9000_00_Feeler_Standard_AI_C, Step0_LineDefence) == 0x002304, "Member 'AEN9000_00_Feeler_Standard_AI_C::Step0_LineDefence' has a wrong offset!");
static_assert(offsetof(AEN9000_00_Feeler_Standard_AI_C, Step1_Default) == 0x002308, "Member 'AEN9000_00_Feeler_Standard_AI_C::Step1_Default' has a wrong offset!");
static_assert(offsetof(AEN9000_00_Feeler_Standard_AI_C, Step2_CheckWondering) == 0x00230C, "Member 'AEN9000_00_Feeler_Standard_AI_C::Step2_CheckWondering' has a wrong offset!");
static_assert(offsetof(AEN9000_00_Feeler_Standard_AI_C, SubStep1_Wondering) == 0x002310, "Member 'AEN9000_00_Feeler_Standard_AI_C::SubStep1_Wondering' has a wrong offset!");
static_assert(offsetof(AEN9000_00_Feeler_Standard_AI_C, SubStep2_Prowl) == 0x002314, "Member 'AEN9000_00_Feeler_Standard_AI_C::SubStep2_Prowl' has a wrong offset!");
static_assert(offsetof(AEN9000_00_Feeler_Standard_AI_C, SubStep3_Arround) == 0x002318, "Member 'AEN9000_00_Feeler_Standard_AI_C::SubStep3_Arround' has a wrong offset!");
static_assert(offsetof(AEN9000_00_Feeler_Standard_AI_C, Step5_ForceAttack) == 0x00231C, "Member 'AEN9000_00_Feeler_Standard_AI_C::Step5_ForceAttack' has a wrong offset!");
static_assert(offsetof(AEN9000_00_Feeler_Standard_AI_C, Step6_Boids) == 0x002320, "Member 'AEN9000_00_Feeler_Standard_AI_C::Step6_Boids' has a wrong offset!");
static_assert(offsetof(AEN9000_00_Feeler_Standard_AI_C, Step9_BtlFinish) == 0x002324, "Member 'AEN9000_00_Feeler_Standard_AI_C::Step9_BtlFinish' has a wrong offset!");
static_assert(offsetof(AEN9000_00_Feeler_Standard_AI_C, StopReinforce) == 0x002328, "Member 'AEN9000_00_Feeler_Standard_AI_C::StopReinforce' has a wrong offset!");
static_assert(offsetof(AEN9000_00_Feeler_Standard_AI_C, CurrentStepNum) == 0x00232C, "Member 'AEN9000_00_Feeler_Standard_AI_C::CurrentStepNum' has a wrong offset!");
static_assert(offsetof(AEN9000_00_Feeler_Standard_AI_C, ReadyForAtkSting) == 0x002330, "Member 'AEN9000_00_Feeler_Standard_AI_C::ReadyForAtkSting' has a wrong offset!");
static_assert(offsetof(AEN9000_00_Feeler_Standard_AI_C, RageStock) == 0x002334, "Member 'AEN9000_00_Feeler_Standard_AI_C::RageStock' has a wrong offset!");
static_assert(offsetof(AEN9000_00_Feeler_Standard_AI_C, RageBorder) == 0x002338, "Member 'AEN9000_00_Feeler_Standard_AI_C::RageBorder' has a wrong offset!");
static_assert(offsetof(AEN9000_00_Feeler_Standard_AI_C, Btsc015_1stVortex) == 0x00233C, "Member 'AEN9000_00_Feeler_Standard_AI_C::Btsc015_1stVortex' has a wrong offset!");
static_assert(offsetof(AEN9000_00_Feeler_Standard_AI_C, HitSuccess_StandByGraviton) == 0x00233D, "Member 'AEN9000_00_Feeler_Standard_AI_C::HitSuccess_StandByGraviton' has a wrong offset!");

}

