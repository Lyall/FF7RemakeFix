#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BodyDriverPlugin

#include "Basic.hpp"

#include "BodyDriverPlugin_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class BodyDriverPlugin.BodyDriver_DebugImpulseTuningSet
// 0x0048 (0x0078 - 0x0030)
class UBodyDriver_DebugImpulseTuningSet final : public UDataAsset
{
public:
	float                                         ForceSwitchToAnimTime;                             // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableRandomImpulses;                              // 0x0034(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TreatAsMelee;                                      // 0x0035(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TreatAsExplosion;                                  // 0x0036(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBodyDriverMessageType                        ImpulseType;                                       // 0x0037(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Frequency;                                         // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OnlyApplyOncePerActivation;                        // 0x003C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ApplyWhenInactive;                                 // 0x003D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ApplyWhenUnbalanced;                               // 0x003E(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3F[0x1];                                       // 0x003F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WaitToApplyAfterBalancing;                         // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChanceOfWeakRandomImpulse;                         // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChanceOfStrongRandomImpulse;                       // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChanceOfMeleeMediumRandomImpulse;                  // 0x004C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EeBodyParts                                   PartOverride;                                      // 0x0050(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseOverrideImpulseDirection;                       // 0x0051(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_52[0x2];                                       // 0x0052(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ImpulseDirectionOverride;                          // 0x0054(0x000C)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ImpulseDirectionOverrideTransOffset;               // 0x0060(0x000C)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseLastAppliedImpulse;                             // 0x006C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableClickImpulses;                               // 0x006D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6E[0x2];                                       // 0x006E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ChanceOfWeakClickImpulse;                          // 0x0070(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChanceOfStrongClickImpulse;                        // 0x0074(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BodyDriver_DebugImpulseTuningSet">();
	}
	static class UBodyDriver_DebugImpulseTuningSet* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBodyDriver_DebugImpulseTuningSet>();
	}
};
static_assert(alignof(UBodyDriver_DebugImpulseTuningSet) == 0x000008, "Wrong alignment on UBodyDriver_DebugImpulseTuningSet");
static_assert(sizeof(UBodyDriver_DebugImpulseTuningSet) == 0x000078, "Wrong size on UBodyDriver_DebugImpulseTuningSet");
static_assert(offsetof(UBodyDriver_DebugImpulseTuningSet, ForceSwitchToAnimTime) == 0x000030, "Member 'UBodyDriver_DebugImpulseTuningSet::ForceSwitchToAnimTime' has a wrong offset!");
static_assert(offsetof(UBodyDriver_DebugImpulseTuningSet, EnableRandomImpulses) == 0x000034, "Member 'UBodyDriver_DebugImpulseTuningSet::EnableRandomImpulses' has a wrong offset!");
static_assert(offsetof(UBodyDriver_DebugImpulseTuningSet, TreatAsMelee) == 0x000035, "Member 'UBodyDriver_DebugImpulseTuningSet::TreatAsMelee' has a wrong offset!");
static_assert(offsetof(UBodyDriver_DebugImpulseTuningSet, TreatAsExplosion) == 0x000036, "Member 'UBodyDriver_DebugImpulseTuningSet::TreatAsExplosion' has a wrong offset!");
static_assert(offsetof(UBodyDriver_DebugImpulseTuningSet, ImpulseType) == 0x000037, "Member 'UBodyDriver_DebugImpulseTuningSet::ImpulseType' has a wrong offset!");
static_assert(offsetof(UBodyDriver_DebugImpulseTuningSet, Frequency) == 0x000038, "Member 'UBodyDriver_DebugImpulseTuningSet::Frequency' has a wrong offset!");
static_assert(offsetof(UBodyDriver_DebugImpulseTuningSet, OnlyApplyOncePerActivation) == 0x00003C, "Member 'UBodyDriver_DebugImpulseTuningSet::OnlyApplyOncePerActivation' has a wrong offset!");
static_assert(offsetof(UBodyDriver_DebugImpulseTuningSet, ApplyWhenInactive) == 0x00003D, "Member 'UBodyDriver_DebugImpulseTuningSet::ApplyWhenInactive' has a wrong offset!");
static_assert(offsetof(UBodyDriver_DebugImpulseTuningSet, ApplyWhenUnbalanced) == 0x00003E, "Member 'UBodyDriver_DebugImpulseTuningSet::ApplyWhenUnbalanced' has a wrong offset!");
static_assert(offsetof(UBodyDriver_DebugImpulseTuningSet, WaitToApplyAfterBalancing) == 0x000040, "Member 'UBodyDriver_DebugImpulseTuningSet::WaitToApplyAfterBalancing' has a wrong offset!");
static_assert(offsetof(UBodyDriver_DebugImpulseTuningSet, ChanceOfWeakRandomImpulse) == 0x000044, "Member 'UBodyDriver_DebugImpulseTuningSet::ChanceOfWeakRandomImpulse' has a wrong offset!");
static_assert(offsetof(UBodyDriver_DebugImpulseTuningSet, ChanceOfStrongRandomImpulse) == 0x000048, "Member 'UBodyDriver_DebugImpulseTuningSet::ChanceOfStrongRandomImpulse' has a wrong offset!");
static_assert(offsetof(UBodyDriver_DebugImpulseTuningSet, ChanceOfMeleeMediumRandomImpulse) == 0x00004C, "Member 'UBodyDriver_DebugImpulseTuningSet::ChanceOfMeleeMediumRandomImpulse' has a wrong offset!");
static_assert(offsetof(UBodyDriver_DebugImpulseTuningSet, PartOverride) == 0x000050, "Member 'UBodyDriver_DebugImpulseTuningSet::PartOverride' has a wrong offset!");
static_assert(offsetof(UBodyDriver_DebugImpulseTuningSet, UseOverrideImpulseDirection) == 0x000051, "Member 'UBodyDriver_DebugImpulseTuningSet::UseOverrideImpulseDirection' has a wrong offset!");
static_assert(offsetof(UBodyDriver_DebugImpulseTuningSet, ImpulseDirectionOverride) == 0x000054, "Member 'UBodyDriver_DebugImpulseTuningSet::ImpulseDirectionOverride' has a wrong offset!");
static_assert(offsetof(UBodyDriver_DebugImpulseTuningSet, ImpulseDirectionOverrideTransOffset) == 0x000060, "Member 'UBodyDriver_DebugImpulseTuningSet::ImpulseDirectionOverrideTransOffset' has a wrong offset!");
static_assert(offsetof(UBodyDriver_DebugImpulseTuningSet, UseLastAppliedImpulse) == 0x00006C, "Member 'UBodyDriver_DebugImpulseTuningSet::UseLastAppliedImpulse' has a wrong offset!");
static_assert(offsetof(UBodyDriver_DebugImpulseTuningSet, EnableClickImpulses) == 0x00006D, "Member 'UBodyDriver_DebugImpulseTuningSet::EnableClickImpulses' has a wrong offset!");
static_assert(offsetof(UBodyDriver_DebugImpulseTuningSet, ChanceOfWeakClickImpulse) == 0x000070, "Member 'UBodyDriver_DebugImpulseTuningSet::ChanceOfWeakClickImpulse' has a wrong offset!");
static_assert(offsetof(UBodyDriver_DebugImpulseTuningSet, ChanceOfStrongClickImpulse) == 0x000074, "Member 'UBodyDriver_DebugImpulseTuningSet::ChanceOfStrongClickImpulse' has a wrong offset!");

// Class BodyDriverPlugin.InputObject_BodyDriver
// 0x0008 (0x0030 - 0x0028)
class UInputObject_BodyDriver final : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InputObject_BodyDriver">();
	}
	static class UInputObject_BodyDriver* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInputObject_BodyDriver>();
	}
};
static_assert(alignof(UInputObject_BodyDriver) == 0x000008, "Wrong alignment on UInputObject_BodyDriver");
static_assert(sizeof(UInputObject_BodyDriver) == 0x000030, "Wrong size on UInputObject_BodyDriver");

// Class BodyDriverPlugin.BodyDriver_BipedFallTuningSet
// 0x2100 (0x2130 - 0x0030)
class UBodyDriver_BipedFallTuningSet final : public UDataAsset
{
public:
	bool                                          OnlyUseSimpleRagdollMode;                          // 0x0030(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FallenRagdollFriction;                             // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TrackDeathAnimationWhenSimpleRagdoll;              // 0x0038(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinActivationTime;                                 // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxActivationTime;                                 // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InitialTrackingStrength;                           // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TrackingStrengthBlendoutTime;                      // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InitialToMidDampingBlendTime;                      // 0x004C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MidToFinalDampingBlendTime;                        // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InitialDamping;                                    // 0x0054(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MidDamping;                                        // 0x0058(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FinalDamping;                                      // 0x005C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DisableAllHandlingBesidesStiffnessAndDamping;      // 0x0060(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FallenMaxHipToFootDistMult;                        // 0x0064(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FallenAnkleLimitRatio;                             // 0x0068(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FallenNeckLimitRatio;                              // 0x006C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NeckDampingMult;                                   // 0x0070(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ExtendElbowsWhenFallen;                            // 0x0074(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_75[0x3];                                       // 0x0075(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ShoulderLimitOpenRatioWhenFallen;                  // 0x0078(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PushHandsAwayFromChest;                            // 0x007C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ExtendSpineNeckHips;                               // 0x007D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AvoidFlayedArms;                                   // 0x007E(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CorrectShoulder;                                   // 0x007F(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FExplosion                             MediumExplosionData;                               // 0x0080(0x0348)(Edit, NativeAccessSpecifierPublic)
	struct FExplosion                             LaunchSmallCloseData;                              // 0x03C8(0x0348)(Edit, NativeAccessSpecifierPublic)
	struct FExplosion                             LaunchSmallFarData;                                // 0x0710(0x0348)(Edit, NativeAccessSpecifierPublic)
	struct FExplosion                             BlowSmallCloseData;                                // 0x0A58(0x0348)(Edit, NativeAccessSpecifierPublic)
	struct FExplosion                             BlowSmallFarData;                                  // 0x0DA0(0x0348)(Edit, NativeAccessSpecifierPublic)
	struct FExplosion                             StrikeData;                                        // 0x10E8(0x0348)(Edit, NativeAccessSpecifierPublic)
	struct FExplosion                             FallFromBikeData;                                  // 0x1430(0x0348)(Edit, NativeAccessSpecifierPublic)
	float                                         RangeLimWindmill;                                  // 0x1778(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WeightWindmill;                                    // 0x177C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WindmillRampUpTime;                                // 0x1780(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StiffnessWindmill;                                 // 0x1784(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WindmillJointSpeed;                                // 0x1788(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotationSpeedWindmill;                             // 0x178C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistWindmill;                                      // 0x1790(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RadWindmill;                                       // 0x1794(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ForwardOffsetWindmill;                             // 0x1798(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UpOffsetWindmill;                                  // 0x179C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WindmillMaxLengthRatio;                            // 0x17A0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExplosionLegsStartTime;                            // 0x17A4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExplosionLegsRampUpTime;                           // 0x17A8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExplosionLegsStiffness;                            // 0x17AC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExplosionLegsJointSpeed;                           // 0x17B0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExplosionLegsFrontDistance;                        // 0x17B4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExplosionLegsBackDistance;                         // 0x17B8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExplosionLegsSideDistance;                         // 0x17BC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExplosionLegsDownDistance;                         // 0x17C0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExplosionLegsKickSpeed;                            // 0x17C4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExplosionTrackingStiffness;                        // 0x17C8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExplosionSpineStiffness;                           // 0x17CC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExplosionStartRampTime;                            // 0x17D0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExplosionRampDuration;                             // 0x17D4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExplosionTotalAngleChange;                         // 0x17D8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17DC[0x4];                                     // 0x17DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FImpulse                               OverrideFallImpulseData;                           // 0x17E0(0x0160)(Edit, NativeAccessSpecifierPublic)
	struct FImpulse                               OverrideFallImpulseDataBullet;                     // 0x1940(0x0160)(Edit, NativeAccessSpecifierPublic)
	struct FExplosion                             ExplosionDataForMelee;                             // 0x1AA0(0x0348)(Edit, NativeAccessSpecifierPublic)
	struct FExplosion                             ExplosionDataForBullet;                            // 0x1DE8(0x0348)(Edit, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BodyDriver_BipedFallTuningSet">();
	}
	static class UBodyDriver_BipedFallTuningSet* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBodyDriver_BipedFallTuningSet>();
	}
};
static_assert(alignof(UBodyDriver_BipedFallTuningSet) == 0x000008, "Wrong alignment on UBodyDriver_BipedFallTuningSet");
static_assert(sizeof(UBodyDriver_BipedFallTuningSet) == 0x002130, "Wrong size on UBodyDriver_BipedFallTuningSet");
static_assert(offsetof(UBodyDriver_BipedFallTuningSet, OnlyUseSimpleRagdollMode) == 0x000030, "Member 'UBodyDriver_BipedFallTuningSet::OnlyUseSimpleRagdollMode' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedFallTuningSet, FallenRagdollFriction) == 0x000034, "Member 'UBodyDriver_BipedFallTuningSet::FallenRagdollFriction' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedFallTuningSet, TrackDeathAnimationWhenSimpleRagdoll) == 0x000038, "Member 'UBodyDriver_BipedFallTuningSet::TrackDeathAnimationWhenSimpleRagdoll' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedFallTuningSet, MinActivationTime) == 0x00003C, "Member 'UBodyDriver_BipedFallTuningSet::MinActivationTime' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedFallTuningSet, MaxActivationTime) == 0x000040, "Member 'UBodyDriver_BipedFallTuningSet::MaxActivationTime' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedFallTuningSet, InitialTrackingStrength) == 0x000044, "Member 'UBodyDriver_BipedFallTuningSet::InitialTrackingStrength' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedFallTuningSet, TrackingStrengthBlendoutTime) == 0x000048, "Member 'UBodyDriver_BipedFallTuningSet::TrackingStrengthBlendoutTime' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedFallTuningSet, InitialToMidDampingBlendTime) == 0x00004C, "Member 'UBodyDriver_BipedFallTuningSet::InitialToMidDampingBlendTime' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedFallTuningSet, MidToFinalDampingBlendTime) == 0x000050, "Member 'UBodyDriver_BipedFallTuningSet::MidToFinalDampingBlendTime' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedFallTuningSet, InitialDamping) == 0x000054, "Member 'UBodyDriver_BipedFallTuningSet::InitialDamping' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedFallTuningSet, MidDamping) == 0x000058, "Member 'UBodyDriver_BipedFallTuningSet::MidDamping' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedFallTuningSet, FinalDamping) == 0x00005C, "Member 'UBodyDriver_BipedFallTuningSet::FinalDamping' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedFallTuningSet, DisableAllHandlingBesidesStiffnessAndDamping) == 0x000060, "Member 'UBodyDriver_BipedFallTuningSet::DisableAllHandlingBesidesStiffnessAndDamping' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedFallTuningSet, FallenMaxHipToFootDistMult) == 0x000064, "Member 'UBodyDriver_BipedFallTuningSet::FallenMaxHipToFootDistMult' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedFallTuningSet, FallenAnkleLimitRatio) == 0x000068, "Member 'UBodyDriver_BipedFallTuningSet::FallenAnkleLimitRatio' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedFallTuningSet, FallenNeckLimitRatio) == 0x00006C, "Member 'UBodyDriver_BipedFallTuningSet::FallenNeckLimitRatio' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedFallTuningSet, NeckDampingMult) == 0x000070, "Member 'UBodyDriver_BipedFallTuningSet::NeckDampingMult' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedFallTuningSet, ExtendElbowsWhenFallen) == 0x000074, "Member 'UBodyDriver_BipedFallTuningSet::ExtendElbowsWhenFallen' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedFallTuningSet, ShoulderLimitOpenRatioWhenFallen) == 0x000078, "Member 'UBodyDriver_BipedFallTuningSet::ShoulderLimitOpenRatioWhenFallen' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedFallTuningSet, PushHandsAwayFromChest) == 0x00007C, "Member 'UBodyDriver_BipedFallTuningSet::PushHandsAwayFromChest' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedFallTuningSet, ExtendSpineNeckHips) == 0x00007D, "Member 'UBodyDriver_BipedFallTuningSet::ExtendSpineNeckHips' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedFallTuningSet, AvoidFlayedArms) == 0x00007E, "Member 'UBodyDriver_BipedFallTuningSet::AvoidFlayedArms' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedFallTuningSet, CorrectShoulder) == 0x00007F, "Member 'UBodyDriver_BipedFallTuningSet::CorrectShoulder' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedFallTuningSet, MediumExplosionData) == 0x000080, "Member 'UBodyDriver_BipedFallTuningSet::MediumExplosionData' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedFallTuningSet, LaunchSmallCloseData) == 0x0003C8, "Member 'UBodyDriver_BipedFallTuningSet::LaunchSmallCloseData' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedFallTuningSet, LaunchSmallFarData) == 0x000710, "Member 'UBodyDriver_BipedFallTuningSet::LaunchSmallFarData' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedFallTuningSet, BlowSmallCloseData) == 0x000A58, "Member 'UBodyDriver_BipedFallTuningSet::BlowSmallCloseData' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedFallTuningSet, BlowSmallFarData) == 0x000DA0, "Member 'UBodyDriver_BipedFallTuningSet::BlowSmallFarData' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedFallTuningSet, StrikeData) == 0x0010E8, "Member 'UBodyDriver_BipedFallTuningSet::StrikeData' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedFallTuningSet, FallFromBikeData) == 0x001430, "Member 'UBodyDriver_BipedFallTuningSet::FallFromBikeData' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedFallTuningSet, RangeLimWindmill) == 0x001778, "Member 'UBodyDriver_BipedFallTuningSet::RangeLimWindmill' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedFallTuningSet, WeightWindmill) == 0x00177C, "Member 'UBodyDriver_BipedFallTuningSet::WeightWindmill' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedFallTuningSet, WindmillRampUpTime) == 0x001780, "Member 'UBodyDriver_BipedFallTuningSet::WindmillRampUpTime' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedFallTuningSet, StiffnessWindmill) == 0x001784, "Member 'UBodyDriver_BipedFallTuningSet::StiffnessWindmill' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedFallTuningSet, WindmillJointSpeed) == 0x001788, "Member 'UBodyDriver_BipedFallTuningSet::WindmillJointSpeed' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedFallTuningSet, RotationSpeedWindmill) == 0x00178C, "Member 'UBodyDriver_BipedFallTuningSet::RotationSpeedWindmill' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedFallTuningSet, DistWindmill) == 0x001790, "Member 'UBodyDriver_BipedFallTuningSet::DistWindmill' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedFallTuningSet, RadWindmill) == 0x001794, "Member 'UBodyDriver_BipedFallTuningSet::RadWindmill' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedFallTuningSet, ForwardOffsetWindmill) == 0x001798, "Member 'UBodyDriver_BipedFallTuningSet::ForwardOffsetWindmill' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedFallTuningSet, UpOffsetWindmill) == 0x00179C, "Member 'UBodyDriver_BipedFallTuningSet::UpOffsetWindmill' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedFallTuningSet, WindmillMaxLengthRatio) == 0x0017A0, "Member 'UBodyDriver_BipedFallTuningSet::WindmillMaxLengthRatio' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedFallTuningSet, ExplosionLegsStartTime) == 0x0017A4, "Member 'UBodyDriver_BipedFallTuningSet::ExplosionLegsStartTime' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedFallTuningSet, ExplosionLegsRampUpTime) == 0x0017A8, "Member 'UBodyDriver_BipedFallTuningSet::ExplosionLegsRampUpTime' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedFallTuningSet, ExplosionLegsStiffness) == 0x0017AC, "Member 'UBodyDriver_BipedFallTuningSet::ExplosionLegsStiffness' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedFallTuningSet, ExplosionLegsJointSpeed) == 0x0017B0, "Member 'UBodyDriver_BipedFallTuningSet::ExplosionLegsJointSpeed' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedFallTuningSet, ExplosionLegsFrontDistance) == 0x0017B4, "Member 'UBodyDriver_BipedFallTuningSet::ExplosionLegsFrontDistance' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedFallTuningSet, ExplosionLegsBackDistance) == 0x0017B8, "Member 'UBodyDriver_BipedFallTuningSet::ExplosionLegsBackDistance' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedFallTuningSet, ExplosionLegsSideDistance) == 0x0017BC, "Member 'UBodyDriver_BipedFallTuningSet::ExplosionLegsSideDistance' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedFallTuningSet, ExplosionLegsDownDistance) == 0x0017C0, "Member 'UBodyDriver_BipedFallTuningSet::ExplosionLegsDownDistance' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedFallTuningSet, ExplosionLegsKickSpeed) == 0x0017C4, "Member 'UBodyDriver_BipedFallTuningSet::ExplosionLegsKickSpeed' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedFallTuningSet, ExplosionTrackingStiffness) == 0x0017C8, "Member 'UBodyDriver_BipedFallTuningSet::ExplosionTrackingStiffness' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedFallTuningSet, ExplosionSpineStiffness) == 0x0017CC, "Member 'UBodyDriver_BipedFallTuningSet::ExplosionSpineStiffness' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedFallTuningSet, ExplosionStartRampTime) == 0x0017D0, "Member 'UBodyDriver_BipedFallTuningSet::ExplosionStartRampTime' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedFallTuningSet, ExplosionRampDuration) == 0x0017D4, "Member 'UBodyDriver_BipedFallTuningSet::ExplosionRampDuration' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedFallTuningSet, ExplosionTotalAngleChange) == 0x0017D8, "Member 'UBodyDriver_BipedFallTuningSet::ExplosionTotalAngleChange' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedFallTuningSet, OverrideFallImpulseData) == 0x0017E0, "Member 'UBodyDriver_BipedFallTuningSet::OverrideFallImpulseData' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedFallTuningSet, OverrideFallImpulseDataBullet) == 0x001940, "Member 'UBodyDriver_BipedFallTuningSet::OverrideFallImpulseDataBullet' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedFallTuningSet, ExplosionDataForMelee) == 0x001AA0, "Member 'UBodyDriver_BipedFallTuningSet::ExplosionDataForMelee' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedFallTuningSet, ExplosionDataForBullet) == 0x001DE8, "Member 'UBodyDriver_BipedFallTuningSet::ExplosionDataForBullet' has a wrong offset!");

// Class BodyDriverPlugin.BodyDriver_BipedBalanceTuningSet
// 0x0E00 (0x0E30 - 0x0030)
class UBodyDriver_BipedBalanceTuningSet final : public UDataAsset
{
public:
	struct FImpulse                               PushImpulseData;                                   // 0x0030(0x0160)(Edit, NativeAccessSpecifierPublic)
	struct FImpulse                               WeakImpulseData;                                   // 0x0190(0x0160)(Edit, NativeAccessSpecifierPublic)
	struct FImpulse                               MediumImpulseData;                                 // 0x02F0(0x0160)(Edit, NativeAccessSpecifierPublic)
	struct FImpulse                               StrongImpulseData;                                 // 0x0450(0x0160)(Edit, NativeAccessSpecifierPublic)
	struct FImpulse                               RunningImpulseData;                                // 0x05B0(0x0160)(Edit, NativeAccessSpecifierPublic)
	struct FImpulse                               MediumMeleeImpulseData;                            // 0x0710(0x0160)(Edit, NativeAccessSpecifierPublic)
	struct FImpulse                               RunningMeleeImpulseData;                           // 0x0870(0x0160)(Edit, NativeAccessSpecifierPublic)
	float                                         COMVelFac;                                         // 0x09D0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseRampedCOMVelFac;                                // 0x09D4(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9D5[0x3];                                      // 0x09D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SideMultMin;                                       // 0x09D8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HipHeightBlendRate;                                // 0x09DC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngMagClampBoth;                                   // 0x09E0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngMagClampPlanar;                                 // 0x09E4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LinMagClampBoth;                                   // 0x09E8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinDistPelvis;                                     // 0x09EC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDistPelvis;                                     // 0x09F0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LinUPMagClampBoth;                                 // 0x09F4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LinUPMagMaxClampBoth;                              // 0x09F8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LindampingMoving;                                  // 0x09FC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LinUPdampingMoving;                                // 0x0A00(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PelvisSpaceGoalUPClampDistMax;                     // 0x0A04(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PelvisSpaceGoalPlanarClampDist;                    // 0x0A08(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FootLandCompression;                               // 0x0A0C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BoostHipOffset;                                    // 0x0A10(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxHipHeightOffset;                                // 0x0A14(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FacingBasedOnVelMinSpeed;                          // 0x0A18(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReduceDampingFightingDesiredDirection;             // 0x0A1C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IncreaseDampingOverTime;                           // 0x0A1D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A1E[0x2];                                      // 0x0A1E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StaggerRiseClamp;                                  // 0x0A20(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StaggerRiseClampSwinging;                          // 0x0A24(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StaggerRiseClampTwistedAndBehind;                  // 0x0A28(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StaggerRiseClampWoundedLeg;                        // 0x0A2C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StaggerUltimateFacingDirectionMagBothPlanted;      // 0x0A30(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StaggerUltimateFacingDirectionMagSwinging;         // 0x0A34(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxErrorStepNeutral;                               // 0x0A38(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShortestPlantMax;                                  // 0x0A3C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WaitTimeBetweenLiftPreps;                          // 0x0A40(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RequiredPlantedFeet;                               // 0x0A44(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxPhaseComputeStep;                               // 0x0A48(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinPhaseComputeStep;                               // 0x0A4C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RootPartSideOffset;                                // 0x0A50(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BufftopRange;                                      // 0x0A54(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BuffbottomRange;                                   // 0x0A58(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BufftopVal;                                        // 0x0A5C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BuffbottomVal;                                     // 0x0A60(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BuffAdditive;                                      // 0x0A64(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxErrorStepNeutralActual;                         // 0x0A68(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FinalStepSpeedThresh;                              // 0x0A6C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReducedSwingTimeMult;                              // 0x0A70(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RangeContinueStep;                                 // 0x0A74(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StepCCDWeight;                                     // 0x0A78(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StepHeight;                                        // 0x0A7C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StepTime;                                          // 0x0A80(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StepDist;                                          // 0x0A84(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SwingStiffness;                                    // 0x0A88(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SwingStiffnessFinal;                               // 0x0A8C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlantStiffness;                                    // 0x0A90(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendInTime;                                       // 0x0A94(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendTimeHeight;                                   // 0x0A98(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendInTimeFinalMult;                              // 0x0A9C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendInTimeAnkle;                                  // 0x0AA0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NeutralStanceDistanceMult;                         // 0x0AA4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PostImpulseStepSpeedMult;                          // 0x0AA8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IncreaseStanceBlendTimeDueToBodyAngle;             // 0x0AAC(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AAD[0x3];                                      // 0x0AAD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxAllowedFootTiltAngle;                           // 0x0AB0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WaitBeforeSteppingAfterImpulse;                    // 0x0AB4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CircleSizeOtherFoot;                               // 0x0AB8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlantedFootUnintentionallyLiftedMaxTime;           // 0x0ABC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReducePlantedStiffnessAsTimePassesForceFall;       // 0x0AC0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AC1[0x3];                                      // 0x0AC1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReducePlantedStiffnessAsTimePassesForceFallBlendTime; // 0x0AC4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReducePlantedStiffnessAsTimePassesForceFallFinalMult; // 0x0AC8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IncreaseBlendTimeAsTimePassesForceFallBottomRange; // 0x0ACC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IncreaseBlendTimeAsTimePassesForceFallTopRange;    // 0x0AD0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IncreaseBlendTimeAsTimePassesForceFallTopVal;      // 0x0AD4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         COMControlStiffnessBalanced;                       // 0x0AD8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         COMControlCurrentPoseStrength;                     // 0x0ADC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         COMControlLinMagCap;                               // 0x0AE0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RangeLimWindmillSingle;                            // 0x0AE4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RangeLimWindmillBoth;                              // 0x0AE8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ClampWindmillMin;                                  // 0x0AEC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ClampWindmillMax;                                  // 0x0AF0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WeightWindmill;                                    // 0x0AF4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UseStiffnessWindmill;                              // 0x0AF8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MultWindmill;                                      // 0x0AFC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistWindmill;                                      // 0x0B00(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RadWindmill;                                       // 0x0B04(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ForwardOffsetWindmill;                             // 0x0B08(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UpOffsetWindmill;                                  // 0x0B0C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WindmillMaxLengthRatio;                            // 0x0B10(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReachForWoundLocalHitPointDistBuffer;              // 0x0B14(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReachForWoundExpandShoulderLimitRatioAfterConstraintMade; // 0x0B18(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReachForWoundExpandWristLimitRatioAfterConstraintMade; // 0x0B1C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReflectSpineBackWoundsToTheClosestSide;            // 0x0B20(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReachForWoundGrabFrontOfClosestLeg;                // 0x0B21(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForceHeadHitsToReachWithBothHands;                 // 0x0B22(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B23[0x1];                                      // 0x0B23(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ChanceOfDoubleReach;                               // 0x0B24(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReachForWoundUseCOMVelFac;                         // 0x0B28(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReachForWoundExtraSideOffset;                      // 0x0B2C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BraceLenth;                                        // 0x0B30(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DontStopBraceUnlessLowVelocity;                    // 0x0B34(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B35[0x3];                                      // 0x0B35(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BraceOpenWristLimitsRatio;                         // 0x0B38(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BraceFacingDotLim;                                 // 0x0B3C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BraceFacingDotLimBracing;                          // 0x0B40(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BraceSideDotLim;                                   // 0x0B44(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BraceSideDotLimBracing;                            // 0x0B48(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BraceBehinfBackDotLim;                             // 0x0B4C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BraceInitialDelay;                                 // 0x0B50(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DoSavageAttack;                                    // 0x0B54(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SavageAttackUsePitchClamping;                      // 0x0B55(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SavageAttackOffsetsUseSpineDirs;                   // 0x0B56(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B57[0x1];                                      // 0x0B57(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                SavageAttackDebugTarget;                           // 0x0B58(0x000C)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SavageWindupTime;                                  // 0x0B64(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SavageSpringTime;                                  // 0x0B68(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SavageAttackPostWaitTime;                          // 0x0B6C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SavageAttackOtherArmPhaseGoTime;                   // 0x0B70(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SavageAttackDistance;                              // 0x0B74(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SavageAttackConeAngle;                             // 0x0B78(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SavageAttackConeAngleDownAttacks;                  // 0x0B7C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SavageAttackPivotForwardOffset;                    // 0x0B80(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SavageAttackPivotSideOffset;                       // 0x0B84(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SavageAttackPivotUpOffsetMin;                      // 0x0B88(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SavageAttackPivotUpOffsetMax;                      // 0x0B8C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SavageAttackForwardPullbackOffset;                 // 0x0B90(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SavageAttackSidePullbackOffset;                    // 0x0B94(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SavageAttackUpPullbackOffset;                      // 0x0B98(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SavageAttackOverrideArcAngle;                      // 0x0B9C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SavageAttackSpineStiffness;                        // 0x0BA0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SavageAttackSpineSpeed;                            // 0x0BA4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SavageAttackSpineFlattenAxis;                      // 0x0BA8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BA9[0x3];                                      // 0x0BA9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SavageAttackUpPullbackSpeed;                       // 0x0BAC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SavageAttackUpPullbackStiffness;                   // 0x0BB0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SavageAttackUpPullbackWeight;                      // 0x0BB4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SavageAttackUpPullbackBlendRate;                   // 0x0BB8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SavageSpineMaxOffsetAngle;                         // 0x0BBC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SavageSpinePriority;                               // 0x0BC0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SavageMiddleRangeFollowThoughMult;                 // 0x0BC4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SavageAttackWindupBaseWeight;                      // 0x0BC8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PriorityCurrentPose;                               // 0x0BCC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UseStiffnessCurrentPose;                           // 0x0BD0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PriorityTrackingPose;                              // 0x0BD4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UseStiffnessTrackingPose;                          // 0x0BD8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultArmsJointSpeed;                             // 0x0BDC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InitialHeadWeaknessTime;                           // 0x0BE0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InitialSpineWeaknessTime;                          // 0x0BE4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EeBodyParts                                   SpineBalanceEndPartOverride;                       // 0x0BE8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BE9[0x3];                                      // 0x0BE9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HunchStaggerTopRange;                              // 0x0BEC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HunchStaggerBottomRange;                           // 0x0BF0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HunchStaggerTopVal;                                // 0x0BF4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HunchStaggerBottomVal;                             // 0x0BF8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HunchFromCurrentPose;                              // 0x0BFC(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AllowSpineUpright;                                 // 0x0BFD(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BFE[0x2];                                      // 0x0BFE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Headlookdist;                                      // 0x0C00(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HeadlookDistUnbalanced;                            // 0x0C04(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Headlookrange;                                     // 0x0C08(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UseStiffnessHeadLook;                              // 0x0C0C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WeightHeadLook;                                    // 0x0C10(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ClampHeadLook;                                     // 0x0C14(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EeBodyParts                                   HeadLookBasePartOverride;                          // 0x0C18(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AllowLookingAtWound;                               // 0x0C19(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AllowLookingAtBracePoint;                          // 0x0C1A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C1B[0x1];                                      // 0x0C1B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SpeedAlpha;                                        // 0x0C1C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FallenOverAngleFromUpright;                        // 0x0C20(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FallenOverAngleFromUprightInitialBoost;            // 0x0C24(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FallenOverAngleFromUprightInitialBoostTime;        // 0x0C28(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FallToKneesChance;                                 // 0x0C2C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FallToKneesTimeUntilAttempt;                       // 0x0C30(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FallToKneesSwitchToDropTimeout;                    // 0x0C34(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FallToKneesUseStabilizationRegardless;             // 0x0C38(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C39[0x3];                                      // 0x0C39(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FallToKneesErrorToStopStepping;                    // 0x0C3C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FallToKneesAbortBodyAngle;                         // 0x0C40(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C44[0x4];                                      // 0x0C44(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FImpulse                               FallToKneesStabilizationHandling;                  // 0x0C48(0x0160)(Edit, NativeAccessSpecifierPublic)
	float                                         FallToKneesTimeUntilDropMin;                       // 0x0DA8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FallToKneesTimeUntilDropMax;                       // 0x0DAC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FallToKneesTimeUntilFallMin;                       // 0x0DB0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FallToKneesTimeUntilFallMax;                       // 0x0DB4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FallToKneesTimeBalanceRequired;                    // 0x0DB8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FallToKneesPushCOMDistance;                        // 0x0DBC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FallToKneesPushAngle;                              // 0x0DC0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FallToKneesPushMagFall;                            // 0x0DC4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FallToKneesPushTime;                               // 0x0DC8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FallToKneesFinalStrengthRatioArms;                 // 0x0DCC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FallToKneesTimeToHunchBlendout;                    // 0x0DD0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DD4[0x4];                                      // 0x0DD4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EeBodyParts>                           FallToKneesPushIncludeParts;                       // 0x0DD8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          FallToKneesStopStaggerStayUprightIfNotAttemptingKnees; // 0x0DE8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DoRobotPowerDown;                                  // 0x0DE9(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DEA[0x2];                                      // 0x0DEA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ArmsPowerDownStartTime;                            // 0x0DEC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ArmsPowerDownDuration;                             // 0x0DF0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ArmsPowerDownMinStrengthMultiplier;                // 0x0DF4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UpperBodyPowerDownStartTime;                       // 0x0DF8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UpperBodyPowerDownDuration;                        // 0x0DFC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UpperBodyPowerDownMinStrengthMultiplier;           // 0x0E00(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LowerBodyPowerDownStartTime;                       // 0x0E04(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LowerBodyPowerDownDuration;                        // 0x0E08(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LowerBodyPowerDownMinStrengthMultiplier;           // 0x0E0C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AdjustGoalMaxPhase;                                // 0x0E10(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StiffnessBodyAngleRange;                           // 0x0E14(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReducedStiffnessMult;                              // 0x0E18(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         COMShiftLim;                                       // 0x0E1C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RateCOMWeight;                                     // 0x0E20(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LinUPdampingBalanced;                              // 0x0E24(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChangeRate;                                        // 0x0E28(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E2C[0x4];                                      // 0x0E2C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BodyDriver_BipedBalanceTuningSet">();
	}
	static class UBodyDriver_BipedBalanceTuningSet* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBodyDriver_BipedBalanceTuningSet>();
	}
};
static_assert(alignof(UBodyDriver_BipedBalanceTuningSet) == 0x000008, "Wrong alignment on UBodyDriver_BipedBalanceTuningSet");
static_assert(sizeof(UBodyDriver_BipedBalanceTuningSet) == 0x000E30, "Wrong size on UBodyDriver_BipedBalanceTuningSet");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, PushImpulseData) == 0x000030, "Member 'UBodyDriver_BipedBalanceTuningSet::PushImpulseData' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, WeakImpulseData) == 0x000190, "Member 'UBodyDriver_BipedBalanceTuningSet::WeakImpulseData' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, MediumImpulseData) == 0x0002F0, "Member 'UBodyDriver_BipedBalanceTuningSet::MediumImpulseData' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, StrongImpulseData) == 0x000450, "Member 'UBodyDriver_BipedBalanceTuningSet::StrongImpulseData' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, RunningImpulseData) == 0x0005B0, "Member 'UBodyDriver_BipedBalanceTuningSet::RunningImpulseData' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, MediumMeleeImpulseData) == 0x000710, "Member 'UBodyDriver_BipedBalanceTuningSet::MediumMeleeImpulseData' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, RunningMeleeImpulseData) == 0x000870, "Member 'UBodyDriver_BipedBalanceTuningSet::RunningMeleeImpulseData' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, COMVelFac) == 0x0009D0, "Member 'UBodyDriver_BipedBalanceTuningSet::COMVelFac' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, UseRampedCOMVelFac) == 0x0009D4, "Member 'UBodyDriver_BipedBalanceTuningSet::UseRampedCOMVelFac' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, SideMultMin) == 0x0009D8, "Member 'UBodyDriver_BipedBalanceTuningSet::SideMultMin' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, HipHeightBlendRate) == 0x0009DC, "Member 'UBodyDriver_BipedBalanceTuningSet::HipHeightBlendRate' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, AngMagClampBoth) == 0x0009E0, "Member 'UBodyDriver_BipedBalanceTuningSet::AngMagClampBoth' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, AngMagClampPlanar) == 0x0009E4, "Member 'UBodyDriver_BipedBalanceTuningSet::AngMagClampPlanar' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, LinMagClampBoth) == 0x0009E8, "Member 'UBodyDriver_BipedBalanceTuningSet::LinMagClampBoth' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, MinDistPelvis) == 0x0009EC, "Member 'UBodyDriver_BipedBalanceTuningSet::MinDistPelvis' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, MaxDistPelvis) == 0x0009F0, "Member 'UBodyDriver_BipedBalanceTuningSet::MaxDistPelvis' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, LinUPMagClampBoth) == 0x0009F4, "Member 'UBodyDriver_BipedBalanceTuningSet::LinUPMagClampBoth' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, LinUPMagMaxClampBoth) == 0x0009F8, "Member 'UBodyDriver_BipedBalanceTuningSet::LinUPMagMaxClampBoth' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, LindampingMoving) == 0x0009FC, "Member 'UBodyDriver_BipedBalanceTuningSet::LindampingMoving' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, LinUPdampingMoving) == 0x000A00, "Member 'UBodyDriver_BipedBalanceTuningSet::LinUPdampingMoving' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, PelvisSpaceGoalUPClampDistMax) == 0x000A04, "Member 'UBodyDriver_BipedBalanceTuningSet::PelvisSpaceGoalUPClampDistMax' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, PelvisSpaceGoalPlanarClampDist) == 0x000A08, "Member 'UBodyDriver_BipedBalanceTuningSet::PelvisSpaceGoalPlanarClampDist' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, FootLandCompression) == 0x000A0C, "Member 'UBodyDriver_BipedBalanceTuningSet::FootLandCompression' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, BoostHipOffset) == 0x000A10, "Member 'UBodyDriver_BipedBalanceTuningSet::BoostHipOffset' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, MaxHipHeightOffset) == 0x000A14, "Member 'UBodyDriver_BipedBalanceTuningSet::MaxHipHeightOffset' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, FacingBasedOnVelMinSpeed) == 0x000A18, "Member 'UBodyDriver_BipedBalanceTuningSet::FacingBasedOnVelMinSpeed' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, ReduceDampingFightingDesiredDirection) == 0x000A1C, "Member 'UBodyDriver_BipedBalanceTuningSet::ReduceDampingFightingDesiredDirection' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, IncreaseDampingOverTime) == 0x000A1D, "Member 'UBodyDriver_BipedBalanceTuningSet::IncreaseDampingOverTime' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, StaggerRiseClamp) == 0x000A20, "Member 'UBodyDriver_BipedBalanceTuningSet::StaggerRiseClamp' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, StaggerRiseClampSwinging) == 0x000A24, "Member 'UBodyDriver_BipedBalanceTuningSet::StaggerRiseClampSwinging' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, StaggerRiseClampTwistedAndBehind) == 0x000A28, "Member 'UBodyDriver_BipedBalanceTuningSet::StaggerRiseClampTwistedAndBehind' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, StaggerRiseClampWoundedLeg) == 0x000A2C, "Member 'UBodyDriver_BipedBalanceTuningSet::StaggerRiseClampWoundedLeg' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, StaggerUltimateFacingDirectionMagBothPlanted) == 0x000A30, "Member 'UBodyDriver_BipedBalanceTuningSet::StaggerUltimateFacingDirectionMagBothPlanted' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, StaggerUltimateFacingDirectionMagSwinging) == 0x000A34, "Member 'UBodyDriver_BipedBalanceTuningSet::StaggerUltimateFacingDirectionMagSwinging' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, MaxErrorStepNeutral) == 0x000A38, "Member 'UBodyDriver_BipedBalanceTuningSet::MaxErrorStepNeutral' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, ShortestPlantMax) == 0x000A3C, "Member 'UBodyDriver_BipedBalanceTuningSet::ShortestPlantMax' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, WaitTimeBetweenLiftPreps) == 0x000A40, "Member 'UBodyDriver_BipedBalanceTuningSet::WaitTimeBetweenLiftPreps' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, RequiredPlantedFeet) == 0x000A44, "Member 'UBodyDriver_BipedBalanceTuningSet::RequiredPlantedFeet' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, MaxPhaseComputeStep) == 0x000A48, "Member 'UBodyDriver_BipedBalanceTuningSet::MaxPhaseComputeStep' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, MinPhaseComputeStep) == 0x000A4C, "Member 'UBodyDriver_BipedBalanceTuningSet::MinPhaseComputeStep' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, RootPartSideOffset) == 0x000A50, "Member 'UBodyDriver_BipedBalanceTuningSet::RootPartSideOffset' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, BufftopRange) == 0x000A54, "Member 'UBodyDriver_BipedBalanceTuningSet::BufftopRange' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, BuffbottomRange) == 0x000A58, "Member 'UBodyDriver_BipedBalanceTuningSet::BuffbottomRange' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, BufftopVal) == 0x000A5C, "Member 'UBodyDriver_BipedBalanceTuningSet::BufftopVal' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, BuffbottomVal) == 0x000A60, "Member 'UBodyDriver_BipedBalanceTuningSet::BuffbottomVal' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, BuffAdditive) == 0x000A64, "Member 'UBodyDriver_BipedBalanceTuningSet::BuffAdditive' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, MaxErrorStepNeutralActual) == 0x000A68, "Member 'UBodyDriver_BipedBalanceTuningSet::MaxErrorStepNeutralActual' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, FinalStepSpeedThresh) == 0x000A6C, "Member 'UBodyDriver_BipedBalanceTuningSet::FinalStepSpeedThresh' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, ReducedSwingTimeMult) == 0x000A70, "Member 'UBodyDriver_BipedBalanceTuningSet::ReducedSwingTimeMult' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, RangeContinueStep) == 0x000A74, "Member 'UBodyDriver_BipedBalanceTuningSet::RangeContinueStep' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, StepCCDWeight) == 0x000A78, "Member 'UBodyDriver_BipedBalanceTuningSet::StepCCDWeight' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, StepHeight) == 0x000A7C, "Member 'UBodyDriver_BipedBalanceTuningSet::StepHeight' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, StepTime) == 0x000A80, "Member 'UBodyDriver_BipedBalanceTuningSet::StepTime' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, StepDist) == 0x000A84, "Member 'UBodyDriver_BipedBalanceTuningSet::StepDist' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, SwingStiffness) == 0x000A88, "Member 'UBodyDriver_BipedBalanceTuningSet::SwingStiffness' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, SwingStiffnessFinal) == 0x000A8C, "Member 'UBodyDriver_BipedBalanceTuningSet::SwingStiffnessFinal' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, PlantStiffness) == 0x000A90, "Member 'UBodyDriver_BipedBalanceTuningSet::PlantStiffness' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, BlendInTime) == 0x000A94, "Member 'UBodyDriver_BipedBalanceTuningSet::BlendInTime' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, BlendTimeHeight) == 0x000A98, "Member 'UBodyDriver_BipedBalanceTuningSet::BlendTimeHeight' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, BlendInTimeFinalMult) == 0x000A9C, "Member 'UBodyDriver_BipedBalanceTuningSet::BlendInTimeFinalMult' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, BlendInTimeAnkle) == 0x000AA0, "Member 'UBodyDriver_BipedBalanceTuningSet::BlendInTimeAnkle' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, NeutralStanceDistanceMult) == 0x000AA4, "Member 'UBodyDriver_BipedBalanceTuningSet::NeutralStanceDistanceMult' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, PostImpulseStepSpeedMult) == 0x000AA8, "Member 'UBodyDriver_BipedBalanceTuningSet::PostImpulseStepSpeedMult' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, IncreaseStanceBlendTimeDueToBodyAngle) == 0x000AAC, "Member 'UBodyDriver_BipedBalanceTuningSet::IncreaseStanceBlendTimeDueToBodyAngle' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, MaxAllowedFootTiltAngle) == 0x000AB0, "Member 'UBodyDriver_BipedBalanceTuningSet::MaxAllowedFootTiltAngle' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, WaitBeforeSteppingAfterImpulse) == 0x000AB4, "Member 'UBodyDriver_BipedBalanceTuningSet::WaitBeforeSteppingAfterImpulse' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, CircleSizeOtherFoot) == 0x000AB8, "Member 'UBodyDriver_BipedBalanceTuningSet::CircleSizeOtherFoot' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, PlantedFootUnintentionallyLiftedMaxTime) == 0x000ABC, "Member 'UBodyDriver_BipedBalanceTuningSet::PlantedFootUnintentionallyLiftedMaxTime' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, ReducePlantedStiffnessAsTimePassesForceFall) == 0x000AC0, "Member 'UBodyDriver_BipedBalanceTuningSet::ReducePlantedStiffnessAsTimePassesForceFall' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, ReducePlantedStiffnessAsTimePassesForceFallBlendTime) == 0x000AC4, "Member 'UBodyDriver_BipedBalanceTuningSet::ReducePlantedStiffnessAsTimePassesForceFallBlendTime' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, ReducePlantedStiffnessAsTimePassesForceFallFinalMult) == 0x000AC8, "Member 'UBodyDriver_BipedBalanceTuningSet::ReducePlantedStiffnessAsTimePassesForceFallFinalMult' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, IncreaseBlendTimeAsTimePassesForceFallBottomRange) == 0x000ACC, "Member 'UBodyDriver_BipedBalanceTuningSet::IncreaseBlendTimeAsTimePassesForceFallBottomRange' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, IncreaseBlendTimeAsTimePassesForceFallTopRange) == 0x000AD0, "Member 'UBodyDriver_BipedBalanceTuningSet::IncreaseBlendTimeAsTimePassesForceFallTopRange' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, IncreaseBlendTimeAsTimePassesForceFallTopVal) == 0x000AD4, "Member 'UBodyDriver_BipedBalanceTuningSet::IncreaseBlendTimeAsTimePassesForceFallTopVal' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, COMControlStiffnessBalanced) == 0x000AD8, "Member 'UBodyDriver_BipedBalanceTuningSet::COMControlStiffnessBalanced' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, COMControlCurrentPoseStrength) == 0x000ADC, "Member 'UBodyDriver_BipedBalanceTuningSet::COMControlCurrentPoseStrength' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, COMControlLinMagCap) == 0x000AE0, "Member 'UBodyDriver_BipedBalanceTuningSet::COMControlLinMagCap' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, RangeLimWindmillSingle) == 0x000AE4, "Member 'UBodyDriver_BipedBalanceTuningSet::RangeLimWindmillSingle' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, RangeLimWindmillBoth) == 0x000AE8, "Member 'UBodyDriver_BipedBalanceTuningSet::RangeLimWindmillBoth' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, ClampWindmillMin) == 0x000AEC, "Member 'UBodyDriver_BipedBalanceTuningSet::ClampWindmillMin' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, ClampWindmillMax) == 0x000AF0, "Member 'UBodyDriver_BipedBalanceTuningSet::ClampWindmillMax' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, WeightWindmill) == 0x000AF4, "Member 'UBodyDriver_BipedBalanceTuningSet::WeightWindmill' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, UseStiffnessWindmill) == 0x000AF8, "Member 'UBodyDriver_BipedBalanceTuningSet::UseStiffnessWindmill' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, MultWindmill) == 0x000AFC, "Member 'UBodyDriver_BipedBalanceTuningSet::MultWindmill' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, DistWindmill) == 0x000B00, "Member 'UBodyDriver_BipedBalanceTuningSet::DistWindmill' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, RadWindmill) == 0x000B04, "Member 'UBodyDriver_BipedBalanceTuningSet::RadWindmill' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, ForwardOffsetWindmill) == 0x000B08, "Member 'UBodyDriver_BipedBalanceTuningSet::ForwardOffsetWindmill' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, UpOffsetWindmill) == 0x000B0C, "Member 'UBodyDriver_BipedBalanceTuningSet::UpOffsetWindmill' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, WindmillMaxLengthRatio) == 0x000B10, "Member 'UBodyDriver_BipedBalanceTuningSet::WindmillMaxLengthRatio' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, ReachForWoundLocalHitPointDistBuffer) == 0x000B14, "Member 'UBodyDriver_BipedBalanceTuningSet::ReachForWoundLocalHitPointDistBuffer' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, ReachForWoundExpandShoulderLimitRatioAfterConstraintMade) == 0x000B18, "Member 'UBodyDriver_BipedBalanceTuningSet::ReachForWoundExpandShoulderLimitRatioAfterConstraintMade' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, ReachForWoundExpandWristLimitRatioAfterConstraintMade) == 0x000B1C, "Member 'UBodyDriver_BipedBalanceTuningSet::ReachForWoundExpandWristLimitRatioAfterConstraintMade' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, ReflectSpineBackWoundsToTheClosestSide) == 0x000B20, "Member 'UBodyDriver_BipedBalanceTuningSet::ReflectSpineBackWoundsToTheClosestSide' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, ReachForWoundGrabFrontOfClosestLeg) == 0x000B21, "Member 'UBodyDriver_BipedBalanceTuningSet::ReachForWoundGrabFrontOfClosestLeg' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, ForceHeadHitsToReachWithBothHands) == 0x000B22, "Member 'UBodyDriver_BipedBalanceTuningSet::ForceHeadHitsToReachWithBothHands' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, ChanceOfDoubleReach) == 0x000B24, "Member 'UBodyDriver_BipedBalanceTuningSet::ChanceOfDoubleReach' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, ReachForWoundUseCOMVelFac) == 0x000B28, "Member 'UBodyDriver_BipedBalanceTuningSet::ReachForWoundUseCOMVelFac' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, ReachForWoundExtraSideOffset) == 0x000B2C, "Member 'UBodyDriver_BipedBalanceTuningSet::ReachForWoundExtraSideOffset' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, BraceLenth) == 0x000B30, "Member 'UBodyDriver_BipedBalanceTuningSet::BraceLenth' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, DontStopBraceUnlessLowVelocity) == 0x000B34, "Member 'UBodyDriver_BipedBalanceTuningSet::DontStopBraceUnlessLowVelocity' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, BraceOpenWristLimitsRatio) == 0x000B38, "Member 'UBodyDriver_BipedBalanceTuningSet::BraceOpenWristLimitsRatio' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, BraceFacingDotLim) == 0x000B3C, "Member 'UBodyDriver_BipedBalanceTuningSet::BraceFacingDotLim' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, BraceFacingDotLimBracing) == 0x000B40, "Member 'UBodyDriver_BipedBalanceTuningSet::BraceFacingDotLimBracing' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, BraceSideDotLim) == 0x000B44, "Member 'UBodyDriver_BipedBalanceTuningSet::BraceSideDotLim' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, BraceSideDotLimBracing) == 0x000B48, "Member 'UBodyDriver_BipedBalanceTuningSet::BraceSideDotLimBracing' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, BraceBehinfBackDotLim) == 0x000B4C, "Member 'UBodyDriver_BipedBalanceTuningSet::BraceBehinfBackDotLim' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, BraceInitialDelay) == 0x000B50, "Member 'UBodyDriver_BipedBalanceTuningSet::BraceInitialDelay' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, DoSavageAttack) == 0x000B54, "Member 'UBodyDriver_BipedBalanceTuningSet::DoSavageAttack' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, SavageAttackUsePitchClamping) == 0x000B55, "Member 'UBodyDriver_BipedBalanceTuningSet::SavageAttackUsePitchClamping' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, SavageAttackOffsetsUseSpineDirs) == 0x000B56, "Member 'UBodyDriver_BipedBalanceTuningSet::SavageAttackOffsetsUseSpineDirs' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, SavageAttackDebugTarget) == 0x000B58, "Member 'UBodyDriver_BipedBalanceTuningSet::SavageAttackDebugTarget' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, SavageWindupTime) == 0x000B64, "Member 'UBodyDriver_BipedBalanceTuningSet::SavageWindupTime' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, SavageSpringTime) == 0x000B68, "Member 'UBodyDriver_BipedBalanceTuningSet::SavageSpringTime' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, SavageAttackPostWaitTime) == 0x000B6C, "Member 'UBodyDriver_BipedBalanceTuningSet::SavageAttackPostWaitTime' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, SavageAttackOtherArmPhaseGoTime) == 0x000B70, "Member 'UBodyDriver_BipedBalanceTuningSet::SavageAttackOtherArmPhaseGoTime' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, SavageAttackDistance) == 0x000B74, "Member 'UBodyDriver_BipedBalanceTuningSet::SavageAttackDistance' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, SavageAttackConeAngle) == 0x000B78, "Member 'UBodyDriver_BipedBalanceTuningSet::SavageAttackConeAngle' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, SavageAttackConeAngleDownAttacks) == 0x000B7C, "Member 'UBodyDriver_BipedBalanceTuningSet::SavageAttackConeAngleDownAttacks' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, SavageAttackPivotForwardOffset) == 0x000B80, "Member 'UBodyDriver_BipedBalanceTuningSet::SavageAttackPivotForwardOffset' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, SavageAttackPivotSideOffset) == 0x000B84, "Member 'UBodyDriver_BipedBalanceTuningSet::SavageAttackPivotSideOffset' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, SavageAttackPivotUpOffsetMin) == 0x000B88, "Member 'UBodyDriver_BipedBalanceTuningSet::SavageAttackPivotUpOffsetMin' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, SavageAttackPivotUpOffsetMax) == 0x000B8C, "Member 'UBodyDriver_BipedBalanceTuningSet::SavageAttackPivotUpOffsetMax' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, SavageAttackForwardPullbackOffset) == 0x000B90, "Member 'UBodyDriver_BipedBalanceTuningSet::SavageAttackForwardPullbackOffset' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, SavageAttackSidePullbackOffset) == 0x000B94, "Member 'UBodyDriver_BipedBalanceTuningSet::SavageAttackSidePullbackOffset' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, SavageAttackUpPullbackOffset) == 0x000B98, "Member 'UBodyDriver_BipedBalanceTuningSet::SavageAttackUpPullbackOffset' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, SavageAttackOverrideArcAngle) == 0x000B9C, "Member 'UBodyDriver_BipedBalanceTuningSet::SavageAttackOverrideArcAngle' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, SavageAttackSpineStiffness) == 0x000BA0, "Member 'UBodyDriver_BipedBalanceTuningSet::SavageAttackSpineStiffness' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, SavageAttackSpineSpeed) == 0x000BA4, "Member 'UBodyDriver_BipedBalanceTuningSet::SavageAttackSpineSpeed' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, SavageAttackSpineFlattenAxis) == 0x000BA8, "Member 'UBodyDriver_BipedBalanceTuningSet::SavageAttackSpineFlattenAxis' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, SavageAttackUpPullbackSpeed) == 0x000BAC, "Member 'UBodyDriver_BipedBalanceTuningSet::SavageAttackUpPullbackSpeed' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, SavageAttackUpPullbackStiffness) == 0x000BB0, "Member 'UBodyDriver_BipedBalanceTuningSet::SavageAttackUpPullbackStiffness' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, SavageAttackUpPullbackWeight) == 0x000BB4, "Member 'UBodyDriver_BipedBalanceTuningSet::SavageAttackUpPullbackWeight' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, SavageAttackUpPullbackBlendRate) == 0x000BB8, "Member 'UBodyDriver_BipedBalanceTuningSet::SavageAttackUpPullbackBlendRate' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, SavageSpineMaxOffsetAngle) == 0x000BBC, "Member 'UBodyDriver_BipedBalanceTuningSet::SavageSpineMaxOffsetAngle' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, SavageSpinePriority) == 0x000BC0, "Member 'UBodyDriver_BipedBalanceTuningSet::SavageSpinePriority' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, SavageMiddleRangeFollowThoughMult) == 0x000BC4, "Member 'UBodyDriver_BipedBalanceTuningSet::SavageMiddleRangeFollowThoughMult' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, SavageAttackWindupBaseWeight) == 0x000BC8, "Member 'UBodyDriver_BipedBalanceTuningSet::SavageAttackWindupBaseWeight' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, PriorityCurrentPose) == 0x000BCC, "Member 'UBodyDriver_BipedBalanceTuningSet::PriorityCurrentPose' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, UseStiffnessCurrentPose) == 0x000BD0, "Member 'UBodyDriver_BipedBalanceTuningSet::UseStiffnessCurrentPose' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, PriorityTrackingPose) == 0x000BD4, "Member 'UBodyDriver_BipedBalanceTuningSet::PriorityTrackingPose' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, UseStiffnessTrackingPose) == 0x000BD8, "Member 'UBodyDriver_BipedBalanceTuningSet::UseStiffnessTrackingPose' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, DefaultArmsJointSpeed) == 0x000BDC, "Member 'UBodyDriver_BipedBalanceTuningSet::DefaultArmsJointSpeed' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, InitialHeadWeaknessTime) == 0x000BE0, "Member 'UBodyDriver_BipedBalanceTuningSet::InitialHeadWeaknessTime' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, InitialSpineWeaknessTime) == 0x000BE4, "Member 'UBodyDriver_BipedBalanceTuningSet::InitialSpineWeaknessTime' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, SpineBalanceEndPartOverride) == 0x000BE8, "Member 'UBodyDriver_BipedBalanceTuningSet::SpineBalanceEndPartOverride' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, HunchStaggerTopRange) == 0x000BEC, "Member 'UBodyDriver_BipedBalanceTuningSet::HunchStaggerTopRange' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, HunchStaggerBottomRange) == 0x000BF0, "Member 'UBodyDriver_BipedBalanceTuningSet::HunchStaggerBottomRange' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, HunchStaggerTopVal) == 0x000BF4, "Member 'UBodyDriver_BipedBalanceTuningSet::HunchStaggerTopVal' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, HunchStaggerBottomVal) == 0x000BF8, "Member 'UBodyDriver_BipedBalanceTuningSet::HunchStaggerBottomVal' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, HunchFromCurrentPose) == 0x000BFC, "Member 'UBodyDriver_BipedBalanceTuningSet::HunchFromCurrentPose' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, AllowSpineUpright) == 0x000BFD, "Member 'UBodyDriver_BipedBalanceTuningSet::AllowSpineUpright' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, Headlookdist) == 0x000C00, "Member 'UBodyDriver_BipedBalanceTuningSet::Headlookdist' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, HeadlookDistUnbalanced) == 0x000C04, "Member 'UBodyDriver_BipedBalanceTuningSet::HeadlookDistUnbalanced' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, Headlookrange) == 0x000C08, "Member 'UBodyDriver_BipedBalanceTuningSet::Headlookrange' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, UseStiffnessHeadLook) == 0x000C0C, "Member 'UBodyDriver_BipedBalanceTuningSet::UseStiffnessHeadLook' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, WeightHeadLook) == 0x000C10, "Member 'UBodyDriver_BipedBalanceTuningSet::WeightHeadLook' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, ClampHeadLook) == 0x000C14, "Member 'UBodyDriver_BipedBalanceTuningSet::ClampHeadLook' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, HeadLookBasePartOverride) == 0x000C18, "Member 'UBodyDriver_BipedBalanceTuningSet::HeadLookBasePartOverride' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, AllowLookingAtWound) == 0x000C19, "Member 'UBodyDriver_BipedBalanceTuningSet::AllowLookingAtWound' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, AllowLookingAtBracePoint) == 0x000C1A, "Member 'UBodyDriver_BipedBalanceTuningSet::AllowLookingAtBracePoint' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, SpeedAlpha) == 0x000C1C, "Member 'UBodyDriver_BipedBalanceTuningSet::SpeedAlpha' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, FallenOverAngleFromUpright) == 0x000C20, "Member 'UBodyDriver_BipedBalanceTuningSet::FallenOverAngleFromUpright' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, FallenOverAngleFromUprightInitialBoost) == 0x000C24, "Member 'UBodyDriver_BipedBalanceTuningSet::FallenOverAngleFromUprightInitialBoost' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, FallenOverAngleFromUprightInitialBoostTime) == 0x000C28, "Member 'UBodyDriver_BipedBalanceTuningSet::FallenOverAngleFromUprightInitialBoostTime' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, FallToKneesChance) == 0x000C2C, "Member 'UBodyDriver_BipedBalanceTuningSet::FallToKneesChance' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, FallToKneesTimeUntilAttempt) == 0x000C30, "Member 'UBodyDriver_BipedBalanceTuningSet::FallToKneesTimeUntilAttempt' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, FallToKneesSwitchToDropTimeout) == 0x000C34, "Member 'UBodyDriver_BipedBalanceTuningSet::FallToKneesSwitchToDropTimeout' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, FallToKneesUseStabilizationRegardless) == 0x000C38, "Member 'UBodyDriver_BipedBalanceTuningSet::FallToKneesUseStabilizationRegardless' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, FallToKneesErrorToStopStepping) == 0x000C3C, "Member 'UBodyDriver_BipedBalanceTuningSet::FallToKneesErrorToStopStepping' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, FallToKneesAbortBodyAngle) == 0x000C40, "Member 'UBodyDriver_BipedBalanceTuningSet::FallToKneesAbortBodyAngle' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, FallToKneesStabilizationHandling) == 0x000C48, "Member 'UBodyDriver_BipedBalanceTuningSet::FallToKneesStabilizationHandling' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, FallToKneesTimeUntilDropMin) == 0x000DA8, "Member 'UBodyDriver_BipedBalanceTuningSet::FallToKneesTimeUntilDropMin' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, FallToKneesTimeUntilDropMax) == 0x000DAC, "Member 'UBodyDriver_BipedBalanceTuningSet::FallToKneesTimeUntilDropMax' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, FallToKneesTimeUntilFallMin) == 0x000DB0, "Member 'UBodyDriver_BipedBalanceTuningSet::FallToKneesTimeUntilFallMin' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, FallToKneesTimeUntilFallMax) == 0x000DB4, "Member 'UBodyDriver_BipedBalanceTuningSet::FallToKneesTimeUntilFallMax' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, FallToKneesTimeBalanceRequired) == 0x000DB8, "Member 'UBodyDriver_BipedBalanceTuningSet::FallToKneesTimeBalanceRequired' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, FallToKneesPushCOMDistance) == 0x000DBC, "Member 'UBodyDriver_BipedBalanceTuningSet::FallToKneesPushCOMDistance' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, FallToKneesPushAngle) == 0x000DC0, "Member 'UBodyDriver_BipedBalanceTuningSet::FallToKneesPushAngle' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, FallToKneesPushMagFall) == 0x000DC4, "Member 'UBodyDriver_BipedBalanceTuningSet::FallToKneesPushMagFall' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, FallToKneesPushTime) == 0x000DC8, "Member 'UBodyDriver_BipedBalanceTuningSet::FallToKneesPushTime' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, FallToKneesFinalStrengthRatioArms) == 0x000DCC, "Member 'UBodyDriver_BipedBalanceTuningSet::FallToKneesFinalStrengthRatioArms' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, FallToKneesTimeToHunchBlendout) == 0x000DD0, "Member 'UBodyDriver_BipedBalanceTuningSet::FallToKneesTimeToHunchBlendout' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, FallToKneesPushIncludeParts) == 0x000DD8, "Member 'UBodyDriver_BipedBalanceTuningSet::FallToKneesPushIncludeParts' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, FallToKneesStopStaggerStayUprightIfNotAttemptingKnees) == 0x000DE8, "Member 'UBodyDriver_BipedBalanceTuningSet::FallToKneesStopStaggerStayUprightIfNotAttemptingKnees' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, DoRobotPowerDown) == 0x000DE9, "Member 'UBodyDriver_BipedBalanceTuningSet::DoRobotPowerDown' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, ArmsPowerDownStartTime) == 0x000DEC, "Member 'UBodyDriver_BipedBalanceTuningSet::ArmsPowerDownStartTime' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, ArmsPowerDownDuration) == 0x000DF0, "Member 'UBodyDriver_BipedBalanceTuningSet::ArmsPowerDownDuration' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, ArmsPowerDownMinStrengthMultiplier) == 0x000DF4, "Member 'UBodyDriver_BipedBalanceTuningSet::ArmsPowerDownMinStrengthMultiplier' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, UpperBodyPowerDownStartTime) == 0x000DF8, "Member 'UBodyDriver_BipedBalanceTuningSet::UpperBodyPowerDownStartTime' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, UpperBodyPowerDownDuration) == 0x000DFC, "Member 'UBodyDriver_BipedBalanceTuningSet::UpperBodyPowerDownDuration' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, UpperBodyPowerDownMinStrengthMultiplier) == 0x000E00, "Member 'UBodyDriver_BipedBalanceTuningSet::UpperBodyPowerDownMinStrengthMultiplier' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, LowerBodyPowerDownStartTime) == 0x000E04, "Member 'UBodyDriver_BipedBalanceTuningSet::LowerBodyPowerDownStartTime' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, LowerBodyPowerDownDuration) == 0x000E08, "Member 'UBodyDriver_BipedBalanceTuningSet::LowerBodyPowerDownDuration' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, LowerBodyPowerDownMinStrengthMultiplier) == 0x000E0C, "Member 'UBodyDriver_BipedBalanceTuningSet::LowerBodyPowerDownMinStrengthMultiplier' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, AdjustGoalMaxPhase) == 0x000E10, "Member 'UBodyDriver_BipedBalanceTuningSet::AdjustGoalMaxPhase' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, StiffnessBodyAngleRange) == 0x000E14, "Member 'UBodyDriver_BipedBalanceTuningSet::StiffnessBodyAngleRange' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, ReducedStiffnessMult) == 0x000E18, "Member 'UBodyDriver_BipedBalanceTuningSet::ReducedStiffnessMult' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, COMShiftLim) == 0x000E1C, "Member 'UBodyDriver_BipedBalanceTuningSet::COMShiftLim' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, RateCOMWeight) == 0x000E20, "Member 'UBodyDriver_BipedBalanceTuningSet::RateCOMWeight' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, LinUPdampingBalanced) == 0x000E24, "Member 'UBodyDriver_BipedBalanceTuningSet::LinUPdampingBalanced' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BipedBalanceTuningSet, ChangeRate) == 0x000E28, "Member 'UBodyDriver_BipedBalanceTuningSet::ChangeRate' has a wrong offset!");

// Class BodyDriverPlugin.BodyDriver_ArchtypeTuningSet
// 0x0080 (0x00B0 - 0x0030)
class UBodyDriver_ArchtypeTuningSet final : public UDataAsset
{
public:
	bool                                          UseArchType;                                       // 0x0030(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ArchetypeIsSelf;                                   // 0x0031(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseBaseForExplosions;                              // 0x0032(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseBoundsInsteadOfPushes;                          // 0x0033(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForceFrontWoundGrabs;                              // 0x0034(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DisableReachForWound;                              // 0x0035(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DisableBrace;                                      // 0x0036(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DisableWindmill;                                   // 0x0037(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MoveClavicleHitsToUpperArm;                        // 0x0038(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MoveLowerLegHitsToThighs;                          // 0x0039(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MoveNeckHitsToHead;                                // 0x003A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3B[0x1];                                       // 0x003B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OverrideFallenLimitBlendRate;                      // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FallenBaseInitialBoundScale;                       // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ArchetypeJointSpeedClamp;                          // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HandAndForearmsCountsAsNonFootOnGround;            // 0x0048(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AppendagesCountsAsNonFootOnGround;                 // 0x0049(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A[0x2];                                       // 0x004A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ExplosionForceScale;                               // 0x004C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PatchInitialDistance;                              // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PatchInitialDistanceMultiplierForNonExplosions;    // 0x0054(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PatchMoveRate;                                     // 0x0058(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PatchMoveRateMultiplierForNonExplosions;           // 0x005C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<EeBodyParts>                           AdditionalPatchProbeParts;                         // 0x0060(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         PatchSize;                                         // 0x0070(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PatchSizeMultiplierForNonExplosions;               // 0x0074(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PatchMinDist;                                      // 0x0078(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EeBodyParts>                           DisableCollisionLinks;                             // 0x0080(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         ArchetypeInitialBoundScale;                        // 0x0090(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EeBodyParts>                           ArchetypeInitialBoundScaleParts;                   // 0x0098(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          UseArchTypeForDebugImpulsesTuning;                 // 0x00A8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseArchTypeForApplyImpulseTuning;                  // 0x00A9(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseArchTypeForApplyExplosionTuning;                // 0x00AA(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AB[0x5];                                       // 0x00AB(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BodyDriver_ArchtypeTuningSet">();
	}
	static class UBodyDriver_ArchtypeTuningSet* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBodyDriver_ArchtypeTuningSet>();
	}
};
static_assert(alignof(UBodyDriver_ArchtypeTuningSet) == 0x000008, "Wrong alignment on UBodyDriver_ArchtypeTuningSet");
static_assert(sizeof(UBodyDriver_ArchtypeTuningSet) == 0x0000B0, "Wrong size on UBodyDriver_ArchtypeTuningSet");
static_assert(offsetof(UBodyDriver_ArchtypeTuningSet, UseArchType) == 0x000030, "Member 'UBodyDriver_ArchtypeTuningSet::UseArchType' has a wrong offset!");
static_assert(offsetof(UBodyDriver_ArchtypeTuningSet, ArchetypeIsSelf) == 0x000031, "Member 'UBodyDriver_ArchtypeTuningSet::ArchetypeIsSelf' has a wrong offset!");
static_assert(offsetof(UBodyDriver_ArchtypeTuningSet, UseBaseForExplosions) == 0x000032, "Member 'UBodyDriver_ArchtypeTuningSet::UseBaseForExplosions' has a wrong offset!");
static_assert(offsetof(UBodyDriver_ArchtypeTuningSet, UseBoundsInsteadOfPushes) == 0x000033, "Member 'UBodyDriver_ArchtypeTuningSet::UseBoundsInsteadOfPushes' has a wrong offset!");
static_assert(offsetof(UBodyDriver_ArchtypeTuningSet, ForceFrontWoundGrabs) == 0x000034, "Member 'UBodyDriver_ArchtypeTuningSet::ForceFrontWoundGrabs' has a wrong offset!");
static_assert(offsetof(UBodyDriver_ArchtypeTuningSet, DisableReachForWound) == 0x000035, "Member 'UBodyDriver_ArchtypeTuningSet::DisableReachForWound' has a wrong offset!");
static_assert(offsetof(UBodyDriver_ArchtypeTuningSet, DisableBrace) == 0x000036, "Member 'UBodyDriver_ArchtypeTuningSet::DisableBrace' has a wrong offset!");
static_assert(offsetof(UBodyDriver_ArchtypeTuningSet, DisableWindmill) == 0x000037, "Member 'UBodyDriver_ArchtypeTuningSet::DisableWindmill' has a wrong offset!");
static_assert(offsetof(UBodyDriver_ArchtypeTuningSet, MoveClavicleHitsToUpperArm) == 0x000038, "Member 'UBodyDriver_ArchtypeTuningSet::MoveClavicleHitsToUpperArm' has a wrong offset!");
static_assert(offsetof(UBodyDriver_ArchtypeTuningSet, MoveLowerLegHitsToThighs) == 0x000039, "Member 'UBodyDriver_ArchtypeTuningSet::MoveLowerLegHitsToThighs' has a wrong offset!");
static_assert(offsetof(UBodyDriver_ArchtypeTuningSet, MoveNeckHitsToHead) == 0x00003A, "Member 'UBodyDriver_ArchtypeTuningSet::MoveNeckHitsToHead' has a wrong offset!");
static_assert(offsetof(UBodyDriver_ArchtypeTuningSet, OverrideFallenLimitBlendRate) == 0x00003C, "Member 'UBodyDriver_ArchtypeTuningSet::OverrideFallenLimitBlendRate' has a wrong offset!");
static_assert(offsetof(UBodyDriver_ArchtypeTuningSet, FallenBaseInitialBoundScale) == 0x000040, "Member 'UBodyDriver_ArchtypeTuningSet::FallenBaseInitialBoundScale' has a wrong offset!");
static_assert(offsetof(UBodyDriver_ArchtypeTuningSet, ArchetypeJointSpeedClamp) == 0x000044, "Member 'UBodyDriver_ArchtypeTuningSet::ArchetypeJointSpeedClamp' has a wrong offset!");
static_assert(offsetof(UBodyDriver_ArchtypeTuningSet, HandAndForearmsCountsAsNonFootOnGround) == 0x000048, "Member 'UBodyDriver_ArchtypeTuningSet::HandAndForearmsCountsAsNonFootOnGround' has a wrong offset!");
static_assert(offsetof(UBodyDriver_ArchtypeTuningSet, AppendagesCountsAsNonFootOnGround) == 0x000049, "Member 'UBodyDriver_ArchtypeTuningSet::AppendagesCountsAsNonFootOnGround' has a wrong offset!");
static_assert(offsetof(UBodyDriver_ArchtypeTuningSet, ExplosionForceScale) == 0x00004C, "Member 'UBodyDriver_ArchtypeTuningSet::ExplosionForceScale' has a wrong offset!");
static_assert(offsetof(UBodyDriver_ArchtypeTuningSet, PatchInitialDistance) == 0x000050, "Member 'UBodyDriver_ArchtypeTuningSet::PatchInitialDistance' has a wrong offset!");
static_assert(offsetof(UBodyDriver_ArchtypeTuningSet, PatchInitialDistanceMultiplierForNonExplosions) == 0x000054, "Member 'UBodyDriver_ArchtypeTuningSet::PatchInitialDistanceMultiplierForNonExplosions' has a wrong offset!");
static_assert(offsetof(UBodyDriver_ArchtypeTuningSet, PatchMoveRate) == 0x000058, "Member 'UBodyDriver_ArchtypeTuningSet::PatchMoveRate' has a wrong offset!");
static_assert(offsetof(UBodyDriver_ArchtypeTuningSet, PatchMoveRateMultiplierForNonExplosions) == 0x00005C, "Member 'UBodyDriver_ArchtypeTuningSet::PatchMoveRateMultiplierForNonExplosions' has a wrong offset!");
static_assert(offsetof(UBodyDriver_ArchtypeTuningSet, AdditionalPatchProbeParts) == 0x000060, "Member 'UBodyDriver_ArchtypeTuningSet::AdditionalPatchProbeParts' has a wrong offset!");
static_assert(offsetof(UBodyDriver_ArchtypeTuningSet, PatchSize) == 0x000070, "Member 'UBodyDriver_ArchtypeTuningSet::PatchSize' has a wrong offset!");
static_assert(offsetof(UBodyDriver_ArchtypeTuningSet, PatchSizeMultiplierForNonExplosions) == 0x000074, "Member 'UBodyDriver_ArchtypeTuningSet::PatchSizeMultiplierForNonExplosions' has a wrong offset!");
static_assert(offsetof(UBodyDriver_ArchtypeTuningSet, PatchMinDist) == 0x000078, "Member 'UBodyDriver_ArchtypeTuningSet::PatchMinDist' has a wrong offset!");
static_assert(offsetof(UBodyDriver_ArchtypeTuningSet, DisableCollisionLinks) == 0x000080, "Member 'UBodyDriver_ArchtypeTuningSet::DisableCollisionLinks' has a wrong offset!");
static_assert(offsetof(UBodyDriver_ArchtypeTuningSet, ArchetypeInitialBoundScale) == 0x000090, "Member 'UBodyDriver_ArchtypeTuningSet::ArchetypeInitialBoundScale' has a wrong offset!");
static_assert(offsetof(UBodyDriver_ArchtypeTuningSet, ArchetypeInitialBoundScaleParts) == 0x000098, "Member 'UBodyDriver_ArchtypeTuningSet::ArchetypeInitialBoundScaleParts' has a wrong offset!");
static_assert(offsetof(UBodyDriver_ArchtypeTuningSet, UseArchTypeForDebugImpulsesTuning) == 0x0000A8, "Member 'UBodyDriver_ArchtypeTuningSet::UseArchTypeForDebugImpulsesTuning' has a wrong offset!");
static_assert(offsetof(UBodyDriver_ArchtypeTuningSet, UseArchTypeForApplyImpulseTuning) == 0x0000A9, "Member 'UBodyDriver_ArchtypeTuningSet::UseArchTypeForApplyImpulseTuning' has a wrong offset!");
static_assert(offsetof(UBodyDriver_ArchtypeTuningSet, UseArchTypeForApplyExplosionTuning) == 0x0000AA, "Member 'UBodyDriver_ArchtypeTuningSet::UseArchTypeForApplyExplosionTuning' has a wrong offset!");

// Class BodyDriverPlugin.BodyDriver_BaseDataTuningSet
// 0x0168 (0x0198 - 0x0030)
class UBodyDriver_BaseDataTuningSet final : public UDataAsset
{
public:
	bool                                          EnableBodyDriver;                                  // 0x0030(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EeCharacterType                               CharacterType;                                     // 0x0031(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x2];                                       // 0x0032(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReferencePoseForward;                              // 0x0034(0x000C)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Head;                                              // 0x0040(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Chest;                                             // 0x0050(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LeftHand;                                          // 0x0060(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LeftHandLocalPointingDir;                          // 0x0070(0x000C)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LeftHandLocalUpDir;                                // 0x007C(0x000C)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RightHand;                                         // 0x0088(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RightHandLocalPointingDir;                         // 0x0098(0x000C)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RightHandLocalUpDir;                               // 0x00A4(0x000C)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LeftFoot;                                          // 0x00B0(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LeftFootLocalPointingDir;                          // 0x00C0(0x000C)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LeftFootLocalUpDir;                                // 0x00CC(0x000C)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RightFoot;                                         // 0x00D8(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RightFootLocalPointingDir;                         // 0x00E8(0x000C)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RightFootLocalUpDir;                               // 0x00F4(0x000C)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<EeBodyParts>                           StandingSelfCollisionExcludedParts;                // 0x0100(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<EeBodyParts>                           FallenSelfCollisionExcludedParts;                  // 0x0110(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         TotalMass;                                         // 0x0120(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TreatAuthoredMassesAsDensities;                    // 0x0124(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseReferenceForIdlePose;                           // 0x0125(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_126[0x2];                                      // 0x0126(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         UpBoundHack;                                       // 0x0128(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseIdleForTracking;                                // 0x012C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12D[0x3];                                      // 0x012D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StandingFootFriction;                              // 0x0130(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ExternalDriveIterations;                           // 0x0134(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InternalDriveIterations;                           // 0x0138(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinPositionIterations;                             // 0x013C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinVelocityIterations;                             // 0x0140(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxPartInitialLinearVelocity;                      // 0x0144(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxPartInitialAngularVelocity;                     // 0x0148(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InitialLimitTwistWideningAdd;                      // 0x014C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InitialLimitSwingWideningAdd;                      // 0x0150(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_154[0x4];                                      // 0x0154(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EeBodyParts>                           InitialLimitWideningParts;                         // 0x0158(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         PushesPartRadius;                                  // 0x0168(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PushesMaxMagnitude;                                // 0x016C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PushesMagnitudeScaleDepth;                         // 0x0170(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SwingDirectionWeight;                              // 0x0174(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinMeleeAngleFromAttacker;                         // 0x0178(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxMeleeAngleFromAttacker;                         // 0x017C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DontAllowOffAxisImpacts;                           // 0x0180(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseBalanceBehaviorForStagger;                      // 0x0181(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_182[0x2];                                      // 0x0182(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MeleeDirectionRandomizationAllowance;              // 0x0184(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultBodyJointSpeed;                             // 0x0188(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DisableBonamik;                                    // 0x018C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SlipperyFeet;                                      // 0x018D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18E[0x2];                                      // 0x018E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OverridePelvisToHeadUprightAngle;                  // 0x0190(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_194[0x4];                                      // 0x0194(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BodyDriver_BaseDataTuningSet">();
	}
	static class UBodyDriver_BaseDataTuningSet* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBodyDriver_BaseDataTuningSet>();
	}
};
static_assert(alignof(UBodyDriver_BaseDataTuningSet) == 0x000008, "Wrong alignment on UBodyDriver_BaseDataTuningSet");
static_assert(sizeof(UBodyDriver_BaseDataTuningSet) == 0x000198, "Wrong size on UBodyDriver_BaseDataTuningSet");
static_assert(offsetof(UBodyDriver_BaseDataTuningSet, EnableBodyDriver) == 0x000030, "Member 'UBodyDriver_BaseDataTuningSet::EnableBodyDriver' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BaseDataTuningSet, CharacterType) == 0x000031, "Member 'UBodyDriver_BaseDataTuningSet::CharacterType' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BaseDataTuningSet, ReferencePoseForward) == 0x000034, "Member 'UBodyDriver_BaseDataTuningSet::ReferencePoseForward' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BaseDataTuningSet, Head) == 0x000040, "Member 'UBodyDriver_BaseDataTuningSet::Head' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BaseDataTuningSet, Chest) == 0x000050, "Member 'UBodyDriver_BaseDataTuningSet::Chest' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BaseDataTuningSet, LeftHand) == 0x000060, "Member 'UBodyDriver_BaseDataTuningSet::LeftHand' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BaseDataTuningSet, LeftHandLocalPointingDir) == 0x000070, "Member 'UBodyDriver_BaseDataTuningSet::LeftHandLocalPointingDir' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BaseDataTuningSet, LeftHandLocalUpDir) == 0x00007C, "Member 'UBodyDriver_BaseDataTuningSet::LeftHandLocalUpDir' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BaseDataTuningSet, RightHand) == 0x000088, "Member 'UBodyDriver_BaseDataTuningSet::RightHand' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BaseDataTuningSet, RightHandLocalPointingDir) == 0x000098, "Member 'UBodyDriver_BaseDataTuningSet::RightHandLocalPointingDir' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BaseDataTuningSet, RightHandLocalUpDir) == 0x0000A4, "Member 'UBodyDriver_BaseDataTuningSet::RightHandLocalUpDir' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BaseDataTuningSet, LeftFoot) == 0x0000B0, "Member 'UBodyDriver_BaseDataTuningSet::LeftFoot' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BaseDataTuningSet, LeftFootLocalPointingDir) == 0x0000C0, "Member 'UBodyDriver_BaseDataTuningSet::LeftFootLocalPointingDir' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BaseDataTuningSet, LeftFootLocalUpDir) == 0x0000CC, "Member 'UBodyDriver_BaseDataTuningSet::LeftFootLocalUpDir' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BaseDataTuningSet, RightFoot) == 0x0000D8, "Member 'UBodyDriver_BaseDataTuningSet::RightFoot' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BaseDataTuningSet, RightFootLocalPointingDir) == 0x0000E8, "Member 'UBodyDriver_BaseDataTuningSet::RightFootLocalPointingDir' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BaseDataTuningSet, RightFootLocalUpDir) == 0x0000F4, "Member 'UBodyDriver_BaseDataTuningSet::RightFootLocalUpDir' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BaseDataTuningSet, StandingSelfCollisionExcludedParts) == 0x000100, "Member 'UBodyDriver_BaseDataTuningSet::StandingSelfCollisionExcludedParts' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BaseDataTuningSet, FallenSelfCollisionExcludedParts) == 0x000110, "Member 'UBodyDriver_BaseDataTuningSet::FallenSelfCollisionExcludedParts' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BaseDataTuningSet, TotalMass) == 0x000120, "Member 'UBodyDriver_BaseDataTuningSet::TotalMass' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BaseDataTuningSet, TreatAuthoredMassesAsDensities) == 0x000124, "Member 'UBodyDriver_BaseDataTuningSet::TreatAuthoredMassesAsDensities' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BaseDataTuningSet, UseReferenceForIdlePose) == 0x000125, "Member 'UBodyDriver_BaseDataTuningSet::UseReferenceForIdlePose' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BaseDataTuningSet, UpBoundHack) == 0x000128, "Member 'UBodyDriver_BaseDataTuningSet::UpBoundHack' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BaseDataTuningSet, UseIdleForTracking) == 0x00012C, "Member 'UBodyDriver_BaseDataTuningSet::UseIdleForTracking' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BaseDataTuningSet, StandingFootFriction) == 0x000130, "Member 'UBodyDriver_BaseDataTuningSet::StandingFootFriction' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BaseDataTuningSet, ExternalDriveIterations) == 0x000134, "Member 'UBodyDriver_BaseDataTuningSet::ExternalDriveIterations' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BaseDataTuningSet, InternalDriveIterations) == 0x000138, "Member 'UBodyDriver_BaseDataTuningSet::InternalDriveIterations' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BaseDataTuningSet, MinPositionIterations) == 0x00013C, "Member 'UBodyDriver_BaseDataTuningSet::MinPositionIterations' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BaseDataTuningSet, MinVelocityIterations) == 0x000140, "Member 'UBodyDriver_BaseDataTuningSet::MinVelocityIterations' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BaseDataTuningSet, MaxPartInitialLinearVelocity) == 0x000144, "Member 'UBodyDriver_BaseDataTuningSet::MaxPartInitialLinearVelocity' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BaseDataTuningSet, MaxPartInitialAngularVelocity) == 0x000148, "Member 'UBodyDriver_BaseDataTuningSet::MaxPartInitialAngularVelocity' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BaseDataTuningSet, InitialLimitTwistWideningAdd) == 0x00014C, "Member 'UBodyDriver_BaseDataTuningSet::InitialLimitTwistWideningAdd' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BaseDataTuningSet, InitialLimitSwingWideningAdd) == 0x000150, "Member 'UBodyDriver_BaseDataTuningSet::InitialLimitSwingWideningAdd' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BaseDataTuningSet, InitialLimitWideningParts) == 0x000158, "Member 'UBodyDriver_BaseDataTuningSet::InitialLimitWideningParts' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BaseDataTuningSet, PushesPartRadius) == 0x000168, "Member 'UBodyDriver_BaseDataTuningSet::PushesPartRadius' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BaseDataTuningSet, PushesMaxMagnitude) == 0x00016C, "Member 'UBodyDriver_BaseDataTuningSet::PushesMaxMagnitude' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BaseDataTuningSet, PushesMagnitudeScaleDepth) == 0x000170, "Member 'UBodyDriver_BaseDataTuningSet::PushesMagnitudeScaleDepth' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BaseDataTuningSet, SwingDirectionWeight) == 0x000174, "Member 'UBodyDriver_BaseDataTuningSet::SwingDirectionWeight' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BaseDataTuningSet, MinMeleeAngleFromAttacker) == 0x000178, "Member 'UBodyDriver_BaseDataTuningSet::MinMeleeAngleFromAttacker' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BaseDataTuningSet, MaxMeleeAngleFromAttacker) == 0x00017C, "Member 'UBodyDriver_BaseDataTuningSet::MaxMeleeAngleFromAttacker' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BaseDataTuningSet, DontAllowOffAxisImpacts) == 0x000180, "Member 'UBodyDriver_BaseDataTuningSet::DontAllowOffAxisImpacts' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BaseDataTuningSet, UseBalanceBehaviorForStagger) == 0x000181, "Member 'UBodyDriver_BaseDataTuningSet::UseBalanceBehaviorForStagger' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BaseDataTuningSet, MeleeDirectionRandomizationAllowance) == 0x000184, "Member 'UBodyDriver_BaseDataTuningSet::MeleeDirectionRandomizationAllowance' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BaseDataTuningSet, DefaultBodyJointSpeed) == 0x000188, "Member 'UBodyDriver_BaseDataTuningSet::DefaultBodyJointSpeed' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BaseDataTuningSet, DisableBonamik) == 0x00018C, "Member 'UBodyDriver_BaseDataTuningSet::DisableBonamik' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BaseDataTuningSet, SlipperyFeet) == 0x00018D, "Member 'UBodyDriver_BaseDataTuningSet::SlipperyFeet' has a wrong offset!");
static_assert(offsetof(UBodyDriver_BaseDataTuningSet, OverridePelvisToHeadUprightAngle) == 0x000190, "Member 'UBodyDriver_BaseDataTuningSet::OverridePelvisToHeadUprightAngle' has a wrong offset!");

}

