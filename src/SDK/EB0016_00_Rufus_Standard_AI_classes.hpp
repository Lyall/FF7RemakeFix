#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: EB0016_00_Rufus_Standard_AI

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "EndGame_structs.hpp"
#include "EndGame_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass EB0016_00_Rufus_Standard_AI.EB0016_00_Rufus_Standard_AI_C
// 0x01C0 (0x2570 - 0x23B0)
class AEB0016_00_Rufus_Standard_AI_C final : public AEndBattleAIEB0016Controller
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x23B0(0x0008)(Transient, DuplicateTransient)
	class UEndAITimerComponent*                   Timer_InfiniteEnd;                                 // 0x23B8(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UEndAITimerComponent*                   Timer_P1CutSceneReady;                             // 0x23C0(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UEndAITimerComponent*                   Timer_CounterReturnReady;                          // 0x23C8(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UEndAITimerComponent*                   Timer_AttackInterval;                              // 0x23D0(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UEndAITimerComponent*                   Timer_CounterReturn;                               // 0x23D8(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UEndAITimerComponent*                   Timer_LinkInterval;                                // 0x23E0(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FVector                                DarkNation_Location;                               // 0x23E8(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_23F4[0x4];                                     // 0x23F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MetaMessageName;                                   // 0x23F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          EnableCounter;                                     // 0x2408(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          CombiStep_Running;                                 // 0x2409(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          ShotMove_Running;                                  // 0x240A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          AttackHit__LinkOff;                                // 0x240B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          TwinShot_HitOnce;                                  // 0x240C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          PlayedCutScene_P1_5;                               // 0x240D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          DebugMode;                                         // 0x240E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_240F[0x1];                                     // 0x240F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Common_MissingDistance;                            // 0x2410(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StepNear_OffsetDistance;                           // 0x2414(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StepNear_MoveFriction;                             // 0x2418(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StepNear_MoveSpeed;                                // 0x241C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StepFar_OffsetDistance;                            // 0x2420(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StepFar_MoveFriction;                              // 0x2424(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StepFar_MoveSpeed;                                 // 0x2428(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ShotMove_OffsetDistance;                           // 0x242C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ShotMove_MoveFriction;                             // 0x2430(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ShotMove_MoveSpeed;                                // 0x2434(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Step_LimitTime;                                    // 0x2438(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ShotMove_LimitTime;                                // 0x243C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LinkEnableDistance;                                // 0x2440(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LinkInterval;                                      // 0x2444(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AttackInterval;                                    // 0x2448(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         BattlePhase;                                       // 0x244C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TwinShot_Prob;                                     // 0x2450(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         BackflipShotProb;                                  // 0x2454(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SmokeCoin_Prob;                                    // 0x2458(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         BoostCoin_Prob;                                    // 0x245C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TrapCoin_Prob;                                     // 0x2460(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ExplodeCoin_Prob;                                  // 0x2464(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CombiName;                                         // 0x2468(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FName                                   ChaseName;                                         // 0x2478(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   DarkNation_RaceName;                               // 0x2480(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   damageHitReactionID;                               // 0x2488(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   ShotMove_ActionType;                               // 0x2490(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FName>                           CannotCombiMotion;                                 // 0x2498(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	int32                                         ShotMove_DoCount;                                  // 0x24A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Damage;                                            // 0x24AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ShinogiLaser_Count;                                // 0x24B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Coin_DoCount;                                      // 0x24B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FName>                           NotCancelMotion;                                   // 0x24B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	float                                         DamageTime_Short;                                  // 0x24C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DamageTime_Middle;                                 // 0x24CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DamageTime_Long;                                   // 0x24D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShinogiAction_Ready;                               // 0x24D4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Reload_Running;                                    // 0x24D5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsCancel;                                          // 0x24D6(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_24D7[0x1];                                     // 0x24D7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           NotCancelAbility;                                  // 0x24D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	bool                                          MAXBulletChange;                                   // 0x24E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_24E9[0x7];                                     // 0x24E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           AbilityID_Cloud_Normal;                            // 0x24F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<class FName>                           AbilityID_Cloud_Burst;                             // 0x2500(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<class FName>                           AbilityID_Cloud_Avoid;                             // 0x2510(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<class FName>                           DebuffMagic;                                       // 0x2520(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<class FName>                           DamageID_NoReaction;                               // 0x2530(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<class FName>                           CombiMotion;                                       // 0x2540(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<class FName>                           DamageID_Item_Cut;                                 // 0x2550(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<class FName>                           DamageID_Item_NoCut;                               // 0x2560(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)

public:
	void ExecuteUbergraph_EB0016_00_Rufus_Standard_AI(int32 EntryPoint);
	void CombiB_DNSupport_L();
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void OnUpdate(EEndAiBattleRole InRole, int32 InStep, float DeltaTime);
	void OnEntryBattleScene();
	void ShotGun_L();
	void OnMetaMessage(const class FString& InMessage);
	void OnFinishDispacher_Timer_P1CutSceneReady(class FName InName);
	void TwinShot_L();
	void OnMotionMessage(class FName InMotionName, class FName InName, int32 InIntValue, float InFloatValue);
	void OnFinishDispacher_Timer_CounterReturnReady(class FName InName);
	void BackStepShot_CombiStep_L();
	void ComboMoveC_ToLBL();
	void ComboMoveC_ToLML();
	void ComboMoveC_ToRBL();
	void ComboMoveC_ToRML();
	void ComboMoveC_ToCloud();
	void OnTakeAbilityInvoke(class AEndCharacter* causerChara, const class FName& abilityName, EEndBattleAbilityCommandType AbilityCommandType, const TArray<class FName>& AnimationNameList);
	void OnTakeDamage(int32 Damage_0, class AEndCharacter* InChara, class FName InName, EEndBattleAbilityCommandType InCommandType, bool InBind, bool InGuard, bool InDodge, class FName InBoneName, bool InAttributeWeak, class FName InDmgSrcID, EEndBattleAttributeType InDmgSrcAttribute, float justHitRotYaw, const struct FVector& hitPosition, bool InHeal, bool InCounter, const struct FEndDataTableBattleDamageSource& dataTableBattleDamageSource, bool useAbilityUCPC);
	void OnTakeDamageOnce(class AEndCharacter* InCauserChara, class FName InAbilityID, bool InAttributeWeak, EEndBattleAbilityCommandType AbilityCommandType);
	void Reload_L();
	void OnAddStatusChange(EEndBattleStatusChangeType Type);
	void CombiD_L();
	void CombiA_L();
	void m8_______();
	void CallDarkNation_L();
	void OnEventFastDash(class FName EventName);
	void ComboMoveL_ToRML();
	void ComboMoveL_ToRMM();
	void CombiB_L();
	void Guard_Ready_L();
	void LinkOn_L();
	void OnEndCutScene(const class FName& CutsceneID);
	void OnMotionStateMessageEnd(class FName InMotionName, class FName InName, int32 InIntValue, float InFloatValue);
	void Phase1_2_Battle();
	void mN_____();
	void OnPreTakeDamage(float justHitRotYaw, class AEndCharacter* OwnerCharacter, class FName InName, class FName hitBoneName, class FName DamageSourceID, const struct FVector& hitPosition, int32 Damage_0, bool InGuard);
	void ShotMove_LFM_L();
	void ShotMove_RFM_L();
	void ShotMove_LBL_L();
	void ShotMove_RBL_L();
	void OnBurstEnd(bool instant);
	void OnBurstBegin();
	void ComboMoveL_ToRBL();
	void BackStepShot_L();
	void BackflipShot_L();
	void ShotMove_ToCloud();
	void OnCheckBindAction(class FName ActionName, int32 CheckID, int32 ComboIndex);
	void OnInterceptAbility(class FName InName);
	void TrapCoin_L();
	void Phase2____L__0();
	void Phase2____L_();
	void ExplodeCoin_L();
	void OnSuspendAbility(class FName InName, EEndAiAbilitySuspendFactor InFactor, EEndAiAbilitySuspendTiming InTiming);
	void BoostCoin_L();
	void OnFirstUpdate(EEndAiBattleRole InRole, int32 InStep);
	void CombiC_L();
	void OnChase();
	void ShotMove_MFS_L();
	void ComboMoveR_ToLML();
	void ComboMoveR_ToLMM();
	void OnCompleteAbility(class FName InName);
	void ComboMoveR_ToLBL();
	void ComboMoveL_ToCloud();
	void ComboMoveR_ToCloud();
	void SmokeCoin_L();
	void ShotMove_RMM_L();
	void ShotMove_LMM_L();
	void OnGiveDamage(int32 Damage_0, class AEndCharacter* InTarget, class FName InName, bool InBind, bool InGuard, bool InJustGuard, bool KeepOver, bool InDodge, bool InCounter, class FName InBoneName, bool InAttributeWeak, class FName InDamageSourceID, bool InSteal, bool heal);
	void EmergencyGuard_L();
	void DmgMagic_Critical_L();
	void DmgMagic_L();
	void m___();
	void OnMotionStateMessageUpdate(class FName InMotionName, class FName InName, int32 InIntValue, float InFloatValue, float InProgress, bool LatestContactWall, bool LatestContact);
	void OnMotionStateMessageBegin(class FName InMotionName, class FName InName, int32 InIntValue, float InFloatValue, float InTotalDuration);
	void DmgFlicked_Near_L();
	void ShotMove_MFM_L();
	void SpeedShot_L();
	void OnRunningDispacher______0(float Current, float Max, float Progress, class FName InName);
	void Phase3____L__1();
	void OnFinishDispacher_Timer_CounterReturn(class FName InName);
	void Phase3____L__0();
	void Phase3____L_();
	void Phase3_Battle();
	void Counter_Ready_L();
	void DmgFlicked_L();
	void InpActEvt_I_K2Node_InputKeyEvent_0(const struct FKey& Key);
	void Case1_8073D3C64C129D93BE07EFA764BE7629();
	void Case2_8073D3C64C129D93BE07EFA764BE7629();
	void Other_8073D3C64C129D93BE07EFA764BE7629();
	void Case1_97DBEB304306EE980F67CC9123837CE4();
	void Case2_97DBEB304306EE980F67CC9123837CE4();
	void Case3_97DBEB304306EE980F67CC9123837CE4();
	void Other_97DBEB304306EE980F67CC9123837CE4();
	void Case1_6DE001714AB178B5A467E1B830421CE1();
	void Case2_6DE001714AB178B5A467E1B830421CE1();
	void Case3_6DE001714AB178B5A467E1B830421CE1();
	void Other_6DE001714AB178B5A467E1B830421CE1();
	void InpActEvt_NumPadNine_K2Node_InputKeyEvent_1(const struct FKey& Key);
	void InpActEvt_Nine_K2Node_InputKeyEvent_2(const struct FKey& Key);
	void InpActEvt_U_K2Node_InputKeyEvent_3(const struct FKey& Key);
	void InpActEvt_V_K2Node_InputKeyEvent_4(const struct FKey& Key);
	void InpActEvt_W_K2Node_InputKeyEvent_5(const struct FKey& Key);
	void InpActEvt_BackSpace_K2Node_InputKeyEvent_6(const struct FKey& Key);
	void InpActEvt_Colon_K2Node_InputKeyEvent_7(const struct FKey& Key);
	void InpActEvt_Semicolon_K2Node_InputKeyEvent_8(const struct FKey& Key);
	void InpActEvt_Period_K2Node_InputKeyEvent_9(const struct FKey& Key);
	void InpActEvt_Comma_K2Node_InputKeyEvent_10(const struct FKey& Key);
	void InpActEvt_NumPadSix_K2Node_InputKeyEvent_11(const struct FKey& Key);
	void InpActEvt_NumPadFive_K2Node_InputKeyEvent_12(const struct FKey& Key);
	void InpActEvt_NumPadFour_K2Node_InputKeyEvent_13(const struct FKey& Key);
	void InpActEvt_NumPadThree_K2Node_InputKeyEvent_14(const struct FKey& Key);
	void InpActEvt_NumPadTwo_K2Node_InputKeyEvent_15(const struct FKey& Key);
	void InpActEvt_NumPadOne_K2Node_InputKeyEvent_16(const struct FKey& Key);
	void InpActEvt_P_K2Node_InputKeyEvent_17(const struct FKey& Key);
	void InpActEvt_O_K2Node_InputKeyEvent_18(const struct FKey& Key);
	void InpActEvt_Down_K2Node_InputKeyEvent_19(const struct FKey& Key);
	void InpActEvt_SpaceBar_K2Node_InputKeyEvent_20(const struct FKey& Key);
	void InpActEvt_Six_K2Node_InputKeyEvent_21(const struct FKey& Key);
	void InpActEvt_Five_K2Node_InputKeyEvent_22(const struct FKey& Key);
	void InpActEvt_Four_K2Node_InputKeyEvent_23(const struct FKey& Key);
	void InpActEvt_Three_K2Node_InputKeyEvent_24(const struct FKey& Key);
	void InpActEvt_Two_K2Node_InputKeyEvent_25(const struct FKey& Key);
	void InpActEvt_One_K2Node_InputKeyEvent_26(const struct FKey& Key);
	void InpActEvt_Y_K2Node_InputKeyEvent_27(const struct FKey& Key);
	void InpActEvt_End_K2Node_InputKeyEvent_28(const struct FKey& Key);
	void Case1_4EEC91BC482FC7B9798C718333C21F8A();
	void Case2_4EEC91BC482FC7B9798C718333C21F8A();
	void Case3_4EEC91BC482FC7B9798C718333C21F8A();
	void Other_4EEC91BC482FC7B9798C718333C21F8A();
	void Case1_CEF7A85047B22C02B382B3A740C84C8D();
	void Case2_CEF7A85047B22C02B382B3A740C84C8D();
	void Case3_CEF7A85047B22C02B382B3A740C84C8D();
	void Other_CEF7A85047B22C02B382B3A740C84C8D();
	void Case1_37ADE65E43D50A072A212B911DBF2375();
	void Case2_37ADE65E43D50A072A212B911DBF2375();
	void Other_37ADE65E43D50A072A212B911DBF2375();
	void Case1_3886B3624B591CAB7B45D6965D2B657C();
	void Case2_3886B3624B591CAB7B45D6965D2B657C();
	void Other_3886B3624B591CAB7B45D6965D2B657C();
	void Case1_717EFAAA4269C180F337CA82DC3A791E();
	void Case2_717EFAAA4269C180F337CA82DC3A791E();
	void Case3_717EFAAA4269C180F337CA82DC3A791E();
	void Other_717EFAAA4269C180F337CA82DC3A791E();
	void InpActEvt_S_K2Node_InputKeyEvent_29(const struct FKey& Key);
	void InpActEvt_L_K2Node_InputKeyEvent_30(const struct FKey& Key);
	void UserConstructionScript();
	void OverrideDamageHitReactionID(class FName AbilityID, struct FEndDataTableBattleAbility& dataTableBattleAbility, class FName DamageSourceID, bool abilityFirstHit, class FName* damageHitReactionID_0);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"EB0016_00_Rufus_Standard_AI_C">();
	}
	static class AEB0016_00_Rufus_Standard_AI_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AEB0016_00_Rufus_Standard_AI_C>();
	}
};
static_assert(alignof(AEB0016_00_Rufus_Standard_AI_C) == 0x000008, "Wrong alignment on AEB0016_00_Rufus_Standard_AI_C");
static_assert(sizeof(AEB0016_00_Rufus_Standard_AI_C) == 0x002570, "Wrong size on AEB0016_00_Rufus_Standard_AI_C");
static_assert(offsetof(AEB0016_00_Rufus_Standard_AI_C, UberGraphFrame) == 0x0023B0, "Member 'AEB0016_00_Rufus_Standard_AI_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AEB0016_00_Rufus_Standard_AI_C, Timer_InfiniteEnd) == 0x0023B8, "Member 'AEB0016_00_Rufus_Standard_AI_C::Timer_InfiniteEnd' has a wrong offset!");
static_assert(offsetof(AEB0016_00_Rufus_Standard_AI_C, Timer_P1CutSceneReady) == 0x0023C0, "Member 'AEB0016_00_Rufus_Standard_AI_C::Timer_P1CutSceneReady' has a wrong offset!");
static_assert(offsetof(AEB0016_00_Rufus_Standard_AI_C, Timer_CounterReturnReady) == 0x0023C8, "Member 'AEB0016_00_Rufus_Standard_AI_C::Timer_CounterReturnReady' has a wrong offset!");
static_assert(offsetof(AEB0016_00_Rufus_Standard_AI_C, Timer_AttackInterval) == 0x0023D0, "Member 'AEB0016_00_Rufus_Standard_AI_C::Timer_AttackInterval' has a wrong offset!");
static_assert(offsetof(AEB0016_00_Rufus_Standard_AI_C, Timer_CounterReturn) == 0x0023D8, "Member 'AEB0016_00_Rufus_Standard_AI_C::Timer_CounterReturn' has a wrong offset!");
static_assert(offsetof(AEB0016_00_Rufus_Standard_AI_C, Timer_LinkInterval) == 0x0023E0, "Member 'AEB0016_00_Rufus_Standard_AI_C::Timer_LinkInterval' has a wrong offset!");
static_assert(offsetof(AEB0016_00_Rufus_Standard_AI_C, DarkNation_Location) == 0x0023E8, "Member 'AEB0016_00_Rufus_Standard_AI_C::DarkNation_Location' has a wrong offset!");
static_assert(offsetof(AEB0016_00_Rufus_Standard_AI_C, MetaMessageName) == 0x0023F8, "Member 'AEB0016_00_Rufus_Standard_AI_C::MetaMessageName' has a wrong offset!");
static_assert(offsetof(AEB0016_00_Rufus_Standard_AI_C, EnableCounter) == 0x002408, "Member 'AEB0016_00_Rufus_Standard_AI_C::EnableCounter' has a wrong offset!");
static_assert(offsetof(AEB0016_00_Rufus_Standard_AI_C, CombiStep_Running) == 0x002409, "Member 'AEB0016_00_Rufus_Standard_AI_C::CombiStep_Running' has a wrong offset!");
static_assert(offsetof(AEB0016_00_Rufus_Standard_AI_C, ShotMove_Running) == 0x00240A, "Member 'AEB0016_00_Rufus_Standard_AI_C::ShotMove_Running' has a wrong offset!");
static_assert(offsetof(AEB0016_00_Rufus_Standard_AI_C, AttackHit__LinkOff) == 0x00240B, "Member 'AEB0016_00_Rufus_Standard_AI_C::AttackHit__LinkOff' has a wrong offset!");
static_assert(offsetof(AEB0016_00_Rufus_Standard_AI_C, TwinShot_HitOnce) == 0x00240C, "Member 'AEB0016_00_Rufus_Standard_AI_C::TwinShot_HitOnce' has a wrong offset!");
static_assert(offsetof(AEB0016_00_Rufus_Standard_AI_C, PlayedCutScene_P1_5) == 0x00240D, "Member 'AEB0016_00_Rufus_Standard_AI_C::PlayedCutScene_P1_5' has a wrong offset!");
static_assert(offsetof(AEB0016_00_Rufus_Standard_AI_C, DebugMode) == 0x00240E, "Member 'AEB0016_00_Rufus_Standard_AI_C::DebugMode' has a wrong offset!");
static_assert(offsetof(AEB0016_00_Rufus_Standard_AI_C, Common_MissingDistance) == 0x002410, "Member 'AEB0016_00_Rufus_Standard_AI_C::Common_MissingDistance' has a wrong offset!");
static_assert(offsetof(AEB0016_00_Rufus_Standard_AI_C, StepNear_OffsetDistance) == 0x002414, "Member 'AEB0016_00_Rufus_Standard_AI_C::StepNear_OffsetDistance' has a wrong offset!");
static_assert(offsetof(AEB0016_00_Rufus_Standard_AI_C, StepNear_MoveFriction) == 0x002418, "Member 'AEB0016_00_Rufus_Standard_AI_C::StepNear_MoveFriction' has a wrong offset!");
static_assert(offsetof(AEB0016_00_Rufus_Standard_AI_C, StepNear_MoveSpeed) == 0x00241C, "Member 'AEB0016_00_Rufus_Standard_AI_C::StepNear_MoveSpeed' has a wrong offset!");
static_assert(offsetof(AEB0016_00_Rufus_Standard_AI_C, StepFar_OffsetDistance) == 0x002420, "Member 'AEB0016_00_Rufus_Standard_AI_C::StepFar_OffsetDistance' has a wrong offset!");
static_assert(offsetof(AEB0016_00_Rufus_Standard_AI_C, StepFar_MoveFriction) == 0x002424, "Member 'AEB0016_00_Rufus_Standard_AI_C::StepFar_MoveFriction' has a wrong offset!");
static_assert(offsetof(AEB0016_00_Rufus_Standard_AI_C, StepFar_MoveSpeed) == 0x002428, "Member 'AEB0016_00_Rufus_Standard_AI_C::StepFar_MoveSpeed' has a wrong offset!");
static_assert(offsetof(AEB0016_00_Rufus_Standard_AI_C, ShotMove_OffsetDistance) == 0x00242C, "Member 'AEB0016_00_Rufus_Standard_AI_C::ShotMove_OffsetDistance' has a wrong offset!");
static_assert(offsetof(AEB0016_00_Rufus_Standard_AI_C, ShotMove_MoveFriction) == 0x002430, "Member 'AEB0016_00_Rufus_Standard_AI_C::ShotMove_MoveFriction' has a wrong offset!");
static_assert(offsetof(AEB0016_00_Rufus_Standard_AI_C, ShotMove_MoveSpeed) == 0x002434, "Member 'AEB0016_00_Rufus_Standard_AI_C::ShotMove_MoveSpeed' has a wrong offset!");
static_assert(offsetof(AEB0016_00_Rufus_Standard_AI_C, Step_LimitTime) == 0x002438, "Member 'AEB0016_00_Rufus_Standard_AI_C::Step_LimitTime' has a wrong offset!");
static_assert(offsetof(AEB0016_00_Rufus_Standard_AI_C, ShotMove_LimitTime) == 0x00243C, "Member 'AEB0016_00_Rufus_Standard_AI_C::ShotMove_LimitTime' has a wrong offset!");
static_assert(offsetof(AEB0016_00_Rufus_Standard_AI_C, LinkEnableDistance) == 0x002440, "Member 'AEB0016_00_Rufus_Standard_AI_C::LinkEnableDistance' has a wrong offset!");
static_assert(offsetof(AEB0016_00_Rufus_Standard_AI_C, LinkInterval) == 0x002444, "Member 'AEB0016_00_Rufus_Standard_AI_C::LinkInterval' has a wrong offset!");
static_assert(offsetof(AEB0016_00_Rufus_Standard_AI_C, AttackInterval) == 0x002448, "Member 'AEB0016_00_Rufus_Standard_AI_C::AttackInterval' has a wrong offset!");
static_assert(offsetof(AEB0016_00_Rufus_Standard_AI_C, BattlePhase) == 0x00244C, "Member 'AEB0016_00_Rufus_Standard_AI_C::BattlePhase' has a wrong offset!");
static_assert(offsetof(AEB0016_00_Rufus_Standard_AI_C, TwinShot_Prob) == 0x002450, "Member 'AEB0016_00_Rufus_Standard_AI_C::TwinShot_Prob' has a wrong offset!");
static_assert(offsetof(AEB0016_00_Rufus_Standard_AI_C, BackflipShotProb) == 0x002454, "Member 'AEB0016_00_Rufus_Standard_AI_C::BackflipShotProb' has a wrong offset!");
static_assert(offsetof(AEB0016_00_Rufus_Standard_AI_C, SmokeCoin_Prob) == 0x002458, "Member 'AEB0016_00_Rufus_Standard_AI_C::SmokeCoin_Prob' has a wrong offset!");
static_assert(offsetof(AEB0016_00_Rufus_Standard_AI_C, BoostCoin_Prob) == 0x00245C, "Member 'AEB0016_00_Rufus_Standard_AI_C::BoostCoin_Prob' has a wrong offset!");
static_assert(offsetof(AEB0016_00_Rufus_Standard_AI_C, TrapCoin_Prob) == 0x002460, "Member 'AEB0016_00_Rufus_Standard_AI_C::TrapCoin_Prob' has a wrong offset!");
static_assert(offsetof(AEB0016_00_Rufus_Standard_AI_C, ExplodeCoin_Prob) == 0x002464, "Member 'AEB0016_00_Rufus_Standard_AI_C::ExplodeCoin_Prob' has a wrong offset!");
static_assert(offsetof(AEB0016_00_Rufus_Standard_AI_C, CombiName) == 0x002468, "Member 'AEB0016_00_Rufus_Standard_AI_C::CombiName' has a wrong offset!");
static_assert(offsetof(AEB0016_00_Rufus_Standard_AI_C, ChaseName) == 0x002478, "Member 'AEB0016_00_Rufus_Standard_AI_C::ChaseName' has a wrong offset!");
static_assert(offsetof(AEB0016_00_Rufus_Standard_AI_C, DarkNation_RaceName) == 0x002480, "Member 'AEB0016_00_Rufus_Standard_AI_C::DarkNation_RaceName' has a wrong offset!");
static_assert(offsetof(AEB0016_00_Rufus_Standard_AI_C, damageHitReactionID) == 0x002488, "Member 'AEB0016_00_Rufus_Standard_AI_C::damageHitReactionID' has a wrong offset!");
static_assert(offsetof(AEB0016_00_Rufus_Standard_AI_C, ShotMove_ActionType) == 0x002490, "Member 'AEB0016_00_Rufus_Standard_AI_C::ShotMove_ActionType' has a wrong offset!");
static_assert(offsetof(AEB0016_00_Rufus_Standard_AI_C, CannotCombiMotion) == 0x002498, "Member 'AEB0016_00_Rufus_Standard_AI_C::CannotCombiMotion' has a wrong offset!");
static_assert(offsetof(AEB0016_00_Rufus_Standard_AI_C, ShotMove_DoCount) == 0x0024A8, "Member 'AEB0016_00_Rufus_Standard_AI_C::ShotMove_DoCount' has a wrong offset!");
static_assert(offsetof(AEB0016_00_Rufus_Standard_AI_C, Damage) == 0x0024AC, "Member 'AEB0016_00_Rufus_Standard_AI_C::Damage' has a wrong offset!");
static_assert(offsetof(AEB0016_00_Rufus_Standard_AI_C, ShinogiLaser_Count) == 0x0024B0, "Member 'AEB0016_00_Rufus_Standard_AI_C::ShinogiLaser_Count' has a wrong offset!");
static_assert(offsetof(AEB0016_00_Rufus_Standard_AI_C, Coin_DoCount) == 0x0024B4, "Member 'AEB0016_00_Rufus_Standard_AI_C::Coin_DoCount' has a wrong offset!");
static_assert(offsetof(AEB0016_00_Rufus_Standard_AI_C, NotCancelMotion) == 0x0024B8, "Member 'AEB0016_00_Rufus_Standard_AI_C::NotCancelMotion' has a wrong offset!");
static_assert(offsetof(AEB0016_00_Rufus_Standard_AI_C, DamageTime_Short) == 0x0024C8, "Member 'AEB0016_00_Rufus_Standard_AI_C::DamageTime_Short' has a wrong offset!");
static_assert(offsetof(AEB0016_00_Rufus_Standard_AI_C, DamageTime_Middle) == 0x0024CC, "Member 'AEB0016_00_Rufus_Standard_AI_C::DamageTime_Middle' has a wrong offset!");
static_assert(offsetof(AEB0016_00_Rufus_Standard_AI_C, DamageTime_Long) == 0x0024D0, "Member 'AEB0016_00_Rufus_Standard_AI_C::DamageTime_Long' has a wrong offset!");
static_assert(offsetof(AEB0016_00_Rufus_Standard_AI_C, ShinogiAction_Ready) == 0x0024D4, "Member 'AEB0016_00_Rufus_Standard_AI_C::ShinogiAction_Ready' has a wrong offset!");
static_assert(offsetof(AEB0016_00_Rufus_Standard_AI_C, Reload_Running) == 0x0024D5, "Member 'AEB0016_00_Rufus_Standard_AI_C::Reload_Running' has a wrong offset!");
static_assert(offsetof(AEB0016_00_Rufus_Standard_AI_C, IsCancel) == 0x0024D6, "Member 'AEB0016_00_Rufus_Standard_AI_C::IsCancel' has a wrong offset!");
static_assert(offsetof(AEB0016_00_Rufus_Standard_AI_C, NotCancelAbility) == 0x0024D8, "Member 'AEB0016_00_Rufus_Standard_AI_C::NotCancelAbility' has a wrong offset!");
static_assert(offsetof(AEB0016_00_Rufus_Standard_AI_C, MAXBulletChange) == 0x0024E8, "Member 'AEB0016_00_Rufus_Standard_AI_C::MAXBulletChange' has a wrong offset!");
static_assert(offsetof(AEB0016_00_Rufus_Standard_AI_C, AbilityID_Cloud_Normal) == 0x0024F0, "Member 'AEB0016_00_Rufus_Standard_AI_C::AbilityID_Cloud_Normal' has a wrong offset!");
static_assert(offsetof(AEB0016_00_Rufus_Standard_AI_C, AbilityID_Cloud_Burst) == 0x002500, "Member 'AEB0016_00_Rufus_Standard_AI_C::AbilityID_Cloud_Burst' has a wrong offset!");
static_assert(offsetof(AEB0016_00_Rufus_Standard_AI_C, AbilityID_Cloud_Avoid) == 0x002510, "Member 'AEB0016_00_Rufus_Standard_AI_C::AbilityID_Cloud_Avoid' has a wrong offset!");
static_assert(offsetof(AEB0016_00_Rufus_Standard_AI_C, DebuffMagic) == 0x002520, "Member 'AEB0016_00_Rufus_Standard_AI_C::DebuffMagic' has a wrong offset!");
static_assert(offsetof(AEB0016_00_Rufus_Standard_AI_C, DamageID_NoReaction) == 0x002530, "Member 'AEB0016_00_Rufus_Standard_AI_C::DamageID_NoReaction' has a wrong offset!");
static_assert(offsetof(AEB0016_00_Rufus_Standard_AI_C, CombiMotion) == 0x002540, "Member 'AEB0016_00_Rufus_Standard_AI_C::CombiMotion' has a wrong offset!");
static_assert(offsetof(AEB0016_00_Rufus_Standard_AI_C, DamageID_Item_Cut) == 0x002550, "Member 'AEB0016_00_Rufus_Standard_AI_C::DamageID_Item_Cut' has a wrong offset!");
static_assert(offsetof(AEB0016_00_Rufus_Standard_AI_C, DamageID_Item_NoCut) == 0x002560, "Member 'AEB0016_00_Rufus_Standard_AI_C::DamageID_Item_NoCut' has a wrong offset!");

}

