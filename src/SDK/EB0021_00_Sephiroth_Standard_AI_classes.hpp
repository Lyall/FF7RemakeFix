#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: EB0021_00_Sephiroth_Standard_AI

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "EndGame_structs.hpp"
#include "EndGame_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass EB0021_00_Sephiroth_Standard_AI.EB0021_00_Sephiroth_Standard_AI_C
// 0x0128 (0x2438 - 0x2310)
class AEB0021_00_Sephiroth_Standard_AI_C final : public AEndBattleAIEB0021Controller
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x2310(0x0008)(Transient, DuplicateTransient)
	class UEndAITimerComponent*                   EndAITimer;                                        // 0x2318(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	int32                                         Battle_Phase;                                      // 0x2320(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                P3_JumpPoint;                                      // 0x2324(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FName>                           CounterMotion;                                     // 0x2330(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	int32                                         Cutscene_Flow_P2_1;                                // 0x2340(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Cutscene_Flow_P1;                                  // 0x2344(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Cutscene_Flow_P2_2;                                // 0x2348(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Can_Counter;                                       // 0x234C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_234D[0x3];                                     // 0x234D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Slash_Count;                                       // 0x2350(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DouchiHitCheck;                                    // 0x2354(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2355[0x3];                                     // 0x2355(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           DamageReactionMotion;                              // 0x2358(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<class FName>                           DodgeSucceed;                                      // 0x2368(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	int32                                         ReactionCount;                                     // 0x2378(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         GuardCheck;                                        // 0x237C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Phase_2_Down;                                      // 0x2380(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2381[0x3];                                     // 0x2381(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         GuardCheckNormal;                                  // 0x2384(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Phase_3_Magic_Ability;                             // 0x2388(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Phase_3_Physics_Ability;                           // 0x238C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Phase_3_Magic_Mode_Count;                          // 0x2390(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          GuardDamage;                                       // 0x2394(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          GuardBreak;                                        // 0x2395(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          GuardStart;                                        // 0x2396(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2397[0x1];                                     // 0x2397(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Phase_4_Loop_Count;                                // 0x2398(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          P2_Trigger_Event;                                  // 0x239C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Phase_2_Quick_Magic;                               // 0x239D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_239E[0x2];                                     // 0x239E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Phase_3_Normal_Mode;                               // 0x23A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SetPlay_On;                                        // 0x23A4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_23A5[0x3];                                     // 0x23A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Phase_3_Blizzard_Reinforce;                        // 0x23A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   GuardFlicked_Ability;                              // 0x23AC(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Phase_4_Meteor_Finished;                           // 0x23B4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          SetPlay_Running;                                   // 0x23B5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_23B6[0x2];                                     // 0x23B6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           EB0021_00_FireWall01;                              // 0x23B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<class FName>                           EB0021_00_FireWall02;                              // 0x23C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<class FName>                           EB0021_00_FireWall03;                              // 0x23D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<class FName>                           EB0021_00_FireWall04;                              // 0x23E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	bool                                          Phase_1_PCBurst;                                   // 0x23F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Phase_1_FallBurst;                                 // 0x23F9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Phase_2_PCBust;                                    // 0x23FA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Phase_2_FallBurst;                                 // 0x23FB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Phase_2_Bind_Zanshin;                              // 0x23FC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          PC_SetPlayStart;                                   // 0x23FD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_23FE[0x2];                                     // 0x23FE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NewVar_0;                                          // 0x2400(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Phase_2_Event_Burst;                               // 0x2404(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Phase_3_Event_Burst;                               // 0x2405(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Event_Sephiroth_2;                                 // 0x2406(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Event_Sephiroth_3;                                 // 0x2407(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Event_Sephiroth_1;                                 // 0x2408(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2409[0x3];                                     // 0x2409(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Phase_3_Random;                                    // 0x240C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Phase_1_Area02_Burst;                              // 0x2410(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Phase_1_Area03_Burst;                              // 0x2411(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2412[0x6];                                     // 0x2412(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           Phase_4_CountDown;                                 // 0x2418(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	bool                                          Phase_4_Count_Finished;                            // 0x2428(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Phase_4_MetorCut;                                  // 0x2429(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_242A[0x2];                                     // 0x242A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Phase_2_GuardBreak_HP;                             // 0x242C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Phase_2_DouchiHitCloud;                            // 0x2430(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Phase_2_Uchiai4;                                   // 0x2431(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_EB0021_00_Sephiroth_Standard_AI(int32 EntryPoint);
	void ReceiveTick(float DeltaSeconds);
	void OnSummonCutSceneEnd();
	void OnPreBurstBegin();
	void Phase_3_Senkou_Counter_Finish();
	void Phase_2_Senkou_Counter_Finish();
	void Phase_1_SenkouCounterFinish();
	void OnEventDamageOverWeakCondition(EEndBattleWeakConditionType ConditionType);
	void OnBeginAbility(class AEndCharacter* InChara, class FName InAbilityName);
	void EB0021_00_P1_SetPlay_Sephiroth_01_01();
	void Guard_Start();
	void OnMotionStateMessageBegin(class FName InMotionName, class FName InName, int32 InIntValue, float InFloatValue, float InTotalDuration);
	void OnEndCutScene(const class FName& CutsceneID);
	void OnDestroyDamageSource(const class FName& DamageSourceID, const struct FVector& Location);
	void OnCutSceneMessage(const class FName& Message);
	void OnStartSetPlay();
	void OnEndSetPlay();
	void Phase_3_Senkou_Counter();
	void Phase_2_Senkou_Counter();
	void OnFirstUpdate(EEndAiBattleRole InRole, int32 InStep);
	void OnRemoveStatusChange(EEndBattleStatusChangeType Type);
	void Phase_4_Common_Logic();
	void OnBurstBegin();
	void OnEventAddWeakCondition(EEndBattleWeakConditionType ConditionType);
	void Phase_3_Common_Logic();
	void OnTakeDamageOnce(class AEndCharacter* InCauserChara, class FName InAbilityID, bool InAttributeWeak, EEndBattleAbilityCommandType AbilityCommandType);
	void Phase_1_Common_Logic();
	void Phase_2_Common_Logic();
	void OnChangeLeader(class AEndCharacter* InLeader);
	void OnPreTakeDamage(float justHitRotYaw, class AEndCharacter* OwnerCharacter, class FName InName, class FName hitBoneName, class FName DamageSourceID, const struct FVector& hitPosition, int32 Damage, bool InGuard);
	void OnGiveDamage(int32 Damage, class AEndCharacter* InTarget, class FName InName, bool InBind, bool InGuard, bool InJustGuard, bool KeepOver, bool InDodge, bool InCounter, class FName InBoneName, bool InAttributeWeak, class FName InDamageSourceID, bool InSteal, bool heal);
	void OnHitTerrainEvent();
	void OnEventCompletedWeakCondition(EEndBattleWeakConditionType ConditionType);
	void OnBurstEnd(bool instant);
	void OnFinishTimer(class FName InName);
	void OnTakeAbilityInvoke(class AEndCharacter* causerChara, const class FName& abilityName, EEndBattleAbilityCommandType AbilityCommandType, const TArray<class FName>& AnimationNameList);
	void OnMotionStateMessageEnd(class FName InMotionName, class FName InName, int32 InIntValue, float InFloatValue);
	void OnInterceptAbility(class FName InName);
	void OnCompleteAbility(class FName InName);
	void Phase(class AActor* Attacker, int32 Damage);
	void Senkou_Counter();
	void OnMotionMessage(class FName InMotionName, class FName InName, int32 InIntValue, float InFloatValue);
	void OnCheckBindAction(class FName ActionName, int32 CheckID, int32 ComboIndex);
	void OnMotionStateMessageUpdate(class FName InMotionName, class FName InName, int32 InIntValue, float InFloatValue, float InProgress, bool LatestContactWall, bool LatestContact);
	void OnCounterCheck(class FName InTakeAbilityID, class FName InTakeMotionID, class FName InPlanAction, int32 InCount);
	void OnUpdate(EEndAiBattleRole InRole, int32 InStep, float DeltaTime);
	void OnTakeDamage(int32 Damage, class AEndCharacter* InChara, class FName InName, EEndBattleAbilityCommandType InCommandType, bool InBind, bool InGuard, bool InDodge, class FName InBoneName, bool InAttributeWeak, class FName InDmgSrcID, EEndBattleAttributeType InDmgSrcAttribute, float justHitRotYaw, const struct FVector& hitPosition, bool InHeal, bool InCounter, const struct FEndDataTableBattleDamageSource& dataTableBattleDamageSource, bool useAbilityUCPC);
	void OnCompleteGraviticJump();
	void OnEntryBattleScene();
	void ReceiveBeginPlay();
	void InpActEvt_Delete_K2Node_InputKeyEvent_0(const struct FKey& Key);
	void InpActEvt_PageDown_K2Node_InputKeyEvent_1(const struct FKey& Key);
	void InpActEvt_NumPadNine_K2Node_InputKeyEvent_2(const struct FKey& Key);
	void InpActEvt_NumPadSeven_K2Node_InputKeyEvent_3(const struct FKey& Key);
	void InpActEvt_NumPadThree_K2Node_InputKeyEvent_4(const struct FKey& Key);
	void InpActEvt_NumPadTwo_K2Node_InputKeyEvent_5(const struct FKey& Key);
	void InpActEvt_Insert_K2Node_InputKeyEvent_6(const struct FKey& Key);
	void InpActEvt_NumPadFive_K2Node_InputKeyEvent_7(const struct FKey& Key);
	void InpActEvt_PageUp_K2Node_InputKeyEvent_8(const struct FKey& Key);
	void InpActEvt_Tab_K2Node_InputKeyEvent_9(const struct FKey& Key);
	void InpActEvt_NumPadSix_K2Node_InputKeyEvent_10(const struct FKey& Key);
	void InpActEvt_Divide_K2Node_InputKeyEvent_11(const struct FKey& Key);
	void InpActEvt_Subtract_K2Node_InputKeyEvent_12(const struct FKey& Key);
	void InpActEvt_Multiply_K2Node_InputKeyEvent_13(const struct FKey& Key);
	void InpActEvt_Subtract_K2Node_InputKeyEvent_14(const struct FKey& Key);
	void InpActEvt_Decimal_K2Node_InputKeyEvent_15(const struct FKey& Key);
	void InpActEvt_S_K2Node_InputKeyEvent_16(const struct FKey& Key);
	void InpActEvt_A_K2Node_InputKeyEvent_17(const struct FKey& Key);
	void InpActEvt_Right_K2Node_InputKeyEvent_18(const struct FKey& Key);
	void InpActEvt_Left_K2Node_InputKeyEvent_19(const struct FKey& Key);
	void InpActEvt_Down_K2Node_InputKeyEvent_20(const struct FKey& Key);
	void InpActEvt_Up_K2Node_InputKeyEvent_21(const struct FKey& Key);
	void InpActEvt_V_K2Node_InputKeyEvent_22(const struct FKey& Key);
	void InpActEvt_I_K2Node_InputKeyEvent_23(const struct FKey& Key);
	void InpActEvt_NumPadFour_K2Node_InputKeyEvent_24(const struct FKey& Key);
	void Case1_83A46FB246B18A4BDE86D2ACB4D02414();
	void Case2_83A46FB246B18A4BDE86D2ACB4D02414();
	void Other_83A46FB246B18A4BDE86D2ACB4D02414();
	void InpActEvt_F_K2Node_InputKeyEvent_25(const struct FKey& Key);
	void InpActEvt_G_K2Node_InputKeyEvent_26(const struct FKey& Key);
	void InpActEvt_H_K2Node_InputKeyEvent_27(const struct FKey& Key);
	void InpActEvt_J_K2Node_InputKeyEvent_28(const struct FKey& Key);
	void InpActEvt_K_K2Node_InputKeyEvent_29(const struct FKey& Key);
	void InpActEvt_L_K2Node_InputKeyEvent_30(const struct FKey& Key);
	void Case1_16C3ABE940A93E2B0DD165B759120093();
	void Case2_16C3ABE940A93E2B0DD165B759120093();
	void Case3_16C3ABE940A93E2B0DD165B759120093();
	void Other_16C3ABE940A93E2B0DD165B759120093();
	void Case1_A17288AB44E2E6B3D4674881DEFC4539();
	void Case2_A17288AB44E2E6B3D4674881DEFC4539();
	void Case3_A17288AB44E2E6B3D4674881DEFC4539();
	void Other_A17288AB44E2E6B3D4674881DEFC4539();
	void InpActEvt_B_K2Node_InputKeyEvent_31(const struct FKey& Key);
	void InpActEvt_N_K2Node_InputKeyEvent_32(const struct FKey& Key);
	void InpActEvt_K_K2Node_InputKeyEvent_33(const struct FKey& Key);
	void InpActEvt_L_K2Node_InputKeyEvent_34(const struct FKey& Key);
	void InpActEvt_P_K2Node_InputKeyEvent_35(const struct FKey& Key);
	void InpActEvt_O_K2Node_InputKeyEvent_36(const struct FKey& Key);
	void InpActEvt_I_K2Node_InputKeyEvent_37(const struct FKey& Key);
	void InpActEvt_M_K2Node_InputKeyEvent_38(const struct FKey& Key);
	void InpActEvt_U_K2Node_InputKeyEvent_39(const struct FKey& Key);
	void InpActEvt_Y_K2Node_InputKeyEvent_40(const struct FKey& Key);
	void InpActEvt_T_K2Node_InputKeyEvent_41(const struct FKey& Key);
	void InpActEvt_R_K2Node_InputKeyEvent_42(const struct FKey& Key);
	void InpActEvt_E_K2Node_InputKeyEvent_43(const struct FKey& Key);
	void InpActEvt_W_K2Node_InputKeyEvent_44(const struct FKey& Key);
	void InpActEvt_Q_K2Node_InputKeyEvent_45(const struct FKey& Key);
	void InpActEvt_C_K2Node_InputKeyEvent_46(const struct FKey& Key);
	void InpActEvt_X_K2Node_InputKeyEvent_47(const struct FKey& Key);
	void InpActEvt_NumPadOne_K2Node_InputKeyEvent_48(const struct FKey& Key);
	void InpActEvt_Five_K2Node_InputKeyEvent_49(const struct FKey& Key);
	void InpActEvt_Four_K2Node_InputKeyEvent_50(const struct FKey& Key);
	void InpActEvt_Three_K2Node_InputKeyEvent_51(const struct FKey& Key);
	void InpActEvt_Two_K2Node_InputKeyEvent_52(const struct FKey& Key);
	void InpActEvt_Six_K2Node_InputKeyEvent_53(const struct FKey& Key);
	void InpActEvt_Nine_K2Node_InputKeyEvent_54(const struct FKey& Key);
	void InpActEvt_Eight_K2Node_InputKeyEvent_55(const struct FKey& Key);
	void InpActEvt_Seven_K2Node_InputKeyEvent_56(const struct FKey& Key);
	void InpActEvt_NumPadEight_K2Node_InputKeyEvent_57(const struct FKey& Key);
	void UserConstructionScript();
	void OverrideDamageHitReactionID(class FName AbilityID, struct FEndDataTableBattleAbility& dataTableBattleAbility, class FName DamageSourceID, bool abilityFirstHit, class FName* damageHitReactionID);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"EB0021_00_Sephiroth_Standard_AI_C">();
	}
	static class AEB0021_00_Sephiroth_Standard_AI_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AEB0021_00_Sephiroth_Standard_AI_C>();
	}
};
static_assert(alignof(AEB0021_00_Sephiroth_Standard_AI_C) == 0x000008, "Wrong alignment on AEB0021_00_Sephiroth_Standard_AI_C");
static_assert(sizeof(AEB0021_00_Sephiroth_Standard_AI_C) == 0x002438, "Wrong size on AEB0021_00_Sephiroth_Standard_AI_C");
static_assert(offsetof(AEB0021_00_Sephiroth_Standard_AI_C, UberGraphFrame) == 0x002310, "Member 'AEB0021_00_Sephiroth_Standard_AI_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AEB0021_00_Sephiroth_Standard_AI_C, EndAITimer) == 0x002318, "Member 'AEB0021_00_Sephiroth_Standard_AI_C::EndAITimer' has a wrong offset!");
static_assert(offsetof(AEB0021_00_Sephiroth_Standard_AI_C, Battle_Phase) == 0x002320, "Member 'AEB0021_00_Sephiroth_Standard_AI_C::Battle_Phase' has a wrong offset!");
static_assert(offsetof(AEB0021_00_Sephiroth_Standard_AI_C, P3_JumpPoint) == 0x002324, "Member 'AEB0021_00_Sephiroth_Standard_AI_C::P3_JumpPoint' has a wrong offset!");
static_assert(offsetof(AEB0021_00_Sephiroth_Standard_AI_C, CounterMotion) == 0x002330, "Member 'AEB0021_00_Sephiroth_Standard_AI_C::CounterMotion' has a wrong offset!");
static_assert(offsetof(AEB0021_00_Sephiroth_Standard_AI_C, Cutscene_Flow_P2_1) == 0x002340, "Member 'AEB0021_00_Sephiroth_Standard_AI_C::Cutscene_Flow_P2_1' has a wrong offset!");
static_assert(offsetof(AEB0021_00_Sephiroth_Standard_AI_C, Cutscene_Flow_P1) == 0x002344, "Member 'AEB0021_00_Sephiroth_Standard_AI_C::Cutscene_Flow_P1' has a wrong offset!");
static_assert(offsetof(AEB0021_00_Sephiroth_Standard_AI_C, Cutscene_Flow_P2_2) == 0x002348, "Member 'AEB0021_00_Sephiroth_Standard_AI_C::Cutscene_Flow_P2_2' has a wrong offset!");
static_assert(offsetof(AEB0021_00_Sephiroth_Standard_AI_C, Can_Counter) == 0x00234C, "Member 'AEB0021_00_Sephiroth_Standard_AI_C::Can_Counter' has a wrong offset!");
static_assert(offsetof(AEB0021_00_Sephiroth_Standard_AI_C, Slash_Count) == 0x002350, "Member 'AEB0021_00_Sephiroth_Standard_AI_C::Slash_Count' has a wrong offset!");
static_assert(offsetof(AEB0021_00_Sephiroth_Standard_AI_C, DouchiHitCheck) == 0x002354, "Member 'AEB0021_00_Sephiroth_Standard_AI_C::DouchiHitCheck' has a wrong offset!");
static_assert(offsetof(AEB0021_00_Sephiroth_Standard_AI_C, DamageReactionMotion) == 0x002358, "Member 'AEB0021_00_Sephiroth_Standard_AI_C::DamageReactionMotion' has a wrong offset!");
static_assert(offsetof(AEB0021_00_Sephiroth_Standard_AI_C, DodgeSucceed) == 0x002368, "Member 'AEB0021_00_Sephiroth_Standard_AI_C::DodgeSucceed' has a wrong offset!");
static_assert(offsetof(AEB0021_00_Sephiroth_Standard_AI_C, ReactionCount) == 0x002378, "Member 'AEB0021_00_Sephiroth_Standard_AI_C::ReactionCount' has a wrong offset!");
static_assert(offsetof(AEB0021_00_Sephiroth_Standard_AI_C, GuardCheck) == 0x00237C, "Member 'AEB0021_00_Sephiroth_Standard_AI_C::GuardCheck' has a wrong offset!");
static_assert(offsetof(AEB0021_00_Sephiroth_Standard_AI_C, Phase_2_Down) == 0x002380, "Member 'AEB0021_00_Sephiroth_Standard_AI_C::Phase_2_Down' has a wrong offset!");
static_assert(offsetof(AEB0021_00_Sephiroth_Standard_AI_C, GuardCheckNormal) == 0x002384, "Member 'AEB0021_00_Sephiroth_Standard_AI_C::GuardCheckNormal' has a wrong offset!");
static_assert(offsetof(AEB0021_00_Sephiroth_Standard_AI_C, Phase_3_Magic_Ability) == 0x002388, "Member 'AEB0021_00_Sephiroth_Standard_AI_C::Phase_3_Magic_Ability' has a wrong offset!");
static_assert(offsetof(AEB0021_00_Sephiroth_Standard_AI_C, Phase_3_Physics_Ability) == 0x00238C, "Member 'AEB0021_00_Sephiroth_Standard_AI_C::Phase_3_Physics_Ability' has a wrong offset!");
static_assert(offsetof(AEB0021_00_Sephiroth_Standard_AI_C, Phase_3_Magic_Mode_Count) == 0x002390, "Member 'AEB0021_00_Sephiroth_Standard_AI_C::Phase_3_Magic_Mode_Count' has a wrong offset!");
static_assert(offsetof(AEB0021_00_Sephiroth_Standard_AI_C, GuardDamage) == 0x002394, "Member 'AEB0021_00_Sephiroth_Standard_AI_C::GuardDamage' has a wrong offset!");
static_assert(offsetof(AEB0021_00_Sephiroth_Standard_AI_C, GuardBreak) == 0x002395, "Member 'AEB0021_00_Sephiroth_Standard_AI_C::GuardBreak' has a wrong offset!");
static_assert(offsetof(AEB0021_00_Sephiroth_Standard_AI_C, GuardStart) == 0x002396, "Member 'AEB0021_00_Sephiroth_Standard_AI_C::GuardStart' has a wrong offset!");
static_assert(offsetof(AEB0021_00_Sephiroth_Standard_AI_C, Phase_4_Loop_Count) == 0x002398, "Member 'AEB0021_00_Sephiroth_Standard_AI_C::Phase_4_Loop_Count' has a wrong offset!");
static_assert(offsetof(AEB0021_00_Sephiroth_Standard_AI_C, P2_Trigger_Event) == 0x00239C, "Member 'AEB0021_00_Sephiroth_Standard_AI_C::P2_Trigger_Event' has a wrong offset!");
static_assert(offsetof(AEB0021_00_Sephiroth_Standard_AI_C, Phase_2_Quick_Magic) == 0x00239D, "Member 'AEB0021_00_Sephiroth_Standard_AI_C::Phase_2_Quick_Magic' has a wrong offset!");
static_assert(offsetof(AEB0021_00_Sephiroth_Standard_AI_C, Phase_3_Normal_Mode) == 0x0023A0, "Member 'AEB0021_00_Sephiroth_Standard_AI_C::Phase_3_Normal_Mode' has a wrong offset!");
static_assert(offsetof(AEB0021_00_Sephiroth_Standard_AI_C, SetPlay_On) == 0x0023A4, "Member 'AEB0021_00_Sephiroth_Standard_AI_C::SetPlay_On' has a wrong offset!");
static_assert(offsetof(AEB0021_00_Sephiroth_Standard_AI_C, Phase_3_Blizzard_Reinforce) == 0x0023A8, "Member 'AEB0021_00_Sephiroth_Standard_AI_C::Phase_3_Blizzard_Reinforce' has a wrong offset!");
static_assert(offsetof(AEB0021_00_Sephiroth_Standard_AI_C, GuardFlicked_Ability) == 0x0023AC, "Member 'AEB0021_00_Sephiroth_Standard_AI_C::GuardFlicked_Ability' has a wrong offset!");
static_assert(offsetof(AEB0021_00_Sephiroth_Standard_AI_C, Phase_4_Meteor_Finished) == 0x0023B4, "Member 'AEB0021_00_Sephiroth_Standard_AI_C::Phase_4_Meteor_Finished' has a wrong offset!");
static_assert(offsetof(AEB0021_00_Sephiroth_Standard_AI_C, SetPlay_Running) == 0x0023B5, "Member 'AEB0021_00_Sephiroth_Standard_AI_C::SetPlay_Running' has a wrong offset!");
static_assert(offsetof(AEB0021_00_Sephiroth_Standard_AI_C, EB0021_00_FireWall01) == 0x0023B8, "Member 'AEB0021_00_Sephiroth_Standard_AI_C::EB0021_00_FireWall01' has a wrong offset!");
static_assert(offsetof(AEB0021_00_Sephiroth_Standard_AI_C, EB0021_00_FireWall02) == 0x0023C8, "Member 'AEB0021_00_Sephiroth_Standard_AI_C::EB0021_00_FireWall02' has a wrong offset!");
static_assert(offsetof(AEB0021_00_Sephiroth_Standard_AI_C, EB0021_00_FireWall03) == 0x0023D8, "Member 'AEB0021_00_Sephiroth_Standard_AI_C::EB0021_00_FireWall03' has a wrong offset!");
static_assert(offsetof(AEB0021_00_Sephiroth_Standard_AI_C, EB0021_00_FireWall04) == 0x0023E8, "Member 'AEB0021_00_Sephiroth_Standard_AI_C::EB0021_00_FireWall04' has a wrong offset!");
static_assert(offsetof(AEB0021_00_Sephiroth_Standard_AI_C, Phase_1_PCBurst) == 0x0023F8, "Member 'AEB0021_00_Sephiroth_Standard_AI_C::Phase_1_PCBurst' has a wrong offset!");
static_assert(offsetof(AEB0021_00_Sephiroth_Standard_AI_C, Phase_1_FallBurst) == 0x0023F9, "Member 'AEB0021_00_Sephiroth_Standard_AI_C::Phase_1_FallBurst' has a wrong offset!");
static_assert(offsetof(AEB0021_00_Sephiroth_Standard_AI_C, Phase_2_PCBust) == 0x0023FA, "Member 'AEB0021_00_Sephiroth_Standard_AI_C::Phase_2_PCBust' has a wrong offset!");
static_assert(offsetof(AEB0021_00_Sephiroth_Standard_AI_C, Phase_2_FallBurst) == 0x0023FB, "Member 'AEB0021_00_Sephiroth_Standard_AI_C::Phase_2_FallBurst' has a wrong offset!");
static_assert(offsetof(AEB0021_00_Sephiroth_Standard_AI_C, Phase_2_Bind_Zanshin) == 0x0023FC, "Member 'AEB0021_00_Sephiroth_Standard_AI_C::Phase_2_Bind_Zanshin' has a wrong offset!");
static_assert(offsetof(AEB0021_00_Sephiroth_Standard_AI_C, PC_SetPlayStart) == 0x0023FD, "Member 'AEB0021_00_Sephiroth_Standard_AI_C::PC_SetPlayStart' has a wrong offset!");
static_assert(offsetof(AEB0021_00_Sephiroth_Standard_AI_C, NewVar_0) == 0x002400, "Member 'AEB0021_00_Sephiroth_Standard_AI_C::NewVar_0' has a wrong offset!");
static_assert(offsetof(AEB0021_00_Sephiroth_Standard_AI_C, Phase_2_Event_Burst) == 0x002404, "Member 'AEB0021_00_Sephiroth_Standard_AI_C::Phase_2_Event_Burst' has a wrong offset!");
static_assert(offsetof(AEB0021_00_Sephiroth_Standard_AI_C, Phase_3_Event_Burst) == 0x002405, "Member 'AEB0021_00_Sephiroth_Standard_AI_C::Phase_3_Event_Burst' has a wrong offset!");
static_assert(offsetof(AEB0021_00_Sephiroth_Standard_AI_C, Event_Sephiroth_2) == 0x002406, "Member 'AEB0021_00_Sephiroth_Standard_AI_C::Event_Sephiroth_2' has a wrong offset!");
static_assert(offsetof(AEB0021_00_Sephiroth_Standard_AI_C, Event_Sephiroth_3) == 0x002407, "Member 'AEB0021_00_Sephiroth_Standard_AI_C::Event_Sephiroth_3' has a wrong offset!");
static_assert(offsetof(AEB0021_00_Sephiroth_Standard_AI_C, Event_Sephiroth_1) == 0x002408, "Member 'AEB0021_00_Sephiroth_Standard_AI_C::Event_Sephiroth_1' has a wrong offset!");
static_assert(offsetof(AEB0021_00_Sephiroth_Standard_AI_C, Phase_3_Random) == 0x00240C, "Member 'AEB0021_00_Sephiroth_Standard_AI_C::Phase_3_Random' has a wrong offset!");
static_assert(offsetof(AEB0021_00_Sephiroth_Standard_AI_C, Phase_1_Area02_Burst) == 0x002410, "Member 'AEB0021_00_Sephiroth_Standard_AI_C::Phase_1_Area02_Burst' has a wrong offset!");
static_assert(offsetof(AEB0021_00_Sephiroth_Standard_AI_C, Phase_1_Area03_Burst) == 0x002411, "Member 'AEB0021_00_Sephiroth_Standard_AI_C::Phase_1_Area03_Burst' has a wrong offset!");
static_assert(offsetof(AEB0021_00_Sephiroth_Standard_AI_C, Phase_4_CountDown) == 0x002418, "Member 'AEB0021_00_Sephiroth_Standard_AI_C::Phase_4_CountDown' has a wrong offset!");
static_assert(offsetof(AEB0021_00_Sephiroth_Standard_AI_C, Phase_4_Count_Finished) == 0x002428, "Member 'AEB0021_00_Sephiroth_Standard_AI_C::Phase_4_Count_Finished' has a wrong offset!");
static_assert(offsetof(AEB0021_00_Sephiroth_Standard_AI_C, Phase_4_MetorCut) == 0x002429, "Member 'AEB0021_00_Sephiroth_Standard_AI_C::Phase_4_MetorCut' has a wrong offset!");
static_assert(offsetof(AEB0021_00_Sephiroth_Standard_AI_C, Phase_2_GuardBreak_HP) == 0x00242C, "Member 'AEB0021_00_Sephiroth_Standard_AI_C::Phase_2_GuardBreak_HP' has a wrong offset!");
static_assert(offsetof(AEB0021_00_Sephiroth_Standard_AI_C, Phase_2_DouchiHitCloud) == 0x002430, "Member 'AEB0021_00_Sephiroth_Standard_AI_C::Phase_2_DouchiHitCloud' has a wrong offset!");
static_assert(offsetof(AEB0021_00_Sephiroth_Standard_AI_C, Phase_2_Uchiai4) == 0x002431, "Member 'AEB0021_00_Sephiroth_Standard_AI_C::Phase_2_Uchiai4' has a wrong offset!");

}

